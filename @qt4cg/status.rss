<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>@qt4cg</title><link>https://qt4cg.org/@qt4cg/</link><description>QT4 CG status feed.</description><language>en-us</language><pubDate>Tue, 16 Sep 2025 16:19:52 GMT</pubDate><lastBuildDate>Tue, 16 Sep 2025 16:21:02 GMT</lastBuildDate><managingEditor>ndw@nwalsh.com</managingEditor><webMaster>ndw@nwalsh.com</webMaster><item>
   <title>Issue #2179 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:19:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2179</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2179</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespace declarations in XPath&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2181 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:19:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2181</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2181</guid>
   <description>&lt;div&gt;&lt;p&gt;2179 Add namespace declarations to XPath grammar&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2178 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:16:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2178</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2178</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery predeclared namespaces&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2182 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:16:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2182</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2182</guid>
   <description>&lt;div&gt;&lt;p&gt;2178 Define predeclared namespaces for XQuery&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2187 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:12:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2187</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2187</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion to enum()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2188 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:12:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2188</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2188</guid>
   <description>&lt;div&gt;&lt;p&gt;2187 Add coercion rule for enumeration types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2163 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:08:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2163</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2163</guid>
   <description>&lt;div&gt;&lt;p&gt;Method calls: `?&amp;gt;` or` =?&amp;gt;`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2171 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:08:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2171</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2171</guid>
   <description>&lt;div&gt;&lt;p&gt;2163 Change ?&amp;gt; symbol to =?&amp;gt;&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #670 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:08:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/670</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-670</guid>
   <description>&lt;div&gt;&lt;p&gt;The trouble with XPath’s fn:fold-right. A fix and Proposal for fn:fold-lazy&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1868 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:07:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1868</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1868</guid>
   <description>&lt;div&gt;&lt;p&gt;array:members() to include index position&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1912 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:07:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1912</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1912</guid>
   <description>&lt;div&gt;&lt;p&gt;Error handling: `fn:throw`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2034 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:07:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2034</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2034</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-xml, fn:doc: `safe` option&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2161 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:07:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2161</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2161</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop other non-ASCII operators (×, ÷)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #576 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:07:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/576</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-576</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON serialization: INF/NaN, function items&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #158 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:07:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/158</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-158</guid>
   <description>&lt;div&gt;&lt;p&gt;Support optional parameters on dynamic functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #105 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:07:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/105</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-105</guid>
   <description>&lt;div&gt;&lt;p&gt;Maps with Infinite Number of Keys: Total Maps and Decorated maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2173 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:06:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2173</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2173</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect Cardinality on MethodAnnotation reference&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2174 closed</title>
   <pubDate>Tue, 16 Sep 2025 16:06:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2174</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2174</guid>
   <description>&lt;div&gt;&lt;p&gt;2173 Drop method annotations from XPath grammar&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2194 created</title>
   <pubDate>Mon, 15 Sep 2025 07:52:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2194</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2194</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:transform sandbox=yes option&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose an option sandbox=yes for fn:transform, with the effect that the executed stylesheet has no means of accessing or updating external information other than via the fn:transform parameters and result value.&lt;/p&gt;
&lt;p&gt;This is to provide an effective and portable way of executing untrusted code.&lt;/p&gt;
&lt;p&gt;There are various ways one might specify it: the simplest would be just to state the intent (as in the sentence above) and leave implementations to work out the detail.&lt;/p&gt;
&lt;p&gt;An API might also allow transformations to be executed in a sandbox, but that of course is outside our control.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2193 created</title>
   <pubDate>Mon, 15 Sep 2025 06:58:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2193</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2193</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-xml, fn:doc: Drop security options&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Related: #2034, #1270.&lt;/p&gt;
&lt;p&gt;I propose to drop the &lt;code&gt;allow-external-entities&lt;/code&gt; and &lt;code&gt;entity-expansion-limit&lt;/code&gt; options. They reflect only some of various existing limits that XML parsers provide.&lt;/p&gt;
&lt;p&gt;Instead, it seems more reasonable to define such limits globally. It remains to be shown whether we find an implementation-oblivious approach for this.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2192 closed</title>
   <pubDate>Sat, 13 Sep 2025 09:40:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2192</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2192</guid>
   <description>&lt;div&gt;&lt;p&gt;Upgrade build system to use Saxon 12.9&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2192 created</title>
   <pubDate>Sat, 13 Sep 2025 09:40:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2192</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2192</guid>
   <description>&lt;div&gt;&lt;p&gt;Upgrade build system to use Saxon 12.9&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I skimmed all the specs and nothing looks wrong; I'm going to go ahead and merge this but please report any problems you find that you think might be related.,&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2191 created</title>
   <pubDate>Tue, 9 Sep 2025 19:32:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2191</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2191</guid>
   <description>&lt;div&gt;&lt;p&gt;2075 Editorial Omnibus&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2075&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2190 created</title>
   <pubDate>Tue, 9 Sep 2025 14:08:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2190</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2190</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-csv() from binary: what encoding?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have extended &lt;code&gt;parse-csv()&lt;/code&gt; -- and introduced &lt;code&gt;csv-doc()&lt;/code&gt; -- with the ability to read binary input. But we don't provide any way to specify an encoding, and we give no rules for inferring an encoding if none is specified.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2189 created</title>
   <pubDate>Tue, 9 Sep 2025 11:01:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2189</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2189</guid>
   <description>&lt;div&gt;&lt;p&gt;2180 Clarify paths mixing XNodes and JNodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2180&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2188 created</title>
   <pubDate>Tue, 9 Sep 2025 08:13:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2188</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2188</guid>
   <description>&lt;div&gt;&lt;p&gt;2187 Add coercion rule for enumeration types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2187&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2187 created</title>
   <pubDate>Mon, 8 Sep 2025 16:32:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2187</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2187</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion to enum()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XQuery §3.2.6 states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By contrast, xs:untypedAtomic("red") instance of enum("red", "green", "blue") returns false; but the [coercion rules] ensure that where a variable or function declaration specifies an enumeration type as the required type, an xs:untypedAtomic or xs:anyURI value equal to one of the enumerated values will be accepted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, looking at the coercion rules, this appears not to be the case.&lt;/p&gt;
&lt;p&gt;It seems intuitive that an untypedAtomic value should match an enumeration type (otherwise if the required type is &lt;code&gt;enum("yes", "no")&lt;/code&gt;, supplying an attribute whose value is "yes" will fail). And since we generally treat string, untypedAtomic, and anyURI as a single family for equality comparison, it makes sense to accept anyURI as well.&lt;/p&gt;
&lt;p&gt;Test case DynamicFunctionCall-136 applies.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2186 created</title>
   <pubDate>Mon, 8 Sep 2025 13:57:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2186</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2186</guid>
   <description>&lt;div&gt;&lt;p&gt;Adaptive serialization of JNodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I would like to propose a change here so that instead of only outputting the &lt;code&gt;content&lt;/code&gt; property of the JNode, we also output the &lt;code&gt;selector&lt;/code&gt; property (if present).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2185 created</title>
   <pubDate>Sun, 7 Sep 2025 14:42:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2185</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2185</guid>
   <description>&lt;div&gt;&lt;p&gt;Request for an `fn:xproc` function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I would like to see consideration given to adding an &lt;code&gt;fn:xproc&lt;/code&gt; function please. We have an &lt;code&gt;fn:invisible-xml&lt;/code&gt;, so why not an &lt;code&gt;fn:xproc&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I think a potential function signature could look like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:xproc($xproc as document-node(element(p:declare-step), $options as map(xs:string, item()+))&lt;/code&gt; as map(xs:string, item()*)`&lt;/p&gt;
&lt;p&gt;Map keys/values for &lt;code&gt;$options&lt;/code&gt; could be something like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"input": Map { "name": "some-name", Map { "type": "some-type", "value": item()* }}&lt;/li&gt;
&lt;li&gt;"option": Map {"name": "some-name", Map { "type": "some-type", "value": item()* }}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Implementers are free to add additional key/value options to the &lt;code&gt;$options&lt;/code&gt; map.&lt;/p&gt;
&lt;p&gt;The result of the transformation is returned as a map. There is one entry in the map for the default output port, and one for each secondary output port. The key is an xs:string value. The key for the default output port is the string "default" otherwise. The key for secondary output ports, is the name of the port.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2183 closed</title>
   <pubDate>Sat, 6 Sep 2025 19:02:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2183</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2183</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting of specref and xspecref&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2184 closed</title>
   <pubDate>Fri, 5 Sep 2025 12:09:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2184</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2184</guid>
   <description>&lt;div&gt;&lt;p&gt;2183 Improve rendition of cross-spec references&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2184 created</title>
   <pubDate>Fri, 5 Sep 2025 12:01:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2184</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2184</guid>
   <description>&lt;div&gt;&lt;p&gt;2183 Improve rendition of cross-spec references&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changes the rendition of xspecref elements to use the form &lt;code&gt;[XPath 4.0] section [3.2.2 Heading]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Standardises the form of bibref references to other specs (e.g. &lt;code&gt;[XPath 4.0]&lt;/code&gt;) across the various specifications&lt;/li&gt;
&lt;li&gt;Updates a number of references that were out of date (e.g. XDM 3.0 -&amp;gt; XDM 4.0)&lt;/li&gt;
&lt;li&gt;Tidies up a few individual cases where the references were inappropriate or incorrect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: contains stylesheet changes&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2183 created</title>
   <pubDate>Fri, 5 Sep 2025 09:11:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2183</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2183</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting of specref and xspecref&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The following paragraph contains a &lt;code&gt;specref&lt;/code&gt; and an &lt;code&gt;xspecref&lt;/code&gt; (rendition approximated):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The complete grammar for patterns is listed in &lt;strong&gt;E Pattern Syntax Summary&lt;/strong&gt;. It uses the notation defined in &lt;strong&gt;Section A.1.1 Notation&lt;sup&gt;XP&lt;/sup&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There's no particular reason why the prefix "Section" is used in one case and not the other.&lt;/p&gt;
&lt;p&gt;At the same time, I think the superscript notation doesn't make it clear enough that the reference is to a different spec. I suggest that we render this as&lt;/p&gt;
&lt;p&gt;... the notation defined in [XPath] section [A.1.1 Notation] ...&lt;/p&gt;
&lt;p&gt;where [XPath] is a clickable bibref to the spec in question, and [A.1.1 Notation] is a clickable link to the the relevant section of that spec. And perhaps "section" should be "appendix" where appropriate.&lt;/p&gt;
&lt;p&gt;I would propose to retain the suffix notation for xtermref and xnt.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2182 created</title>
   <pubDate>Thu, 4 Sep 2025 22:31:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2182</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2182</guid>
   <description>&lt;div&gt;&lt;p&gt;2178 Define predeclared namespaces for XQuery&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2178&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2181 created</title>
   <pubDate>Thu, 4 Sep 2025 20:10:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2181</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2181</guid>
   <description>&lt;div&gt;&lt;p&gt;2179 Add namespace declarations to XPath grammar&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2179&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2180 created</title>
   <pubDate>Thu, 4 Sep 2025 15:08:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2180</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2180</guid>
   <description>&lt;div&gt;&lt;p&gt;Clarify `$array/attribute(id)` vs `$array/type(attribute(id))`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I am creating test JAxes-326 which does&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         let $xml := parse-xml("&amp;lt;doc&amp;gt;&amp;lt;p id='a17'/&amp;gt;&amp;lt;p id='a18'/&amp;gt;&amp;lt;/doc&amp;gt;")
         let $array := [$xml//p[@id='a17'], $xml//@id[.='a18']]
         return $array/type(attribute(id)) =&amp;gt; string()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is, it constructs an array whose members are element or attribute nodes&lt;/p&gt;
&lt;p&gt;I think that if we write &lt;code&gt;$array/attribute(id)&lt;/code&gt; then the following rule kicks into play:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the axis name is omitted from an [axis step], the default axis is child, with two exceptions: (1) if the [NodeTest] in an axis step contains an [AttributeTest] or [SchemaAttributeTest] then the default axis is attribute;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is, this is equivalent to &lt;code&gt;$array/attribute::id&lt;/code&gt;, and the attribute axis from a JNode is always empty.&lt;/p&gt;
&lt;p&gt;Whereas if we write&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$array/type(attribute(id))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then the default axis is child, we are selecting the members of the array whose type is attribute(id), so the query returns "a18".&lt;/p&gt;
&lt;p&gt;A note to clarify this case, and perhaps more generally to clarify how path expressions that mix JNodes and XNodes work, would be helpful.&lt;/p&gt;
&lt;p&gt;§4.6.4.5 says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the most commonly encountered types, this syntax can be abbreviated: for example node(), text(), array(*), and record(x, y) can be written directly without the enclosing type(...).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and this perhaps needs expanding to explain that for attribute(), and perhaps also for other XNode tests, this equivalence might not apply.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2179 created</title>
   <pubDate>Thu, 4 Sep 2025 09:21:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2179</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2179</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespace declarations in XPath&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think we've had this issue before but I'd like to reopen it.&lt;/p&gt;
&lt;p&gt;It should be possible for an XPath expression to declare namespace prefixes rather than relying on the host language.&lt;/p&gt;
&lt;p&gt;I propose that we use syntax compatible with XQuery.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;XPathExpr := (NamespaceDecl ';')* Expr

NamespaceDecl := "declare" "namespace" NCName "=" URILiteral
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2178 created</title>
   <pubDate>Sat, 30 Aug 2025 17:56:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2178</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2178</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery predeclared namespaces&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XQuery §5.13 says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XQuery has several predeclared namespace prefixes, which are listed in [2.1.4 Namespaces and QNames]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However §2.1.4 says only:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This document uses the following namespace prefixes to represent the namespace URIs with which they are listed. Although these prefixes are used within this specification to refer to the corresponding namespaces, not all of these bindings will necessarily be present in the static context of every expression, and authors are free to use different prefixes for these namespaces, or to bind these prefixes to different namespaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;§2.2.1 says "Some namespaces are predefined;" without saying which.&lt;/p&gt;
&lt;p&gt;§B.1 says that the "default initial value" for in-scope-namespaces contains the prefixes fn, xml, xs, xsi, local ("if not overridden or augmented by the implementation")&lt;/p&gt;
&lt;p&gt;Test case &lt;code&gt;annotation-assertion-40-07&lt;/code&gt; assumes that the namespace prefix xq is necessarily predeclared, but I cannot see any justification for this in the spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2177 created</title>
   <pubDate>Fri, 29 Aug 2025 18:46:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2177</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2177</guid>
   <description>&lt;div&gt;&lt;p&gt;F+O: improve cross-referencing between functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Cross-referencing between functions in the F+O spec is somewhat haphazard. For example, the spec of distinct-values refers normatively to the spec of deep-equal, yet there is no hyperlink.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2176 created</title>
   <pubDate>Fri, 22 Aug 2025 22:52:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2176</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2176</guid>
   <description>&lt;div&gt;&lt;p&gt;2130 encore: precedes-or-is, follows-or-is&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In #2130 we introduced &lt;code&gt;is-not&lt;/code&gt;, which is the union of &lt;code&gt;precedes&lt;/code&gt; and &lt;code&gt;follows&lt;/code&gt;. This PR follows that lead by creating two new operators, one for the union of &lt;code&gt;precedes&lt;/code&gt; with &lt;code&gt;is&lt;/code&gt; and the other for the union of &lt;code&gt;follows&lt;/code&gt; with &lt;code&gt;is&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I realize this modification provides only a convenience and not new utility, so if it is deemed unnecessary by the CG, that's okay.&lt;/p&gt;
&lt;p&gt;I have opted for &lt;code&gt;precedes-or-is&lt;/code&gt; and not &lt;code&gt;is-or-precedes&lt;/code&gt; on analogy with &lt;code&gt;ancestor-or-self::*&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2175 created</title>
   <pubDate>Thu, 21 Aug 2025 17:36:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2175</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2175</guid>
   <description>&lt;div&gt;&lt;p&gt;2093 Rearrange the order and grouping of functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Hopefully the arrangement is now a bit more logical.&lt;/p&gt;
&lt;p&gt;Fix #2093&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2174 created</title>
   <pubDate>Thu, 21 Aug 2025 16:26:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2174</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2174</guid>
   <description>&lt;div&gt;&lt;p&gt;2173 Drop method annotations from XPath grammar&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The MethodAnnotation construct should have been dropped from the XPath grammar when we changed the mechanism for methods.&lt;/p&gt;
&lt;p&gt;Fix #2173&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1340 closed</title>
   <pubDate>Thu, 21 Aug 2025 16:16:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1340</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1340</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespace nodes and the namespace axis&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2173 created</title>
   <pubDate>Thu, 21 Aug 2025 13:11:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2173</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2173</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect Cardinality on MethodAnnotation reference&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the current EBNF:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;InlineFunctionExpr 	::= 	MethodAnnotation* ("function" | "fn") FunctionSignature? FunctionBody 
...
MethodAnnotation 	::= 	"%method"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which implies &lt;code&gt;method% method% method% fn{}&lt;/code&gt; would be valid, but perhaps a little senseless. Should the reference perhaps be &lt;code&gt;MethodAnnotation?&lt;/code&gt;  ?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2171 created</title>
   <pubDate>Wed, 20 Aug 2025 10:46:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2171</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2171</guid>
   <description>&lt;div&gt;&lt;p&gt;2163 Change ?&amp;gt; symbol to =?&amp;gt;&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2163&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2112 closed</title>
   <pubDate>Wed, 20 Aug 2025 10:32:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2112</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2112</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: get()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2116 closed</title>
   <pubDate>Wed, 20 Aug 2025 10:32:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2116</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2116</guid>
   <description>&lt;div&gt;&lt;p&gt;2112 Refine/revise the rules for get() in node tests&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2167 closed</title>
   <pubDate>Wed, 20 Aug 2025 10:17:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2167</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2167</guid>
   <description>&lt;div&gt;&lt;p&gt;2166 Reinstate lost text for lookup expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2166 closed</title>
   <pubDate>Wed, 20 Aug 2025 10:17:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2166</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2166</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup expressions: we have deleted too much text&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2126 closed</title>
   <pubDate>Tue, 19 Aug 2025 22:38:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2126</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2126</guid>
   <description>&lt;div&gt;&lt;p&gt;Absolute path expressions with JTrees&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 133 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 19 Aug 2025 16:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/08-19</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—08-19</guid>
</item><item>
   <title>Issue #2139 closed</title>
   <pubDate>Tue, 19 Aug 2025 15:56:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2139</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2139</guid>
   <description>&lt;div&gt;&lt;p&gt;Binary comparisons&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2168 closed</title>
   <pubDate>Tue, 19 Aug 2025 15:56:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2168</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2168</guid>
   <description>&lt;div&gt;&lt;p&gt;2139 Make hexBinary and base64Binary fully comparable&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2162 closed</title>
   <pubDate>Tue, 19 Aug 2025 15:55:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2162</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2162</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-132-04 Expand the rectangle?area example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2143 closed</title>
   <pubDate>Tue, 19 Aug 2025 15:48:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2143</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2143</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes and Methods&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1714 closed</title>
   <pubDate>Tue, 19 Aug 2025 15:48:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1714</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1714</guid>
   <description>&lt;div&gt;&lt;p&gt;sibling:: axis. Action Item QT4CG-097-03&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #350 closed</title>
   <pubDate>Tue, 19 Aug 2025 15:47:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/350</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-350</guid>
   <description>&lt;div&gt;&lt;p&gt;CompPath (Composite-objects path) Expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #119 closed</title>
   <pubDate>Tue, 19 Aug 2025 15:47:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/119</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-119</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow a map's key value to be any sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #106 closed</title>
   <pubDate>Tue, 19 Aug 2025 15:47:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/106</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-106</guid>
   <description>&lt;div&gt;&lt;p&gt;Decorators' support&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #34 closed</title>
   <pubDate>Tue, 19 Aug 2025 15:47:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/34</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-34</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal to introduce the set datatype in XPath 4&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2164 closed</title>
   <pubDate>Tue, 19 Aug 2025 15:45:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2164</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2164</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix return type in `fn:parse-csv` signature&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2072 closed</title>
   <pubDate>Tue, 19 Aug 2025 15:14:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2072</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2072</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: accessing properties&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2170 closed</title>
   <pubDate>Mon, 18 Aug 2025 15:46:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2170</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2170</guid>
   <description>&lt;div&gt;&lt;p&gt;The current "?&amp;gt;" method call operator is ugly, difficult to read, difficult to find and understand. We have much better alternatives.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2170 created</title>
   <pubDate>Mon, 18 Aug 2025 15:17:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2170</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2170</guid>
   <description>&lt;div&gt;&lt;p&gt;The current "?&amp;gt;" method call operator is ugly, difficult to read, difficult to find and understand. We have much better alternatives.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current "&lt;strong&gt;&lt;em&gt;?&amp;gt;&lt;/em&gt;&lt;/strong&gt;" method call operator is ugly, difficult to read, difficult to find and understand. We have much better alternatives.&lt;/p&gt;
&lt;p&gt;One obvious big improvement is to have  &lt;strong&gt;&lt;em&gt;&lt;code&gt;==&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;This is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Readable.&lt;/li&gt;
&lt;li&gt;Distinctly distinguishable.&lt;/li&gt;
&lt;li&gt;Understandable and intuitive for anyone who has used an OOP language (C++, C#, Java)&lt;/li&gt;
&lt;li&gt;Expresses the similarity with the &lt;strong&gt;&lt;em&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; operator. The same way &lt;strong&gt;&lt;em&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; provide the LHS item as the first argument of the RHS function, the similar, and extended, in appearance  &lt;strong&gt;&lt;em&gt;&lt;code&gt;==&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; provides the LHS map/object as an implicit argument to the RHS method.&lt;/li&gt;
&lt;li&gt;Because of 1, 2, 3, and 4 above, very little additional learning and understanding effort is required from the XPath user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Proposed action&lt;/strong&gt;: Replace the ugly, difficult to read, difficult to find and understand operator "&lt;strong&gt;&lt;em&gt;?&amp;gt;&lt;/em&gt;&lt;/strong&gt;" with &lt;strong&gt;&lt;em&gt;&lt;code&gt;==&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; .&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 133 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 18 Aug 2025 10:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/08-19</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-08-19</guid>
</item><item>
   <title>Issue #1938 closed</title>
   <pubDate>Sat, 16 Aug 2025 18:10:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1938</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1938</guid>
   <description>&lt;div&gt;&lt;p&gt;Invoking coerced methods&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2169 created</title>
   <pubDate>Sat, 16 Aug 2025 17:34:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2169</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2169</guid>
   <description>&lt;div&gt;&lt;p&gt;Longest-token rule incorrectly produces `StringInterpolation` delimiter&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;StringInterpolation&lt;/code&gt; currently defines a two-character token, curly right brace + backtick, to follow &lt;code&gt;Expr&lt;/code&gt; as a terminator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StringInterpolation ::= "`{" Expr? "}`"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On other occasions, &lt;code&gt;Expr&lt;/code&gt; is followed by a single right curly brace:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EnclosedExpr ::= "{" Expr? "}"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following applies to tokenization (the "longest-token" rule):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the current position is not the end of the input, then return the longest literal terminal or variable terminal that can be matched starting at the current position, regardless whether this terminal is valid at this point in the grammar.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My concern is that input like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;a&amp;gt;{42}`&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is going to be mis-tokenized under the longest-token rule: after &lt;code&gt;42&lt;/code&gt;, the next (longest) token is the two-character &lt;code&gt;StringInterpolation&lt;/code&gt; terminator, which however is not a valid terminator of the &lt;code&gt;EnclosedExpr&lt;/code&gt; serving as &lt;code&gt;CommonContent&lt;/code&gt; of the direct element constructor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proposed fix&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My proposal is to replace the two-character tokens that introduce and terminate &lt;code&gt;StringInterpolation&lt;/code&gt; with single backticks around an &lt;code&gt;EnclosedExpr&lt;/code&gt; with no intervening whitespace:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StringInterpolation ::= "`" EnclosedExpr "`"   /* ws: explicit */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This replaces both of the two-character delimiters of &lt;code&gt;StringInterpolation&lt;/code&gt;, while still describing the intended language, but without causing the longest-token rule to produce a token that cannot be handled afterwards.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1736 closed</title>
   <pubDate>Fri, 15 Aug 2025 08:52:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1736</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1736</guid>
   <description>&lt;div&gt;&lt;p&gt;Add option retain-order=false when constructing maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2168 created</title>
   <pubDate>Thu, 14 Aug 2025 19:33:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2168</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2168</guid>
   <description>&lt;div&gt;&lt;p&gt;2139 Make hexBinary and base64Binary fully comparable&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2139&lt;/p&gt;
&lt;p&gt;hexBinary and base64Binary become mutually comparable under all comparison operators: which may affect backward compatibility.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2167 created</title>
   <pubDate>Thu, 14 Aug 2025 17:59:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2167</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2167</guid>
   <description>&lt;div&gt;&lt;p&gt;2166 Reinstate lost text for lookup expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2166&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2166 created</title>
   <pubDate>Thu, 14 Aug 2025 09:40:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2166</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2166</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup expressions: we have deleted too much text&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In reverting many of the features previously added to lookup expressions (for example deep lookup and lookup modifiers) we seem to have accidentally lost text that actually defines what the different key specifiers mean; we're left with lots of examples but no actual specification.&lt;/p&gt;
&lt;p&gt;I was reading to see what the current spec says about array bound checking: it appears to say nothing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2165 created</title>
   <pubDate>Thu, 14 Aug 2025 08:58:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2165</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2165</guid>
   <description>&lt;div&gt;&lt;p&gt;Treat expression: inconsistencies, questionable uses&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Related: Michael’s observation in https://github.com/qt4cg/qtspecs/issues/2163#issuecomment-3185618064.&lt;/p&gt;
&lt;p&gt;The current spec says for &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-treat"&gt;treat&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XPath 4.0 provides an expression called treat that can be used to modify the &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-static-type"&gt;static type&lt;/a&gt; of its operand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It further mentions the static analysis phase, which has been removed from the specs; maybe we should remove these references.&lt;/p&gt;
&lt;p&gt;There are hardly any uses of the expression in the current spec. One is for &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-absolute-path-expressions"&gt;Absolute Path Expressions&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An expression of the form &lt;code&gt;/PP&lt;/code&gt; (that is, a &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-path-expression"&gt;path expression&lt;/a&gt; with a leading &lt;code&gt;/&lt;/code&gt;) is treated as an abbreviation for the expression &lt;code&gt;self::gnode()/(fn:root(.) treat as (document-node()|jnode())/PP&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The use seems confusing, as in many cases &lt;code&gt;self::gnode()&lt;/code&gt; can only be evaluated at runtime. Maybe we could rewrite it to a variant that coerces the node? It would generally be easier for optimizers to rewrite paths when there is no need to differentiate between treat and coercion (and I have never seen code that catches &lt;code&gt;XPDY0050&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Indeed I think it would be helpful to have a &lt;code&gt;coerce to&lt;/code&gt; expression, even if people will rarely use it explicitly. It would allow us to remove all remaining uses of &lt;code&gt;treat as&lt;/code&gt; (except, of course, for the expression itself), and we could simplify various examples that use variable declarations only for coercing values.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2164 created</title>
   <pubDate>Wed, 13 Aug 2025 13:51:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2164</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2164</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix return type in `fn:parse-csv` signature&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In f2e1f48, &lt;code&gt;fn:parse-csv&lt;/code&gt; was changed to return an empty sequence, when its first argument is an empty sequence. This is however not reflected in the function's return type, which is here changed to &lt;code&gt;parsed-csv-structure-record?&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2163 created</title>
   <pubDate>Tue, 12 Aug 2025 21:45:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2163</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2163</guid>
   <description>&lt;div&gt;&lt;p&gt;Method calls: `?&amp;gt;` or` =?&amp;gt;`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose using &lt;code&gt;=?&amp;gt;&lt;/code&gt; for method calls rather than &lt;code&gt;?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(a) I lilke the association with &lt;code&gt;=&amp;gt;&lt;/code&gt; to call a function item with an implicit first argument; &lt;code&gt;=?&amp;gt;&lt;/code&gt; combines selection of an item from a map (&lt;code&gt;?&lt;/code&gt;) with function invocation (&lt;code&gt;=&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;(b) &lt;code&gt;?&amp;gt;&lt;/code&gt;, while technically unambiguous, smells strongly of XML processing instructions&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2100 closed</title>
   <pubDate>Tue, 12 Aug 2025 21:32:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2100</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2100</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2149 closed</title>
   <pubDate>Tue, 12 Aug 2025 21:32:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2149</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2149</guid>
   <description>&lt;div&gt;&lt;p&gt;2100 Make innermost, outermost, has-children, path apply to JNodes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2162 created</title>
   <pubDate>Tue, 12 Aug 2025 20:54:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2162</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2162</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-132-04 Expand the rectangle?area example&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Expands the explanation of the example of method chaining&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 132 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 12 Aug 2025 16:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/08-12</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—08-12</guid>
</item><item>
   <title>Issue #2132 closed</title>
   <pubDate>Tue, 12 Aug 2025 16:16:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2132</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2132</guid>
   <description>&lt;div&gt;&lt;p&gt;Error handling in and/or expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2133 closed</title>
   <pubDate>Tue, 12 Aug 2025 16:16:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2133</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2133</guid>
   <description>&lt;div&gt;&lt;p&gt;2132 error handling in logical expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1996 closed</title>
   <pubDate>Tue, 12 Aug 2025 16:14:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1996</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1996</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookups, KeySpecifier: add NumericLiteral and ContextValueRef?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2134 closed</title>
   <pubDate>Tue, 12 Aug 2025 16:14:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2134</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2134</guid>
   <description>&lt;div&gt;&lt;p&gt;1996 Lookups, KeySpecifier: Literal, ContextValueRef&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2147 closed</title>
   <pubDate>Tue, 12 Aug 2025 16:12:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2147</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2147</guid>
   <description>&lt;div&gt;&lt;p&gt;2143 Redesign of method calls&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2152 closed</title>
   <pubDate>Tue, 12 Aug 2025 16:08:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2152</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2152</guid>
   <description>&lt;div&gt;&lt;p&gt;"x" is not an instance of enum("x")&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2154 closed</title>
   <pubDate>Tue, 12 Aug 2025 16:08:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2154</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2154</guid>
   <description>&lt;div&gt;&lt;p&gt;2152 Revise rules for enumeration types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2156 closed</title>
   <pubDate>Tue, 12 Aug 2025 16:06:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2156</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2156</guid>
   <description>&lt;div&gt;&lt;p&gt;2092 Drop map:pair, map:of-pairs, map-pairs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2135 closed</title>
   <pubDate>Tue, 12 Aug 2025 16:04:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2135</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2135</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-131-01/02 Expand on example as actioned&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2136 closed</title>
   <pubDate>Tue, 12 Aug 2025 16:02:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2136</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2136</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop full-width angle brackets&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2137 closed</title>
   <pubDate>Tue, 12 Aug 2025 16:02:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2137</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2137</guid>
   <description>&lt;div&gt;&lt;p&gt;2136 Drop full-width &amp;lt; and &amp;gt; symbols&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2141 closed</title>
   <pubDate>Tue, 12 Aug 2025 15:59:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2141</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2141</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove nested paragraphs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2145 closed</title>
   <pubDate>Tue, 12 Aug 2025 15:57:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2145</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2145</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow implicit whitespace in StringInterpolation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2146 closed</title>
   <pubDate>Tue, 12 Aug 2025 15:56:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2146</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2146</guid>
   <description>&lt;div&gt;&lt;p&gt;Require at least one character in StringTemplateFixedPart&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1062 closed</title>
   <pubDate>Tue, 12 Aug 2025 15:55:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1062</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1062</guid>
   <description>&lt;div&gt;&lt;p&gt;150bis revised proposal for fn:ranks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #150 closed</title>
   <pubDate>Tue, 12 Aug 2025 15:55:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/150</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-150</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:ranks: Produce all ranks in applying a function on the items of a sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #714 closed</title>
   <pubDate>Tue, 12 Aug 2025 15:55:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/714</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-714</guid>
   <description>&lt;div&gt;&lt;p&gt;Function annotations in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1698 closed</title>
   <pubDate>Tue, 12 Aug 2025 15:55:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1698</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1698</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow select attribute for xsl:call-template instruction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1852 closed</title>
   <pubDate>Tue, 12 Aug 2025 15:55:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1852</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1852</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:values-except: Return atomic values that occur in A but not in B&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2157 closed</title>
   <pubDate>Tue, 12 Aug 2025 15:53:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2157</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2157</guid>
   <description>&lt;div&gt;&lt;p&gt;Unicode collation algorithm references&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2158 closed</title>
   <pubDate>Tue, 12 Aug 2025 15:53:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2158</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2158</guid>
   <description>&lt;div&gt;&lt;p&gt;2157 Editorial updates to F+O §5.5 (Unicode collations)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2161 created</title>
   <pubDate>Tue, 12 Aug 2025 15:35:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2161</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2161</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop other non-ASCII operators (×, ÷)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adopted from https://github.com/qt4cg/qtspecs/issues/2136#issuecomment-3135426200:&lt;/p&gt;
&lt;p&gt;The feedback for &lt;code&gt;U+00D7&lt;/code&gt; (MULTIPLICATION SIGN, ×) and &lt;code&gt;U+00F7&lt;/code&gt; (DIVISION SIGN, ÷) that we got so far was not very positive either, so I  would suggest dropping also those operators; they offer no real added value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2160 created</title>
   <pubDate>Tue, 12 Aug 2025 14:59:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2160</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2160</guid>
   <description>&lt;div&gt;&lt;p&gt;2073 data model changes for JNodes and Sequences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a first draft of a PR, giving the data model changes only, for a change to the JNode model affecting maps and arrays with sequence-valued entries. A sequence of length 2 or more now has children representing the items in the sequence. Although there is still an asymmetry between sequences of length 1 and longer sequences, it is more manageable than i the previous model.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 132 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 11 Aug 2025 12:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/08-12</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-08-12</guid>
</item><item>
   <title>Issue #2159 created</title>
   <pubDate>Sun, 10 Aug 2025 05:16:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2159</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2159</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: Learning from JSONiq?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;For those who have not stumbled upon JSONiq yet, I am adding some introductory links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://www.jsoniq.org/docs/JSONiq-usecases/html-single/&lt;/li&gt;
&lt;li&gt;https://www.jsoniq.org/docs/Introduction_to_JSONiq/html/&lt;/li&gt;
&lt;li&gt;https://www.jsoniq.org/docs/JSONiqExtensionToXQuery/html-single/index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JSONiq has been designed as a query and update language for JSON data. Its first versions were based on XQuery. Due to its similarities, it may give us some good inspirations for traversing and modifying JNodes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rumbledb.org/"&gt;RumbleDB&lt;/a&gt; is a current implementation maintained by Ghislain Fourny (@ghislainfourny).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2158 created</title>
   <pubDate>Sat, 9 Aug 2025 11:29:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2158</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2158</guid>
   <description>&lt;div&gt;&lt;p&gt;2157 Editorial updates to F+O §5.5 (Unicode collations)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2157&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2157 created</title>
   <pubDate>Sat, 9 Aug 2025 10:18:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2157</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2157</guid>
   <description>&lt;div&gt;&lt;p&gt;Unicode collation algorithm references&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the F&amp;amp;O reference to UTS#10 we say incorrectly that: The current version is 9.0.0, dated 2016-05-18.&lt;/p&gt;
&lt;p&gt;Similarly for UTS#35 we say incorrectly: The current version is 29, dated 2016-03-15.&lt;/p&gt;
&lt;p&gt;In §5.5, functions based on substring matching, we say&lt;/p&gt;
&lt;p&gt;"In the definitions below, we refer to the terms match and minimal match as defined in definitions DS2 and DS4 of [[UTS #10]]."&lt;/p&gt;
&lt;p&gt;It's not made clear what "the definitions below" is referring to: the terms "match" and "minimal match" are actually used in the rules of the individual functions.&lt;/p&gt;
&lt;p&gt;The parenthetical sentence &lt;code&gt;(“collation unit” is equivalent to "collation element" as defined in [[UTS #10]])&lt;/code&gt; is not very elegantly expressed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2156 created</title>
   <pubDate>Fri, 8 Aug 2025 21:35:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2156</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2156</guid>
   <description>&lt;div&gt;&lt;p&gt;2092 Drop map:pair, map:of-pairs, map-pairs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Addresses part of issue #2092.&lt;/p&gt;
&lt;p&gt;While the function family &lt;code&gt;map:pair&lt;/code&gt;, &lt;code&gt;map:of-pairs&lt;/code&gt;, and &lt;code&gt;map:pairs&lt;/code&gt; can be handy, they are not necessary, especially now that we have JNodes. They are also very easily user-written:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:pair =&amp;gt; {'key': $key, 'value': $value}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:of-pairs =&amp;gt; map:build($pairs, fn{?key}, fn{?value})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:pairs =&amp;gt; map:for-each($map, fn($k, $v){  {'key': $k, 'value': $v })&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;On the grounds that we should avoid providing multiple ways of solving the same problem, I propose dropping these three functions.&lt;/p&gt;
&lt;p&gt;Note: in some ways I would have preferred to drop the alternative trio map:entry, map:entries, and map:merge; but two of these are present in the 3.1 specification.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2021 closed</title>
   <pubDate>Fri, 8 Aug 2025 18:31:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2021</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2021</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: Move "Patterns" section into "Template Rules"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2078 closed</title>
   <pubDate>Fri, 8 Aug 2025 01:28:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2078</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2078</guid>
   <description>&lt;div&gt;&lt;p&gt;2031/2025 JNodes: inconsistency in data model taxonomy, definitions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2155 created</title>
   <pubDate>Thu, 7 Aug 2025 12:02:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2155</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2155</guid>
   <description>&lt;div&gt;&lt;p&gt;2150 Define patterns for JNodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2150
Fix #2010&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2151 closed</title>
   <pubDate>Thu, 7 Aug 2025 09:06:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2151</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2151</guid>
   <description>&lt;div&gt;&lt;p&gt;2021 Move the section on Patterns to a more logical place in the spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2153 closed</title>
   <pubDate>Thu, 7 Aug 2025 08:27:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2153</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2153</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove limitations from `enum` type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2154 created</title>
   <pubDate>Thu, 7 Aug 2025 08:25:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2154</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2154</guid>
   <description>&lt;div&gt;&lt;p&gt;2152 Revise rules for enumeration types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2152&lt;/p&gt;
&lt;p&gt;Revises the rules for enumeration types: they are now structural subtypes of &lt;code&gt;xs:string&lt;/code&gt; rather than nominative subtypes. The main effect is that &lt;code&gt;"x" instance of enum("x")&lt;/code&gt; is now true. The change is motivated by use cases involving XSLT pattern matching, where strict "instance of" matching is required, with no coercion.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2153 created</title>
   <pubDate>Wed, 6 Aug 2025 18:53:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2153</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2153</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove limitations from `enum` type&lt;/p&gt;&lt;div class="markup"&gt;&lt;blockquote&gt;
&lt;p&gt;"Tolkein" isn't an actual instance of enum("Tolkein"), it's only coercible to that type, and when types are used in paths it has to be an actual instance. I think we need to fix that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Originally posted by @michaelhkay in &lt;a href="https://github.com/qt4cg/qtspecs/issues/2150#issuecomment-3160717989"&gt;#2150&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It seems strange that there is no way to create a value that is an instance of a &lt;em&gt;singleton enumeration type&lt;/em&gt;. Only casting (and  annotation, which is a kind of casting too) is available.&lt;/p&gt;
&lt;p&gt;On the other hand:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $x as enum("foo") := "foo"
return ( ()
  , $x instance of enum("foo")
  , $x instance of xs:string
  , atomic-equal($x, "foo")
)
(: true(), true(), true() :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that &lt;code&gt;"foo"&lt;/code&gt; &lt;strong&gt;should&lt;/strong&gt; be an instance of &lt;code&gt;enum("foo")&lt;/code&gt;, and then &lt;code&gt;enum("foo")&lt;/code&gt; is a subtype of &lt;code&gt;xs:string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And the following is unclear (from &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-enumeration-types"&gt;3.2.6 Enumeration Types&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;It follows from these rules that an atomic item will only satisfy an &lt;code&gt;instance of&lt;/code&gt; test if it has the correct type annotation, and this typically requires an explicit cast. So the expression &lt;code&gt;"red" instance of enum("red", "green", "blue")&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, while &lt;code&gt;"red" cast as enum("red") instance of enum("red", "green", "blue")&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Probably, a more narrow reason is that a singleton enumeration type is an "anonymous atomic type derived from &lt;code&gt;xs:string&lt;/code&gt; &lt;em&gt;by restriction&lt;/em&gt; using an enumeration facet" that permits only one value.  Yes, this makes type checking for an enum more complex, but seems not more complex than casting.&lt;/p&gt;
&lt;p&gt;Anyway, is it possible to make any instance of &lt;code&gt;xs:string&lt;/code&gt; also an instance of the corresponding singleton enumeration type?  (that is, essentially make it so that this casting happens "hidden", if required).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2152 created</title>
   <pubDate>Wed, 6 Aug 2025 15:55:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2152</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2152</guid>
   <description>&lt;div&gt;&lt;p&gt;"x" is not an instance of enum("x")&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The usefulness of enum() types is limited by the fact that the string "x" is not actually an instance of &lt;code&gt;enum("x")&lt;/code&gt;, it is only coercible to that type. This means that in contexts where strict type matching is required (for example, in XSLT patterns), either (a) you can't use enum() the way you would like, or (b) you use it and fail to understand why it fails.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2151 created</title>
   <pubDate>Wed, 6 Aug 2025 11:04:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2151</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2151</guid>
   <description>&lt;div&gt;&lt;p&gt;2021 Move the section on Patterns to a more logical place in the spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR simply moves the section on Patterns to a more logical place in the XSLT specification. Unless anyone objects, I will merge the PR without waiting for group approval, so that I can use the result as a baseline for further work on patterns and templates, hopefully giving a better diff baseline.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1776 closed</title>
   <pubDate>Wed, 6 Aug 2025 08:27:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1776</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1776</guid>
   <description>&lt;div&gt;&lt;p&gt;Using `?` and `??` in XSLT patterns&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2150 created</title>
   <pubDate>Wed, 6 Aug 2025 08:26:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2150</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2150</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT Patterns to match JNodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Supersedes #1776.&lt;/p&gt;
&lt;p&gt;Part of the motivation for introducing JNodes was to make rule-based recursive-descent transformation of JSON structures much easier. This issue addresses part of that capability, namely defining patterns that match JNodes (and perhaps improving the patterns that match maps and arrays).&lt;/p&gt;
&lt;p&gt;In general I think the patterns that match JNodes should be distinct from the patterns that match XNodes; although we have unified path expressions so that a/b can select either an XNode or a JNode, I think there would be too much scope for confusion if match="a/b" were able to match a JNode as well as an XNode.&lt;/p&gt;
&lt;p&gt;My first idea would be to allow the syntax &lt;code&gt;match="jnode(a)"&lt;/code&gt; for a template rule that matches JNodes having a selector property of "a", similarly &lt;code&gt;jnode(a/b)&lt;/code&gt;, &lt;code&gt;jnode(a//b)&lt;/code&gt;, &lt;code&gt;jnode(a/*/b)&lt;/code&gt;, &lt;code&gt;jnode(a[x="c"])&lt;/code&gt; with semantics defined in much the same way.&lt;/p&gt;
&lt;p&gt;But there's a question how this relates to type patterns. With type patterns, we can already do &lt;code&gt;match="type(jnode(record(Author, Title, *)))"&lt;/code&gt; which matches a JNode whose content is of type &lt;code&gt;record(Author, Title, *)&lt;/code&gt;. Where syntactically possible we allow type patterns to be abbreviated, so this would become &lt;code&gt;match="jnode(record(Author, Title, *))"&lt;/code&gt; which conflicts with the above.&lt;/p&gt;
&lt;p&gt;An analogy with &lt;code&gt;element(N, T)&lt;/code&gt; might suggest &lt;code&gt;match="jnode(K, V)"&lt;/code&gt; where K constrains the selector property of the JNode, and V constrains its content property. So we might have &lt;code&gt;match="jnode(books, array(record(Author, Title, *)))"&lt;/code&gt; to match a JNode whose selector is "books" and whose content is of type  &lt;code&gt;array(record(Author, Title, *))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At the same time, while matching maps by a type such as &lt;code&gt;match="record(Author, Title, *))"&lt;/code&gt; works well, I find that this is often accompatied by a predicate so it becomes &lt;code&gt;match="record(Author, Title, *))[Author='Tolkein']"&lt;/code&gt;. It would be nice to express this more concisely and readably perhaps as &lt;code&gt;match="record(Author[.='Tolkein'], Title, *))"&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #115 closed</title>
   <pubDate>Wed, 6 Aug 2025 07:52:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/115</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-115</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup operator on arrays of maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2149 created</title>
   <pubDate>Tue, 5 Aug 2025 11:52:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2149</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2149</guid>
   <description>&lt;div&gt;&lt;p&gt;2100 Make innermost, outermost, has-children, path apply to JNodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2100&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2148 created</title>
   <pubDate>Tue, 5 Aug 2025 09:21:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2148</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2148</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:base-uri: Raise errors?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The (rather old) test case &lt;a href="https://github.com/qt4cg/qt4tests/blob/cf7c1ed9990279dbaf2297b8fe252a3ca4a3c0ad/fn/base-uri.xml#L799-L811"&gt;&lt;code&gt;K2-BaseURIFunc-29&lt;/code&gt;&lt;/a&gt; indicates that invalid URIs may result in an error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;test-case name="K2-BaseURIFunc-29"&amp;gt;
  &amp;lt;description&amp;gt; Use an URI in an xml:base element that is a valid URI, but an invalid HTTP URL. 
    Since implementations aren't required to validate specific schemes but allowed to, 
    this may either raise an error or return the URI. 
  &amp;lt;/description&amp;gt;
  &amp;lt;created by="Frans Englich" on="2007-11-26"/&amp;gt;
  &amp;lt;dependency type="spec" value="XQ10+"/&amp;gt;
  &amp;lt;test&amp;gt;&amp;lt;![CDATA[let $i := fn:base-uri(&amp;lt;anElement xml:base="http:\\example.com\\examples"&amp;gt;Element content&amp;lt;/anElement&amp;gt;) 
    return $i eq "http:\\example.com\\examples" or empty($i)]]&amp;gt;&amp;lt;/test&amp;gt;
  &amp;lt;result&amp;gt;
    &amp;lt;assert-true/&amp;gt;
  &amp;lt;/result&amp;gt;
&amp;lt;/test-case&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I raise this issue in the qtspecs repository as I wondered whether we should clarify how invalid URIs are to be handled by &lt;code&gt;fn:base-uri&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If it’s the test that is misleading, I will be glad to correct the comment, or add an error code.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2147 created</title>
   <pubDate>Tue, 5 Aug 2025 08:49:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2147</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2147</guid>
   <description>&lt;div&gt;&lt;p&gt;2143 Redesign of method calls&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Although issue #2143 envisaged redefining method calls in terms of JNodes, this PR takes a different approach.&lt;/p&gt;
&lt;p&gt;The "magic" performed by the lookup operator when the entry in a map is annotated %method is dropped. Instead we have a new operator &lt;code&gt;?&amp;gt;&lt;/code&gt; which is essentially defined as a macro: in simple cases &lt;code&gt;$map ?&amp;gt; method (X)&lt;/code&gt; is defined to be essentially an abbreviation for &lt;code&gt;($map ? method)($map, X)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have used the operator &lt;code&gt;?&amp;gt;&lt;/code&gt; suggested by Christian, but in some ways I prefer the operator we had originally, &lt;code&gt;=?&amp;gt;&lt;/code&gt;, because (a) there is a stronger analogy with &lt;code&gt;=&amp;gt;&lt;/code&gt;, and (b) &lt;code&gt;?&amp;gt;&lt;/code&gt; brings up images of XML syntax for processing instructions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2146 created</title>
   <pubDate>Mon, 4 Aug 2025 19:01:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2146</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2146</guid>
   <description>&lt;div&gt;&lt;p&gt;Require at least one character in StringTemplateFixedPart&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The grammar rules for &lt;code&gt;StringTemplate&lt;/code&gt; are as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StringTemplate              ::=  "`" (StringTemplateFixedPart | StringTemplateVariablePart)* "`"
                                                                                      /* ws: explicit */
StringTemplateFixedPart     ::=  ((Char - ('{' | '}' | '`')) | "{{" | "}}" | "``")*
                                                                                      /* ws: explicit */
StringTemplateVariablePart  ::=  EnclosedExpr
                                                                                      /* ws: explicit */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But &lt;code&gt;StringTemplateFixedPart&lt;/code&gt; should not be allowed as a zero-length token, because this is causing an ambiguity: the input &lt;code&gt;``&lt;/code&gt; currently can be parsed as any of&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;StringTemplate&amp;gt;`&amp;lt;StringTemplateFixedPart/&amp;gt;`&amp;lt;/StringTemplate&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;StringTemplate&amp;gt;`&amp;lt;StringTemplateFixedPart/&amp;gt;&amp;lt;StringTemplateFixedPart/&amp;gt;`&amp;lt;/StringTemplate&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;StringTemplate&amp;gt;`&amp;lt;StringTemplateFixedPart/&amp;gt;&amp;lt;StringTemplateFixedPart/&amp;gt;&amp;lt;StringTemplateFixedPart/&amp;gt;`&amp;lt;/StringTemplate&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and so on.&lt;/p&gt;
&lt;p&gt;In order to ensure an unambiguous result, &lt;code&gt;StringTemplateFixedPart&lt;/code&gt; should be required to consist of at least one character. Also the &lt;code&gt;/* ws: explicit */&lt;/code&gt; on &lt;code&gt;StringTemplateVariablePart&lt;/code&gt; is superfluous. The grammar rules thus should be changed to:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;StringTemplate              ::=  "`" (StringTemplateFixedPart | StringTemplateVariablePart)* "`"
                                                                                      /* ws: explicit */
StringTemplateFixedPart     ::=  ((Char - ('{' | '}' | '`')) | "{{" | "}}" | "``")+
                                                                                      /* ws: explicit */
StringTemplateVariablePart  ::=  EnclosedExpr
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2145 created</title>
   <pubDate>Sun, 3 Aug 2025 19:22:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2145</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2145</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow implicit whitespace in StringInterpolation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Production &lt;code&gt;StringInterpolation&lt;/code&gt; currently does not allow implicit whitespace:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StringInterpolation ::= "`{"  Expr?  "}`"
                                                                         /* ws: explicit */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this is likely not intended - all examples in the spec do have whitespace adjacent to the braces.&lt;/p&gt;
&lt;p&gt;This change thus removes &lt;code&gt; /* ws: explicit */&lt;/code&gt; in order to allow implicit whitespace.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2143 created</title>
   <pubDate>Sun, 3 Aug 2025 07:05:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2143</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2143</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes and Methods&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose changing the mechanism for invoking methods to take advantage of JNodes.&lt;/p&gt;
&lt;p&gt;Instead of the current magic rule for the "?" operator, we move the magic to the rules for dynamic function calls: in a dynamic function call F(X, Y), if the value of F is a JNode J whose content property is a function item annotated with %method, then the function body is executed with the parent of J (that is, the containing map or array) as the context value. It seems much cleaner semantics to make this a rule for dynamic function calls rather than for map lookup.&lt;/p&gt;
&lt;p&gt;The downside is that the call syntax now would become &lt;code&gt;($rectangle/area)()&lt;/code&gt; rather than &lt;code&gt;$rectangle?area()&lt;/code&gt;. Unfortunately &lt;code&gt;$rectangle/area()&lt;/code&gt; parses as &lt;code&gt;$rectangle/(area())&lt;/code&gt;. So we might want to invent some better syntax.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2142 closed</title>
   <pubDate>Fri, 1 Aug 2025 12:56:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2142</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2142</guid>
   <description>&lt;div&gt;&lt;p&gt;Markup fixes in the HTML output&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2142 created</title>
   <pubDate>Fri, 1 Aug 2025 12:56:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2142</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2142</guid>
   <description>&lt;div&gt;&lt;p&gt;Markup fixes in the HTML output&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Moved all the processor comments to the end; this avoids having a comment before &lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/code&gt; which is frowned upon because ... reasons&lt;/li&gt;
&lt;li&gt;The XSLT stylesheet was adding links for sections, but so was the main stylesheet, so they were coming out nested.&lt;/li&gt;
&lt;li&gt;Don't attempt to link to functions or elements inside titles. (This also results in nested links)&lt;/li&gt;
&lt;li&gt;Attempt to "unwrap" &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements around things that can't be inside a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, like various sorts of lists. It's a bit ugly, but it makes for much cleaner HTML.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm just going to merge this because there's no practical way to see the consequences in the PR.&lt;/p&gt;
&lt;p&gt;Apologies in advance that this will introduce some spurious diffs. I think those will go away after the build finishes and after you've rebased your PRs on the new stylesheets.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2141 created</title>
   <pubDate>Fri, 1 Aug 2025 11:27:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2141</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2141</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove nested paragraphs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have no idea why the DTD allows &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; inside &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; but I assume this is a markup error and not intentional.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2140 closed</title>
   <pubDate>Fri, 1 Aug 2025 11:25:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2140</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2140</guid>
   <description>&lt;div&gt;&lt;p&gt;Restore diffs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2140 created</title>
   <pubDate>Fri, 1 Aug 2025 11:24:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2140</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2140</guid>
   <description>&lt;div&gt;&lt;p&gt;Restore diffs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With great appreciation to the fine folks at DeltaXignia!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2138 closed</title>
   <pubDate>Thu, 31 Jul 2025 17:39:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2138</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2138</guid>
   <description>&lt;div&gt;&lt;p&gt;NodeTest `type(X|Y)`: double parentheses needed&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2139 created</title>
   <pubDate>Thu, 31 Jul 2025 10:42:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2139</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2139</guid>
   <description>&lt;div&gt;&lt;p&gt;Binary comparisons&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It seems confusing to me that &lt;code&gt;deep-equal&lt;/code&gt; &amp;amp; &lt;code&gt;atomic-equal&lt;/code&gt; return different results than &lt;code&gt;eq&lt;/code&gt; for binary types:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $hex := xs:hexBinary(''), $base64 := xs:base64Binary('')
return (
  (: false :) deep-equal($hex, $base64),
  (: false :) atomic-equal($hex, $base64),
  (: true  :) $hex eq $base64
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The rules say:&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;fn:deep-equal&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;If both &lt;code&gt;$i1&lt;/code&gt; and &lt;code&gt;$i2&lt;/code&gt; are instances of &lt;code&gt;xs:hexBinary&lt;/code&gt; or &lt;code&gt;xs:base64Binary&lt;/code&gt;, &lt;code&gt;$i1&lt;/code&gt; eq &lt;code&gt;$i2&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This can be interpreted in two ways, but it seems to mean that &lt;code&gt;$i1&lt;/code&gt; and &lt;code&gt;$i2&lt;/code&gt; need to have the same type?&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;fn:atomic-equal&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the following conditions is true:
&lt;code&gt;$value1&lt;/code&gt; and &lt;code&gt;$value2&lt;/code&gt; are both instances of &lt;code&gt;xs:hexBinary&lt;/code&gt;.
&lt;code&gt;$value1&lt;/code&gt; and &lt;code&gt;$value2&lt;/code&gt; are both instances of &lt;code&gt;xs:base64Binary&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;code&gt;op:binary-equal&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;op:binary-equal(
  $value1	as (xs:hexBinary | xs:base64Binary),	
  $value2	as (xs:hexBinary | xs:base64Binary)	
) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;$value1&lt;/code&gt; and &lt;code&gt;$value2&lt;/code&gt; are of the same length, measured in binary octets, and contain the same octets in the same order. Otherwise, it returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As &lt;code&gt;atomic-equal(xs:double(3), xs:float(3))&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, I would also expect &lt;code&gt;true&lt;/code&gt; for binary items with the same contents.&lt;/p&gt;
&lt;p&gt;Related (for numbers): #986&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2138 created</title>
   <pubDate>Wed, 30 Jul 2025 22:11:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2138</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2138</guid>
   <description>&lt;div&gt;&lt;p&gt;NodeTest `type(X|Y)`: double parentheses needed&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It is not currently possible to write a NodeTest as (for example) &lt;code&gt;child::type(xs:string | xs:integer)&lt;/code&gt;. As a consequence of the way the grammar is defined, two pairs of parentheses are needed: &lt;code&gt;child::type((xs:string | xs:integer))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It would be easy enough to fix this usability glitch.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2137 created</title>
   <pubDate>Wed, 30 Jul 2025 07:29:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2137</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2137</guid>
   <description>&lt;div&gt;&lt;p&gt;2136 Drop full-width &amp;lt; and &amp;gt; symbols&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2136&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2136 created</title>
   <pubDate>Wed, 30 Jul 2025 06:58:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2136</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2136</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop full-width angle brackets&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The option of using full-width angle brackets doesn't seem to have attracted great enthusiasm, and now that we have the &lt;code&gt;precedes&lt;/code&gt; and &lt;code&gt;follows&lt;/code&gt; operators, I suggest we drop them. Nearly all cases of plain &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt; can be replaced with &lt;code&gt;lt&lt;/code&gt; and &lt;code&gt;le&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One of the problems with using non-ASCII characters is not just that it's hard to type them, it's also quite hard to recognise them by their appearance. There are so many characters that look a bit like less-than and greater-than symbols.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2135 created</title>
   <pubDate>Tue, 29 Jul 2025 17:45:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2135</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2135</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-131-01/02 Expand on example as actioned&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Expands on the let binding example&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 131 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 29 Jul 2025 16:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/07-29</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—07-29</guid>
</item><item>
   <title>Issue #2130 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:23:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2130</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2130</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposed new operator keywords: precedes, follows&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2080 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:20:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2080</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2080</guid>
   <description>&lt;div&gt;&lt;p&gt;Destructuring let clauses: Bind remaining values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2119 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:20:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2119</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2119</guid>
   <description>&lt;div&gt;&lt;p&gt;2080 allow let $($head, $tail)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2087 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:17:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2087</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2087</guid>
   <description>&lt;div&gt;&lt;p&gt;Adaptive serialization: JNodes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2114 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:17:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2114</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2114</guid>
   <description>&lt;div&gt;&lt;p&gt;2087 Change adaptive serialization of JNodes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2084 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:14:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2084</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2084</guid>
   <description>&lt;div&gt;&lt;p&gt;Steps when the context value contains multiple nodes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2115 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:14:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2115</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2115</guid>
   <description>&lt;div&gt;&lt;p&gt;2084 - document order of axis steps when context value is a sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2082 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:12:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2082</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2082</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-html options parameter conventions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2117 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:12:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2117</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2117</guid>
   <description>&lt;div&gt;&lt;p&gt;2082 parse-html options&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2099 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:09:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2099</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2099</guid>
   <description>&lt;div&gt;&lt;p&gt;Choosing names for the jnode function and the jnode type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2129 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:09:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2129</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2129</guid>
   <description>&lt;div&gt;&lt;p&gt;2099 Rename fn:jnode and jnode-type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2086 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:09:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2086</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2086</guid>
   <description>&lt;div&gt;&lt;p&gt;Can the ¶value property of a JNode be (or contain) a JNode?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1978 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:09:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1978</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1978</guid>
   <description>&lt;div&gt;&lt;p&gt;Function `map:build` does not allow expressing the dependency of a value on its key. Some simple types of maps cannot be built.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1946 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:09:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1946</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1946</guid>
   <description>&lt;div&gt;&lt;p&gt;We need examples of a record with an entry that is a %method and invoking this method with the result it must produce&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1514 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:08:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1514</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1514</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: optional position argument in function signature for for-each and other HOF &lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1175 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:08:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1175</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1175</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath: Optional parameters in the definition of an inline function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2102 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:06:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2102</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2102</guid>
   <description>&lt;div&gt;&lt;p&gt;Type diagrams: drop/add parentheses&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2113 closed</title>
   <pubDate>Tue, 29 Jul 2025 16:06:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2113</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2113</guid>
   <description>&lt;div&gt;&lt;p&gt;2102 Make type labels in diagram consistent&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2134 created</title>
   <pubDate>Tue, 29 Jul 2025 06:35:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2134</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2134</guid>
   <description>&lt;div&gt;&lt;p&gt;1996 Lookups, KeySpecifier: Literal, ContextValueRef&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Revised; closes #1996&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2063 closed</title>
   <pubDate>Tue, 29 Jul 2025 06:30:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2063</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2063</guid>
   <description>&lt;div&gt;&lt;p&gt;1996 Lookups, KeySpecifier: Literal, ContextValueRef&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2133 created</title>
   <pubDate>Mon, 28 Jul 2025 22:10:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2133</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2133</guid>
   <description>&lt;div&gt;&lt;p&gt;2132 error handling in logical expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Note: depends on #2115 because of terminology changes.&lt;/p&gt;
&lt;p&gt;Fix #2132&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2132 created</title>
   <pubDate>Mon, 28 Jul 2025 19:49:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2132</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2132</guid>
   <description>&lt;div&gt;&lt;p&gt;Error handling in and/or expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In §2.4.5 we introduced the concept of guarded expressions, and included the rules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In an and expression, the second operand is guarded by the value of the first operand being true.&lt;/li&gt;
&lt;li&gt;In an or expression, the second operand is guarded by the value of the first operand being false.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This change is not mentioned in 4.11 Logical Expressions. For example, this still says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The order in which the operands of a logical expression are evaluated is [implementation-dependent]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and the truth tables in 4.11 are unchanged from 3.1.&lt;/p&gt;
&lt;p&gt;(We have also introduced defined terms "and expression" and "or expression", and should use them here).&lt;/p&gt;
&lt;p&gt;My understanding of the new rule for guarded expressions is that with (A and B), if A is false then the result is false even if B raises an error; this is not what the truth table says.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2131 closed</title>
   <pubDate>Mon, 28 Jul 2025 18:53:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2131</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2131</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT `xsl:for-each-group` `split-when` variables&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 131 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 28 Jul 2025 11:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/07-29</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-07-29</guid>
</item><item>
   <title>Issue #2131 created</title>
   <pubDate>Mon, 28 Jul 2025 10:28:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2131</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2131</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT `xsl:for-each-group` `split-when` variables&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently the spec &lt;a href="https://qt4cg.org/specifications/xslt-40/Overview.html#xsl-for-each-group"&gt;says&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The expression is supplied with two variables: &lt;code&gt;$group&lt;/code&gt; is set to the contents of the current group being constructed, and &lt;code&gt;$next&lt;/code&gt; is the next item in the population.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1. Do these supplied variables shadow the user-defined variable of the same name?  (probably they should, but it is not mentioned)
For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xslt"&gt;  &amp;lt;xsl:variable name="group" select="(1,2,3)"/&amp;gt;  
  &amp;lt;xsl:for-each-group select="$input" split-when=" $next = $group "&amp;gt; ... &amp;lt;/xsl:for-each-group&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe these variables should be in the &lt;code&gt;fn:&lt;/code&gt; namespace?&lt;/p&gt;
&lt;p&gt;2. To access the &lt;strong&gt;current grouping key&lt;/strong&gt; and &lt;strong&gt;current group&lt;/strong&gt; the functions &lt;code&gt;fn:current-grouping-key&lt;/code&gt; and &lt;code&gt;fn:current-group&lt;/code&gt; are used. What is the rationale of introducing &lt;em&gt;variables&lt;/em&gt; instead of &lt;em&gt;functions&lt;/em&gt; to access the group and item in &lt;code&gt;split-when&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2066 closed</title>
   <pubDate>Mon, 28 Jul 2025 09:25:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2066</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2066</guid>
   <description>&lt;div&gt;&lt;p&gt;Cells in the F&amp;amp;O signature blocks should be vertically aligned to the top&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2122 closed</title>
   <pubDate>Mon, 28 Jul 2025 09:25:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2122</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2122</guid>
   <description>&lt;div&gt;&lt;p&gt;2066 CSS changes for function prototypes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2130 created</title>
   <pubDate>Mon, 28 Jul 2025 05:06:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2130</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2130</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposed new operator keywords: precedes, follows&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The operators &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, in my opinion, are poorly known, and challenging for developers working in XSLT. Many punctuation-based operators have aliases in ordinary-language quasi-equivalents, but &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; lack any ordinary verbal equivalents, and break this principle.&lt;/p&gt;
&lt;p&gt;The attached proposal offers to make &lt;code&gt;precedes&lt;/code&gt; a keyword equivalent to &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;follows&lt;/code&gt; a keyword equivalent to &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. This means that &lt;code&gt;//title[. &amp;amp;lt;&amp;amp;lt; following-sibling::isbn[1]]&lt;/code&gt; can now be expressed as &lt;code&gt;//title[. precedes following-sibling::isbn[1]]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2129 created</title>
   <pubDate>Sat, 26 Jul 2025 10:44:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2129</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2129</guid>
   <description>&lt;div&gt;&lt;p&gt;2099 Rename fn:jnode and jnode-type&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Renames the function &lt;code&gt;fn:jnode&lt;/code&gt; as &lt;code&gt;fn:jtree&lt;/code&gt;, and the item type &lt;code&gt;jnode-type()&lt;/code&gt; as &lt;code&gt;jnode()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Fix #2099&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2128 created</title>
   <pubDate>Fri, 25 Jul 2025 15:49:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2128</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2128</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes and XSLT Streaming&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In principle, there's no reason why JTrees shouldn't be streamable. However, it's an immense amount of work both for the specification and for an implementation, so I intend to rule it out.&lt;/p&gt;
&lt;p&gt;That then leaves the question about deciding streamability in the case of constructs that could be processing JNodes.&lt;/p&gt;
&lt;p&gt;I think we might be able to define a rule something like: "if a template rule (etc.) is declared with streamable="yes", this amounts to a declaration that it will only be used to process XNodes, even if without this declaration it would also be capable of processing JNodes."&lt;/p&gt;
&lt;p&gt;The details depend on other aspects of how we define template rule processing and pattern matching for JNodes. At present I'm inclined to say that the pattern syntax for matching JNodes should be distinct from that for matching XNodes, so that a template can only match one or the other, never both.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2127 created</title>
   <pubDate>Fri, 25 Jul 2025 09:31:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2127</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2127</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: Include atomic items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With the introduction of JNodes, it feels like a natural step to enhance the processing of documents, collections and databases to JSON data. Currently, the roots of JNodes are restricted to maps and arrays. We should generalize them and include support for atomic items. The Background:&lt;/p&gt;
&lt;p&gt;JSON data types are not restricted to maps (objects) and arrays, they can also be strings, numbers and booleans. As a consequence, a &lt;code&gt;json-doc('input.json')&lt;/code&gt; call may also return atomic types. When iterating over JSON input, we should ensure that there is no need for additional type checks to ensure that code does not fail:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $i in 1 to 10
for $doc in json-doc($i || '.json')
(: where $doc instance of (map(*)|array(*)) :)
return $doc/a/b/c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I assume it would be no substantial change to open &lt;code&gt;$json/step&lt;/code&gt; for types other than nodes, maps and arrays. The only tricky special case is &lt;code&gt;null&lt;/code&gt;, but it is converted to an empty sequence, why &lt;code&gt;json-doc('document-with-single-null-value.json')/a/b/c&lt;/code&gt; already succeeds.&lt;/p&gt;
&lt;p&gt;To address any concerns that JNodes do not make sense for standalone atomic items: There is a certain analogy to XML text nodes, which can also be created without serving any immediate purpose, but are helpful and necessary for mapping the entire XML data model.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2126 created</title>
   <pubDate>Fri, 25 Jul 2025 07:16:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2126</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2126</guid>
   <description>&lt;div&gt;&lt;p&gt;Absolute path expressions with JTrees&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm thinking there may be a case for disallowing or restricting the use of absolute path expressions over JTrees.&lt;/p&gt;
&lt;p&gt;Firstly, there's a strong likelihood that users are only dimly aware of where the root of the tree actually is. They are likely to imagine, if they parse a json text, that the root of the tree will be the root of that text. But in fact the root is wherever they started path navigation from, which may be different. It's likely to be particularly confusing if you move out of JNode space into map/array territory and then back again. Requiring an explicit call on root(), or on ancestor::*[last()], might mean that users think more carefully about it. This makes it clearer that the root is not some kind of absolute fixed point, it is simply "the place where you started your current journey".&lt;/p&gt;
&lt;p&gt;Certainly, I don't think we should allow &lt;code&gt;/x&lt;/code&gt; to implicitly construct a JNode wrapping the context item: the '/' here is redundant and means the user almost certainly doesn't understand what they are doing.&lt;/p&gt;
&lt;p&gt;Another consideration is that if we restrict leading &lt;code&gt;/&lt;/code&gt; to work only with XTrees, then we reinstate a lot of static type checking capability that we have currently lost.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2125 created</title>
   <pubDate>Thu, 24 Jul 2025 10:32:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2125</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2125</guid>
   <description>&lt;div&gt;&lt;p&gt;csv-to-xml() - untestable results&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The machinery for generating test cases from spec examples is failing in the case of the &lt;code&gt;csv-to-xml()&lt;/code&gt; tests.&lt;/p&gt;
&lt;p&gt;The test generator produces an expected result assertion of&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;assert-xml ignore-prefixes="false"&amp;gt;&amp;lt;![CDATA[&amp;lt;substitute-for-unparseable-result-xml xmlns="http://www.w3.org/2010/09/qt-fots-catalog"/&amp;gt;]]&amp;gt;&amp;lt;/assert-xml&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The same problem occurs with some fn:analyze-string tests.&lt;/p&gt;
&lt;p&gt;The failure basically means that parse-xml() on the expected test results has failed. (Stylesheet generate-qt3-test-set.xsl line 122).&lt;/p&gt;
&lt;p&gt;I think that the problem is that the build is running Saxon in schema-aware mode, and this applies to all XML parsing including the parse-xml() function, so we're getting a schema validation failure where we really don't want to be validating in the first place.&lt;/p&gt;
&lt;p&gt;Unfortunately we can't selectively switch parse-xml() validation off unless we move to a later (and not yet stable) Saxon version, and rewriting the whole stylesheet to not be schema-aware would be painful.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2124 created</title>
   <pubDate>Thu, 24 Jul 2025 08:24:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2124</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2124</guid>
   <description>&lt;div&gt;&lt;p&gt;573 Functions to Construct Trees&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A first cut at providing a functional approach to XNode and XTree construction.&lt;/p&gt;
&lt;p&gt;At this stage I'm interested in comments on the general approach, not the fine detail (some of which, e.g. namespace inheritance, still needs work.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2123 created</title>
   <pubDate>Thu, 24 Jul 2025 03:23:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2123</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2123</guid>
   <description>&lt;div&gt;&lt;p&gt;2051: XSLT group by cluster&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Companion PR to #2051 .&lt;/p&gt;
&lt;p&gt;I have opted for only two examples, hoping they catalyze the imagination of what is possible. Comments welcome.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2122 created</title>
   <pubDate>Wed, 23 Jul 2025 21:35:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2122</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2122</guid>
   <description>&lt;div&gt;&lt;p&gt;2066 CSS changes for function prototypes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2066&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2121 closed</title>
   <pubDate>Wed, 23 Jul 2025 21:32:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2121</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2121</guid>
   <description>&lt;div&gt;&lt;p&gt;2066 fo signature table format&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2121 created</title>
   <pubDate>Wed, 23 Jul 2025 21:31:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2121</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2121</guid>
   <description>&lt;div&gt;&lt;p&gt;2066 fo signature table format&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;CSS changes to improve alignment of complex signatures, e.g. fn:round&lt;/p&gt;
&lt;p&gt;Fix #2066&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1774 closed</title>
   <pubDate>Wed, 23 Jul 2025 20:25:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1774</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1774</guid>
   <description>&lt;div&gt;&lt;p&gt;Nomenclature: relabelling&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1775 closed</title>
   <pubDate>Wed, 23 Jul 2025 20:18:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1775</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1775</guid>
   <description>&lt;div&gt;&lt;p&gt;Navigation in JSON trees&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2120 created</title>
   <pubDate>Wed, 23 Jul 2025 10:14:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2120</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2120</guid>
   <description>&lt;div&gt;&lt;p&gt;2007 Revised design for xsl:array&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Revised design for &lt;code&gt;xsl:array&lt;/code&gt; based on usage experience.&lt;/p&gt;
&lt;p&gt;Fix #2007&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2118 closed</title>
   <pubDate>Wed, 23 Jul 2025 06:23:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2118</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2118</guid>
   <description>&lt;div&gt;&lt;p&gt;2080 Tweak the rules for destructuring variable bindings&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2119 created</title>
   <pubDate>Wed, 23 Jul 2025 06:20:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2119</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2119</guid>
   <description>&lt;div&gt;&lt;p&gt;2080 allow let $($head, $tail)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2080&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;let $($x, $y, $z)&lt;/code&gt;, $z bids to the rest of the sequence.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;let $[$a, $b, $c]&lt;/code&gt;, FOAR0001 is raised if the array is too short.&lt;/p&gt;
&lt;p&gt;Note, XPath and XQuery should be reviewed separately as the source text for let expressions is different.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2118 created</title>
   <pubDate>Tue, 22 Jul 2025 23:01:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2118</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2118</guid>
   <description>&lt;div&gt;&lt;p&gt;2080 Tweak the rules for destructuring variable bindings&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;When binding to a sequence, the last variable binds to the rest of the sequence.&lt;/li&gt;
&lt;li&gt;When binding to an array, an FOAR0001 occurs if there are more variables than array members.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fix #2080.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2117 created</title>
   <pubDate>Tue, 22 Jul 2025 22:34:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2117</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2117</guid>
   <description>&lt;div&gt;&lt;p&gt;2082 parse-html options&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Use non-optional types such as xs:boolean for options parameters&lt;/li&gt;
&lt;li&gt;Use regular error codes for bad options&lt;/li&gt;
&lt;li&gt;Drop error code relating to the discontinued method option.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fix #2082&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2116 created</title>
   <pubDate>Tue, 22 Jul 2025 21:04:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2116</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2116</guid>
   <description>&lt;div&gt;&lt;p&gt;2112 Refine/revise the rules for get() in node tests&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Proposed revision of the rules for get() in node tests.&lt;/p&gt;
&lt;p&gt;Mainly editorial clarification; but also changes the rules for the focus - the expression is now evaluated with absent focus to ensure an error in preference to unexpected results.&lt;/p&gt;
&lt;p&gt;Fix #2112&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2115 created</title>
   <pubDate>Tue, 22 Jul 2025 19:06:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2115</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2115</guid>
   <description>&lt;div&gt;&lt;p&gt;2084 - document order of axis steps when context value is a sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Clarifies that the results are in document order and deduplicated.&lt;/p&gt;
&lt;p&gt;Fix #2084&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2114 created</title>
   <pubDate>Tue, 22 Jul 2025 17:36:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2114</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2114</guid>
   <description>&lt;div&gt;&lt;p&gt;2087 Change adaptive serialization of JNodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2087&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2113 created</title>
   <pubDate>Tue, 22 Jul 2025 17:23:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2113</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2113</guid>
   <description>&lt;div&gt;&lt;p&gt;2102 Make type labels in diagram consistent&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2102&lt;/p&gt;
&lt;p&gt;Drops the parentheses in map(&lt;em&gt;), array(&lt;/em&gt;), function(*)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 130 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 22 Jul 2025 16:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/07-22</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—07-22</guid>
</item><item>
   <title>Issue #2036 closed</title>
   <pubDate>Tue, 22 Jul 2025 16:13:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2036</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2036</guid>
   <description>&lt;div&gt;&lt;p&gt;Streamability of xsl:map instruction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2037 closed</title>
   <pubDate>Tue, 22 Jul 2025 16:13:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2037</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2037</guid>
   <description>&lt;div&gt;&lt;p&gt;2036 Add rule for streamability of xsl:map&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2104 closed</title>
   <pubDate>Tue, 22 Jul 2025 16:11:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2104</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2104</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: unwrapping&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2111 closed</title>
   <pubDate>Tue, 22 Jul 2025 16:10:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2111</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2111</guid>
   <description>&lt;div&gt;&lt;p&gt;2104 Point out places where jnode-content is called implicitly&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2098 closed</title>
   <pubDate>Tue, 22 Jul 2025 16:07:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2098</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2098</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: combining node sequences&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2110 closed</title>
   <pubDate>Tue, 22 Jul 2025 16:07:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2110</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2110</guid>
   <description>&lt;div&gt;&lt;p&gt;2098 Clarify when jnode() is called implicitly&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2103 closed</title>
   <pubDate>Tue, 22 Jul 2025 16:04:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2103</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2103</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes functions: 0-arity variant&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2109 closed</title>
   <pubDate>Tue, 22 Jul 2025 16:04:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2109</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2109</guid>
   <description>&lt;div&gt;&lt;p&gt;2103 Allow operand of JNode accessors to be omitted or empty&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2107 closed</title>
   <pubDate>Tue, 22 Jul 2025 16:01:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2107</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2107</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-129-01: Actions from review of PR2094&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2108 closed</title>
   <pubDate>Tue, 22 Jul 2025 15:58:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2108</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2108</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-123-01 Add example of library module using methods&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2106 closed</title>
   <pubDate>Tue, 22 Jul 2025 15:55:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2106</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2106</guid>
   <description>&lt;div&gt;&lt;p&gt;Add note on the impossibility of cyclic instances&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2105 closed</title>
   <pubDate>Tue, 22 Jul 2025 15:52:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2105</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2105</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix type of `fn:schema-type-record` field `constructor`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2097 closed</title>
   <pubDate>Tue, 22 Jul 2025 15:51:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2097</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2097</guid>
   <description>&lt;div&gt;&lt;p&gt;`jnode` as a subtype of `node`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2089 closed</title>
   <pubDate>Tue, 22 Jul 2025 15:51:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2089</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2089</guid>
   <description>&lt;div&gt;&lt;p&gt;JNode properties: Presentation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2112 created</title>
   <pubDate>Tue, 22 Jul 2025 13:46:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2112</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2112</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: get()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The documentation for &lt;code&gt;get()&lt;/code&gt; says for XNodes…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A selector can also take the form &lt;code&gt;get(Expr)&lt;/code&gt;. The contained expression &lt;em&gt;Expr&lt;/em&gt; is evaluated with the focus of the containing axis step (so its value is independent of the specific XNode being tested). The result of the expression after atomization must be a sequence of zero or more &lt;code&gt;xs:QName&lt;/code&gt; values (otherwise a type error [&lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#ERRXPTY0004"&gt;err:XPTY0004&lt;/a&gt;] is raised). An XNode satisfies the selector if its node kind is the principal node kind of the axis and its node name is among the values returned by the selector expression.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…and for JNodes…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the selector takes the form &lt;code&gt;get(Expr)&lt;/code&gt;, then the contained expression &lt;em&gt;Expr&lt;/em&gt; is evaluated with the focus of the containing axis step (so its value is independent of the specific JNode being tested). A JNode satisfies the selector if its &lt;strong&gt;·selector·&lt;/strong&gt; property is equal to one or more of the values returned by the selector expression, under the rules of the &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-atomic-equal"&gt;fn:atomic-equal&lt;/a&gt; function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nitpicking:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With the existing rule for JNodes, I assume that no match would be returned for &lt;code&gt;EXPR := [ 'a', 'b' ]&lt;/code&gt;. I would thus propose to atomize EXPR first and compare it afterwards (see below).&lt;/li&gt;
&lt;li&gt;“A JNode satisfies the selector if [the value of] its &lt;strong&gt;·selector·&lt;/strong&gt; property”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, I would like us to unify the rules for XNodes and JNodes. The rationale (besides “simpler rules are simpler to explain”):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;XPath is well-known for being forgiving. Maybe we can maintain that tradition for name tests, by tolerating input other than QNames.&lt;/li&gt;
&lt;li&gt;By using identical rules for JNodes and XNodes, it will be easier to process input that mixed XNodes and JNodes. An example:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(&amp;lt;xml&amp;gt;ignored&amp;lt;/xml&amp;gt;, { 1: 'one' }, [ 'one' ])/get(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would propose to simplify the joint rules to the following XPath expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;some(
  data(EXPR),
  atomic-equal(?, if(. instance of node()) then node-name() else jnode-selector())
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, I assume that the focus information can be utilized in the get expression, right? Is it correct to assume that all of the following expressions will return &lt;code&gt;&amp;lt;a2/&amp;gt;&lt;/code&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $xml := &amp;lt;xml&amp;gt;&amp;lt;a3/&amp;gt;&amp;lt;a2/&amp;gt;&amp;lt;a1/&amp;gt;&amp;lt;/xml&amp;gt;
let $name := #a2
return (
  $xml/get(#a2),
  $xml/get($name),
  $xml/get(node-name()[. = $name])
  $xml/get(xs:QName('a' || position())),
  $xml/get(if(position() = 2) { $name } ),
  $xml/get(xs:QName(`a{ last() - 1 }`))
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 130 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 21 Jul 2025 10:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/07-22</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-07-22</guid>
</item><item>
   <title>Issue #1786 closed</title>
   <pubDate>Thu, 17 Jul 2025 22:27:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1786</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1786</guid>
   <description>&lt;div&gt;&lt;p&gt;A case study for XSLT transformation of JSON: the transpiler&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2025 closed</title>
   <pubDate>Thu, 17 Jul 2025 22:25:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2025</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2025</guid>
   <description>&lt;div&gt;&lt;p&gt;Combine the concepts of pins/labels and modified lookups&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2111 created</title>
   <pubDate>Thu, 17 Jul 2025 22:09:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2111</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2111</guid>
   <description>&lt;div&gt;&lt;p&gt;2104 Point out places where jnode-content is called implicitly&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2095&lt;/p&gt;
&lt;p&gt;This PR is purely editorial: it adds notes and examples showing where jnode-content() is (or is not) called implicitly.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2110 created</title>
   <pubDate>Thu, 17 Jul 2025 21:08:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2110</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2110</guid>
   <description>&lt;div&gt;&lt;p&gt;2098 Clarify when jnode() is called implicitly&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2098&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2109 created</title>
   <pubDate>Thu, 17 Jul 2025 20:38:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2109</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2109</guid>
   <description>&lt;div&gt;&lt;p&gt;2103 Allow operand of JNode accessors to be omitted or empty&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2103&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2108 created</title>
   <pubDate>Thu, 17 Jul 2025 08:32:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2108</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2108</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-123-01 Add example of library module using methods&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2107 created</title>
   <pubDate>Thu, 17 Jul 2025 07:50:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2107</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2107</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-129-01: Actions from review of PR2094&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2106 created</title>
   <pubDate>Tue, 15 Jul 2025 21:44:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2106</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2106</guid>
   <description>&lt;div&gt;&lt;p&gt;Add note on the impossibility of cyclic instances&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Responding to an action at today's meeting, this adds a note to the effect that although types can contain cyclic references, instances can not.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 129 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 15 Jul 2025 16:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/07-15</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—07-15</guid>
</item><item>
   <title>Pull request #2105 created</title>
   <pubDate>Tue, 15 Jul 2025 17:16:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2105</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2105</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix type of `fn:schema-type-record` field `constructor`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;constructor&lt;/code&gt; of &lt;code&gt;fn:schema-type-record&lt;/code&gt; &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#schema-type-record"&gt;is currently shown&lt;/a&gt; with a type of&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn(xs:anyAtomicType?) as xs:anyAtomicType?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However this does not cover list type constructors, returning multiple occurrences. It should thus be&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn(xs:anyAtomicType?) as xs:anyAtomicType*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A test exists that requires this: &lt;a href="https://github.com/qt4cg/qt4tests/blob/79fd5cec8a8b15f9cad3f3d09045946f5bcab931/fn/schema-type.xml#L99-L116"&gt;&lt;code&gt;schema-type-005&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2104 created</title>
   <pubDate>Tue, 15 Jul 2025 17:16:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2104</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2104</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: unwrapping&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Related (but not identical to) https://github.com/qt4cg/qtspecs/issues/2095:&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;As Michael indicated in https://github.com/qt4cg/qtspecs/issues/2095#issuecomment-3069173742, the implicit unwrapping of accessed/iterated JNode results may already be defined in the current spec, but it may need to be further clarified. Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $jnode := { 'array': [ 1, 2 ] }/array
return (
  (: FLWOR expressions :)
  for member $m in $jnode return $m,
  (: Functions :)
  array:size($jnode),
  (: Lookups :)
  $jnode?1
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2054 closed</title>
   <pubDate>Tue, 15 Jul 2025 17:08:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2054</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2054</guid>
   <description>&lt;div&gt;&lt;p&gt;JPath expression&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2103 created</title>
   <pubDate>Tue, 15 Jul 2025 16:48:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2103</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2103</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes functions: 0-arity variant&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Similar to &lt;code&gt;fn:name&lt;/code&gt; and other &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#accessors"&gt;accessor functions&lt;/a&gt;, the new JNode functions (&lt;code&gt;fn:node-content&lt;/code&gt;, &lt;code&gt;fn:node-position&lt;/code&gt;, &lt;code&gt;fn:node-selector&lt;/code&gt;)  should be gifted with a 0-arity variant.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2102 created</title>
   <pubDate>Tue, 15 Jul 2025 16:38:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2102</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2102</guid>
   <description>&lt;div&gt;&lt;p&gt;Type diagrams: drop/add parentheses&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current presentation of the data types is inconsistent (https://qt4cg.org/specifications/xpath-datamodel-40/Overview.html#types-hierarchy):&lt;/p&gt;
&lt;img width="200" src="https://github.com/user-attachments/assets/a6d7aaa6-398e-4f2d-a1e2-65b4d9c020fe"/&gt;
&lt;p&gt;It includes &lt;code&gt;GNode&lt;/code&gt;, &lt;code&gt;XNode&lt;/code&gt;, and &lt;code&gt;JNode&lt;/code&gt;, &lt;code&gt;attribute&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt; etc. (without parentheses), but &lt;code&gt;function(*)&lt;/code&gt;, &lt;code&gt;array(*)&lt;/code&gt; and &lt;code&gt;map(*)&lt;/code&gt;. Shouldn’t we remove the parentheses from &lt;code&gt;function(*)&lt;/code&gt; etc., or add them to the other types?&lt;/p&gt;
&lt;p&gt;Or maybe we should even change &lt;code&gt;function(*)&lt;/code&gt; to Function, etc.&lt;/p&gt;
&lt;p&gt;Labels | Types
-- | --
GNode | &lt;code&gt;gnode()&lt;/code&gt;
XNode | &lt;code&gt;node()&lt;/code&gt;
JNode | &lt;code&gt;jnode()&lt;/code&gt;
attribute | &lt;code&gt;attribute()&lt;/code&gt;, &lt;code&gt;attribute(*)&lt;/code&gt;, &lt;code&gt;attribute(a)&lt;/code&gt;, …
document | &lt;code&gt;document-node()&lt;/code&gt;, &lt;code&gt;document-node(*)&lt;/code&gt;, …
function(&lt;em&gt;) | &lt;code&gt;function(*)&lt;/code&gt;, &lt;code&gt;function(xs:int) as xs:int&lt;/code&gt;, …
array(&lt;/em&gt;) | &lt;code&gt;array(*)&lt;/code&gt;, &lt;code&gt;array(xs:int)&lt;/code&gt;, …
map(*) | &lt;code&gt;map(*)&lt;/code&gt;, &lt;code&gt;map(xs:int, xs:int)&lt;/code&gt;, …&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2011 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:27:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2011</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2011</guid>
   <description>&lt;div&gt;&lt;p&gt;675(part): Add XSLT static typing rules for new kinds of XPath expression&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2038 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:24:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2038</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2038</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop dependency of fn:apply-templates on the default mode&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2043 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:24:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2043</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2043</guid>
   <description>&lt;div&gt;&lt;p&gt;2038 Tweak the rules for fn:apply-templates references to modes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2101 created</title>
   <pubDate>Tue, 15 Jul 2025 16:21:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2101</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2101</guid>
   <description>&lt;div&gt;&lt;p&gt;Named record types: drop constructors, complete list&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The spec defines various built-in named record types (https://qt4cg.org/specifications/xpath-functions-40/Overview.html#id-built-in-named-record-types):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;key-value-pair
load-xquery-module-record
parsed-csv-structure-record
random-number-generator-record
schema-type-record
uri-structure-record
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suggestions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The spec says in https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-named-record-types:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Named record types implicitly create a constructor function that can be used to create instances of the record type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I would propose excluding the constructors for built-in types. It will save us a lot of bulky code in the implementations, for functions that will hardly be used, as they all refer to return types of existing functions. Ironically, the only exception might be &lt;code&gt;key-value-pair&lt;/code&gt;, but it is redundant anyway (we already have &lt;code&gt;map:pair&lt;/code&gt;… unless it is dropped, together with the record type, by #2092).&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;A type is missing for the result of &lt;code&gt;fn:divide-decimals&lt;/code&gt;, and we should suffix &lt;code&gt;key-value-pair&lt;/code&gt; with &lt;code&gt;-record&lt;/code&gt; (provided we will keep it in the spec).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2014 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:19:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2014</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2014</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-122-01 Add notes, examples, and rationale for xsl:select&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2003 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:17:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2003</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2003</guid>
   <description>&lt;div&gt;&lt;p&gt;Conditional entries in map constructors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2094 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:17:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2094</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2094</guid>
   <description>&lt;div&gt;&lt;p&gt;2003 Generalize Map Constructors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2083 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:13:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2083</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2083</guid>
   <description>&lt;div&gt;&lt;p&gt;2054 Generalized Path Expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2031 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:03:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2031</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2031</guid>
   <description>&lt;div&gt;&lt;p&gt;2025 JNodes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1307 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:02:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1307</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1307</guid>
   <description>&lt;div&gt;&lt;p&gt;For symmetry, add functions array:scan-left and array:scan-right&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2057 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:02:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2057</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2057</guid>
   <description>&lt;div&gt;&lt;p&gt;Steps: variable element names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2035 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:02:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2035</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2035</guid>
   <description>&lt;div&gt;&lt;p&gt;Recursive record types: unrealistic example in XPath spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2096 closed</title>
   <pubDate>Tue, 15 Jul 2025 16:02:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2096</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2096</guid>
   <description>&lt;div&gt;&lt;p&gt;2035 Drop unworkable example of recursive record types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2100 created</title>
   <pubDate>Tue, 15 Jul 2025 15:55:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2100</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2100</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With #2083, some XQFO functions was generalized for JNodes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:distinct-ordered-nodes
fn:generate-id
fn:root
fn:siblings
fn:transitive-closure
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Others are still pending (to be completed):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:has-children
fn:innermost
fn:outermost
fn:path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;analyze the rules of the existing functions (for example, what happens if both XNodes and JNodes are used in &lt;code&gt;fn:transitive-closure&lt;/code&gt;?)&lt;/li&gt;
&lt;li&gt;add more functions.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2099 created</title>
   <pubDate>Tue, 15 Jul 2025 12:31:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2099</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2099</guid>
   <description>&lt;div&gt;&lt;p&gt;Choosing names for the jnode function and the jnode type&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As a late-breaking change to PR #2083, the item type syntax for matching JNodes has been changed to &lt;code&gt;jnode-type()&lt;/code&gt;, to avoid a clash with the name of the function &lt;code&gt;fn:jnode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We might prefer to resolve this clash in a different way.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2098 created</title>
   <pubDate>Tue, 15 Jul 2025 11:24:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2098</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2098</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: combining node sequences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Internal questions and feedback on the &lt;code&gt;union&lt;/code&gt; operator, triggered by the JNodes proposal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Will &lt;code&gt;{ 1: 2 } union { 3: 4 }&lt;/code&gt; be allowed, or will it be &lt;code&gt;{ 1: 2 }/. union { 3: 4 }/.&lt;/code&gt; ?&lt;/li&gt;
&lt;li&gt;Combining maps and arrays: one might expect &lt;code&gt;{ 1: 2 } union { 3: 4 }&lt;/code&gt; to result in &lt;code&gt;{ 1: 2, 3: 4 }&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;union&lt;/code&gt; et al. are enhanced anyway, couldn’t they be generalized for sequences? &lt;code&gt;(1, 2) union 3&lt;/code&gt; → &lt;code&gt;(1, 2, 3)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;…which I answered as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I guess no; the conversion to JNodes is needed.&lt;/li&gt;
&lt;li&gt;…a good reason why we should not implicitly coerce maps/arrays to JNodes.&lt;/li&gt;
&lt;li&gt;For atomic-only sequences, it could be equivalent to &lt;code&gt;fn:distinct-values((A, B))&lt;/code&gt;. For heterogenous sequences, it gets tricky: How should &lt;code&gt;&amp;lt;a&amp;gt;1&amp;lt;/a&amp;gt; union 1e0&lt;/code&gt; be combined? Similar to how functions like &lt;code&gt;fn:min&lt;/code&gt; are defined, it could be the first item that determines how the remaining input is combined (but the operation would not be commutative anymore; &lt;code&gt;A union B&lt;/code&gt; might yield different results than &lt;code&gt;B union A&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 129 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 14 Jul 2025 12:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/07-15</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-07-15</guid>
</item><item>
   <title>Issue #366 closed</title>
   <pubDate>Mon, 14 Jul 2025 06:41:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/366</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-366</guid>
   <description>&lt;div&gt;&lt;p&gt;Support xsl:use-package with xsl:package-location&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2097 created</title>
   <pubDate>Sun, 13 Jul 2025 10:31:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2097</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2097</guid>
   <description>&lt;div&gt;&lt;p&gt;`jnode` as a subtype of `node`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It seems that introduce &lt;code&gt;jnode&lt;/code&gt; by extending &lt;code&gt;node&lt;/code&gt; is more consistent than introducing &lt;code&gt;jnode&lt;/code&gt; as a data type that is a sibling to &lt;code&gt;node&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I would like to hear comments about pros and cons of this approach.&lt;/p&gt;
&lt;p&gt;@ruv &lt;a href="https://github.com/qt4cg/qtspecs/pull/2083#issuecomment-3056148707"&gt;wrote&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I wonder what if &lt;code&gt;jnode&lt;/code&gt; was a subtype of &lt;code&gt;node&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;@michaelhkay &lt;a href="https://github.com/qt4cg/qtspecs/pull/2083#issuecomment-3062732836"&gt;wrote&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Then all operations on node would become available for jnode, including many that obviously don't make sense, for example getting the in-scope namespaces, applying schema validation, etc etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This does not seem to be a problem. There are many features that make sense for one node kind (or type) and don't make sense for other.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:name()&lt;/code&gt; does not make sense for &lt;code&gt;document-node()&lt;/code&gt;, &lt;code&gt;comment()&lt;/code&gt;, &lt;code&gt;text()&lt;/code&gt; (but applies to them and return the empty string);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:in-scope-prefixes()&lt;/code&gt; applies to only a node that is an &lt;code&gt;element()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;the constructor &lt;code&gt;document { }&lt;/code&gt; does not accept an attribute node.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus, nodes that are a subtype of jnode can have their own restrictions.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;jnode&lt;/code&gt; as subtype of &lt;code&gt;node&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;There can be four direct subtypes of &lt;code&gt;jnode&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map-node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array-node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map-entry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array-member&lt;/code&gt; (or maybe let's call it &lt;code&gt;array-entry&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, &lt;code&gt;jnode&lt;/code&gt; is a union of them: &lt;code&gt;jnode = map-node | array-node | map-entry | array-entry&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Nodes of the type &lt;code&gt;map-node&lt;/code&gt; and &lt;code&gt;array-node&lt;/code&gt; are similar to &lt;code&gt;document-node&lt;/code&gt;. Their parent is &lt;strong&gt;always&lt;/strong&gt; &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The child axis of a &lt;code&gt;jnode&lt;/code&gt; can contains &lt;strong&gt;only&lt;/strong&gt; nodes of the type &lt;code&gt;map-entry | array-entry&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An advantage of this approach is that there is no need to introduce XNode and GNode, and corresponding confusion, like say that &lt;code&gt;node()&lt;/code&gt; matches XNode, but not GNode (in the general case).&lt;/p&gt;
&lt;p&gt;This probably also allows us to specify XSLT for jnodes more seamlessly.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2096 created</title>
   <pubDate>Sun, 13 Jul 2025 10:07:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2096</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2096</guid>
   <description>&lt;div&gt;&lt;p&gt;2035 Drop unworkable example of recursive record types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2035&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2095 created</title>
   <pubDate>Sun, 13 Jul 2025 09:37:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2095</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2095</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: result processing&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;By playing around with the new JNodes syntax, I noticed that the somewhat bulky function &lt;code&gt;fn:jnode-content&lt;/code&gt; needs to be used a lot to process the result of a path traversal, basically every time when coercion is not possible or does not make sense (iterations, any operation based on &lt;code&gt;item()*&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;An example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;{ 'Catania': { 'nomi': ('Alfredo', 'Andrea') } }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Count the number of persons in Catania:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;./Catania/nomi =&amp;gt; jnode-content() =&amp;gt; count()
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;List all persons in upper case:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $nome in .//nomi =&amp;gt; jnode-content()
return upper-case($nome)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To prevent users from selectively resorting to the shorter lookup syntax…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;.?Catania?nomi =&amp;gt; count()

for $nome in .?Catania?*?nomi
return upper-case($nome)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…we could include another pseudo-function that returns the content/value instead of a JNode:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;./Catania/content(nomi) =&amp;gt; count()

for $nome in .//content(nomi) 
return upper-case($nome)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One drawback would be that this would violate the current principle that the righthand side is only a filter.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2094 created</title>
   <pubDate>Sun, 13 Jul 2025 08:40:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2094</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2094</guid>
   <description>&lt;div&gt;&lt;p&gt;2003 Generalize Map Constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Allows conditional and repeated entries in a map constructor.&lt;/p&gt;
&lt;p&gt;Fix #2003&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2093 created</title>
   <pubDate>Sat, 12 Jul 2025 09:07:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2093</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2093</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: structuring&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The way the XQFO functions are structured is becoming increasingly arbitrary. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Processing sequences: &lt;code&gt;fn:doc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Processing nodes: &lt;code&gt;fn:string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Processing QNames: &lt;code&gt;fn:in-scope-prefixes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Parsing and serializing: &lt;code&gt;fn:xsd-validator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For at least 10% of the functions, it will be difficult to find a good categorization (categorization is a challenging topic in itself), but maybe we can improve the status quo.&lt;/p&gt;
&lt;p&gt;We can certainly tackle this at a later stage; this issue is only about reminding us of the task.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1715 closed</title>
   <pubDate>Fri, 11 Jul 2025 21:45:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1715</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1715</guid>
   <description>&lt;div&gt;&lt;p&gt;Array Lookups: partial removal of out-of-bounds checks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1995 closed</title>
   <pubDate>Fri, 11 Jul 2025 21:42:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1995</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1995</guid>
   <description>&lt;div&gt;&lt;p&gt;Consistency: array lookups&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1872 closed</title>
   <pubDate>Fri, 11 Jul 2025 21:42:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1872</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1872</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays: members → values / entries?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1871 closed</title>
   <pubDate>Fri, 11 Jul 2025 21:38:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1871</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1871</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays and maps: consistency&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2092 created</title>
   <pubDate>Fri, 11 Jul 2025 20:34:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2092</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2092</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop map:pair, map:of-pairs, map:pairs, array:members, array:of-members&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose dropping the three functions &lt;code&gt;map:pair&lt;/code&gt;, &lt;code&gt;map:of-pairs&lt;/code&gt;, &lt;code&gt;map:pairs&lt;/code&gt;, together with the built-in record type &lt;code&gt;fn:key-value-pair&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the introduction of JNodes, I think these are redundant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In place of &lt;code&gt;map:pairs($map)&lt;/code&gt;, use &lt;code&gt;$map/*&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In place of &lt;code&gt;map:pair($key, $value)&lt;/code&gt;, use &lt;code&gt;{$key : $value}/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In place of &lt;code&gt;map:of-pairs&lt;/code&gt;, use &lt;code&gt;map:build($jnodes, jnode-selector#1, jnode-content#1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm proposing to keep the map:entry, map:entries, and map:merge trio which also do much the same thing.&lt;/p&gt;
&lt;p&gt;Similarly, I propose dropping &lt;code&gt;array:members&lt;/code&gt; and &lt;code&gt;array:of-members&lt;/code&gt;, and "value records":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In place of &lt;code&gt;array:members($array)&lt;/code&gt;, use &lt;code&gt;$array/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In place of &lt;code&gt;array:of-members&lt;/code&gt;, use &lt;code&gt;array:build($jnodes, jnode-content#1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Alternatively: keep the functions but define them to return and consume JNodes, rather than key-value and value records.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2046 closed</title>
   <pubDate>Fri, 11 Jul 2025 15:29:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2046</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2046</guid>
   <description>&lt;div&gt;&lt;p&gt;Promote ".." to a primary expression&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2076 closed</title>
   <pubDate>Fri, 11 Jul 2025 14:18:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2076</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2076</guid>
   <description>&lt;div&gt;&lt;p&gt;TOC: Interaction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2091 closed</title>
   <pubDate>Fri, 11 Jul 2025 14:18:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2091</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2091</guid>
   <description>&lt;div&gt;&lt;p&gt;ToC changes per issue #2076&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2091 created</title>
   <pubDate>Fri, 11 Jul 2025 14:18:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2091</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2091</guid>
   <description>&lt;div&gt;&lt;p&gt;ToC changes per issue #2076&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2076&lt;/p&gt;
&lt;p&gt;Hopefully this is an improvement!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2090 closed</title>
   <pubDate>Fri, 11 Jul 2025 07:12:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2090</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2090</guid>
   <description>&lt;div&gt;&lt;p&gt;What does it mean to send an `encoding` serialization parameter to `fn:serialize`?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2090 created</title>
   <pubDate>Thu, 10 Jul 2025 16:35:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2090</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2090</guid>
   <description>&lt;div&gt;&lt;p&gt;What does it mean to send an `encoding` serialization parameter to `fn:serialize`?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We say that &lt;code&gt;fn:serialize()&lt;/code&gt; returns a string, so I'd expect it to be UTF-8 (or UTF-16, or whatever the implementation's common character set is for strings). I don't see any mention of the meaning of encoding.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2089 created</title>
   <pubDate>Wed, 9 Jul 2025 11:46:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2089</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2089</guid>
   <description>&lt;div&gt;&lt;p&gt;JNode properties: Presentation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Maybe the presentation of XNode and JNode properties could be aligned.&lt;/p&gt;
&lt;p&gt;The XDM uses square brackets for XML node properties:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Document node properties are derived from the infoset as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;base-uri&lt;/strong&gt;
    The value of the &lt;strong&gt;[base URI]&lt;/strong&gt; property, if available, […]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…and the character ¶ for JNode properties:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JNode has the following properties:
    &lt;strong&gt;¶parent&lt;/strong&gt;: a JNode […]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Would it make sense to always use ¶ or square brackets, or are the kind of properties we talk about too different in order to be aligned? In the latter case, we may need to clarify this in the spec, or add some words on (possibly non-existing) GNode properties.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2088 created</title>
   <pubDate>Wed, 9 Jul 2025 11:24:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2088</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2088</guid>
   <description>&lt;div&gt;&lt;p&gt;File Module: Feedback, Observations&lt;/p&gt;&lt;div class="markup"&gt;&lt;h4&gt;1. “Regular files” (QT4CG-128-01)&lt;/h4&gt;
&lt;p&gt;Add POSIX reference.&lt;/p&gt;
&lt;h4&gt;2. Permissions (QT4CG-128-02)&lt;/h4&gt;
&lt;p&gt;All functions should be checked with regard to permission handling. Due to the variety of file systems and the programming languages that operate on them, it may turn out that &lt;code&gt;file:not-found&lt;/code&gt; and &lt;code&gt;file:io-error&lt;/code&gt; is all we can offer.&lt;/p&gt;
&lt;h4&gt;3. &lt;code&gt;file:is-absolute&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The rule says: “A path is absolute if it does not need to be combined with other path information, such as the current directory, to locate a file.”&lt;/p&gt;
&lt;p&gt;Thus, &lt;code&gt;file:is-absolute('/')&lt;/code&gt; must &lt;strong&gt;not&lt;/strong&gt; return true on Windows systems, as the drive letter is missing.&lt;/p&gt;
&lt;p&gt;Other rules of the spec that refer to absolute file paths should reflect this.&lt;/p&gt;
&lt;h4&gt;4. &lt;code&gt;file:resolve-path&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Additionally, Rule 1 “If &lt;code&gt;$path&lt;/code&gt; is an absolute path, it is returned unchanged.” contradicts the final sentence, which states that a separator must be added to directory paths:&lt;/p&gt;
&lt;p&gt;…to be continued.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2087 created</title>
   <pubDate>Wed, 9 Jul 2025 08:24:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2087</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2087</guid>
   <description>&lt;div&gt;&lt;p&gt;Adaptive serialization: JNodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The (proposed) spec currently says (for the adaptive output method)&lt;/p&gt;
&lt;p&gt;A JNode is serialized by serializing its ¶value property.&lt;/p&gt;
&lt;p&gt;I propose changing the output to&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JNode(k:v)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where k is the serialization of the selector property and v is the serialization of the value property.&lt;/p&gt;
&lt;p&gt;The rule for the JSON output method remains the same.&lt;/p&gt;
&lt;p&gt;The reason for the change is so that people can see when a query returns a JNode as distinct from returning its value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2086 created</title>
   <pubDate>Tue, 8 Jul 2025 20:10:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2086</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2086</guid>
   <description>&lt;div&gt;&lt;p&gt;Can the ¶value property of a JNode be (or contain) a JNode?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The data model allows the ¶value property of a JNode be (or contain) a JNode. But can it actually happen, and if so, what are the consequences?&lt;/p&gt;
&lt;p&gt;I think it can happen. Although fn:JNode can't be applied directly to a JNode, it is possible to construct a map or array in which the entries/members are (or contain) JNodes. We can then wrap such an array or map in a JNode using the fn:JNode function, and the child axis applied to this containing array will return JNodes that have JNodes as their ¶value properties.&lt;/p&gt;
&lt;p&gt;While the results may be confusing, I don't think they are harmful (and someone may find an imaginative way of making use of such a structure). For the time being therefore, I propose to allow it, perhaps with an explanatory note to point out any dangers.&lt;/p&gt;
&lt;p&gt;Should atomization of a JNode unwrap multiple layers? We currently say that if a JNode J has a ¶value V, then the atomization of J is the atomization of V. I see no particular reason to change that rule, but again, it's an edge case we might draw attention to.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 128 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 8 Jul 2025 16:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/07-08</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—07-08</guid>
</item><item>
   <title>Issue #2085 closed</title>
   <pubDate>Tue, 8 Jul 2025 16:24:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2085</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2085</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix markup errors in the EXPath file: specification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2085 created</title>
   <pubDate>Tue, 8 Jul 2025 16:24:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2085</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2085</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix markup errors in the EXPath file: specification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The FOS schema does not allow an fos:example containing an fos:test to omit the fos:result element. I’ve inserted&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;fos:result&amp;gt;���&amp;lt;/fos:result&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;as a placeholder to mark the problem. I also had to move some of the fos:errors sections to a different location.&lt;/p&gt;
&lt;p&gt;@ChristianGruen apologies for just pushing these in. I wanted to get the specs building again.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2070 closed</title>
   <pubDate>Tue, 8 Jul 2025 16:01:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2070</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2070</guid>
   <description>&lt;div&gt;&lt;p&gt;Map build patch&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2016 closed</title>
   <pubDate>Tue, 8 Jul 2025 16:00:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2016</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2016</guid>
   <description>&lt;div&gt;&lt;p&gt;File Module: Incorporate changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2077 closed</title>
   <pubDate>Tue, 8 Jul 2025 16:00:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2077</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2077</guid>
   <description>&lt;div&gt;&lt;p&gt;2016 File Module: Incorporate changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 128 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 7 Jul 2025 12:40:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/07-08</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-07-08</guid>
</item><item>
   <title>Issue #2084 created</title>
   <pubDate>Sat, 5 Jul 2025 17:30:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2084</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2084</guid>
   <description>&lt;div&gt;&lt;p&gt;Steps when the context value contains multiple nodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have two conflicting statements in the spec.&lt;/p&gt;
&lt;p&gt;§4.6.4 says: "The step expression S is equivalent to ./S. Thus, if the context value is a sequence containing multiple nodes, the semantics of a step expression are equivalent to a path expression in which the step is always applied to a single node."&lt;/p&gt;
&lt;p&gt;§4.6.5 says: "When the context value for evaluation of a step includes multiple nodes, the step is evaluated separately for each of those nodes, and the results are combined without reordering."&lt;/p&gt;
&lt;p&gt;I'm not sure which is intended: does S means&lt;code&gt;. / S&lt;/code&gt;, or &lt;code&gt;. ! S&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2083 created</title>
   <pubDate>Sat, 5 Jul 2025 12:09:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2083</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2083</guid>
   <description>&lt;div&gt;&lt;p&gt;2054 Generalized Path Expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal (which has the JNodes proposal as its baseline) is a first cut at defining generalised steps and path expressions that handle both XNodes and JNodes in a uniform way.&lt;/p&gt;
&lt;p&gt;The proposal adds functionality to path expressions (using "/") but does not yet remove the corresponding functionality from lookup expressions (using "?") - that will follow in a subsequent draft.&lt;/p&gt;
&lt;p&gt;The changes are largely confined to XPath section §4.6.&lt;/p&gt;
&lt;p&gt;Obviously there is much scope to add notes and examples. There is also a need to reorganise sections so concepts are introduced before they are referenced.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2082 created</title>
   <pubDate>Fri, 4 Jul 2025 16:43:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2082</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2082</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-html options parameter conventions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In most functions, the options parameters have types such as &lt;code&gt;xs:boolean&lt;/code&gt; and &lt;code&gt;xs:string&lt;/code&gt;. But in &lt;code&gt;parse-html&lt;/code&gt;, they are &lt;code&gt;xs:boolean?&lt;/code&gt; and &lt;code&gt;xs:string?&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2081 closed</title>
   <pubDate>Thu, 3 Jul 2025 21:23:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2081</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2081</guid>
   <description>&lt;div&gt;&lt;p&gt;Destructuring let combined with for clause&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2081 created</title>
   <pubDate>Thu, 3 Jul 2025 20:29:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2081</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2081</guid>
   <description>&lt;div&gt;&lt;p&gt;Destructuring let combined with for clause&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We may need to look at expressions of the following kind…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $($a, $b) := (1 to 6) ! string()
for $i in 1 to 3
return ($a, $b, $i)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…which currently yield an exception:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Improper use? Potential bug? Your feedback is welcome:
Contact: basex-talk@mailman.uni-konstanz.de
Version: BaseX 12.1 beta
Java: Eclipse Adoptium, 17.0.14
OS: Windows 11, amd64
java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 32
	at org.basex.query.var.QueryStack.set(QueryStack.java:124)
	at org.basex.query.QueryContext.set(QueryContext.java:577)
	at org.basex.query.expr.gflwor.Let$LetEval.next(Let.java:147)
	at org.basex.query.expr.gflwor.GFLWOR$1.next(GFLWOR.java:79)
	at org.basex.query.scope.MainModule$1.next(MainModule.java:65)
	at org.basex.query.QueryContext.next(QueryContext.java:395)
	at org.basex.query.QueryContext.lambda$6(QueryContext.java:629)
	at org.basex.query.QueryContext.run(QueryContext.java:770)
	at org.basex.query.QueryContext.cache(QueryContext.java:609)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2080 created</title>
   <pubDate>Thu, 3 Jul 2025 20:24:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2080</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2080</guid>
   <description>&lt;div&gt;&lt;p&gt;Destructuring let clauses: Bind remaining values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With the new LetSequenceBinding, LetArrayBinding and LetMapBinding clauses, single items of an evaluated expression can be partially bound:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $($a, $b) := (1, 2, 3)
let $[$a $b, $c] := [ 1, 2, 3 ]
let ${$a, $b} := { 'a': 1, 'b': 2, 'c': 3 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be helpful to be able to also bind all remaining items, for example with the three-dot syntax. If we allow this syntax for maps, the result could be a submap with all entries except for the ones that were bound by previous bindings:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: $first: 1, $remaining: (2, 3) :)
let $($first, $remaining...) := (1, 2, 3)

(: $first: 1, $remaining: (2, 3) :)
let $[$first, $remaining...] := [ 1, 2, 3 ]

(: $a: 1, $remaining: { 'b': 2, 'c': 3 } :)
let ${$a, $remaining...} := { 'a': 1, 'b': 2, 'c': 3 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2079 created</title>
   <pubDate>Thu, 3 Jul 2025 12:18:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2079</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2079</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend EQName with optional prefix&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A QName has three components, prefix, uri, and local, and it's sometimes useful to be able to specify all three.&lt;/p&gt;
&lt;p&gt;I suggest extending the definition of EQName to allow the format Q{uri}prefix:local, where the optional prefix is documentary only, but is present in the resulting QName value.&lt;/p&gt;
&lt;p&gt;There may be a need to look at places where EQNames are used and to describe the consequences of using this format.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2078 created</title>
   <pubDate>Thu, 3 Jul 2025 03:14:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2078</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2078</guid>
   <description>&lt;div&gt;&lt;p&gt;2031/2025 JNodes: inconsistency in data model taxonomy, definitions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Per chair request, I'm raising an issue on PR #2031 (on issue #2025), even though it has not been adopted by the CG.&lt;/p&gt;
&lt;p&gt;I strongly support the JNodes proposal. But in its current state, I have concerns about the fundamentals. If I am right, or only partly right, adjustments will have cascading effects.&lt;/p&gt;
&lt;p&gt;I realize that throughout the specs we use the "Definition" rubric loosely, but, for the points I raise below, I would ask that we at least aspire to a more robust definition of "definition." I draw on the classic Aristotelian model, where a good definition should specify the definiendum's genus ("definiendum" = "the thing to be defined"), then supply only those predicates needed to distinguish the definiendum from other species of that genus. The classic example is the definition of "human being" as a "rational animal." The animal is the genus, and the adjective "rational" delimits human beings from non-human being animals. No need to get hung up on details -- that's the gist of the what informs my comments below.&lt;/p&gt;
&lt;p&gt;The PR proposes the new top-level structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GNode
&lt;ul&gt;
&lt;li&gt;XNode&lt;/li&gt;
&lt;li&gt;JNode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first term is defined: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: The term generic node or GNode is a collective term for XNodes (more commonly called simply nodes) representing the parts of an XML document, and JNodes, often used to represent the parts of a JSON document.]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This definition attempts to define things outside the scope of the definiendum. It is presented here as a kind of abstract umbrella category for more specific things. Not a big deal; we carry on:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: An XNode, more commonly referred to simply as a node, represents a construct found in an XML document. There are seven kinds: document nodes, element nodes, attribute nodes, text nodes, comment nodes, processing instruction nodes, and namespace nodes]
[Definition: A JNode represents an encapsulation of a value in a tree of maps and arrays, such as might be obtained by parsing a JSON document. XDM maps and arrays, however, are more general than those found in JSON.]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Each of these two definitions says not what the definiendum is, but rather what it does ("represents": like a member of parliament represents constituents? -- confusing). It also includes buffer words that introduce intermediaries between the definiendum and the thing you would think most immediate to it: "construct," "found," "encapsulation," "value."&lt;/p&gt;
&lt;p&gt;More difficult is the fact that, like GNode, an XNode is an abstract category and not a thing in itself. But a JNode, we learn later, is not an abstract category, but an actual thing, with properties. So at the top level of the taxonomy, we have an inconsistency, between abstract categories that have no instantiation, versus those that do, and the two are put in parataxis.&lt;/p&gt;
&lt;p&gt;The definition of JNode is not well formulated. It restricts itself to "a value in a tree of maps and arrays" but not to maps and arrays themselves. Does the quoted phrase mean a map entry or an array member? Or the value within said entry or member? &lt;/p&gt;
&lt;p&gt;Slight tangent: in the specs' definition of "value," the term is not really defined, but simply said to be synonymous with "sequence." But in practice the word substitution doesn't work. More often, the specs use "value" in a more restricted, common-sense meaning, to describe a two-term relationship. A thing "owns" a value and some datum inhabits the role of that thing's value. X has value Y. Y is value of X. We run into problems with the ambiguous word "value." Currently a JNode encapsulates a value (see above). But it also has the property (we learn later) of value. So the value has a value?&lt;/p&gt;
&lt;p&gt;The JNode definition is sharpened, not in the data model, where it should be, but in the opening sentence of XSLT section 20: "A JNode is a wrapper around a map or array, or around a value that appears within the content of a map or array." This raises the question, what is a wrapper? And content? But it also raises the question about the relationship between JNode and map and between JNode and array, and the juxtaposition of JNode with XNode accentuates the difference. We would never say that an XNode is a wrapper around an element, an attribute, etc. The inconsistency is of a piece with the confusion I've pointed out above concerning the taxonomy of the data model.&lt;/p&gt;
&lt;p&gt;Before I propose a solution, I need to probe a similar problem that already exists in the specs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: A &lt;strong&gt;function&lt;/strong&gt; is an item that can be &lt;strong&gt;called&lt;/strong&gt;. ]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The word "called" is set in boldface, as if it is a technical term defined elsewhere. It is not, and is rarely used in the specs. What is it for something to be callable? Non-callable? To my mind, we do not have a proper definition of "function," and it is fair game for adjustment. As we have done. In 4.0 we have promoted the function and its proper parts into the topmost level of the data model taxonomy (with adjustments to a few definitions).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: An array item (also called simply an array) is a function item that represents an array.]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This suffers from the same flaws as GNode and XNode ("represents"), and is tautologous. In the version 3.1 definition of "map" we had the same problem, but the version 4.0 definition at least avoids the tautology.&lt;/p&gt;
&lt;p&gt;So, to sum, we have definitions that aren't, inconsistency in our data model taxonomy, and a variety of other problems.&lt;/p&gt;
&lt;h3&gt;A different approach&lt;/h3&gt;
&lt;p&gt;We all intuit that the new taxonomy GNode - (XNode | JNode) is meaningful, useful, and important. Arrays and maps really are trees as much as they are functions.&lt;/p&gt;
&lt;p&gt;Let all three terms GNode, XNode, and JNode be defined as abstract categories.&lt;/p&gt;
&lt;p&gt;Just as XNode is subdivided into specific xnodes, let JNode subdivide into four specific jnodes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;map entry&lt;/li&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;array member&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Adopt the same approach we do for xnodes, and define each of the four on its own terms. Define map - map entry and array - array member along lines similar to the approach adopted in 6.6 to define element - attribute (quite analogous!). We have wrestled over having to have both sequence and selector properties. But with this new approach, we are not stuck. Only map and array jnodes require a sequence property. Map entry and array member jnodes require only the selector property, not the sequence.&lt;/p&gt;
&lt;p&gt;This approach is extensible. Suppose we have a proposal for a new JNode. It's a blork, and every blork has one or more cheegs, each one of which has one or more drazers. We simply define three more JNodes: blork, cheeg, drazer. We make sure that the properties for each are suited to what they are individually (the same way we do for the 7 types of XNodes).&lt;/p&gt;
&lt;p&gt;One more step, the most controversial: drop Map Items and Array Items from the Function Items category. Yes, there is a fundamental way in which maps and arrays behave like (non-map/array) functions, but there are also equally fundamental ways in which maps and arrays behave like XNodes. If we do not need to define maps and arrays subordinate to XNodes/nodes, then why should we define them subordinate to functions? JNodes have dual citizenship.&lt;/p&gt;
&lt;p&gt;An alternative taxonomy is to drop the concept of GNode altogether, and let there be four kinds of item: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;item 
&lt;ul&gt;
&lt;li&gt;anyAtomicType &lt;/li&gt;
&lt;li&gt;XNode 
&lt;ul&gt;
&lt;li&gt;attribute &lt;/li&gt;
&lt;li&gt;document &lt;/li&gt;
&lt;li&gt;element &lt;/li&gt;
&lt;li&gt;text &lt;/li&gt;
&lt;li&gt;comment &lt;/li&gt;
&lt;li&gt;processing-instruction &lt;/li&gt;
&lt;li&gt;namespace &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JNode/JFunction 
&lt;ul&gt;
&lt;li&gt;map &lt;/li&gt;
&lt;li&gt;map entry &lt;/li&gt;
&lt;li&gt;array &lt;/li&gt;
&lt;li&gt;array member &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;function(*)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2077 created</title>
   <pubDate>Wed, 2 Jul 2025 11:00:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2077</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2077</guid>
   <description>&lt;div&gt;&lt;p&gt;2016 File Module: Incorporate changes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Includes general refactorings.&lt;/p&gt;
&lt;p&gt;Closes #2016&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2076 created</title>
   <pubDate>Wed, 2 Jul 2025 08:59:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2076</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2076</guid>
   <description>&lt;div&gt;&lt;p&gt;TOC: Interaction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Based on user feedback that I got, it seems that the solution to expand/collapse a sub-TOC could be more intuitive.&lt;/p&gt;
&lt;p&gt;@ndw Would it be possible to remove the rightmost arrow icon, and to simply expand the subentries when a TOC entry is clicked? This would also decrease the number of icons, and it would remove the current, somewhat confusing behavior that a TOC entry is also expanded/collapsed when the empty area to the right of the arrow is clicked.&lt;/p&gt;
&lt;p&gt;We could keep the arrow on top level to be able to expand/collapse all entries.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2075 created</title>
   <pubDate>Wed, 2 Jul 2025 08:50:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2075</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2075</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial notes (incremental)&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;The »Summary of Changes« sections contain outdated information that refer to the presentation of the specs. Maybe we don’t really need them:
&lt;ul&gt;
&lt;li&gt;Use the arrows to browse significant changes since the 3.1 version of this specification.&lt;/li&gt;
&lt;li&gt;Sections with significant changes are marked Δ in the table of contents. New functions introduced in this version are marked ➕ in the table of contents.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…to be continued.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NO ACTION&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2074 closed</title>
   <pubDate>Wed, 2 Jul 2025 08:13:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2074</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2074</guid>
   <description>&lt;div&gt;&lt;p&gt;JPath operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2074 created</title>
   <pubDate>Wed, 2 Jul 2025 08:05:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2074</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2074</guid>
   <description>&lt;div&gt;&lt;p&gt;JPath operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Christian (I'm not sure where....) has proposed using an operator other than &lt;code&gt;?&lt;/code&gt;, for example &lt;code&gt;?/&lt;/code&gt;, for paths involving JNodes.&lt;/p&gt;
&lt;p&gt;This would eliminate some of the non-orthogonalities introduced in the interests of backwards compatibility. For example, the result could always be in document order with duplicates eliminated (which is not currently true for &lt;code&gt;A?B&lt;/code&gt;). &lt;code&gt;A?/B&lt;/code&gt; could then be truly synonymous with &lt;code&gt;A?/child::B&lt;/code&gt;, with no ifs and buts. The result would always be a sequence of JNodes, they would only be unwrapped if used in a context (such as arithmetic) where coercion forces the unwrapping.&lt;/p&gt;
&lt;p&gt;This might (perhaps?) also enable a tidier syntax for filtering by type: the current syntax &lt;code&gt;A?~[sequenceType]&lt;/code&gt; is rather clunky.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2073 created</title>
   <pubDate>Wed, 2 Jul 2025 07:47:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2073</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2073</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes and Sequences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The JNode model as currently proposed doesn't handle sequences very elegantly: specifically maps and arrays whose entries/members contain values of more than one item.&lt;/p&gt;
&lt;p&gt;Also (but separate) handling of empty maps, arrays, and sequences isn't ideal.&lt;/p&gt;
&lt;p&gt;Consider the map &lt;code&gt;{"a": 1, "b": [2], "c": (3, 4), "d": ([5], [6]), "e": (7, [8]), "f": []}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Applying &lt;code&gt;child::*&lt;/code&gt; to this map gives you six JNodes, as you would expect, with selector properties "a", "b", "c", "d", "e", "f". After that, things get complicated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The JNode &lt;code&gt;child::a&lt;/code&gt; has a value of &lt;code&gt;1&lt;/code&gt;, and no children.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The JNode &lt;code&gt;child::b&lt;/code&gt; has a value of &lt;code&gt;[2]&lt;/code&gt;, and has one child, with selector=1, value=2, position=1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The JNode &lt;code&gt;child::c&lt;/code&gt; has a value of (3,4), and no children.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The JNode &lt;code&gt;child::d&lt;/code&gt; has a value of &lt;code&gt;([5], [6])&lt;/code&gt;, and has two children. The first child has selector=1,  position=1, value=5; the second has selector=1, position=2, value=6. Each of these two children itself has one child.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The JNode &lt;code&gt;child::e&lt;/code&gt; has a value of &lt;code&gt;(7, [8])&lt;/code&gt;, and has one child. The child has selector=1,  position=2, value=8.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The JNode &lt;code&gt;child::f&lt;/code&gt; has a value of &lt;code&gt;[]&lt;/code&gt; and no children.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is logic to this, but it isn't easy to explain. I don't at the moment have any clear ideas for improving matters, but raise the issue in the hope that we can come up with ideas.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #835 closed</title>
   <pubDate>Wed, 2 Jul 2025 06:23:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/835</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-835</guid>
   <description>&lt;div&gt;&lt;p&gt;Review names of record types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2040 closed</title>
   <pubDate>Wed, 2 Jul 2025 05:53:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2040</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2040</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery context value declaration&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2050 closed</title>
   <pubDate>Wed, 2 Jul 2025 05:53:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2050</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2050</guid>
   <description>&lt;div&gt;&lt;p&gt;2040 Fix context value declaration issues&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 127 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 1 Jul 2025 16:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/07-01</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—07-01</guid>
</item><item>
   <title>Issue #2072 created</title>
   <pubDate>Tue, 1 Jul 2025 16:27:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2072</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2072</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: accessing properties&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If we decided to introduce a custom JPath expression for JNodes (see #2054), we could possibly use the classic lookup operator to access the properties of JNodes:&lt;/p&gt;
&lt;p&gt;For example, the expression…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $data := { 'name': 'Achab' }
return $data/name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…would result in a JNode…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JNode(
  value     := 'Achab'
  parent    := JNode($data)
  selector  := 'name'
  position  := 1
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and we could use &lt;code&gt;$name?selector&lt;/code&gt; to retrieve the selector. This way, we could possibly go without the specific functions &lt;code&gt;fn:JNode-content&lt;/code&gt;, &lt;code&gt;fn:JNode-selector&lt;/code&gt; and &lt;code&gt;fn:JNode-position&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In principle, the classic lookup operator could be further extended to access properties of XNodes.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #967 closed</title>
   <pubDate>Tue, 1 Jul 2025 15:09:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/967</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-967</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath Appendix I: Comparisons&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1021 closed</title>
   <pubDate>Tue, 1 Jul 2025 15:09:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1021</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1021</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend `fn:doc`, `fn:collection` and `fn:uri-collection` with options maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1583 closed</title>
   <pubDate>Tue, 1 Jul 2025 15:09:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1583</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1583</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON: Parsing and serializing numbers, often undesired E notation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1903 closed</title>
   <pubDate>Tue, 1 Jul 2025 15:09:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1903</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1903</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:scan-left`, `fn:scan-right`: missing steps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1283 closed</title>
   <pubDate>Tue, 1 Jul 2025 11:12:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1283</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1283</guid>
   <description>&lt;div&gt;&lt;p&gt;77b Update expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2071 created</title>
   <pubDate>Tue, 1 Jul 2025 11:11:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2071</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2071</guid>
   <description>&lt;div&gt;&lt;p&gt;77c deep update&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Proposes a new fn:update function that can handle both JNodes and XNodes.&lt;/p&gt;
&lt;p&gt;(this is a branch on a branch, so I don't know how well the diff'ing will work; but look in F&amp;amp;O for the fn:update function)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2070 created</title>
   <pubDate>Mon, 30 Jun 2025 20:04:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2070</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2070</guid>
   <description>&lt;div&gt;&lt;p&gt;Map build patch&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Small edits to &lt;code&gt;map:build&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fix parameter name&lt;/li&gt;
&lt;li&gt;remove surplus blank lines&lt;/li&gt;
&lt;li&gt;add example with multiple keys returned by key function (a map of sequences)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 127 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 30 Jun 2025 10:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/07-01</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-07-01</guid>
</item><item>
   <title>Issue #2068 closed</title>
   <pubDate>Wed, 25 Jun 2025 12:53:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2068</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2068</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial notes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2069 closed</title>
   <pubDate>Wed, 25 Jun 2025 12:53:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2069</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2069</guid>
   <description>&lt;div&gt;&lt;p&gt;1970, 2068 Editorial notes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2069 created</title>
   <pubDate>Wed, 25 Jun 2025 11:58:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2069</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2069</guid>
   <description>&lt;div&gt;&lt;p&gt;1970, 2068 Editorial notes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;#1970, Closes #2068.&lt;/p&gt;
&lt;p&gt;As this PR includes changes that should have been part of #1970 (and minor other fixes), I will immediately merge the PR. If someone objects, I will be happy to revert the change.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2068 created</title>
   <pubDate>Wed, 25 Jun 2025 11:16:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2068</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2068</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial notes&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;#2017: Key should also be mandatory for &lt;code&gt;array:sort-by&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…to be continued.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2059 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:21:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2059</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2059</guid>
   <description>&lt;div&gt;&lt;p&gt;Literal QNames: Adaptive serialization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2060 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:21:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2060</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2060</guid>
   <description>&lt;div&gt;&lt;p&gt;2059 Literal QNames: Adaptive serialization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2017 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:19:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2017</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2017</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:sort-by`: Observations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2062 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:19:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2062</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2062</guid>
   <description>&lt;div&gt;&lt;p&gt;2017 fn:sort-by: Observations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1970 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:18:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1970</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1970</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial notes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2065 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:18:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2065</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2065</guid>
   <description>&lt;div&gt;&lt;p&gt;1970 Editorial notes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2056 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:16:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2056</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2056</guid>
   <description>&lt;div&gt;&lt;p&gt;Implicit Whitespace in `MarkedNCName` and `QNameLiteral`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2064 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:16:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2064</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2064</guid>
   <description>&lt;div&gt;&lt;p&gt;2056 Implicit Whitespace in MarkedNCName and QNameLiteral&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2058 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:13:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2058</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2058</guid>
   <description>&lt;div&gt;&lt;p&gt;Literal QNames: Annotations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2061 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:13:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2061</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2061</guid>
   <description>&lt;div&gt;&lt;p&gt;2058 Literal QNames: Annotations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2067 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:12:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2067</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2067</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix 'TODO' entries in the function catalog from PR 2013&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2067 created</title>
   <pubDate>Tue, 24 Jun 2025 16:12:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2067</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2067</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix 'TODO' entries in the function catalog from PR 2013&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2009 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:06:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2009</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2009</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:variable implicit document nodes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2015 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:06:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2015</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2015</guid>
   <description>&lt;div&gt;&lt;p&gt;2009 Avoid constructing document node when it makes no sense&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2045 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:04:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2045</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2045</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions taking "." as default argument, when "." is empty&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2049 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:04:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2049</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2049</guid>
   <description>&lt;div&gt;&lt;p&gt;2045 Context value can be an empty sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #748 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:02:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/748</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-748</guid>
   <description>&lt;div&gt;&lt;p&gt;Parse functions: consistency&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2013 closed</title>
   <pubDate>Tue, 24 Jun 2025 16:02:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2013</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2013</guid>
   <description>&lt;div&gt;&lt;p&gt;748 Parse functions: consistency&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1942 closed</title>
   <pubDate>Tue, 24 Jun 2025 15:58:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1942</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1942</guid>
   <description>&lt;div&gt;&lt;p&gt;37 Support sequence, array, and map destructuring declarations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #37 closed</title>
   <pubDate>Tue, 24 Jun 2025 15:57:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/37</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-37</guid>
   <description>&lt;div&gt;&lt;p&gt;Support sequence, array, and map destructuring declarations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2055 closed</title>
   <pubDate>Tue, 24 Jun 2025 15:57:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2055</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2055</guid>
   <description>&lt;div&gt;&lt;p&gt;37 Sequence, Array, and Map destructuring&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2066 created</title>
   <pubDate>Tue, 24 Jun 2025 15:41:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2066</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2066</guid>
   <description>&lt;div&gt;&lt;p&gt;Cells in the F&amp;amp;O signature blocks should be vertically aligned to the top&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If a function parameter type (e.g. in map:build) has a long type that wraps to multiple lines the parameter name and default are center aligned. A similar issue will happen with the type if the default value wraps.&lt;/p&gt;
&lt;p&gt;Setting vertical align to top will fix this.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2065 created</title>
   <pubDate>Tue, 24 Jun 2025 11:39:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2065</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2065</guid>
   <description>&lt;div&gt;&lt;p&gt;1970 Editorial notes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1970&lt;/p&gt;
&lt;p&gt;Editorial. The only controversial change may be to rename the second parameter of &lt;code&gt;map:build&lt;/code&gt; from &lt;code&gt;$keys&lt;/code&gt; to &lt;code&gt;$key&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2064 created</title>
   <pubDate>Tue, 24 Jun 2025 11:17:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2064</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2064</guid>
   <description>&lt;div&gt;&lt;p&gt;2056 Implicit Whitespace in MarkedNCName and QNameLiteral&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #2056&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2002 closed</title>
   <pubDate>Tue, 24 Jun 2025 11:10:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2002</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2002</guid>
   <description>&lt;div&gt;&lt;p&gt;Adaptive serialization: QNames&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2063 created</title>
   <pubDate>Tue, 24 Jun 2025 11:08:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2063</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2063</guid>
   <description>&lt;div&gt;&lt;p&gt;1996 Lookups, KeySpecifier: Literal, ContextValueRef&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1996&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2062 created</title>
   <pubDate>Tue, 24 Jun 2025 10:51:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2062</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2062</guid>
   <description>&lt;div&gt;&lt;p&gt;2017 fn:sort-by: Observations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #2017&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #850 closed</title>
   <pubDate>Tue, 24 Jun 2025 10:22:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/850</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-850</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-html: Finalization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2061 created</title>
   <pubDate>Tue, 24 Jun 2025 09:59:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2061</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2061</guid>
   <description>&lt;div&gt;&lt;p&gt;2058 Literal QNames: Annotations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #2058&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2060 created</title>
   <pubDate>Mon, 23 Jun 2025 14:35:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2060</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2060</guid>
   <description>&lt;div&gt;&lt;p&gt;2059 Literal QNames: Adaptive serialization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #2059&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 126 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 23 Jun 2025 11:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/06-24</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-06-24</guid>
</item><item>
   <title>Issue #2059 created</title>
   <pubDate>Mon, 23 Jun 2025 10:02:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2059</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2059</guid>
   <description>&lt;div&gt;&lt;p&gt;Literal QNames: Adaptive serialization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;QNames that are output with the &lt;code&gt;adaptive&lt;/code&gt; serialization method could be prefixed with a &lt;code&gt;#&lt;/code&gt; character:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;serialize((#a, #xml:a), { 'method': 'adaptive' })

(: Result :)
#Q{}a
#Q{http://www.w3.org/XML/1998/namespace}a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2058 created</title>
   <pubDate>Sun, 22 Jun 2025 16:38:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2058</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2058</guid>
   <description>&lt;div&gt;&lt;p&gt;Literal QNames: Annotations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The literal QName syntax could be useful for annotations:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: Current RESTXQ syntax :)
%rest:query-param('search', '{$search}')
(: Alternative new syntax :)
%rest:query-param('search', #search)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To remove the current exotic status of literal QNames, we could allow the syntax at some more places, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Catch clauses: &lt;code&gt;catch #err:XPTY0004 { ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Element/attribute tests: &lt;code&gt;element(#a:b)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2057 created</title>
   <pubDate>Sun, 22 Jun 2025 10:30:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2057</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2057</guid>
   <description>&lt;div&gt;&lt;p&gt;Steps: variable element names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With lookups, it is simple to use dynamic keys:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;$map?$name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An equivalent solution is missing for path expressions. The current approach is to check the name with a predicate:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;$node/*[node-name() = $name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could provide a more compare concise syntax by extending element tests (and, similarly, attribute tests):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;$node/element($name)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The new literal QName syntax simplifies things further:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $name in (#h1, #h2, #h3)
return $node/element($name)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2056 created</title>
   <pubDate>Wed, 18 Jun 2025 13:52:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2056</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2056</guid>
   <description>&lt;div&gt;&lt;p&gt;Implicit Whitespace in `MarkedNCName` and `QNameLiteral`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The REx-generated XQuery parser has failed to raise the expected syntax error for test case &lt;a href="https://github.com/qt4cg/qt4tests/blob/44f7691e986b39f81effea9686f7035d5ee99f6b/prod/CompNamespaceConstructor.xml#L711"&gt;&lt;code&gt;nscons-046&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is caused by REx' unability to precisely handle differing whitespace allowances of multiple viable parsing alternatives. In the actual case,&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;foo&amp;gt;{namespace # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;there are two possible interpretations for &lt;code&gt;namespace&lt;/code&gt; &lt;code&gt;#&lt;/code&gt; that still need to be distinguished:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;NamedFunctionRef&lt;/code&gt; refering to some arity of a function named &lt;code&gt;namespace&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;CompNamespaceConstructor&lt;/code&gt; using a &lt;code&gt;MarkedNCName&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now the problem is that the former allows implicit whitespace to follow, while the latter does not. A REx parser accepts whitespace here and thus fails the test case.&lt;/p&gt;
&lt;p&gt;While this is REx' problem, and can be worked around by creating multiple &lt;code&gt;#&lt;/code&gt; tokens with different lexical lookahead, it would be nicer to avoid this situation. This would possibly also simplify the work for other parsers.&lt;/p&gt;
&lt;p&gt;May I ask to allow implicit whitespace in both the &lt;code&gt;MarkedNCName&lt;/code&gt; and &lt;code&gt;QNameLiteral&lt;/code&gt; productions? This would be in line with variable declarations and references, which also allow implicit whitespace between &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;EQName&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2055 created</title>
   <pubDate>Tue, 17 Jun 2025 20:11:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2055</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2055</guid>
   <description>&lt;div&gt;&lt;p&gt;37 Sequence, Array, and Map destructuring&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Redrafting of PR 1942, after discussion, and extension to XQuery&lt;/p&gt;
&lt;p&gt;Fix #37
Supersedes #1942&lt;/p&gt;
&lt;p&gt;This PR implements the decisions of today's discussion to the best of my understanding. I don't think further discussion is needed, but it does merit careful checking.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 125 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 17 Jun 2025 16:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/06-17</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—06-17</guid>
</item><item>
   <title>Issue #1888 closed</title>
   <pubDate>Tue, 17 Jun 2025 16:20:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1888</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1888</guid>
   <description>&lt;div&gt;&lt;p&gt;366 xsl:package-location&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2029 closed</title>
   <pubDate>Tue, 17 Jun 2025 16:18:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2029</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2029</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:xsd-validator - more explanation needed&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2030 closed</title>
   <pubDate>Tue, 17 Jun 2025 16:18:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2030</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2030</guid>
   <description>&lt;div&gt;&lt;p&gt;2029 xsd validator notes and examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2041 closed</title>
   <pubDate>Tue, 17 Jun 2025 16:11:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2041</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2041</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect example of xsl:namespace-alias&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2042 closed</title>
   <pubDate>Tue, 17 Jun 2025 16:11:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2042</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2042</guid>
   <description>&lt;div&gt;&lt;p&gt;2041 Correction to xsl:namespace-alias example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1127 closed</title>
   <pubDate>Tue, 17 Jun 2025 16:11:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1127</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1127</guid>
   <description>&lt;div&gt;&lt;p&gt;Binary resources&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2044 closed</title>
   <pubDate>Tue, 17 Jun 2025 16:07:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2044</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2044</guid>
   <description>&lt;div&gt;&lt;p&gt;Hide `MarkedNCName` from XPath spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2054 created</title>
   <pubDate>Mon, 16 Jun 2025 18:21:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2054</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2054</guid>
   <description>&lt;div&gt;&lt;p&gt;JPath expression&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; &lt;code&gt;?/&lt;/code&gt; is preferred over &lt;code&gt;\&lt;/code&gt;; see comments.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;I feel that there is one aspect about the exciting new &lt;a href="https://qt4cg.org/dashboard/#pr-2031"&gt;JNode proposal&lt;/a&gt; that may develop into a permanent crutch. It is the lack of symmetry between simple lookups and lookups with axes:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;a?b
a?child::b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This particularly strikes me as this inconsistency does not exist in XPath.&lt;/p&gt;
&lt;p&gt;What about the idea to keep XPath 3.1 lookups unchanged and simple – for the vast number of use cases that do not require navigation – and to introduce a new “JPath expression” instead that will exclusively produce JNodes?&lt;/p&gt;
&lt;p&gt;The JStep separator that I would recommend for it is the backslash character &lt;code&gt;\&lt;/code&gt;. It bears even more resemblance to the XPath step separator than the often questioned question mark. By using a new syntax, I believe we would have much more freedom in designing a clean solution for navigating maps and arrays that is more consistent as well as more similar to classical node paths.&lt;/p&gt;
&lt;p&gt;Some syntactical examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $countries := {
  'Japan': {
    'cities': [ { 'Fukuoka': { 'population': 1600000 } } ]
  }
}
return (
  $countries\*,
  $countries\\cities
  $countries\Japan\cities[.\\population &amp;gt; 1000]\..,
  $countries\\*[.\ancestor::Japan]
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Among other advantages that I see, the traversal of arrays of maps would also be less controversial (#115).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 125 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 16 Jun 2025 12:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/06-17</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-06-17</guid>
</item><item>
   <title>Issue #2053 created</title>
   <pubDate>Mon, 16 Jun 2025 12:43:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2053</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2053</guid>
   <description>&lt;div&gt;&lt;p&gt;Add fn:collection-available&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Since the &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-collection"&gt;fn:collection&lt;/a&gt; function can raise errors, perhaps it should have a corresponding function to check if the collection is available?&lt;/p&gt;
&lt;p&gt;For reference, see the other *-available functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-collation-available"&gt;collation-available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-doc-available"&gt;doc-available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-unparsed-text-available"&gt;unparsed-text-available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, eXist has an implementation-specific &lt;code&gt;xmldb:collection-available&lt;/code&gt; function: https://exist-db.org/exist/apps/fundocs/index.html?q=xmldb:collection-available. It's typically used to determine if a collection already exists before creating or deleting it.&lt;/p&gt;
&lt;p&gt;A proposed signature, based on those linked above, could be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:collection-available( $source as xs:string? := () ) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2052 created</title>
   <pubDate>Mon, 16 Jun 2025 06:18:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2052</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2052</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:collation-available: $usage&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The function &lt;code&gt;fn:collation-available&lt;/code&gt; defines a &lt;code&gt;$usage&lt;/code&gt; parameter, but few information is given on how to interpret the collation URI to return the correct result. In addition, there are no test cases.&lt;/p&gt;
&lt;p&gt;Do we believe that the additional parameter offers enough advantages, or should we simplify the function?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2051 created</title>
   <pubDate>Sat, 14 Jun 2025 01:37:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2051</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2051</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT group by cluster&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose an enhancement of &lt;code&gt;xsl:for-each-group&lt;/code&gt; to support clustering.&lt;/p&gt;
&lt;p&gt;To start off with a simple use case, suppose one has the following population, &lt;code&gt;&amp;lt;xsl:variable name="ages" as="xs:integer*" select="5, 24, 9, 5, 6, 8, 36, 38, 28"/&amp;gt;&lt;/code&gt; and one wishes to cluster the figures like so, in four groups: &lt;code&gt;(5, 5, 6, 8, 9)&lt;/code&gt;, &lt;code&gt;(24)&lt;/code&gt;, &lt;code&gt;(28)&lt;/code&gt;, &lt;code&gt;(36, 38)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One is tempted to create an &lt;code&gt;&amp;lt;xsl:for-each-group&amp;gt;&lt;/code&gt; with &lt;code&gt;group-by="((. - 1) to (. + 1))"&lt;/code&gt;. But this does not work. If &lt;code&gt;@composite&lt;/code&gt; is absent or is &lt;code&gt;no&lt;/code&gt;, eighteen groups are created. If &lt;code&gt;@composite&lt;/code&gt; is &lt;code&gt;yes&lt;/code&gt;, eight groups are created. In both cases, the results are not significantly close to the desired output.&lt;/p&gt;
&lt;p&gt;I propose a new &lt;code&gt;@group-by-cluster&lt;/code&gt;. The following code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each-group select="$ages" group-by-cluster="((. - 1) to (. + 1))"&amp;gt;
    &amp;lt;xsl:sort select="current-grouping-key()"/&amp;gt;
    &amp;lt;group key="{current-grouping-key()}" count="{count(current-group())}"&amp;gt;
        &amp;lt;xsl:copy-of select="current-group()"/&amp;gt;
    &amp;lt;/group&amp;gt;
&amp;lt;/xsl:for-each-group&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would produce this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   &amp;lt;group key="4 5 6 7 8 9 10" count="2"&amp;gt;5 5 6 8 9&amp;lt;/group&amp;gt;
   &amp;lt;group key="23 24 25" count="1"&amp;gt;24&amp;lt;/group&amp;gt;
   &amp;lt;group key="27 28 29" count="1"&amp;gt;28&amp;lt;/group&amp;gt;
   &amp;lt;group key="35 36 37 38 39" count="1"&amp;gt;36 38&amp;lt;/group&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are numerous use cases for the proposed new feature. Here are a few:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clustering map or spatial coordinates&lt;/li&gt;
&lt;li&gt;Grouping disparate rectangles from OCR output&lt;/li&gt;
&lt;li&gt;Reconciling triples in linked open data (RDF) that use different IRIs synonymously&lt;/li&gt;
&lt;li&gt;Detecting typologies within in large corpora of documents that have periodically repetitive formulaic paragraphs.&lt;/li&gt;
&lt;li&gt;Discovering networks of connected things, e.g., networks of email correspondence or publication citations
 
Currently, the clustering I describe above is feasible in XSLT, but it requires creative strategies, usually a combination of preprocessing and the creation of specialized helper functions to recursively iterate over multiple grouping keys to create group numbers. These are challenging to write and debug, and one loses identity in a preprocessed copy of the original.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By putting clustering into a &lt;code&gt;@group-by-cluster&lt;/code&gt; construct, users benefit not only from convenience but also from performance, as a processor might bring novel strategies for clustering.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;current-grouping-key()&lt;/code&gt; for a group would consist of a sequence of all members' grouping keys, duplicates removed. No two groups would have any overlap in their grouping key sequences. (That's the definition of a cluster.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@group-by-cluster&lt;/code&gt; would have effect only if its value actually produced a sequence of length greater than one, and if &lt;code&gt;@composite&lt;/code&gt; is no. (Should a user should be warned if &lt;code&gt;@composite&lt;/code&gt; is yes?)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2050 created</title>
   <pubDate>Fri, 13 Jun 2025 22:51:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2050</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2050</guid>
   <description>&lt;div&gt;&lt;p&gt;2040 Fix context value declaration issues&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2040&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2049 created</title>
   <pubDate>Fri, 13 Jun 2025 16:45:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2049</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2049</guid>
   <description>&lt;div&gt;&lt;p&gt;2045 Context value can be an empty sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;For functions like name(), local-name() etc with &lt;code&gt;as="node()? default="."&lt;/code&gt; in the signature, allow the context value to be an empty sequence.&lt;/p&gt;
&lt;p&gt;Fix #2045&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2048 created</title>
   <pubDate>Fri, 13 Jun 2025 16:12:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2048</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2048</guid>
   <description>&lt;div&gt;&lt;p&gt;Untrusted execution, and security more generally&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Discussion of untrusted execution (that is, a Processor executing code from an untrusted source), and security in general, is present in the spec, but spread out and not really connected.&lt;/p&gt;
&lt;p&gt;Untrusted execution seems to me to be one of the biggest security issues for XSLT/XQuery and XPath in general, and I think it’s important to make the distinction between untrusted execution where an untrusted stylesheet or query is executed (perhaps via Saxon’s &lt;code&gt;XsltCompiler.compile()&lt;/code&gt;), and when a trusted stylesheet or query causes untrusted code to be executed, as with &lt;code&gt;fn:parse-xml()&lt;/code&gt;, &lt;code&gt;fn:doc()&lt;/code&gt;, &lt;code&gt;fn:transform()&lt;/code&gt; and &lt;code&gt;&amp;lt;xsl:evaluate&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The proposals in #2034 address one case, but have no effect on the other, and that raises the question of what would happen if an untrusted (unsafe) stylesheet executed &lt;code&gt;fn:doc()&lt;/code&gt; with &lt;code&gt;safe = true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I would like to see the specs address the security implications of untrusted execution more explicitly, and to provide clearer guidance for implementation authors around both completely untrusted code, and trusted code which executes untrusted code.&lt;/p&gt;
&lt;p&gt;I think that could take the form of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Annotation of all functions that have potentially problematic external effects (primarily file / resource access).&lt;/li&gt;
&lt;li&gt;Clear expectations for implementors about what (and how) security restrictions should be configurable.&lt;/li&gt;
&lt;li&gt;Consistent Error codes for security-related exceptions&lt;/li&gt;
&lt;li&gt;Consistent security-related options for functions which can cause untrusted source parsing or code execution.&lt;/li&gt;
&lt;li&gt;A additional security section in the spec under section 2 (Concepts / Basics) in the XSLT/XQuery/XPath specs, and section 1 of XPFO, which collects the overview and points to what to look for in the rest of the spec.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2047 created</title>
   <pubDate>Fri, 13 Jun 2025 16:11:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2047</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2047</guid>
   <description>&lt;div&gt;&lt;p&gt;external resource-accessing functions, available resources, and error codes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;While looking at a problem in an implementation of a vendor function that read data from an external resource I was looking through the spec to see what was said about external resources and untrusted execution contexts (for example a processor executing XSLT or XPath provided by a user).&lt;/p&gt;
&lt;p&gt;The spec makes mention of ‘available documents’, ‘available text resources’, ‘available binary resources’, ‘available collections’, and ‘available URI collections’.&lt;/p&gt;
&lt;p&gt;The documentation for &lt;code&gt;fn:doc()&lt;/code&gt;, &lt;code&gt;fn:collection()&lt;/code&gt;, and &lt;code&gt;fn:uri-collection()&lt;/code&gt; mention an error (&lt;code&gt;err:FODC0002&lt;/code&gt;) to be raised if the URI requested is not in the relevant ‘available X’  (although there is some disagreement about what the ‘X’ should be - we have ‘available node collections’ and ‘available resource collections’ mentioned in the function docs). &lt;code&gt;fn:unparsed-text()&lt;/code&gt; and &lt;code&gt;fn:unparsed-binary()&lt;/code&gt; do not.&lt;/p&gt;
&lt;p&gt;I think the documented behaviour of &lt;code&gt;fn:unparsed-text()&lt;/code&gt; and &lt;code&gt;fn:unparsed-binary()&lt;/code&gt; should be brought into line with the others.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2046 created</title>
   <pubDate>Fri, 13 Jun 2025 10:19:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2046</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2046</guid>
   <description>&lt;div&gt;&lt;p&gt;Promote ".." to a primary expression&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose promoting ".." to be a primary expression (rather than an abbreviated step), and (assuming the JNodes proposal is accepted) allowing it to work on JNodes as well as XNodes.&lt;/p&gt;
&lt;p&gt;Ignoring JNodes for now, I don't think the change would make any observable difference to the language syntax or semantics. It changes the way that a predicate is interpreted : &lt;code&gt;..[P]&lt;/code&gt; becomes a regular filter expression and is no longer subject to the special rules for predicates within steps; but the only difference is how position() is interpreted, and since &lt;code&gt;..&lt;/code&gt; can only return a singleton, this makes no difference.&lt;/p&gt;
&lt;p&gt;For JNodes it means we will be able to write expressions such as &lt;code&gt;$my-map??x[..?y = 3]&lt;/code&gt; rather than &lt;code&gt;$my-map??x[?parent::*?y = 3]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2045 created</title>
   <pubDate>Thu, 12 Jun 2025 22:20:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2045</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2045</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions taking "." as default argument, when "." is empty&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A number of functions such as &lt;code&gt;fn:name()&lt;/code&gt; take the context value as their default argument, with the implication that &lt;code&gt;name()&lt;/code&gt; is exactly equivalent to &lt;code&gt;name(.)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, these functions also say that a type error XPTY0004 is raised if the context value is not a single node.&lt;/p&gt;
&lt;p&gt;It seems to me that if the context value is an empty sequence, no type error should be raised; the effect of &lt;code&gt;() -&amp;gt; name()&lt;/code&gt; should be the same as &lt;code&gt;name(())&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2044 created</title>
   <pubDate>Tue, 10 Jun 2025 19:42:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2044</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2044</guid>
   <description>&lt;div&gt;&lt;p&gt;Hide `MarkedNCName` from XPath spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Today's merge of qt4cg/qtspecs#2028 has added the &lt;code&gt;MarkedNCName&lt;/code&gt; production to both the XQuery and the XPath spec. It is however only used within the XQuery spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 124 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 10 Jun 2025 16:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/06-10</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—06-10</guid>
</item><item>
   <title>Issue #2027 closed</title>
   <pubDate>Tue, 10 Jun 2025 16:09:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2027</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2027</guid>
   <description>&lt;div&gt;&lt;p&gt;QNameLiteral syntax for namespace and Processing Instruction constructors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2028 closed</title>
   <pubDate>Tue, 10 Jun 2025 16:09:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2028</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2028</guid>
   <description>&lt;div&gt;&lt;p&gt;2027 '#' syntax for computed PIs and namespaces&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2032 closed</title>
   <pubDate>Tue, 10 Jun 2025 16:01:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2032</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2032</guid>
   <description>&lt;div&gt;&lt;p&gt;Simple typo in XPath 4.0 example - inherited from XPath 3.0 spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2033 closed</title>
   <pubDate>Tue, 10 Jun 2025 16:01:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2033</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2033</guid>
   <description>&lt;div&gt;&lt;p&gt;2032 Fix typo in example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2022 closed</title>
   <pubDate>Tue, 10 Jun 2025 15:57:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2022</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2022</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplify optional XQuery conformance features&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2026 closed</title>
   <pubDate>Tue, 10 Jun 2025 15:57:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2026</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2026</guid>
   <description>&lt;div&gt;&lt;p&gt;2022 Drop module feature&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2043 created</title>
   <pubDate>Mon, 9 Jun 2025 17:10:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2043</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2043</guid>
   <description>&lt;div&gt;&lt;p&gt;2038 Tweak the rules for fn:apply-templates references to modes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2038&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2042 created</title>
   <pubDate>Mon, 9 Jun 2025 16:34:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2042</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2042</guid>
   <description>&lt;div&gt;&lt;p&gt;2041 Correction to xsl:namespace-alias example&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2041&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2041 created</title>
   <pubDate>Mon, 9 Jun 2025 16:30:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2041</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2041</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect example of xsl:namespace-alias&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Reported against XSLT 3.0&lt;/p&gt;
&lt;p&gt;https://github.com/w3c/qtspecs/issues/71&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 124 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 9 Jun 2025 07:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/06-10</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-06-10</guid>
</item><item>
   <title>Issue #2040 created</title>
   <pubDate>Sun, 8 Jun 2025 19:56:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2040</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2040</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery context value declaration&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Section 5.17:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;there is no changes entry flagging the fact that the coercion rules are now applied (and corresponding test cases such as contextDecl-037a do not identity a PR). The relevant PR is PR #254 .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The statement "&lt;em&gt;The context value declaration has the effect of setting the context value static type T in the static context.&lt;/em&gt;" is incorrect. The static context no longer includes a context value static type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The statement "&lt;em&gt;In all cases where the context value has a value, that value must match the type T according to the rules for SequenceType matching&lt;/em&gt;" is incorrect (or at least, misleading): as stated two paragraphs later, coercion is applied. But because there can be multiple context value declarations in different modules, specifying different types, perhaps the intent is that coercion is applied only to a value supplied in the query, and not to a value supplied externally? If so, this needs clarifying. There are apparently no tests for coercing an externally-supplied value to the required type.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2039 created</title>
   <pubDate>Sat, 7 Jun 2025 21:37:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2039</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2039</guid>
   <description>&lt;div&gt;&lt;p&gt;Generalize context item to context value in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Various places, for example the xsl:context-item declaration and the xsl:evaluate/@context-item attribute, should be updated to allow the there being a context value rather than a context item.&lt;/p&gt;
&lt;p&gt;At present the context value at instruction level is always either a singleton or absent. We should consider generalizing this to align with XPath, where the &lt;code&gt;-&amp;gt;&lt;/code&gt; and &lt;code&gt;?[....]&lt;/code&gt; operators allow the context value to be an arbitrary sequence.&lt;/p&gt;
&lt;p&gt;An xsl:for-each-member instruction that iterates over an array and binds each member to the context value would make sense.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2038 created</title>
   <pubDate>Thu, 5 Jun 2025 14:04:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2038</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2038</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop dependency of fn:apply-templates on the default mode&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The new &lt;code&gt;fn:apply-templates&lt;/code&gt; function in XSLT can invoke the "default mode", either by specifying &lt;code&gt;mode="#default"&lt;/code&gt; or by not specifying a mode. The default mode is defined by the nearest containing instruction that has a &lt;code&gt;[xsl:]default-mode&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;I would like to drop this dependency.&lt;/p&gt;
&lt;p&gt;Most of the cases where a function call depends on the static context (especially an XSLT function) are cases where the relevant property is fixed for a package (e.g. the set of named keys, decimal formats, or character maps). There are places where there is a dependency on something tha can vary in a more fine-grained way - notably (a) the default collation, and (b) the set of namespace bindings, but on the whole such dependencies are undesirable (a) because they introduce opportunities for user error (e.g. when copying and pasting code) and (b) because they increase the amount of information the processor has to keep around at runtime just in case it is needed (for example, in a dynamic function call). I would therefore like to avoid introducing this dependency.&lt;/p&gt;
&lt;p&gt;The proposed change is (a) to drop "#default" as a value of the &lt;code&gt;mode&lt;/code&gt; option for this function, and (b) to say that if no mode is specified by &lt;code&gt;fn:apply-templates&lt;/code&gt; the unnamed mode is used.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2037 created</title>
   <pubDate>Tue, 3 Jun 2025 14:45:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2037</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2037</guid>
   <description>&lt;div&gt;&lt;p&gt;2036 Add rule for streamability of xsl:map&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2036&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2036 created</title>
   <pubDate>Tue, 3 Jun 2025 14:34:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2036</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2036</guid>
   <description>&lt;div&gt;&lt;p&gt;Streamability of xsl:map instruction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The special condition that allows more than one operand of xsl:map to be consuming should apply only if the &lt;code&gt;duplicates&lt;/code&gt; attribute is absent (defaulting to "error"). If duplicates are allowed then in general the result cannot be streamed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1955 closed</title>
   <pubDate>Mon, 2 Jun 2025 21:23:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1955</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1955</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:doc, fn:parse-xml: entity expansion&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2035 created</title>
   <pubDate>Mon, 2 Jun 2025 17:00:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2035</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2035</guid>
   <description>&lt;div&gt;&lt;p&gt;Recursive record types: unrealistic example in XPath spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The example of mutually-recursive record types in XPath §3.2.8.3.1 (using the schema component model as an example) is unrealistic, because an instance of this structure would be cyclic at the instance level, and therefore would be non-instantiable. In practice, the only way to represent cyclic structures using maps and arrays is by use of functions to represent some of the relationships, as we do in the schema record type returned by functions such as fn:schema-type(). We should change the example to use this technique and explain why it is being used: it would still illustrate the point; although it would be in danger of becoming excessively complicated.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2034 created</title>
   <pubDate>Sun, 1 Jun 2025 18:33:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2034</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2034</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-xml, fn:doc: `safe` option&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue replaces #1955.&lt;/p&gt;
&lt;p&gt;The first feedback that we got for the &lt;code&gt;entity-expansion-limit&lt;/code&gt; option indicates that our current solution is neither fish nor fowl (weder Fisch noch Fleisch?):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;With the initial suggestion in #1860, I hoped we could define sane defaults to prevent attacks caused by &lt;code&gt;fn:parse-xml&lt;/code&gt; and &lt;code&gt;fn:doc&lt;/code&gt;. This turned out to be difficult. Instead, we now have two specific options (allow-external-entities, entity-expansion-limit) that need to be explicitly assigned to make parsing safer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In order to parse certain XML documents, like &lt;a href="https://dblp.org/xml/dblp.xml.gz"&gt;&lt;code&gt;dblp..xml.gz&lt;/code&gt;&lt;/a&gt;, more than one JDK 11 limit needs to be increased:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit
http://www.oracle.com/xml/jaxp/properties/maxGeneralEntitySizeLimit
http://www.oracle.com/xml/jaxp/properties/totalEntitySizeLimit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we have observed, XML parsing depends on the specific XML parsers. I believe it would be more user-friendly to replace the specific settings with a single option &lt;code&gt;safe&lt;/code&gt;, and to let the processor decide which properties are assigned:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt; (default): Avoid XXE and billion laughs attacks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt;: disable safe parsing (increase limits, allow parsing of external resources)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2033 created</title>
   <pubDate>Thu, 29 May 2025 13:41:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2033</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2033</guid>
   <description>&lt;div&gt;&lt;p&gt;2032 Fix typo in example&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2032&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2032 created</title>
   <pubDate>Thu, 29 May 2025 05:43:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2032</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2032</guid>
   <description>&lt;div&gt;&lt;p&gt;Simple typo in XPath 4.0 example - inherited from XPath 3.0 spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Location of typo: &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.xml#id-array-test"&gt;Array Types&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;Current text:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[ 1, 2 ] instance array(*) returns true()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Expected text:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[ 1, 2 ] instance of array(*) returns true()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2031 created</title>
   <pubDate>Wed, 28 May 2025 17:55:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2031</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2031</guid>
   <description>&lt;div&gt;&lt;p&gt;2025 JNodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2025&lt;/p&gt;
&lt;p&gt;This is a first draft for review.&lt;/p&gt;
&lt;p&gt;It includes changes to the data model, functions and operators, and XQuery/XPath. It does not yet include changes to XSLT.&lt;/p&gt;
&lt;p&gt;It's a big proposal, but I think it removes more complexity from the spec than it adds. It's basically a unification of two concepts, both of which were addressing aspects of the same problem, namely that lookup expressions lose too much information. It gets rid of the pin/label mechanism, and modifiers on lookup expressions, and introduces JNodes and JAxes in their place. (Any suggestions for improved terminology are more than welcome.)&lt;/p&gt;
&lt;p&gt;I think we get a lot more "bangs for the buck" with this solution, and it makes navigation of JSON trees work in a much closer way to familiar navigation of XML trees. It needs a lot more work on examples and explanation, of course.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1859 closed</title>
   <pubDate>Wed, 28 May 2025 10:04:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1859</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1859</guid>
   <description>&lt;div&gt;&lt;p&gt;Question on `fn:chain` and `err:FOAP0001`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1894 closed</title>
   <pubDate>Wed, 28 May 2025 09:46:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1894</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1894</guid>
   <description>&lt;div&gt;&lt;p&gt;Additional examples to fn:chain - in a new branch&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1883 closed</title>
   <pubDate>Wed, 28 May 2025 09:45:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1883</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1883</guid>
   <description>&lt;div&gt;&lt;p&gt;882 Replace fn:chain by fn:compose&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2030 created</title>
   <pubDate>Wed, 28 May 2025 09:14:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2030</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2030</guid>
   <description>&lt;div&gt;&lt;p&gt;2029 xsd validator notes and examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds more explanation to xsd:validator&lt;/p&gt;
&lt;p&gt;Extracts material from the XQuery and XSLT specs describing the validation process, moving this to a new section in F&amp;amp;O, to reduce duplication.&lt;/p&gt;
&lt;p&gt;Fix #2029&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1959 closed</title>
   <pubDate>Tue, 27 May 2025 16:14:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1959</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1959</guid>
   <description>&lt;div&gt;&lt;p&gt;1953 (part) XSLT Worked example using methods to implement atomic sets&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #882 closed</title>
   <pubDate>Tue, 27 May 2025 16:11:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/882</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-882</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:chain or fn:compose&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1984 closed</title>
   <pubDate>Tue, 27 May 2025 16:11:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1984</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1984</guid>
   <description>&lt;div&gt;&lt;p&gt;882 Drop fn:chain&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2023 closed</title>
   <pubDate>Tue, 27 May 2025 16:06:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2023</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2023</guid>
   <description>&lt;div&gt;&lt;p&gt;Semantics of X?$a&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2024 closed</title>
   <pubDate>Tue, 27 May 2025 16:06:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2024</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2024</guid>
   <description>&lt;div&gt;&lt;p&gt;Add rules for $V?$X&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2029 created</title>
   <pubDate>Tue, 27 May 2025 09:26:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2029</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2029</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:xsd-validator - more explanation needed&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See action QT4CG-119-02&lt;/p&gt;
&lt;p&gt;In the review when the function was accepted, I was asked to supply more notes and examples indicating how the various options for assembling a schema interacted with each other.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2028 created</title>
   <pubDate>Tue, 27 May 2025 09:19:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2028</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2028</guid>
   <description>&lt;div&gt;&lt;p&gt;2027 '#' syntax for computed PIs and namespaces&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2027&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2027 created</title>
   <pubDate>Tue, 27 May 2025 08:05:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2027</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2027</guid>
   <description>&lt;div&gt;&lt;p&gt;QNameLiteral syntax for namespace and Processing Instruction constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Action QT4CG-021-01 (should be QT4CG-121-01)&lt;/p&gt;
&lt;p&gt;We now allow QNameLiterals to be used in element and attribute constructors, for example &lt;code&gt;attribute #xml:space {"default"}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For symmetry we need a similar syntax for namespace and processing-instruction constructors. These have the same ambiguity problem if the node name clashes with a reserved word such as "div", but they are constrained to be NCNames (or no-namespace QNames, depending on your perspective).&lt;/p&gt;
&lt;p&gt;One possible solution is to use a new construct such as NCNameLiteral (but the name is wrong, unless we also allow it to be used in contexts where a Literal is allowed). Another possibility is for the grammar to allow a QNameLiteral, but for the semantics to restrict it to be in no namespace.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2026 created</title>
   <pubDate>Mon, 26 May 2025 23:32:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2026</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2026</guid>
   <description>&lt;div&gt;&lt;p&gt;2022 Drop module feature&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2022&lt;/p&gt;
&lt;p&gt;The effect is that support for library modules is no longer optional.&lt;/p&gt;
&lt;p&gt;I decided not to pursue merging the "schema import" and "typed data" features into one.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 123 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sun, 25 May 2025 09:16:15 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/05-27</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-05-27</guid>
</item><item>
   <title>Issue #2025 created</title>
   <pubDate>Sun, 25 May 2025 07:36:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2025</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2025</guid>
   <description>&lt;div&gt;&lt;p&gt;Combine the concepts of pins/labels and modified lookups&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have two rather separate mechanisms, both designed to solve aspects of what is essentially the same problem: lookup expressions lose too much information.&lt;/p&gt;
&lt;p&gt;Pinning tries to solve the problem by saying that if the origin of the lookup is pinned, then the results of the lookup carry a label containing information about the key and the parent.&lt;/p&gt;
&lt;p&gt;Modifiers like pair::* try to solve the problem by returning a map containing the key and the value as separate fields.&lt;/p&gt;
&lt;p&gt;But pinning only solves part of the problem, in particular it doesn't prevent X?* flattening the result, and the &lt;code&gt;pairs&lt;/code&gt; modifier only solves part of the problem, in particular it doesn't retain parentage.&lt;/p&gt;
&lt;p&gt;I would like to try combining them and trying to create a mechanism that is better than either. I don't yet know exactly how this might work, but I'm thinking along the lines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replace the concept of labelled items with labelled values (that is, a label can be attached to any value, not just an item)&lt;/li&gt;
&lt;li&gt;Scrap pin() as an explicit function&lt;/li&gt;
&lt;li&gt;A lookup expression like $X ? child::Y returns a sequence of labelled values (no flattening)&lt;/li&gt;
&lt;li&gt;The properties of a labelled value include:
** target - the actual value
** key - the associated key (or array index)
** parent - the containing map or array&lt;/li&gt;
&lt;li&gt;These properties might be made available through syntax such as &lt;code&gt;$LV ? target::*&lt;/code&gt; , &lt;code&gt;$LV ? key::*&lt;/code&gt;, &lt;code&gt;$LV ? parent::*&lt;/code&gt; (or otherwise)&lt;/li&gt;
&lt;li&gt;ancestor and ancestor-or-self can be made available as derived properties&lt;/li&gt;
&lt;li&gt;Many operations when given a labelled value should automatically operate on its target, and ignore the label (rather like atomisation). Exactly which operations do this is an interesting question to which I don't yet know the answer. It's tricky because child::* returns a sequence of labelled values, and we want to be able to manipulate this in unflattened form. Perhaps child::* should instead return an array of labelled values? But then you end up with another lookup operation to extract the members of this array.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2024 created</title>
   <pubDate>Fri, 23 May 2025 22:50:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2024</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2024</guid>
   <description>&lt;div&gt;&lt;p&gt;Add rules for $V?$X&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2023&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2023 created</title>
   <pubDate>Fri, 23 May 2025 08:56:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2023</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2023</guid>
   <description>&lt;div&gt;&lt;p&gt;Semantics of X?$a&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In §4.14.3.1 we describe the semantics of lookup expressions. Rules 3a to 3e and 4a to 4e all start "if the KeySpecifier KS is..." and should enumerate all the possibilities for a KeySpecifier. But the case where the KeySpecifier is a VarRef is not mentioned.&lt;/p&gt;
&lt;p&gt;Of course, &lt;code&gt;X?$a&lt;/code&gt; is supposed to be a shorthand for &lt;code&gt;X?($a)&lt;/code&gt;, we just fail to state the fact.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2022 created</title>
   <pubDate>Thu, 22 May 2025 23:21:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2022</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2022</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplify optional XQuery conformance features&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XQuery I propose:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dropping the "module feature" - every conformant XQ40 implementation must support library modules&lt;/li&gt;
&lt;li&gt;Merging the "schema-aware" and "typed-data" features into a single optional feature, aligned with schema-awareness in XSLT&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2021 created</title>
   <pubDate>Thu, 22 May 2025 15:04:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2021</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2021</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: Move "Patterns" section into "Template Rules"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose to move XSLT section §5.4 Patterns so it becomes §6.1, under Template Rules, where it will hopefully be easier to find.&lt;/p&gt;
&lt;p&gt;Because this will produce a large number of diffs, I propose to make it a separate PR rather than combining it with the work I am currently doing on patterns and template rules for maps and arrays.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2020 closed</title>
   <pubDate>Thu, 22 May 2025 12:05:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2020</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2020</guid>
   <description>&lt;div&gt;&lt;p&gt;Reconsider the rationale for the xsl:select instruction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2020 created</title>
   <pubDate>Thu, 22 May 2025 06:29:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2020</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2020</guid>
   <description>&lt;div&gt;&lt;p&gt;Reconsider the rationale for the xsl:select instruction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;a href="https://qt4cg.org/specifications/xslt-40/Overview.html#element-select"&gt;section for xsl:select&lt;/a&gt; in the XSLT specification includes the following rationale:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An XPath expression written within an XML attribute is subjected by the XML parser to attribute value normalization, which changes the arrangement of whitespace within the value. While this will rarely affect the actual meaning of the expression, it can mean that formatting is lost. &lt;strong&gt;Multi-line attribute values are therefore best avoided.&lt;/strong&gt; The loss of formatting also makes it difficult for an XSLT processor to provide precise error locations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are good reasons why &lt;code&gt;xsl:select&lt;/code&gt; would be a useful instruction, but I don't think providing precise error locations is one of them. This is just circumventing a problem that is solvable today for &lt;code&gt;select&lt;/code&gt; attributes. If an implementer wanted to supply a more precise error location in attribute values (and this would certainly help developers) they could adopt a solution similar to the &lt;a href="https://tc39.es/ecma426/#sec-intro"&gt;Ecma SourceMap&lt;/a&gt; used by EcmaScript transpilers and minifiers.&lt;/p&gt;
&lt;p&gt;In XSLT 3.0, we frequently work with multi-line &lt;code&gt;select&lt;/code&gt; attribute values on XSLT instructions without major issues. Examples include: when calling using  &lt;code&gt;fold-left()&lt;/code&gt; functions with one or more inner functions or using multi-case if/else expressions. Using &lt;code&gt;xsl:select&lt;/code&gt; just to get good error messages does not seem like a good trade-off for the added verbosity.&lt;/p&gt;
&lt;p&gt;For these cases, one can either use a simple XPath linter in the XSLT editor to highlight the specific error tokens caused by basic typos and unresolved references, and then fall back on using the compiler error messages with approximate line-numbers for (the many) cases that the linter cannot pick up.&lt;/p&gt;
&lt;h2&gt;Precise XSLT Error Locations and AI Agents&lt;/h2&gt;
&lt;p&gt;Modern XSLT editors are today fully integrated with AI Agents (e.g. GitHub Copilot or AI Positron). These agents use reported error-locations to explain and suggest a fix for the XSLT problem for the user. Precise error locations are critical to the quality of the explanation and the fix. This help should be available equally for XSLT &lt;code&gt;select&lt;/code&gt; attributes or &lt;code&gt;xsl:select&lt;/code&gt; instructions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2019 created</title>
   <pubDate>Wed, 21 May 2025 22:59:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2019</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2019</guid>
   <description>&lt;div&gt;&lt;p&gt;1776: XSLT template rules for maps and array&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently work In progress, committed so that the draft can be reviewed.&lt;/p&gt;
&lt;p&gt;Changes in three main areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pattern syntax: patterns such as &lt;code&gt;?item&lt;/code&gt; and &lt;code&gt;?parent?item&lt;/code&gt; are defined to match items in a map by their key&lt;/li&gt;
&lt;li&gt;Built-in template rules for on-no-match="shallow-copy-all". Revisits the built in template rules for this scenario.&lt;/li&gt;
&lt;li&gt;General revision of the processing model for xsl:apply-templates applied to a tree of maps and arrays.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2018 created</title>
   <pubDate>Wed, 21 May 2025 19:44:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2018</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2018</guid>
   <description>&lt;div&gt;&lt;p&gt;Type-checking the result of xsl:apply-templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Code that calls &lt;code&gt;xsl:apply-templates&lt;/code&gt; inevitably has expectations about the type of the result. For example someone doing&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:apply-templates select="@*"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;may have an expectation that the result will be a sequence of attribute nodes, and the code might fail untidily if it is anything else. There is currently no way of stating this expectation, or of triggering coercion on the result. We have added an attribute &lt;code&gt;xsl:mode/@as&lt;/code&gt; but different calls on apply-templates in the same mode may have different expectations. (I'm seeing this particularly with modes that process maps and arrays)&lt;/p&gt;
&lt;p&gt;We could add an &lt;code&gt;as&lt;/code&gt; attribute to xsl:apply-templates to make the expectation explicit.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2017 created</title>
   <pubDate>Wed, 21 May 2025 13:31:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2017</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2017</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:sort-by`: Observations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We should make the second parameter obligatory (&lt;code&gt;fn:sort-by(1 to 3)&lt;/code&gt; seems confusing).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sort(keys := fn { ?key })&lt;/code&gt; occurs twice in the remaining text; should be &lt;code&gt;sort(key := fn { ?key })&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1795 closed</title>
   <pubDate>Wed, 21 May 2025 09:19:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1795</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1795</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT templates: Matching values in a map by key&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1981 closed</title>
   <pubDate>Wed, 21 May 2025 08:44:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1981</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1981</guid>
   <description>&lt;div&gt;&lt;p&gt;Syntax for QName literals clashes with XQuery pragmas&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2016 created</title>
   <pubDate>Wed, 21 May 2025 06:42:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2016</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2016</guid>
   <description>&lt;div&gt;&lt;p&gt;File Module: Incorporate changes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The EXPath File Module must be revised in several steps. First of all, several functions need to be incorporated that were added to the initial version (details: https://docs.basex.org/12/File_Functions).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2015 created</title>
   <pubDate>Wed, 21 May 2025 00:09:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2015</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2015</guid>
   <description>&lt;div&gt;&lt;p&gt;2009 Avoid constructing document node when it makes no sense&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2009&lt;/p&gt;
&lt;p&gt;The rules for xsl:variable are changed so there is no attempt to construct an implicit temporary tree when the sequence constructor contains an &lt;code&gt;xsl:map&lt;/code&gt;. &lt;code&gt;xsl:array&lt;/code&gt;, or &lt;code&gt;xsl:select&lt;/code&gt; instruction (perhaps mixed with other instructions).&lt;/p&gt;
&lt;p&gt;Compatibility: note that &lt;code&gt;xsl:array&lt;/code&gt; and &lt;code&gt;xsl:select&lt;/code&gt; are new in 4.0, while xsl:map inside &lt;code&gt;xsl:variable&lt;/code&gt; always throws an error in XSLT 3.0.&lt;/p&gt;
&lt;p&gt;Justification:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a child &lt;code&gt;xsl:select&lt;/code&gt; element behaves like a &lt;code&gt;select&lt;/code&gt; attribute&lt;/li&gt;
&lt;li&gt;if the content of xsl:variable is &lt;code&gt;xsl:map&lt;/code&gt; or &lt;code&gt;xsl:array&lt;/code&gt; it makes no sense to require the user to add &lt;code&gt;as=map(*)&lt;/code&gt; or &lt;code&gt;as=array(*)&lt;/code&gt; because the type is obvious anyway.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2014 created</title>
   <pubDate>Tue, 20 May 2025 21:50:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2014</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2014</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-122-01 Add notes, examples, and rationale for xsl:select&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Completes action QT4CG-122-01&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2008 closed</title>
   <pubDate>Tue, 20 May 2025 18:07:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2008</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2008</guid>
   <description>&lt;div&gt;&lt;p&gt;2004 Add xsl:select instruction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2004 closed</title>
   <pubDate>Tue, 20 May 2025 18:07:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2004</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2004</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:xpath instruction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 122 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 20 May 2025 16:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/05-20</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—05-20</guid>
</item><item>
   <title>Issue #2006 closed</title>
   <pubDate>Tue, 20 May 2025 16:10:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2006</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2006</guid>
   <description>&lt;div&gt;&lt;p&gt;2005 Add fn:apply-templates function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2005 closed</title>
   <pubDate>Tue, 20 May 2025 16:10:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2005</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2005</guid>
   <description>&lt;div&gt;&lt;p&gt;apply-templates() as a function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1991 closed</title>
   <pubDate>Tue, 20 May 2025 16:08:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1991</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1991</guid>
   <description>&lt;div&gt;&lt;p&gt;835 Add built-in named record types to static context&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1085 closed</title>
   <pubDate>Tue, 20 May 2025 16:06:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1085</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1085</guid>
   <description>&lt;div&gt;&lt;p&gt;Parameters to fn:sort&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2001 closed</title>
   <pubDate>Tue, 20 May 2025 16:06:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2001</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-2001</guid>
   <description>&lt;div&gt;&lt;p&gt;1085 Revert fn:sort to the 3.1 spec; introduce fn:sort-by&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1992 closed</title>
   <pubDate>Tue, 20 May 2025 16:04:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1992</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1992</guid>
   <description>&lt;div&gt;&lt;p&gt;Type of fn:schema-type-record ? constructor&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1999 closed</title>
   <pubDate>Tue, 20 May 2025 16:04:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1999</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1999</guid>
   <description>&lt;div&gt;&lt;p&gt;1992 Correct type of constructor function in schema-type-record&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1997 closed</title>
   <pubDate>Tue, 20 May 2025 16:02:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1997</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1997</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion Rules: §3.4.1 rule 3(c)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1998 closed</title>
   <pubDate>Tue, 20 May 2025 16:02:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1998</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1998</guid>
   <description>&lt;div&gt;&lt;p&gt;1997 Correct nesting of item coercion rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2013 created</title>
   <pubDate>Tue, 20 May 2025 09:15:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2013</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2013</guid>
   <description>&lt;div&gt;&lt;p&gt;748 Parse functions: consistency&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #748&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2012 created</title>
   <pubDate>Mon, 19 May 2025 08:14:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2012</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2012</guid>
   <description>&lt;div&gt;&lt;p&gt;Add array:sort-with&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue #655 PR #795 introduced fn:sort-with.&lt;/p&gt;
&lt;p&gt;We should define array:sort-with for consistency.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2011 created</title>
   <pubDate>Sun, 18 May 2025 10:33:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2011</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2011</guid>
   <description>&lt;div&gt;&lt;p&gt;675(part): Add XSLT static typing rules for new kinds of XPath expression&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Updates the static typing rules in XSLT for new kinds of expression introduced in XPath 4.0. These rules are used in streamability analysis, but more work needs to be done to complete the streamability analysis.&lt;/p&gt;
&lt;p&gt;Production rules are now referenced by name, as production numbers are no longer available.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2010 created</title>
   <pubDate>Sat, 17 May 2025 15:33:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2010</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2010</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT patterns: generalize union, intersect, and except&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is related to issue #402.&lt;/p&gt;
&lt;p&gt;We have generalised the meaning of union, intersect, and except, when used in XSLT patterns, so that they now mean:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A union B - matches either A or B&lt;/li&gt;
&lt;li&gt;A intersect B - matches both A and B&lt;/li&gt;
&lt;li&gt;A except B - matches A and does not match B&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these semantics, there is no longer any sensible reason to restrict these pattern operators to apply only to node patterns. The semantics work equally well for patterns that match (for example) maps or arrays. For example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:template match="record(a, b) except record(a, b, c)"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2009 created</title>
   <pubDate>Sat, 17 May 2025 08:16:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2009</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2009</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:variable implicit document nodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XSLT 3.0, an &lt;code&gt;xsl:variable&lt;/code&gt; instruction with no &lt;code&gt;select&lt;/code&gt; or &lt;code&gt;as&lt;/code&gt; attribute implicitly wraps the value created by the sequence constructor in a document node. This inevitably fails if the content is a map, making it necessary to write&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:variable name="m" as="map(*)"&amp;gt;
   &amp;lt;xsl:map&amp;gt;...&amp;lt;/xsl:map&amp;gt;
&amp;lt;/xsl:variable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I propose that this wrapping should not happen if the first item in the result of the sequence constructor is a function item (including a map or array). The practical effect on users is that they can leave out the &lt;code&gt;as="map(*)"&lt;/code&gt; attribute in this situation.&lt;/p&gt;
&lt;p&gt;For function items other than arrays, this is currently an error condition so there is no incompatibility.&lt;/p&gt;
&lt;p&gt;For arrays it does represent an incompatible change -- the current rules ("Constructing complex content") say that an array is flattened. But XSLT 3.0 has no instruction to construct an array, it would have to be done using &lt;code&gt;xsl:sequence&lt;/code&gt;; and no-one would deliberately construct an array merely in order to flatten it, so the situation is unlikely to arise in practice.&lt;/p&gt;
&lt;p&gt;The proposal is that the decision whether or not to construct a wrapping document node should be based on the first item in the sequence. This is to allow lazy evaluation. A function item appearing later in the sequence would be handled the same way as now -- most likely an error. An empty sequence continues to result in a childless document node.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2008 created</title>
   <pubDate>Fri, 16 May 2025 21:38:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2008</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2008</guid>
   <description>&lt;div&gt;&lt;p&gt;2004 Add xsl:select instruction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2004&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #322 closed</title>
   <pubDate>Fri, 16 May 2025 19:56:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/322</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-322</guid>
   <description>&lt;div&gt;&lt;p&gt;Map construction in XSLT: xsl:record instruction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2007 created</title>
   <pubDate>Fri, 16 May 2025 17:06:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2007</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2007</guid>
   <description>&lt;div&gt;&lt;p&gt;Creating arrays in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This kind of code comes up a lot, and is hard to simplify except by dropping into XPath:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                &amp;lt;xsl:array&amp;gt;
                  &amp;lt;xsl:for-each select="?members?*[?_nodeType='MethodDeclaration']"&amp;gt;
                     &amp;lt;xsl:array-member&amp;gt;
                        &amp;lt;xsl:apply-templates select="."/&amp;gt;
                     &amp;lt;/xsl:array-member&amp;gt;
                  &amp;lt;/xsl:for-each&amp;gt;
               &amp;lt;/xsl:array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Issue #2005 (PR #2006) make it feasible to do it all in XPath (by calling the apply-templates() function) but I don't feel that's the whole answer.&lt;/p&gt;
&lt;p&gt;Perhaps we could define something like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:array-build for-each="?members?*[?_nodeType='MethodDeclaration']"&amp;gt;
   &amp;lt;xsl:apply-templates select="."/&amp;gt;
&amp;lt;/xsl:array-build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2006 created</title>
   <pubDate>Thu, 15 May 2025 23:26:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2006</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2006</guid>
   <description>&lt;div&gt;&lt;p&gt;2005 Add fn:apply-templates function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #2005&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2005 created</title>
   <pubDate>Thu, 15 May 2025 16:53:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2005</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2005</guid>
   <description>&lt;div&gt;&lt;p&gt;apply-templates() as a function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose introducing &lt;code&gt;apply-templates()&lt;/code&gt; as an xslt-only function, with semantics broadly equivalent to the &lt;code&gt;xsl:apply-templates&lt;/code&gt; instruction.&lt;/p&gt;
&lt;p&gt;The main use case identified so far is when constructing maps and arrays, it enables the XPath syntax to be used rather than the much more verbose XSLT syntax.&lt;/p&gt;
&lt;p&gt;Parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select: the items to be processed using matching template rules&lt;/li&gt;
&lt;li&gt;with-params: the parameters to be passed. Like with-params on xsl:evaluate, this means variable names exist at run-time, which is a bit of an innovation, but I think it's manageable&lt;/li&gt;
&lt;li&gt;mode: again, this means mode names exist at run-time, which may have consequences. There are open questions about what the default should be, or how the various options (default mode, unnamed mode, current mode) should be expressed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2004 created</title>
   <pubDate>Thu, 15 May 2025 16:41:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2004</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2004</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:xpath instruction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the case study https://github.com/qt4cg/qtspecs/issues/1786#issuecomment-2884424739 I encountered a use case where an instruction &lt;code&gt;xsl:xpath&lt;/code&gt; would be useful.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:xpath&amp;gt;
   { "class":
       { "name": f:degenerify(name/@identifier),
          "abstract": ? abstract,
           "extends": array{? extendedTypes =!&amp;gt; map:merge(apply-templates()) },
           "implements": array{? implementedTypes =!&amp;gt; map:merge(apply-templates()) }
             ...
       }
  }
 &amp;lt;/xsl:xpath&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The instruction is very simple: &lt;code&gt;&amp;lt;xsl:xpath&amp;gt;EXPR&amp;lt;/xsl:xpath&amp;gt;&lt;/code&gt; is equivalent to &lt;code&gt;&amp;lt;xsl:sequence select="EXPR"/&amp;gt;&lt;/code&gt;. It's particularly useful because XPath constructors for maps and arrays are so much more concise than the XSLT equivalents. Compared with using xsl:sequence, it means that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XML attribute value normalization doesn't kick in, so your formatting is better protected (meaning also that the system has some chance of computing line numbers correctly for diagnostics)&lt;/li&gt;
&lt;li&gt;You haven't tied up either single or double-quotes as an attribute delimiter; both can be freely used within the expression.&lt;/li&gt;
&lt;li&gt;You aren't creating the false impression that you're returning a (multi-item) sequence&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the content is NOT a sequence constructor; no child elements are allowed; and the content is not interpreted as a text value template. Unlike xsl:evaluate, the XPath expression is statically fixed.&lt;/p&gt;
&lt;p&gt;(This example also introduces apply-templates as a function, but that will be a separate proposal).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2003 created</title>
   <pubDate>Thu, 15 May 2025 16:08:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2003</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2003</guid>
   <description>&lt;div&gt;&lt;p&gt;Conditional entries in map constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If you're constructing a map using a map constructor, adding an entry conditionally can be a real pain, and typically involves a wholesale rewrite of the way the map is constructed. It would be nice to be able to mark an entry as optional so users don't have to resort to such wholesale rewrites.&lt;/p&gt;
&lt;p&gt;The difficulty of course is finding a nice syntax: one that is both intuitively readable and grammatically unambiguous.&lt;/p&gt;
&lt;p&gt;One possibility might be:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MapConstructorEntry  ::=  MapKeyExpr ":"  MapValueExpr "optional"?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with the semantics that if the "optional" keyword is present, and the result of evaluating MapValueExpr is an empty sequence, then the entry is omitted from the constructed map.&lt;/p&gt;
&lt;p&gt;A more ambitious construct might be&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MapConstructorEntry  ::=  MapKeyExpr ":"  MapValueExpr  ("when" MapEntryCondition)?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which adds the entry to the map only if the condition is true.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $map := {"height": string(@height), 
            "width": string(@width), 
            "weight": string(@weight) when exists(@weight)}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2002 created</title>
   <pubDate>Thu, 15 May 2025 12:25:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2002</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2002</guid>
   <description>&lt;div&gt;&lt;p&gt;Adaptive serialization: QNames&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We could use the new QName literal syntax when serializing QNames with the &lt;code&gt;adaptive&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;serialize(xs:QName('x'), { 'method': 'adaptive' })

(: current output: Q{}x :)
(: proposed output: #x or #Q{}x :)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #2001 created</title>
   <pubDate>Wed, 14 May 2025 17:50:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/2001</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2001</guid>
   <description>&lt;div&gt;&lt;p&gt;1085 Revert fn:sort to the 3.1 spec; introduce fn:sort-by&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1085&lt;/p&gt;
&lt;p&gt;The new functionality introduced into the 4.0 version of fn:sort is repackaged into a new function fn:sort-by with a much cleaner interface; the fn:sort function reverts to its 3.1 specification.&lt;/p&gt;
&lt;p&gt;If this PR attracts support then the corresponding change will be applied to the array:sort function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2000 created</title>
   <pubDate>Wed, 14 May 2025 14:11:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2000</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2000</guid>
   <description>&lt;div&gt;&lt;p&gt;element-to-map() - type signature of plan&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specifications of element-to-map() and element-to-map-plan() use different record types for the data structure representing the plan. In both cases the definition is less precise than it might be (though not wrong). The two functions should use a common named record type, which should be as precise as possible.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1982 closed</title>
   <pubDate>Tue, 13 May 2025 17:24:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1982</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1982</guid>
   <description>&lt;div&gt;&lt;p&gt;1981 Ambiguity with qname literals and pragmas&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1889 closed</title>
   <pubDate>Tue, 13 May 2025 17:19:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1889</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1889</guid>
   <description>&lt;div&gt;&lt;p&gt;HTML serialization: `html-version` and `version` parameters; allowed values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1977 closed</title>
   <pubDate>Tue, 13 May 2025 17:19:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1977</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1977</guid>
   <description>&lt;div&gt;&lt;p&gt;1889 Tidy up handling of HTML serialization version, default to HTML5&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1985 closed</title>
   <pubDate>Tue, 13 May 2025 17:13:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1985</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1985</guid>
   <description>&lt;div&gt;&lt;p&gt;Default namespace terminology&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1987 closed</title>
   <pubDate>Tue, 13 May 2025 17:13:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1987</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1987</guid>
   <description>&lt;div&gt;&lt;p&gt;1985 Tidy up namespace terminology&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1986 closed</title>
   <pubDate>Tue, 13 May 2025 16:49:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1986</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1986</guid>
   <description>&lt;div&gt;&lt;p&gt;Obsolete note on reporting errors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1988 closed</title>
   <pubDate>Tue, 13 May 2025 16:49:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1988</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1988</guid>
   <description>&lt;div&gt;&lt;p&gt;1986 Drop obsolete notes on error reporting&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1989 closed</title>
   <pubDate>Tue, 13 May 2025 16:49:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1989</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1989</guid>
   <description>&lt;div&gt;&lt;p&gt;1983 QName literals in node constructors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1983 closed</title>
   <pubDate>Tue, 13 May 2025 16:49:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1983</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1983</guid>
   <description>&lt;div&gt;&lt;p&gt;Computed node constructors - use QName literals rather than string literals&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1990 closed</title>
   <pubDate>Tue, 13 May 2025 16:48:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1990</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1990</guid>
   <description>&lt;div&gt;&lt;p&gt;Update schema-for-xslt40.xsd&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1999 created</title>
   <pubDate>Mon, 12 May 2025 15:24:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1999</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1999</guid>
   <description>&lt;div&gt;&lt;p&gt;1992 Correct type of constructor function in schema-type-record&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1992&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1998 created</title>
   <pubDate>Mon, 12 May 2025 14:28:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1998</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1998</guid>
   <description>&lt;div&gt;&lt;p&gt;1997 Correct nesting of item coercion rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1997&lt;/p&gt;
&lt;p&gt;(A correction to an editorial error that made a substantive difference to the spec.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1997 created</title>
   <pubDate>Mon, 12 May 2025 13:57:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1997</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1997</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion Rules: §3.4.1 rule 3(c)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This section reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If R is an [atomic type] and J is an [atomic item], then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If J is an instance of R then it is used unchanged.&lt;/li&gt;
&lt;li&gt;If J is an instance of type xs:untypedAtomic then:
** If R is an [enumeration type] then A is cast to xs:string.
** If R is [namespace-sensitive] then a [type error] [[err:XPTY0117]] is raised.&lt;/li&gt;
&lt;li&gt;Otherwise, J is cast to type R.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The last line (rule 3(c)) looks all wrong. If we just did a cast at this point then rules 4 and 5 would be unnecessary.&lt;/p&gt;
&lt;p&gt;It's not easy to trace the history, but I think it went wrong when the rules for choice/union types were refactored (around 2024-04-12). The line in question appears to have originally been under a conditional "if A is an instance of xs:untypedAtomic...".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1996 created</title>
   <pubDate>Mon, 12 May 2025 11:05:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1996</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1996</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookups, KeySpecifier: add NumericLiteral and ContextValueRef?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Various types of expressions are allowed as a &lt;code&gt;KeySpecifier&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Lookup  ::=  ("?" | "??") (Modifier "::")? KeySpecifier
KeySpecifier  ::=  NCName | IntegerLiteral | StringLiteral | VarRef | ParenthesizedExpr | LookupWildcard | TypeSpecifier
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe we could add &lt;code&gt;ContextValueRef&lt;/code&gt; and &lt;code&gt;NumericLiteral&lt;/code&gt; to the list, to make the following expressions legal:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;{ '1.5': 'one and a half' }?1.5
array { 1 to 256 }?0x80
(3, 4, 5) ! $array?.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1995 created</title>
   <pubDate>Mon, 12 May 2025 10:56:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1995</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1995</guid>
   <description>&lt;div&gt;&lt;p&gt;Consistency: array lookups&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The different variants to look up array members should be unified. For example (if I interpret the rules correctly), the following expressions can be evaluated…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;[ 'a' ]?(&amp;lt;x&amp;gt;1&amp;lt;/x&amp;gt;)
[ 'a' ]??(number(&amp;lt;x&amp;gt;1&amp;lt;/x&amp;gt;))
[ 'a' ]??(1e0)
let $a := 1e0 return [ 'a' ]??$a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…whereas the following expressions raise errors:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;[ 'a' ]?(number(&amp;lt;x&amp;gt;1&amp;lt;/x&amp;gt;))
[ 'a' ]?(1e0)
let $a := 1e0 return [ 'a' ]?$a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should probably try to make all of them legal, or try to justify what happens.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 121 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 12 May 2025 09:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/05-13</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-05-13</guid>
</item><item>
   <title>Issue #1797 closed</title>
   <pubDate>Mon, 12 May 2025 09:30:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1797</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1797</guid>
   <description>&lt;div&gt;&lt;p&gt;elements-to-maps: separate function to construct a plan&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1993 closed</title>
   <pubDate>Mon, 12 May 2025 08:25:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1993</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1993</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect test generated for map:pairs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1994 closed</title>
   <pubDate>Mon, 12 May 2025 08:25:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1994</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1994</guid>
   <description>&lt;div&gt;&lt;p&gt;1993 Stylesheet fix to copy the occurrence indicator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1994 created</title>
   <pubDate>Sun, 11 May 2025 21:04:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1994</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1994</guid>
   <description>&lt;div&gt;&lt;p&gt;1993 Stylesheet fix to copy the occurrence indicator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1993&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1993 created</title>
   <pubDate>Sun, 11 May 2025 20:52:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1993</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1993</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect test generated for map:pairs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The signature for map:pairs is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map:pairs(
$map	as map(*)	
) as key-value-pair*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but the test case generated in misc-BuiltInKeywords is (incorrectly)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:pairs(map := ?) instance of function(map(*)) as fn:key-value-pair&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note the missing &lt;code&gt;*&lt;/code&gt; at the end.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1992 created</title>
   <pubDate>Sun, 11 May 2025 16:24:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1992</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1992</guid>
   <description>&lt;div&gt;&lt;p&gt;Type of fn:schema-type-record ? constructor&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the type fn:schema-type-record (returned by functions such as fn:schema-type), the field &lt;code&gt;constructor&lt;/code&gt; is said to be of type &lt;code&gt;fn(xs:anyAtomicType) as xs:anyAtomicType&lt;/code&gt;. It is also said to be "the same function as returned by [fn:function-lookup] applied to the type name (with arity one)". But that function has type &lt;code&gt;fn(xs:anyAtomicType?) as T?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The correct type for the &lt;code&gt;constructor&lt;/code&gt; field should be &lt;code&gt;fn(xs:anyAtomicType?) as xs:anyAtomicType?&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1991 created</title>
   <pubDate>Sun, 11 May 2025 10:45:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1991</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1991</guid>
   <description>&lt;div&gt;&lt;p&gt;835 Add built-in named record types to static context&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR adds six built-in named record types to the static context of every application:&lt;/p&gt;
&lt;p&gt;Record [key-value-pair]
Record [load-xquery-module-record]
Record [parsed-csv-structure-record]
Record [random-number-generator-record]
Record [schema-type-record]
Record [uri-structure-record]&lt;/p&gt;
&lt;p&gt;These are now listed in Appendix C of F&amp;amp;O&lt;/p&gt;
&lt;p&gt;Issue 835 requests a review of the names of these records; perhaps putting them in one place will make that review easier. Personally, I am happy with the names as currently defined.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1990 created</title>
   <pubDate>Thu, 8 May 2025 18:22:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1990</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1990</guid>
   <description>&lt;div&gt;&lt;p&gt;Update schema-for-xslt40.xsd&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fixed invalid syntax xs:simpleType/@ref (moved to @memberTypes) in simpleType named method&lt;/p&gt;
&lt;p&gt;Based the type fixed-namespaces-type-default on xs:token instead of xs:string to allow for whitespace normalization&lt;/p&gt;
&lt;p&gt;Changed collation attribute on xsl:merge-key to be an avt (according to spec)&lt;/p&gt;
&lt;p&gt;Changed attributes that were previously of type "xsl:char-optionally-expanded" to just xs:string since the spec says they can be any string.  I couldn't think of a reason they should be limited to one character optionally followed by a colon and more characters, so I assumed this was some sort of artifact from the past.&lt;/p&gt;
&lt;p&gt;Changed xsl:next-iteration and xsl:evaluate to not allow mixed content&lt;/p&gt;
&lt;p&gt;Corrected _split_when to _split-when&lt;/p&gt;
&lt;p&gt;Added missing shadow attributes (in two places) for allow-duplicate-names, build-tree, json-lines and json-node-output-method&lt;/p&gt;
&lt;p&gt;Added missing shadow attribute for select on perform-sort&lt;/p&gt;
&lt;p&gt;Added assertions for required attributes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xsl:use-package - name&lt;/li&gt;
&lt;li&gt;xsl:expose - names, component and visibility&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Made the errors attribute a list of tokens instead of just xs:token.  Doesn't affect validation but I think it is more clear.&lt;/p&gt;
&lt;p&gt;Changed default value of per-mille from a tilde to ‰&lt;/p&gt;
&lt;p&gt;Changed the default value of the on-no-match attribute from shallow-skip to text-only-copy, per the spec&lt;/p&gt;
&lt;p&gt;Gave xsl:exclude-result-prefixes the same type as no-namespace exclude-result-prefixes, to allow for #all and #default&lt;/p&gt;
&lt;p&gt;Gave xsl:extension-element-prefixes the same type as no-namespace extension-element-prefixes, to allow for #default&lt;/p&gt;
&lt;p&gt;Removed the xsl:prefixes and xsl:char-optionally-expanded types since they were no longer used after the above changes&lt;/p&gt;
&lt;p&gt;Changed the type of the visibility attribute on xsl:attribute-set, xsl:function, xsl:template and xsl:variable to xsl:visibility-not-hidden-type to exclude "hidden" per the spec&lt;/p&gt;
&lt;p&gt;Changed the keyword value of the fixed-namespaces attribute from #default to #standard (and adjusted type names)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1989 created</title>
   <pubDate>Thu, 8 May 2025 11:53:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1989</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1989</guid>
   <description>&lt;div&gt;&lt;p&gt;1983 QName literals in node constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1983&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1988 created</title>
   <pubDate>Wed, 7 May 2025 13:15:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1988</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1988</guid>
   <description>&lt;div&gt;&lt;p&gt;1986 Drop obsolete notes on error reporting&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1986&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1987 created</title>
   <pubDate>Wed, 7 May 2025 13:08:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1987</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1987</guid>
   <description>&lt;div&gt;&lt;p&gt;1985 Tidy up namespace terminology&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1985&lt;/p&gt;
&lt;p&gt;Editorial.&lt;/p&gt;
&lt;p&gt;The main effect is to centralise the descriptions of how to expand unprefixed QNames into a few named rules which can be referenced and reused throughout the spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1986 created</title>
   <pubDate>Wed, 7 May 2025 10:00:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1986</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1986</guid>
   <description>&lt;div&gt;&lt;p&gt;Obsolete note on reporting errors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose dropping the folliowing text in XQuery §2.4.2&lt;/p&gt;
&lt;p&gt;None of this text says anything prescriptive, and the suggested notation of URI#local appears outdated.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The method by which an XQuery 4.0 processor reports error information to the external environment is &lt;a href="file:///Users/mike/GitHub/mhk/qtspecs/build/www/xquery-40/xquery-40.html#dt-implementation-defined"&gt;implementation-defined&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An error can be represented by a URI reference that is derived from the error QName as follows: an error with namespace URI NS and local part LP can be represented as the URI reference NS # LP . For example, an error whose QName is err:XPST0017 could be represented as http://www.w3.org/2005/xqt-errors#XPST0017.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;Along with a code identifying an error, implementations may wish to return additional information, such as the location of the error or the processing phase in which it was detected. If an implementation chooses to do so, then the mechanism that it uses to return this information is &lt;a href="file:///Users/mike/GitHub/mhk/qtspecs/build/www/xquery-40/xquery-40.html#dt-implementation-defined"&gt;implementation-defined&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1985 created</title>
   <pubDate>Wed, 7 May 2025 07:43:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1985</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1985</guid>
   <description>&lt;div&gt;&lt;p&gt;Default namespace terminology&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There are places in the spec that use sloppy terminology regarding namespaces. For example 2.1.3 says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the namespace URI is inferred from the prefix by examining the in-scope namespaces in the static context&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But the static context does not define "in-scope namespaces", it defines "statically known namespaces"&lt;/p&gt;
&lt;p&gt;I propose to put together an editorial PR to tidy this up.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1984 created</title>
   <pubDate>Tue, 6 May 2025 20:53:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1984</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1984</guid>
   <description>&lt;div&gt;&lt;p&gt;882 Drop fn:chain&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #882&lt;/p&gt;
&lt;p&gt;Supersedes PR #1883&lt;/p&gt;
&lt;p&gt;There has been a great deal of discussion about the relative merits of the status-quo fn:chain function and the proposed replacement fn:compose. The CG was polled on whether it preferred to have fn:chain only, fn:compose only, or both, or neither. There was no clear consensus. The only option which no-one seemed to favour was to have fn:chain only -- which is the status quo. Since no-one is happy with the status quo I am therefore proposing that we drop this function. We can then start with a clean slate.&lt;/p&gt;
&lt;p&gt;For the record the main criticisms of the fn:chain function as currently specified were:&lt;/p&gt;
&lt;p&gt;(a) it is more useful to have a function that combines several functions into a single function, without actually applying that function to a set of supplied arguments&lt;/p&gt;
&lt;p&gt;(b) The function has special-case behaviour for arrays (if the input is not an array and the function has arity &amp;gt; 1 then the input sequence is converted to an array).&lt;/p&gt;
&lt;p&gt;(c) The need for the function is not clearly motivated; the examples given can all be achieved in some simpler more intuitive way.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1983 created</title>
   <pubDate>Tue, 6 May 2025 20:32:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1983</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1983</guid>
   <description>&lt;div&gt;&lt;p&gt;Computed node constructors - use QName literals rather than string literals&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have introduced (in 4.0) the option to specify element and attribute names in computed node constructors in the form of string literals. We should replace this with QName literals.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1982 created</title>
   <pubDate>Tue, 6 May 2025 20:30:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1982</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1982</guid>
   <description>&lt;div&gt;&lt;p&gt;1981 Ambiguity with qname literals and pragmas&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Resolves the syntax problem identified in #1981 by requiring a space between &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Adds more examples and notes scattered around the specs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1981 created</title>
   <pubDate>Tue, 6 May 2025 16:41:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1981</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1981</guid>
   <description>&lt;div&gt;&lt;p&gt;Syntax for QName literals clashes with XQuery pragmas&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Unfortunately (as revealed by implementation and testing) the syntax for QName literals clashes with the syntax for pragmas in XQuery.&lt;/p&gt;
&lt;p&gt;In the expression &lt;code&gt;error(#err:XPTY0004)&lt;/code&gt;, the longest token after &lt;code&gt;error&lt;/code&gt; is &lt;code&gt;(#&lt;/code&gt; which looks like the start of a pragma.&lt;/p&gt;
&lt;p&gt;It's actually a wee bit complicated. Looking at the tokenization rules, we shouldn't be recognizing a pragma here because there is no closing &lt;code&gt;#)&lt;/code&gt;. The tokenization notes say "The lexical production rules for [variable terminals] have been designed so that there is minimal need for backtracking."; the introduction of the new syntax would mean that this is no longer the case. But regardless of the details, I think we have to change the QName literal syntax.&lt;/p&gt;
&lt;p&gt;I propose we go for doubling the hash: &lt;code&gt;error(##err:XPTY0004)&lt;/code&gt;. We need to qualify the rules for tokenizing a pragma to say that a pragma is recognized when we see (&lt;code&gt;(#&lt;/code&gt;, optional whitespace, EQName) - that's not unlike the rules we have for other "variable tokens".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1972 closed</title>
   <pubDate>Tue, 6 May 2025 16:22:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1972</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1972</guid>
   <description>&lt;div&gt;&lt;p&gt;Dynamic function call applied to empty sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1240 closed</title>
   <pubDate>Tue, 6 May 2025 16:22:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1240</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1240</guid>
   <description>&lt;div&gt;&lt;p&gt;$sequence-of-maps ? info()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1975 closed</title>
   <pubDate>Tue, 6 May 2025 16:22:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1975</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1975</guid>
   <description>&lt;div&gt;&lt;p&gt;1240 Allow operand of dynamic function call to be a sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1661 closed</title>
   <pubDate>Tue, 6 May 2025 16:19:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1661</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1661</guid>
   <description>&lt;div&gt;&lt;p&gt;QName arguments: also allow strings&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1976 closed</title>
   <pubDate>Tue, 6 May 2025 16:19:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1976</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1976</guid>
   <description>&lt;div&gt;&lt;p&gt;1661 Introduce QName literals&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1973 closed</title>
   <pubDate>Tue, 6 May 2025 16:16:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1973</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1973</guid>
   <description>&lt;div&gt;&lt;p&gt;Substantitively disjoint types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1974 closed</title>
   <pubDate>Tue, 6 May 2025 16:16:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1974</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1974</guid>
   <description>&lt;div&gt;&lt;p&gt;1973 Cross-reference from type analysis to definition of disjointedness&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1951 closed</title>
   <pubDate>Tue, 6 May 2025 16:14:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1951</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1951</guid>
   <description>&lt;div&gt;&lt;p&gt;Some nits regarding the method attribute&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1971 closed</title>
   <pubDate>Tue, 6 May 2025 16:14:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1971</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1971</guid>
   <description>&lt;div&gt;&lt;p&gt;1951 Clarifications on serialization parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1952 closed</title>
   <pubDate>Tue, 6 May 2025 16:08:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1952</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1952</guid>
   <description>&lt;div&gt;&lt;p&gt;Change option name from xsi-schema-location to use-xsi-schema-location&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1969 closed</title>
   <pubDate>Tue, 6 May 2025 16:08:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1969</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1969</guid>
   <description>&lt;div&gt;&lt;p&gt;1952 Change option name xsi-schema-location&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1967 closed</title>
   <pubDate>Tue, 6 May 2025 16:05:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1967</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1967</guid>
   <description>&lt;div&gt;&lt;p&gt;Example for fn:unparsed-binary uses obsolete function name&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1968 closed</title>
   <pubDate>Tue, 6 May 2025 16:05:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1968</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1968</guid>
   <description>&lt;div&gt;&lt;p&gt;1967 r/binary-resource/unparsed-binary/&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1957 closed</title>
   <pubDate>Tue, 6 May 2025 16:02:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1957</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1957</guid>
   <description>&lt;div&gt;&lt;p&gt;Schema for XSLT incorrectly allows mixed content for xsl:output&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1964 closed</title>
   <pubDate>Tue, 6 May 2025 16:02:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1964</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1964</guid>
   <description>&lt;div&gt;&lt;p&gt;1957 xsl output allows mixed content&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1958 closed</title>
   <pubDate>Tue, 6 May 2025 15:59:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1958</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1958</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo in map:build&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1963 closed</title>
   <pubDate>Tue, 6 May 2025 15:59:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1963</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1963</guid>
   <description>&lt;div&gt;&lt;p&gt;1958 Fix simple typo in map:build&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1980 created</title>
   <pubDate>Tue, 6 May 2025 14:12:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1980</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1980</guid>
   <description>&lt;div&gt;&lt;p&gt;HTML serialization: the rules for adding a meta element need to be aligned with HTML5&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See Saxon bugs:&lt;/p&gt;
&lt;p&gt;https://saxonica.plan.io/issues/5852
https://saxonica.plan.io/issues/6772&lt;/p&gt;
&lt;p&gt;regarding the recognition and generation of META elements in the HTML and XHTML header sections.&lt;/p&gt;
&lt;p&gt;Saxon is producing HTML5 output as mandated by the 3.1 serialization spec but this is apparently either invalid or deprecated by the HTML5 specification. The 4.0 serialization spec makes some adjustments in this area but I don't think it is fully in line yet with HTML5.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1979 created</title>
   <pubDate>Sun, 4 May 2025 09:36:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1979</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1979</guid>
   <description>&lt;div&gt;&lt;p&gt;Records: Type Safety&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;One cognitive challenge with records is to internalize that records are not independent types, but only map constraints. As a consequence, no type safety guarantees exist when records are accessed and updated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A lookup of a non-existing key raises no error.&lt;/li&gt;
&lt;li&gt;A record update may result in a map that does not match the original record definition.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This makes it hard and often impossible/illegal for processors to output helpful error messages.&lt;/p&gt;
&lt;p&gt;There are reasons why we don’t want to make records too strict: an extensible record may include keys that are not defined in the record type:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: must not raise an error :)
declare record local:r(a, *);
let $r as local:r := { 'a': 1, 'b': 2 }
return $r?b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, for &lt;strong&gt;non-extensible&lt;/strong&gt; records, I think we should &lt;strong&gt;allow&lt;/strong&gt; processors to perform stricter checks when unknown keys are looked up, or when the result of an update would conflict with the original record type:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare record local:r(a as xs:integer);
(: unknown key :)
local:r(1)?b,
(: invalid value type :)
map:put(local:r(1), 'a', 'string')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As records are no independent types, it will be difficult to &lt;strong&gt;enforce&lt;/strong&gt; errors in all cases: It would require implementations to always know that a currently processed map has once been validated against a specific record type. But in many cases, implementations may be able to preserve record types for maps that have been coerced to a record, or created with a record declaration, and propagate them to updated maps. For example, we already do so when we can statically infer that the resulting map of a &lt;code&gt;map:put&lt;/code&gt; call will match the original record type.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1978 created</title>
   <pubDate>Sun, 4 May 2025 00:55:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1978</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1978</guid>
   <description>&lt;div&gt;&lt;p&gt;Function `map:build` does not allow expressing the dependency of a value on its key. Some simple types of maps cannot be built.&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Function &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-map-build"&gt;&lt;strong&gt;&lt;code&gt;map:build&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, does not allow to explicitly define the functional dependency of a value on its key.&lt;/p&gt;
&lt;p&gt;As result, it is unusable for creating even such simple maps as the following:&lt;/p&gt;
&lt;p&gt;The input is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;("apple", "apricot", "banana", "blueberry", "cherry")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;$keys&lt;/code&gt; function is:
&lt;code&gt;$keys := fn($x){characters($x)}&lt;/code&gt;
That is, every  character, in every input string, is a key.&lt;/p&gt;
&lt;p&gt;We need the values to be: if an input string contains the key two or more times, then each such string, else the empty sequence.&lt;/p&gt;
&lt;p&gt;The expected map  to be produced is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;{
  "a":  "banana",
  "b": "blueberry",
  "c": (),
  "e": "blueberry",
  "h": (),
  "i": (),
  "l": (), (: Lowercase L :)
  "n", "banana",
  "o", (),
  "p": "apple",
  "r": ("cherry", "blueberry"),
  "t": (),
  "y": ()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;We provide a new definition of &lt;strong&gt;&lt;code&gt;map:build&lt;/code&gt;&lt;/strong&gt; - this can be a complete replacement of the current function, or could be added as a new overload.
I am in the process of writing a PR, and your feedback would be appreciated.&lt;/p&gt;
&lt;p&gt;The definition is simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $mapBuild := fn(
$input	as item()*,	
$keys	as (fn($item as item(), $position as xs:integer) as xs:anyAtomicType*),
$value	as (fn($key as xs:anyAtomicType, $input as item()*) as item()*)
) as map(*)
{
  let $allKeys := distinct-values(for-each($input, $keys))
   return
     $allKeys ! map:pair(., $value(., $input)) =&amp;gt; map:of-pairs()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As can be seen from executing the code below, the redefined function can be successfully used to build the "problematic" map above, and also all currently provided examples in the FO Spec for the function &lt;code&gt;map:build&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $mapBuild := fn(
$input	as item()*,	
$keys	as (fn($item as item(), $position as xs:integer) as xs:anyAtomicType*),
$value	as (fn($key as xs:anyAtomicType, $input as item()*) as item()*)
) as map(*)
{
  let $allKeys := distinct-values(for-each($input, $keys))
   return
     $allKeys ! map:pair(., $value(., $input)) =&amp;gt; map:of-pairs()
}
 return
   let $input := ("apple", "apricot", "banana", "blueberry", "cherry"),
       $employees :=
         &amp;lt;employees&amp;gt;
           &amp;lt;employee name="Jim Nelson" location="New York" ssn="1234567890" salary="123456"/&amp;gt;
           &amp;lt;employee name="Ann West" location="New York" ssn="0987654321" salary="99999"/&amp;gt;
           &amp;lt;employee name="Peter Smith" location="Seattle" ssn="123454321" salary="155223"/&amp;gt;
           &amp;lt;employee name="Karen Johnson" location="Seattle" ssn="5432198760" salary="175000"/&amp;gt;
           &amp;lt;employee name="Jonh Lagarde" location="Boston" ssn="9999999999" salary="145000"/&amp;gt;
           &amp;lt;employee name="Samantha Weird" location="Boston" ssn="1111111111" salary="153000"/&amp;gt;
         &amp;lt;/employees&amp;gt;
    return
(    
     $mapBuild(
       $input,
       fn($string, $pos) {distinct-values(characters($string))},
       fn($key, $input)
       {
         filter($input, fn($string, $pos){$key = duplicate-values(characters($string))}) 
       }
     ),
     $mapBuild((), string#1, string#1),
     $mapBuild(1 to 10, fn {. mod 3}, fn($key, $input){filter($input, fn{$key = . mod 3})}),
     $mapBuild(1 to 5, identity#1, format-integer(?, "w")),
     $mapBuild(("January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"),
               substring(?, 1, 1), fn($key, $input){filter($input, fn{$key = substring(., 1, 1)})}
              ),
     $mapBuild(
        ("apple", "apricot", "banana", "blueberry", "cherry"),
        substring(?, 1, 1), fn($key, $input){sum($input[$key eq substring(., 1, 1)] ! string-length(.))}
     ),
     $mapBuild(
       ('Wang', 'Liu', 'Zhao'),
       fn($name, $pos) { $name },
       fn($key, $input){index-of($input, $key)}
     ),  
     let $titles := 
       &amp;lt;titles&amp;gt;
        &amp;lt;title&amp;gt;A Beginner’s Guide to &amp;lt;ix&amp;gt;Java&amp;lt;/ix&amp;gt;&amp;lt;/title&amp;gt;
        &amp;lt;title&amp;gt;Learning &amp;lt;ix&amp;gt;XML&amp;lt;/ix&amp;gt;&amp;lt;/title&amp;gt;
        &amp;lt;title&amp;gt;Using &amp;lt;ix&amp;gt;XML&amp;lt;/ix&amp;gt; with &amp;lt;ix&amp;gt;Java&amp;lt;/ix&amp;gt;&amp;lt;/title&amp;gt;
      &amp;lt;/titles&amp;gt;
     return
       $mapBuild($titles/title, 
                 fn($title){$title/ix}, 
                 fn($key, $input){filter($input, fn($elem){$key = $elem/ix})}
               ),
      $mapBuild(
        $employees//employee, fn{@ssn}, fn($key, $input){filter($input, fn($elem){$key = $elem/@ssn})}
      ),
      $mapBuild(
        $employees//employee, fn{@location}, fn($key, $input) {count(filter($input, fn($elem){$key = $elem/@location}))}
      ),
      $mapBuild(
        $employees//employee, fn{@location}, fn($key, $input) {max((filter($input, fn($elem){$key = $elem/@location}))/xs:decimal(@salary))}
      )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All results (executed with BaseX) are the expected, correct ones:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;{"a":"banana","p":"apple","l":(),"e":"blueberry","r":("blueberry","cherry"),"i":(),"c":(),"o":(),"t":(),"b":"blueberry","n":"banana","u":(),"y":(),"h":()}
{}
{1:(1,4,7,10),2:(2,5,8),0:(3,6,9)}
{1:"one",2:"two",3:"three",4:"four",5:"five"}
{"J":("January","June","July"),"F":"February","M":("March","May"),"A":("April","August"),"S":"September","O":"October","N":"November","D":"December"}
{"a":12,"b":15,"c":6}
{"Wang":1,"Liu":2,"Zhao":3}
{"Java":(&amp;lt;title&amp;gt;A Beginner’s Guide to &amp;lt;ix&amp;gt;Java&amp;lt;/ix&amp;gt;&amp;lt;/title&amp;gt;,&amp;lt;title&amp;gt;Using &amp;lt;ix&amp;gt;XML&amp;lt;/ix&amp;gt; with &amp;lt;ix&amp;gt;Java&amp;lt;/ix&amp;gt;&amp;lt;/title&amp;gt;),"XML":(&amp;lt;title&amp;gt;Learning &amp;lt;ix&amp;gt;XML&amp;lt;/ix&amp;gt;&amp;lt;/title&amp;gt;,&amp;lt;title&amp;gt;Using &amp;lt;ix&amp;gt;XML&amp;lt;/ix&amp;gt; with &amp;lt;ix&amp;gt;Java&amp;lt;/ix&amp;gt;&amp;lt;/title&amp;gt;)}
{"1234567890":&amp;lt;employee name="Jim Nelson" location="New York" ssn="1234567890" salary="123456"/&amp;gt;,"0987654321":&amp;lt;employee name="Ann West" location="New York" ssn="0987654321" salary="99999"/&amp;gt;,"123454321":&amp;lt;employee name="Peter Smith" location="Seattle" ssn="123454321" salary="155223"/&amp;gt;,"5432198760":&amp;lt;employee name="Karen Johnson" location="Seattle" ssn="5432198760" salary="175000"/&amp;gt;,"9999999999":&amp;lt;employee name="Jonh Lagarde" location="Boston" ssn="9999999999" salary="145000"/&amp;gt;,"1111111111":&amp;lt;employee name="Samantha Weird" location="Boston" ssn="1111111111" salary="153000"/&amp;gt;}
{"New York":2,"Seattle":2,"Boston":2}
{"New York":123456,"Seattle":175000,"Boston":153000}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/716658e3-8fac-4cc4-96fb-d6981037c4df" alt="Image"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1977 created</title>
   <pubDate>Fri, 2 May 2025 15:59:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1977</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1977</guid>
   <description>&lt;div&gt;&lt;p&gt;1889 Tidy up handling of HTML serialization version, default to HTML5&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Does some general tidying up of the serialization text, but the main substantive changes are (a) to make HTML5 the default version, and (b) to make support for earlier versions effectively optional.&lt;/p&gt;
&lt;p&gt;Please review carefully. Marking as editorial because I'm not sure any test cases need to change, but I might be wrong.&lt;/p&gt;
&lt;p&gt;Fix #1889&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1976 created</title>
   <pubDate>Fri, 2 May 2025 11:56:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1976</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1976</guid>
   <description>&lt;div&gt;&lt;p&gt;1661 Introduce QName literals&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1661&lt;/p&gt;
&lt;p&gt;See also #747&lt;/p&gt;
&lt;p&gt;As discussed in the issue, I wasn't happy with the idea of changing the coercion rules to allow strings to be provided where a QName is expected, because of the need to keep the namespace context around at run-time, and because of potential confusion about exactly what namespace context is used.&lt;/p&gt;
&lt;p&gt;Instead I have gone back to the idea of introducing QName literals, using the simple syntax #EQName.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;error(#err:XPTY0004)
node-name($node) = #xml:space
format-number($num, #de)
load-xquery-module($module)?variables?(#myvar)
transform({'initial-template':#xsl:initial-template})
{'last': 'Kay', 'first': 'Michael', 'suffix':#fn:null}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1975 created</title>
   <pubDate>Fri, 2 May 2025 10:28:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1975</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1975</guid>
   <description>&lt;div&gt;&lt;p&gt;1240 Allow operand of dynamic function call to be a sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1240
Fix #1972&lt;/p&gt;
&lt;p&gt;This PR enables use of expressions such as &lt;code&gt;$rectangle?area() - sum($rectangle?contents()?area())&lt;/code&gt; which would previously have failed with a type error.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1974 created</title>
   <pubDate>Fri, 2 May 2025 09:13:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1974</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1974</guid>
   <description>&lt;div&gt;&lt;p&gt;1973 Cross-reference from type analysis to definition of disjointedness&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1973&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1973 created</title>
   <pubDate>Fri, 2 May 2025 08:41:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1973</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1973</guid>
   <description>&lt;div&gt;&lt;p&gt;Substantitively disjoint types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Section §2.3.3.1 Static Analysis Phase mentions&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A processor may raise a type error during static analysis if the inferred static type of an expression has no overlap (intersection) with the required type, and cannot be converted to the required type using the [coercion rules].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This should cross-refer to the more precisely defined concept of types being "substantively disjoint" - see §3.4.3.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1972 created</title>
   <pubDate>Fri, 2 May 2025 08:24:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1972</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1972</guid>
   <description>&lt;div&gt;&lt;p&gt;Dynamic function call applied to empty sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A note in F+O under map:get states&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;map:get(map:get(map:get($map, 'employee'), 'name'), 'first')&lt;/code&gt; can be written as &lt;code&gt;$map('employee')('name')('first')&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That's technically correct: both these expressions will fail in the same way if &lt;code&gt;$map&lt;/code&gt; does not contain an entry for the key &lt;code&gt;employee&lt;/code&gt;. Unlike the lookup expression &lt;code&gt;$map?employee?name?first&lt;/code&gt; which returns an empty sequence in this situation.&lt;/p&gt;
&lt;p&gt;The rules for dynamic function calls (xpath, §4.5.3.1) state that &lt;code&gt;$F($X)&lt;/code&gt; raises a type error if &lt;code&gt;$F&lt;/code&gt; is an empty sequence.&lt;/p&gt;
&lt;p&gt;I think it would be more useful if both map:get() and dynamic function calls were changed to have "empty if empty" semantics.&lt;/p&gt;
&lt;p&gt;This is related to #1240 which goes further by allowing &lt;code&gt;$F&lt;/code&gt; to be a sequence of function items.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1971 created</title>
   <pubDate>Thu, 1 May 2025 22:11:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1971</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1971</guid>
   <description>&lt;div&gt;&lt;p&gt;1951 Clarifications on serialization parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1951&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1970 created</title>
   <pubDate>Wed, 30 Apr 2025 09:08:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1970</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1970</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial notes&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;XQFO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:fold-right&lt;/code&gt; has an obsolete change section saying that “The $action callback function accepts an optional position argument.”&lt;/li&gt;
&lt;li&gt;“then [the] operation will fail”&lt;/li&gt;
&lt;li&gt;remove whitespace before/after QName literals (#1982)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:unparsed-binary&lt;/code&gt;: return type: &lt;code&gt;xs:base64Binary?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(everyone: feel free to add notes, I’ll create a PR sometime later)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1969 created</title>
   <pubDate>Wed, 30 Apr 2025 08:53:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1969</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1969</guid>
   <description>&lt;div&gt;&lt;p&gt;1952 Change option name xsi-schema-location&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Change to use-xsi-schema-location (because the value is a boolean, not a location)&lt;/p&gt;
&lt;p&gt;Fix #1952&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1968 created</title>
   <pubDate>Wed, 30 Apr 2025 08:47:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1968</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1968</guid>
   <description>&lt;div&gt;&lt;p&gt;1967 r/binary-resource/unparsed-binary/&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1967&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1967 created</title>
   <pubDate>Wed, 30 Apr 2025 08:27:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1967</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1967</guid>
   <description>&lt;div&gt;&lt;p&gt;Example for fn:unparsed-binary uses obsolete function name&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;One of the examples for the new function fn:unparsed-binary uses the obsolete function name fn:binary-resource&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1568 closed</title>
   <pubDate>Wed, 30 Apr 2025 07:34:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1568</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1568</guid>
   <description>&lt;div&gt;&lt;p&gt;Define a Unicode case-insensitive collation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1966 closed</title>
   <pubDate>Wed, 30 Apr 2025 07:34:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1966</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1966</guid>
   <description>&lt;div&gt;&lt;p&gt;1568b Add unicode case-blind collation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1945 closed</title>
   <pubDate>Wed, 30 Apr 2025 06:11:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1945</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1945</guid>
   <description>&lt;div&gt;&lt;p&gt;1568 unicode case blind collation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1966 created</title>
   <pubDate>Wed, 30 Apr 2025 06:08:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1966</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1966</guid>
   <description>&lt;div&gt;&lt;p&gt;1568b Add unicode case-blind collation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Replaces #1945 which was approved by the CG, but had pull conflicts because of incidental editorial changes&lt;/p&gt;
&lt;p&gt;Fix #1568&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1965 created</title>
   <pubDate>Wed, 30 Apr 2025 01:13:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1965</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1965</guid>
   <description>&lt;div&gt;&lt;p&gt;The Generator record&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a continuation of the original issue &lt;strong&gt;https://github.com/qt4cg/qtspecs/issues/716&lt;/strong&gt;, created almost 2 years ago, and having accumulated a lot of very useful discussion.&lt;/p&gt;
&lt;p&gt;Now, when we have methods that are fields of records, it became practical to produce the record type entirely in code, and &lt;strong&gt;this is the base for the planned PR.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;1. What it contains&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The standard record fields as originally published:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;     initialized as xs:boolean,
     endReached as xs:boolean,
     getCurrent as %method fn() as item()*,
     moveNext as %method fn(*)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The following 34 methods - this will form the signatures and formal definitions of the methods inside the documentation:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;toArray := %method fn()
take := %method fn($n as xs:integer)
takeWhile := %method fn($pred as function(item()*) as xs:boolean)
skip := %method fn($n as xs:nonNegativeInteger)
skipWhile := %method fn($pred as function(item()*) as xs:boolean)
some := %method fn()
someWhere := %method fn($pred)
subrange := %method fn($m as xs:positiveInteger, $n as xs:integer)
chunk := %method fn($size as xs:positiveInteger)
head := %method fn()
tail := %method fn()
at := %method fn($ind as xs:nonNegativeInteger)
for-each := %method fn($fun as function(*))
for-each-pair := %method fn($gen2 as f:generator, $fun as function(*))
zip := %method fn($gen2 as f:generator)
concat := %method fn($gen2 as f:generator)
append := %method fn($value as item()*)
prepend := %method fn($value as item()*)
insertAt := %method fn($pos as xs:positiveInteger, $value as item()*)
removeAt := %method fn($pos as xs:nonNegativeInteger)
replace := %method fn($funIsMatching as function(item()*) as xs:boolean, $replacement as item()*)
reverse := %method fn()
filter := %method fn($pred as function(item()*) as xs:boolean)
fold-left := %method fn($init as item()*, $action as fn(*))
fold-right := %method fn($init as item()*, $action as fn(*))
fold-lazy := %method fn($init as item()*, $action as fn(*), $shortCircuitProvider as function(*))
scan-left := %method fn($init as item()*, $action as fn(*))
scan-right := %method fn($init as item()*, $action as fn(*))
makeGenerator := %method fn($provider as function(*))
makeGeneratorFromArray := %method fn($input as array(*))
makeGeneratorFromSequence := %method fn($input as item()*)
toSequence := %method fn()
emptyGenerator := %method fn()
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;90 tests/examples - with calls to all the methods  - in normal and edge cases&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. Where to get the executable (with BaseX) code?&lt;/h2&gt;
&lt;p&gt;For everyone's convenience, you will find the complete executable code at the end of this issue/initial-comment.
Alternatively, the code is available here: https://github.com/dnovatchev/Articles/blob/main/Generators/Code/generator.xpath&lt;/p&gt;
&lt;p&gt;The latter will always contain the latest, up-to-date code.
And, of course, please execute the code with BaseX, as I have done many times:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/e8d671d1-fda8-418e-a5c8-bb75e81d7a5a" alt="Image"/&gt;&lt;/p&gt;
&lt;h2&gt;3. What this gives us:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Working with huge collections, that would otherwise be restricted by the available memory.&lt;/li&gt;
&lt;li&gt;Deferred execution.&lt;/li&gt;
&lt;li&gt;Handling collections containing unknown or infinite number of members&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;A (next) member is produced only on request. &lt;strong&gt;No time is spent on producing all members of the collection&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A (next) member is produced only on request. &lt;strong&gt;No memory is consumed to store all members of the collection&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="4"&gt;
&lt;li&gt;Lazy evaluation - due to the above and also using the &lt;strong&gt;&lt;em&gt;fold-lazy&lt;/em&gt;&lt;/strong&gt; method (also described in &lt;strong&gt;&lt;em&gt;&lt;a href="https://medium.com/@dimitrenovatchev/laziness-in-xpath-the-trouble-with-fn-fold-right-cbb1cc654d1c?sk=872244cf80bfcb52d67bcb8b359478ff"&gt;this article&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Implementation of the original idea about Kollection - https://github.com/qt4cg/qtspecs/issues/910 .&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;4. What assistance is needed&lt;/h2&gt;
&lt;p&gt;I will greatly appreciate any recommendations on how to proceed with the actual PR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can this be a single PR ?&lt;/li&gt;
&lt;li&gt;If this is too-big for a single PR, then how to proceed, like splitting it to pieces?&lt;/li&gt;
&lt;li&gt;Any observations and comments on the code itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5. References:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The original issue: &lt;strong&gt;&lt;em&gt;Generators in XPath&lt;/em&gt;&lt;/strong&gt;: https://github.com/qt4cg/qtspecs/issues/716&lt;/li&gt;
&lt;li&gt;This article: &lt;strong&gt;&lt;em&gt;&lt;a href="https://medium.com/@dimitrenovatchev/generators-in-xpath-987a609cfbd5?sk=6334d48f9565f78eba90b212e461243b"&gt;Generators in XPath&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The article defining fold-lazy : &lt;strong&gt;&lt;em&gt;&lt;a href="https://medium.com/@dimitrenovatchev/laziness-in-xpath-the-trouble-with-fn-fold-right-cbb1cc654d1c?sk=872244cf80bfcb52d67bcb8b359478ff"&gt;"Laziness in XPath. The trouble with fn:fold-right"&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;6. Complete, executable definition of the &lt;strong&gt;&lt;em&gt;generator&lt;/em&gt;&lt;/strong&gt; record&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;declare namespace f = "http://www.w3.org/2005/xpath-functions-2025";
declare record f:generator 
   ( initialized as xs:boolean,
     endReached as xs:boolean,
     getCurrent as %method fn() as item()*,
     moveNext as %method fn(*) (: as f:generator, :),
     toArray := %method fn()
     {
       while-do( [., []],
                function( $inArr) 
                { $inArr(1)?initialized and not($inArr(1)?endReached) },                 
                function($inArr) 
                { array{$inArr(1)?moveNext(), 
                        array:append($inArr(2), $inArr(1)?getCurrent())
                       } 
                 }         
       ) (2)
     },
     
     take := %method fn($n as xs:integer) 
     {
      let $gen := if(not(?initialized)) then ?moveNext()
                    else .
       return
         if($gen?endReached or $n le 0) then $gen?emptyGenerator()
          else
            let $current := $gen?getCurrent(),
                $newResultGen := map:put(., "getCurrent", %method fn(){$current}),
                $nextGen := $gen?moveNext()
             return
               if($nextGen?endReached) then $newResultGen
                 else
                   let
                       $newResultGen2 :=  map:put($newResultGen, "moveNext", %method fn() {$nextGen?take($n -1)}) 
                     return
                       $newResultGen2
      },
      
      takeWhile := %method fn($pred as function(item()*) as xs:boolean)
      {
        let $gen := if(not(?initialized)) then ?moveNext()
                      else .
         return
           if($gen?endReached) then $gen?emptyGenerator()
            else      
              let $current := $gen?getCurrent()
                return
                  if(not($pred($current))) then $gen?emptyGenerator()
                  else
                    let $newResultGen := map:put(., "getCurrent", %method fn(){$current}),
                        $nextGen := ?moveNext()
                     return
                        if($nextGen?endReached) then $newResultGen
                        else
                          let $newResultGen2 :=  map:put($newResultGen, "moveNext", %method fn() {$nextGen?takeWhile($pred)}) 
                           return $newResultGen2  
      },
     
     skipStrict := %method fn($n as xs:nonNegativeInteger, $issueErrorOnEmpty as xs:boolean) 
     {
            if($n eq 0) then .
              else if(?endReached) 
                     then if($issueErrorOnEmpty)
                           then error((), "Input Generator too-short") 
                           else ?emptyGenerator()
              else 
                let $gen := if(not(?initialized)) then ?moveNext()
                             else .
                  return
                    if(not($gen?endReached)) then $gen?moveNext()?skipStrict($n -1, $issueErrorOnEmpty)
                      else $gen?emptyGenerator()                 

     },
     skip := %method fn($n as xs:nonNegativeInteger) 
     {
       ?skipStrict($n, false())
     },
     
     skipWhile := %method fn($pred as function(item()*) as xs:boolean)
     {
        let $gen := if(not(?initialized)) then ?moveNext()
                      else .
         return
           if($gen?endReached) then $gen?emptyGenerator()
            else
              let $current := $gen?getCurrent()
               return
                 if(not($pred($current))) then $gen
                  else $gen?moveNext()?skipWhile($pred)                    
     },
     
     some := %method fn()
     {
       ?initialized and not(?endReached)
     },
     
     someWhere := %method fn($pred)
     {
       ?filter($pred)?some()
     },
     
     subrange := %method fn($m as xs:positiveInteger, $n as xs:integer)
     {
       ?skip($m - 1)?take($n - $m + 1)
     },
     
     chunk := %method fn($size as xs:positiveInteger)
     {
        let $gen := if(not(?initialized)) then ?moveNext()
                      else .
         return
           if($gen?endReached) then $gen?emptyGenerator()
           else
             let $thisChunk := $gen?take($size)?toArray(),
                 $cutGen := $gen?skip($size),
                 $resultGen := $gen =&amp;gt; map:put("getCurrent", %method fn(){$thisChunk})
                                    =&amp;gt; map:put("moveNext", %method fn(){$cutGen?chunk($size)})
              return $resultGen
     },
     
     head := %method fn() {?take(1)?getCurrent()},
     tail := %method fn() {?skip(1)},
     
     at := %method fn($ind as xs:nonNegativeInteger) {?subrange($ind, $ind)?getCurrent()},
           
     for-each := %method fn($fun as function(*))
     {
      let $gen := if(not(?initialized)) then ?moveNext()
                    else .        
       return
         if(?endReached) then ?emptyGenerator()
          else
           let $current := $fun(?getCurrent()),
                $newResultGen := map:put(., "getCurrent", %method fn(){$current}),
                $nextGen := ?moveNext()
            return
              if($nextGen?endReached) then $newResultGen
                else
                  let $newResultGen2 :=  map:put($newResultGen, "moveNext", %method fn() {$nextGen?for-each($fun)}) 
                     return
                       $newResultGen2                    
      },
      
      for-each-pair := %method fn($gen2 as f:generator, $fun as function(*))
      {
        let $gen := if(not(?initialized)) then ?moveNext()
                    else .,
            $gen2 := if(not($gen2?initialized)) then $gen2?moveNext()
                    else $gen2
         return
            if(?endReached or $gen2?endReached) then ?emptyGenerator() 
             else  
               let $current := $fun(?getCurrent(), $gen2?getCurrent()),
                   $newResultGen := map:put(., "getCurrent", %method fn(){$current}),
                   $nextGen1 := ?moveNext(),
                   $nextGen2 := $gen2?moveNext()
                return
                   if($nextGen1?endReached or $nextGen2?endReached) then $newResultGen
                     else
                       let $newResultGen2 := map:put($newResultGen, "moveNext", %method fn(){$nextGen1?for-each-pair($nextGen2, $fun)})
                         return
                           $newResultGen2                        
      },
      
      zip := %method fn($gen2 as f:generator)
      {
        ?for-each-pair($gen2, fn($x1, $x2){[$x1, $x2]})
      },

      concat := %method fn($gen2 as f:generator)
      {
        let $gen := if(not(?initialized)) then ?moveNext()
                    else .,
            $gen2 := if(not($gen2?initialized)) then $gen2?moveNext()
                    else $gen2,
            $resultGen := if($gen?endReached) then $gen2
                            else if($gen2?endReached) then $gen
                            else
                              $gen  =&amp;gt; map:put(  "moveNext", 
                                                %method fn()
                                                 {
                                                 let $nextGen := $gen?moveNext()
                                                   return 
                                                     $nextGen?concat($gen2)
                                                 }
                                              )                                   
        return 
           $resultGen            
      },

      append := %method fn($value as item()*)
      {
        let $gen := if(not(?initialized)) then ?moveNext()
                    else .,
            $genSingle := $gen =&amp;gt; map:put("getCurrent", %method fn(){$value})
                               =&amp;gt; map:put("moveNext", %method fn(){?emptyGenerator()})
                               =&amp;gt; map:put("endReached", false())
         return
           $gen?concat($genSingle)                    
      },
      
      prepend := %method fn($value as item()*)
      {
                let $gen := if(not(?initialized)) then ?moveNext()
                    else .,
                    $genSingle := $gen =&amp;gt; map:put("getCurrent", %method fn(){$value})
                                       =&amp;gt; map:put("moveNext", %method fn(){?emptyGenerator()})
         return
           $genSingle?concat($gen)  
      },
      
      insertAt := %method fn($pos as xs:positiveInteger, $value as item()*)
      {
        let $genTail := ?skipStrict($pos - 1, true())
         return
            if($pos gt 1)
              then ?take($pos - 1)?append($value)?concat($genTail)
              else $genTail?prepend($value)               
      },
      
      removeAt := %method fn($pos as xs:nonNegativeInteger)
      {
        let $genTail := ?skipStrict($pos, true())
          return
            if($pos gt 1)
              then ?take($pos - 1)?concat($genTail)
              else $genTail
      },
    
      replace := %method fn($funIsMatching as function(item()*) as xs:boolean, $replacement as item()*)
      {
        if(?endReached) then .
          else
            let $current := ?getCurrent()
              return
                if($funIsMatching($current))
                  then let $nextGen := ?moveNext()
                     return
                       . =&amp;gt; map:put("getCurrent", %method fn() {$replacement})
                         =&amp;gt; map:put("moveNext", %method fn() { $nextGen } 
                                  )
                  else (: $current is not the match for replacement :)
                    let $nextGen := ?moveNext()
                      return . =&amp;gt; map:put("moveNext", 
                                           %method fn()
                                           {
                                             let $intendedReplace := function($z) {$z?replace($funIsMatching, $replacement)}
                                              return
                                                if($nextGen?endReached) then $nextGen
                                                else $intendedReplace($nextGen)
                                           }
                                        )
      },
      
      reverse := %method fn()
      {
        if(?endReached) then ?emptyGenerator()
          else
           let $current := ?getCurrent()
             return
               ?tail()?reverse()?append($current)
      },

      filter := %method fn($pred as function(item()*) as xs:boolean)
      {
             if(?initialized and ?endReached) then ?emptyGenerator()
              else
                let $getNextGoodGen := function($gen as map(*), 
                                             $pred as function(item()*) as xs:boolean)
                   {
                      if($gen?endReached) then $gen?emptyGenerator()
                      else
                        let $mapResult := 
                              while-do(
                                       $gen,
                                       function($x) { not($x?endReached) and not($pred($x?getCurrent()))},
                                       function($x) { $x?moveNext() }
                                       )   
                        return 
                          if($mapResult?endReached) then $gen?emptyGenerator()
                           else $mapResult                  
                   },
                   
                   $gen := if(?initialized) then . 
                             else ?moveNext(),
                   $nextGoodGen := $getNextGoodGen($gen, $pred)
                return
                  if($nextGoodGen?endReached) then $gen?emptyGenerator()
                  else
                    $nextGoodGen =&amp;gt; map:put("moveNext", 
                                            %method fn() 
                                              {
                                                let $nextGoodGen := $getNextGoodGen(?inputGen?moveNext(), $pred)
                                                  return
                                                    if($nextGoodGen?endReached) then $nextGoodGen?emptyGenerator()
                                                    else
                                                      map:put(map:put($nextGoodGen, "moveNext", %method fn() {$nextGoodGen?moveNext()?filter($pred)}),
                                                                      "inputGen", $nextGoodGen
                                                              )
                                               }
                                           )
                                   =&amp;gt;
                                     map:put("inputGen", $nextGoodGen)
        },     
        fold-left := %method fn($init as item()*, $action as fn(*))
        {
          if(?endReached) then $init
            else ?tail()?fold-left($action($init, ?getCurrent()), $action)
        },
        
        fold-right := %method fn($init as item()*, $action as fn(*))
        {
          if(?endReached) then $init
            else $action(?head(), ?tail()?fold-right($init, $action))
        },
        
        fold-lazy := %method fn($init as item()*, $action as fn(*), $shortCircuitProvider as function(*))
        {
          if(?endReached) then $init
          else
           let $current := ?getCurrent()
             return
               if(function-arity($shortCircuitProvider($current, $init)) eq 0)
                 then $shortCircuitProvider($current, $init)()
                 else $action($current, ?moveNext()?fold-lazy($init, $action, $shortCircuitProvider))
        },
        
        scan-left := %method fn($init as item()*, $action as fn(*))
        {
          let $resultGen := ?emptyGenerator() 
                                =&amp;gt; map:put("endReached", false())
                                =&amp;gt; map:put("getCurrent", %method fn(){$init})
           return
             if(?endReached) 
               then $resultGen =&amp;gt; map:put("moveNext", %method fn(){?emptyGenerator()})
               else
                 let $resultGen := $resultGen =&amp;gt; map:put("getCurrent", %method fn(){$init}),
                     $partialFoldResult := $action($init, ?getCurrent())
                   return
                     let $nextGen := ?moveNext()
                      return
                        $resultGen =&amp;gt; map:put("moveNext", %method fn()
                                              { 
                                                  $nextGen?scan-left($partialFoldResult, $action)
                                               }
                                              )            
        },
      
        scan-right := %method fn($init as item()*, $action as fn(*))
        {
          ?reverse()?scan-left($init, $action)?reverse()                         
        },
        
        makeGenerator := %method fn($provider as function(*))
        {
         let $gen := if(not(?initialized)) then ?moveNext()
                    else .,
              $nextDataItemGetter := $provider(0),
              $nextGen := if(not($nextDataItemGetter instance of function(*))) then $gen?emptyGenerator()  
                           else $gen?emptyGenerator()
                            =&amp;gt; map:put("numDataItems", 1)
                            =&amp;gt; map:put("current", $nextDataItemGetter())
                            =&amp;gt; map:put("endReached", false())
                            =&amp;gt; map:put("getCurrent", %method fn() {?current})
                            =&amp;gt; map:put("moveNext",  
                                       %method fn() 
                                        {
                                          let $nextDataItemGetter := $provider(?numDataItems)
                                            return
                                              if(not($nextDataItemGetter instance of function(*))) then ?emptyGenerator()
                                              else
                                                . =&amp;gt; map:put("current", $nextDataItemGetter())
                                                  =&amp;gt; map:put("numDataItems", ?numDataItems + 1)
                                        }
                                       )
           return $nextGen                                                  
        },
        
        makeGeneratorFromArray := %method fn($input as array(*))
        {
          let $size := array:size($input),
              $arrayProvider := fn($ind as xs:integer)
                                {
                                  if($ind +1 gt $size) then -1
                                   else fn(){$input($ind + 1)}
                                }
           return ?makeGenerator($arrayProvider)
        },
        
        makeGeneratorFromSequence := %method fn($input as item()*)
        {
          let $size := count($input),
              $seqProvider := fn($ind as xs:integer)
                                {
                                  if($ind +1 gt $size) then -1
                                   else fn(){$input[$ind + 1]}
                                }
           return ?makeGenerator($seqProvider)
        },
        
        toSequence := %method fn() {?toArray() =&amp;gt; array:items()},     
        
        emptyGenerator := %method fn() 
        {
          . =&amp;gt; map:put("initialized", true()) =&amp;gt; map:put("endReached", true())
            =&amp;gt; map:put("getCurrent", %method fn() {error((),"getCurrent() called on an emptyGenerator")})
            =&amp;gt; map:put("moveNext", %method fn() {error((),"moveNext() called on an emptyGenerator")})
        },      
     *
   );

let $gen2ToInf := f:generator(initialized := true(), endReached := false(), 
                              getCurrent := %method fn(){?last +1},
                              moveNext := %method fn()
                              {
                                if(not(?initialized))
                                  then map:put(., "inittialized", true())
                                  else map:put(., "last", ?last + 1)
                              },
                              options := {"last" : 1}
                             ),
    $double := fn($n) {2*$n},
    $sum2 := fn($m, $n) {$m + $n},
    $product := fn($m, $n) {$m * $n}
  return    
  (
    "$gen2ToInf?take(3)?toArray()",
    $gen2ToInf?take(3)?toArray(),
    "================",    
    "$gen2ToInf?take(3)?skip(2)?getCurrent()",
    $gen2ToInf?take(3)?skip(2)?getCurrent(),
    (: $gen2ToInf?take(3)?moveNext()?moveNext()?moveNext()?getCurrent(), :)
    "================",
    "$gen2ToInf?getCurrent()",
    $gen2ToInf?getCurrent(),
    "$gen2ToInf?moveNext()?getCurrent()",
    $gen2ToInf?moveNext()?getCurrent(),
    "================",
    "$gen2ToInf?take(5) instance of f:generator",
    $gen2ToInf?take(5) instance of f:generator,
    "==&amp;gt;  $gen2ToInf?skip(7) instance of f:generator",
    $gen2ToInf?skip(7) instance of f:generator,  
    "================",
    "$gen2ToInf?subrange(4, 6)?getCurrent()",
    $gen2ToInf?subrange(4, 6)?getCurrent(), 
    "$gen2ToInf?subrange(4, 6)?moveNext()?getCurrent()",
    $gen2ToInf?subrange(4, 6)?moveNext()?getCurrent(),
    "$gen2ToInf?subrange(4, 6)?moveNext()?moveNext()?getCurrent()",
    $gen2ToInf?subrange(4, 6)?moveNext()?moveNext()?getCurrent(),
    (: $gen2ToInf?subrange(4, 6)?moveNext()?moveNext()?moveNext()?getCurrent() :) (: Must raise error:)    
    "================",    
    "$gen2ToInf?subrange(4, 6)?head()",
    $gen2ToInf?subrange(4, 6)?head(),  
    "$gen2ToInf?subrange(4, 6)?tail()?head()",
    $gen2ToInf?subrange(4, 6)?tail()?head(),
    "$gen2ToInf?subrange(4, 6)?toArray()",
    $gen2ToInf?subrange(4, 6)?toArray(),
    "$gen2ToInf?head()",
    $gen2ToInf?head(),
    "==&amp;gt;  $gen2ToInf?tail()?head()",
    $gen2ToInf?tail()?head(),
    "================", 
    "$gen2ToInf?subrange(4, 6)?tail()?toArray()",
    $gen2ToInf?subrange(4, 6)?tail()?toArray(),
    "================",
    "$gen2ToInf?at(5)",
    $gen2ToInf?at(5), 
    "================",
    "$gen2ToInf?subrange(1, 5)?toArray()",
    $gen2ToInf?subrange(1, 5)?toArray(),
    "$gen2ToInf?subrange(1, 5)?for-each($double)?toArray()",
    $gen2ToInf?subrange(1, 5)?for-each($double)?toArray(),
    "$gen2ToInf?take(5)?for-each($double)?toArray()",
    $gen2ToInf?take(5)?for-each($double)?toArray(),
    "==&amp;gt;  $gen2ToInf?for-each($double)?take(5)?toArray()",
    $gen2ToInf?for-each($double)?take(5)?toArray(),
    "================",
    "$gen2ToInf?subrange(1, 5)?toArray()",
    $gen2ToInf?subrange(1, 5)?toArray(),
    "$gen2ToInf?subrange(6, 10)?toArray()",
    $gen2ToInf?subrange(6, 10)?toArray(),
    "$gen2ToInf?subrange(1, 5)?for-each-pair($gen2ToInf?subrange(6, 10), $sum2)?toArray()",
    $gen2ToInf?subrange(1, 5)?for-each-pair($gen2ToInf?subrange(6, 10), $sum2)?toArray(), 
    "==&amp;gt;  $gen2ToInf?for-each-pair($gen2ToInf, $sum2)?take(5)?toArray()",
    $gen2ToInf?for-each-pair($gen2ToInf, $sum2)?take(5)?toArray(),
    "================",
    "==&amp;gt;  $gen2ToInf?filter(fn($n){$n mod 2 eq 1})?getCurrent()",
    $gen2ToInf?filter(fn($n){$n mod 2 eq 1})?getCurrent(),
    "$gen2ToInf?filter(fn($n){$n mod 2 eq 1})?moveNext()?getCurrent()",
    $gen2ToInf?filter(fn($n){$n mod 2 eq 1})?moveNext()?getCurrent(),
    "================", 
    "$gen2ToInf?filter(fn($n){$n mod 2 eq 1})?take(10)?toArray()",
    $gen2ToInf?filter(fn($n){$n mod 2 eq 1})?take(10)?toArray(),  
    "================", 
    "$gen2ToInf?filter(fn($n){$n mod 2 eq 1})?take(10)?toSequence()",
    $gen2ToInf?filter(fn($n){$n mod 2 eq 1})?take(10)?toSequence(),
    "================", 
    "$gen2ToInf?takeWhile(fn($n){$n &amp;lt; 11})?toArray()",
    $gen2ToInf?takeWhile(fn($n){$n &amp;lt; 11})?toArray(), 
    "$gen2ToInf?takeWhile(fn($n){$n &amp;lt; 2})?toArray()",
    $gen2ToInf?takeWhile(fn($n){$n &amp;lt; 2})?toArray(), 
    "================", 
    "$gen2ToInf?skipWhile(fn($n){$n &amp;lt; 11})?take(5)?toArray()",
    $gen2ToInf?skipWhile(fn($n){$n &amp;lt; 11})?take(5)?toArray(),
    "==&amp;gt; $gen2ToInf?skipWhile(fn($n){$n &amp;lt; 2})",
    $gen2ToInf?skipWhile(fn($n){$n &amp;lt; 2}),
    "
     ==&amp;gt; $gen2ToInf?skipWhile(fn($n){$n &amp;lt; 2})?skip(1)",
    $gen2ToInf?skipWhile(fn($n){$n &amp;lt; 2})?skip(1),
(:    $gen2ToInf?skipWhile(fn($x) {$x ge 2}) :) (: ?skip(1) :)
    "================", 
    "$gen2ToInf?some()",
     $gen2ToInf?some(),
     "let $empty := $gen2ToInf?emptyGenerator()
      return $empty?some()",
     let $empty := $gen2ToInf?emptyGenerator()
      return $empty?some(),
    "================",
    "$gen2ToInf?take(5)?filter(fn($n){$n ge 7})?some()",
     $gen2ToInf?take(5)?filter(fn($n){$n ge 7})?some(),  
     "$gen2ToInf?take(5)?someWhere(fn($n){$n ge 7})",
     $gen2ToInf?take(5)?someWhere(fn($n){$n ge 7}), 
     "$gen2ToInf?take(5)?someWhere(fn($n){$n ge 6})",
     $gen2ToInf?take(5)?someWhere(fn($n){$n ge 6}),
     "$gen2ToInf?someWhere(fn($n){$n ge 100})",
     $gen2ToInf?someWhere(fn($n){$n ge 100}),
     "================",
     "$gen2ToInf?take(10)?take(11)?toArray()",
     $gen2ToInf?take(10)?take(11)?toArray(),
     "$gen2ToInf?take(10)?skip(10)?toArray()",
     $gen2ToInf?take(10)?skip(10)?toArray(),
     "$gen2ToInf?take(10)?skip(9)?toArray()",     
     $gen2ToInf?take(10)?skip(9)?toArray(),
     "$gen2ToInf?take(10)?subrange(3, 12)?toArray()",
     $gen2ToInf?take(10)?subrange(3, 12)?toArray(),
     "$gen2ToInf?take(10)?subrange(5, 3)?toArray()",
     $gen2ToInf?take(10)?subrange(5, 3)?toArray(),
     "================",
     "$gen2ToInf?take(100)?chunk(20)?getCurrent()",
      $gen2ToInf?take(100)?chunk(20)?getCurrent(),
      "==&amp;gt;  $gen2ToInf?chunk(20)?take(5)?toArray()",
      $gen2ToInf?chunk(20)?take(5)?toArray(),
     "================",
     "$gen2ToInf?take(100)?chunk(20)?moveNext()?getCurrent()",
      $gen2ToInf?take(100)?chunk(20)?moveNext()?getCurrent(),
     "$gen2ToInf?take(100)?chunk(20)?moveNext()?moveNext()?getCurrent()", 
      $gen2ToInf?take(100)?chunk(20)?moveNext()?moveNext()?getCurrent(),
     "$gen2ToInf?take(100)?chunk(20)?skip(1)?getCurrent()",      
      $gen2ToInf?take(100)?chunk(20)?skip(1)?getCurrent(),
     "================",      
     "$gen2ToInf?take(100)?chunk(20)?for-each(fn($genX){$genX})?toArray()",      
      $gen2ToInf?take(100)?chunk(20)?for-each(fn($genX){$genX})?toArray(),
     "================",  
     "$gen2ToInf?take(10)?chunk(4)?toArray()",
      $gen2ToInf?take(10)?chunk(4)?toArray(),
      "$gen2ToInf?take(10)?chunk(4)?for-each(fn($arr){array:size($arr)})?toArray()",
      $gen2ToInf?take(10)?chunk(4)?for-each(fn($arr){array:size($arr)})?toArray(),
     "================", 
     "$gen2ToInf?subrange(10, 15)?concat($gen2ToInf?subrange(1, 9))?toArray()",
     $gen2ToInf?subrange(10, 15)?concat($gen2ToInf?subrange(1, 9))?toArray(),
     "================", 
     "$gen2ToInf?subrange(1, 5)?append(101)?toArray()",
     $gen2ToInf?subrange(1, 5)?append(101)?toArray(),
     "$gen2ToInf?subrange(1, 5)?prepend(101)?toArray()",
     $gen2ToInf?subrange(1, 5)?prepend(101)?toArray(),
     "==&amp;gt;  $gen2ToInf?append(101)",
     $gen2ToInf?append(101),
     "$gen2ToInf?prepend(101)?take(5)?toArray()",
     $gen2ToInf?prepend(101)?take(5)?toArray(),
     "================", 
     "$gen2ToInf?subrange(1, 5)?zip($gen2ToInf?subrange(6, 10))?toArray()",
     $gen2ToInf?subrange(1, 5)?zip($gen2ToInf?subrange(6, 10))?toArray(),
     "$gen2ToInf?subrange(1, 5)?zip($gen2ToInf?subrange(10, 20))?toArray()",
     $gen2ToInf?subrange(1, 5)?zip($gen2ToInf?subrange(10, 20))?toArray(),
     "==&amp;gt;  $gen2ToInf?zip($gen2ToInf?skip(5))?take(10)?toArray()",
     $gen2ToInf?zip($gen2ToInf?skip(5))?take(10)?toArray(),
     "================", 
     "$gen2ToInf?makeGenerator(fn($numGenerated as xs:integer)
                                 {if($numGenerated le 9) then fn() {$numGenerated + 1} else -1} 
                             )?toArray()",
     $gen2ToInf?makeGenerator(fn($numGenerated as xs:integer)
                                 {if($numGenerated le 9) then fn() {$numGenerated + 1} else -1} 
                             )?toArray(),
     "================", 
     "$gen2ToInf?makeGeneratorFromArray([1, 4, 9, 16, 25])?toArray()",
      $gen2ToInf?makeGeneratorFromArray([1, 4, 9, 16, 25])?toArray(),
      "$gen2ToInf?makeGeneratorFromSequence((1, 8, 27, 64, 125))?toArray()",
      $gen2ToInf?makeGeneratorFromSequence((1, 8, 27, 64, 125))?toArray(), 
     "================", 
     "$gen2ToInf?take(10)?insertAt(3, ""XYZ"")?toArray()",
      $gen2ToInf?take(10)?insertAt(3, "XYZ")?toArray(),
      "$gen2ToInf?take(10)?insertAt(1, ""ABC"")?toArray()",
      $gen2ToInf?take(10)?insertAt(1, "ABC")?toArray(),
      "$gen2ToInf?take(10)?insertAt(11, ""PQR"")?toArray()",
      $gen2ToInf?take(10)?insertAt(11, "PQR")?toArray(),
      "==&amp;gt;  $gen2ToInf?insertAt(3, ""XYZ"")?take(10)?toArray()", 
      $gen2ToInf?insertAt(3, "XYZ")?take(10)?toArray(),
     (: , $gen2ToInf?take(10)?insertAt(12, "GHI")?toArray() :)  (:  Must raise error "Input Generator too-short." :) 
     "================", 
     "$gen2ToInf?take(10)?removeAt(3)?toArray()",
      $gen2ToInf?take(10)?removeAt(3)?toArray(),
      "$gen2ToInf?take(10)?removeAt(1)?toArray()",
      $gen2ToInf?take(10)?removeAt(1)?toArray(),
      "$gen2ToInf?take(10)?removeAt(10)?toArray()",
      $gen2ToInf?take(10)?removeAt(10)?toArray(),
      "==&amp;gt;  $gen2ToInf?removeAt(3)?take(10)?toArray()",
      $gen2ToInf?removeAt(3)?take(10)?toArray(),
      (: , $gen2ToInf?take(10)?removeAt(11)?toArray() :)        (:  Must raise error "Input Generator too-short." :) 
     "================",
     "$gen2ToInf?take(10)?replace(fn($x){$x gt 4}, ""Replacement"")?toArray()",
      $gen2ToInf?take(10)?replace(fn($x){$x gt 4}, "Replacement")?toArray(),
      "$gen2ToInf?take(10)?replace(fn($x){$x lt 3}, ""Replacement"")?toArray()",
      $gen2ToInf?take(10)?replace(fn($x){$x lt 3}, "Replacement")?toArray(),
      "$gen2ToInf?take(10)?replace(fn($x){$x gt 10}, ""Replacement"")?toArray()",
      $gen2ToInf?take(10)?replace(fn($x){$x gt 10}, "Replacement")?toArray(),
      "$gen2ToInf?take(10)?replace(fn($x){$x gt 11}, ""Replacement"")?toArray()",
      $gen2ToInf?take(10)?replace(fn($x){$x gt 11}, "Replacement")?toArray(),
      "$gen2ToInf?take(10)?replace(fn($x){$x lt 2}, ""Replacement"")?toArray()",
      $gen2ToInf?take(10)?replace(fn($x){$x lt 2}, "Replacement")?toArray(),
      "==&amp;gt; $gen2ToInf?replace(fn($x){$x gt 4}, ""Replacement"")?take(10)?toArray()",
      $gen2ToInf?replace(fn($x){$x gt 4}, "Replacement")?take(10)?toArray(),
      "$gen2ToInf?replace(fn($x){$x lt 3}, ""Replacement"")?take(10)?toArray()",
      $gen2ToInf?replace(fn($x){$x lt 3}, "Replacement")?take(10)?toArray(),
    (:  
      Will result in endless loop:
      
      , "==&amp;gt;  ==&amp;gt;  ==&amp;gt;  $gen2ToInf?replace(fn($x){$x lt 2}, ""Replacement"")?take(10)?toArray() &amp;lt;==  &amp;lt;==  &amp;lt;==",
      $gen2ToInf?replace2(fn($x){$x lt 2}, "Replacement")?take(10)?toArray() 
    :)
    "================",
    "$gen2ToInf?emptyGenerator()?reverse()?toArray()",
    $gen2ToInf?emptyGenerator()?reverse()?toArray(),
    "$gen2ToInf?emptyGenerator()?append(2)?reverse()?toArray()",
    $gen2ToInf?emptyGenerator()?append(2)?reverse()?toArray(),
    "$gen2ToInf?take(10)?reverse()?toArray()",
    $gen2ToInf?take(10)?reverse()?toArray(),
    "================",
    "$gen2ToInf?take(5)?fold-left(0, fn($x, $y){$x + $y})",
    $gen2ToInf?take(5)?fold-left(0, fn($x, $y){$x + $y}),
    "================",
    "$gen2ToInf?take(5)?fold-right(0, fn($x, $y){$x + $y})",
    $gen2ToInf?take(5)?fold-right(0, fn($x, $y){$x + $y}),
    "================",
    "$gen2ToInf?emptyGenerator()?scan-left(0, fn($x, $y){$x + $y})?toArray()",
    $gen2ToInf?emptyGenerator()?scan-left(0, fn($x, $y){$x + $y})?toArray(),
    "$gen2ToInf?take(5)?scan-left(0, fn($x, $y){$x + $y})?toArray()",
    $gen2ToInf?take(5)?scan-left(0, fn($x, $y){$x + $y})?toArray(),
    "================",
    "$gen2ToInf?makeGeneratorFromSequence((1 to 10))?scan-right(0, fn($x, $y){$x + $y})?toArray()",
    $gen2ToInf?makeGeneratorFromSequence((1 to 10))?scan-right(0, fn($x, $y){$x + $y})?toArray(),
    "================",
    let $multShortCircuitProvider := fn($x, $y)
        {
          if($x eq 0) then fn(){0}
            else fn($z) {$x * $z}
        },
        $gen-5ToInf := $gen2ToInf?for-each(fn($n){$n -7})
     return
     (
       "let $multShortCircuitProvider := fn($x, $y)
        {
          if($x eq 0) then fn(){0}
            else fn($z) {$x * $z}
        },
            $gen-5ToInf := $gen2ToInf?for-each(fn($n){$n -7})
          return
            $gen2ToInf?take(5)?fold-lazy(1, $product, $multShortCircuitProvider),
            $gen-5ToInf?fold-lazy(1, $product, $multShortCircuitProvider)",
       $gen2ToInf?take(5)?fold-lazy(1, $product, $multShortCircuitProvider),
       $gen-5ToInf?fold-lazy(1, $product, $multShortCircuitProvider)
     )
   )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1954 closed</title>
   <pubDate>Tue, 29 Apr 2025 20:43:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1954</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1954</guid>
   <description>&lt;div&gt;&lt;p&gt;Private fields in records&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1964 created</title>
   <pubDate>Tue, 29 Apr 2025 20:39:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1964</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1964</guid>
   <description>&lt;div&gt;&lt;p&gt;1957 xsl output allows mixed content&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Change to schema-for-xslt40&lt;/p&gt;
&lt;p&gt;Fix #1957 (xsl:output disallow mixed content)&lt;/p&gt;
&lt;p&gt;Add support for xsl:import-schema/@role&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 119 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 29 Apr 2025 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/04-29</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—04-29</guid>
</item><item>
   <title>Issue #1961 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:20:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1961</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1961</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to show that xsl:record allows extra attributes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1956 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:17:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1956</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1956</guid>
   <description>&lt;div&gt;&lt;p&gt;1954 (part) Private variables and functions don't need to be in the module namespace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1271 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:15:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1271</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1271</guid>
   <description>&lt;div&gt;&lt;p&gt;Schema validation in XPath&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1933 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:15:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1933</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1933</guid>
   <description>&lt;div&gt;&lt;p&gt;1271 fn:xsd-validator() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #557 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:12:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/557</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-557</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:unparsed-binary: accessing and manipulating binary types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1587 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:12:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1587</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1587</guid>
   <description>&lt;div&gt;&lt;p&gt;557 Add fn:unparsed-binary function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1319 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:10:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1319</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1319</guid>
   <description>&lt;div&gt;&lt;p&gt;Specification Documents: Editors and Contributors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1416 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:10:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1416</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1416</guid>
   <description>&lt;div&gt;&lt;p&gt;Key-value pairs: built-in record type `pair`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1844 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:10:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1844</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1844</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop mapping arrow operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1704 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:09:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1704</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1704</guid>
   <description>&lt;div&gt;&lt;p&gt;Ignore the byte order mark more completely/globally&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1950 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:09:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1950</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1950</guid>
   <description>&lt;div&gt;&lt;p&gt;1704 Add rules/notes for BOM and related topics&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1906 closed</title>
   <pubDate>Tue, 29 Apr 2025 16:05:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1906</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1906</guid>
   <description>&lt;div&gt;&lt;p&gt;1797 elements-to-maps-conversion-plan function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1963 created</title>
   <pubDate>Tue, 29 Apr 2025 14:10:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1963</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1963</guid>
   <description>&lt;div&gt;&lt;p&gt;1958 Fix simple typo in map:build&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1958&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1962 created</title>
   <pubDate>Sat, 26 Apr 2025 11:05:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1962</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1962</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:map-to-element&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As this feature request has been reported back to us more than once, I want to raise the question here if we want to introduce a function that inverts the result of &lt;code&gt;fn:map-to-element&lt;/code&gt; back to an XML representation – provided that a conversion plan exists.&lt;/p&gt;
&lt;p&gt;Many results would certainly be lossy, but as the plan is now available separately, it would be possible to roundtrip a lot of data with regular structures, without having to write custom conversion code.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1961 created</title>
   <pubDate>Fri, 25 Apr 2025 11:26:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1961</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1961</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to show that xsl:record allows extra attributes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;By the simple expedient of adding&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;e:attribute name="*" required="yes"&amp;gt;
   &amp;lt;e:data-type name="expression"/&amp;gt;
&amp;lt;/e:attribute&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to the syntax summary we get&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/0eaab6d7-9b0e-4b67-92e2-fd3cd6d6ce9e" alt="Screenshot 2025-04-25 at 12-25-57 XSL Transformations (XSLT) Version 4 0"/&gt;&lt;/p&gt;
&lt;p&gt;With some additional prose, would that be sufficient?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1960 closed</title>
   <pubDate>Fri, 25 Apr 2025 08:59:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1960</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1960</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to improve rendering of the dynamic ToC&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1960 created</title>
   <pubDate>Fri, 25 Apr 2025 08:58:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1960</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1960</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to improve rendering of the dynamic ToC&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is an attempt to complete action QT4CG-116-03.&lt;/p&gt;
&lt;p&gt;Part of the confusion in the rendering is that it’s partly done by CSS and partly done by JavaScript and those had gotten out of sync. Given that the JavaScript code has to do some of the work, I changed things so it does all of the work.&lt;/p&gt;
&lt;p&gt;I also discovered that the weird Firefox bug where the font size changed was, wait for it, caused by the particular codepoint being used for “changed”. So I, uh, changed it.&lt;/p&gt;
&lt;p&gt;We now get ✚ for new sections, ✭ for changed sections, and both when there are both new and changed sections. I spent a bit of time trying to find a third symbol, but gave up.&lt;/p&gt;
&lt;p&gt;The markup in the XSLT specification isn’t quite the same as in other specifications, so the results are a tiny bit odd in places. There are some sections that get marked “both” in the ToC but when you expand the ToC, there’s only one mark. I haven’t tried to work out what’s going on there yet.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1959 created</title>
   <pubDate>Thu, 24 Apr 2025 15:49:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1959</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1959</guid>
   <description>&lt;div&gt;&lt;p&gt;1953 (part) XSLT Worked example using methods to implement atomic sets&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Provides an XSLT package that uses named record types and methods to implement an atomic set data type, as an example of how abstract data types can now be implemented.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1958 created</title>
   <pubDate>Thu, 24 Apr 2025 14:41:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1958</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1958</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo in map:build&lt;/p&gt;&lt;div class="markup"&gt;&lt;blockquote&gt;
&lt;p&gt;If the key is already present, the processor combines the new value
for the key with the existing value as determined by &lt;strong&gt;the and duplicates&lt;/strong&gt; option.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1957 created</title>
   <pubDate>Thu, 24 Apr 2025 11:58:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1957</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1957</guid>
   <description>&lt;div&gt;&lt;p&gt;Schema for XSLT incorrectly allows mixed content for xsl:output&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The declaration (line 1412) says mixed="true".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1956 created</title>
   <pubDate>Thu, 24 Apr 2025 11:34:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1956</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1956</guid>
   <description>&lt;div&gt;&lt;p&gt;1954 (part) Private variables and functions don't need to be in the module namespace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See issue #1954&lt;/p&gt;
&lt;p&gt;The PR removes the requirement for private variables and functions declared in library modules to be in the module namespace. There has never been any sensible reason for this restriction.&lt;/p&gt;
&lt;p&gt;The restriction is retained for public variables and functions; one could argue that it is unnecessary in that case also, but it does no harm and enforces good coding discipline.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1955 created</title>
   <pubDate>Thu, 24 Apr 2025 09:58:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1955</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1955</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:doc, fn:parse-xml: entity expansion&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current rule for the &lt;code&gt;entity-expansion-limit&lt;/code&gt; option is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The processor should impose a limit on the number of entity references that are expanded, or on the size of the expanded entities, depending on the options available in the underlying XML parser; the limit should be commensurate with the value requested, but the precise effect may be . &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#implementation-dependent"&gt;implementation-dependent&lt;/a&gt;. If the XML parser does not offer the ability to impose a limit, or if the value is zero, then entity expansion should if possible be disabled entirely, leading to a dynamic error if the input contains any entity references. A negative value should be interpreted as placing no limits on entity expansion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By default, Java uses 64000 as limit. An explicit value less than or equal to 0 indicates no limit (https://docs.oracle.com/javase/tutorial/jaxp/limits/limits.html, https://docs.oracle.com/en/java/javase/17/docs/api/java.xml/module-summary.html). I don’t know about other languages.&lt;/p&gt;
&lt;p&gt;I would like to…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;change the option to an &lt;code&gt;expand-entities&lt;/code&gt; Boolean, or&lt;/li&gt;
&lt;li&gt;change the rules and make &lt;code&gt;0&lt;/code&gt; disable the limit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Any favorites?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1954 created</title>
   <pubDate>Thu, 24 Apr 2025 09:39:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1954</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1954</guid>
   <description>&lt;div&gt;&lt;p&gt;Private fields in records&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It would be nice to have some way of indicating that some of the fields in a record are (in some sense) private, intended for internal use.&lt;/p&gt;
&lt;p&gt;I'm not proposing full encapsulation - the instances of a record type are maps, and can be manipulated by functions such as map:keys(), map:get(), and map:put() which expose all the keys.&lt;/p&gt;
&lt;p&gt;Rather I'm proposing a convention that makes it difficult to access the fields "accidentally" using lookup expressions: a bit like naming the fields using a leading underscore, but something a bit stronger. Analogous to reflection in Java, which allows you to break encapsulation with a bit of effort.&lt;/p&gt;
&lt;p&gt;I'd suggest making the keys for these "private" fields QNames rather than strings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the record declaration, we allow a field name to be a QName rather than a string: record(private:data as item()*, long, lat).&lt;/li&gt;
&lt;li&gt;QNames can't be used directly in a lookup; to access the field, you need to know what namespace "private" is bound to, which doesn't need to be published information (though it is of course discoverable)&lt;/li&gt;
&lt;li&gt;Internally the implementor of this interface can bind a QName to a private variable and use this:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;declare %private variable $private:data as xs:QName('http://my.private.namespace/', 'data')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and then access it using &lt;code&gt;$record?$private:data&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1953 created</title>
   <pubDate>Thu, 24 Apr 2025 09:19:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1953</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1953</guid>
   <description>&lt;div&gt;&lt;p&gt;Make generation of constructor function for named record types optional&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that when a named record type is declared in XQuery or XSLT, the generation of a constructor function should be optional.&lt;/p&gt;
&lt;p&gt;Perhaps in XQuery it should only happen if there is an annotation &lt;code&gt;%constructor&lt;/code&gt;, and in XSLT if there is an attribute &lt;code&gt;constructor="yes"&lt;/code&gt;. I think it's better for the default to be "no constructor" because it's better to make the existence of a constructor explicitly visible.&lt;/p&gt;
&lt;p&gt;There are cases where you don't want a system-generated constructor primarily because you want to provide your own constructor which perhaps accepts the data in a slightly different form, or perhaps imposes constraints like cross-validation of supplied arguments.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1952 created</title>
   <pubDate>Wed, 23 Apr 2025 21:47:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1952</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1952</guid>
   <description>&lt;div&gt;&lt;p&gt;Change option name from xsi-schema-location to use-xsi-schema-location&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Functions (such as fn:doc and fn:parse-xml) that have a boolean option &lt;code&gt;xsi-schema-location&lt;/code&gt; should change this to &lt;code&gt;use-xsi-schema-location&lt;/code&gt; to make it clearer that the expected value is a boolean and not a schema location.&lt;/p&gt;
&lt;p&gt;(Comment made in passing at the last meeting).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1951 created</title>
   <pubDate>Wed, 23 Apr 2025 15:54:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1951</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1951</guid>
   <description>&lt;div&gt;&lt;p&gt;Some nits regarding the method attribute&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A few minor comments on the method attribute (that also apply to XSLT 3.0):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A note in section 25.1 says "In the case of the attributes &lt;strong&gt;method&lt;/strong&gt;, cdata-section-elements, suppress-indentation, and use-character-maps, the effective value of the attribute contains a space-separated &lt;strong&gt;list&lt;/strong&gt; of EQNames."  The effective value of the method attribute should not be a list of values, just one value, right?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The XSD schema requires that the method attribute contain a colon if it is not one of the 6 "built-in" values.  (The type xsl:method restricts xsl:EQName with the pattern "\c*:\c*").  Now that it can be an expanded QName,  it should also allow for Q{...}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A note in section 3.2 says:  "Extension attributes may also be used to influence the behavior of the serialization methods &lt;strong&gt;xml, xhtml, html, or text&lt;/strong&gt;, to the extent that... If a serialization method other than one of these &lt;strong&gt;four&lt;/strong&gt; is requested (&lt;strong&gt;using a prefixed QName&lt;/strong&gt; in the method parameter) then...".&lt;br/&gt;
a. This lists only 4 methods, Should "json" and "adaptive" be added to the list and "four" changed to "six"?
b. Should "using a prefixed QName" be changed to something like "using an EQName with a non-absent namespace"?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the note about error XTSE1570 in Section 26.2.  "The value must (if present) be a valid EQName. If it is a lexical QName with no a prefix, then it identifies a method specified in [XSLT and XQuery Serialization] and must be one of &lt;strong&gt;xml, html, xhtml, or text&lt;/strong&gt;.
a. It only lists the 4 methods, leaving out "json" and "adaptive"
b. Typo - "no a prefix" should be "no prefix"&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1950 created</title>
   <pubDate>Wed, 23 Apr 2025 15:52:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1950</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1950</guid>
   <description>&lt;div&gt;&lt;p&gt;1704 Add rules/notes for BOM and related topics&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1704&lt;/p&gt;
&lt;p&gt;The main substantive change is that unparsed-text() now explicitly discards any leading BOM.&lt;/p&gt;
&lt;p&gt;Other functions that involve decoding of octets to strings are updated to reflect the changes that we made to reference the concept of "permitted characters".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1644 closed</title>
   <pubDate>Wed, 23 Apr 2025 15:29:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1644</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1644</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Mixed Content&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1658 closed</title>
   <pubDate>Wed, 23 Apr 2025 15:28:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1658</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1658</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: `empty`, normalize space ?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1647 closed</title>
   <pubDate>Wed, 23 Apr 2025 15:28:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1647</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1647</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Explicit Layouts&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1949 created</title>
   <pubDate>Wed, 23 Apr 2025 15:26:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1949</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1949</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:element-to-map: Updated Feedback&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;My feedback is based on the latest version PR (#1906):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Boolean types&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think we should be careful about changing data to a representation that differs from the input data. If the input contains &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, it seems too invasive to me to return a boolean. Many users will not be aware that those numbers are valid candidates for Boolean conversions in XPath. That’s why I would still pledge for adapting the type rule detections, and placing &lt;code&gt;numeric&lt;/code&gt; before &lt;code&gt;boolean&lt;/code&gt; (related: 5).&lt;/p&gt;
&lt;p&gt;Things are even more awkward (if I got the rules right) when working without a conversion plan:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: Query :)
element-to-map(&amp;lt;x&amp;gt;&amp;lt;a&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;a&amp;gt;2&amp;lt;/a&amp;gt;&amp;lt;/x&amp;gt;)

(: Result :)
{ "x": [ true(), 2 ] }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Explicit types&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I still feel uneasy that we ignore the specified type if it does not match – even more because XML is known for its rigor that documents must be well-formed to be accepted. I agree we should allow users to be lax about their generated output – by deliberately omitting types – but if type hints are supplied, I think we should take them serious.&lt;/p&gt;
&lt;p&gt;An example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;element-to-map(
  &amp;lt;a&amp;gt;2&amp;lt;/a&amp;gt;,
  { 'plan': { 'a': { 'layout': 'simple', 'type': 'boolean' } } }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. Numeric casts&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the prescribed type is &lt;code&gt;numeric&lt;/code&gt; and the value is castable as &lt;code&gt;xs:numeric&lt;/code&gt;, then it is output as an instance of &lt;code&gt;xs:integer&lt;/code&gt;, &lt;code&gt;xs:decimal&lt;/code&gt;, or &lt;code&gt;xs:double&lt;/code&gt; depending on the lexical form of the value, following the same rules as for XPath numeric literals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unless we use the same rule somewhere else in the spec, I would definitely vote for making things easier and choose consistency. &lt;code&gt;xs:numeric(&amp;lt;a&amp;gt;1&amp;lt;/a&amp;gt;)&lt;/code&gt; returns a double value, so I think we should do exactly the same here. If the result will be serialized as JSON, everything will be a number anyway.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Normalized space&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start="2"&gt;
&lt;li&gt;If &lt;code&gt;empty($EE/(* | text())&lt;/code&gt; …the layout is &lt;code&gt;empty&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I still believe &lt;code&gt;empty($EE/(* | text()[normalize-space()])&lt;/code&gt; would be a better choice. The error sections for both &lt;code&gt;empty&lt;/code&gt; and &lt;code&gt;list&lt;/code&gt; state that “whitespace-only text nodes are discarded.”, so it is not clear to me why the rules for whitespace text nodes differ for these layouts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 18.5.2 Creating a conversion plan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The current rules do not mention yet that &lt;code&gt;child&lt;/code&gt; keys need to be added for &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;list-plus&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In general, I would appreciate if redundancy could be removed. I’m still struggling finding all relevant information without resorting to the tests. For example, I think that due to the new XQuery code, a lot of informal and possibly lossy rules can be dropped.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Function signatures: &lt;code&gt;document-node()&lt;/code&gt;, &lt;code&gt;element()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Both functions should accept only elements, or accept both document nodes and elements. Maybe it’s better to only accept elements; it would resemble the name of the function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. &lt;code&gt;deep-skip&lt;/code&gt; option&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wouldn’t be able to tell how a &lt;code&gt;shallow-skip&lt;/code&gt; option could work, so maybe &lt;code&gt;skip&lt;/code&gt; is sufficient?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. Streamability&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The conversion is not streamable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is not clear (to me) what this means. Is this XSLT-related? Maybe a reference would be helpful, or we should drop the phrase if it’s not relevant anymore?&lt;/p&gt;
&lt;p&gt;My observation was that &lt;code&gt;fn:element-to-map&lt;/code&gt; can be implemented without keeping the full document in main-memory, so maybe we should let the processors decide what to do?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9. JSON&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example output: …shown as serialized JSON. The result is always shown as a singleton map…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This sounds contradictory, as there are no maps in the JSON terminology (but objects). Maybe there is no need to mention the JSON serialization, as the presented results are maps &amp;amp; arrays that can be run as XPath expressions out of the box.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10. Layout rules: errors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The error rules for &lt;code&gt;empty&lt;/code&gt; and &lt;code&gt;empty-plus&lt;/code&gt; say: “If any other child nodes are present, this layout fails.”. For the &lt;code&gt;simple&lt;/code&gt; and &lt;code&gt;simple-plus&lt;/code&gt; layouts, it is “If any child elements are present, this layout fails.”.&lt;/p&gt;
&lt;p&gt;Am I right to assume that in both cases it’s only child element that result in a failure?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1948 created</title>
   <pubDate>Wed, 23 Apr 2025 14:43:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1948</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1948</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:element-to-map: Tests&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;My feedback is based on the latest version PR (#1906) and the latest test cases (https://github.com/qt4cg/qt4tests/pull/223). I decided to list my observations in this repository, as I am not sure whether it’s the tests or the spec that may possibly need to be revised:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;element-to-map-017&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As discussed in the last meeting (see also https://github.com/qt4cg/qtspecs/pull/1906#issuecomment-2821502378), the &lt;code&gt;xsi:type&lt;/code&gt; attribute should already be ignored in the choice of the conversion plan, in order to choose a plan that does not include attributes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;element-to-map(parse-xml('&amp;lt;a xmlns="http://a.com/" xsi:type="xs:integer"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"&amp;gt;2&amp;lt;/a&amp;gt;')/*)
Result: { "Q{http://a.com/}a": 2 }
Expect: { "Q{http://a.com/}a": { "#content": "2" } }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;code&gt;element-to-map-401&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would expect the &lt;code&gt;record&lt;/code&gt; layout to be also applied for the &lt;code&gt;b&lt;/code&gt; child node:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;element-to-map(parse-xml('&amp;lt;a id="3"&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;/a&amp;gt;')/a, {'plan': {'a': {'layout': 'empty'},
  '*': {'layout': 'record'}, '@id': {'type': 'numeric'} }})
Result: { "a": { "@id": 3, "b": { } } }
Expect: { "a": { "@id": 3, "b": "" } }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;code&gt;element-to-map-420&lt;/code&gt; and others:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As discussed in the meeting, &lt;code&gt;list&lt;/code&gt; layouts require a &lt;code&gt;child&lt;/code&gt; key:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;element-to-map(parse-xml('&amp;lt;a id="zz"&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;c/&amp;gt;&amp;lt;/a&amp;gt;')/a, {'plan':{'a':{'layout':'list'}}})
Error : XPTY0004: Missing key 'child' (node: a).
Expect: FOJS0008
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;code&gt;element-to-map-511&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would expect the &lt;code&gt;mixed&lt;/code&gt; layout to be also applied for the &lt;code&gt;a&lt;/code&gt; child node:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;element-to-map(parse-xml('&amp;lt;a&amp;gt;The &amp;lt;i&amp;gt;short&amp;lt;/i&amp;gt; introduction&amp;lt;/a&amp;gt;')/a, {'plan': {'a': {'layout':'simple'}, '*': {'layout':'mixed'} }})
Result: { "a": [ "The ", { "i": [ "short" ] }, " introduction" ] }
Expect: { "a": array { ("The ", { "i": "short" }, " introduction") } }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1936 closed</title>
   <pubDate>Tue, 22 Apr 2025 20:19:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1936</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1936</guid>
   <description>&lt;div&gt;&lt;p&gt;XSD for XSLT 4.0 is missing form="qualified" on several attributes within the attribute group "literal-result-element-attributes"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1943 closed</title>
   <pubDate>Tue, 22 Apr 2025 20:16:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1943</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1943</guid>
   <description>&lt;div&gt;&lt;p&gt;Mark attribute declarations as form=qualified&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1947 closed</title>
   <pubDate>Tue, 22 Apr 2025 20:16:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1947</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1947</guid>
   <description>&lt;div&gt;&lt;p&gt;1936 Mark attributes with form=qualified&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1947 created</title>
   <pubDate>Tue, 22 Apr 2025 20:16:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1947</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1947</guid>
   <description>&lt;div&gt;&lt;p&gt;1936 Mark attributes with form=qualified&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1936&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1946 created</title>
   <pubDate>Tue, 22 Apr 2025 16:27:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1946</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1946</guid>
   <description>&lt;div&gt;&lt;p&gt;We need examples of a record with an entry that is a %method and invoking this method with the result it must produce&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have two new great features in XPath 4.0 - the &lt;strong&gt;record&lt;/strong&gt; and &lt;strong&gt;%method&lt;/strong&gt; entries of a map.&lt;/p&gt;
&lt;p&gt;It is natural to combine the two and have a record, one of whose entries is a method.&lt;/p&gt;
&lt;p&gt;Unfortunately, at present there is no such example in the relevant Specs, and this leaves the reader trying to guess even the syntax of the specific record definition.&lt;/p&gt;
&lt;p&gt;Therefore, we need at least one such example, to help readers and implementors in this.&lt;/p&gt;
&lt;p&gt;BaseX did a great job in implementing both records and  %method map-entries, and I constructed the following example, which is syntactically correct, but results in error (due to function coercion - explained in a separate issue here: https://github.com/qt4cg/qtspecs/issues/1938).&lt;/p&gt;
&lt;p&gt;This code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;declare namespace t = "my:t";
declare record t:location 
   ( longitude as xs:integer,
     latitude as xs:integer,
     myFun2 as %method fn() as xs:integer,
     *
   );
   
   let $r := t:location(longitude := 25, latitude := 10, myFun2 := %method fn() {?longitude + ?latitude}
                        )
     return ($r, $r?myFun2())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When executed with BaseX, raises an error: &lt;strong&gt;&lt;em&gt;[XPDY0002] .: Context value is undefined.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We need the specification to provide a similar example, and what the result should be.&lt;/p&gt;
&lt;p&gt;In particular:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Must the return type of the method myFun2 (above) be specified or can it be omitted? BaseX raises a syntax error if this is specified as: &lt;code&gt;myFun2 as %method fn()&lt;/code&gt; : "&lt;strong&gt;&lt;em&gt;Expecting 'as', found ','&lt;/em&gt;&lt;/strong&gt; ?&lt;/li&gt;
&lt;li&gt;If the method entry is specified as having a particular type (such as: &lt;code&gt;as xs:integer&lt;/code&gt;) then can the corresponding function, provided in the construction of this record omit the function type (such as &lt;code&gt;myFun2 := %method fn() {?longitude + ?latitude}&lt;/code&gt;) , even though it is clear that the type of the result is &lt;code&gt;xs:integer&lt;/code&gt; ?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1941 closed</title>
   <pubDate>Tue, 22 Apr 2025 16:13:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1941</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1941</guid>
   <description>&lt;div&gt;&lt;p&gt;Add PR numbers and dates to change metadata&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1921 closed</title>
   <pubDate>Tue, 22 Apr 2025 16:10:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1921</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1921</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: semantics of PatternVersionRange&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1922 closed</title>
   <pubDate>Tue, 22 Apr 2025 16:10:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1922</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1922</guid>
   <description>&lt;div&gt;&lt;p&gt;1921 Expand definition of version ranges in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1907 closed</title>
   <pubDate>Tue, 22 Apr 2025 16:07:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1907</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1907</guid>
   <description>&lt;div&gt;&lt;p&gt;Method lookup: wildcards&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1926 closed</title>
   <pubDate>Tue, 22 Apr 2025 16:07:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1926</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1926</guid>
   <description>&lt;div&gt;&lt;p&gt;1907 method lookup (disallow wildcard selection)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1928 closed</title>
   <pubDate>Tue, 22 Apr 2025 16:04:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1928</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1928</guid>
   <description>&lt;div&gt;&lt;p&gt;1844b Arrow Expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1724 closed</title>
   <pubDate>Tue, 22 Apr 2025 16:03:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1724</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1724</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow @copy-namespaces on &amp;lt;xsl:mode&amp;gt;?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1929 closed</title>
   <pubDate>Tue, 22 Apr 2025 16:03:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1929</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1929</guid>
   <description>&lt;div&gt;&lt;p&gt;1725 xsl:mode/@copy-namespaces&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1939 closed</title>
   <pubDate>Tue, 22 Apr 2025 16:01:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1939</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1939</guid>
   <description>&lt;div&gt;&lt;p&gt;XQDY0153 (from try/finally) should be a type error&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1940 closed</title>
   <pubDate>Tue, 22 Apr 2025 16:01:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1940</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1940</guid>
   <description>&lt;div&gt;&lt;p&gt;1939 XQDY0153 (from try/finally) should be a type error&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1931 closed</title>
   <pubDate>Tue, 22 Apr 2025 15:58:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1931</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1931</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4-CG-116-02 improve description of validation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #910 closed</title>
   <pubDate>Tue, 22 Apr 2025 15:57:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/910</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-910</guid>
   <description>&lt;div&gt;&lt;p&gt;Introduce a Kollection object with functions that operate on all types of items that can be containers of unlimited number of "members"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1945 created</title>
   <pubDate>Tue, 22 Apr 2025 14:46:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1945</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1945</guid>
   <description>&lt;div&gt;&lt;p&gt;1568 unicode case blind collation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1568&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1944 created</title>
   <pubDate>Tue, 22 Apr 2025 09:14:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1944</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1944</guid>
   <description>&lt;div&gt;&lt;p&gt;Try/Catch/Finally - order of evaluation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm struggling a bit with try/catch/finally. Is there an implied constraint on the order of evaluation? The spec appears to suggest so:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;its expression will be evaluated after the expressions of the try clause and a possibly evaluated catch clause.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What does &lt;strong&gt;evaluated after&lt;/strong&gt; actually mean in a functional language? I can't see how to reconcile this with the general principles of the language regarding lazy evaluation etc. Is there some kind of exception to the general rule that you only have to evaluate as much of an expression as is needed to work out what the result is going to be?&lt;/p&gt;
&lt;p&gt;It seems to me that the hidden unstated purpose of "finally" is to execute expressions that have side-effects, and without a proper semantic framework for handling side-effects, this is going to get us into trouble.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1943 created</title>
   <pubDate>Mon, 21 Apr 2025 21:18:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1943</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1943</guid>
   <description>&lt;div&gt;&lt;p&gt;Mark attribute declarations as form=qualified&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Resubmitted because of some clerical error...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1937 closed</title>
   <pubDate>Mon, 21 Apr 2025 21:15:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1937</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1937</guid>
   <description>&lt;div&gt;&lt;p&gt;1936 Mark attribute declarations as form=qualified&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1942 created</title>
   <pubDate>Mon, 21 Apr 2025 19:54:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1942</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1942</guid>
   <description>&lt;div&gt;&lt;p&gt;37 Support sequence, array, and map destructuring declarations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #37.&lt;/p&gt;
&lt;p&gt;This currently only supports XPath. I'm working on the wording for XQuery.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1941 created</title>
   <pubDate>Mon, 21 Apr 2025 16:23:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1941</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1941</guid>
   <description>&lt;div&gt;&lt;p&gt;Add PR numbers and dates to change metadata&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Purely editorial. No issue raised.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1940 created</title>
   <pubDate>Mon, 21 Apr 2025 10:33:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1940</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1940</guid>
   <description>&lt;div&gt;&lt;p&gt;1939 XQDY0153 (from try/finally) should be a type error&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1939&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1939 created</title>
   <pubDate>Sun, 20 Apr 2025 11:58:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1939</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1939</guid>
   <description>&lt;div&gt;&lt;p&gt;XQDY0153 (from try/finally) should be a type error&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;finally&lt;/code&gt; clause is required to return an empty sequence. If not, it raises XQDY0153. This should be a type error rather than a dynamic error, so that it can be raised statically when appropriate.&lt;/p&gt;
&lt;p&gt;Also noted in passing: "the the" in item 4 of the "changes" section of §4.20).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1938 created</title>
   <pubDate>Fri, 18 Apr 2025 20:36:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1938</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1938</guid>
   <description>&lt;div&gt;&lt;p&gt;Invoking coerced methods&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@ChristianGruen, in BaseXdb/basex#2420, brought up a test case similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare record local:r(
    f as fn() as item()
);

local:r(%method fn() {.})
? f()
=&amp;gt; map:keys()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a method passed to the constructor, and retrieved by the lookup operator, one would expect the function call to return the map, and the result to be &lt;code&gt;f&lt;/code&gt;, the set of keys of the map. With BaseX's current implementation however, it fails with &lt;code&gt;[XPDY0002] .: Context value is undefined.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The reason for this failure is function coercion. The record constructor asks for a more specific type than that of the supplied function, so it is subject to function coercion. This creates a new function item, which preserves the method annotation, and which effects a call to the original one. The lookup operator then is applied to the newly created function item, which as a method is equipped with the map as its context item. But when the original function gets called, that context item is not propagated to it. So there is a (rightful?) complaint about an undefined context.&lt;/p&gt;
&lt;p&gt;I may be missing something here, but I do not see anything in the spec that makes the context item available to the coerced function, so I think that the described behavior is in fact conformant to the spec.&lt;/p&gt;
&lt;p&gt;But as it contradicts the original expectation, I would be grateful for a clarification.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1937 created</title>
   <pubDate>Thu, 17 Apr 2025 16:32:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1937</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1937</guid>
   <description>&lt;div&gt;&lt;p&gt;1936 Mark attribute declarations as form=qualified&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1936&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1936 created</title>
   <pubDate>Wed, 16 Apr 2025 17:37:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1936</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1936</guid>
   <description>&lt;div&gt;&lt;p&gt;XSD for XSLT 4.0 is missing form="qualified" on several attributes within the attribute group "literal-result-element-attributes"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The attributes in attribute group "literal-result-element-attributes" should be in the XSL namespace, and most of them are, except for xsl:default-mode, xsl:default-validation and xsl:expand-text.  Those 3 are missing their form="qualified" attribute, so they would default to being in no namespace.&lt;/p&gt;
&lt;p&gt;I know it's non-normative but it would be good to make the correction. (This is also an issue for the XSD for XSLT 3.0).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1799 closed</title>
   <pubDate>Tue, 15 Apr 2025 23:06:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1799</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1799</guid>
   <description>&lt;div&gt;&lt;p&gt;"well-formed HTML document"?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1891 closed</title>
   <pubDate>Tue, 15 Apr 2025 23:06:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1891</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1891</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:parse-html`: `html-version`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1918 closed</title>
   <pubDate>Tue, 15 Apr 2025 23:06:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1918</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1918</guid>
   <description>&lt;div&gt;&lt;p&gt;1891 clarifications on HTML versions and errors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1363 closed</title>
   <pubDate>Tue, 15 Apr 2025 22:50:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1363</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1363</guid>
   <description>&lt;div&gt;&lt;p&gt;map:get and array:get&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1901 closed</title>
   <pubDate>Tue, 15 Apr 2025 22:50:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1901</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1901</guid>
   <description>&lt;div&gt;&lt;p&gt;1363 fallback becomes a value not a function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1896 closed</title>
   <pubDate>Tue, 15 Apr 2025 16:10:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1896</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1896</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop "parameter names" as a property of a function item&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1916 closed</title>
   <pubDate>Tue, 15 Apr 2025 16:10:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1916</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1916</guid>
   <description>&lt;div&gt;&lt;p&gt;1896 Drop parameter names as a property of function items&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1932 closed</title>
   <pubDate>Tue, 15 Apr 2025 16:07:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1932</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1932</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4-CG-115-01 xsl:next-match examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1930 closed</title>
   <pubDate>Tue, 15 Apr 2025 16:04:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1930</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1930</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4-CG-116-04 correction to fn:function-identity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1923 closed</title>
   <pubDate>Tue, 15 Apr 2025 16:02:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1923</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1923</guid>
   <description>&lt;div&gt;&lt;p&gt;Arithmetic Expressions needlessly mentions UnionExpr&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1924 closed</title>
   <pubDate>Tue, 15 Apr 2025 16:02:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1924</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1924</guid>
   <description>&lt;div&gt;&lt;p&gt;1923 Editorial adjustments for arithmetic expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #269 closed</title>
   <pubDate>Tue, 15 Apr 2025 16:01:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/269</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-269</guid>
   <description>&lt;div&gt;&lt;p&gt;Function for URI relativization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #826 closed</title>
   <pubDate>Tue, 15 Apr 2025 16:01:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/826</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-826</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays: Representation of single members of an array&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1566 closed</title>
   <pubDate>Tue, 15 Apr 2025 16:01:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1566</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1566</guid>
   <description>&lt;div&gt;&lt;p&gt;EXPath Modules: Future&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1754 closed</title>
   <pubDate>Tue, 15 Apr 2025 16:01:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1754</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1754</guid>
   <description>&lt;div&gt;&lt;p&gt;Inverse functions to bin:hex, bin:bin, and bin:octal&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1780 closed</title>
   <pubDate>Tue, 15 Apr 2025 16:01:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1780</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1780</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:for-each optional variable introduction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1905 closed</title>
   <pubDate>Tue, 15 Apr 2025 15:58:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1905</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1905</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial edits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1919 closed</title>
   <pubDate>Tue, 15 Apr 2025 15:58:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1919</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1919</guid>
   <description>&lt;div&gt;&lt;p&gt;1905 Editorial edits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1935 created</title>
   <pubDate>Tue, 15 Apr 2025 14:11:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1935</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1935</guid>
   <description>&lt;div&gt;&lt;p&gt;doc-available() with invalid options&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The doc-available function needs to make it clear what happens when invalid options are supplied.&lt;/p&gt;
&lt;p&gt;Clearly invalid options such as &lt;code&gt;xinclude="yes-or-no"&lt;/code&gt; should be an error (rather than resulting in a return value of false, as the current spec might suggest).&lt;/p&gt;
&lt;p&gt;It's less clear what should happen if say you request schema validation with a non-schema-aware processor. I think this probably calls for returning false rather than an error.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1934 created</title>
   <pubDate>Mon, 14 Apr 2025 14:26:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1934</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1934</guid>
   <description>&lt;div&gt;&lt;p&gt;Supporting RELAX NG validation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;At &lt;a href="https://qt4cg.org/meeting/minutes/2025/04-08.html"&gt;meeting 116&lt;/a&gt;, the question was raised: why don't we support RELAX NG validation?&lt;/p&gt;
&lt;p&gt;I think that's a good question. Further, I think we should, if we can work out the technical details and arrive at consensus.&lt;/p&gt;
&lt;p&gt;The good news is that it's &lt;em&gt;a lot&lt;/em&gt; simpler than XSD validation. For those not familiar with RELAX NG, the 50,000 foot summary is that it's (more-or-less) regular expressions over trees. The grammar defines a number of patterns, including at least one designated as a start pattern. If the document matches (any one of the) start pattern(s), then it's valid. A trivial example looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;start = doc

doc =
    element doc {
        attribute date { xsd:date },
        p+
    }

p =
    element p {
        text
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(RELAX NG also has an XML syntax, but the "compact syntax" is isomorphic and many people find it easier to read.)&lt;/p&gt;
&lt;p&gt;A couple of things to note: the "p" in "p+" in the doc pattern is a reference to the "p" pattern, not to the element named "p". And although the date attribute has to conform to an &lt;code&gt;xsd:date&lt;/code&gt;, that &lt;em&gt;does not&lt;/em&gt; do any type assignment. RELAX NG allows user-defined data types; I suggest we make that an implementation-defined feature. Since no type assignment is performed, it doesn't really matter.&lt;/p&gt;
&lt;p&gt;How might we add support for RELAX NG validation? A sketch...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add to the static context a set of RELAX NG patterns. Initally empty, these are patterns that can match the document element during RELAX NG validation. (The union of all of the "start" patterns from all of the imported RELAX NG grammars.) There's no user-access to these patterns, so we don't technically need to add them to the data model, though I suppose we could.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In XQuery, allow schema import to import RELAX NG grammars. This has no effect except that the start patterns defined in that grammar are added to the start patterns in the static context. It is an error to specify “fixed” or “default element namespace” if the imported schema is a RELAX NG grammar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add “relax-ng” as a &lt;code&gt;ValidationMode&lt;/code&gt; in &lt;code&gt;ValidateExpr&lt;/code&gt;. It is an error to also specify a “type”.&lt;/p&gt;
&lt;p&gt;If RELAX NG validation is requested, the patterns in the static context are used to attempt to validate the document. If one succeeds, the validated document is returned. If none succeed, that’s an error.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In XSLT, allow schema import to import RELAX NG grammars.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Details about role, TBD&lt;/li&gt;
&lt;li&gt;Details about literal schema elements, TBD&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="5"&gt;
&lt;li&gt;
&lt;p&gt;In XSLT, on elements that have a validation attribute, allow the value “relax-ng” with semantics analagous to the validate expression in XQuery.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the F&amp;amp;O functions that have “dtd-validation” and “xsd-validation” options, add a boolean “relax-ng” validation option. If true, validation is done with the patterns in the static context.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There's one small wrinkle, the &lt;a href="https://relaxng.org/compatibility-20011203.html"&gt;RELAX NG DTD Compatibility&lt;/a&gt; specification defines some annotations that allow a RELAX NG grammar to return default attributes. That means RELAX NG validation &lt;em&gt;can&lt;/em&gt; return a different document than was validated, but I'm not sure how important that support is in 2025 if there were strong objections.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1933 created</title>
   <pubDate>Mon, 14 Apr 2025 11:26:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1933</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1933</guid>
   <description>&lt;div&gt;&lt;p&gt;1271 fn:xsd-validator() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal makes schema validation (as performed by the XQuery validate expression) available as a function. This allows additional options to be defined without extending the grammar, it makes it easier to incorporate validation within a pipeline of function calls, and it makes validation available from XPath.&lt;/p&gt;
&lt;p&gt;If the proposal is accepted I would propose doing some editorial reorganisation so that the current XQuery and XSLT text describing the semantics of validation are directed to the definition of this function, reducing duplication in the specs.&lt;/p&gt;
&lt;p&gt;Fix #1271&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1932 created</title>
   <pubDate>Mon, 14 Apr 2025 09:25:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1932</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1932</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4-CG-115-01 xsl:next-match examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds an example demonstrating passing of parameter through a chain of xsl:next-match instructions&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1931 created</title>
   <pubDate>Mon, 14 Apr 2025 08:57:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1931</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1931</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4-CG-116-02 improve description of validation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Improves the description of the semantics of the &lt;code&gt;xsd-validation&lt;/code&gt; option on &lt;code&gt;parse-xml()&lt;/code&gt; and &lt;code&gt;doc()&lt;/code&gt;. Also brings the two functions into line by adding the &lt;code&gt;xsi-schema-location&lt;/code&gt; option from &lt;code&gt;doc()&lt;/code&gt; to &lt;code&gt;parse-xml()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1930 created</title>
   <pubDate>Mon, 14 Apr 2025 08:42:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1930</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1930</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4-CG-116-04 correction to fn:function-identity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix a simple typo.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1929 created</title>
   <pubDate>Sun, 13 Apr 2025 08:55:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1929</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1929</guid>
   <description>&lt;div&gt;&lt;p&gt;1725 xsl:mode/@copy-namespaces&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1724&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1742 closed</title>
   <pubDate>Sat, 12 Apr 2025 23:20:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1742</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1742</guid>
   <description>&lt;div&gt;&lt;p&gt;Maps constructed using streamed xsl:fork instruction should not be ordered&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1925 closed</title>
   <pubDate>Sat, 12 Apr 2025 17:08:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1925</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1925</guid>
   <description>&lt;div&gt;&lt;p&gt;1844 Arrow Expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1928 created</title>
   <pubDate>Sat, 12 Apr 2025 17:05:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1928</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1928</guid>
   <description>&lt;div&gt;&lt;p&gt;1844b Arrow Expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR doesn't do what issue https://github.com/qt4cg/qtspecs/issues/1844 suggests, namely dropping the mapping arrow. Instead it picks up a couple of points made in passing in that issue:&lt;/p&gt;
&lt;p&gt;(a) drops remaining references to the obsolete =?&amp;gt; operator&lt;/p&gt;
&lt;p&gt;(b) simplifies the grammar for arrow expressions&lt;/p&gt;
&lt;p&gt;(c) improves the way arrow expressions are described, including their relationship to pipeline expressions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1927 closed</title>
   <pubDate>Sat, 12 Apr 2025 15:33:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1927</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1927</guid>
   <description>&lt;div&gt;&lt;p&gt;1907b method lookup&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1927 created</title>
   <pubDate>Sat, 12 Apr 2025 15:33:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1927</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1927</guid>
   <description>&lt;div&gt;&lt;p&gt;1907b method lookup&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1907&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1926 created</title>
   <pubDate>Sat, 12 Apr 2025 15:29:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1926</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1926</guid>
   <description>&lt;div&gt;&lt;p&gt;1907 method lookup (disallow wildcard selection)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1907&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1341 closed</title>
   <pubDate>Sat, 12 Apr 2025 14:55:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1341</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1341</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove the `$position`  argument from the `$action` function passed to folds&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1925 created</title>
   <pubDate>Sat, 12 Apr 2025 13:49:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1925</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1925</guid>
   <description>&lt;div&gt;&lt;p&gt;1844 Arrow Expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR doesn't do what issue #1844 suggests, namely dropping the mapping arrow. Instead it picks up a couple of points made in passing in that issue:&lt;/p&gt;
&lt;p&gt;(a) drops remaining references to the obsolete &lt;code&gt;=?&amp;gt;&lt;/code&gt; operator&lt;/p&gt;
&lt;p&gt;(b) simplifies the grammar for arrow expressions&lt;/p&gt;
&lt;p&gt;(c) improves the way arrow expressions are described, including their relationship to pipeline expressions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1924 created</title>
   <pubDate>Sat, 12 Apr 2025 09:28:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1924</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1924</guid>
   <description>&lt;div&gt;&lt;p&gt;1923 Editorial adjustments for arithmetic expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1923&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1923 created</title>
   <pubDate>Fri, 11 Apr 2025 16:52:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1923</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1923</guid>
   <description>&lt;div&gt;&lt;p&gt;Arithmetic Expressions needlessly mentions UnionExpr&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Minor editorial adjustment needed at XPath specs, 4.8 Arithmetic Expressions. The definition of UnionExpr is mentioned in the EBNF snippets at the top, but that definition is not discussed, nor should it be. This snippet should be dropped.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1922 created</title>
   <pubDate>Fri, 11 Apr 2025 10:46:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1922</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1922</guid>
   <description>&lt;div&gt;&lt;p&gt;1921 Expand definition of version ranges in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1921&lt;/p&gt;
&lt;p&gt;Simple editorial bug fix.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1921 created</title>
   <pubDate>Thu, 10 Apr 2025 21:26:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1921</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1921</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: semantics of PatternVersionRange&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XSLT §3.5.1 The semantics of &lt;code&gt;VersionTo&lt;/code&gt; and &lt;code&gt;VersionFromTo&lt;/code&gt; are described as if the keyword &lt;code&gt;to&lt;/code&gt; is always followed by a &lt;code&gt;VersionPrefix&lt;/code&gt;, whereas the syntax allows a choice of a &lt;code&gt;VersionPrefix&lt;/code&gt; or a &lt;code&gt;PackageVersion&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This problem is present in XSLT 3.0.&lt;/p&gt;
&lt;p&gt;See also Saxon bug https://saxonica.plan.io/issues/6746&lt;/p&gt;
&lt;p&gt;Note also the absence of tests for the form &lt;code&gt;to VersionPrefix&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1737 closed</title>
   <pubDate>Thu, 10 Apr 2025 12:44:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1737</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1737</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar problems introduced by #1732&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1798 closed</title>
   <pubDate>Thu, 10 Apr 2025 12:42:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1798</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1798</guid>
   <description>&lt;div&gt;&lt;p&gt;Getting the value of the new identity-(DM)property of a function. `fn:function-identity`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1920 created</title>
   <pubDate>Thu, 10 Apr 2025 12:39:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1920</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1920</guid>
   <description>&lt;div&gt;&lt;p&gt;Parse functions: determinism&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The function &lt;code&gt;fn:parse-xml&lt;/code&gt; is nondeterministic: Every function call may return a different node instance. Most other parse functions (&lt;code&gt;fn:parse-json&lt;/code&gt;, &lt;code&gt;fn:parse-csv&lt;/code&gt;, &lt;code&gt;fn:csv-to-xml&lt;/code&gt;, etc) are deterministic, and I believe we should change that and make them nondeterministic as well.&lt;/p&gt;
&lt;p&gt;We could also make &lt;code&gt;fn:json-doc&lt;/code&gt; nondeterministic. If we don’t, we should probably add a &lt;code&gt;stable&lt;/code&gt; option.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1919 created</title>
   <pubDate>Thu, 10 Apr 2025 09:44:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1919</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1919</guid>
   <description>&lt;div&gt;&lt;p&gt;1905 Editorial edits&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1905&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1917 closed</title>
   <pubDate>Wed, 9 Apr 2025 16:31:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1917</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1917</guid>
   <description>&lt;div&gt;&lt;p&gt;1891 HTML versions and errors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1918 created</title>
   <pubDate>Wed, 9 Apr 2025 16:30:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1918</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1918</guid>
   <description>&lt;div&gt;&lt;p&gt;1891 clarifications on HTML versions and errors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1891
Fix #1799&lt;/p&gt;
&lt;p&gt;partial fix for #1889&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1917 created</title>
   <pubDate>Wed, 9 Apr 2025 16:24:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1917</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1917</guid>
   <description>&lt;div&gt;&lt;p&gt;1891 HTML versions and errors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1891
Fix #1799&lt;/p&gt;
&lt;p&gt;partial fix for #1889&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1916 created</title>
   <pubDate>Tue, 8 Apr 2025 18:31:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1916</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1916</guid>
   <description>&lt;div&gt;&lt;p&gt;1896 Drop parameter names as a property of function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1896&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1911 closed</title>
   <pubDate>Tue, 8 Apr 2025 18:15:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1911</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1911</guid>
   <description>&lt;div&gt;&lt;p&gt;Remarks on recent changes to regular expression handling&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1902 closed</title>
   <pubDate>Tue, 8 Apr 2025 18:02:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1902</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1902</guid>
   <description>&lt;div&gt;&lt;p&gt;`binary:unpack-integer`, overflow/underflow&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #451 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:32:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/451</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-451</guid>
   <description>&lt;div&gt;&lt;p&gt;Multiple Schemas&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1819 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:32:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1819</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1819</guid>
   <description>&lt;div&gt;&lt;p&gt;451 Multiple schemas in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1881 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:29:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1881</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1881</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:function-identity for maps and arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1895 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:29:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1895</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1895</guid>
   <description>&lt;div&gt;&lt;p&gt;1881 Function identity for maps and arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1876 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:26:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1876</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1876</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:replace`:  Combine $replacement and $action parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1897 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:26:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1897</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1897</guid>
   <description>&lt;div&gt;&lt;p&gt;1876 In fn:replace(), merge the $replacement and $action parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1520 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:22:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1520</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1520</guid>
   <description>&lt;div&gt;&lt;p&gt;Type declarations of cyclically dependent modules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1908 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:22:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1908</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1908</guid>
   <description>&lt;div&gt;&lt;p&gt;1520 Allow forwards references to named item types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1910 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:20:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1910</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1910</guid>
   <description>&lt;div&gt;&lt;p&gt;1021 (part 1) Add $options arg to doc() and doc-available()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #501 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:16:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/501</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-501</guid>
   <description>&lt;div&gt;&lt;p&gt;Error handling: try/finally&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1914 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:16:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1914</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1914</guid>
   <description>&lt;div&gt;&lt;p&gt;501 Error handling: try/finally&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1915 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:13:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1915</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1915</guid>
   <description>&lt;div&gt;&lt;p&gt;1902b bin:unpack out of range error&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1624 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:11:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1624</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1624</guid>
   <description>&lt;div&gt;&lt;p&gt;document-node(a|b) is the same type as document-node(a)|document-node(b)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1898 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:11:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1898</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1898</guid>
   <description>&lt;div&gt;&lt;p&gt;1624b Expand rules for document node subtyping&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1832 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:07:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1832</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1832</guid>
   <description>&lt;div&gt;&lt;p&gt;Associativity of Operators, especially "||" (Appendix A.5)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1904 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:07:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1904</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1904</guid>
   <description>&lt;div&gt;&lt;p&gt;1832 Operator Associativity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #564 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:06:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/564</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-564</guid>
   <description>&lt;div&gt;&lt;p&gt;Sorted maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #982 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:06:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/982</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-982</guid>
   <description>&lt;div&gt;&lt;p&gt;scan-left, scan-right: position argument, array functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1846 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:06:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1846</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1846</guid>
   <description>&lt;div&gt;&lt;p&gt;%method functions, dynamic function calls&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1900 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:06:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1900</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1900</guid>
   <description>&lt;div&gt;&lt;p&gt;Records: instance checks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1913 closed</title>
   <pubDate>Tue, 8 Apr 2025 16:03:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1913</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1913</guid>
   <description>&lt;div&gt;&lt;p&gt;1911 Clarifications for regular expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1645 closed</title>
   <pubDate>Tue, 8 Apr 2025 14:29:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1645</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1645</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Debugging&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1646 closed</title>
   <pubDate>Tue, 8 Apr 2025 14:28:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1646</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1646</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Robustness&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1648 closed</title>
   <pubDate>Tue, 8 Apr 2025 14:27:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1648</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1648</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1909 closed</title>
   <pubDate>Sun, 6 Apr 2025 23:22:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1909</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1909</guid>
   <description>&lt;div&gt;&lt;p&gt;1902 bin unpack out of range&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1915 created</title>
   <pubDate>Sun, 6 Apr 2025 23:21:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1915</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1915</guid>
   <description>&lt;div&gt;&lt;p&gt;1902b bin:unpack out of range error&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Replaces PR #1909&lt;/p&gt;
&lt;p&gt;Adds error conditions for unpacking an integer that is too large for the implementation&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1914 created</title>
   <pubDate>Fri, 4 Apr 2025 16:08:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1914</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1914</guid>
   <description>&lt;div&gt;&lt;p&gt;501 Error handling: try/finally&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #501&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1913 created</title>
   <pubDate>Fri, 4 Apr 2025 15:08:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1913</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1913</guid>
   <description>&lt;div&gt;&lt;p&gt;1911 Clarifications for regular expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Reinstates the non-capturing group syntax &lt;code&gt;(?: xxx )&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Clarifies that a zero-length matching segment does not overlap an immediately preceding adjacent (but non-zero-length) segment.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1912 created</title>
   <pubDate>Fri, 4 Apr 2025 14:05:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1912</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1912</guid>
   <description>&lt;div&gt;&lt;p&gt;Error handling: `fn:throw`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adopted from #501:&lt;/p&gt;
&lt;p&gt;In https://github.com/qt4cg/qtspecs/pull/493, a function/expression was suggested to re-throw errors:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;try {
  (: wild stuff :)
} catch * {
  module:log($err:description),
  fn:throw($err:map)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existing errors map can be modified before rethrowing them:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;try {
  1 div 0
} catch * {
  module:log($err:description),
  fn:throw($err:map =&amp;gt; map:put('description', 'Arithmetic error'))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1911 created</title>
   <pubDate>Wed, 2 Apr 2025 13:45:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1911</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1911</guid>
   <description>&lt;div&gt;&lt;p&gt;Remarks on recent changes to regular expression handling&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I would like to share these observations that I made while working on recent changes of regular expression handling per #1856.&lt;/p&gt;
&lt;p&gt;The section that mentions potential rewrites of &lt;code&gt;\b&lt;/code&gt; and &lt;code&gt;\B&lt;/code&gt; misses to consider the start and end of the string, as well as the empty string. It should rather read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;\b&lt;/code&gt; can be rewritten to an equivalent form in terms of lookbehind and lookahead assertions:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(?:(*positive_lookbehind:\w)(?:$|(*positive_lookahead:\W))|(?:^|(*positive_lookbehind:\W))(*positive_lookahead:\w))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A similar rewrite is possible for &lt;code&gt;\B&lt;/code&gt;, but it must additionally take care of the empty string.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For &lt;code&gt;fn:analyze-string&lt;/code&gt;, it might be useful to add a clarifying remark about empty matches at the end of the result (see qt4cg/qt4tests#224).&lt;/p&gt;
&lt;p&gt;The specification of &lt;code&gt;fn:analyze-string&lt;/code&gt; contains a duplicated word, &lt;code&gt;the the&lt;/code&gt;. The same also occurs in several other places in the documents.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1910 created</title>
   <pubDate>Mon, 31 Mar 2025 16:50:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1910</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1910</guid>
   <description>&lt;div&gt;&lt;p&gt;1021 (part 1) Add $options arg to doc() and doc-available()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;To follow: options for collection() and uri-collection().&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1909 created</title>
   <pubDate>Mon, 31 Mar 2025 15:40:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1909</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1909</guid>
   <description>&lt;div&gt;&lt;p&gt;1902 bin unpack out of range&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add error condition.&lt;/p&gt;
&lt;p&gt;Fix #1902&lt;/p&gt;
&lt;p&gt;I also did some work on removing errors and warnings from the EXPath binary build.  There are a couple of outstanding issues I'm not sure how to fix:&lt;/p&gt;
&lt;p&gt;(a) The function bin:bin had the incorrect id value func-bin-binary instead of func-bin-bin. I've corrected it, but the database of section ids needs updating.&lt;/p&gt;
&lt;p&gt;(b) In database.xml, the EXPath binary spec is identified as document-summary/@uri = "https://qt4cg.org/specifications/EXPath/binary-40/". But the actual location of the specification is "https://qt4cg.org/specifications/expath-binary-40/"&lt;/p&gt;
&lt;p&gt;(c) There are tags such as &lt;code&gt;&amp;lt;code&amp;gt;bin:index-of-range&amp;lt;/code&amp;gt;&lt;/code&gt; which the stylesheet is trying to interpret as function names rather than error codes. They actually refer to obsolete error codes so we can't use &lt;code&gt;&amp;lt;errorref&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1908 created</title>
   <pubDate>Mon, 31 Mar 2025 11:32:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1908</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1908</guid>
   <description>&lt;div&gt;&lt;p&gt;1520 Allow forwards references to named item types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1520&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1907 created</title>
   <pubDate>Sat, 29 Mar 2025 17:42:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1907</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1907</guid>
   <description>&lt;div&gt;&lt;p&gt;Method lookup: wildcards&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We should ignore the &lt;code&gt;%method&lt;/code&gt; annotation for wildcard lookups:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $data := { 'fn': %method fn() { . } }
return $data?*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I cannot see when this makes sense as it only seems to work if the wildcard lookup returns a single item (→ “selects a key/value pair whose value part is a singleton method”). In addition, it makes streaming of wildcard results troublesome.&lt;/p&gt;
&lt;p&gt;If we believe we should support context value bindings for wildcards, I think it would be better to apply it to each item of the returned value, instead of the value as a whole.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1906 created</title>
   <pubDate>Fri, 28 Mar 2025 15:16:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1906</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1906</guid>
   <description>&lt;div&gt;&lt;p&gt;1797 elements-to-maps-conversion-plan function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The PR drops the "uniform" option of &lt;code&gt;elements-to-maps&lt;/code&gt; into a separate function &lt;code&gt;elements-to-maps-conversion-plan&lt;/code&gt;, which can be used to analyze a corpus of data and generate a conversion plan for use by &lt;code&gt;elements-to-maps&lt;/code&gt;. This is useful when the conversion is to be applied to documents that are not part of the corpus, for example when new documents arrive for conversion every day and need to be converted in a consistent way. It also provides a more general mechanism for users to override the system decisions on what layouts to use for what elements.&lt;/p&gt;
&lt;p&gt;The PR is not entirely complete at this stage: the technical detail is all there, but examples need to be reviewed. Comments are welcome at this stage.&lt;/p&gt;
&lt;p&gt;There are a few other minor changes. The most notable are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More consistent fallback when an inappropriate layout is chosen. If the layout does not allow attributes, then attributes are discarded; if there is any other mismatch, the converter falls back to serialized XML layout.&lt;/li&gt;
&lt;li&gt;Better handling of boolean and numeric element and attribute content.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1905 created</title>
   <pubDate>Thu, 27 Mar 2025 15:40:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1905</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1905</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial edits&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XQFO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buggy examples/results: &lt;code&gt;map:put&lt;/code&gt;, &lt;code&gt;map:of-pairs&lt;/code&gt;, &lt;code&gt;fn:scan-left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;duplicates: &lt;code&gt;the the&lt;/code&gt;, …&lt;/li&gt;
&lt;li&gt;Boolean defaults: &lt;code&gt;true()&lt;/code&gt;/&lt;code&gt;false()&lt;/code&gt; vs. &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…to be continued&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1904 created</title>
   <pubDate>Thu, 27 Mar 2025 11:42:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1904</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1904</guid>
   <description>&lt;div&gt;&lt;p&gt;1832 Operator Associativity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Update the table and explanatory notes.&lt;/p&gt;
&lt;p&gt;Fix #1832&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1903 created</title>
   <pubDate>Thu, 27 Mar 2025 11:27:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1903</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1903</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:scan-left`, `fn:scan-right`: missing steps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have labeled #982 (which included position arguments) to be closed to focus on the remaining todos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The types of the &lt;code&gt;$action&lt;/code&gt; parameters of &lt;code&gt;fn:fold-right&lt;/code&gt; and &lt;code&gt;fn:scan-right&lt;/code&gt; should be aligned. In particular, &lt;code&gt;item()*&lt;/code&gt; and &lt;code&gt;item()&lt;/code&gt; of the scan function should be swapped: → #1919&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:fold-right(
  $input   as item()*,	
  $init    as item()*,	
  $action  as fn(item(), item()*) as item()*	
) as item()*

fn:scan-right(
  $input   as item()*,	
  $init    as item()*,	
  $action  as fn(item()*, item()) as item()*	
) as array(*)*
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;The result of the last example of &lt;code&gt;fn:scan-left&lt;/code&gt; is syntactically wrong. → #1919&lt;/li&gt;
&lt;li&gt;The equivalent array functions are still missing (if we still believe we want to include them).&lt;/li&gt;
&lt;li&gt;We need tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1902 created</title>
   <pubDate>Thu, 27 Mar 2025 10:20:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1902</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1902</guid>
   <description>&lt;div&gt;&lt;p&gt;`binary:unpack-integer`, overflow/underflow&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If &lt;code&gt;binary:unpack-integer&lt;/code&gt; or &lt;code&gt;binary:unpack-unsigned-integer&lt;/code&gt; generates a value that exceeds the range supported by the implementation, &lt;code&gt;err:FOAR0002&lt;/code&gt; should be raised.&lt;/p&gt;
&lt;p&gt;Related: https://github.com/expath/expath-cg/issues/116&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1901 created</title>
   <pubDate>Thu, 27 Mar 2025 00:44:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1901</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1901</guid>
   <description>&lt;div&gt;&lt;p&gt;1363 fallback becomes a value not a function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue #1363 generated a large amount of discussion on how to handle absent keys in map:get() and out-of-range indexes in array:get().&lt;/p&gt;
&lt;p&gt;I felt that one of the simplest proposals was to change the $fallback argument to be a simple default value, rather than a function. This eliminates some of the more "clever" use cases, but these can always be achieved in other ways, as the discussion thread demonstrates. Meanwhile reducing &lt;code&gt;$fallback&lt;/code&gt; to a simple default value makes life easier for the 90% of cases where this is all that is needed (especially for arrays, when the desire is to return a default value rather than throwing an error).&lt;/p&gt;
&lt;p&gt;This PR therefore implements that simple proposal.&lt;/p&gt;
&lt;p&gt;Fix #1363&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1766 closed</title>
   <pubDate>Wed, 26 Mar 2025 15:26:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1766</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1766</guid>
   <description>&lt;div&gt;&lt;p&gt;1715 Drop array bound checking&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1900 created</title>
   <pubDate>Wed, 26 Mar 2025 14:13:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1900</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1900</guid>
   <description>&lt;div&gt;&lt;p&gt;Records: instance checks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Continues #1862:&lt;/p&gt;
&lt;p&gt;In the last meeting, we discussed whether the order of record entries should be considered in instance checks. After further reflection and attempts to implement it, I believe this will make things much easier in the long term:&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-item-coercion-rules"&gt;3.4.1 Item Coercion Rules&lt;/a&gt;, the coercion of records was added as a second exceptional case: The coercion may change the item in question even if the upstream instance check is succesful. This leads to additional action that I believe could simply be avoided if the successful instance means that no further action is required. I think it will also reduce possible cost that was indicated in https://github.com/qt4cg/qtspecs/issues/1862#issuecomment-2709104860.&lt;/p&gt;
&lt;p&gt;Note: This issue clearly focuses on implications for the implementation. From a user perspective, I assume it will hardly ever make a difference whether we consider order or not. My assumption is that nearly all records will have the expected order anyway, or they will match the order once the first coercion has taken place.&lt;/p&gt;
&lt;p&gt;All this takes time to specify. I will be glad to make an attempt and write the PR.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1899 closed</title>
   <pubDate>Wed, 26 Mar 2025 08:42:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1899</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1899</guid>
   <description>&lt;div&gt;&lt;p&gt;Superflous whitespace change to nudge CI; apologies for the noise.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1899 created</title>
   <pubDate>Wed, 26 Mar 2025 08:26:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1899</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1899</guid>
   <description>&lt;div&gt;&lt;p&gt;Superflous whitespace change to nudge CI; apologies for the noise.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1660 closed</title>
   <pubDate>Tue, 25 Mar 2025 20:23:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1660</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1660</guid>
   <description>&lt;div&gt;&lt;p&gt;Further suggestions for fn:path&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1747 closed</title>
   <pubDate>Tue, 25 Mar 2025 20:05:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1747</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1747</guid>
   <description>&lt;div&gt;&lt;p&gt;Function finder is broken&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1858 closed</title>
   <pubDate>Tue, 25 Mar 2025 19:07:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1858</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1858</guid>
   <description>&lt;div&gt;&lt;p&gt;Initial xsl:record&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1870 closed</title>
   <pubDate>Tue, 25 Mar 2025 19:00:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1870</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1870</guid>
   <description>&lt;div&gt;&lt;p&gt;Rename $zero keyword of fold-left and fold-right&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1887 closed</title>
   <pubDate>Tue, 25 Mar 2025 18:59:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1887</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1887</guid>
   <description>&lt;div&gt;&lt;p&gt;1870 rename $zero keyword of fold functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1886 closed</title>
   <pubDate>Tue, 25 Mar 2025 18:48:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1886</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1886</guid>
   <description>&lt;div&gt;&lt;p&gt;1660 Additional options for fn:path&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1862 closed</title>
   <pubDate>Tue, 25 Mar 2025 18:47:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1862</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1862</guid>
   <description>&lt;div&gt;&lt;p&gt;Records: consider order&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1874 closed</title>
   <pubDate>Tue, 25 Mar 2025 18:47:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1874</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1874</guid>
   <description>&lt;div&gt;&lt;p&gt;1862 Coercing to a record type changes map order&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1861 closed</title>
   <pubDate>Tue, 25 Mar 2025 18:46:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1861</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1861</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:next-match with-all-params&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1875 closed</title>
   <pubDate>Tue, 25 Mar 2025 18:46:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1875</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1875</guid>
   <description>&lt;div&gt;&lt;p&gt;1861 Params passed automatically through next-match&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1898 created</title>
   <pubDate>Tue, 25 Mar 2025 15:33:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1898</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1898</guid>
   <description>&lt;div&gt;&lt;p&gt;1624b Expand rules for document node subtyping&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1624&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1897 created</title>
   <pubDate>Tue, 25 Mar 2025 11:57:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1897</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1897</guid>
   <description>&lt;div&gt;&lt;p&gt;1876 In fn:replace(), merge the $replacement and $action parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1876&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1884 closed</title>
   <pubDate>Tue, 25 Mar 2025 11:10:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1884</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1884</guid>
   <description>&lt;div&gt;&lt;p&gt;Deep-equality keys&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1896 created</title>
   <pubDate>Tue, 25 Mar 2025 10:59:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1896</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1896</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop "parameter names" as a property of a function item&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;One of the properties of function items is the parameter names.&lt;/p&gt;
&lt;p&gt;This property is unused; there is nothing that depends on the value of this property, and no way of discovering the value, and it isn't defined for all function items, e.g. maps and arrays, or functions returned by functions such as fn:op. It causes complications, such as whether two functions can have the same identity if they have different parameter names. I propose to drop it.&lt;/p&gt;
&lt;p&gt;Of course, there are open issues that suggest allowing parameter names to be used in dynamic function calls. But I see little chance of coming up with a design that achieves this, because in general when you're given a function item to call, you have no idea what the parameter names are, and the person supplying the function item has very little control over what the parameter names will be.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1895 created</title>
   <pubDate>Tue, 25 Mar 2025 10:15:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1895</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1895</guid>
   <description>&lt;div&gt;&lt;p&gt;1881 Function identity for maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Supplies rules for how &lt;code&gt;fn:function-identity()&lt;/code&gt; should handle maps and arrays.&lt;/p&gt;
&lt;p&gt;Also makes the point that labels are ignored. There's a general statement to the effect in XDM that labels are ignored except where otherwise specified, but it's useful to avoid any doubt here.&lt;/p&gt;
&lt;p&gt;Fix #1881&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1892 closed</title>
   <pubDate>Mon, 24 Mar 2025 18:07:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1892</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1892</guid>
   <description>&lt;div&gt;&lt;p&gt;Dnovatchev dn examples (ignore this)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1894 created</title>
   <pubDate>Mon, 24 Mar 2025 17:32:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1894</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1894</guid>
   <description>&lt;div&gt;&lt;p&gt;Additional examples to fn:chain - in a new branch&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Re-submitted the same as PR 1890.
Added some new examples to fn:chain.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1890 closed</title>
   <pubDate>Mon, 24 Mar 2025 17:11:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1890</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1890</guid>
   <description>&lt;div&gt;&lt;p&gt;More examples added to fn:chain&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1893 closed</title>
   <pubDate>Mon, 24 Mar 2025 17:01:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1893</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1893</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix broken markup&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1893 created</title>
   <pubDate>Mon, 24 Mar 2025 16:48:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1893</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1893</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix broken markup&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I cannot imagine how we got a merged PR that included broken markup, but it's probably made a mess of the diffs recently.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1892 created</title>
   <pubDate>Mon, 24 Mar 2025 15:56:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1892</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1892</guid>
   <description>&lt;div&gt;&lt;p&gt;Dnovatchev dn examples (ignore this)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR #1890 rebased off master to test if it makes for cleaner diffs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1891 created</title>
   <pubDate>Mon, 24 Mar 2025 12:26:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1891</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1891</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:parse-html`: `html-version`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Maybe we can align the HTML versions that &lt;code&gt;fn:parse-html&lt;/code&gt; needs to support with the remaining specification. It currently says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Valid values an implementation must support for the &lt;code&gt;html&lt;/code&gt; method are:
&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;3.2&lt;/code&gt; for HTML 3.2 W3C Recommendation, 14 January 1997
&lt;code&gt;4&lt;/code&gt;, &lt;code&gt;4.01&lt;/code&gt; for HTML 4.01 W3C Recommendation, 24 December 1999
&lt;code&gt;5.0&lt;/code&gt; for HTML5 W3C Recommendation, 28 October 2014
&lt;code&gt;5.1&lt;/code&gt; for HTML 5.1 W3C Recommendation, 1 November 2016
&lt;code&gt;5.2&lt;/code&gt; for HTML 5.2 W3C Recommendation, 14 December 2017
&lt;code&gt;LS&lt;/code&gt; for HTML Living Standard, WHATWG
&lt;code&gt;5&lt;/code&gt; may be equivalent to any of &lt;code&gt;5.0&lt;/code&gt;, &lt;code&gt;5.1&lt;/code&gt;, &lt;code&gt;5.2&lt;/code&gt;, or &lt;code&gt;LS&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the XQFO and Serialization specs, only HTML 4.0/4.01 and HTML 5 are mentioned.&lt;/p&gt;
&lt;p&gt;@rhdunn Do you have an opinion on this?&lt;/p&gt;
&lt;p&gt;Related: #1889&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1890 created</title>
   <pubDate>Sun, 23 Mar 2025 22:34:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1890</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1890</guid>
   <description>&lt;div&gt;&lt;p&gt;More examples added to fn:chain&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Added 6 more examples and tests
All are correctly executed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1889 created</title>
   <pubDate>Thu, 20 Mar 2025 15:32:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1889</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1889</guid>
   <description>&lt;div&gt;&lt;p&gt;HTML serialization: `html-version` and `version` parameters; allowed values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The serialization spec says (&lt;a href="https://qt4cg.org/specifications/xslt-xquery-serialization-40/Overview.html#HTML_VERSION"&gt;HTML Output Method: the version and html-version Parameters&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the &lt;code&gt;html-version&lt;/code&gt; serialization parameter is not absent, the requested HTML version is the value of the &lt;code&gt;html-version&lt;/code&gt; serialization parameter; otherwise, it is the value of the &lt;code&gt;version&lt;/code&gt; serialization parameter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-serialize"&gt;fn:serialize&lt;/a&gt; defines the following defaults:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;html-version&lt;/code&gt;: &lt;code&gt;5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;: &lt;code&gt;1.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wonder whether these rules cover all possible cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is it correct that HTML will be serialized as HTML5 if no options are supplied?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: html-version=5 :) 
serialize(&amp;lt;html/&amp;gt;, { 'method': 'html' })
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;If only &lt;code&gt;version&lt;/code&gt; is supplied, is it correct that it is ignored because of &lt;code&gt;html-version&lt;/code&gt; defaulting to &lt;code&gt;5&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: html-version=5 ? :) 
serialize(&amp;lt;html/&amp;gt;, { 'method': 'html', 'version': '4.01' })
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3"&gt;
&lt;li&gt;If no, i.e., if &lt;code&gt;{ 'version': '4.01' }&lt;/code&gt; is expected to overwrite the default for &lt;code&gt;html-version&lt;/code&gt;, how can we know at which stage the default values are to be considered?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In addition, the serialization specification mentions versions HTML 4.01 and HTML5 various times, but it seems to be up to the implementation to decide which HTML versions to support. However, we seem to have test cases for &lt;code&gt;4.0&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;. Would it make sense to define a miminum set of versions that need to be supported?&lt;/p&gt;
&lt;p&gt;Finally, for some reason, the &lt;code&gt;html-version&lt;/code&gt; parameter was defined to be a decimal, whereas &lt;code&gt;version&lt;/code&gt; is defined as a string (since XQFO 3.1). Maybe this leads to the surprising result that Saxon seems to accept the option &lt;code&gt;{ 'version': '4.0' }&lt;/code&gt;, but rejects &lt;code&gt;{ 'html-version': 4 }&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1888 created</title>
   <pubDate>Thu, 20 Mar 2025 04:57:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1888</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1888</guid>
   <description>&lt;div&gt;&lt;p&gt;366 xsl:package-location&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;First draft, for initial feedback.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because the CG has little energy/resources to develop the EXPath Zip module, I have situated the question of archive (compressed or not) in the URI scheme itself. There are dozens of archives, dozens of URI schemes. The only case where I have found overlap is in the &lt;code&gt;jar:&lt;/code&gt; scheme/archive. Yes, I've seen &lt;code&gt;zip:&lt;/code&gt; used as an alias for &lt;code&gt;jar:&lt;/code&gt;, but it's not an official IANA URI scheme. This may need discussion.&lt;/li&gt;
&lt;li&gt;I have opted to bind &lt;code&gt;@priority&lt;/code&gt; to a non-zero integer. This is the first time the constraint for the union of positive and negative integers has been placed on an XSLT attribute, so I may not have correctly set up &lt;code&gt;element-catalog.xml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I have opted to not make attribute values &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;version&lt;/code&gt; as criteria for the priority package location (new term), so that developers can be warned when the package is at odds with the declaration. To make them criteria would mean that inconsistencies between the declaration and the referenced packages would remain undetected.&lt;/li&gt;
&lt;li&gt;I adopted the terms "URL" and "entry" based upon the IANA nomenclature for the jar: scheme.&lt;/li&gt;
&lt;li&gt;I may have overthought the distinction between archive and non-archive URIs. Feedback is appreciated.&lt;/li&gt;
&lt;li&gt;Error code &lt;code&gt;3000&lt;/code&gt; has been broken up into different possible errors.&lt;/li&gt;
&lt;li&gt;Suggestions on the type and number of tests that need to be written for the test suite are welcome.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1887 created</title>
   <pubDate>Tue, 18 Mar 2025 21:29:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1887</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1887</guid>
   <description>&lt;div&gt;&lt;p&gt;1870 rename $zero keyword of fold functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1870&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #998 closed</title>
   <pubDate>Tue, 18 Mar 2025 20:54:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/998</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-998</guid>
   <description>&lt;div&gt;&lt;p&gt;regular expression addition - lookbehind assertions and lookahead assertions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1848 closed</title>
   <pubDate>Tue, 18 Mar 2025 20:53:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1848</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1848</guid>
   <description>&lt;div&gt;&lt;p&gt;Define regular expressions using XSD 1.1 as baseline&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1856 closed</title>
   <pubDate>Tue, 18 Mar 2025 20:50:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1856</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1856</guid>
   <description>&lt;div&gt;&lt;p&gt;998 Add boundary and lookahead/behind assertions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1886 created</title>
   <pubDate>Tue, 18 Mar 2025 18:33:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1886</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1886</guid>
   <description>&lt;div&gt;&lt;p&gt;1660 Additional options for fn:path&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1860 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:36:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1860</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1860</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-xml: DTDs, external resources&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1857 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:36:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1857</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1857</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-xml: `xinclude`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1879 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:36:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1879</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1879</guid>
   <description>&lt;div&gt;&lt;p&gt;1857, 1860: Add more options to parse-xml&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1882 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:34:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1882</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1882</guid>
   <description>&lt;div&gt;&lt;p&gt;982 Editorial rewrite of scan-left and scan-right&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1866 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:32:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1866</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1866</guid>
   <description>&lt;div&gt;&lt;p&gt;Ambiguities introduced by #1864&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1877 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:32:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1877</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1877</guid>
   <description>&lt;div&gt;&lt;p&gt;1866 Disambiguate TypeSpecifier syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1867 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:30:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1867</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1867</guid>
   <description>&lt;div&gt;&lt;p&gt;1341 Drop position from fold callbacks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1869 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:28:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1869</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1869</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:duplicate-values`: Order of results&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1873 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:28:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1873</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1873</guid>
   <description>&lt;div&gt;&lt;p&gt;1869 duplicate values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1851 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:26:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1851</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1851</guid>
   <description>&lt;div&gt;&lt;p&gt;Questions on `fn:atomic-type-annotation`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1878 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:26:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1878</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1878</guid>
   <description>&lt;div&gt;&lt;p&gt;1851 Make ?variety optional; explain namespace-sensitive&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1863 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:24:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1863</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1863</guid>
   <description>&lt;div&gt;&lt;p&gt;add \U \u L \u \E to replace() (case conversion)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1880 closed</title>
   <pubDate>Tue, 18 Mar 2025 17:23:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1880</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1880</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial revision of fn:function-identity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1885 created</title>
   <pubDate>Tue, 18 Mar 2025 16:51:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1885</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1885</guid>
   <description>&lt;div&gt;&lt;p&gt;Use the spcification grammar markup to define the regular expression grammar in F&amp;amp;O&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The grammar for regular expressions in the regular expression section of F&amp;amp;O is currently defined as a code block. Making it use the grammar markup used to define the pattern, XPath, and XQuery grammars would:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;give the grammar a unified appearance with the other grammars;&lt;/li&gt;
&lt;li&gt;allow grammar elements to be cross referenced and linked back to the grammar.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1884 created</title>
   <pubDate>Mon, 17 Mar 2025 18:18:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1884</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1884</guid>
   <description>&lt;div&gt;&lt;p&gt;Deep-equality keys&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue #119 proposes extending maps to allow arbitrary values as keys. This is very difficult to achieve, (a) because the fact that keys are atomic items is deeply embedded in the design of a number of functions and operations on maps, and (b) because it's very hard to define an equality function that suits everyone.&lt;/p&gt;
&lt;p&gt;The way we tacked variable equality semantics for strings was via the collation-key() function, which takes a string and a collation as input and produces an opaque key value, which can be used as a key in maps, and which reflects the desired equality semantics.&lt;/p&gt;
&lt;p&gt;We could extend the same idea to values other than strings. In particular, we could define a deep-equality-key() that can be calculated for any sequence, and that takes all the matching options of the deep-equal() function as a parameter. (We could then redefine &lt;code&gt;deep-equal(a, b, options)&lt;/code&gt; to mean &lt;code&gt;deep-equality-key(a, options) eq deep-equality-key(b, options)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The main drawback is that the deep-equality-keys for large node trees or maps would be rather long strings. People might use the functionality without realising the expense.&lt;/p&gt;
&lt;p&gt;Another problem is that one of our options in deep-equals() is a callback function for item equality, and we couldn't replicate this when computing a key. But this callback is the only way we have, for example, to compare nodes by identity rather than by content.&lt;/p&gt;
&lt;p&gt;Note that an internal deep-equality-key concept (or at least a deep-equality hashcode) is needed anyway for efficient implementation of deep-equals where order is deemed irrelevant. Without it, the function becomes O(n^2). Quite independently of this proposal, we should perhaps have an explicit option on deep-equals() to compare nodes by identity.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1296 closed</title>
   <pubDate>Mon, 17 Mar 2025 09:47:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1296</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1296</guid>
   <description>&lt;div&gt;&lt;p&gt;982 Rewrite of scan-left and scan-right&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1883 created</title>
   <pubDate>Sun, 16 Mar 2025 18:19:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1883</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1883</guid>
   <description>&lt;div&gt;&lt;p&gt;882 Replace fn:chain by fn:compose&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Drops the existing fn:chain function and replaces it with a new fn:compose function.&lt;/p&gt;
&lt;p&gt;This combines two separate changes:&lt;/p&gt;
&lt;p&gt;(a) whereas fn:chain applies a sequence of functions to an input, fn:compose returns a composite function that can be used repeatedly with different inputs.&lt;/p&gt;
&lt;p&gt;(b) the fn:compose function is restricted to arity-1 functions, which leads to a much simpler specification that still handles the vast majority of practical use cases.&lt;/p&gt;
&lt;p&gt;In particular, note that if the sequence of functions to be applied is statically known, then it can always be written out explicitly; the real use case for this function is when the sequence of functions is constructed dynamically. And in this situation, fn:chain in its current form can easily fail because of problems with the arity of the functions included in the chain.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1865 closed</title>
   <pubDate>Sun, 16 Mar 2025 17:13:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1865</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1865</guid>
   <description>&lt;div&gt;&lt;p&gt;Callback functions, position argument: consistency&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1882 created</title>
   <pubDate>Sun, 16 Mar 2025 00:09:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1882</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1882</guid>
   <description>&lt;div&gt;&lt;p&gt;982 Editorial rewrite of scan-left and scan-right&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is intended to be purely an editorial rewrite, it does not change the functionality.&lt;/p&gt;
&lt;p&gt;Replaces #1296.&lt;/p&gt;
&lt;p&gt;Addresses #982, but we still need to add corresponding functions for arrays.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1881 created</title>
   <pubDate>Sat, 15 Mar 2025 08:28:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1881</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1881</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:function-identity for maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The data model spec says that function identity is not defined for maps and arrays.&lt;/p&gt;
&lt;p&gt;The specification of fn:function-identity() fails to mention this fact.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1880 created</title>
   <pubDate>Sat, 15 Mar 2025 01:16:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1880</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1880</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial revision of fn:function-identity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Tidies up the text and adds examples&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1879 created</title>
   <pubDate>Fri, 14 Mar 2025 15:50:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1879</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1879</guid>
   <description>&lt;div&gt;&lt;p&gt;1857, 1860: Add more options to parse-xml&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add options to control entity expansion and XInclude processing.&lt;/p&gt;
&lt;p&gt;Fix #1857
Fix #1860&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1878 created</title>
   <pubDate>Fri, 14 Mar 2025 14:58:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1878</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1878</guid>
   <description>&lt;div&gt;&lt;p&gt;1851 Make ?variety optional; explain namespace-sensitive&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1851&lt;/p&gt;
&lt;p&gt;Allow ?variety to be absent e.g. for xs:anySimpleType&lt;/p&gt;
&lt;p&gt;Define namespace-sensitive by an xtermref to the definition in the XP/XQ spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1877 created</title>
   <pubDate>Fri, 14 Mar 2025 14:38:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1877</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1877</guid>
   <description>&lt;div&gt;&lt;p&gt;1866 Disambiguate TypeSpecifier syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1866&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1876 created</title>
   <pubDate>Fri, 14 Mar 2025 13:10:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1876</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1876</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:replace`:  Combine $replacement and $action parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We could combine the competing &lt;code&gt;$replacement&lt;/code&gt; and &lt;code&gt;$action&lt;/code&gt; parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;replace(
  'this is a test',
  '(\w)(\w+)?',
  fn($s, $g) { upper-case($g[1]) || lower-case($g[2]) }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Original comment: https://github.com/qt4cg/qtspecs/issues/1863#issuecomment-2711149296&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1875 created</title>
   <pubDate>Fri, 14 Mar 2025 11:27:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1875</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1875</guid>
   <description>&lt;div&gt;&lt;p&gt;1861 Params passed automatically through next-match&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1861&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1874 created</title>
   <pubDate>Fri, 14 Mar 2025 10:49:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1874</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1874</guid>
   <description>&lt;div&gt;&lt;p&gt;1862 Coercing to a record type changes map order&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1862&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1873 created</title>
   <pubDate>Fri, 14 Mar 2025 09:55:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1873</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1873</guid>
   <description>&lt;div&gt;&lt;p&gt;1869 duplicate values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1869&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1872 created</title>
   <pubDate>Thu, 13 Mar 2025 11:31:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1872</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1872</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays: members → values / entries?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I am pretty sure the first reaction will be DONT!, but for the sake of consistency it seems important enough for me to bring this up:&lt;/p&gt;
&lt;p&gt;Could we rename array “members” to “values”?&lt;/p&gt;
&lt;p&gt;Some advantages that I would see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We could treat arrays and maps more similarly.&lt;/li&gt;
&lt;li&gt;We already have a &lt;code&gt;values&lt;/code&gt; lookup key specifier for arrays.&lt;/li&gt;
&lt;li&gt;No 3.1 array function contains the string “member”, so we will not introduce any backward inconsistencies.&lt;/li&gt;
&lt;li&gt;All 4.0 features that use this string could be safely renamed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course the term “values” is a very common one, but we have to decided to stick with “map values” – and arrays and maps are very similar.&lt;/p&gt;
&lt;p&gt;Finally, I noticed that also the term “member” has different meanings in the spec and is not exclusively used for arrays (e.g. in the rules for &lt;code&gt;fn:innermost&lt;/code&gt;, &lt;code&gt;fn:format-integer&lt;/code&gt; or for members of union types).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1338 closed</title>
   <pubDate>Thu, 13 Mar 2025 10:40:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1338</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1338</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays and maps: Members, entries, values, contents, pairs, …&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1871 created</title>
   <pubDate>Thu, 13 Mar 2025 10:39:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1871</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1871</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays and maps: consistency&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Suggestions (based on #1338, related: #1868)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;In symmetry with the &lt;code&gt;pairs&lt;/code&gt; lookup specifier, we should add &lt;code&gt;array:pairs&lt;/code&gt; and an inverse &lt;code&gt;array:of-pairs&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;In symmetry with the &lt;code&gt;values&lt;/code&gt; lookup specifier, we should add &lt;code&gt;array:values&lt;/code&gt; and &lt;code&gt;map:values&lt;/code&gt; functions, to retrieve the values of maps and the members of arrays as a sequence of arrays.&lt;/li&gt;
&lt;li&gt;In return, &lt;code&gt;array:members&lt;/code&gt; and &lt;code&gt;array:of-members&lt;/code&gt; seem redundant, and we should drop them.&lt;/li&gt;
&lt;li&gt;In analogy with the &lt;code&gt;keys&lt;/code&gt; specifier and &lt;code&gt;map:keys&lt;/code&gt;, we should add &lt;code&gt;array:keys&lt;/code&gt; (which returns a dense integer range).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;With version 4.0, we are adding a lot of promising and powerful new map and array features. This is a big step forward, compared to the obvious limitations of 3.1.&lt;/p&gt;
&lt;p&gt;Some aspects of the 3.1 design have made it difficult (or impossible) to fully adjust array and maps, but (in my opinion) the old overall concept was impressively consistent – and it is definitely a big challenge to achieve a 4.0 design that is not too fragmented.&lt;/p&gt;
&lt;p&gt;To me, this becomes particularly evident in the case of arrays. The following example sums up the items of all members of an array. For the cumbersome 3.1 solution…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $pos in 1 to array:size($array)
return sum($array($pos))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…we now have several (roughly?) equivalent options to do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;for member $m in $array return sum($m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array:members($array) ! sum(?value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$array?pairs::* ! sum(?value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$array?values::* ! sum(.)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The examples above imply that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for 1., an &lt;em&gt;array member&lt;/em&gt; is a sequence;&lt;/li&gt;
&lt;li&gt;for 2., an &lt;em&gt;array member&lt;/em&gt; is a map;&lt;/li&gt;
&lt;li&gt;for 3., an &lt;em&gt;array&lt;/em&gt; has pairs (but there is no &lt;code&gt;array:pairs&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;for 4., an &lt;em&gt;array&lt;/em&gt; has values (but there is no &lt;code&gt;array:values&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1870 created</title>
   <pubDate>Wed, 12 Mar 2025 22:19:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1870</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1870</guid>
   <description>&lt;div&gt;&lt;p&gt;Rename $zero keyword of fold-left and fold-right&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I find the name $zero for this parameter unhelpful and confusing.&lt;/p&gt;
&lt;p&gt;I suggest &lt;code&gt;$accum&lt;/code&gt;, short for "accumulator" or "accumulated result".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1869 created</title>
   <pubDate>Wed, 12 Mar 2025 18:44:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1869</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1869</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:duplicate-values`: Order of results&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With https://github.com/qt4cg/qtspecs/pull/987, a rule was added to &lt;code&gt;fn:duplicate-values&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For any set of values that compare equal, the one that is returned is the one that appears first in $values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think we should adapt the behavior to return the duplicates in the order they appear, not the original values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A common use case for this function is to find the first duplicate in a list.&lt;/li&gt;
&lt;li&gt;If we return the original values in the correct order, we need to parse the full sequence before we can know which will be the first result. A worst-case example:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(0x7FFFFFFFFFFFFFFF, 1, 1 to 0x7FFFFFFFFFFFFFFF)
=&amp;gt; duplicate-values()
=&amp;gt; head()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1868 created</title>
   <pubDate>Wed, 12 Mar 2025 18:19:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1868</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1868</guid>
   <description>&lt;div&gt;&lt;p&gt;array:members() to include index position&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently &lt;code&gt;array:members(["a", "b"])&lt;/code&gt; returns&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{'value': "a"},
{'value': "b"}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I suggest that it should instead return&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{'key': 1, 'value': "a"},
{'key': 2, 'value': "b"}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The extra information is useful for any operation that wants to take account of positions as well as values. For example, rearranging an array into multiple columns. Using the names "key" and "value" also means that the data is suitable for converting an array to a map by means of &lt;code&gt;map:of-pairs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function array:of-members() should change to accept &lt;code&gt;record('value', *)&lt;/code&gt; (making the record type extensible) so that the key part is ignored if present.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1867 created</title>
   <pubDate>Wed, 12 Mar 2025 18:02:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1867</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1867</guid>
   <description>&lt;div&gt;&lt;p&gt;1341 Drop position from fold callbacks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Following up on issue 1341, we decided to drop the position argument from the 4 fold functions.&lt;/p&gt;
&lt;p&gt;Most of the changes in this PR are dealing with the collateral damage - changes to "formal equivalents" of other functions that previously relied on fold-left having the position available to the callback function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1866 created</title>
   <pubDate>Wed, 12 Mar 2025 08:15:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1866</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1866</guid>
   <description>&lt;div&gt;&lt;p&gt;Ambiguities introduced by #1864&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The grammar check done by &lt;a href="https://github.com/GuntherRademacher/rex-parser-generator/tree/main/docs/sample-grammars/XQuery-40"&gt;RExification of XQuery and XPath 4.0 Grammars&lt;/a&gt; has detected a bunch of LALR(2) conflicts caused by the recent addition of &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#doc-xquery40-UnaryLookup-TypeSpecifier"&gt;&lt;code&gt;TypeSpecifier&lt;/code&gt;&lt;/a&gt; to the &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#doc-xquery40-UnaryLookup-KeySpecifier"&gt;&lt;code&gt;KeySpecifier&lt;/code&gt;&lt;/a&gt; production.&lt;/p&gt;
&lt;p&gt;In fact these are ambiguities between following being used as a &lt;code&gt;QName&lt;/code&gt; (via &lt;code&gt;EQName&lt;/code&gt;, &lt;code&gt;TypeName&lt;/code&gt;), or as a keyword:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attribute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document-node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty-sequence&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;item&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;namespace-node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;processing-instruction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;record&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;schema-attribute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;schema-element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E.g. &lt;code&gt;element&lt;/code&gt; in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$A?~element()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;can be parsed as an element test, &lt;code&gt;element()&lt;/code&gt;, or as a type name &lt;code&gt;element&lt;/code&gt; followed by a &lt;code&gt;PositionalArgumentList&lt;/code&gt;. This is similar to what the "reserved-function-names" constraint covers, but that does not apply here because there is no function name involved.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;SequenceType&lt;/code&gt; in &lt;code&gt;TypeSpecifier&lt;/code&gt;, enclosed in extra parenthese, does not present a problem, so my proposal is to drop &lt;code&gt;ItemType&lt;/code&gt; from &lt;code&gt;TypeSpecifier&lt;/code&gt; and rewrite the production to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TypeSpecifier
         ::= '~' '(' SequenceType ')' 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1865 created</title>
   <pubDate>Tue, 11 Mar 2025 20:37:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1865</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1865</guid>
   <description>&lt;div&gt;&lt;p&gt;Callback functions, position argument: consistency&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;In https://github.com/qt4cg/qtspecs/pull/1735#issuecomment-2715090198, it was decided to remove the position argument from &lt;code&gt;fn:fold-left&lt;/code&gt; and &lt;code&gt;fn:fold-right&lt;/code&gt;. → #1867&lt;/li&gt;
&lt;li&gt;As maps are ordered now, we should add the position argument to iterative map functions (e.g., &lt;code&gt;map:for-each&lt;/code&gt;; basically all functions for which equivalent sequence and array functions exist).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1227 closed</title>
   <pubDate>Tue, 11 Mar 2025 17:41:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1227</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1227</guid>
   <description>&lt;div&gt;&lt;p&gt;150 PR resubmission for fn ranks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1456 closed</title>
   <pubDate>Tue, 11 Mar 2025 17:04:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1456</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1456</guid>
   <description>&lt;div&gt;&lt;p&gt;Filtering by type in lookup expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1864 closed</title>
   <pubDate>Tue, 11 Mar 2025 17:04:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1864</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1864</guid>
   <description>&lt;div&gt;&lt;p&gt;1456 Lookup expressions filtered by type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1740 closed</title>
   <pubDate>Tue, 11 Mar 2025 17:02:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1740</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1740</guid>
   <description>&lt;div&gt;&lt;p&gt;1725b Further elaboration of duplicates handling in maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1735 closed</title>
   <pubDate>Tue, 11 Mar 2025 17:02:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1735</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1735</guid>
   <description>&lt;div&gt;&lt;p&gt;1341 Drop $position callback from many functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1794 closed</title>
   <pubDate>Tue, 11 Mar 2025 15:16:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1794</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1794</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup: select all except&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1778 closed</title>
   <pubDate>Mon, 10 Mar 2025 16:22:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1778</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1778</guid>
   <description>&lt;div&gt;&lt;p&gt;1456 Lookup expressions filtered by type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1864 created</title>
   <pubDate>Mon, 10 Mar 2025 16:21:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1864</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1864</guid>
   <description>&lt;div&gt;&lt;p&gt;1456 Lookup expressions filtered by type&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1456&lt;/p&gt;
&lt;p&gt;Technically identical to PR #1778, but reworked because it had become impossible to resolve the merge conflicts.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1863 created</title>
   <pubDate>Mon, 10 Mar 2025 05:49:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1863</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1863</guid>
   <description>&lt;div&gt;&lt;p&gt;add \U \u L \u \E to replace() (case conversion)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Many systems using regular expressions support case conversion in the replacement strings.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sed -e 's/[aA]*/\L\u&amp;amp;/'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;given AAA as input, produces Aaa.&lt;/p&gt;
&lt;p&gt;It’s not 100% clear to me its worth adding, since an action function can do the same thing with more or less work,
but for reference,&lt;/p&gt;
&lt;p&gt;\U turns the replaced text into upper case until \E, \L, or the end of the replacement string
\L turns the replaces text to lower case in the same way
\u and \l affect the single next character and operate independently of \U, \L, \E.&lt;/p&gt;
&lt;p&gt;I wrote up some more precise spec text and can make a pull request; the case in the sed example above is common in text conversion projects but slightly tricky to get right with a function,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          fn { upper-case(substring(., 1, 1)) || lower-case(substring(., 2) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is simple, but consider &lt;code&gt;\2 \L\u\1\3&lt;/code&gt; as a function, where &lt;code&gt;\1&lt;/code&gt; may be empty.&lt;/p&gt;
&lt;p&gt;Overall i don’t have strong feelings either way, except that supporting them may help people migrate from other systems or languages. \E feels uncomfortably procedural. In Perl and libpcre i think, \E also turns of \Q (which disables all metadata characters up until \E).&lt;/p&gt;
&lt;p&gt;Like &amp;lt; and &amp;gt; in patterns, \L and friends can be emulated with some care, but that’s true of a lot of regular expression syntax, and one point of the shorthands (as i see it) is to move the feature towards being accessible by people with less of a programming background.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1862 created</title>
   <pubDate>Sun, 9 Mar 2025 18:55:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1862</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1862</guid>
   <description>&lt;div&gt;&lt;p&gt;Records: consider order&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think we should make the order of record entries part of instance checks and coercion rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It will be less confusing for users if records have a well-defined order (similar to objects in OOL), in particular if records are serialized.&lt;/li&gt;
&lt;li&gt;It will be much easier for implementations to access record entries by their internal index if the order is statically known. There will still be opportunities for optimizing lookups in arbitrary maps (index-based access has generally become easier with maps being ordered).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1861 created</title>
   <pubDate>Fri, 7 Mar 2025 08:27:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1861</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1861</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:next-match with-all-params&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; instruction is useful when writing local templates to customize the behavior of an imported XSLT. Unfortunately, there is a limitation due to the fact that &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; does not pass along parameters unless the parameters are defined as tunneling or the parameters are explicitly coded using &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fact that &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; does not automatically pass along parameters can be surprising or lead to cumbersome workarounds, and limits how &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; can be used when writing local templates to customize the behavior of imported XSLT.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In situations where parameters are defined in an imported XSLT it might not be feasible to change parameters to tunneling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In situations where a variety of parameters might be in scope when a template that uses &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; is invoked, currently each parameter needs to be explicitly coded using &lt;code&gt;&amp;lt;xsl:param&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt; in &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt;, even though the parameters might not be relevant to the purpose or logic of the template. This may lead to fragile and less maintainable code and increases the cognitive load for developers, especially when working with complex, multi-layered stylesheets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This proposal aims to simplify the use of the &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; instruction while being backwards compatible.&lt;/p&gt;
&lt;h2&gt;Proposal&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add an option to &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; to enable passing along all parameters. This option might take the form of a new optional attribute on &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; named &lt;code&gt;with-all-params&lt;/code&gt; (this name is similar to the existing element name &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt;) that takes a yes/no (or Boolean) value and defaults to no (false).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An instruction &lt;code&gt;&amp;lt;xsl:next-match with-all-params="no"/&amp;gt;&lt;/code&gt; would operate the same as &lt;code&gt;&amp;lt;xsl:next-match/&amp;gt;&lt;/code&gt; currently does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An instruction &lt;code&gt;&amp;lt;xsl:next-match with-all-params="yes"/&amp;gt;&lt;/code&gt; would operate the same as &lt;code&gt;&amp;lt;xsl:next-match/&amp;gt;&lt;/code&gt; currently does with the difference that all parameters that were in scope when the current template was invoked will remain in scope for the next matching template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An instruction &lt;code&gt;&amp;lt;xsl:next-match with-all-params="yes"&amp;gt;&lt;/code&gt; that contains &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt; should operate the same as described in the preceding paragraph with the difference that parameters defined by &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt; will also be in scope for the next matching template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a parameter defined by &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt; within &lt;code&gt;&amp;lt;xsl:next-match with-all-params="yes"&amp;gt;&lt;/code&gt; has the same name as a parameter that was in scope when the current template was invoked, then the effective value of that parameter should be the value defined by &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt;. This will allow a template to override parameters when necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize, &lt;code&gt;&amp;lt;xsl:next-match with-all-params="yes"&amp;gt;&lt;/code&gt; should invoke the next matching template and automatically pass along all parameters that were in scope when the current template was invoked, and optionally allow using &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt; to set additional parameters or modify parameter values.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Given this input document:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- input.xml --&amp;gt;
&amp;lt;section&amp;gt;
    &amp;lt;p&amp;gt;hello&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This stylesheet &lt;code&gt;import.xsl&lt;/code&gt; provides a set of base templates. The template matching element "p" uses &lt;code&gt;&amp;lt;xsl:next-match/&amp;gt;&lt;/code&gt; in it's current (default) operation.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- import.xsl --&amp;gt;
&amp;lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="3.0" expand-text="yes"&amp;gt;
    
    &amp;lt;xsl:output indent="yes"/&amp;gt;
    &amp;lt;xsl:mode on-no-match="shallow-copy"/&amp;gt;
    
    &amp;lt;xsl:template match="section"&amp;gt;
        &amp;lt;section&amp;gt;
            &amp;lt;xsl:apply-templates&amp;gt;
                &amp;lt;xsl:with-param name="a" select="'a'"/&amp;gt;
                &amp;lt;xsl:with-param name="b" select="'b'"/&amp;gt;
            &amp;lt;/xsl:apply-templates&amp;gt;
        &amp;lt;/section&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    
    &amp;lt;xsl:template match="p"&amp;gt;
        &amp;lt;xsl:param name="a"/&amp;gt;
        &amp;lt;xsl:param name="b"/&amp;gt;
        &amp;lt;xsl:param name="c"/&amp;gt;
        &amp;lt;p&amp;gt;a {$a}&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;b {$b}&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;c {$c}&amp;lt;/p&amp;gt;
        &amp;lt;xsl:next-match/&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the output of the above stylesheet &lt;code&gt;import.xsl&lt;/code&gt; and the input document:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;section&amp;gt;
   &amp;lt;p&amp;gt;a a&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;b b&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;c &amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;hello&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This stylesheet &lt;code&gt;before.xsl&lt;/code&gt; imports the stylesheet &lt;code&gt;import.xsl&lt;/code&gt; and defines a template to customize how &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements are processed. The parameter &lt;code&gt;$a&lt;/code&gt; needs to be intercepted and forwarded even though this template is not doing anything with &lt;code&gt;$a&lt;/code&gt;. The parameter &lt;code&gt;$b&lt;/code&gt; is overridden, and the parameter &lt;code&gt;$c&lt;/code&gt; is added within &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- before.xsl --&amp;gt;
&amp;lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="3.0"&amp;gt;
    
    &amp;lt;xsl:import href="import.xsl"/&amp;gt;
    
    &amp;lt;xsl:template match="p"&amp;gt;
        &amp;lt;xsl:param name="a"/&amp;gt;
        &amp;lt;p&amp;gt;customization&amp;lt;/p&amp;gt;
        &amp;lt;xsl:next-match&amp;gt;
            &amp;lt;xsl:with-param name="a" select="$a"/&amp;gt;
            &amp;lt;xsl:with-param name="b" select="'buzz'"/&amp;gt;
            &amp;lt;xsl:with-param name="c" select="'c'"/&amp;gt;
        &amp;lt;/xsl:next-match&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This stylesheet &lt;code&gt;after.xsl&lt;/code&gt; does the same thing as the previous stylesheet but uses &lt;code&gt;with-all-params="yes"&lt;/code&gt;. The template does not need to intercept and forward the parameter &lt;code&gt;$a&lt;/code&gt; because this is handled automatically by &lt;code&gt;with-all-params="yes"&lt;/code&gt;. The parameter &lt;code&gt;$b&lt;/code&gt; is overridden, and the parameter &lt;code&gt;$c&lt;/code&gt; is added within &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; in the same way as the previous stylesheet. Although this is a small example in which the parameter &lt;code&gt;$a&lt;/code&gt; is the only savings, the benefit of  &lt;code&gt;with-all-params="yes"&lt;/code&gt; can be significant in scenarios where there are more parameters.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- after.xsl --&amp;gt;
&amp;lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="4.0"&amp;gt;
    
    &amp;lt;xsl:import href="import.xsl"/&amp;gt;
    
    &amp;lt;xsl:template match="p"&amp;gt;
        &amp;lt;p&amp;gt;customization&amp;lt;/p&amp;gt;
        &amp;lt;xsl:next-match with-all-params="yes"&amp;gt;
            &amp;lt;xsl:with-param name="b" select="'buzz'"/&amp;gt;
            &amp;lt;xsl:with-param name="c" select="'c'"/&amp;gt;
        &amp;lt;/xsl:next-match&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two stylesheets above (&lt;code&gt;before.xsl&lt;/code&gt; and &lt;code&gt;after.xsl&lt;/code&gt;) should produce the same output.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- output.xml --&amp;gt;
&amp;lt;section&amp;gt;
   &amp;lt;p&amp;gt;customization&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;a a&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;b buzz&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;c c&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;hello&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1801 closed</title>
   <pubDate>Wed, 5 Mar 2025 19:07:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1801</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1801</guid>
   <description>&lt;div&gt;&lt;p&gt;1798 Function fn:function-identity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1860 created</title>
   <pubDate>Wed, 5 Mar 2025 17:51:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1860</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1860</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-xml: DTDs, external resources&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The text doesn’t say much about what DTD validation means. Is my assumption correct that it boils down to a &lt;code&gt;SAXParserFactory.setValidating&lt;/code&gt; call in Java?&lt;/p&gt;
&lt;p&gt;What about DTDs in general? Given the following snippets (using the default &lt;code&gt;false&lt;/code&gt; for DTD validation)…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;!-- xml.dtd --&amp;gt;
&amp;lt;!ENTITY arrow "→"&amp;gt;

parse-xml(`
  &amp;lt;!DOCTYPE xml SYSTEM 'xml.dtd'&amp;gt;
  &amp;lt;xml&amp;gt;&amp;amp;arrow;&amp;lt;/xml&amp;gt;`
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…should the result be &lt;code&gt;&amp;lt;xml/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;xml&amp;gt;→&amp;lt;/xml&amp;gt;&lt;/code&gt;, or an error? In other words, should the (potentially external) &lt;code&gt;xml.dtd&lt;/code&gt; resource be resolved and interpreted?&lt;/p&gt;
&lt;p&gt;Maybe we should introduce an additional &lt;code&gt;DTD&lt;/code&gt; option (or options?) to control the loading of external DTDs and the handling of entities, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://apache.org/xml/features/nonvalidating/load-external-dtd
http://xml.org/sax/features/external-general-entities
http://xml.org/sax/features/external-parameter-entities
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thoughts are welcome.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1859 created</title>
   <pubDate>Wed, 5 Mar 2025 15:36:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1859</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1859</guid>
   <description>&lt;div&gt;&lt;p&gt;Question on `fn:chain` and `err:FOAP0001`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Per #1280,  &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-apply"&gt;&lt;code&gt;fn:apply&lt;/code&gt;&lt;/a&gt; has been changed to allow the number of arguments to be greater than the arity of the function.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-chain"&gt;&lt;code&gt;fn:chain&lt;/code&gt;&lt;/a&gt; is defined in terms of &lt;code&gt;fn:apply&lt;/code&gt;, and it also refers to the error code &lt;code&gt;err:FOAP0001&lt;/code&gt; which belongs to &lt;code&gt;fn:apply&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However the condition for the error differs between the two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fn:chain&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An error [&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#ERRFOAP0001"&gt;err:FOAP0001&lt;/a&gt;] is raised if the arity of any function $f in $functions is different from the number of members in the array that is passed to &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-apply"&gt;fn:apply&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fn:apply&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A dynamic error is raised if the arity of the function $function is greater than the size of the array $arguments ([&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#ERRFOAP0001"&gt;err:FOAP0001&lt;/a&gt;]).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also in &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#error-summary"&gt;B Error Codes&lt;/a&gt;, &lt;code&gt;err:FOAP001&lt;/code&gt; still asks for the arity to exaclty match the number of arguments:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;err:FOAP0001, Wrong number of arguments.&lt;/p&gt;
&lt;p&gt;Raised when &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-apply"&gt;fn:apply&lt;/a&gt; is called and the arity of the supplied function is not the same as the number of members in the supplied array.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Should not the description of &lt;code&gt;fn:chain&lt;/code&gt; and the error summary be adapted to the changed behaviour of &lt;code&gt;fn:apply&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1853 closed</title>
   <pubDate>Tue, 4 Mar 2025 18:57:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1853</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1853</guid>
   <description>&lt;div&gt;&lt;p&gt;1845 Revised design of methods to use . rather than $this&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1845 closed</title>
   <pubDate>Tue, 4 Mar 2025 18:14:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1845</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1845</guid>
   <description>&lt;div&gt;&lt;p&gt;Should we add additional syntactic sugar for use with %method functions?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1820 closed</title>
   <pubDate>Tue, 4 Mar 2025 17:21:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1820</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1820</guid>
   <description>&lt;div&gt;&lt;p&gt;Delta markers in collapsed TOC&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1838 closed</title>
   <pubDate>Tue, 4 Mar 2025 17:21:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1838</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1838</guid>
   <description>&lt;div&gt;&lt;p&gt;1820 Attempt to add change markup in collapsed ToC&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1796 closed</title>
   <pubDate>Tue, 4 Mar 2025 17:18:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1796</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1796</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow fn:invisible-xml to return a function that returns an item()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1839 closed</title>
   <pubDate>Tue, 4 Mar 2025 17:18:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1839</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1839</guid>
   <description>&lt;div&gt;&lt;p&gt;Relax the return type of the Invisible XML parsing function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1849 closed</title>
   <pubDate>Tue, 4 Mar 2025 17:15:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1849</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1849</guid>
   <description>&lt;div&gt;&lt;p&gt;Reduce the indentation in the ToC&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1850 closed</title>
   <pubDate>Tue, 4 Mar 2025 17:12:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1850</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1850</guid>
   <description>&lt;div&gt;&lt;p&gt;Actions from meeting 111&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1771 closed</title>
   <pubDate>Tue, 4 Mar 2025 17:10:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1771</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1771</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: map order&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1855 closed</title>
   <pubDate>Tue, 4 Mar 2025 17:10:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1855</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1855</guid>
   <description>&lt;div&gt;&lt;p&gt;1771 Add option for deep-equal to consider map order&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1847 closed</title>
   <pubDate>Tue, 4 Mar 2025 16:23:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1847</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1847</guid>
   <description>&lt;div&gt;&lt;p&gt;%method functions: explicit self reference?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1858 created</title>
   <pubDate>Tue, 4 Mar 2025 12:04:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1858</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1858</guid>
   <description>&lt;div&gt;&lt;p&gt;Initial xsl:record&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;An initial draft of the xsl:record instruction, for discussion&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1656 closed</title>
   <pubDate>Mon, 3 Mar 2025 18:39:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1656</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1656</guid>
   <description>&lt;div&gt;&lt;p&gt;Ordered Maps: Updates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1829 closed</title>
   <pubDate>Mon, 3 Mar 2025 18:30:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1829</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1829</guid>
   <description>&lt;div&gt;&lt;p&gt;Problems with new arrow expression syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1854 closed</title>
   <pubDate>Mon, 3 Mar 2025 18:24:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1854</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1854</guid>
   <description>&lt;div&gt;&lt;p&gt;Can someone direct me to the motivating use case of objects?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1857 created</title>
   <pubDate>Mon, 3 Mar 2025 16:59:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1857</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1857</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-xml: `xinclude`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We should allow XInclude processing to be enabled/disabled, as it can potentially lead to memory leaks.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1835 closed</title>
   <pubDate>Mon, 3 Mar 2025 12:38:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1835</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1835</guid>
   <description>&lt;div&gt;&lt;p&gt;add zero-width assertions to regular expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1856 created</title>
   <pubDate>Mon, 3 Mar 2025 12:34:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1856</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1856</guid>
   <description>&lt;div&gt;&lt;p&gt;998 Add boundary and lookahead/behind assertions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Incorporates and supersedes #1835&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1836 closed</title>
   <pubDate>Sun, 2 Mar 2025 19:12:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1836</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1836</guid>
   <description>&lt;div&gt;&lt;p&gt;unparsed-text-lines() - line endings&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1855 created</title>
   <pubDate>Sun, 2 Mar 2025 19:06:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1855</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1855</guid>
   <description>&lt;div&gt;&lt;p&gt;1771 Add option for deep-equal to consider map order&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds an option for deep-equal to treat order of entries in a map as significant.&lt;/p&gt;
&lt;p&gt;Fix #1771&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1854 created</title>
   <pubDate>Fri, 28 Feb 2025 11:37:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1854</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1854</guid>
   <description>&lt;div&gt;&lt;p&gt;Can someone direct me to the motivating use case of objects?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There's a LOT of conversations about "this" and methods and really quite complex syntax, but (despite writing OO software for about 30+ years), I cant think of a motivating use case in the context of XSLT/XQuery.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in imperative languages with mutable state...yes&lt;/li&gt;
&lt;li&gt;in very large code bases requiring some abstraction/encapsulation - well maybe...there are probably easier ways to do this without 'objects'.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;this is the sort of canonical example people use (to illustrate simple technical points)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$rect := {'x': 10, 'y': 7, 'area': fn(){?x * ?y}}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;but actually I would write&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$rect := {'x': 10, 'y': 7, 'area': 10 * 7}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(and similarly write a data constructor for the record in that manner)&lt;/p&gt;
&lt;p&gt;i.e.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fn($x,$y){'x': $x, 'y': $y, 'area': $x * $y}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm not sure at the moment its worth the effort.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1853 created</title>
   <pubDate>Thu, 27 Feb 2025 10:38:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1853</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1853</guid>
   <description>&lt;div&gt;&lt;p&gt;1845 Revised design of methods to use . rather than $this&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Proposal is that in methods, the containing map should be bound to the context item rather than to the special variable $this, so fields of that map are referenced as &lt;code&gt;?x&lt;/code&gt; rather than &lt;code&gt;$this?x&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1852 created</title>
   <pubDate>Thu, 27 Feb 2025 08:56:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1852</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1852</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:values-except: Return atomic values that occur in A but not in B&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;fn:distinct-values&lt;/code&gt; can be used to perform a &lt;code&gt;union&lt;/code&gt; on atomic values:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: returns 1 to 5 :)
let $one := 1 to 4, $two := 2 to 5
return distinct-values(($one, $two))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fn:duplicate-values&lt;/code&gt; can be used for &lt;code&gt;intersect&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: returns 2 to 4 :)
let $one := 1 to 4, $two := 2 to 5
return duplicate-values(($one, $two))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A (roughly) equivalent alternative is &lt;code&gt;$one[. = $two]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I think we should add an equivalent for &lt;code&gt;except&lt;/code&gt; (it requires 2 arguments instead of 1):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:values-except(
  $values     as xs:anyAtomicType*,
  $exclude    as xs:anyAtomicType*,
  $collation  as xs:string?         := fn:default-collation()
) as xs:anyAtomicType*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: returns 1 :)
let $one := 1 to 4, $two := 2 to 5
return values-except($one, $two)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In principle, this function can also be written as &lt;code&gt;$one[not(. = $two)]&lt;/code&gt;, but a dedicated function will be easier to understand for users and easier to optimize for processors.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1247 closed</title>
   <pubDate>Wed, 26 Feb 2025 23:55:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1247</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1247</guid>
   <description>&lt;div&gt;&lt;p&gt;`??type(T)` in lookup expressions - shortcuts&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1851 created</title>
   <pubDate>Wed, 26 Feb 2025 15:42:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1851</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1851</guid>
   <description>&lt;div&gt;&lt;p&gt;Questions on `fn:atomic-type-annotation`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;These questions came up while working on &lt;code&gt;fn:atomic-type-annotation&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what is the &lt;code&gt;variety&lt;/code&gt; of &lt;code&gt;xs:anySimpleType&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;should not &lt;code&gt;constructor&lt;/code&gt; be absent in an &lt;code&gt;fn:schema-type-record&lt;/code&gt; describing &lt;code&gt;xs:QName&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are the detailed observations:&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;fn:schema-type-record?variety&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Consider the following query:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;  (
    &amp;lt;x&amp;gt;42&amp;lt;/x&amp;gt;
    =&amp;gt; fn:atomic-type-annotation()
  )
  ?base-type()
  ?base-type()
  ?variety
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My interpretation is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;x&lt;/code&gt; element node is atomized to a value of type &lt;code&gt;xs:untypedAtomic&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;so &lt;code&gt;fn:atomic-type-annotation&lt;/code&gt; returns the information for &lt;code&gt;xs:untypedAtomic&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;the base type of that is &lt;code&gt;xs:anyAtomicType&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;the base type of that is &lt;code&gt;xs:anySimpleType&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;per &lt;a href="https://www.w3.org/TR/xmlschema11-1/#sec-anySimpleType"&gt;XML schema 1.1, 3.16.7.1 xs:anySimpleType&lt;/a&gt;, the &lt;code&gt;{variety}&lt;/code&gt; of &lt;code&gt;xs:anySimpleType&lt;/code&gt; is absent,&lt;/li&gt;
&lt;li&gt;so &lt;code&gt;variety&lt;/code&gt; should be absent in an &lt;code&gt;fn:schema-type-record&lt;/code&gt; describing &lt;code&gt;xs:anySimpleType&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;the result thus should be an empty sequence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to the &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#schema-type-record"&gt;current spec&lt;/a&gt;, &lt;code&gt;variety&lt;/code&gt; must always be present with a value of type &lt;code&gt;enum("atomic", "list", "union", "empty", "simple", "element-only", "mixed")&lt;/code&gt;, but also correspond to the &lt;code&gt;{variety}&lt;/code&gt; of the simple type in the XSD component model.&lt;/p&gt;
&lt;p&gt;Should not &lt;code&gt;variety&lt;/code&gt; be optional, and omitted for &lt;code&gt;xs:anySimpleType&lt;/code&gt;?&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;fn:schema-type-record?constructor&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The spec says this about &lt;code&gt;constructor&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The field is absent for complex types and for the abstract types xs:anyAtomicType, xs:anySimpleType, and xs:NOTATION. It is also absent for all namespace-sensitive types, that is, types derived from xs:QName or xs:NOTATION.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The formulation does not include &lt;code&gt;xs:QName&lt;/code&gt;, but should not its constructor be absent for the same reasons as for the types derived from it?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1850 created</title>
   <pubDate>Wed, 26 Feb 2025 12:36:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1850</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1850</guid>
   <description>&lt;div&gt;&lt;p&gt;Actions from meeting 111&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;[ ] QT4CG-111-01: MK to review the editorial comments on PR #1837 and then merge the PR.&lt;/p&gt;
&lt;p&gt;Done (along with a couple of other minor corrections noted in passing)&lt;/p&gt;
&lt;p&gt;[ ] QT4CG-111-02: MK to fix the typo $in as xs:double+ and 1.3. 1.4 that middle “.” should be a “,”&lt;/p&gt;
&lt;p&gt;Already done before the PR was merged&lt;/p&gt;
&lt;p&gt;[ ] QT4CG-111-03: MK to add a %method example that uses the arrow syntax.&lt;/p&gt;
&lt;p&gt;Done (though the example isn't especially convincing).&lt;/p&gt;
&lt;p&gt;Also added another couple of examples and notes in passing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1849 created</title>
   <pubDate>Wed, 26 Feb 2025 09:57:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1849</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1849</guid>
   <description>&lt;div&gt;&lt;p&gt;Reduce the indentation in the ToC&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1848 created</title>
   <pubDate>Wed, 26 Feb 2025 08:31:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1848</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1848</guid>
   <description>&lt;div&gt;&lt;p&gt;Define regular expressions using XSD 1.1 as baseline&lt;/p&gt;…failed to parse issue text…&lt;/div&gt;</description>
</item><item>
   <title>Issue #1800 closed</title>
   <pubDate>Tue, 25 Feb 2025 21:17:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1800</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1800</guid>
   <description>&lt;div&gt;&lt;p&gt;The `=?&amp;gt;` lookup arrow expression operator is weird, difficult to use, difficult to understand, difficult to read and unnatural&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1817 closed</title>
   <pubDate>Tue, 25 Feb 2025 21:17:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1817</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1817</guid>
   <description>&lt;div&gt;&lt;p&gt;1800 Methods&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1843 closed</title>
   <pubDate>Tue, 25 Feb 2025 18:20:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1843</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1843</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: TOC texts&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1847 created</title>
   <pubDate>Tue, 25 Feb 2025 18:14:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1847</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1847</guid>
   <description>&lt;div&gt;&lt;p&gt;%method functions: explicit self reference?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a discussion issue; I am torn and would be interested in feedback:&lt;/p&gt;
&lt;p&gt;With the just added &lt;code&gt;%method&lt;/code&gt; annotation, basically two things happen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An implicit &lt;code&gt;$this&lt;/code&gt; parameter is preprended to the remaining parameters of a function.&lt;/li&gt;
&lt;li&gt;The current map will be bound to the first parameter by the lookup operator.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The inner workings of the example in the spec were not entierly obvious in today’s meeting…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $area := %method fn() { $this?x * $this?y }
return $area({ 'x': 3, 'y': 4 })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and I am wondering if we are not more flexible by making the self-referencing parameter explicit. This way, it would be up to the user to decide how the parameter is called…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $number := { 'value': 3, 'inc': %method fn($self) { $self?value + 1 } }
return $number?inc()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…the focus function syntax could be used alternatively…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $number := { 'value': 3, 'inc': %method fn { ?value + 1 } }
return $number?inc()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and it would allow for a stricter typing (&lt;code&gt;$this as map(*)&lt;/code&gt; is not very specific), and thus for better error reporting:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare record coord(
  x as xs:double,
  y as xs:double,
  product := %method fn($coord as coord) { $coord?x * $coord?y }
);
coord(3, 4)?product()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, it would cause new issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%method fn() {}&lt;/code&gt; would need to be made illegal&lt;/li&gt;
&lt;li&gt;The type of the first argument would need to be &lt;code&gt;map(*)&lt;/code&gt; or a subtype of it.&lt;/li&gt;
&lt;li&gt;Users may be led to write…&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $map := { 'fn': %method fn($a, $b) { $a * $b } }
return $map?fn(2, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the other hand, the existence of the &lt;code&gt;%method&lt;/code&gt; annotation should indicate that this function type differs from others.&lt;/p&gt;
&lt;p&gt;If we stick with the invisible &lt;code&gt;$this&lt;/code&gt; parameter, I wonder what &lt;code&gt;function-arity(%method fn() {})&lt;/code&gt; is supposed to return?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1846 created</title>
   <pubDate>Tue, 25 Feb 2025 17:48:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1846</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1846</guid>
   <description>&lt;div&gt;&lt;p&gt;%method functions, dynamic function calls&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With the #1817, the &lt;code&gt;%method&lt;/code&gt; annotation was introduced for functions. It is interpreted by the lookup operator:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $number := { 'value': -3, 'abs': %method fn() { abs($this?value) } }
return $number?abs()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think we should extend this mechanism to dynamic function calls, as many people use the constructs interchangeably:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;return $number('abs')()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I agree that the binding mechanism should not apply for &lt;code&gt;map:get&lt;/code&gt; or any other map functions and iterations.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1830 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:32:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1830</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1830</guid>
   <description>&lt;div&gt;&lt;p&gt;1829 Reintroduce restrictions on RHS of `=&amp;gt;`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1815 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:29:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1815</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1815</guid>
   <description>&lt;div&gt;&lt;p&gt;Function annotations on function items&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1828 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:29:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1828</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1828</guid>
   <description>&lt;div&gt;&lt;p&gt;1815 Add more detail on annotations of function items&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1834 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:27:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1834</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1834</guid>
   <description>&lt;div&gt;&lt;p&gt;json-lines - refinement&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1837 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:27:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1837</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1837</guid>
   <description>&lt;div&gt;&lt;p&gt;1834 Additional clarification on JSON lines&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #583 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:24:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/583</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-583</guid>
   <description>&lt;div&gt;&lt;p&gt;(array|map):replace → *:substitute or *:change&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1833 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:24:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1833</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1833</guid>
   <description>&lt;div&gt;&lt;p&gt;583 Drop map:replace and array:replace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1816 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:21:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1816</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1816</guid>
   <description>&lt;div&gt;&lt;p&gt;Programmatic partial application&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1825 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:21:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1825</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1825</guid>
   <description>&lt;div&gt;&lt;p&gt;1816 New function fn:partial-apply&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1818 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:18:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1818</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1818</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar problem introduced by #1802&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1826 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:18:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1826</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1826</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix grammar bug #1818&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1823 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:15:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1823</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1823</guid>
   <description>&lt;div&gt;&lt;p&gt;Clearer top-level section headings in F+O&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1824 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:15:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1824</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1824</guid>
   <description>&lt;div&gt;&lt;p&gt;1823 Revise top-level headings in F+O spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1845 created</title>
   <pubDate>Tue, 25 Feb 2025 17:14:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1845</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1845</guid>
   <description>&lt;div&gt;&lt;p&gt;Should we add additional syntactic sugar for use with %method functions?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;During &lt;a href="https://qt4cg.org/meeting/minutes/2025/02-25.html"&gt;meeting 111&lt;/a&gt;, DN was arguing for additional syntactic sugar when his connection to the call ended abruptly. This issue is to make sure we come back to those discussions.&lt;/p&gt;
&lt;p&gt;Specifically, should we allow &lt;code&gt;^x&lt;/code&gt; as an abbreviation for &lt;code&gt;$this?x&lt;/code&gt; ?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1813 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:12:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1813</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1813</guid>
   <description>&lt;div&gt;&lt;p&gt;Reorganise top-level sections in XDM&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1814 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:12:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1814</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1814</guid>
   <description>&lt;div&gt;&lt;p&gt;1813 Reorganise the XDM spec at top level&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1811 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:09:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1811</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1811</guid>
   <description>&lt;div&gt;&lt;p&gt;Add note concerning non-XML characters in character maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1812 closed</title>
   <pubDate>Tue, 25 Feb 2025 17:09:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1812</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1812</guid>
   <description>&lt;div&gt;&lt;p&gt;1811 Add note regarding non-XML chars in xsl:output-character&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1844 created</title>
   <pubDate>Tue, 25 Feb 2025 16:18:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1844</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1844</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop mapping arrow operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;To reduce the number of new operators, I suggest removing the mapping arrow operator &lt;code&gt;=!&amp;gt;&lt;/code&gt;, in favor of the recently added &lt;code&gt;-&amp;gt;&lt;/code&gt; operator (which now allows us to arbitrarily create chains for single items and sequences).&lt;/p&gt;
&lt;p&gt;Related: https://github.com/qt4cg/qtspecs/issues/1685&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1843 created</title>
   <pubDate>Tue, 25 Feb 2025 15:35:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1843</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1843</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: TOC texts&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XQFO TOC is overly verbose, and inconsistent nevertheless. With the addition of arrows and symbols, many headers stretch across several lines.&lt;/p&gt;
&lt;p&gt;If no one objects, I will remove all the redundant "Functions ..." strings:&lt;/p&gt;
&lt;p&gt;Current:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Functions on nodes and node sequences&lt;/li&gt;
&lt;li&gt;Errors and diagnostics&lt;/li&gt;
&lt;li&gt;Functions and operators on numerics&lt;/li&gt;
&lt;li&gt;Functions on strings&lt;/li&gt;
&lt;li&gt;Functions that manipulate URIs&lt;/li&gt;
&lt;li&gt;Functions and operators on Boolean values&lt;/li&gt;
&lt;li&gt;Functions and operators on durations&lt;/li&gt;
&lt;li&gt;Functions and operators on dates and times&lt;/li&gt;
&lt;li&gt;Functions related to QNames
...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Proposed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Nodes&lt;/li&gt;
&lt;li&gt;Errors and diagnostics&lt;/li&gt;
&lt;li&gt;Numerics&lt;/li&gt;
&lt;li&gt;Strings&lt;/li&gt;
&lt;li&gt;URIs&lt;/li&gt;
&lt;li&gt;Boolean values&lt;/li&gt;
&lt;li&gt;Durations&lt;/li&gt;
&lt;li&gt;Dates and times&lt;/li&gt;
&lt;li&gt;QNames
...&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1842 closed</title>
   <pubDate>Tue, 25 Feb 2025 09:14:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1842</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1842</guid>
   <description>&lt;div&gt;&lt;p&gt;This is a test of the emergency broadcast system. This is only a test.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1842 created</title>
   <pubDate>Tue, 25 Feb 2025 09:13:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1842</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1842</guid>
   <description>&lt;div&gt;&lt;p&gt;This is a test of the emergency broadcast system. This is only a test.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Had this been a real emergency, we would have fled in terror and you would not have been informed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1840 closed</title>
   <pubDate>Tue, 25 Feb 2025 09:13:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1840</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1840</guid>
   <description>&lt;div&gt;&lt;p&gt;GH action remove-label-on-reopen.yml&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1841 closed</title>
   <pubDate>Tue, 25 Feb 2025 09:13:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1841</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1841</guid>
   <description>&lt;div&gt;&lt;p&gt;Action to remove label on reopen&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1841 created</title>
   <pubDate>Tue, 25 Feb 2025 09:12:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1841</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1841</guid>
   <description>&lt;div&gt;&lt;p&gt;Action to remove label on reopen&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #1840&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1840 created</title>
   <pubDate>Mon, 24 Feb 2025 21:03:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1840</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1840</guid>
   <description>&lt;div&gt;&lt;p&gt;GH action remove-label-on-reopen.yml&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In response to the mailing list post by @ndw: https://lists.w3.org/Archives/Public/public-xslt-40/2025Feb/0024.html&lt;/p&gt;
&lt;p&gt;This is untested, but it might at least serve as an inspiration how to avoid the unwanted tag in an automated manner.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1839 created</title>
   <pubDate>Mon, 24 Feb 2025 17:09:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1839</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1839</guid>
   <description>&lt;div&gt;&lt;p&gt;Relax the return type of the Invisible XML parsing function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1796&lt;/p&gt;
&lt;p&gt;This change does not appear to change any test results. (In other words, none of our tests checked that the return type was explicitly a document node.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1838 created</title>
   <pubDate>Mon, 24 Feb 2025 15:59:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1838</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1838</guid>
   <description>&lt;div&gt;&lt;p&gt;1820 Attempt to add change markup in collapsed ToC&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1820&lt;/p&gt;
&lt;p&gt;This PR updates the styling so that a small "Δ" is added to the expand arrow when there are changes or additions in the concealed subsections. It's smaller and not blue. I could argue that this is on purpose so that the marking is different and perhaps more subtle. But the truth is, it was just easier to add the Δ without any markup that would make it larger or blue.&lt;/p&gt;
&lt;p&gt;I've opted to conceal the Δ when the ToC is "open" on the grounds that you can see what is or isn't marked new on the revealed subsctions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1827 closed</title>
   <pubDate>Mon, 24 Feb 2025 11:24:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1827</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1827</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath TOC: For and Let Expressions: whitespace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1831 closed</title>
   <pubDate>Mon, 24 Feb 2025 11:24:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1831</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1831</guid>
   <description>&lt;div&gt;&lt;p&gt;1827 Fix excess whitespace in TOC&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1837 created</title>
   <pubDate>Mon, 24 Feb 2025 10:07:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1837</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1837</guid>
   <description>&lt;div&gt;&lt;p&gt;1834 Additional clarification on JSON lines&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1834&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1836 created</title>
   <pubDate>Mon, 24 Feb 2025 09:42:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1836</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1836</guid>
   <description>&lt;div&gt;&lt;p&gt;unparsed-text-lines() - line endings&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The description of the unparsed-text-lines function contradicts itself regarding line endings.&lt;/p&gt;
&lt;p&gt;First it says that the function is equivalent to calling &lt;code&gt;unparsed-text()&lt;/code&gt; and applying &lt;code&gt;tokenize(., '\n')&lt;/code&gt; to the result.&lt;/p&gt;
&lt;p&gt;Then it says that it accepts x0A, x0D, or x0D0A as line endings.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1835 created</title>
   <pubDate>Mon, 24 Feb 2025 08:15:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1835</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1835</guid>
   <description>&lt;div&gt;&lt;p&gt;add zero-width assertions to regular expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Proposal for issues !998 and !1006 to add zero-width assertions - lookahead, lookbehind, and word boundary.&lt;/p&gt;
&lt;p&gt;Word boundaries use the already-defined \w and \W from XML Schema.&lt;/p&gt;
&lt;p&gt;The syntax for lookahead and lookbehind assertions supports the two most common variants, one using &amp;lt; and &amp;gt; and the other using &lt;code&gt;(*positive_lookahead:expr)&lt;/code&gt;, which is at least amenable to Web searches, and doesn’t need escaping in XSLT or XQuery.&lt;/p&gt;
&lt;p&gt;Note that word boundary &amp;lt; \b \B &amp;gt; assertions can be rewritten in terms of lookahead and lookbehind assertions.&lt;/p&gt;
&lt;p&gt;Perl has a more powerful form of \b and \B that can match grapheme clusters, the Unicode linebreaking algorithm, and more, but supporting that would require language and script based mechanisms; if the graphemes() function is added, it would be worth considering. For now, i made it an error to write \b{...} so that the support could be added later if wanted, and also so that copying regular expressions into XPath would raise an error for the unsupported feature.&lt;/p&gt;
&lt;p&gt;I will reopen !998 - if this is accepted i can produce test cases. Of course, i’m also happy to edit/rewrite etc.  The syntax is widely supported, although \K is i think not in libpcre (but, libpcre has looser restrictions on negative backward assertions).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1834 created</title>
   <pubDate>Sun, 23 Feb 2025 17:42:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1834</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1834</guid>
   <description>&lt;div&gt;&lt;p&gt;json-lines - refinement&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Some suggestions regarding support for json-lines:&lt;/p&gt;
&lt;p&gt;(a) The json-lines spec has no official standing. It might therefore be a good idea if we summarize its essentials, just in case it disappears off the web.
(b) The spec makes the final newline optional. Our test cases assume no final newline. We should probably mandate this for interoperability.
(c) We should tell people how to read files in json-lines format - specifically &lt;code&gt;unparsed-text-lines() ! parse-json()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1833 created</title>
   <pubDate>Fri, 21 Feb 2025 09:32:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1833</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1833</guid>
   <description>&lt;div&gt;&lt;p&gt;583 Drop map:replace and array:replace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #583&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1832 created</title>
   <pubDate>Fri, 21 Feb 2025 00:22:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1832</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1832</guid>
   <description>&lt;div&gt;&lt;p&gt;Associativity of Operators, especially "||" (Appendix A.5)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The associativity of the &lt;code&gt;||&lt;/code&gt; operator is given as "left-to-right" - it should surely be "either" (like comma, "or", and  "union").&lt;/p&gt;
&lt;p&gt;Other aspects of this table are questionable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The operator &lt;code&gt;?[]&lt;/code&gt; for filtering a map or array should probably be included.&lt;/li&gt;
&lt;li&gt;Arguably &lt;code&gt;=&amp;gt;&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; should be omitted because the RHS is not actually an expression, though it's true that if &lt;code&gt;A =&amp;gt; B =&amp;gt; C&lt;/code&gt; is allowed, then it means &lt;code&gt;(A =&amp;gt; B) =&amp;gt; C&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; are associative, it's only in conjunction with other operators that they aren't.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1831 created</title>
   <pubDate>Thu, 20 Feb 2025 21:10:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1831</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1831</guid>
   <description>&lt;div&gt;&lt;p&gt;1827 Fix excess whitespace in TOC&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1827&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1830 created</title>
   <pubDate>Thu, 20 Feb 2025 12:41:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1830</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1830</guid>
   <description>&lt;div&gt;&lt;p&gt;1829 Reintroduce restrictions on RHS of `=&amp;gt;`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Partial reversion of PR #1763&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1829 created</title>
   <pubDate>Thu, 20 Feb 2025 11:58:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1829</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1829</guid>
   <description>&lt;div&gt;&lt;p&gt;Problems with new arrow expression syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm hitting problems with implementing the changes in PR #1763&lt;/p&gt;
&lt;p&gt;The problem is that the &lt;code&gt;=&amp;gt;&lt;/code&gt; can now be followed by either a static function call or a dynamic function call, and I think we need unbounded lookahead to distinguish them.&lt;/p&gt;
&lt;p&gt;Consider&lt;/p&gt;
&lt;p&gt;&lt;code&gt;3 =&amp;gt; function-lookup(xs:QName('fn:abs'), 1)()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;at first sight the arrow appears to be followed by a static function call, &lt;code&gt;function-lookup(xs:QName('fn:abs'), 1)&lt;/code&gt;. But treating it as such causes a parsing error when we get to the &lt;code&gt;()&lt;/code&gt; - what we actually have here is a dynamic function call that starts with a static function call.&lt;/p&gt;
&lt;p&gt;I propose that we revert to allowing a dynamic function call only in the form&lt;/p&gt;
&lt;p&gt;a =&amp;gt; x ( argument-list )&lt;/p&gt;
&lt;p&gt;where x is a variable reference, a parenthesized expression, an inline function expression, or a map or array constructor.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1828 created</title>
   <pubDate>Thu, 20 Feb 2025 11:25:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1828</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1828</guid>
   <description>&lt;div&gt;&lt;p&gt;1815 Add more detail on annotations of function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1815&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1827 created</title>
   <pubDate>Thu, 20 Feb 2025 10:11:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1827</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1827</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath TOC: For and Let Expressions: whitespace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The table of contents for XPath, section 4.12, "For and Let Expressions", contains spurious whitespace. The whitespace appears to be present in the HTML, but it is not there in the source XML. In the actual section heading, there are two &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements before and after the heading text, each having as content a single space character.&lt;/p&gt;
&lt;p&gt;The problem is also there in the equivalent section heading "FLWOR Expressions" in the XQuery spec.&lt;/p&gt;
&lt;p&gt;In the "xpath-assembled" document, the heading appears as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;head&amp;gt;
               &amp;lt;phrase role="xpath"&amp;gt;For and Let Expressions&amp;lt;/phrase&amp;gt;
            &amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems to be the &lt;code&gt;phrase&lt;/code&gt; element that's causing the trouble: or more likely, the whitespace text nodes that surround it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1826 created</title>
   <pubDate>Thu, 20 Feb 2025 09:55:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1826</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1826</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix grammar bug #1818&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1818&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1825 created</title>
   <pubDate>Thu, 20 Feb 2025 09:01:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1825</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1825</guid>
   <description>&lt;div&gt;&lt;p&gt;1816 New function fn:partial-apply&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1816&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1824 created</title>
   <pubDate>Wed, 19 Feb 2025 21:05:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1824</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1824</guid>
   <description>&lt;div&gt;&lt;p&gt;1823 Revise top-level headings in F+O spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Revises the headings for consistency and brevity, to make the ToC easier to navigate at a glance&lt;/p&gt;
&lt;p&gt;Fix #1823&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1823 created</title>
   <pubDate>Wed, 19 Feb 2025 20:52:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1823</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1823</guid>
   <description>&lt;div&gt;&lt;p&gt;Clearer top-level section headings in F+O&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The improved rendition of the table of contents makes it apparent that the top-level sections headings in F+O are inconsistent and unnecessarily verbose.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1821 closed</title>
   <pubDate>Wed, 19 Feb 2025 17:53:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1821</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1821</guid>
   <description>&lt;div&gt;&lt;p&gt;Generated appendices in XDM&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1822 closed</title>
   <pubDate>Wed, 19 Feb 2025 17:53:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1822</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1822</guid>
   <description>&lt;div&gt;&lt;p&gt;1821 Fix the generated appendixes in the Data Model&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1822 created</title>
   <pubDate>Wed, 19 Feb 2025 17:25:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1822</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1822</guid>
   <description>&lt;div&gt;&lt;p&gt;1821 Fix the generated appendixes in the Data Model&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1821&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1821 created</title>
   <pubDate>Wed, 19 Feb 2025 09:21:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1821</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1821</guid>
   <description>&lt;div&gt;&lt;p&gt;Generated appendices in XDM&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The last four appendices in XDM are stylesheet-generated, and their TOC entries are added "by hand", and as a result they are incorrectly rendered.&lt;/p&gt;
&lt;p&gt;I suggest using the same process for these appendices as other specs use: they should have a skeletal presence in the XML master, with a processing instruction to direct the stylesheet to expand the content; there is then no need for special machinery in the stylesheet to generate the TOC.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1808 closed</title>
   <pubDate>Tue, 18 Feb 2025 22:07:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1808</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1808</guid>
   <description>&lt;div&gt;&lt;p&gt;Add pipeline operator to list of tokens using '&amp;lt;' and '&amp;gt;' characters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1820 created</title>
   <pubDate>Tue, 18 Feb 2025 22:05:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1820</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1820</guid>
   <description>&lt;div&gt;&lt;p&gt;Delta markers in collapsed TOC&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When the TOC is shown in collapsed mode, it would be nice to promote the Δ change markers to the level where they become visible.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1819 created</title>
   <pubDate>Tue, 18 Feb 2025 21:23:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1819</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1819</guid>
   <description>&lt;div&gt;&lt;p&gt;451 Multiple schemas in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #451&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1818 created</title>
   <pubDate>Tue, 18 Feb 2025 20:10:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1818</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1818</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar problem introduced by #1802&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The recent merge of #1802 has incorrectly changed production &lt;code&gt;ArrowExpr&lt;/code&gt; from&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;ArrowExpr
          ::= UnaryExpr ( SequenceArrowTarget | MappingArrowTarget | LookupArrowTarget )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;ArrowExpr
          ::= UnaryExpr ( SequenceArrowTarget MappingArrowTarget LookupArrowTarget )*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It has changed a &lt;code&gt;g:choice&lt;/code&gt; operator to a &lt;code&gt;g:zeroOrMore&lt;/code&gt; operator, while it should have added a &lt;code&gt;g:zeroOrMore&lt;/code&gt; around the &lt;code&gt;g:choice&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1716 closed</title>
   <pubDate>Tue, 18 Feb 2025 18:37:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1716</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1716</guid>
   <description>&lt;div&gt;&lt;p&gt;Variable lookahead needed for `ArrowTarget`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1763 closed</title>
   <pubDate>Tue, 18 Feb 2025 18:37:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1763</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1763</guid>
   <description>&lt;div&gt;&lt;p&gt;1716 Generalize syntax of arrow expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1789 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:32:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1789</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1789</guid>
   <description>&lt;div&gt;&lt;p&gt;Terminology: "singleton map"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1791 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:32:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1791</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1791</guid>
   <description>&lt;div&gt;&lt;p&gt;1789 Fix singleton terminology&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 110 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 18 Feb 2025 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/02-18</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—02-18</guid>
</item><item>
   <title>Issue #1769 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:17:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1769</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1769</guid>
   <description>&lt;div&gt;&lt;p&gt;Add links from processing model diagrams&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1788 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:14:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1788</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1788</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop reference to maps being unordered&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1790 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:14:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1790</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1790</guid>
   <description>&lt;div&gt;&lt;p&gt;1788 Replace statement that maps are unordered&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1785 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:11:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1785</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1785</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery 4.0 grammar: `ArrowExpr` target, `ReverseAxis`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1802 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:11:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1802</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1802</guid>
   <description>&lt;div&gt;&lt;p&gt;1785 Fix two simple grammar bugs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1803 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:08:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1803</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1803</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop "(Non-Normative)" from table of contents&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1804 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:08:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1804</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1804</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop "(Non-Normative)" from ToC&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1805 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:05:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1805</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1805</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop middle dots from term references in F&amp;amp;O&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1806 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:05:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1806</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1806</guid>
   <description>&lt;div&gt;&lt;p&gt;1805 Drop middle dots from termref rendition in F+O&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1807 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:02:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1807</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1807</guid>
   <description>&lt;div&gt;&lt;p&gt;Two exceptions or three?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1809 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:02:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1809</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1809</guid>
   <description>&lt;div&gt;&lt;p&gt;1807 Two exceptions to the rule, not three&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1631 closed</title>
   <pubDate>Tue, 18 Feb 2025 17:00:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1631</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1631</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:apply-templates (without select) should allow inline content&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1810 closed</title>
   <pubDate>Tue, 18 Feb 2025 16:59:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1810</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1810</guid>
   <description>&lt;div&gt;&lt;p&gt;1808 Add -&amp;gt; to list of tokens using lt and gt characters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1817 created</title>
   <pubDate>Tue, 18 Feb 2025 15:42:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1817</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1817</guid>
   <description>&lt;div&gt;&lt;p&gt;1800 Methods&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1800&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1816 created</title>
   <pubDate>Tue, 18 Feb 2025 15:33:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1816</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1816</guid>
   <description>&lt;div&gt;&lt;p&gt;Programmatic partial application&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We don't have a programmatic way of doing partial function application, in particular it's very difficult to to a partial application supplying the first argument of a function item without knowing statically how many other arguments there are.&lt;/p&gt;
&lt;p&gt;I suggest extending fn:apply so that the second argument can be a map with integer keys; it can supply some or all of the arguments to a function, and arguments that aren't supplied are retained in the returned partially-applied function item. For the example cited where only the first argument is to be supplied, supplying an array of length one would be equivalent.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1815 created</title>
   <pubDate>Tue, 18 Feb 2025 15:29:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1815</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1815</guid>
   <description>&lt;div&gt;&lt;p&gt;Function annotations on function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We say very little about function annotations on function items.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we don't say that the function item constructed by a named function reference inherits the function annotations of the function declaration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we don't say whether a function item constructed by partial application (whether static or dynamic) has any function annotations, and if so what they are.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we don't mention them in function-lookup().&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1814 created</title>
   <pubDate>Mon, 17 Feb 2025 12:51:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1814</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1814</guid>
   <description>&lt;div&gt;&lt;p&gt;1813 Reorganise the XDM spec at top level&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1813&lt;/p&gt;
&lt;p&gt;The diff version is probably not too useful because a lot of material has moved around. Very little text has actually changed, and none of it substantively.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 110 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 17 Feb 2025 11:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/02-18</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-02-18</guid>
</item><item>
   <title>Issue #1813 created</title>
   <pubDate>Mon, 17 Feb 2025 11:15:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1813</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1813</guid>
   <description>&lt;div&gt;&lt;p&gt;Reorganise top-level sections in XDM&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The improved presentation of the TOC for our specs makes it rather obvious that the structure of the XDM spec has become unbalanced. Most of the spec is about node trees; information about atomic values, maps, functions etc is hard to find, and sometimes appears in strange places such as "Terminology".&lt;/p&gt;
&lt;p&gt;In addition, the way the spec is assembled from multiple entities serves little purpose. It makes it harder for editors to find the text that needs to be edited and to locate markup errors introduced in the course of editing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1812 created</title>
   <pubDate>Mon, 17 Feb 2025 10:51:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1812</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1812</guid>
   <description>&lt;div&gt;&lt;p&gt;1811 Add note regarding non-XML chars in xsl:output-character&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1811&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1811 created</title>
   <pubDate>Mon, 17 Feb 2025 10:12:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1811</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1811</guid>
   <description>&lt;div&gt;&lt;p&gt;Add note concerning non-XML characters in character maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have relaxed the rules for using non-XML characters in strings. It would be useful to explain how to take advantage of this in character maps.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1810 created</title>
   <pubDate>Mon, 17 Feb 2025 09:33:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1810</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1810</guid>
   <description>&lt;div&gt;&lt;p&gt;1808 Add -&amp;gt; to list of tokens using lt and gt characters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1809 created</title>
   <pubDate>Mon, 17 Feb 2025 09:23:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1809</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1809</guid>
   <description>&lt;div&gt;&lt;p&gt;1807 Two exceptions to the rule, not three&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1807&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1808 created</title>
   <pubDate>Sun, 16 Feb 2025 23:10:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1808</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1808</guid>
   <description>&lt;div&gt;&lt;p&gt;Add pipeline operator to list of tokens using '&amp;lt;' and '&amp;gt;' characters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add the operator &lt;code&gt;-&amp;gt;&lt;/code&gt; to the list of tokens in XPath A3.3.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1807 created</title>
   <pubDate>Sun, 16 Feb 2025 22:50:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1807</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1807</guid>
   <description>&lt;div&gt;&lt;p&gt;Two exceptions or three?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XPath 4.5.2.7 on function identity says "There are two exceptions to this rule:" and then lists three.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1806 created</title>
   <pubDate>Sun, 16 Feb 2025 22:44:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1806</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1806</guid>
   <description>&lt;div&gt;&lt;p&gt;1805 Drop middle dots from termref rendition in F+O&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Brings F+O into line with the other specs.&lt;/p&gt;
&lt;p&gt;Fix #1805&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1805 created</title>
   <pubDate>Sun, 16 Feb 2025 22:36:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1805</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1805</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop middle dots from term references in F&amp;amp;O&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The F&amp;amp;O spec renders termref links between middle dots. None of the other specs use this convention.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1804 created</title>
   <pubDate>Sun, 16 Feb 2025 22:05:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1804</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1804</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop "(Non-Normative)" from ToC&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1803&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1803 created</title>
   <pubDate>Sun, 16 Feb 2025 21:54:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1803</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1803</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop "(Non-Normative)" from table of contents&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Proposal - drop the phrase "(Non-Normative)" from section titles in the table of contents (but not in the body of the document).&lt;/p&gt;
&lt;p&gt;In several of the specs this phrase disrupts the indentation and formatting of the ToC, and it adds very little value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1802 created</title>
   <pubDate>Sun, 16 Feb 2025 19:16:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1802</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1802</guid>
   <description>&lt;div&gt;&lt;p&gt;1785 Fix two simple grammar bugs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1785&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1801 created</title>
   <pubDate>Sat, 15 Feb 2025 23:08:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1801</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1801</guid>
   <description>&lt;div&gt;&lt;p&gt;1798 Function fn:function-identity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The function fn:identity as already described and discussed in #1798&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1800 created</title>
   <pubDate>Fri, 14 Feb 2025 20:17:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1800</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1800</guid>
   <description>&lt;div&gt;&lt;p&gt;The `=?&amp;gt;` lookup arrow expression operator is weird, difficult to use, difficult to understand, difficult to read and unnatural&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XPath 4.0 language now includes a way for a function defined as a member of a map to easily access other members (siblings) that belong to the same map instance. Special syntax, the &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#lookup-arrow-expression"&gt;&lt;strong&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt; operator&lt;/strong&gt;&lt;/a&gt;, was introduced to call such a function. As a whole this is a huge step forward providing the user with a new, powerful mechanism to conveniently express relationships and calculations over several member-values of a map instance.&lt;/p&gt;
&lt;p&gt;I am raising this issue with the goal of further improving and simplifying for the user the way to define and call a member function of a map/record, giving it a convenient way to access the values of other members of the instance of the map, on which the call has been issued.&lt;/p&gt;
&lt;p&gt;In my work, I have been trying to define a number of functions that must belong to a map/record and that should be able to access other members of the same map/record to which these functions belong.&lt;/p&gt;
&lt;p&gt;The experience was far from satisfying and here I describe the main problems I encountered when trying to use the &lt;strong&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt;&lt;/strong&gt; operator, and some obvious suggestions how we can further simplify the syntax for calling any member function of a map or record.&lt;/p&gt;
&lt;h1&gt;1. Problems trying to use the &lt;strong&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt;&lt;/strong&gt; operator&lt;/h1&gt;
&lt;p&gt;Here are the main problems I ran into.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem1&lt;/strong&gt;. The &lt;strong&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt;&lt;/strong&gt; operator was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;weird-looking;&lt;/li&gt;
&lt;li&gt;difficult to use;&lt;/li&gt;
&lt;li&gt;difficult to understand;&lt;/li&gt;
&lt;li&gt;difficult to read;&lt;/li&gt;
&lt;li&gt;feeling unnatural.
It would be much better if we didn't have to use any special operator at all in order to call a member function "&lt;strong&gt;&lt;em&gt;&lt;code&gt;myFunction&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;" of a map &lt;strong&gt;&lt;em&gt;&lt;code&gt;$m&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; by simply:
&lt;strong&gt;&lt;em&gt;&lt;code&gt;$m?myFunction(&amp;lt;tuple of any arguments defined in the signature of the function&amp;gt;)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Problem2&lt;/strong&gt;. There is no example, in the sections that describe the record type (&lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#lookup-arrow-expression"&gt;3.2.8.3&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;), showing a record member-function that accesses the values of other members of the same instance of the record.
&lt;strong&gt;Thus, the new feature is effectively hidden&lt;/strong&gt; for people who want to work with records.
We need such an example for a record, so that we don't forget that any record is also a map and possesses all functionality a map has to offer. And a statement to this effect must be added to the description of records.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem 3&lt;/strong&gt;.  This syntax is overcomplicated and difficult to use and remember, resulting in unnecessarily long and complex expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $rectangle := {
  "width": 20,
  "height": 12,
  "area": fn($this) { $this?width * $this?height }
} 
return $rectangle =?&amp;gt; area()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be significantly better to use a much simplified syntax such as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $rectangle := {
  "width": 20,
  "height": 12,
  "area": fn() { ?width * ?height }
} 
return $rectangle ? area()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recognizing that &lt;strong&gt;&lt;em&gt;&lt;code&gt;?name&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; is already used since XPath 3.1 as &lt;strong&gt;&lt;a href="https://www.w3.org/TR/2017/REC-xpath-31-20170321/#id-unary-lookup"&gt;Unary Lookup Operator&lt;/a&gt;&lt;/strong&gt;, and to avoid the unlikely case of collision, when a member function accesses other members of the map-owner-instance that happen to have identically the same names as expected constituents of the current context item (upon which the function is applied), we can introduce a special character to denote the current map-owner-instance, thus the above example could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $rectangle := {
  "width": 20,
  "height": 12,
  "area": fn() { ^width * ^height }
} 
return $rectangle ? area()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Solutions&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Solution for Problem 1&lt;/strong&gt; above (weirdness of the &lt;strong&gt;&lt;em&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; operator:&lt;br/&gt;
&lt;em&gt;Do not introduce any special operator&lt;/em&gt;. Just use &lt;code&gt;?&lt;/code&gt; to invoke the member-function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution for Problem 2&lt;/strong&gt; above (lack of example of a record having a member-function that accesses other members of the same map-owner-instance).
Obviously, &lt;em&gt;provide such an example&lt;/em&gt;. Also &lt;em&gt;reiterate there that all features and functionality of a map continue to be available for records&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution for Problem 3&lt;/strong&gt; above (overcomplicated syntax:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get rid of the &lt;strong&gt;&lt;em&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; operator. Use &lt;strong&gt;&lt;code&gt;?&lt;/code&gt;&lt;/strong&gt; for all references to member-functions.&lt;/li&gt;
&lt;li&gt;Don't use any special variable like &lt;strong&gt;&lt;em&gt;&lt;code&gt;$this&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;. For example, the current example in the documentation:
&lt;code&gt;"area": fn($this) { $this?width * $this?height }&lt;/code&gt;
should instead be:
&lt;code&gt;"area": fn() { ^width * ^height }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use the &lt;strong&gt;&lt;code&gt;^&lt;/code&gt;&lt;/strong&gt; character to denote &lt;em&gt;owner-map-instance&lt;/em&gt; membership. Thus &lt;strong&gt;&lt;em&gt;&lt;code&gt;^width&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; means: "&lt;em&gt;The member named &lt;strong&gt;"width"&lt;/strong&gt; of the map instance upon which the current function was invoked&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I will issue a PR with the solutions, provided there are not any substantial comments hilighting problems with this proposal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1799 created</title>
   <pubDate>Thu, 13 Feb 2025 20:43:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1799</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1799</guid>
   <description>&lt;div&gt;&lt;p&gt;"well-formed HTML document"?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There is an apparent ambiguity in the XPath Functions specification as to whether &lt;code&gt;fn:parse-html&lt;/code&gt; raises dynamic error err:FODC0011 when &lt;code&gt;html-version&lt;/code&gt; is set to one of the HTML5 versions &lt;em&gt;and&lt;/em&gt; the content of &lt;code&gt;$html&lt;/code&gt; is not well-formed, given the general expectation that HTML5 parsers can always parse an input string regardless of syntactic validity.&lt;/p&gt;
&lt;p&gt;The HTML5 standard, for its part, has actually always allowed the parser to be aborted upon encountering a parse error (though no browser does this), so the function definition would seem to require that &lt;code&gt;parse-html("&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;", { "method": "html", "html-version": 5 })&lt;/code&gt; invariably raises an error, given that the input is invalid (missing opening &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag, etc.).&lt;/p&gt;
&lt;p&gt;I don't think this is the intended behavior; my suggestion is to either have it be explicitly implementation-defined as to which parse errors cause err:FODC0011 to be raised, or require that it is never raised for HTML5.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1238 closed</title>
   <pubDate>Wed, 12 Feb 2025 23:39:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1238</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1238</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT on-no-match="shallow-copy-all" - revised rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1798 created</title>
   <pubDate>Wed, 12 Feb 2025 20:37:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1798</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1798</guid>
   <description>&lt;div&gt;&lt;p&gt;Getting the value of the new identity-(DM)property of a function. `fn:function-identity`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current set of &lt;strong&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#functions-on-functions"&gt;Functions on Functions&lt;/a&gt;&lt;/strong&gt;: at &lt;strong&gt;(https://qt4cg.org/specifications/xpath-functions-40/Overview.html#functions-on-functions)&lt;/strong&gt; was recently updated with a new function to produce all annotations for a given function: &lt;strong&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-function-annotations"&gt;fn:function-annotations&lt;/a&gt;&lt;/strong&gt;.
However we are still missing the ability to reference another important, newly-added property of a function: the &lt;strong&gt;function identity: &lt;a href="https://qt4cg.org/specifications/xpath-datamodel-40/Overview.html#function-items"&gt;in DM&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-function-identity"&gt;in XPath&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1&gt;&lt;strong&gt;fn:function-identity&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;
Returns &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-datamodel-40/Overview.html#function-items"&gt;the identity of the function item&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Signature&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;fn:function-identity(
  $function	as fn(*)	
) as xs:string&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Properties&lt;/strong&gt;
This function is &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-deterministic"&gt;·deterministic·&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-context-independent"&gt;·context-independent·&lt;/a&gt;, and &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-focus-independent"&gt;·focus-independent·&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This function can be useful  in any scenario, where the evaluation of a function call requires repeated evaluation of this same, or other functions. Often in such cases, the algorithm needs access to a general structure, containing the cached results of executing possibly many different functions applied on specific arguments-tuples.
What &lt;strong&gt;unique key&lt;/strong&gt; is needed under which to group all invocations of a specific function and then the mapping between their function-call arguments and the result of the call? Remarkably, the identity of a function fits exactly the requirements (uniqueness / one per function) for such a key.
As we already have a function-identity property in the Data Model for each function-item, it is straightforward to provide this identity, and the &lt;strong&gt;&lt;code&gt;fn:function-identity&lt;/code&gt;&lt;/strong&gt; does exactly that.&lt;/li&gt;
&lt;li&gt;The function identity, by definition, is generated upon the creation of a function and has meaning throughout of the life of that function. It is not meaningful to store this value across different executions, because the identity given to a function in &lt;em&gt;execution1&lt;/em&gt; will generally be different from the identity, given to it in &lt;em&gt;execution2&lt;/em&gt;. However, the definitions of system functions (functions defined in the specifications under the system namespaces - with standard prefixes: &lt;strong&gt;&lt;em&gt;&lt;code&gt;xs&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;math&lt;/code&gt;, &lt;code&gt;err&lt;/code&gt;, &lt;code&gt;output&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;) can be assigned permanent identities in the official Specs documents, requiring every implementation to use exactly this published identity value for the official, system functions, thus achieving efficiency and convenience during debugging.&lt;/li&gt;
&lt;li&gt;The function identity, being a string, can be used as a key in a map, thus making it possible to map a particular function to a sequence of items. It becomes possible to allow function items as map-keys by extending the definition of &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-same-key"&gt;same-keys&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; with: "If both keys are function items: &lt;code&gt;$f1&lt;/code&gt; and &lt;code&gt;$f2&lt;/code&gt;, then they are &lt;strong&gt;the same&lt;/strong&gt; if and only if:
&lt;strong&gt;&lt;em&gt;&lt;code&gt;function-identity($f1) eq function-identity($f2)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1797 created</title>
   <pubDate>Wed, 12 Feb 2025 16:20:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1797</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1797</guid>
   <description>&lt;div&gt;&lt;p&gt;elements-to-maps: separate function to construct a plan&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose separating out the &lt;code&gt;uniform=true&lt;/code&gt; option of &lt;code&gt;elements-to-maps()&lt;/code&gt; into a separate function. This function analyses the data and produces a conversion plan, which can be supplied to the "layouts" option (perhaps renamed) of the main function.&lt;/p&gt;
&lt;p&gt;The benefits are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The plan can be tweaked after it is created by manual adjustment, for example if the user wants to use "empty-plus" layout wherever the system's choice would be "empty", or to take account of anticipated future changes in the structure.&lt;/li&gt;
&lt;li&gt;The plan can be used to process documents that did not exist at the time it was created, thus ensuring that future documents are all converted in the same way, and avoiding the overhead of rebuilding the plan each time.&lt;/li&gt;
&lt;li&gt;The plan can be created from a small sample of the documents to be converted.&lt;/li&gt;
&lt;li&gt;The plan can be created from a large collection of documents including documents that don't need to be converted but which may contain structural elements that are not revealed by the documents that need converting now.&lt;/li&gt;
&lt;li&gt;The user can examine the plan to see what it is doing, which is useful for diagnostics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We should define the format of the plan (a map from element names to layouts) so that it can conveniently be serialized as a JSON document.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1796 created</title>
   <pubDate>Wed, 12 Feb 2025 14:46:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1796</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1796</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow fn:invisible-xml to return a function that returns an item()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Our current &lt;code&gt;fn:invisible-xml&lt;/code&gt; function returns a document node. That makes perfect sense when held up against the Invisible XML specification. But I wonder if we should leave the door open to some extensibility. I can imagine, for example, an implementation of an Invisible XML processor that has the ability to return a map or even a CSV structure instead of XML. (XML is the required, standard result in 1.0 but implementors have been known to offer user options to produce other serializations and one area of potential change in the future is other serialization formats.)&lt;/p&gt;
&lt;p&gt;Pro: more extensible. Con: less type information about the result.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1795 created</title>
   <pubDate>Wed, 12 Feb 2025 12:51:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1795</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1795</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT templates: Matching values in a map by key&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The simplest coding pattern for template rule processing for JSON structures would be to take a structure like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
   {"name": "John", "address": { .... }, job-history: [ { .... }, {....} ]},
   {"name": "Jane", "address": { .... }, job-history: [ { .... }, {....} ]}
]

and to process it using template rules of the form:

&amp;lt;xsl:template match="record(name, address, job-history)"&amp;gt;
    &amp;lt;xsl:apply-templates select="?*"/&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;xsl:template match="(pattern matching key 'name')"&amp;gt;...&amp;lt;/xsl:template&amp;gt;

&amp;lt;xsl:template match="(pattern matching key 'address')"&amp;gt;...&amp;lt;/xsl:template&amp;gt;

&amp;lt;xsl:template match="(pattern matching key 'job-history')"&amp;gt;...&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have nearly all the ingredients in place for this. In particular, we can ensure that the &lt;code&gt;select="?*"&lt;/code&gt; selects values that are labelled with the relevant key, making it technically possible to match values according to that key: &lt;code&gt;select="?*"&lt;/code&gt; might select an xs:string value "John", but the string is labelled with the property key="name", so it can in principle match a template rule designed to process the "name" value.&lt;/p&gt;
&lt;p&gt;The only piece that's missing is how to write the match patterns. We can write &lt;code&gt;match=".[label()?key = 'name']"&lt;/code&gt;, but that's hopelessly long-winded.&lt;/p&gt;
&lt;p&gt;I propose that we use the syntax &lt;code&gt;match="?name"&lt;/code&gt; to match a value that is labelled with the key "name". This feels intuitive and natural, and 99% of users won't trouble with the complex underlying semantics.&lt;/p&gt;
&lt;p&gt;We can extend this by borrowing other parts of the Lookup expression syntax, for example &lt;code&gt;match="?('X', 'Y', 'Z')"&lt;/code&gt; to match several keys.&lt;/p&gt;
&lt;p&gt;I would also suggest promoting the operators "union", "intersect" and "except" so they can be used to combine any patterns (not just node patterns) so this could be written &lt;code&gt;match="?X | ?X | ?Z"&lt;/code&gt;, or we could write &lt;code&gt;match="?* except ?X"&lt;/code&gt;. But note that this would create an expectation that users can also write &lt;code&gt;select="?* except ?X"&lt;/code&gt; in an XPath expression; and that's quite hard to achieve: see also #1794.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1794 created</title>
   <pubDate>Wed, 12 Feb 2025 12:03:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1794</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1794</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup: select all except&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In lookup expressions we have &lt;code&gt;?*&lt;/code&gt; to select all entries, and &lt;code&gt;?X&lt;/code&gt; to select a specific entry. There is frequently a requirement to select all entries with specific exceptions.&lt;/p&gt;
&lt;p&gt;One way of doing this is &lt;code&gt;$map =&amp;gt; map:remove('X')?*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Another is to do &lt;code&gt;$map?pairs::*[?key != 'X']?value&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A third option is &lt;code&gt;$map?[?key != 'X']?*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or &lt;code&gt;$map =&amp;gt; map:filter(($k, $v){$k != 'X'})?*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or &lt;code&gt;for key $k value $v in $map where $k != 'X' return $v&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;None of these feels particularly user-friendly.&lt;/p&gt;
&lt;p&gt;A possible syntax might be &lt;code&gt;$map?-X&lt;/code&gt; or more generally &lt;code&gt;"?" "-" KeySpecifier&lt;/code&gt; to select all entries that are not selected by the &lt;code&gt;KeySpecifier&lt;/code&gt;. For example this would allow &lt;code&gt;$map?-('X', 'Y')&lt;/code&gt; to exclude &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;,&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1782 closed</title>
   <pubDate>Wed, 12 Feb 2025 11:42:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1782</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1782</guid>
   <description>&lt;div&gt;&lt;p&gt;1776 Add lookup patterns using ? and ??&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1781 closed</title>
   <pubDate>Tue, 11 Feb 2025 21:52:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1781</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1781</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: drop section 23 (Processing JSON Data) and Appendix B&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1792 closed</title>
   <pubDate>Tue, 11 Feb 2025 17:34:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1792</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1792</guid>
   <description>&lt;div&gt;&lt;p&gt;Schema validation errors on function catalog for EXPath binary spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1793 closed</title>
   <pubDate>Tue, 11 Feb 2025 17:34:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1793</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1793</guid>
   <description>&lt;div&gt;&lt;p&gt;1792 Make function-catalog file schema-valid&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1793 created</title>
   <pubDate>Tue, 11 Feb 2025 17:34:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1793</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1793</guid>
   <description>&lt;div&gt;&lt;p&gt;1792 Make function-catalog file schema-valid&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1792&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1792 created</title>
   <pubDate>Tue, 11 Feb 2025 17:29:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1792</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1792</guid>
   <description>&lt;div&gt;&lt;p&gt;Schema validation errors on function catalog for EXPath binary spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm seeing schema validation errors after rebasing, it looks like PR #1765 introduced lines like&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fos:changes issue="1751"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when the @issue attribute should be on the child fos:change element.&lt;/p&gt;
&lt;p&gt;Perhaps the validation done by the build has improved.&lt;/p&gt;
&lt;p&gt;I'll fix this in a separate PR to be emergency-applied.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 109 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 11 Feb 2025 17:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/02-11</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—02-11</guid>
</item><item>
   <title>Issue #1779 closed</title>
   <pubDate>Tue, 11 Feb 2025 17:04:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1779</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1779</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath 4.0 EBNF grammar&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1783 closed</title>
   <pubDate>Tue, 11 Feb 2025 17:04:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1783</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1783</guid>
   <description>&lt;div&gt;&lt;p&gt;1779 Make CharRef XQuery-only&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1752 closed</title>
   <pubDate>Tue, 11 Feb 2025 17:02:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1752</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1752</guid>
   <description>&lt;div&gt;&lt;p&gt;Return type of fn:partition()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1761 closed</title>
   <pubDate>Tue, 11 Feb 2025 17:02:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1761</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1761</guid>
   <description>&lt;div&gt;&lt;p&gt;1752 Correct return type of fn:partition()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1751 closed</title>
   <pubDate>Tue, 11 Feb 2025 17:00:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1751</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1751</guid>
   <description>&lt;div&gt;&lt;p&gt;bin:encode-string - should the result have a BOM?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1765 closed</title>
   <pubDate>Tue, 11 Feb 2025 17:00:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1765</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1765</guid>
   <description>&lt;div&gt;&lt;p&gt;1751 Clarify BOM handling&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1770 closed</title>
   <pubDate>Tue, 11 Feb 2025 16:58:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1770</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1770</guid>
   <description>&lt;div&gt;&lt;p&gt;Union patterns in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1772 closed</title>
   <pubDate>Tue, 11 Feb 2025 16:58:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1772</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1772</guid>
   <description>&lt;div&gt;&lt;p&gt;1770 Default priority of rules with a union pattern&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #402 closed</title>
   <pubDate>Tue, 11 Feb 2025 16:56:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/402</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-402</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT patterns: intersect and except&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1773 closed</title>
   <pubDate>Tue, 11 Feb 2025 16:56:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1773</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1773</guid>
   <description>&lt;div&gt;&lt;p&gt;402 Change the semantics of intersect and except in patterns&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1784 closed</title>
   <pubDate>Tue, 11 Feb 2025 16:53:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1784</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1784</guid>
   <description>&lt;div&gt;&lt;p&gt;1781 Drop obsolete material from XSLT spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #755 closed</title>
   <pubDate>Tue, 11 Feb 2025 16:51:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/755</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-755</guid>
   <description>&lt;div&gt;&lt;p&gt;with expression; chaining and concatenation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #877 closed</title>
   <pubDate>Tue, 11 Feb 2025 16:51:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/877</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-877</guid>
   <description>&lt;div&gt;&lt;p&gt;Inconsistency in XQFO comparator functions/operators with recursive rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1729 closed</title>
   <pubDate>Tue, 11 Feb 2025 16:50:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1729</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1729</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar problems introduced by #1721&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1767 closed</title>
   <pubDate>Tue, 11 Feb 2025 16:50:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1767</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1767</guid>
   <description>&lt;div&gt;&lt;p&gt;1729/1737 Fix grammar for "declare record"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1791 created</title>
   <pubDate>Tue, 11 Feb 2025 11:12:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1791</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1791</guid>
   <description>&lt;div&gt;&lt;p&gt;1789 Fix singleton terminology&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Replaces "singleton map" with "single-entry map" and "singleton array" with "single-member array"; the term "singleton" now always means count()=1, not size()=1.&lt;/p&gt;
&lt;p&gt;Fix #1789&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1790 created</title>
   <pubDate>Tue, 11 Feb 2025 10:04:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1790</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1790</guid>
   <description>&lt;div&gt;&lt;p&gt;1788 Replace statement that maps are unordered&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1788&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1789 created</title>
   <pubDate>Tue, 11 Feb 2025 09:00:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1789</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1789</guid>
   <description>&lt;div&gt;&lt;p&gt;Terminology: "singleton map"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We often use the term "singleton map" to mean a map containing a single entry (key-value pair).&lt;/p&gt;
&lt;p&gt;But in XQ 4.14.3.1 we use the same term to mean "a sequence containing a single map".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1788 created</title>
   <pubDate>Mon, 10 Feb 2025 14:50:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1788</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1788</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop reference to maps being unordered&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In F&amp;amp;O 17.5.1.5 elements-to-maps record layout, mapping rules, delete&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Because the child elements are converted to a map, their order is not retained.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Substitute a rule that the entries in the map will correspond with "order of first appearance".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 109 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 10 Feb 2025 14:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/02-11</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-02-11</guid>
</item><item>
   <title>Issue #1787 created</title>
   <pubDate>Mon, 10 Feb 2025 10:47:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1787</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1787</guid>
   <description>&lt;div&gt;&lt;p&gt;Sorted maps revisited&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Now that we have ordered maps established, I'd like to make another attempt to introduce sorted maps - that is, maps whose ordering is by key value. The entries in such a map would be sorted by key, but there's no attempt to maintain sort order in subsequent put() operations.&lt;/p&gt;
&lt;p&gt;We introduce map:sort($m) essentially as a convenient shorthand for &lt;code&gt;map:of-pairs(sort(map:pairs($m), fn{?key}))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And then we introduce something like &lt;code&gt;map:get-range($from, $to)&lt;/code&gt; which returns the keys (or pairs, or entries) whose keys are in a given range -- which the implementation can optimize if it knows the map has been sorted.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1786 created</title>
   <pubDate>Sun, 9 Feb 2025 09:38:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1786</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1786</guid>
   <description>&lt;div&gt;&lt;p&gt;A case study for XSLT transformation of JSON: the transpiler&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;One of the design aims of XSLT 4.0 is that it should be easier to transform JSON. Back in 2016 I published a paper at XML Prague (https://www.saxonica.com/papers/xmlprague-2016mhk.pdf) with the rather disappointing result that for a couple of non-trivial JSON transformation tasks, the easiest solution was to convert the JSON to XML, transform the XML, and then convert it back. In many ways it was that discovery that motivated the whole XSLT 4.0 project. So I want to review to what extent we have solved that problem, and what remains to be done. In particular, I have recently raised a number of open issues related to how we transform JSON-derived trees of maps and arrays using template rules, and I'm not sure we can resolve those issues without testing the proposals against real use cases.&lt;/p&gt;
&lt;p&gt;I'm proposing to take as a case study the Java-to-C# transpiler which we described in a 2021 paper at https://www.saxonica.com/papers/markupuk-2021mhk.pdf. This is a real XSLT application in daily use. It invokes the (open source) JavaParser to emit an XML representation of Java source code, it performs various transformations of that XML, and then finally spits out equivalent C# source code. My basic question is: suppose the JavaParser had chosen to emit JSON instead of XML (as it might perfectly reasonably have chosen to do). Would we be able to write the transpiler in XSLT 4.0 to work entirely within the JSON space, avoiding all use of XML?&lt;/p&gt;
&lt;p&gt;I chose this case study for several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's entirely plausible that the input might have been JSON rather than XML&lt;/li&gt;
&lt;li&gt;The application relies very heavily (and successfully) on rule-based processing: if we didn't have template rules, then it would be dominated by large xsl:choose statements with hundreds of branches.&lt;/li&gt;
&lt;li&gt;At around 5000 lines of XSLT, it's large enough to be non-trivial, yet small enough to be tractable as a case study.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I looked at a couple of other candidates, and found they were things that could be readily done in XSLT 3.0 without any enhancements. For example we have production XSLT 3.0 code that takes a JSON data feed from our online shop at saxonica.com and uses it to update our sales database and to generate license keys. The JSON is voluminous but the structure is simple, and the constructs in XSLT 3.0 for handling maps and arrays are entirely up to the job. The transpiler differs in that the JSON has a much more interesting recursive structure, making rule-based transformation a natural fit to the task.&lt;/p&gt;
&lt;p&gt;I'm not proposing to actually produce a complete replacement of the current transpiler, only to explore the task of doing so in enough detail to get some useful insights. I propose to use this issue tracker to capture my working notes as the study proceeds, but if there are recommendations affecting the 4.0 specs (as seems likely), then I will extract those into separate issues. Perhaps at the end of the process I will write up the case study as a conference paper.&lt;/p&gt;
&lt;p&gt;My rough plan is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Explore conversion of the current XML output by JavaParser to JSON using the new elements-to-maps() function. We have a number of open issues on the usability of this function and it will be interesting to see whether we encounter similar difficulties to those that have already been raised, and whether the suggested solutions are appropriate.&lt;/li&gt;
&lt;li&gt;Convert the xml-to-java stylesheet to work on this JSON input. This stylesheet is not actually a working part of the transpiler, rather it's something we built as a stepping stone; before attempting to convert the XML syntax tree to C#, we felt it would be instructive to write code that converted it back to Java. This is an 820-line stylesheet and it should be feasible to convert it completely.&lt;/li&gt;
&lt;li&gt;The transpiler currently produces, as an intermediate output, a "digest" file containing summary information about all the classes and methods found in the Java code, and their subtyping/override relationships. We then have a process that augments this digest with attributes that are needed by the C# generation, for example which methods to label with "virtual" or "override" modifiers. I propose to experiment with producing (and transforming) this digest in JSON rather than XML format.&lt;/li&gt;
&lt;li&gt;Examine the XSLT code that generates C# output to look for features that appear to be tricky to convert, for example anything that uses the parent or ancestor axis, and study to what extent we now have the capability in XSLT 4.0 to handle those situations.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using this format (a GitHub issue) to record progress carries a risk that there will be comments that take things off at a tangent. Please help by resisting that temptation: if there are interesting issues raised in your mind, please take those up as separate issues.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1785 created</title>
   <pubDate>Sat, 8 Feb 2025 08:57:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1785</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1785</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery 4.0 grammar: `ArrowExpr` target, `ReverseAxis`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;While testing the parser generated from the specification grammar, I encountered two issues.&lt;/p&gt;
&lt;h3&gt;1. &lt;code&gt;ArrowExpr&lt;/code&gt; target must be optional&lt;/h3&gt;
&lt;p&gt;The current definition in the specification is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ArrowExpr ::= UnaryExpr (SequenceArrowTarget | MappingArrowTarget | LookupArrowTarget)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the target part must at least be optional, or better zero-or-more:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ArrowExpr ::= UnaryExpr (SequenceArrowTarget | MappingArrowTarget | LookupArrowTarget)*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otherwise arrow targets are expected almost everywhere. Making it zero-or-more allows parsing of&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a =&amp;gt; b() =&amp;gt; c()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which would not be possible without extra parentheses if it was optional.&lt;/p&gt;
&lt;h3&gt;2. Missing &lt;code&gt;preceding-sibling&lt;/code&gt; in &lt;code&gt;ReverseAxis&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ReverseAxis&lt;/code&gt; production currently appears as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ReverseAxis ::= ( "ancestor"
                | "ancestor-or-self"
                | "parent"
                | "preceding"
                | "preceding-or-self"
                | "preceding-sibling-or-self" ) "::"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is missing the &lt;code&gt;prededing-sibling&lt;/code&gt; axis.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1784 created</title>
   <pubDate>Fri, 7 Feb 2025 21:45:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1784</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1784</guid>
   <description>&lt;div&gt;&lt;p&gt;1781 Drop obsolete material from XSLT spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Drops material mainly deriving from when XSLT 3.0 had to work with both XPath 3.0 and 3.1. Includes non-normative exposition and some obsolete conformance statements.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1783 created</title>
   <pubDate>Fri, 7 Feb 2025 21:03:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1783</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1783</guid>
   <description>&lt;div&gt;&lt;p&gt;1779 Make CharRef XQuery-only&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1779&lt;/p&gt;
&lt;p&gt;Makes the CharRef token XQuery-only.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1782 created</title>
   <pubDate>Fri, 7 Feb 2025 12:46:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1782</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1782</guid>
   <description>&lt;div&gt;&lt;p&gt;1776 Add lookup patterns using ? and ??&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1776&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1026 closed</title>
   <pubDate>Fri, 7 Feb 2025 12:44:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1026</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1026</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT match patterns on pinned maps and arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1781 created</title>
   <pubDate>Fri, 7 Feb 2025 12:15:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1781</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1781</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: drop section 23 (Processing JSON Data) and Appendix B&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Section 23 Processing JSON data at one time contained the specification of maps, before this moved into XPath 3.1. This has now gone, and what's left is pretty much content-free.&lt;/p&gt;
&lt;p&gt;Appendix B contains a stylesheet for converting XML to JSON. It has some educational value, but not much, and I think it can go.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1780 created</title>
   <pubDate>Fri, 7 Feb 2025 11:49:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1780</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1780</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:for-each optional variable introduction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I spend quite a lot of time writing&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each select="foo"&amp;gt;
   &amp;lt;xsl:variable name="foo" select="." as="element(foo)"/&amp;gt;
   &amp;lt;xsl:for-each select="$foo/bar"&amp;gt;
      &amp;lt;xsl:variable name="bar" select="." as="element(bar)"/&amp;gt;
      .... do some stuff with $foo and $bar
   &amp;lt;/xsl:for-each&amp;gt;
&amp;lt;/xsl:for-each&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'd prefer to go (much like xquery)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each name="foo" as="element(foo)" select="foo"&amp;gt;
   &amp;lt;xsl:for-each name="bar" as="element(bar)" select="$foo/bar"&amp;gt;
      .... do some stuff with $foo and $bar
   &amp;lt;/xsl:for-each&amp;gt;
&amp;lt;/xsl:for-each&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1779 created</title>
   <pubDate>Fri, 7 Feb 2025 11:44:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1779</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1779</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath 4.0 EBNF grammar&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The grammar extraction and transformation in &lt;a href="https://github.com/GuntherRademacher/rex-parser-generator/actions/workflows/rexify-xquery-40.yml"&gt;RExify XQuery 4.0 grammar&lt;/a&gt; has been extended to cover the XPath 4.0 specification document, resulting in an LALR(1) grammar for XPath 4.0 that is suitable for REx.&lt;/p&gt;
&lt;p&gt;This update revealed a minor issue: section &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#terminal-symbols"&gt;A.3.1 Terminal Symbols&lt;/a&gt; lists &lt;code&gt;CharRef&lt;/code&gt;, which is unreferenced:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CharRef       ::= [http://www.w3.org/TR/REC-xml#NT-CharRef]
                                                         /* xgc: xml-version */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Currently, the transformation process includes a rule that removes this production. The rules will be adjusted as the grammar evolves.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1778 created</title>
   <pubDate>Fri, 7 Feb 2025 10:31:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1778</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1778</guid>
   <description>&lt;div&gt;&lt;p&gt;1456 Lookup expressions filtered by type&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1456&lt;/p&gt;
&lt;p&gt;Allows selection of records by type within a JSON tree, for example &lt;code&gt;$json ?? ~record(first, last) ? last&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I'm aware that the use of the tilde here is controversial but I think this kind of query is going to be very common; it needs something simple and I think people will get used to it. No-one has suggested anything that is obviously better, and I propose to also use &lt;code&gt;~&lt;/code&gt; in other similar contexts, for example type patterns in XSLT, which will increase familiarity.&lt;/p&gt;
&lt;p&gt;I suggest reading &lt;code&gt;~&lt;/code&gt; as "of type".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1777 created</title>
   <pubDate>Thu, 6 Feb 2025 18:35:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1777</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1777</guid>
   <description>&lt;div&gt;&lt;p&gt;Shallow copy in XSLT with maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently the &lt;code&gt;xsl:copy&lt;/code&gt; instruction, if applied to a map or array, does a deep copy, and ignores the content of the contained sequence constructor.&lt;/p&gt;
&lt;p&gt;I propose that if the contained sequence constructor is non-empty then instead of ignoring it, we should use it to create the content of the new map or array. Specifically, for maps xsl:copy will behave essentially like xsl:map, and for arrays it will behave essentially like xsl:array.&lt;/p&gt;
&lt;p&gt;This is an incompatibility with 3.1, but since a contained sequence constructor is currently totally useless in this situation, it doesn't seem likely to cause any trouble.&lt;/p&gt;
&lt;p&gt;I also propose that rather than using the new built-in &lt;code&gt;on-no-match="shallow-copy-all&lt;/code&gt;, we should extend the semantics of &lt;code&gt;shallow-copy&lt;/code&gt; to cover maps and arrays (as currently defined for &lt;code&gt;shallow-copy-all&lt;/code&gt;). Again, there is an incompatibility, but the current rules are so unhelpful that it's unlikely people are relying on them.&lt;/p&gt;
&lt;p&gt;I also propose that when apply-templates is applied to a map or array, it should be automatically pinned if it is not pinned already. The means that match patterns can be used with a lot more context to match the deep contents of the map or array and override the processing of the built-in templates.&lt;/p&gt;
&lt;p&gt;And I propose that when apply-templates is applied to a map or array and there is no &lt;code&gt;select&lt;/code&gt; attribute, it should "do the right thing" by applying templates to the map or array contents, rather than using the useless default of &lt;code&gt;child::node()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1776 created</title>
   <pubDate>Thu, 6 Feb 2025 18:24:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1776</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1776</guid>
   <description>&lt;div&gt;&lt;p&gt;Using `?` and `??` in XSLT patterns&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that the pattern &lt;code&gt;P1 ? P2&lt;/code&gt;, where &lt;code&gt;P1&lt;/code&gt; and &lt;code&gt;P2&lt;/code&gt; are patterns, should match any labelled item $L provided that $L matches P2, and &lt;code&gt;$L?..&lt;/code&gt; (that is, &lt;code&gt;($L =&amp;gt; label())?parent&lt;/code&gt; ) matches &lt;code&gt;P1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, the pattern &lt;code&gt;P1 ?? P2&lt;/code&gt;, where &lt;code&gt;P1&lt;/code&gt; and &lt;code&gt;P2&lt;/code&gt; are patterns, should match any labelled item $L provided that $L matches P2, and &lt;code&gt;$L?...&lt;/code&gt; (that is, &lt;code&gt;($L =&amp;gt; label())?ancestors()&lt;/code&gt; ) matches &lt;code&gt;P1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that neither the syntax nor the semantics are directly related to the lookup operator in XPath. In particular, P2 is a pattern, not a KeySpecifier. But there is a strong analogy, both with the use of &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;??&lt;/code&gt; in XPath expressions, and with the use of &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;//&lt;/code&gt; in patterns.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1775 created</title>
   <pubDate>Thu, 6 Feb 2025 18:11:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1775</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1775</guid>
   <description>&lt;div&gt;&lt;p&gt;Navigation in JSON trees&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that the parse-json function should create a pinned tree, so that upwards navigation to parent and ancestor j-nodes becomes possible.&lt;/p&gt;
&lt;p&gt;I propose introducing the key specifier &lt;code&gt;..&lt;/code&gt;, with &lt;code&gt;$M?..&lt;/code&gt; being a shorthand for &lt;code&gt;($M =&amp;gt; label())?parent&lt;/code&gt;, giving a convenient and familiar way to navigate from a j-node to its parent in a pinned tree. For example, &lt;code&gt;$M?..?name&lt;/code&gt; gives the value of the &lt;code&gt;name&lt;/code&gt; property in the immediately containing map.&lt;/p&gt;
&lt;p&gt;Similarly, I propose introducing the key specifier &lt;code&gt;...&lt;/code&gt; to navigate to ancestors, so &lt;code&gt;$M?...&lt;/code&gt; becomes a shorthand for &lt;code&gt;($M =&amp;gt; label())?ancestors()&lt;/code&gt;, and &lt;code&gt;$M?...?name&lt;/code&gt; returns the &lt;code&gt;name&lt;/code&gt; property of all containing maps.&lt;/p&gt;
&lt;p&gt;For symmetry I suggest we also provide &lt;code&gt;...&lt;/code&gt; as an abbreviated axis step, short for &lt;code&gt;ancestor::node()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I'd like to find a better name for "pinned". Perhaps "tracked" better captures that what it does is to track downward navigation steps and make them reversible.&lt;/p&gt;
&lt;p&gt;I'd also like to introduce the terms &lt;code&gt;j-tree&lt;/code&gt; and &lt;code&gt;j-node&lt;/code&gt;. A j-tree is a map or array, recursively expanded to include its entries or members. A j-node is a value in a j-tree. Perhaps confine the usage to maps and arrays that have been pinned/tracked.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1774 created</title>
   <pubDate>Thu, 6 Feb 2025 17:55:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1774</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1774</guid>
   <description>&lt;div&gt;&lt;p&gt;Nomenclature: relabelling&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The term &lt;code&gt;relabelling&lt;/code&gt; - used when we are down-casting, for example when an &lt;code&gt;xs:integer&lt;/code&gt; is supplied and the required type is &lt;code&gt;xs:unsignedByte&lt;/code&gt; - is easily confused with the concept of a label, being a set of properties that can be associated with any item in XDM 4.0, and which is accessible through the &lt;code&gt;fn:label&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;I suggest we rename &lt;code&gt;relabelling&lt;/code&gt; as &lt;code&gt;rebadging&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Apart from anything else, this has the virtue that my spell-checker won't auto-correct it...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1713 closed</title>
   <pubDate>Thu, 6 Feb 2025 12:18:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1713</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1713</guid>
   <description>&lt;div&gt;&lt;p&gt;Patchy exposition of XSLT type pattern syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1773 created</title>
   <pubDate>Wed, 5 Feb 2025 17:49:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1773</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1773</guid>
   <description>&lt;div&gt;&lt;p&gt;402 Change the semantics of intersect and except in patterns&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fixes a bug in the 3.0 spec whereby the &lt;code&gt;intersect&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; operators in a pattern have counter-intuitive semantics.&lt;/p&gt;
&lt;p&gt;Fix #402&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1772 created</title>
   <pubDate>Wed, 5 Feb 2025 16:50:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1772</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1772</guid>
   <description>&lt;div&gt;&lt;p&gt;1770 Default priority of rules with a union pattern&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Scraps the increasingly-complicated rules for handling priority of rules with a union pattern.&lt;/p&gt;
&lt;p&gt;Fix #1770&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1771 created</title>
   <pubDate>Wed, 5 Feb 2025 16:09:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1771</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1771</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: map order&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It may not come as a big surprise: A first feature request we received for ordered maps was to be able to take the order into account when comparing maps.&lt;/p&gt;
&lt;p&gt;I would propose to add an &lt;code&gt;ordered-map&lt;/code&gt; option to &lt;code&gt;fn:deep-equal&lt;/code&gt;, which defaults to false:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: returns false :)
deep-equal(
  { 1: 'one', 2: 'two' },
  { 2: 'two', 1: 'one' },
  { 'ordered-map': true() }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should be simple to use and easy to implement.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1770 created</title>
   <pubDate>Wed, 5 Feb 2025 16:07:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1770</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1770</guid>
   <description>&lt;div&gt;&lt;p&gt;Union patterns in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The original XSLT 1.0 rule for union patterns such as &lt;code&gt;match="A|B"&lt;/code&gt; said that the default priority was calculated as if there were two separate template rules with &lt;code&gt;match="A"&lt;/code&gt; and &lt;code&gt;match="B"&lt;/code&gt;. This became more complicated with the introduction of &lt;code&gt;xsl:next-match&lt;/code&gt; in XSLT 2.0 - what should happen if the item matches both branches? It became more complicated again in XSLT 3.0 with the introduction of &lt;code&gt;on-multiple-match&lt;/code&gt; - is it a multiple match if an item matches both branches? And in 4.0 it's complicated further by the introduction of constructs like &lt;code&gt;match="element(A|B)"&lt;/code&gt; which is deemed equivalent to &lt;code&gt;match=A|B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I would like to break this cycle with a backwards-incompatible change. The default priority of a union pattern should be the numeric maximum of the default priorities of its branches; the treatment as being somewhat-equivalent to two separate template rules should go. We should encourage implementations to issue a compatibility warning if a union pattern appears with no explicit priority, and with multiple branches having different default priority.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1769 created</title>
   <pubDate>Wed, 5 Feb 2025 15:56:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1769</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1769</guid>
   <description>&lt;div&gt;&lt;p&gt;Add links from processing model diagrams&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Completes action QT4CG-108-02&lt;/p&gt;
&lt;p&gt;I’ve added link targets where necessary. I didn’t try to link closer than that paragraph level, partly because I think that’s the context the reader needs, but also partly because we don’t copy ID values from all elements.&lt;/p&gt;
&lt;p&gt;There’s no definition of DM4.&lt;/p&gt;
&lt;p&gt;(Review of the link targets and comments on what (if anything) the remaining boxes and labels should link to most appreciated.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1768 closed</title>
   <pubDate>Wed, 5 Feb 2025 15:21:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1768</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1768</guid>
   <description>&lt;div&gt;&lt;p&gt;Inline SVG images&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1768 created</title>
   <pubDate>Wed, 5 Feb 2025 15:21:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1768</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1768</guid>
   <description>&lt;div&gt;&lt;p&gt;Inline SVG images&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In order for links to work in the browser, the SVG has to be inline, not loaded from a separate file. For self-document links, I guess this makes sense.&lt;/p&gt;
&lt;p&gt;This is a tools-only change.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1767 created</title>
   <pubDate>Wed, 5 Feb 2025 15:20:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1767</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1767</guid>
   <description>&lt;div&gt;&lt;p&gt;1729/1737 Fix grammar for "declare record"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1729&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The syntax should be "declare record", not "declare type record".&lt;/li&gt;
&lt;li&gt;All the declarations using annotations should allow multiple annotations.&lt;/li&gt;
&lt;li&gt;Added a note about refactoring the grammar to avoid unbounded lookahead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1766 created</title>
   <pubDate>Wed, 5 Feb 2025 12:51:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1766</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1766</guid>
   <description>&lt;div&gt;&lt;p&gt;1715 Drop array bound checking&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1715&lt;/p&gt;
&lt;p&gt;Drops array bound checking from &lt;code&gt;array:get&lt;/code&gt;, arrays-as-functions, and array lookup. Returns () instead of an error FOAY0001 when the index is out of bounds. This brings arrays and maps into closer alignment.&lt;/p&gt;
&lt;p&gt;Drops the &lt;code&gt;$fallback&lt;/code&gt; argument of &lt;code&gt;array:get()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Adds a new function &lt;code&gt;array:get-if-present()&lt;/code&gt; which replicates the old behaviour of &lt;code&gt;array:get()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Functions such as &lt;code&gt;array:put&lt;/code&gt;, &lt;code&gt;array:replace&lt;/code&gt;, &lt;code&gt;array:insert-before&lt;/code&gt;, &lt;code&gt;array:head&lt;/code&gt;, &lt;code&gt;array:tail&lt;/code&gt; continue to perform bound checking.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1738 closed</title>
   <pubDate>Wed, 5 Feb 2025 11:41:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1738</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1738</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting of lists within notes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1765 created</title>
   <pubDate>Wed, 5 Feb 2025 11:36:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1765</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1765</guid>
   <description>&lt;div&gt;&lt;p&gt;1751 Clarify BOM handling&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1751&lt;/p&gt;
&lt;p&gt;Clarifies BOM handling (and byte order generally) in &lt;code&gt;bin:encode-string&lt;/code&gt; and &lt;code&gt;bin:decode-string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also adds a note to &lt;code&gt;bin:octal&lt;/code&gt; for the prevention of possible misunderstanding.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1758 closed</title>
   <pubDate>Wed, 5 Feb 2025 09:43:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1758</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1758</guid>
   <description>&lt;div&gt;&lt;p&gt;EXPath specification validation problems&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1759 closed</title>
   <pubDate>Wed, 5 Feb 2025 09:43:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1759</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1759</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix validation issues in the EXPath module function catalogs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1739 closed</title>
   <pubDate>Tue, 4 Feb 2025 23:50:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1739</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1739</guid>
   <description>&lt;div&gt;&lt;p&gt;Obsolete references to ordering mode&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1741 closed</title>
   <pubDate>Tue, 4 Feb 2025 23:50:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1741</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1741</guid>
   <description>&lt;div&gt;&lt;p&gt;1739 drop references to ordering mode in the static context&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 108 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 4 Feb 2025 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/02-04</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—02-04</guid>
</item><item>
   <title>Issue #1757 closed</title>
   <pubDate>Tue, 4 Feb 2025 17:10:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1757</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1757</guid>
   <description>&lt;div&gt;&lt;p&gt;Build cleanup: remove the "by hand" diffs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1760 closed</title>
   <pubDate>Tue, 4 Feb 2025 17:10:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1760</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1760</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove hand-generated diffs from the builds&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1743 closed</title>
   <pubDate>Tue, 4 Feb 2025 17:07:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1743</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1743</guid>
   <description>&lt;div&gt;&lt;p&gt;1738 Formatting of Notes in F&amp;amp;O&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1733 closed</title>
   <pubDate>Tue, 4 Feb 2025 17:05:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1733</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1733</guid>
   <description>&lt;div&gt;&lt;p&gt;ACTION QT4CG-088-04, reworking the processing model diagram&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1746 closed</title>
   <pubDate>Tue, 4 Feb 2025 17:05:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1746</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1746</guid>
   <description>&lt;div&gt;&lt;p&gt;Replace processing model diagrams&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1750 closed</title>
   <pubDate>Tue, 4 Feb 2025 17:03:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1750</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1750</guid>
   <description>&lt;div&gt;&lt;p&gt;EXPath Binary : copy-edits and minor enhancements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1753 closed</title>
   <pubDate>Tue, 4 Feb 2025 17:03:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1753</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1753</guid>
   <description>&lt;div&gt;&lt;p&gt;1750 Overhaul of EXPath binary spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1571 closed</title>
   <pubDate>Tue, 4 Feb 2025 17:03:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1571</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1571</guid>
   <description>&lt;div&gt;&lt;p&gt;Discussion: On the implementability of the specs and helping implementors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1699 closed</title>
   <pubDate>Tue, 4 Feb 2025 17:02:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1699</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1699</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath function to calculate edit distance between two strings&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1682 closed</title>
   <pubDate>Tue, 4 Feb 2025 17:01:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1682</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1682</guid>
   <description>&lt;div&gt;&lt;p&gt;Type Promotion&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1734 closed</title>
   <pubDate>Tue, 4 Feb 2025 17:01:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1734</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1734</guid>
   <description>&lt;div&gt;&lt;p&gt;1682 Type promotion and operator mapping&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1764 closed</title>
   <pubDate>Tue, 4 Feb 2025 09:18:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1764</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1764</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove the BOM from unparsed text input?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1764 created</title>
   <pubDate>Tue, 4 Feb 2025 08:49:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1764</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1764</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove the BOM from unparsed text input?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XML parsing handles the BOM for us, and we say something explicit about the BOM when parsing JSON, but we're silent about the BOM when loading unparsed text. I think the right answer is to discard the BOM and return the text that follows it...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1762 closed</title>
   <pubDate>Mon, 3 Feb 2025 15:36:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1762</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1762</guid>
   <description>&lt;div&gt;&lt;p&gt;Combining different kinds of arrow&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1763 created</title>
   <pubDate>Mon, 3 Feb 2025 15:35:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1763</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1763</guid>
   <description>&lt;div&gt;&lt;p&gt;1716 Generalize syntax of arrow expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1716&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 108 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 3 Feb 2025 11:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/02-04</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-02-04</guid>
</item><item>
   <title>Issue #1762 created</title>
   <pubDate>Mon, 3 Feb 2025 10:44:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1762</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1762</guid>
   <description>&lt;div&gt;&lt;p&gt;Combining different kinds of arrow&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the spec, under arrow expressions, we have this example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(1 to 5) =!&amp;gt; xs:double() =!&amp;gt; math:sqrt() =!&amp;gt; fn($a) { $a + 1 }() =&amp;gt; sum()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That use of an inline function is pretty clumsy, and it would be nice to think we could eliminate it using the new &lt;code&gt;-&amp;gt;&lt;/code&gt; operator. But it ain't easy.&lt;/p&gt;
&lt;p&gt;We can't do&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(1 to 5) =!&amp;gt; xs:double() =!&amp;gt; math:sqrt() -&amp;gt; .+1 =&amp;gt; sum()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;because the precedence is wrong.&lt;/p&gt;
&lt;p&gt;We can't do&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(1 to 5) =!&amp;gt; (xs:double() =&amp;gt; math:sqrt() -&amp;gt; .+1 ) =&amp;gt; sum()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;because we can't have a parenthesised construct on the RHS of the mapping arrow.&lt;/p&gt;
&lt;p&gt;We can use the bang operator but the parentheses are awkward:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;((1 to 5) ! (xs:double(.) =&amp;gt; math:sqrt() -&amp;gt; (.+1) )) =&amp;gt; sum()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If we changed the precedences we could allow&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(1 to 5) ! xs:double(.) ! math:sqrt(.) ! (.+1)  -&amp;gt; sum(.)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which would require moving &lt;code&gt;-&amp;gt;&lt;/code&gt; so it has lower precedence than &lt;code&gt;!&lt;/code&gt;. But this would disrupt its relationship with &lt;code&gt;=&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1761 created</title>
   <pubDate>Mon, 3 Feb 2025 10:01:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1761</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1761</guid>
   <description>&lt;div&gt;&lt;p&gt;1752 Correct return type of fn:partition()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1752&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1760 created</title>
   <pubDate>Mon, 3 Feb 2025 09:44:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1760</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1760</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove hand-generated diffs from the builds&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1757&lt;/p&gt;
&lt;p&gt;The PR build isn't going to be very informative, but I'll leave this one open in case anyone wants to review the source code diffs.&lt;/p&gt;
&lt;p&gt;I did not attempt to remove the XML markup from the specs. Perhaps we should, but I think we'd want to manage that carefully to avoid an absolute mountain of merge conflicts.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1744 closed</title>
   <pubDate>Mon, 3 Feb 2025 09:15:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1744</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1744</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove dead wood re: SVG diagrams from the XSLT build&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1759 created</title>
   <pubDate>Mon, 3 Feb 2025 09:01:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1759</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1759</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix validation issues in the EXPath module function catalogs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1758&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1758 created</title>
   <pubDate>Mon, 3 Feb 2025 08:50:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1758</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1758</guid>
   <description>&lt;div&gt;&lt;p&gt;EXPath specification validation problems&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As @michaelhkay noted in email, the function catalogs for the EXPath specifications are not being validated.&lt;/p&gt;
&lt;p&gt;That validation only occurs during test generation ¯_(ツ)_/¯&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add an example to the EXPath file specification so that it's possible to run test generation&lt;/li&gt;
&lt;li&gt;Add test generation for EXPath file and binary to the build&lt;/li&gt;
&lt;li&gt;Fix the validation errors in the function catalog&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1756 closed</title>
   <pubDate>Mon, 3 Feb 2025 08:43:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1756</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1756</guid>
   <description>&lt;div&gt;&lt;p&gt;Make DeltaXML diffs on the main build too&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1757 created</title>
   <pubDate>Mon, 3 Feb 2025 08:20:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1757</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1757</guid>
   <description>&lt;div&gt;&lt;p&gt;Build cleanup: remove the "by hand" diffs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Unless I'm mistaken, the 'by hand' diffs, the ones that are created from explicit diff markup added by the editors, have not been consistently maintained for some time.&lt;/p&gt;
&lt;p&gt;We still have places that point to them, and I think this could be confusing.&lt;/p&gt;
&lt;p&gt;I propose that we pull all of that machinery out and remove references to them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1756 created</title>
   <pubDate>Mon, 3 Feb 2025 07:18:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1756</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1756</guid>
   <description>&lt;div&gt;&lt;p&gt;Make DeltaXML diffs on the main build too&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR should build DeltaXML diffs of the EXPath specs...and when merged, should build them on the main build as well.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1755 closed</title>
   <pubDate>Mon, 3 Feb 2025 07:02:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1755</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1755</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to make DeltaXML diffs for EXPath specs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1755 created</title>
   <pubDate>Mon, 3 Feb 2025 07:02:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1755</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1755</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to make DeltaXML diffs for EXPath specs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1754 created</title>
   <pubDate>Sun, 2 Feb 2025 23:57:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1754</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1754</guid>
   <description>&lt;div&gt;&lt;p&gt;Inverse functions to bin:hex, bin:bin, and bin:octal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In writing formal equivalents for the functions in the binary EXPath module, I found that while we have bin:bin() which turns a string of 0s and 1s into a binary value, we don't have any convenient way of doing the inverse. The same is true for octal. For hex we can cast to hexBinary and then cast to string, but that's a bit of a circumlocution.&lt;/p&gt;
&lt;p&gt;I propose functions bin:to-bin, bin:to-octal and bin:to-hex that convert a binary value to a string of binary, octal, or hexadecimal digits respectively. Perhaps with an options parameter that allows a grouping separator and grouping size to be specified.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1753 created</title>
   <pubDate>Sun, 2 Feb 2025 21:13:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1753</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1753</guid>
   <description>&lt;div&gt;&lt;p&gt;1750 Overhaul of EXPath binary spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Apart from general copy-editing, the main changes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A lot more examples, presented in executable markup format (though they are not yet tested)&lt;/li&gt;
&lt;li&gt;Many functions now have formal equivalents (again, currently untested)&lt;/li&gt;
&lt;li&gt;Allow underscores and spaces in input to bin:hex, bin:octal, and bin:bin&lt;/li&gt;
&lt;li&gt;Use type xs:unsignedByte for octet arguments&lt;/li&gt;
&lt;li&gt;Use an enum() type for the octet-order argument&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fix #1750&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1752 created</title>
   <pubDate>Sun, 2 Feb 2025 19:18:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1752</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1752</guid>
   <description>&lt;div&gt;&lt;p&gt;Return type of fn:partition()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The return type of &lt;code&gt;fn:partition&lt;/code&gt; should be &lt;code&gt;array(item()*)*&lt;/code&gt; not &lt;code&gt;array(item())*&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1751 created</title>
   <pubDate>Sun, 2 Feb 2025 00:28:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1751</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1751</guid>
   <description>&lt;div&gt;&lt;p&gt;bin:encode-string - should the result have a BOM?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Test cases in the EXPath test suite using &lt;code&gt;bin:encode-string&lt;/code&gt; with encoding=utf-16 include a BOM at the start of the output, but the spec says nothing about this. It's probably useful for some use case but a nuisance for others.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1750 created</title>
   <pubDate>Sat, 1 Feb 2025 00:44:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1750</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1750</guid>
   <description>&lt;div&gt;&lt;p&gt;EXPath Binary : copy-edits and minor enhancements&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Suggested minor enhancements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow underscores and whitespace in strings of binary, octal, or hex digits supplied as strings.&lt;/li&gt;
&lt;li&gt;Use type &lt;code&gt;xs:unsignedByte&lt;/code&gt; rather than xs:integer for octet values&lt;/li&gt;
&lt;li&gt;Use an enum type for params like "little-endian".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following are some suggested copy-edits:&lt;/p&gt;
&lt;p&gt;Abstract para 4 - link to XQuery 4.1. The last sentence of the para ("The signatures and summaries of functions defined in this document...") makes no sense.&lt;/p&gt;
&lt;p&gt;1.1 para 1, twice, ".)" should be ").".&lt;/p&gt;
&lt;p&gt;1.2 Mention that the coercion rules in 4.0 mean that wherever a function accepts xs:base64Binary, it also accepts xs:hexBinary (but we've changed the signature to allow either, anyway).&lt;/p&gt;
&lt;p&gt;para 2. " if the result return"?&lt;/p&gt;
&lt;p&gt;The Note is ineleganty worded.&lt;/p&gt;
&lt;p&gt;1.3 I guess we should integrate the test suite into QT4.&lt;/p&gt;
&lt;p&gt;1.5 para 2 "In accordance with current practice" eh?&lt;/p&gt;
&lt;p&gt;2.1 Example would benefit from reformatting.&lt;/p&gt;
&lt;p&gt;2.2 Example, similarly. Could use underscores in the long integers. "and the examples from above reverse"??&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;
&lt;p&gt;"fn:fn:binary-resource" does not yet exist and is triple-barrelled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid "apologetic quotes" in 'constants'. And elsewhere. If it doesn't work as plain English without quotes, then it needs to be a defined term.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4.1 and throughout, in Examples, use the F&amp;amp;O rendition rather than the right arrow. Also, add these functions to the example checking mechanism.&lt;/p&gt;
&lt;p&gt;4.1 Notes, be more precise than "similarly". Define formal equivalent. Non-editorial enhancement: allow underscores in the string.&lt;/p&gt;
&lt;p&gt;4.2 There must be a more elegant way of saying "(8-wise) (ASCII) binary digits ([01])". Allow underscores.&lt;/p&gt;
&lt;p&gt;4.2 "a xs:base64Binary with no embedded data" - use the term "zero-length".&lt;/p&gt;
&lt;p&gt;4.3 similarly. Allow underscores.&lt;/p&gt;
&lt;p&gt;Function properties: I think all these functions are pure functions so it's a waste of space to say this explicitly for each function.&lt;/p&gt;
&lt;p&gt;4.4, 4.5 Use &lt;code&gt;xs:unsignedByte&lt;/code&gt; to represent octets now that we have implicit downcasting. (Changes error code [[bin:octet-out-of-range]to XPTY0004).&lt;/p&gt;
&lt;p&gt;5.6 "blank octets"?&lt;/p&gt;
&lt;p&gt;7.1.2 "or assumed to be represented"&lt;/p&gt;
&lt;p&gt;7.1.3 "Care should be taken" - what does this mean?&lt;/p&gt;
&lt;p&gt;"Positive and negative infinities are supported" - who or what is doing the supporting?&lt;/p&gt;
&lt;p&gt;Use underscore rather than space as separators between digits.&lt;/p&gt;
&lt;p&gt;'quiet' NaN - avoid apologetic quotes.&lt;/p&gt;
&lt;p&gt;7.4 - I find the note regarding signed/unsigned integers very confusing.&lt;/p&gt;
&lt;p&gt;8.1: "bitwise or" - avoid apologetic quotes. For these three functions we should say what they do rather than assuming the reader will guess from the names. bin:shift could do with more precision. Perhaps the functions could be explained more formally by a mapping from a binary value to a sequence of booleans, then for example bin:and becomes something like for-each-pair(op:from-bits($a), op:from-bits($b), op('and') ) =&amp;gt; op:to-bits().&lt;/p&gt;
&lt;p&gt;8.5: avoid the notation &lt;code&gt;|$by|&lt;/code&gt; for absolute value. Not all of us remember our schooldays. (And when I was at school, &lt;code&gt;by&lt;/code&gt; meant &lt;code&gt;b × y&lt;/code&gt;, and $ meant dollars.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1749 closed</title>
   <pubDate>Fri, 31 Jan 2025 12:56:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1749</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1749</guid>
   <description>&lt;div&gt;&lt;p&gt;Don't set the function finder position to 'fixed' on small devices&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1749 created</title>
   <pubDate>Fri, 31 Jan 2025 12:56:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1749</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1749</guid>
   <description>&lt;div&gt;&lt;p&gt;Don't set the function finder position to 'fixed' on small devices&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is also related to 1747. It "fixes" the problem that @ChristianGruen reported where the function finder obscured content on mobile (narrow) devices. I've changed things so that it isn't at a fixed location on narrow devices. It still appears above the ToC, but it scrolls as normal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1748 closed</title>
   <pubDate>Fri, 31 Jan 2025 09:41:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1748</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1748</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix 'window.onload' bug in ToC JS&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1748 created</title>
   <pubDate>Fri, 31 Jan 2025 09:40:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1748</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1748</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix 'window.onload' bug in ToC JS&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This fixes 1747 so I'm going to push it immediately.&lt;/p&gt;
&lt;p&gt;I'm leaving the bug open because I'll also look at @ChristianGruen 's report that it is problematic on mobile.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1747 created</title>
   <pubDate>Fri, 31 Jan 2025 07:16:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1747</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1747</guid>
   <description>&lt;div&gt;&lt;p&gt;Function finder is broken&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The function finder in F&amp;amp;O (and elsewhere) is broken. I believe that it uses the ToC to find the link target and now that the ToC structure has changed, it's failing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1745 closed</title>
   <pubDate>Thu, 30 Jan 2025 15:50:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1745</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1745</guid>
   <description>&lt;div&gt;&lt;p&gt;Implement expanding/collapsing ToC&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1746 created</title>
   <pubDate>Thu, 30 Jan 2025 15:49:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1746</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1746</guid>
   <description>&lt;div&gt;&lt;p&gt;Replace processing model diagrams&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1733&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1745 created</title>
   <pubDate>Thu, 30 Jan 2025 13:48:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1745</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1745</guid>
   <description>&lt;div&gt;&lt;p&gt;Implement expanding/collapsing ToC&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm just going to merge this one because&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The CG agreed they wanted this&lt;/li&gt;
&lt;li&gt;All of the changes are presentational, there are no technical changes&lt;/li&gt;
&lt;li&gt;The PR build won't work anyway&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I did make a couple of executive decisions.&lt;/p&gt;
&lt;p&gt;The use of "..." as the target to click on didn't seem like a practical affordance. It's not a common use of ellipsis and it looked too much like it simply meant that part of the title was elided. I went with right and down triangles instead. And I added the few lines of JS required to make them "turn".&lt;/p&gt;
&lt;p&gt;I added a top-level expand/collapse that does all of the sections. I wasn't happy that with the new UI, there was no way to get an overview of the document by seeing all of the section titles.&lt;/p&gt;
&lt;p&gt;I tinkered with the CSS. I'm not uniformly happy with it, especially with the treatment of long titles, but I think the aesthetic failings are infrequent.&lt;/p&gt;
&lt;p&gt;We need to review accessibility before we try to publish as a CG Report.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1744 created</title>
   <pubDate>Thu, 30 Jan 2025 10:47:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1744</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1744</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove dead wood re: SVG diagrams from the XSLT build&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Completes action QT4CG-106-01&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1743 created</title>
   <pubDate>Thu, 30 Jan 2025 10:11:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1743</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1743</guid>
   <description>&lt;div&gt;&lt;p&gt;1738 Formatting of Notes in F&amp;amp;O&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Improves the stylesheets and CSS so that Notes sections in the F&amp;amp;O spec are rendered with a single continuous green stripe, rather than a separate (and sometimes indented) stripe per paragraph or list item.&lt;/li&gt;
&lt;li&gt;Makes some other markup changes identified in passing, especially using &lt;code&gt;&amp;lt;char&amp;gt;&lt;/code&gt; to mark up individual characters.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1742 created</title>
   <pubDate>Wed, 29 Jan 2025 20:20:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1742</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1742</guid>
   <description>&lt;div&gt;&lt;p&gt;Maps constructed using streamed xsl:fork instruction should not be ordered&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;One of the techniques used in XSLT streaming is to build multiple outputs during a single streamed pass of the input, and the multiple outputs can be captured in different entries in a map (in different prongs of an &lt;code&gt;xsl:fork&lt;/code&gt; instruction). The ordering of such a map should be implementation-dependent, in order to allow construction in parallel threads.&lt;/p&gt;
&lt;p&gt;Furthermore, I think that an xsl:map instruction used in this way should probably not allow duplicate keys. In principle we could collect key/value pairs during the streamed processing and then resolve duplicates at the end, but it's extra complexity.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1741 created</title>
   <pubDate>Wed, 29 Jan 2025 11:08:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1741</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1741</guid>
   <description>&lt;div&gt;&lt;p&gt;1739 drop references to ordering mode in the static context&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1739&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1740 created</title>
   <pubDate>Wed, 29 Jan 2025 10:22:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1740</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1740</guid>
   <description>&lt;div&gt;&lt;p&gt;1725b Further elaboration of duplicates handling in maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Actions QT4CG-107-02 and QT4CG-107-03.&lt;/p&gt;
&lt;p&gt;The three functions map:build, map:of-pairs, and map:merge now all have the same options parameters, and avoid duplication in the specification. The xsl:map instruction is defined by reference to map:merge.&lt;/p&gt;
&lt;p&gt;Although the action suggested specifying these functions to use the first key from a set of duplicates, I found this was not possible because of the way map:put is defined. They therefore use the last key from the set of duplicates.&lt;/p&gt;
&lt;p&gt;Fix #1725&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1739 created</title>
   <pubDate>Wed, 29 Jan 2025 09:45:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1739</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1739</guid>
   <description>&lt;div&gt;&lt;p&gt;Obsolete references to ordering mode&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The functions &lt;code&gt;fn:distinct-values&lt;/code&gt; and &lt;code&gt;fn:duplicate-values&lt;/code&gt; refer to the ordering mode in the static context, a concept that we have abolished.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1738 created</title>
   <pubDate>Wed, 29 Jan 2025 00:20:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1738</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1738</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting of lists within notes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The formatting of lists within notes in F&amp;amp;O is weird: see for example the math:atan2 function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1737 created</title>
   <pubDate>Tue, 28 Jan 2025 21:25:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1737</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1737</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar problems introduced by #1732&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Today's merge of #1732 has introduced two problems to the grammar as now shown in the spec:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ValueExpr&lt;/code&gt; has changed from&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ValueExpr ::= ValidateExpr | ExtensionExpr | SimpleMapExpr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ValueExpr ::= SimpleMapExpr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This disconnects &lt;code&gt;ValidateExpr&lt;/code&gt; and &lt;code&gt;ExtensionExpr&lt;/code&gt; from the rest of the grammar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AnnotatedDecl&lt;/code&gt; has been added without being referenced. Also it describes something that would look like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare declare variable $x external
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1722 closed</title>
   <pubDate>Tue, 28 Jan 2025 19:40:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1722</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1722</guid>
   <description>&lt;div&gt;&lt;p&gt;1717 define focus functions using pipeline operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1717 closed</title>
   <pubDate>Tue, 28 Jan 2025 19:40:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1717</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1717</guid>
   <description>&lt;div&gt;&lt;p&gt;Define focus functions in terms of the pipeline operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1736 created</title>
   <pubDate>Tue, 28 Jan 2025 18:14:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1736</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1736</guid>
   <description>&lt;div&gt;&lt;p&gt;Add option retain-order=false when constructing maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I would like to provide an option on functions that potentially create large maps, including&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xsl:map
map:build
map:merge
map:of-pairs
parse-json
json-doc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If retain-option=false is specified, the user declares to the processor that they don't require the resulting map to be in any particular order. An implementation is of course free to ignore this and deliver an ordered map anyway, but if the implementation can save time or space by not retaining order then it is free to do so.&lt;/p&gt;
&lt;p&gt;I propose to provide some data quantifying the potential benefits of this option. I realise that some optimisation hints provided in the past, for example the &lt;code&gt;unordered{}&lt;/code&gt; expression, have been ineffective, but I think there is a difference here because changing maps to be ordered may result in a performance regression for people moving from 3.1 to 4.0.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 107 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 28 Jan 2025 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/01-28</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—01-28</guid>
</item><item>
   <title>Issue #1719 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:13:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1719</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1719</guid>
   <description>&lt;div&gt;&lt;p&gt;Purging dead build code&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1731 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:13:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1731</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1731</guid>
   <description>&lt;div&gt;&lt;p&gt;1719 drop shared spec from build&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1725 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:10:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1725</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1725</guid>
   <description>&lt;div&gt;&lt;p&gt;Position of duplicates in ordered maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1727 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:10:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1727</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1727</guid>
   <description>&lt;div&gt;&lt;p&gt;1725 Define more detailed rules for duplicates in maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1485 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:07:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1485</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1485</guid>
   <description>&lt;div&gt;&lt;p&gt;Record declarations in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1708 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:07:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1708</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1708</guid>
   <description>&lt;div&gt;&lt;p&gt;1485 Add xsl:record-type declaration&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #76 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:06:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/76</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-76</guid>
   <description>&lt;div&gt;&lt;p&gt;non-deterministic time&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #747 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:06:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/747</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-747</guid>
   <description>&lt;div&gt;&lt;p&gt;QName literals&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #885 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:06:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/885</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-885</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:uuid&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #981 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:05:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/981</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-981</guid>
   <description>&lt;div&gt;&lt;p&gt;Identify optional arguments in callback functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1720 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:04:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1720</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1720</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar overhaul&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1732 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:04:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1732</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1732</guid>
   <description>&lt;div&gt;&lt;p&gt;1720 grammar simplification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1069 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:03:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1069</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1069</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:ucd&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1124 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:03:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1124</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1124</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting XPath/XQuery: Preferences, Conventions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1252 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:03:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1252</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1252</guid>
   <description>&lt;div&gt;&lt;p&gt;Add a new function `fn:html-doc`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1728 closed</title>
   <pubDate>Tue, 28 Jan 2025 17:01:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1728</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1728</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix CSS for production tables&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1735 created</title>
   <pubDate>Mon, 27 Jan 2025 17:09:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1735</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1735</guid>
   <description>&lt;div&gt;&lt;p&gt;1341 Drop $position callback from many functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Responding to the discussion in #1341, this (somewhat experimental) PR explores the possibility of dropping the optional
$position argument to the callback of many higher-order functions such as some(), every(), filter(), for-each(), fold-left(), fold-right(). Instead, it provides the option to wrap the input sequence in a call of numbered-items() which replaces each item in the input with an (item, position) pair.&lt;/p&gt;
&lt;p&gt;I've done this only (so far) for higher-order sequence functions, but the intent is that the same could be done for arrays and (potentially) maps.&lt;/p&gt;
&lt;p&gt;I left the position argument in place for a few functions where losing it seemed to cause genuine inconvenience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;partition(), where the function wraps the supplied items into arrays, and you don't want to have to remove the positions afterwards&lt;/li&gt;
&lt;li&gt;subsequence-where(), where many use cases are likely to use positional information&lt;/li&gt;
&lt;li&gt;for-each-pair(), where there are two input sequences and it seems clumsy to associate position information with one or the other&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main benefit is that we provide one basic mechanism which is automatically available everywhere, which means we don't have to have debates about whether or not there is a use case for adding position information to (say) fold-left or scan-right.&lt;/p&gt;
&lt;p&gt;A further benefit is that the functions defined for sequences automatically become available for arrays and maps. I haven't yet explored the impact on maps and arrays; I will wait first to see what the reaction is to this proposal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1730 closed</title>
   <pubDate>Mon, 27 Jan 2025 15:12:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1730</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1730</guid>
   <description>&lt;div&gt;&lt;p&gt;Consistency in default handling of map duplicates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1734 created</title>
   <pubDate>Mon, 27 Jan 2025 13:05:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1734</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1734</guid>
   <description>&lt;div&gt;&lt;p&gt;1682 Type promotion and operator mapping&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1682&lt;/p&gt;
&lt;p&gt;Moves the relevant parts of the operator mapping table into the sections for Arithmetic Expressions and Value Comparisons. Adds links to the op: functions in F&amp;amp;O.&lt;/p&gt;
&lt;p&gt;Drops the Type Promotion appendix, moving the rules inline; and drops the term "type promotion"&lt;/p&gt;
&lt;p&gt;Adjusts the specs for sum() and avg() so they are now defined directly in terms of pairwise addition of values.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1733 created</title>
   <pubDate>Mon, 27 Jan 2025 10:17:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1733</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1733</guid>
   <description>&lt;div&gt;&lt;p&gt;ACTION QT4CG-088-04, reworking the processing model diagram&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have no idea what tool was used to create the current &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-processing-model"&gt;processing model diagram&lt;/a&gt;. We know it needs to be updated, but I've no particular skill with drawing programs, so I spent half an hour constructing a Graphviz diagram:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;digraph Processing_Model {
    subgraph clusterQT4 {
        Exec [label="Execution\nEngine" ];
        XDM [label="XPath Data\nModel"; shape="note" ];
        AST [label="Abstract\nSyntax Tree" ];
        Static [label="Static\nContext"; shape="box3d" ];
        Dynamic [label="Dynamic\nContext"; shape="box3d" ];
        Schema [label="Schema\nDefinitions"; shape="note" ];

        XPath -&amp;gt; AST [label=" SQ1" ];
        AST -&amp;gt; AST [label=" SQ5" ];
        AST -&amp;gt; Exec [label=" DQ1" ];
        Schema -&amp;gt; Static;
        Static -&amp;gt; AST [label=" SQ4" ];
        Static -&amp;gt; Dynamic [label=" DQ2" ];
        Dynamic -&amp;gt; Exec [ dir="both"; label=" DQ5" ];
        Exec -&amp;gt; XDM [ dir="both"; label=" DQ4" ];
    }
    XML [ shape="note" ];
    PSVI [ shape="note" ];
    XML -&amp;gt; PSVI [ label=" DM1" ];
    PSVI -&amp;gt; XDM  [ label=" DM2" ];
    XML -&amp;gt; XDM [ label=" DM1" ];

    Direct [ label=" Direct\nGeneration" ];
    Direct -&amp;gt; XDM [ label=" DM3" ];

    Host [label="Host\nEnvironment" ];
    Host -&amp;gt; Schema [label=" SI1" ];
    Host -&amp;gt; Static [label=" SQ2" ];
    Host -&amp;gt; Dynamic [label=" DQ3" ];

    Serialize [ shape="note" ];
    XDM -&amp;gt; Serialize [ label=" DM4" ];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/7ae82045-2e28-4db2-afdc-b69cb0f72bdb" alt="Image"/&gt;&lt;/p&gt;
&lt;p&gt;Is this worth pursuing, or is that just half an hour of my life I'll never get back?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 107 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 27 Jan 2025 09:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/01-28</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-01-28</guid>
</item><item>
   <title>Pull request #1732 created</title>
   <pubDate>Sun, 26 Jan 2025 22:12:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1732</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1732</guid>
   <description>&lt;div&gt;&lt;p&gt;1720 grammar simplification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR primarily affects the grammar file, simplifying it to remove most of the material that is only there to support the generation of a JavaCC parser (which has probably not been achievable since XPath/XQuery 2.0).&lt;/p&gt;
&lt;p&gt;The section of the grammar that defines the binary operators starting with &lt;code&gt;OrExpr&lt;/code&gt; is now expressed using conventional production rules, rather than the precedence-based grammar previously used. This allows deletion of some convoluted code in grammar2spec.xsl.&lt;/p&gt;
&lt;p&gt;The DTD for the grammar file is revised to exclude many constructs that are no longer used.&lt;/p&gt;
&lt;p&gt;Many simple token definitions (especially those that consist of a simple constant string) have been inlined.&lt;/p&gt;
&lt;p&gt;Fix #1720&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1731 created</title>
   <pubDate>Sat, 25 Jan 2025 23:20:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1731</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1731</guid>
   <description>&lt;div&gt;&lt;p&gt;1719 drop shared spec from build&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Removes tasks from the gradle build, and associated stylesheets, that are there only to construct the "shared XPath/XQuery specification" which is no longer used by the editors or made visible to readers.&lt;/p&gt;
&lt;p&gt;Also fixes a couple of link errors/warnings in the build.&lt;/p&gt;
&lt;p&gt;Fix #1719&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1730 created</title>
   <pubDate>Sat, 25 Jan 2025 18:03:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1730</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1730</guid>
   <description>&lt;div&gt;&lt;p&gt;Consistency in default handling of map duplicates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In 3.1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map:merge()&lt;/code&gt; defaults to duplicates = use-first&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xsl:map&lt;/code&gt; defaults to duplicates = reject&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In 4.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map:build&lt;/code&gt; defaults to duplicates = combine&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map:of-pairs&lt;/code&gt; defaults to duplicates = combine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Should we try to align the defaults?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1729 created</title>
   <pubDate>Fri, 24 Jan 2025 22:04:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1729</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1729</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar problems introduced by #1721&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Some productions of the XQuery 4.0 grammar were made obsolete by recent changes, but still occur in the document:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StringConstructorStart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringInterpolationStart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringInterpolationEnd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringConstructorEnd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TagQName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EndTagQName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ProcessingInstructionStart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ProcessingInstructionEnd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DirCommentContentChar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DirCommentContentDashChar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, the replacement of &lt;code&gt;declare record&lt;/code&gt; by &lt;code&gt;declare type record&lt;/code&gt; has intoduced a new ambiguity. For example, with the input&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare type A as xs:integer;
declare type record as (A);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it remains unclear whether the second line declares a  type named "record", in which case&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;42 instance of record
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or a type named "as", where&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;{'A': 42} instance of as
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My proposal would be return to &lt;code&gt;declare record&lt;/code&gt;. There are also 13 examples in the document using &lt;code&gt;declare record&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1723 closed</title>
   <pubDate>Fri, 24 Jan 2025 21:00:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1723</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1723</guid>
   <description>&lt;div&gt;&lt;p&gt;`ThenAction` left over after removal of `BracedActions`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1728 created</title>
   <pubDate>Fri, 24 Jan 2025 13:15:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1728</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1728</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix CSS for production tables&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR removes some extraneous space between the rows and columns in the production tables (cellspacing) and turns off the odd grey background on comments. (I don't think the grey backbround was helping any, but if you disagree...)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1721 closed</title>
   <pubDate>Fri, 24 Jan 2025 13:01:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1721</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1721</guid>
   <description>&lt;div&gt;&lt;p&gt;1713 Revise code for generating production rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1727 created</title>
   <pubDate>Thu, 23 Jan 2025 17:58:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1727</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1727</guid>
   <description>&lt;div&gt;&lt;p&gt;1725 Define more detailed rules for duplicates in maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Clarifies the rules for how duplicates are handled by map:merge, map:build, map:of-pairs, and xsl:map.&lt;/p&gt;
&lt;p&gt;Introduces a callback option for map:merge that is compatible with map:build and map:of-pairs, to increase commonality between all four functions/instructions.&lt;/p&gt;
&lt;p&gt;Fix #1725&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1726 closed</title>
   <pubDate>Thu, 23 Jan 2025 16:50:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1726</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1726</guid>
   <description>&lt;div&gt;&lt;p&gt;1726 Control order when map input has duplicate keys&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1726 created</title>
   <pubDate>Thu, 23 Jan 2025 12:54:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1726</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1726</guid>
   <description>&lt;div&gt;&lt;p&gt;1726 Control order when map input has duplicate keys&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1725 created</title>
   <pubDate>Thu, 23 Jan 2025 11:20:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1725</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1725</guid>
   <description>&lt;div&gt;&lt;p&gt;Position of duplicates in ordered maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It became clear to me when writing test cases that the specs aren't entirely clear about what happens when building a map from an input sequence that contains duplicate keys. It says clearly what entry should be created for the duplicated key, but it doesn't say clearly where this entry should appear in the result.&lt;/p&gt;
&lt;p&gt;There are four functions/instructions that this applies to: map:merge, map:build, map:of-pairs, and xsl:map.&lt;/p&gt;
&lt;p&gt;I propose that in each case, the position of the entry for the duplicated key in the resulting map should correspond to the position of the first occurrence of that key in the input sequence. That is, "order of first appearance": the effect should be the same as if new entries are always created using a map:put() operation.&lt;/p&gt;
&lt;p&gt;This might be slightly unexpected in the case of &lt;code&gt;map:merge()&lt;/code&gt; with the option &lt;code&gt;duplicates=use-last&lt;/code&gt;. It means the value will be that of the last duplicate, but its position will be that of the first duplicate. However, the other three functions/instructions achieve the effect of use-last with the callback &lt;code&gt;on-duplicates=fn{$a, $b){$a}&lt;/code&gt; which only controls the value of the entry, and cannot be used to control its position, and I think it makes sense for &lt;code&gt;map:merge&lt;/code&gt; with &lt;code&gt;duplicates=use-last&lt;/code&gt; to behave in the same way.&lt;/p&gt;
&lt;p&gt;Of course we could introduce a separate option to control the position of the combined entry, but I think that would be overkill. &lt;code&gt;xsl:for-each-group&lt;/code&gt; and &lt;code&gt;distinct-values&lt;/code&gt; both use the "order of first appearance" rule and this has never caused any problems. (&lt;code&gt;group-by&lt;/code&gt; in XQuery delivers groups in implementation-dependent order, however).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1724 created</title>
   <pubDate>Wed, 22 Jan 2025 23:54:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1724</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1724</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow @copy-namespaces on &amp;lt;xsl:mode&amp;gt;?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As part of an XSLT transformation I need to remove an unused (anywhere) namespace declaration and &lt;code&gt;&amp;lt;xsl:mode on-no-match="shallow-copy"/&amp;gt;&lt;/code&gt; doesn’t appear to accept a &lt;code&gt;@copy-namespaces&lt;/code&gt; attribute where I can tell it not to copy unused namespaces. The unused namespace was used on a single attribute on the input document, but I’m removing the attribute entirely as part of the transformation, so nothing will remain in the output document that uses the namespace in question. With &lt;code&gt;&amp;lt;xsl:mode on-no-match="shallow-copy"/&amp;gt;&lt;/code&gt; the namespace declaration is copied into the result, even though it is not used. If I use the old identity template and set the value of &lt;code&gt;@copy-namespaces&lt;/code&gt; on it to something falsy, I get the result I want, that is, no unneeded namespace declaration.&lt;/p&gt;
&lt;p&gt;Insofar as &lt;code&gt;&amp;lt;xsl:mode on-no-match="shallow-copy"/&amp;gt;&lt;/code&gt; has come to fill the role formerly occupied by the identity template, would it be reasonable to allow it also to declare that unused namespaces should not be copied? If that request is reasonable, is it reasonable to think of it as a bug fix, rather than a new-feature request?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1723 created</title>
   <pubDate>Wed, 22 Jan 2025 22:07:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1723</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1723</guid>
   <description>&lt;div&gt;&lt;p&gt;`ThenAction` left over after removal of `BracedActions`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Thanks for fixing the &lt;code&gt;IfExpr&lt;/code&gt; ambiguity.&lt;/p&gt;
&lt;p&gt;In #1712, &lt;code&gt;BracedAction&lt;/code&gt; was introduced to replace the previous rules for braced actions. Of these, &lt;code&gt;ThenAction&lt;/code&gt; still appears in the EBNF summary, but it is no longer referenced.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1651 closed</title>
   <pubDate>Wed, 22 Jan 2025 17:27:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1651</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1651</guid>
   <description>&lt;div&gt;&lt;p&gt;Ordered Maps: maps that retain insertion order&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1703 closed</title>
   <pubDate>Wed, 22 Jan 2025 17:27:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1703</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1703</guid>
   <description>&lt;div&gt;&lt;p&gt;1651 ordered maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1709 closed</title>
   <pubDate>Wed, 22 Jan 2025 11:55:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1709</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1709</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend diagram of item types to include record types etc&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1722 created</title>
   <pubDate>Wed, 22 Jan 2025 11:46:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1722</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1722</guid>
   <description>&lt;div&gt;&lt;p&gt;1717 define focus functions using pipeline operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1717&lt;/p&gt;
&lt;p&gt;Provides a formal definition of focus functions making use of the new pipeline operator.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1721 created</title>
   <pubDate>Wed, 22 Jan 2025 11:27:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1721</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1721</guid>
   <description>&lt;div&gt;&lt;p&gt;1713 Revise code for generating production rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The main change here is to change the way "scraps" are expanded: these are the local collections of production rules that appear inline within the spec. These are now driven by a single &lt;code&gt;prodrecap&lt;/code&gt; element naming the rule to be expanded, and the logic is now automated for deciding (a) which subsidiary production rules to include in the scrap, and (b) which occurrence of a production rule to use as the target for a hyperlinked reference to that rule, depending on where the reference appears.&lt;/p&gt;
&lt;p&gt;Along with this there has been a fair bit of deletion of legacy code and general modernisation (e.g using XSLT 2.0 and 3.0 constructs where appropriate).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1720 created</title>
   <pubDate>Wed, 22 Jan 2025 10:50:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1720</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1720</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar overhaul&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There is a lot of dead wood in the xpath-grammar.xml file. This issue is raised to capture some observations and suggestions about how it can be simplified.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The DTD lists 19 attributes that can appear on g:token, and documents the meaning of 5 of them (very briefly). I suspect that many of the attributes are never used. Many of them were probably intended primarily for use by the JavaCC parser generator.&lt;/li&gt;
&lt;li&gt;As if that weren't enough, the grammar2spec stylesheet has logic that looks for additional attributes (an example is &lt;code&gt;@alias-for&lt;/code&gt;) which are not even allowed by the DTD let alone being in active use.&lt;/li&gt;
&lt;li&gt;The "if" logic to assign productions to different languages (xpath, xquery, XSLT patterns) is hard to maintain and could be automated: just search for productions that are reachable from the top-level production for each language. This could be done by a preprocessing stylesheet that generates a grammar file for each language.&lt;/li&gt;
&lt;li&gt;The switch into a precedence-based grammar for binary operators (g:exprProduction name="OperatorExpr") doesn't really help anyone. For generating production rules in the spec, it just complicates the generation logic. The same is true for anyone else writing applications that use the grammar as input. It doesn't really make life easier for maintainers of the grammar, because it means there is more to learn.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the JavaCC machinery is still in the repo and I think it could probably go. Leaving stuff like that lying around makes things more difficult when you need to search filestore for references to things.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1719 created</title>
   <pubDate>Tue, 21 Jan 2025 22:57:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1719</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1719</guid>
   <description>&lt;div&gt;&lt;p&gt;Purging dead build code&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the course of working on #1713 I've been exploring some dark corners of the build system. There's a lot of dead code. Some of it might come in useful in the future (e.g. code supporting XQuery Update) but most will be very hard to revive. For example there's a lot of grammar machinery which is there only to allow generation of a JavaCC parser.&lt;/p&gt;
&lt;p&gt;The main purpose of this issue is to capture notes that might lead to some reduction of technical debt.&lt;/p&gt;
&lt;p&gt;The gradle build is currently giving me&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning: link-text-with-check was unable to make a link for $ref-id="doc-shared40-Prolog"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That message comes from &lt;code&gt;xmlspec-override.xsl&lt;/code&gt;. This stylesheet looks like dead code because it has lots of references to XPath30 and XQuery30. But it can't be completely dead if we're getting errors from it. It's imported from two places: xpath-functions-30.xsl in the F&amp;amp;O tree and shared.xsl in the xquery40 tree. The message comes from gradle task &lt;code&gt;xquery_shared_html&lt;/code&gt;. As far as I can see the build system is constructing an XPath specification, an XQuery specification, and a "shared" specification which is a union of the two. (It starts off "XQuery 4.0 and XPath 4.0 is an expression language that allows..."). Presumably this was intended to allow editors and WG members to review a single document rather than reviewing XPath and XQuery separately. But I don't think it's used today, I think we could kill it off.&lt;/p&gt;
&lt;p&gt;shared.xsl is referenced only from build.gradle when building the shared specification.&lt;/p&gt;
&lt;p&gt;xpath-functions-30.xsl doesn't appear to be referenced from anywhere, and it carries a comment saying&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Created 17 Dec 2008 by MHK.
 No longer used 16 Feb 2009?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the short term I've deleted the code in xmlspec-override.xsl starting with the comment "Our inability to create a link for $ref-id may be a sign of something wrong, so...". This gets rid of the warning messages. In the longer term, subject to confirmation, I think we can delete the build targets associated with the "shared" language spec, and delete the stylesheets xmlspec-override.xsl, xpath-functions-30.xsl, and shared.xsl.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1718 created</title>
   <pubDate>Tue, 21 Jan 2025 17:45:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1718</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1718</guid>
   <description>&lt;div&gt;&lt;p&gt;Ordered Maps: positions in callback functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Now that maps have a defined order, we should add the position to HOF parameters in map functions (in alignment with sequence and array functions). Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:for-each(
  $map     as map(*),	
  $action  as fn($key as xs:anyAtomicType, $value as item()*, $pos as xs:integer) as item()*	
) as item()*

map:filter(
  $map        as map(*),	
  $predicate  as fn($key as xs:anyAtomicType, $value as item()*, $pos as xs:integer) as xs:boolean?	
) as map(*)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 106 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 21 Jan 2025 17:40:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/01-21</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—01-21</guid>
</item><item>
   <title>Issue #1706 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:22:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1706</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1706</guid>
   <description>&lt;div&gt;&lt;p&gt;Ambiguous `if` syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1712 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:22:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1712</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1712</guid>
   <description>&lt;div&gt;&lt;p&gt;1706 Drop "else if" and "else" clauses from braced conditionals&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1685 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:20:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1685</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1685</guid>
   <description>&lt;div&gt;&lt;p&gt;Pipeline Operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1686 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:20:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1686</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1686</guid>
   <description>&lt;div&gt;&lt;p&gt;1685 Pipeline Operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1701 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:18:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1701</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1701</guid>
   <description>&lt;div&gt;&lt;p&gt;Add dedication to MSM (action QT4CG-088-01)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1705 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:16:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1705</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1705</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:divide-decimals, fn:round: large precision values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1711 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:16:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1711</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1711</guid>
   <description>&lt;div&gt;&lt;p&gt;1705 Say that max precision is implementation-defined&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1710 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:14:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1710</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1710</guid>
   <description>&lt;div&gt;&lt;p&gt;1709 Updated type diagrams&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1606 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:13:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1606</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1606</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop named item types other than named record types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1494 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:13:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1494</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1494</guid>
   <description>&lt;div&gt;&lt;p&gt;Records: Introduction?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1176 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:13:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1176</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1176</guid>
   <description>&lt;div&gt;&lt;p&gt;Use fn:parse-uri to check whether a filepath is relative or absolute&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1700 closed</title>
   <pubDate>Tue, 21 Jan 2025 17:11:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1700</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1700</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove some dead .DS_Store files&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1717 created</title>
   <pubDate>Tue, 21 Jan 2025 16:59:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1717</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1717</guid>
   <description>&lt;div&gt;&lt;p&gt;Define focus functions in terms of the pipeline operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Now that we have accepted the pipeline operator into the language, we can define the semantics of focus functions to take advantage of them, specifically, &lt;code&gt;fn() { EXPR }&lt;/code&gt; can be defined to be equivalent to &lt;code&gt;fn($v) { $v -&amp;gt; EXPR }&lt;/code&gt; where $v is an otherwise-unused variable name.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 106 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Tue, 21 Jan 2025 10:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/01-21</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-01-21</guid>
</item><item>
   <title>Issue #1716 created</title>
   <pubDate>Mon, 20 Jan 2025 21:13:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1716</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1716</guid>
   <description>&lt;div&gt;&lt;p&gt;Variable lookahead needed for `ArrowTarget`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current grammar definition allows any &lt;code&gt;QName&lt;/code&gt; (via &lt;code&gt;EQName&lt;/code&gt;) as an &lt;code&gt;ArrowStaticFunction&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ArrowTarget
         ::= ArrowStaticFunction ArgumentList
           | ArrowDynamicFunction PositionalArgumentList
ArrowStaticFunction
         ::= EQName
ArrowDynamicFunction
         ::= VarRef
           | InlineFunctionExpr
           | ParenthesizedExpr 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This complicates the distinction of the static and dynamic variants of &lt;code&gt;ArrowTarget&lt;/code&gt;, as it cannot be done with a fixed number of lookahead tokens. E.g. in an expression starting like this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;A =&amp;gt; fn ( $A, $B, $C, (: ... :) $Z ) { } ( 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the distinction cannot be made before the left brace is seen. While constructing an LR parser, there is a shift-reduce conflict between shifting &lt;code&gt;fn&lt;/code&gt; as a keyword of an &lt;code&gt;InlineFunctionExpr&lt;/code&gt;, or reducing &lt;code&gt;fn&lt;/code&gt; to the &lt;code&gt;QName&lt;/code&gt; of &lt;code&gt;EQName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This can easily be fixed by adding &lt;code&gt;xgc: reserved-function-names&lt;/code&gt; to &lt;code&gt;ArrowStaticFunction&lt;/code&gt;, which would also be consistent with other function calls in disallowing reserved function names:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ArrowStaticFunction
         ::= EQName
                          /* xgc: reserved-function-names */		 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But could not &lt;code&gt;ArrowTarget&lt;/code&gt; also be written like the following?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ArrowTarget
         ::= FunctionCall
           | DynamicFunctionCall
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the &lt;code&gt;xgc: reserved-function-names&lt;/code&gt; constraint would be inherited from &lt;code&gt;FunctionCall&lt;/code&gt;. It eliminates &lt;code&gt;ArrowStaticFunction&lt;/code&gt; and &lt;code&gt;ArrowDynamicFunction&lt;/code&gt; and at the same time lifts some restrictions imposed by the current &lt;code&gt;ArrowTarget&lt;/code&gt;. It does not cause any LALR(2) conflicts.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1715 created</title>
   <pubDate>Mon, 20 Jan 2025 13:59:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1715</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1715</guid>
   <description>&lt;div&gt;&lt;p&gt;Array Lookups: partial removal of out-of-bounds checks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Various QT4 tests imply that the out-of-bounds check for arrays have been removed. An example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;test-case name="UnaryLookup-005a"&amp;gt;
  &amp;lt;description&amp;gt;Integer subscript into an array: array index too low&amp;lt;/description&amp;gt;
  &amp;lt;created by="Michael Kay" on="2014-11-27"/&amp;gt;
  &amp;lt;modified by="Michael Kay" on="2024-07-22" change="returns () in 4.0"/&amp;gt;
  &amp;lt;dependency type="spec" value="XP40+ XQ40+"/&amp;gt;
  &amp;lt;test&amp;gt;(['a', 'b'], ['c', 'd'])[ ?0 eq 'c']&amp;lt;/test&amp;gt;
  &amp;lt;result&amp;gt;
    &amp;lt;assert-empty/&amp;gt;
  &amp;lt;/result&amp;gt;
&amp;lt;/test-case&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I believe this is not reflected in the spec yet, or at least it includes examples that need to be updated:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;[ "a", "b" ]?3&lt;/code&gt; raises a dynamic error &lt;code&gt;err:FOAY0001&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I guess that #832 would have been the PR with the relevant changes (we have already observed in another issue that some changes of this PR need to survive; see https://github.com/qt4cg/qtspecs/pull/1283#issuecomment-2568330191).&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;Edit (2025-05-26): Outdated:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That leads me to the original reason for creating this issue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I think it’s a good idea to drop the range check for array lookups, and it would seem consistent to me to also drop it for dynamic function calls.&lt;/li&gt;
&lt;li&gt;As map/array lookups and dynamic function calls are often used interchangeably, &lt;code&gt;$array?0&lt;/code&gt; and &lt;code&gt;$array(0)&lt;/code&gt; should behave identically.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;FOAY0001&lt;/code&gt; error would (and should) still be raised by the array functions, including &lt;code&gt;array:get&lt;/code&gt;, &lt;code&gt;array:put&lt;/code&gt;, &lt;code&gt;array:remove&lt;/code&gt;, or &lt;code&gt;array:insert-before&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1714 created</title>
   <pubDate>Sun, 19 Jan 2025 23:34:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1714</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1714</guid>
   <description>&lt;div&gt;&lt;p&gt;sibling:: axis. Action Item QT4CG-097-03&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue is a reflection of the following Action Item:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;QT4CG-097-03&lt;/strong&gt;: DN to proposal an axis for accessing the siblings of a node.&lt;/p&gt;
&lt;p&gt;I have prepared a pdf file that contains the updated relevant updated sections from the "&lt;strong&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html"&gt;Xpath 4.0&lt;/a&gt;&lt;/strong&gt;" document:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are no deletions or conflicting changes.&lt;/li&gt;
&lt;li&gt;The additions to the text are highlighted in turquoise.&lt;/li&gt;
&lt;li&gt;The file that contains all relevant updated sections of the document is at:
https://github.com/dnovatchev/qtspecs/blob/dn-siblings/sibling-axis.pdf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If the  above doesn't work&lt;/strong&gt;, please try:
https://github.com/dnovatchev/MathPuzzles/blob/master/sibling-axis.pdf&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1713 created</title>
   <pubDate>Sun, 19 Jan 2025 11:49:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1713</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1713</guid>
   <description>&lt;div&gt;&lt;p&gt;Patchy exposition of XSLT type pattern syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XSLT §5.4.2.2 Type Patterns, the exposition of the grammar is "patchy" - it includes some production rules such as &lt;code&gt;FieldDeclaration&lt;/code&gt; that are in the subtree of the main production rule (&lt;code&gt;TypePattern&lt;/code&gt;) without giving all the intermediate rules that connect this rule to the root.&lt;/p&gt;
&lt;p&gt;It's easy enough to correct this by hand, but it would be nice to prevent this happening by automating the generation of these families of grammar rules, perhaps by including all rules in the subtree up to a depth of 3, say. It would also be nice to simply list the productions to be included without having to decide manually which of them should be the principal target of &lt;code&gt;termref&lt;/code&gt; references (by being marked with an ID).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1712 created</title>
   <pubDate>Sat, 18 Jan 2025 18:51:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1712</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1712</guid>
   <description>&lt;div&gt;&lt;p&gt;1706 Drop "else if" and "else" clauses from braced conditionals&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1706&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1711 created</title>
   <pubDate>Sat, 18 Jan 2025 18:29:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1711</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1711</guid>
   <description>&lt;div&gt;&lt;p&gt;1705 Say that max precision is implementation-defined&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Applies to fn:round, fn:round-half-to-even, fn:divide-decimals&lt;/p&gt;
&lt;p&gt;Fix #1705&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1710 created</title>
   <pubDate>Fri, 17 Jan 2025 23:17:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1710</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1710</guid>
   <description>&lt;div&gt;&lt;p&gt;1709 Updated type diagrams&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Added a few details to the type diagrams: user-defined array, map, and record types; enumeration types; untypedAtomic&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1709 created</title>
   <pubDate>Fri, 17 Jan 2025 22:44:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1709</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1709</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend diagram of item types to include record types etc&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose to extend the diagram of item types (common to DM and FO) to include more detail of the hierarchy below function types.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1617 closed</title>
   <pubDate>Fri, 17 Jan 2025 12:55:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1617</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1617</guid>
   <description>&lt;div&gt;&lt;p&gt;1606 Drop named item types, refine named record types, esp in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1708 created</title>
   <pubDate>Fri, 17 Jan 2025 12:52:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1708</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1708</guid>
   <description>&lt;div&gt;&lt;p&gt;1485 Add xsl:record-type declaration&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds named record types to XSLT, with much the same spec as for XQuery, but some extra tweaks for handling visibility and overriding.&lt;/p&gt;
&lt;p&gt;Fix #1485&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1707 closed</title>
   <pubDate>Fri, 17 Jan 2025 08:58:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1707</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1707</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix bug in build dependencies&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1707 created</title>
   <pubDate>Fri, 17 Jan 2025 08:58:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1707</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1707</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix bug in build dependencies&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changing &lt;code&gt;xslt.xml&lt;/code&gt; didn't actually cause the HTML for the XSLT specification to be rebuilt. 👎&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1706 created</title>
   <pubDate>Thu, 16 Jan 2025 21:08:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1706</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1706</guid>
   <description>&lt;div&gt;&lt;p&gt;Ambiguous `if` syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The optional &lt;code&gt;else&lt;/code&gt; in a braced &lt;code&gt;if&lt;/code&gt; expression introduces an ambiguity in the XQuery 4.0 grammar.&lt;/p&gt;
&lt;p&gt;Here is an example of an ambiguous expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;if (A) then if (B) {C} else if (D) {E} else if (F) {G} else {H}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can be parsed like this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;if (A) then if (B) {C}                               else {}
       else if (D) {E} else if (F) {G} else {H}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but also like the following&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;if (A) then if (B) {C} else if (D) {E}               else {}
       else if (F) {G} else {H}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The corresponding part of the grammar is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IfExpr   ::= 'if' '(' Expr ')' ( UnbracedActions | BracedActions )
UnbracedActions
         ::= 'then' ExprSingle 'else' ExprSingle
BracedActions
         ::= ThenAction ElseIfAction* ElseAction?
ThenAction
         ::= EnclosedExpr
ElseIfAction
         ::= 'else' 'if' '(' Expr ')' EnclosedExpr
ElseAction
         ::= 'else' EnclosedExpr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ambiguity could be resolved by making the &lt;code&gt;ElseAction&lt;/code&gt; in &lt;code&gt;BracedActions&lt;/code&gt; mandatory, i.e.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BracedActions
         ::= ThenAction ElseIfAction* ElseAction
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1705 created</title>
   <pubDate>Thu, 16 Jan 2025 15:53:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1705</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1705</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:divide-decimals, fn:round: large precision values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We may need to specify what is going to happen if very large (positive and negative) precisions are specified:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;divide-decimals(1, 1, 0x7FFFFFFF)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A simple implementation in Java to compute the quotient for this function returns an Overflow exception:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;BigDecimal.ONE.divide(BigDecimal.ONE, 0x7FFFFFFF, RoundingMode.DOWN)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This also affects &lt;code&gt;fn:round&lt;/code&gt;: The query &lt;code&gt;round(1, -0x80000000)&lt;/code&gt; seems to behave unexpectedly in existing implementations.&lt;/p&gt;
&lt;p&gt;In general, the computation gets very slow for large precision values, and it may not be simple to interrupt such low-level operations, so maybe (if it makes sense, I haven’t really thought about it) we could define precision limits.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1704 created</title>
   <pubDate>Thu, 16 Jan 2025 15:09:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1704</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1704</guid>
   <description>&lt;div&gt;&lt;p&gt;Ignore the byte order mark more completely/globally&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Following on a discussion with @line-o on the XML.com Slack, I took a peek at the way we deal with the byte order mark in Functions and Operators. We seem to be explicit about it in a couple of JSON functions but not elsewhere. I think we should assert that the byte order mark is explicitly ignored in all of the input functions (json-&lt;em&gt;, parse-&lt;/em&gt;, unparsed-* etc.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1136 closed</title>
   <pubDate>Wed, 15 Jan 2025 18:53:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1136</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1136</guid>
   <description>&lt;div&gt;&lt;p&gt;Defining names for parameters on typed function tests&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1696 closed</title>
   <pubDate>Wed, 15 Jan 2025 18:53:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1696</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1696</guid>
   <description>&lt;div&gt;&lt;p&gt;1136 Optional names in typed function types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1688 closed</title>
   <pubDate>Wed, 15 Jan 2025 00:04:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1688</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1688</guid>
   <description>&lt;div&gt;&lt;p&gt;In rendered HTML, link to definition is missing its link text&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1703 created</title>
   <pubDate>Tue, 14 Jan 2025 22:48:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1703</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1703</guid>
   <description>&lt;div&gt;&lt;p&gt;1651 ordered maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Reopened pull request introducing ordered maps.&lt;/p&gt;
&lt;p&gt;Fix #1651.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1609 closed</title>
   <pubDate>Tue, 14 Jan 2025 17:23:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1609</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1609</guid>
   <description>&lt;div&gt;&lt;p&gt;1651 Ordered Maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 105 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 14 Jan 2025 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/01-14</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—01-14</guid>
</item><item>
   <title>Issue #1632 closed</title>
   <pubDate>Tue, 14 Jan 2025 17:06:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1632</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1632</guid>
   <description>&lt;div&gt;&lt;p&gt;Add xsl:map/@select&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1694 closed</title>
   <pubDate>Tue, 14 Jan 2025 17:06:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1694</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1694</guid>
   <description>&lt;div&gt;&lt;p&gt;1632 Add xsl:map/@select&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1684 closed</title>
   <pubDate>Tue, 14 Jan 2025 17:05:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1684</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1684</guid>
   <description>&lt;div&gt;&lt;p&gt;[XSLT] Composite merge keys&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1689 closed</title>
   <pubDate>Tue, 14 Jan 2025 17:05:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1689</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1689</guid>
   <description>&lt;div&gt;&lt;p&gt;1684 Composite merge keys; current-merge-key-array function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1680 closed</title>
   <pubDate>Tue, 14 Jan 2025 17:03:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1680</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1680</guid>
   <description>&lt;div&gt;&lt;p&gt;Ambiguous `switch` syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1692 closed</title>
   <pubDate>Tue, 14 Jan 2025 17:02:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1692</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1692</guid>
   <description>&lt;div&gt;&lt;p&gt;1680 Fix switch syntax ambiguity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1672 closed</title>
   <pubDate>Tue, 14 Jan 2025 17:00:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1672</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1672</guid>
   <description>&lt;div&gt;&lt;p&gt;array:values, map:values: Alternatives&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1687 closed</title>
   <pubDate>Tue, 14 Jan 2025 17:00:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1687</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1687</guid>
   <description>&lt;div&gt;&lt;p&gt;1672 array:values, map:values: Alternatives&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1006 closed</title>
   <pubDate>Tue, 14 Jan 2025 16:59:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1006</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1006</guid>
   <description>&lt;div&gt;&lt;p&gt;regular expression addition - word boundaries&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #490 closed</title>
   <pubDate>Tue, 14 Jan 2025 16:59:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/490</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-490</guid>
   <description>&lt;div&gt;&lt;p&gt;Control over schema validation in parse-xml(), doc(), etc.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #108 closed</title>
   <pubDate>Tue, 14 Jan 2025 16:59:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/108</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-108</guid>
   <description>&lt;div&gt;&lt;p&gt;Template match using values of [tunnel] parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1284 closed</title>
   <pubDate>Tue, 14 Jan 2025 16:58:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1284</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1284</guid>
   <description>&lt;div&gt;&lt;p&gt;Build issue: Unsupported specref to  [streamability-fn-distinct-ordered-nodes]&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1695 closed</title>
   <pubDate>Tue, 14 Jan 2025 16:58:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1695</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1695</guid>
   <description>&lt;div&gt;&lt;p&gt;1284 Define streamability of distinct-ordered-nodes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1693 closed</title>
   <pubDate>Tue, 14 Jan 2025 16:56:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1693</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1693</guid>
   <description>&lt;div&gt;&lt;p&gt;1683 Extend xpath-functions schema with CSV components&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1690 closed</title>
   <pubDate>Tue, 14 Jan 2025 16:54:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1690</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1690</guid>
   <description>&lt;div&gt;&lt;p&gt;1688 In "implementation-defined" appendix, fix absent generated link&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1702 created</title>
   <pubDate>Tue, 14 Jan 2025 15:19:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1702</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1702</guid>
   <description>&lt;div&gt;&lt;p&gt;Node Updates: Functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In #1225, I have summarized some thoughts on generalizing updates for both nodes and structured items (maps/arrays).&lt;/p&gt;
&lt;p&gt;XQuery Update is complex, as updates are in general, so we may still decide that it is too ambitious to introduce update features in the core language. If we want to give it a try, we could offer functions that are based on XQUF, but that only perform one update operation at a a time on a given input. This way, we could ignore the sophisticated &lt;a href="https://www.w3.org/TR/xquery-update-30/#id-pending-update-lists"&gt;Pending Update List&lt;/a&gt; semantics, which is only important when multiple updating expressions are specified and need to be checked and brought into order.&lt;/p&gt;
&lt;p&gt;A function set that provides an equivalent functionality for all XQUF update operations could look as follows (the presented functions are valid XQuery Update code):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare namespace update = 'http://www.w3.org/TR/xquery-update';

declare function update:delete(
  $node  as node(),
  $path  as fn(node()) as node()*
) as node() {
  copy $c := $node
  modify delete node $path($c)
  return $c
};

declare function update:rename(
  $node  as node(),
  $path  as fn(node()) as node()*,
  $name  as (xs:QName | xs:NCName | fn(node(), xs:integer) as (xs:QName | xs:NCName))
) as node() {
  copy $c := $node
  modify (
    for $target at $pos in $path($c)
    let $result := if($name instance of fn(*)) {
      $name($target, $pos)
    } else {
      $name
    }
    return rename node $target as $result
  )
  return $c
};

declare function update:replace(
  $node      as node(),
  $path      as fn(node()) as node()*,
  $contents  as (node() | xs:anyAtomicType | fn(node(), xs:integer) as node()*)*,
  $options   as record(value? as xs:boolean)? := {}
) as node() {
  copy $c := $node
  modify (
    for $target at $pos in $path($c)
    let $result := (
      for $content in $contents
      return if($content instance of fn(*)) {
        $content($target, $pos)
      } else {
        $content
      }
    )
    return if($options?value) {
      replace value of node $target with $result
    } else {
      replace node $target with $result
    }
  )
  return $c
};

declare function update:insert(
  $node      as node(),
  $path      as fn(node()) as node()*,
  $contents  as (node() | xs:anyAtomicType | fn(node(), xs:integer) as (node() | xs:anyAtomicType))*,
  $options   as record(position? as enum('last', 'first', 'before', 'after'))? := {}
) as node() {
  copy $c := $node
  modify (
    for $target at $pos in $path($c)
    let $result := (
      for $content in $contents
      return if($content instance of fn(*)) {
        $content($target, $pos)
      } else {
        $content
      }
    )
    return switch($options?position) {
      case 'before' return insert node $result before $target
      case 'after'  return insert node $result after $target
      case 'first'  return insert node $result as first into $target
      default       return insert node $result as last into $target
    }
  )
  return $c
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are some exemplary function calls:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $node := &amp;lt;xml&amp;gt;&amp;lt;e/&amp;gt;&amp;lt;e/&amp;gt;&amp;lt;/xml&amp;gt;
return (
  (: deletes all &amp;lt;e/&amp;gt; child nodes :)
  update:delete($node, fn { e }),
  (: renames the &amp;lt;e/&amp;gt; child nodes to &amp;lt;f/&amp;gt; :)
  update:rename($node, fn { e }, 'f'),
  (: replaces the &amp;lt;e/&amp;gt; child nodes with &amp;lt;replaced/&amp;gt; :)
  update:replace($node, fn { e }, &amp;lt;replaced/&amp;gt;),
  (: replaces the string value of the &amp;lt;e/&amp;gt; child nodes with 'text' :)
  update:replace($node, fn { e }, 'text', { 'value': true() }),
  (: inserts a 'text' text node into the &amp;lt;e/&amp;gt; child nodes :)
  update:insert($node, fn { e }, 'text'),
  (: inserts 'text1' and 'text2' text nodes into the &amp;lt;e/&amp;gt; child nodes :)
  update:insert($node, fn { e }, fn($node, $pos) { 'text' || $pos }),
  (: inserts an &amp;lt;x/&amp;gt; element after each &amp;lt;e/&amp;gt; child node :)
  update:insert($node, fn { e }, &amp;lt;x/&amp;gt;, { 'position': 'after' })
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Multiple update operations can easily be chained:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: rename &amp;lt;e/&amp;gt; child nodes to &amp;lt;f/&amp;gt;, insert 'x' text nodes :)
&amp;lt;xml&amp;gt;&amp;lt;e/&amp;gt;&amp;lt;e/&amp;gt;&amp;lt;/xml&amp;gt;
=&amp;gt; update:rename(fn { e }, 'f')
=&amp;gt; update:insert(fn { f }, 'x')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally, we could offer a similar function set (or maybe even the same) for maps and arrays in a next step (see #77). The map/array syntax would be similar for deletions…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $data := { 'a': [ 1, 2, 3 ] }
return update:delete($data, fn { ?a?2 })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…but it certainly gets trickier for other operations.&lt;/p&gt;
&lt;p&gt;If some of you believe that the presented approach is something that we should pursue, I will be happy to add details. As an alternative, we could pursue the XQUF light approach that I have sketched in #1225, based on the existing XQUF update keywords.&lt;/p&gt;
&lt;p&gt;Yet another solution could be to stick with what we have, but add map/array update features to XQUF.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1701 created</title>
   <pubDate>Tue, 14 Jan 2025 14:07:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1701</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1701</guid>
   <description>&lt;div&gt;&lt;p&gt;Add dedication to MSM (action QT4CG-088-01)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've had this action on my plate for a while. Having written a dedication, there's a follow-up question of where to put it. Having it in only one specification isn't wrong, but it seems slightly odd given that MSM contributed to them all. In the end, I decided to put a full dedication in the XPath specification and link to it from the others.&lt;/p&gt;
&lt;p&gt;My rationale for the XPath spec is that it's probaly one that everyone reads. Another possibility was the Data Model as it's "foundational" but I think it's less read than XPath.&lt;/p&gt;
&lt;p&gt;The published PR won't be write because there are tooling changes required. I've attached a couple of screen shots, one of the full dedication in XPath:&lt;/p&gt;
&lt;hr/&gt;
&lt;h2&gt;&lt;img src="https://github.com/user-attachments/assets/d83aa982-b783-44c8-8fb7-25787200bf13" alt="Screenshot 2025-01-14 at 14-00-08 XML Path Language (XPath) 4 0 WG Review Draft"/&gt;&lt;/h2&gt;
&lt;p&gt;And another of the link from the other specs (from XSLT, I think, but they're all the same).&lt;/p&gt;
&lt;hr/&gt;
&lt;h2&gt;&lt;img src="https://github.com/user-attachments/assets/634de4b0-59cb-4898-8c16-ddff4ddd3876" alt="Screenshot 2025-01-14 at 13-59-08 XSL Transformations (XSLT) Version 4 0"/&gt;&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1700 created</title>
   <pubDate>Tue, 14 Jan 2025 14:01:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1700</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1700</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove some dead .DS_Store files&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm not sure how these got checked in...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 105 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Tue, 14 Jan 2025 10:11:15 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/01-14</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-01-14</guid>
</item><item>
   <title>Issue #1699 created</title>
   <pubDate>Tue, 14 Jan 2025 03:48:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1699</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1699</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath function to calculate edit distance between two strings&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose a new XPath function to calculate the edit distance between two strings. It could use a specific algorithm, for example &lt;code&gt;fn:levenshtein-distance(s1,s2)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function could also be designed  more generic like &lt;code&gt;fn:edit-distance(s1, s2, algorithm)&lt;/code&gt; where &lt;em&gt;algorithm&lt;/em&gt; could be levenshtein, hamming, lcs ... (see &lt;a href="https://en.wikipedia.org/wiki/Edit_distance"&gt;edit distance&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Use Case: Schematron Quick Fix when checking &lt;code&gt;glossentry&lt;/code&gt; elements against terms defined in &lt;code&gt;glossary&lt;/code&gt;. &lt;em&gt;"Your term is not defined in Glossary, did you mean ...".&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Thanks, Frank&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1407 closed</title>
   <pubDate>Mon, 13 Jan 2025 17:53:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1407</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1407</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve the spec prose and table of content layout for types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1698 created</title>
   <pubDate>Mon, 13 Jan 2025 13:53:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1698</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1698</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow select attribute for xsl:call-template instruction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The lack of the following feature is something that bothers me from time to time. I hope this is the right place here for my proposal.
And even though I did some search -- I am not sure if something similar was discussed before ...&lt;/p&gt;
&lt;p&gt;I propose to allow a &lt;code&gt;select&lt;/code&gt; attribute for &lt;code&gt;xsl:call-template&lt;/code&gt; instructions. When the &lt;code&gt;select&lt;/code&gt; attribute is set, then the named template is called for each selected item as context item.&lt;/p&gt;
&lt;p&gt;When the empty sequence is selected, the template is not invoked.&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;select&lt;/code&gt; attribute is omitted, then the instruction works as before (Invoked once and &lt;em&gt;"[...] does not change focus [...]"&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;For extension instructions from named templates: May work the same with a prefixed attribute (e.g. &lt;code&gt;xsl:select&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Benefits I see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change the context without &lt;code&gt;xsl:apply-templates&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Avoid template parameter with &lt;code&gt;current()&lt;/code&gt; as default value (annoying when you have nested named template calls)&lt;/li&gt;
&lt;li&gt;Avoid &lt;code&gt;xsl:for-each&lt;/code&gt; workaround where context just must be adjusted for a single item (no such parameter available, see before)&lt;/li&gt;
&lt;li&gt;Save an &lt;code&gt;xsl:for-each&lt;/code&gt; instruction with this shorter form&lt;/li&gt;
&lt;li&gt;Harmonize &lt;code&gt;xsl:call-template&lt;/code&gt; with &lt;code&gt;xsl:apply-templates&lt;/code&gt; concept a little bit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simple example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;xsl:template match="elem"&amp;gt;
  &amp;lt;xsl:call-template name="t:make-something" select="child-elem"/&amp;gt;
  &amp;lt;!-- ... or as extension instruction: --&amp;gt;
  &amp;lt;t:make-something xsl:select="child-elem"/&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;xsl:template name="t:make-something"&amp;gt;
  &amp;lt;xsl:context-item use="required" as="element(child-elem)"&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The call of &lt;code&gt;t:make-something&lt;/code&gt; before is equivalent with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;xsl:template match="elem"&amp;gt;
  &amp;lt;xsl:for-each select="child-elem"&amp;gt;
    &amp;lt;xsl:call-template name="t:make-something"/&amp;gt;
  &amp;lt;/xsl:for-each&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1675 closed</title>
   <pubDate>Mon, 13 Jan 2025 12:03:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1675</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1675</guid>
   <description>&lt;div&gt;&lt;p&gt;CSV parsing&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1677 closed</title>
   <pubDate>Mon, 13 Jan 2025 12:03:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1677</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1677</guid>
   <description>&lt;div&gt;&lt;p&gt;1675 Fixes for CSV parsing&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1673 closed</title>
   <pubDate>Mon, 13 Jan 2025 11:55:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1673</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1673</guid>
   <description>&lt;div&gt;&lt;p&gt;1407 TOC structure for types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1681 closed</title>
   <pubDate>Mon, 13 Jan 2025 09:21:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1681</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1681</guid>
   <description>&lt;div&gt;&lt;p&gt; Δ in the table of contents&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1691 closed</title>
   <pubDate>Mon, 13 Jan 2025 09:21:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1691</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1691</guid>
   <description>&lt;div&gt;&lt;p&gt;1681 - Delta marker in TOC&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1697 created</title>
   <pubDate>Mon, 13 Jan 2025 00:17:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1697</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1697</guid>
   <description>&lt;div&gt;&lt;p&gt;Add documentary names to callback function signatures&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If PR #1696 is accepted we can add documentary names to the parameters of callback function signatures, for example &lt;code&gt;fn:filter&lt;/code&gt; can become&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:filter(
  $input as item()*, |  
  $predicate as fn($item as item(), $position as xs:integer) as xs:boolean? |  
) as item()*

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we can (if we need to) use the parameter names in the prose&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1696 created</title>
   <pubDate>Mon, 13 Jan 2025 00:07:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1696</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1696</guid>
   <description>&lt;div&gt;&lt;p&gt;1136 Optional names in typed function types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1136&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1695 created</title>
   <pubDate>Sun, 12 Jan 2025 23:36:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1695</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1695</guid>
   <description>&lt;div&gt;&lt;p&gt;1284 Define streamability of distinct-ordered-nodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1284&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1610 closed</title>
   <pubDate>Sat, 11 Jan 2025 10:48:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1610</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1610</guid>
   <description>&lt;div&gt;&lt;p&gt;Some cross references are incorrect&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1683 closed</title>
   <pubDate>Fri, 10 Jan 2025 09:35:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1683</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1683</guid>
   <description>&lt;div&gt;&lt;p&gt;There are validity errors in the function catalog related to csv elements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1694 created</title>
   <pubDate>Thu, 9 Jan 2025 23:10:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1694</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1694</guid>
   <description>&lt;div&gt;&lt;p&gt;1632 Add xsl:map/@select&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1632&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1693 created</title>
   <pubDate>Thu, 9 Jan 2025 22:25:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1693</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1693</guid>
   <description>&lt;div&gt;&lt;p&gt;1683 Extend xpath-functions schema with CSV components&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This was an unsuccessful attempt to fix issue #1683, but the change is still worth making. It extends the aggregated schema for the XPath functions namespace to include definitions for the result of the csv-to-xml function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1692 created</title>
   <pubDate>Thu, 9 Jan 2025 21:55:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1692</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1692</guid>
   <description>&lt;div&gt;&lt;p&gt;1680 Fix switch syntax ambiguity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1680 (as suggested in the issue)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1691 created</title>
   <pubDate>Thu, 9 Jan 2025 21:42:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1691</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1691</guid>
   <description>&lt;div&gt;&lt;p&gt;1681 - Delta marker in TOC&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1681&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1690 created</title>
   <pubDate>Thu, 9 Jan 2025 20:28:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1690</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1690</guid>
   <description>&lt;div&gt;&lt;p&gt;1688 In "implementation-defined" appendix, fix absent generated link&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;For F&amp;amp;O the automatically-generated appendix of implementation-defined item should link each such item to the nearest containing section that has a &lt;code&gt;head&lt;/code&gt; child as well as an id attribute.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1689 created</title>
   <pubDate>Thu, 9 Jan 2025 18:10:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1689</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1689</guid>
   <description>&lt;div&gt;&lt;p&gt;1684 Composite merge keys; current-merge-key-array function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Acknowledges that as a result of changes to &lt;code&gt;xsl:sort&lt;/code&gt;, &lt;code&gt;xsl:merge&lt;/code&gt; now accepts composite merge keys; introduces the &lt;code&gt;current-merge-key-array()&lt;/code&gt; function to handle them.&lt;/p&gt;
&lt;p&gt;Fix #1684&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1688 created</title>
   <pubDate>Thu, 9 Jan 2025 17:39:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1688</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1688</guid>
   <description>&lt;div&gt;&lt;p&gt;In rendered HTML, link to definition is missing its link text&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;https://qt4cg.org/specifications/xpath-functions-40/Overview.html#impl-def Item 6 contains a sentence that renders as "See ." In the raw HTML, there is a link &lt;code&gt;&amp;lt;a href="#dt-nondeterministic-wrt-ordering"&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; with no link text.&lt;/p&gt;
&lt;p&gt;I thought I might make this issue a little more substantive by reporting a second typo or broken link, but I can't find a second one at the moment. :)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1687 created</title>
   <pubDate>Thu, 9 Jan 2025 12:16:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1687</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1687</guid>
   <description>&lt;div&gt;&lt;p&gt;1672 array:values, map:values: Alternatives&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1672&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1686 created</title>
   <pubDate>Thu, 9 Jan 2025 11:46:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1686</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1686</guid>
   <description>&lt;div&gt;&lt;p&gt;1685 Pipeline Operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1685&lt;/p&gt;
&lt;p&gt;The PR introduces the pipeline operator &lt;code&gt;-&amp;gt;&lt;/code&gt;. If we decide to add it, we could drop &lt;code&gt;=!&amp;gt;&lt;/code&gt; in a second step and update various examples in the text.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1685 created</title>
   <pubDate>Thu, 9 Jan 2025 09:46:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1685</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1685</guid>
   <description>&lt;div&gt;&lt;p&gt;Pipeline Operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is an attempt to find a solution for the discussion in #755, which was originally about defining an expression to bind the context value. It serves as a summary for an upcoming PR.&lt;/p&gt;
&lt;p&gt;We have two operators in the language that can be used for pipelining:
  1. With the simple map operator &lt;code&gt;!&lt;/code&gt;, single items of an input can be bound to the context value.
  2. With the arrow operator &lt;code&gt;=&amp;gt;&lt;/code&gt;, an input can be bound as first argument in a function call.&lt;/p&gt;
&lt;p&gt;The current restrictions are:
  A) There is no way to bind a sequence with 0 or more than 1 items to the context value.
  B) We can only bind the input to the first function argument.&lt;/p&gt;
&lt;p&gt;In addition, we have introduced the mapping arrow expression &lt;code&gt;=!&amp;gt;&lt;/code&gt; to bind single items of an input to the first function argument.&lt;/p&gt;
&lt;p&gt;We could generalize and simplify the situation by introducing a dedicated and very basic pipeline operator: &lt;code&gt;A -&amp;gt; B&lt;/code&gt; evaluates &lt;code&gt;A&lt;/code&gt; to a value, which is bound to the context value before evaluating &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the operator, restriction A) would be resolved. Restriction B) would be tackled indirectly, as &lt;code&gt;-&amp;gt;&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt; can often be combined. For example, the following examples from the specification could be simplified…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: current vs. simplified syntax :)
$s =&amp;gt; tokenize() =!&amp;gt; fn { `"{.}"` }()
$s -&amp;gt; tokenize(.) ! `"{.}"`

(: current vs. simplified syntax :)
(1 to 5) =!&amp;gt; xs:double() =!&amp;gt; math:sqrt() =!&amp;gt; fn($a) { $a + 1 }() =&amp;gt; sum()
(1 to 5) ! xs:double(.) ! math:sqrt(.) ! (. + 1) -&amp;gt; sum(.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and we could drop &lt;code&gt;=!&amp;gt;&lt;/code&gt; in favor of the new operator.&lt;/p&gt;
&lt;p&gt;An equivalent representation for the focus function &lt;code&gt;fn { E }&lt;/code&gt; would be &lt;code&gt;fn($c) { $c -&amp;gt; E }&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1684 created</title>
   <pubDate>Wed, 8 Jan 2025 21:41:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1684</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1684</guid>
   <description>&lt;div&gt;&lt;p&gt;[XSLT] Composite merge keys&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The changes in PR #1674 to allow composite sort keys automatically propagate to &lt;code&gt;xsl:merge&lt;/code&gt;, because the semantics of &lt;code&gt;xsl:merge-key&lt;/code&gt; are defined entirely by reference to &lt;code&gt;xsl:sort&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;No immediate problem, except (1) we should acknowledge the fact and point out that composite merge keys are now allowed, and (2) the effect on the current-merge-key() function. This is the sequence-concatenation of the merge keys for multiple merge sources. The spec says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the [current merge key] will be a single atomic item if there is a single merge key, or a sequence of atomic items if there are multiple merge keys.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Actually I think that's already wrong, because it forgets that an individual merge key may be an empty sequence. If that happens then the current-merge-key() function is somewhat useless. I suggest we simply document the fact: if there are multiple merge sources generating multiple merge keys and they are not all singletons, then the sequence concatenation of the merge keys may not be especially useful.&lt;/p&gt;
&lt;p&gt;We could provide a variant current-merge-key-array() that returns an array of sort key values, one for each xsl:merge-key element, each one being a sequence of atomic items.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 104 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 7 Jan 2025 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2025/01-07</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#minutes—01-07</guid>
</item><item>
   <title>Issue #1261 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:24:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1261</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1261</guid>
   <description>&lt;div&gt;&lt;p&gt;Add decimal-divide function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1671 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:24:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1671</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1671</guid>
   <description>&lt;div&gt;&lt;p&gt;1261 New fn:divide-decimals() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1662 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:22:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1662</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1662</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:sort - add composite sort keys&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1674 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:22:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1674</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1674</guid>
   <description>&lt;div&gt;&lt;p&gt;1662 Allow composite sort keys in xsl:sort&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1621 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:20:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1621</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1621</guid>
   <description>&lt;div&gt;&lt;p&gt;compare() with collations that do not support ordering&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1676 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:20:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1676</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1676</guid>
   <description>&lt;div&gt;&lt;p&gt;1621 Capabilities of Collations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1678 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:17:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1678</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1678</guid>
   <description>&lt;div&gt;&lt;p&gt;Semantics of element(N, T) where T is a union type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1679 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:17:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1679</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1679</guid>
   <description>&lt;div&gt;&lt;p&gt;1678 Define element(E,T) and attribute(A,T) in terms of "derives-from"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1670 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:11:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1670</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#closed-1670</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CS-097-02: Enable xtermref links to XSD SCM property names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1667 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:08:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1667</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1667</guid>
   <description>&lt;div&gt;&lt;p&gt;Invalid XML characters in JSON input&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1669 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:08:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1669</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1669</guid>
   <description>&lt;div&gt;&lt;p&gt;1667 Revise handling of non-XML characters in parse-json&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1668 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:05:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1668</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1668</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor copy edits (no issue raised)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1649 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:02:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1649</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1649</guid>
   <description>&lt;div&gt;&lt;p&gt;Result type of fn:function-annotations()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1666 closed</title>
   <pubDate>Tue, 7 Jan 2025 17:02:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1666</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1666</guid>
   <description>&lt;div&gt;&lt;p&gt;1649 result of function annotations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1650 closed</title>
   <pubDate>Tue, 7 Jan 2025 16:59:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1650</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1650</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:node-kind, fn:type-of: Editorial&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1665 closed</title>
   <pubDate>Tue, 7 Jan 2025 16:59:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1665</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1665</guid>
   <description>&lt;div&gt;&lt;p&gt;1650 Tidy up fn:type-of&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1663 closed</title>
   <pubDate>Tue, 7 Jan 2025 16:57:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1663</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1663</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove DTD/stylesheet distractions at the top of the schema&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 104 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Tue, 7 Jan 2025 10:11:30 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2025/01-07</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#agenda-01-07</guid>
</item><item>
   <title>Issue #1683 created</title>
   <pubDate>Mon, 6 Jan 2025 11:10:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1683</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1683</guid>
   <description>&lt;div&gt;&lt;p&gt;There are validity errors in the function catalog related to csv elements&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The build reports:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Processing file:/Volumes/Saxonica/src/qt4cg/qtspecs/specifications/xpath-functions-40/src/function-catalog.xml
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Building tree for file:/Volumes/Saxonica/src/qt4cg/qtspecs/specifications/xpath-functions-40/src/function-catalog.xml using class net.sf.saxon.tree.tiny.TinyBuilder
Tree built in 215.684667ms
Tree size: 38655 nodes, 773635 characters, 7637 attributes
Error on line 1 column 53 of generate-qt3-test-set.xsl:
  XTTE1512  Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;: no element declaration available
Error on line 3 column 7 of generate-qt3-test-set.xsl:
  XTTE1512  One validation error was reported: Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;:
  no element declaration available
** Failure in parse-xml on fos:result of csv-to-xml-002
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Error on line 1 column 53 of generate-qt3-test-set.xsl:
  XTTE1512  Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;: no element declaration available
Error on line 5 column 7 of generate-qt3-test-set.xsl:
  XTTE1512  One validation error was reported: Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;:
  no element declaration available
** Failure in parse-xml on fos:result of csv-to-xml-003
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Error on line 1 column 53 of generate-qt3-test-set.xsl:
  XTTE1512  Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;: no element declaration available
Error on line 3 column 7 of generate-qt3-test-set.xsl:
  XTTE1512  One validation error was reported: Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;:
  no element declaration available
** Failure in parse-xml on fos:result of csv-to-xml-004
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Error on line 1 column 53 of generate-qt3-test-set.xsl:
  XTTE1512  Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;: no element declaration available
Error on line 8 column 7 of generate-qt3-test-set.xsl:
  XTTE1512  One validation error was reported: Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;:
  no element declaration available
** Failure in parse-xml on fos:result of csv-to-xml-005
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Error on line 1 column 53 of generate-qt3-test-set.xsl:
  XTTE1512  Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;: no element declaration available
Error on line 16 column 7 of generate-qt3-test-set.xsl:
  XTTE1512  One validation error was reported: Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;:
  no element declaration available
** Failure in parse-xml on fos:result of csv-to-xml-006
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Error on line 1 column 53 of generate-qt3-test-set.xsl:
  XTTE1512  Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;: no element declaration available
Error on line 24 column 7 of generate-qt3-test-set.xsl:
  XTTE1512  One validation error was reported: Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;:
  no element declaration available
** Failure in parse-xml on fos:result of csv-to-xml-007
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Error on line 1 column 53 of generate-qt3-test-set.xsl:
  XTTE1512  Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;: no element declaration available
Error on line 37 column 7 of generate-qt3-test-set.xsl:
  XTTE1512  One validation error was reported: Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;:
  no element declaration available
** Failure in parse-xml on fos:result of csv-to-xml-008
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Error on line 1 column 53 of generate-qt3-test-set.xsl:
  XTTE1512  Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;: no element declaration available
Error on line 40 column 7 of generate-qt3-test-set.xsl:
  XTTE1512  One validation error was reported: Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;:
  no element declaration available
** Failure in parse-xml on fos:result of csv-to-xml-009
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Error on line 1 column 53 of generate-qt3-test-set.xsl:
  XTTE1512  Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;: no element declaration available
Error on line 36 column 7 of generate-qt3-test-set.xsl:
  XTTE1512  One validation error was reported: Cannot validate &amp;lt;Q{.../xpath-functions}csv&amp;gt;:
  no element declaration available
** Failure in parse-xml on fos:result of csv-to-xml-010
Execution time: 532.103792ms
Memory used: 98Mb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1682 created</title>
   <pubDate>Mon, 6 Jan 2025 11:05:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1682</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1682</guid>
   <description>&lt;div&gt;&lt;p&gt;Type Promotion&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The description of type promotion in Appendix B.1 has become outdated.&lt;/p&gt;
&lt;p&gt;Firstly, the coercion rules no longer invoke type promotion; instead, they use a custom table of "implicit casts". So B.1 is wrong to say that type promotion is invoked by the coercion rules.&lt;/p&gt;
&lt;p&gt;Secondly, for selecting an entry in the operator mapping table, I don't think type promotion comes into play.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The rules for value comparisons do all the necessary type conversions of operands BEFORE invoking a search of the operator mapping table.&lt;/li&gt;
&lt;li&gt;The rules for arithmetic operators don't require any type promotion: for numerics, they invoke a function such as op:numeric-add, and it is the definition of this function (not the selection of the function in the mapping table) that invokes type promotion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The statement in B.1 that "If the result type of an operator is listed as numeric, it means "the first type in the ordered list (xs:integer, xs:decimal, xs:float, xs:double) into which all operands can be converted by [subtype substitution] and [type promotion]" seems wrong in general: for example it doesn't cover &lt;code&gt;integer div integer&lt;/code&gt;. The result type is actually defined by the rules of the selected function, e.g. op:numeric-divide, and not by the "result type" column of the operator mapping table. Perhaps it should say that if the result type is a subtype of numeric as defined by the particular function.&lt;/p&gt;
&lt;p&gt;References to Type Promotion in F&amp;amp;O section 1.6 are also outdated.&lt;/p&gt;
&lt;p&gt;The sum() and avg() functions invoke "numeric promotion" to convert all values in the input to a common type, but the exact rules for doing this aren't exactly clear. For example, the equivalent expression given for sum() doesn't do what the prose says. For example, given sum() applied to a sequence (X as decimal, Y as decimal, Z as float), the prose says the result is float(X) + float(Y) + Z, whereas the equivalent expression gives float(decimal(X + Y)) + Z) which is not necessarily the same thing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1681 created</title>
   <pubDate>Sun, 5 Jan 2025 23:38:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1681</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1681</guid>
   <description>&lt;div&gt;&lt;p&gt; Δ in the table of contents&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;All the spec say in their first changes section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sections with significant changes are marked Δ in the table of contents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, these markers are present only in the F&amp;amp;O specification.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1680 created</title>
   <pubDate>Sun, 5 Jan 2025 19:27:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1680</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1680</guid>
   <description>&lt;div&gt;&lt;p&gt;Ambiguous `switch` syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Unless I am overlooking some constraint preventing this, an ambiguity has been introduced to the XQuery 4.0 grammar by allowing the &lt;code&gt;SwitchComparand&lt;/code&gt; to be omitted per #671/#678.&lt;/p&gt;
&lt;p&gt;Here is an example of an ambiguous expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;switch case A return switch case B return switch case C return D default return E default return F
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can be parsed along the lines of&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;switch
case A return SWITCH 
case B return switch
              case C return D 
              default return E 
default return F
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but also like the following&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;switch
case A return switch
              case B return SWITCH
              case C return D
              default return E
default return F
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1679 created</title>
   <pubDate>Sun, 5 Jan 2025 14:28:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1679</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1679</guid>
   <description>&lt;div&gt;&lt;p&gt;1678 Define element(E,T) and attribute(A,T) in terms of "derives-from"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1678&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1678 created</title>
   <pubDate>Sun, 5 Jan 2025 00:24:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1678</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1678</guid>
   <description>&lt;div&gt;&lt;p&gt;Semantics of element(N, T) where T is a union type&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The semantics of &lt;code&gt;element(N, T)&lt;/code&gt; say that to get a match, the type annotation A of the element must be derived from T &lt;em&gt;by restriction&lt;/em&gt;. This means you will never get a match if T is a union type.&lt;/p&gt;
&lt;p&gt;Furthermore, if T is a complex type, there is no match if the type annotation is a complex type derived by extension from T.&lt;/p&gt;
&lt;p&gt;I think this is a simple error in the spec. It should say that derived-from(A, T) must be true. The derived-from() relationship handles union types and derivation by extension correctly.&lt;/p&gt;
&lt;p&gt;We do use &lt;code&gt;derived-from&lt;/code&gt; when specifying subtyping. This means that an element E can be an instance of &lt;code&gt;element(E, xs:integer)&lt;/code&gt;, and not be an instance of &lt;code&gt;element(E, xs:numeric)&lt;/code&gt;, even though  &lt;code&gt;element(E, xs:integer)&lt;/code&gt;, is a subtype of &lt;code&gt;element(E, xs:numeric)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The error seems to have crept in when the rules were redrafted for 4.0. Up to and including 3.1, the semantics of ElementTest and AttributeTest reference the derived-from() function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1677 created</title>
   <pubDate>Sat, 4 Jan 2025 18:32:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1677</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1677</guid>
   <description>&lt;div&gt;&lt;p&gt;1675 Fixes for CSV parsing&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1675&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1676 created</title>
   <pubDate>Fri, 3 Jan 2025 20:08:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1676</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1676</guid>
   <description>&lt;div&gt;&lt;p&gt;1621 Capabilities of Collations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1621&lt;/p&gt;
&lt;p&gt;This PR is largely editorial, except that it makes a substantive change to the &lt;code&gt;fn:collation-available&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1675 created</title>
   <pubDate>Fri, 3 Jan 2025 16:02:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1675</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1675</guid>
   <description>&lt;div&gt;&lt;p&gt;CSV parsing&lt;/p&gt;…failed to parse issue text…&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1674 created</title>
   <pubDate>Fri, 3 Jan 2025 13:32:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1674</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1674</guid>
   <description>&lt;div&gt;&lt;p&gt;1662 Allow composite sort keys in xsl:sort&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1662&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1673 created</title>
   <pubDate>Fri, 3 Jan 2025 01:07:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1673</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1673</guid>
   <description>&lt;div&gt;&lt;p&gt;1407 TOC structure for types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Addresses part of #1407:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improves the section headings and levels for the Types and Subtyping sections&lt;/li&gt;
&lt;li&gt;Level-4 headings (and level-5 if there were any) are no longer omitted from the F&amp;amp;O TOC.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other suggestions in #1407 regarding the spec prose that are not (yet) implemented.&lt;/p&gt;
&lt;p&gt;Changing the CSS to adjust presentation of level-4 and level-5 headings in the TOC is way above my level of CSS competence, there's some very elaborate logic in this area, and anyone who wants to tackle it is welcome.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1672 created</title>
   <pubDate>Thu, 2 Jan 2025 20:50:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1672</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1672</guid>
   <description>&lt;div&gt;&lt;p&gt;array:values, map:values: Alternatives&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We still have &lt;code&gt;array:values&lt;/code&gt; and &lt;code&gt;map:values&lt;/code&gt; in the spec, even though the names were considered suboptimal: When retrieving values of struct(ure(d item))s, one would expect to get not a flat, but a structured result.&lt;/p&gt;
&lt;p&gt;A while ago, the &lt;code&gt;items&lt;/code&gt; key specifier was introduced to mimic the classical wildcard lookup syntax (making &lt;code&gt;$A?*&lt;/code&gt; and &lt;code&gt;$A?items::*&lt;/code&gt; equivalent), and I suggest renaming our functions to &lt;code&gt;array:items&lt;/code&gt; and &lt;code&gt;map:items&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;  $map?*
≍ map:items($map)

  $array?*
≍ array:items($array)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plan B could be to extend the second argument of &lt;code&gt;map:get&lt;/code&gt; (and &lt;code&gt;array:get&lt;/code&gt;) to also accept predicate functions…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:get(
  $map  as map(*),	
  $key  as (xs:anyAtomicType|fn(xs:anyAtomicType) as xs:boolean?)
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…which would allow us to write:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;  $map?a
≍ $map =&amp;gt; map:get('a')
≍ $map =&amp;gt; map:get(fn { . = 'a' })

  $map?(1 to 5)
≍ $map =&amp;gt; map:get(fn { . = 1 to 5 })

  $map?*
≍ $map =&amp;gt; map:get(true#0)

(: and things like :)
$map =&amp;gt; map:get(fn { . mod 2 = 1 })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1671 created</title>
   <pubDate>Wed, 1 Jan 2025 16:50:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1671</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1671</guid>
   <description>&lt;div&gt;&lt;p&gt;1261 New fn:divide-decimals() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1261&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1670 created</title>
   <pubDate>Wed, 1 Jan 2025 12:51:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1670</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1670</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CS-097-02: Enable xtermref links to XSD SCM property names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1669 created</title>
   <pubDate>Tue, 31 Dec 2024 17:15:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1669</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1669</guid>
   <description>&lt;div&gt;&lt;p&gt;1667 Revise handling of non-XML characters in parse-json&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1667&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1659 closed</title>
   <pubDate>Fri, 27 Dec 2024 08:23:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1659</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1659</guid>
   <description>&lt;div&gt;&lt;p&gt;List-valued options represented as arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1668 created</title>
   <pubDate>Sun, 22 Dec 2024 22:31:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1668</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1668</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor copy edits (no issue raised)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Various small copy edits.&lt;/p&gt;
&lt;p&gt;Also adds summary descriptions to record definitions in the function catalog, which requires a schema and stylesheet change.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1667 created</title>
   <pubDate>Fri, 20 Dec 2024 07:28:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1667</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1667</guid>
   <description>&lt;div&gt;&lt;p&gt;Invalid XML characters in JSON input&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have changed the data model (§2.8.4) (see PR #546) so that implementations may allow characters that are not valid XML characters.&lt;/p&gt;
&lt;p&gt;We have not explored the impact of this change on parse-json(), which is one of the obvious places where non-XML characters may arise. For example, JSON allows unescaped C1 control characters.&lt;/p&gt;
&lt;p&gt;(Note however that the data model explicitly bans unpaired surrogates, and I think that rule should apply to parse-json() even though the JSON grammar allows it).&lt;/p&gt;
&lt;p&gt;Hopefully it only requires clarification notes to be added to the spec, and not any substantive change.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1657 closed</title>
   <pubDate>Thu, 19 Dec 2024 17:21:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1657</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1657</guid>
   <description>&lt;div&gt;&lt;p&gt;1624 Add note explaining nodetest subtyping&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1664 closed</title>
   <pubDate>Thu, 19 Dec 2024 16:53:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1664</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1664</guid>
   <description>&lt;div&gt;&lt;p&gt;1659 option conventions sequences as arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1666 created</title>
   <pubDate>Thu, 19 Dec 2024 16:50:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1666</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1666</guid>
   <description>&lt;div&gt;&lt;p&gt;1649 result of function annotations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Brings the spec of fn:function-annotations into line with the test cases and examples&lt;/p&gt;
&lt;p&gt;Fix #1649&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1665 created</title>
   <pubDate>Thu, 19 Dec 2024 16:37:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1665</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1665</guid>
   <description>&lt;div&gt;&lt;p&gt;1650 Tidy up fn:type-of&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Drop fn:node-kind from the function catalog so it disappears from the function finder&lt;/p&gt;
&lt;p&gt;Correct one example of fn:type-of and add some more examples.&lt;/p&gt;
&lt;p&gt;Fix #1650&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1664 created</title>
   <pubDate>Thu, 19 Dec 2024 16:25:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1664</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1664</guid>
   <description>&lt;div&gt;&lt;p&gt;1659 option conventions sequences as arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1663 created</title>
   <pubDate>Thu, 19 Dec 2024 16:02:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1663</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1663</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove DTD/stylesheet distractions at the top of the schema&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We decided to close #374 without further action. This PR just cleans up the relevant schema file by removing the DTD and stylesheet related comment(s).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1662 created</title>
   <pubDate>Thu, 19 Dec 2024 14:32:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1662</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1662</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:sort - add composite sort keys&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The fn:sort function supports composite sort keys (where the sort key is a sequence, it's treated as a sequence of sort keys in major to minor order).&lt;/p&gt;
&lt;p&gt;We could add the same feature for &lt;code&gt;xsl:sort&lt;/code&gt;, perhaps driven by the attribute composite="yes" for compatibility with grouping keys.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1661 created</title>
   <pubDate>Wed, 18 Dec 2024 10:17:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1661</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1661</guid>
   <description>&lt;div&gt;&lt;p&gt;QName arguments: also allow strings&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In #747, a syntax for QName literals was proposed (&lt;code&gt;Q"prefix:local"&lt;/code&gt;). Concerns were raised that the new syntax could be mixed up with the existing &lt;code&gt;Q{URI}local&lt;/code&gt; syntax, and that too many syntax variants are confusing.&lt;/p&gt;
&lt;p&gt;In attribute and element constructors, it is already possible to supply &lt;code&gt;prefix:local-name&lt;/code&gt; and &lt;code&gt;Q{uri}local&lt;/code&gt; strings for names:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;element { 'xml:name' } {},
element { 'Q{uri}name' } {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With option declarations, it is possible to write:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare option output:cdata-section-elements 'xml';
&amp;lt;xml&amp;gt;text&amp;lt;/xml&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and it is counterintuitive that &lt;code&gt;serialize($xml, { 'cdata-section-elements': 'xml' })&lt;/code&gt; is not legal.&lt;/p&gt;
&lt;p&gt;I wonder whether we cannot simply allow both QNames and strings for arguments (and arguments in options) in the existing standard functions. There are fewer cases than I had suspected:&lt;/p&gt;
&lt;p&gt;Function | Argument
--- | ---
&lt;code&gt;fn:error&lt;/code&gt; | &lt;code&gt;$code&lt;/code&gt;
&lt;code&gt;fn:format-number&lt;/code&gt; | &lt;code&gt;$options&lt;/code&gt;: &lt;code&gt;format-name&lt;/code&gt; (can also be &lt;code&gt;xs:NCName&lt;/code&gt;)
&lt;code&gt;fn:deep-equal&lt;/code&gt; | &lt;code&gt;$options&lt;/code&gt;: &lt;code&gt;unordered-elements&lt;/code&gt;
&lt;code&gt;fn:serialize&lt;/code&gt; | &lt;code&gt;$options&lt;/code&gt;: &lt;code&gt;cdata-section-elements&lt;/code&gt;, &lt;code&gt;suppress-indentation&lt;/code&gt;
&lt;code&gt;fn:function-lookup&lt;/code&gt; | &lt;code&gt;$name&lt;/code&gt;
&lt;code&gt;fn:load-xquery-module&lt;/code&gt; | &lt;code&gt;$options&lt;/code&gt;: &lt;code&gt;variables&lt;/code&gt;, &lt;code&gt;vendor-options&lt;/code&gt;
&lt;code&gt;fn:transform&lt;/code&gt; | &lt;code&gt;$options&lt;/code&gt;: &lt;code&gt;initial-function&lt;/code&gt;, &lt;code&gt;initial-mode&lt;/code&gt;, &lt;code&gt;initial-template&lt;/code&gt;, ...
&lt;code&gt;fn:elements-to-maps&lt;/code&gt; | &lt;code&gt;$options&lt;/code&gt;: &lt;code&gt;layouts&lt;/code&gt;
&lt;code&gt;fn:schema-type&lt;/code&gt; | &lt;code&gt;$name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For some options, like the &lt;code&gt;method&lt;/code&gt; option of &lt;code&gt;fn:serialize&lt;/code&gt;, we already allow both strings and QNames.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 103 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 17 Dec 2024 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/12-17</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-12-17</guid>
</item><item>
   <title>Issue #1660 created</title>
   <pubDate>Tue, 17 Dec 2024 17:24:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1660</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1660</guid>
   <description>&lt;div&gt;&lt;p&gt;Further suggestions for fn:path&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Several good suggestions for fn:path made at today's review:&lt;/p&gt;
&lt;p&gt;(a) For namespaces, an option to identify elements by the result of the name() function - that is, using the actual prefix of each element, rather than a prefix obtained from an externally supplied map
(b) The ability to get a path to a node from a supplied ancestor rather than from the root. (Defaulting perhaps to a path from the context node, though that interacts awkwardly with the default for the target node itself.)
(c) Some more advice and guidance, especially relating to the different use cases depending on whether the path is for use by software or for (diagnostic?) use by human developers.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1619 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:14:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1619</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1619</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: keys as maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1622 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:14:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1622</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1622</guid>
   <description>&lt;div&gt;&lt;p&gt;1619 Specify XSLT map-for-key function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #332 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:11:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/332</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-332</guid>
   <description>&lt;div&gt;&lt;p&gt;Add a namespace uris option to fn:path&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1620 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:11:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1620</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1620</guid>
   <description>&lt;div&gt;&lt;p&gt;332 Add options for fn:path&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1627 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:08:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1627</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1627</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop validate() and valid() functions from schema-type-record&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1633 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:08:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1633</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1633</guid>
   <description>&lt;div&gt;&lt;p&gt;1627 Tweaks to schema type functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #374 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:07:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/374</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-374</guid>
   <description>&lt;div&gt;&lt;p&gt;Can't view the XSD for XSLT in the browser&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #523 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:07:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/523</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-523</guid>
   <description>&lt;div&gt;&lt;p&gt;Dealing with component name conflicts with library packages&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1655 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:06:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1655</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1655</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1634 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:05:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1634</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1634</guid>
   <description>&lt;div&gt;&lt;p&gt;Decimal formats in XPath/XQuery static context: updates needed&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1638 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:05:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1638</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1638</guid>
   <description>&lt;div&gt;&lt;p&gt;1634 Update description of decimal properties in the static context&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1652 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:04:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1652</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1652</guid>
   <description>&lt;div&gt;&lt;p&gt;Use function/xfunction markup&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1653 closed</title>
   <pubDate>Tue, 17 Dec 2024 17:04:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1653</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1653</guid>
   <description>&lt;div&gt;&lt;p&gt;1652 Use function markup&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1659 created</title>
   <pubDate>Tue, 17 Dec 2024 16:59:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1659</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1659</guid>
   <description>&lt;div&gt;&lt;p&gt;List-valued options represented as arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specification of the of the &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#option-parameter-conventions"&gt;option parameter conventions&lt;/a&gt; contains this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In cases where an option is list-valued, by convention the function should accept either a sequence or an array: but this rule applies only if the specification of the option explicitly accepts either. Accepting a sequence is convenient if the value is generated programmatically using an XPath expression; while accepting an array allows the options to be held in an external file in JSON format, to be read using a call on the fn:json-doc function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In particular, it says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;...this rule applies only if the specification of the option explicitly accepts either...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However I could not find any option that explicitly makes use of "accepts either" in the specification. In the tests, I found two cases where arrays are passed as option values: &lt;a href="https://github.com/qt4cg/qt4tests/blob/8be46fb7e7e22164dd9005d9c53e7d2f585bbb90/fn/format-number.xml#L3757-L3770"&gt;&lt;code&gt;numberformat-510&lt;/code&gt;&lt;/a&gt; (here the option isn't even list-valued), and &lt;a href="https://github.com/qt4cg/qt4tests/blob/master/fn/serialize.xml#L1332-L1349"&gt;&lt;code&gt;serialize-xml-106a&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am wondering whether the above paragraph might be superfluous. The text preceding it says that option values are coerced to the required type, and that implies converting an array to its member sequence, doesn't it?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1658 created</title>
   <pubDate>Tue, 17 Dec 2024 15:55:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1658</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1658</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: `empty`, normalize space ?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current rules say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If &lt;code&gt;empty($EE/(* | text())&lt;/code&gt; (that is, if there are no child elements or text nodes) then: […] &lt;code&gt;empty&lt;/code&gt;
If &lt;code&gt;empty($EE/text()[normalize-space()])&lt;/code&gt; (that is, there are no text node children other than whitespace), then: […] &lt;code&gt;list&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maybe it would be consistent to add &lt;code&gt;[normalize-space()]&lt;/code&gt; to the condition of the &lt;code&gt;empty&lt;/code&gt; layout?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 103 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 16 Dec 2024 10:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/12-17</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-12-17</guid>
</item><item>
   <title>Issue #1550 closed</title>
   <pubDate>Sun, 15 Dec 2024 20:59:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1550</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1550</guid>
   <description>&lt;div&gt;&lt;p&gt;More requirements for type information&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1657 created</title>
   <pubDate>Sun, 15 Dec 2024 11:58:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1657</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1657</guid>
   <description>&lt;div&gt;&lt;p&gt;1624 Add note explaining nodetest subtyping&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1624&lt;/p&gt;
&lt;p&gt;by adding a note explaining the problem.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1656 created</title>
   <pubDate>Sun, 15 Dec 2024 11:35:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1656</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1656</guid>
   <description>&lt;div&gt;&lt;p&gt;Ordered Maps: Updates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If maps are updated, insertion/deletion order may be an issue, even more if maps will be ordered by default (#1651).&lt;/p&gt;
&lt;p&gt;This topic needs to be discussed in more depth before we take any actions.&lt;/p&gt;
&lt;p&gt;Personally, I think we should focus on XML updates first (related: #1225).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1457 closed</title>
   <pubDate>Sun, 15 Dec 2024 00:42:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1457</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1457</guid>
   <description>&lt;div&gt;&lt;p&gt;Common name for maps &amp;amp; arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1588 closed</title>
   <pubDate>Sun, 15 Dec 2024 00:41:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1588</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1588</guid>
   <description>&lt;div&gt;&lt;p&gt;Move the Streamability chapter?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1592 closed</title>
   <pubDate>Sun, 15 Dec 2024 00:40:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1592</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1592</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Observations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1654 closed</title>
   <pubDate>Sun, 15 Dec 2024 00:35:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1654</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1654</guid>
   <description>&lt;div&gt;&lt;p&gt;Type annotations on maps and arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1655 created</title>
   <pubDate>Wed, 11 Dec 2024 22:46:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1655</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1655</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Now that we are discussing different types of maps, there could also be JSON maps. Then each map would have a property &lt;code&gt;json&lt;/code&gt;, that can be false or true. If it is false, it is an ordinary map like now. If it is true, it is a "JSON map".&lt;/p&gt;
&lt;p&gt;A JSON map can only have string keys, and all map functions would enforce that constraint by casting the key to string.&lt;/p&gt;
&lt;p&gt;Parse-json and json-doc would return a JSON map. As would the bare brace &lt;code&gt;{}&lt;/code&gt; constructor for compatibility with Javascript.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $json := parse-json('{"1": 234}')
return map:put($json, 1, 456)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would return a JSON map &lt;code&gt;{"1": 456}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $json := parse-json('{"1": 234}')
return map:contains($json, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would return true.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1654 created</title>
   <pubDate>Wed, 11 Dec 2024 19:48:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1654</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1654</guid>
   <description>&lt;div&gt;&lt;p&gt;Type annotations on maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently maps and arrays have very little type safety. You can say that your function expects array(xs:string), but that involves testing what the array actually contains, and there's nothing to stop you then appending an integer to the array.&lt;/p&gt;
&lt;p&gt;I would like to explore the possibility of having arrays and maps annotated with a type (either always, or optionally), and for this type to constrain operations such as array:append() and map:put().&lt;/p&gt;
&lt;p&gt;@dnovatchev has suggested that ordered maps and unordered maps should be different types, and I think it would be difficult to do that unless we move to structural typing. It's also more consistent with typing of atomic values and nodes - though it raises a question about sequences, where the type is purely descriptive.&lt;/p&gt;
&lt;p&gt;This would also have implications for records: presumably a map could be annotated with a record type, and this too could constrain the operations available on the value.&lt;/p&gt;
&lt;p&gt;This is a rather big change and I put it forward fairly tentatively, but I'm interested to hear people's views.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1653 created</title>
   <pubDate>Wed, 11 Dec 2024 08:31:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1653</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1653</guid>
   <description>&lt;div&gt;&lt;p&gt;1652 Use function markup&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Replace &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;function&amp;gt;&lt;/code&gt; tags where appropriate.&lt;/p&gt;
&lt;p&gt;Fix #1652&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1652 created</title>
   <pubDate>Wed, 11 Dec 2024 07:45:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1652</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1652</guid>
   <description>&lt;div&gt;&lt;p&gt;Use function/xfunction markup&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;PR #1616 instroduced improved support for the function and xfunction tags.&lt;/p&gt;
&lt;p&gt;We should now change the documents to take advantage of this.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 102 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 10 Dec 2024 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/12-10</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-12-10</guid>
</item><item>
   <title>Issue #1616 closed</title>
   <pubDate>Tue, 10 Dec 2024 17:21:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1616</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1616</guid>
   <description>&lt;div&gt;&lt;p&gt;A little cleanup; support function/xfunction globally&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1636 closed</title>
   <pubDate>Tue, 10 Dec 2024 17:18:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1636</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1636</guid>
   <description>&lt;div&gt;&lt;p&gt;Initial conversion of EXPath Binary/File&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1103 closed</title>
   <pubDate>Tue, 10 Dec 2024 17:15:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1103</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1103</guid>
   <description>&lt;div&gt;&lt;p&gt;CSV Parsing - handling line ending normalization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1643 closed</title>
   <pubDate>Tue, 10 Dec 2024 17:15:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1643</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1643</guid>
   <description>&lt;div&gt;&lt;p&gt;1103 Normalize line endings in CSV prior to parsing&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1637 closed</title>
   <pubDate>Tue, 10 Dec 2024 17:12:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1637</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1637</guid>
   <description>&lt;div&gt;&lt;p&gt;Obsolete note in fn:function-lookup&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1642 closed</title>
   <pubDate>Tue, 10 Dec 2024 17:12:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1642</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1642</guid>
   <description>&lt;div&gt;&lt;p&gt;1637 Add/Amend notes to fn:function-lookup&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1554 closed</title>
   <pubDate>Tue, 10 Dec 2024 17:10:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1554</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1554</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Formal Specification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1641 closed</title>
   <pubDate>Tue, 10 Dec 2024 17:10:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1641</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1641</guid>
   <description>&lt;div&gt;&lt;p&gt;1554-change-formal-specification-heading&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1639 closed</title>
   <pubDate>Tue, 10 Dec 2024 17:01:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1639</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1639</guid>
   <description>&lt;div&gt;&lt;p&gt;Rules for schema-aware elements-to-maps are incomplete&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1640 closed</title>
   <pubDate>Tue, 10 Dec 2024 17:01:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1640</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1640</guid>
   <description>&lt;div&gt;&lt;p&gt;1639 Add missing rule for elements-to-maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1628 closed</title>
   <pubDate>Tue, 10 Dec 2024 16:58:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1628</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1628</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery version number&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1629 closed</title>
   <pubDate>Tue, 10 Dec 2024 16:58:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1629</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1629</guid>
   <description>&lt;div&gt;&lt;p&gt;1628 Clarify rules for XQuery version declaration&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1651 created</title>
   <pubDate>Tue, 10 Dec 2024 15:10:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1651</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1651</guid>
   <description>&lt;div&gt;&lt;p&gt;Ordered Maps: maps that retain insertion order&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently, XDM maps are “unordered”: An implementation is allowed to organize entries in a way that optimizes lookup, not order. The entries do not have a predictable order unless they are explicitly sorted.&lt;/p&gt;
&lt;p&gt;There are cases in which it is helpful if the “insertion order” is preserved – i.e., the order in which new map entries are added to a map. While the insertion order is not relevant if a map is exclusively used for lookups, it may be beneficial if the input includes deliberately sorted key/value pairs, such as (often) in JSON data, configurations or key/value sequences.&lt;/p&gt;
&lt;p&gt;I created this issue because there was some confusion in #564, and on Slack, about this map flavor and “sorted maps”, which are discussed in issue #564: Sorted maps hold all map entries sorted by the key, using a comparator or (in its basic variant) &lt;code&gt;fn:data#1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;PR #1609 attempts to solve both requirements at once.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1650 created</title>
   <pubDate>Tue, 10 Dec 2024 09:52:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1650</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1650</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:node-kind, fn:type-of: Editorial&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:node-kind&lt;/code&gt; is still listed in the function index&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:type-of&lt;/code&gt;: &lt;code&gt;type-of($e//doc/child::node())&lt;/code&gt; → &lt;code&gt;type-of($e/child::node())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 102 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 9 Dec 2024 11:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/12-10</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-12-10</guid>
</item><item>
   <title>Issue #1635 closed</title>
   <pubDate>Mon, 9 Dec 2024 10:33:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1635</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1635</guid>
   <description>&lt;div&gt;&lt;p&gt;Abbreviate suffixes on cross-spec links&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1649 created</title>
   <pubDate>Fri, 6 Dec 2024 23:18:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1649</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1649</guid>
   <description>&lt;div&gt;&lt;p&gt;Result type of fn:function-annotations()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The function signature and the prose rules say&lt;/p&gt;
&lt;p&gt;The result is a sequence of maps, each being an instance of &lt;code&gt;record(key as xs:QName, value as xs:anyAtomicType*)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But one of the examples returns a singleton map in which the QName is the key and the value is the associated value. The test cases also follow that pattern.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1648 created</title>
   <pubDate>Fri, 6 Dec 2024 23:00:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1648</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1648</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Copied from https://github.com/qt4cg/qtspecs/issues/1592#issuecomment-2493270899:&lt;/p&gt;
&lt;p&gt;With regard to types, I would propose to introduce a separate option:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;elements-to-maps(
  &amp;lt;value&amp;gt;42&amp;lt;/value&amp;gt;,
  { 'types': { 'value': 'number' } }
)

→ { "value": 42 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have a preference for strings, as we can prefix them with &lt;code&gt;@&lt;/code&gt;. Next, the representation could be identical to the result, which I believe is more intuitive:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;elements-to-maps(
  &amp;lt;value count='3'/&amp;gt;
  { 'types': { '@count': 'number' } }
)

→ { "value": { "@count": 3 } }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, we could also have two options (&lt;code&gt;element-types&lt;/code&gt;, &lt;code&gt;attribute-types&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1647 created</title>
   <pubDate>Fri, 6 Dec 2024 22:56:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1647</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1647</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Explicit Layouts&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If a user chooses a custom layout, it should always be applied, or (if inappropriate, by all means) an error message should be raised.&lt;/p&gt;
&lt;p&gt;The rationale: I think that the current fallback behavior is flawed. Explicit settings should never be overridden by implicit choices.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1646 created</title>
   <pubDate>Fri, 6 Dec 2024 22:49:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1646</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1646</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Robustness&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Copied from https://github.com/qt4cg/qtspecs/issues/1592#issuecomment-2493187896 and https://github.com/qt4cg/qtspecs/issues/1592#issuecomment-2495502890:&lt;/p&gt;
&lt;p&gt;[USER2] More user feeback:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s confusing that the following function calls lead to completely different outputs:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;elements-to-maps(
  &amp;lt;person&amp;gt;
    &amp;lt;name&amp;gt;Akila&amp;lt;/name&amp;gt;
    &amp;lt;age&amp;gt;34&amp;lt;/age&amp;gt;
  &amp;lt;/person&amp;gt;
)

{"person":{"name":"Akila","age":"34"}}

elements-to-maps(
  &amp;lt;person&amp;gt;
    &amp;lt;name&amp;gt;Akila&amp;lt;/name&amp;gt;
    &amp;lt;name&amp;gt;Jaha&amp;lt;/name&amp;gt;
    &amp;lt;age&amp;gt;34&amp;lt;/age&amp;gt;
  &amp;lt;/person&amp;gt;
)

{"person":[{"name":"Akila"},{"name":"Jaha"},{"age":"34"}]}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;The initial feedback I gathered so far is that the function works fine if the input is regular and uniform, but as soon as there are slight deviations, it can get wild. Here are some plain examples how a small change to the input results in fairly different output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;xml&amp;gt;
  &amp;lt;info&amp;gt;X&amp;lt;/info&amp;gt;
  &amp;lt;address&amp;gt;A&amp;lt;/address&amp;gt;&amp;lt;address&amp;gt;B&amp;lt;/address&amp;gt;
&amp;lt;/xml&amp;gt;
→ { "xml": ["A", "B"] }

&amp;lt;xml&amp;gt;
  &amp;lt;info&amp;gt;X&amp;lt;/info&amp;gt;
  &amp;lt;address&amp;gt;A&amp;lt;/address&amp;gt;
  &amp;lt;address&amp;gt;B&amp;lt;/address&amp;gt;
&amp;lt;/xml&amp;gt;
→ { "xml": [{ "info": "X" }, { "address": "A" }, { "address": "B" }] }

&amp;lt;xml id='id0'&amp;gt;
  &amp;lt;address&amp;gt;A&amp;lt;/address&amp;gt;
  &amp;lt;address&amp;gt;B&amp;lt;/address&amp;gt;
&amp;lt;/xml&amp;gt;
→ { "xml": { "@id": "id0", "address": ["A", "B"] } }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;Possible solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable &lt;code&gt;uniform&lt;/code&gt; by default (performance considerations should not outweigh usability concerns)&lt;/li&gt;
&lt;li&gt;Change the rules for &lt;code&gt;record&lt;/code&gt; from &lt;code&gt;all-different(*!node-name())&lt;/code&gt; to &lt;code&gt;not(all-equal(*!node-name()))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Editorial changes: Stress in the introduction that robustness is a secondary requirement.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1645 created</title>
   <pubDate>Fri, 6 Dec 2024 22:38:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1645</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1645</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Debugging&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Copied from https://github.com/qt4cg/qtspecs/issues/1592#issuecomment-2493180757, slightly revised:&lt;/p&gt;
&lt;p&gt;For regular data, it is convenient to have heuristics that choose layouts automatically. For slightly irregular data that needs manual revisions, it can get messy:&lt;/p&gt;
&lt;p&gt;[USER1] User feedback:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have no idea which layout is used for my XML data. A function would be helpful that does not return the transformed data, but the layouts used for the transformation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We could…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;offer an extra function,&lt;/li&gt;
&lt;li&gt;add a &lt;code&gt;debug&lt;/code&gt; option to trace layout information, or&lt;/li&gt;
&lt;li&gt;add an option to include layouts in the output:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;p&amp;gt;&amp;lt;a&amp;gt;A&amp;lt;/a&amp;gt;&amp;lt;b&amp;gt;B&amp;lt;/b&amp;gt;&amp;lt;c/&amp;gt;&amp;lt;/p&amp;gt; =&amp;gt; elements-to-maps({ 'debug': true() })

{
  "p(record)": {
    "a(simple)": "A",
    "b(simple)": "B",
    "c(empty)": ""
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1644 created</title>
   <pubDate>Fri, 6 Dec 2024 22:33:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1644</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1644</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Mixed Content&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Even though the function may not be used primarily for mixed content, we should make it easier to convert such XML input to maps/JSON.&lt;/p&gt;
&lt;p&gt;If I understand correctly, the safest solution to retrieve a consistent result currently is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:elements-to-maps(
  $mixed-content,
  { "disable-layouts": ("empty", "empty-plus",
      "simple", "simple-plus", "list",
      "list-plus", "record", "sequence")
  }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe we can simplify this? If we had an inclusive option, it could possibly be:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:elements-to-maps(
  $mixed-content,
  { "enable-layouts": "mixed" }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could also consider &lt;code&gt;xml:space=''preserve&lt;/code&gt; attributes and apply &lt;code&gt;mixed&lt;/code&gt; to all descendant nodes (but it shouldn't be the only solution).&lt;/p&gt;
&lt;p&gt;Related: #1592&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1643 created</title>
   <pubDate>Fri, 6 Dec 2024 21:49:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1643</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1643</guid>
   <description>&lt;div&gt;&lt;p&gt;1103 Normalize line endings in CSV prior to parsing&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1103&lt;/p&gt;
&lt;p&gt;Simplifies the spec by doing line-ending normalization unconditionally prior to CSV parsing. CRLF sequences are no longer retained within quoted fields.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1642 created</title>
   <pubDate>Fri, 6 Dec 2024 17:13:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1642</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1642</guid>
   <description>&lt;div&gt;&lt;p&gt;1637 Add/Amend notes to fn:function-lookup&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1637&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1641 created</title>
   <pubDate>Fri, 6 Dec 2024 16:58:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1641</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1641</guid>
   <description>&lt;div&gt;&lt;p&gt;1554-change-formal-specification-heading&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1554&lt;/p&gt;
&lt;p&gt;Changes the heading "formal specification" to "formal equivalent", and expands on the explanatory text.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1640 created</title>
   <pubDate>Fri, 6 Dec 2024 15:14:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1640</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1640</guid>
   <description>&lt;div&gt;&lt;p&gt;1639 Add missing rule for elements-to-maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1639&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1639 created</title>
   <pubDate>Fri, 6 Dec 2024 12:30:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1639</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1639</guid>
   <description>&lt;div&gt;&lt;p&gt;Rules for schema-aware elements-to-maps are incomplete&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The rules for schema-aware layout selection produce no answer in the case where the element has a simple type but empty layout and simple layout are both disabled.&lt;/p&gt;
&lt;p&gt;I propose to fall back to "mixed" layout in this case.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1630 closed</title>
   <pubDate>Thu, 5 Dec 2024 15:43:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1630</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1630</guid>
   <description>&lt;div&gt;&lt;p&gt;Two minor corrections of `minus-sign` spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1638 created</title>
   <pubDate>Thu, 5 Dec 2024 15:42:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1638</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1638</guid>
   <description>&lt;div&gt;&lt;p&gt;1634 Update description of decimal properties in the static context&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1634&lt;/p&gt;
&lt;p&gt;Supersedes #1630&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1637 created</title>
   <pubDate>Thu, 5 Dec 2024 14:44:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1637</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1637</guid>
   <description>&lt;div&gt;&lt;p&gt;Obsolete note in fn:function-lookup&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Equally, these specifications do not define any mechanism for creating context-dependent functions other than the built-in context-dependent functions, but neither do they rule out the existence of such functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;which is no longer true (user-defined functions can take context-dependent default arguments)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1462 closed</title>
   <pubDate>Thu, 5 Dec 2024 14:33:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1462</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1462</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: default option&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1636 created</title>
   <pubDate>Thu, 5 Dec 2024 13:47:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1636</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1636</guid>
   <description>&lt;div&gt;&lt;p&gt;Initial conversion of EXPath Binary/File&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1602 closed</title>
   <pubDate>Wed, 4 Dec 2024 23:11:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1602</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1602</guid>
   <description>&lt;div&gt;&lt;p&gt;Additional Operations on Arrays - redundant/spurious text&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1635 created</title>
   <pubDate>Wed, 4 Dec 2024 22:23:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1635</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1635</guid>
   <description>&lt;div&gt;&lt;p&gt;Abbreviate suffixes on cross-spec links&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Stylesheet change for cross-spec links (xspecref, xnt, xtermref) to drop the redundant "40" version suffix - for example the suffix becomes DM rather than DM40, since the vast majority of links will point to the 4.0 version of the document.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1634 created</title>
   <pubDate>Wed, 4 Dec 2024 18:14:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1634</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1634</guid>
   <description>&lt;div&gt;&lt;p&gt;Decimal formats in XPath/XQuery static context: updates needed&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See also #1630.&lt;/p&gt;
&lt;p&gt;The description of the decimal format properties in the XPath and XQuery static context needs to be updated to align with changes defining the options map of the &lt;code&gt;format-number&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The XSLT xsl:decimal-format element also needs to be checked for consistency, though most of the required changes have been made.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1633 created</title>
   <pubDate>Wed, 4 Dec 2024 18:02:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1633</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1633</guid>
   <description>&lt;div&gt;&lt;p&gt;1627 Tweaks to schema type functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1627&lt;/p&gt;
&lt;p&gt;Minor adjustments to the rules for fn:schema-type, fn:atomic-type-annotation, and fn:node-type-annotation based on implementation and testing experience.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1632 created</title>
   <pubDate>Wed, 4 Dec 2024 11:24:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1632</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1632</guid>
   <description>&lt;div&gt;&lt;p&gt;Add xsl:map/@select&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I was surprised to discover that the &lt;code&gt;xsl:map&lt;/code&gt; instruction does not allow a &lt;code&gt;select&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;For many use cases it might make the instruction equivalent to &lt;code&gt;xsl:sequence&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:map select="map:build(.....)"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:map select="{'a': 1, 'b': 2}"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;but it still has documentary value; and there are other cases where it's not merely cosmetic:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:map select="$map1, $map2 =&amp;gt; map:remove('extra'), {'extra': 17}"/&amp;gt; &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There's no change to the semantics, the value of the select attribute is handled just like the value of the sequence constructor.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1625 closed</title>
   <pubDate>Tue, 3 Dec 2024 21:10:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1625</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1625</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: misplaced notes for absolute/relative path expressions.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1626 closed</title>
   <pubDate>Tue, 3 Dec 2024 21:10:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1626</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1626</guid>
   <description>&lt;div&gt;&lt;p&gt;1625 Editorial changes to notes on path expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1631 created</title>
   <pubDate>Tue, 3 Dec 2024 18:48:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1631</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1631</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:apply-templates (without select) should allow inline content&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specification of XSLT 3.0 on the matter is pretty loose and seems to allow the fact that xsl:apply-templates without select attribute should contains the elements to process inline.&lt;/p&gt;
&lt;p&gt;It seems like a rather nice feature and may allow to do trick that are quite difficult to do right now&lt;/p&gt;
&lt;p&gt;(copy of https://github.com/w3c/qtspecs/issues/31 )&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 101 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 3 Dec 2024 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/12-03</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-12-03</guid>
</item><item>
   <title>Issue #1596 closed</title>
   <pubDate>Tue, 3 Dec 2024 17:22:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1596</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1596</guid>
   <description>&lt;div&gt;&lt;p&gt;1592 Rework rules for selecting a layout&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1615 closed</title>
   <pubDate>Tue, 3 Dec 2024 17:18:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1615</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1615</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop the terms "module context" and "expression context"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1623 closed</title>
   <pubDate>Tue, 3 Dec 2024 17:18:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1623</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1623</guid>
   <description>&lt;div&gt;&lt;p&gt;1615 Editorial rearrangement of "context" sections&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1614 closed</title>
   <pubDate>Tue, 3 Dec 2024 17:14:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1614</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1614</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix xfunction refs in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1605 closed</title>
   <pubDate>Tue, 3 Dec 2024 17:12:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1605</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1605</guid>
   <description>&lt;div&gt;&lt;p&gt;Change csv-to-xml() to return a document node, not an element node&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1613 closed</title>
   <pubDate>Tue, 3 Dec 2024 17:12:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1613</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1613</guid>
   <description>&lt;div&gt;&lt;p&gt;1605 csv-to-xml to return document node rather than element&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1194 closed</title>
   <pubDate>Tue, 3 Dec 2024 17:09:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1194</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1194</guid>
   <description>&lt;div&gt;&lt;p&gt;New function fn:query()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1608 closed</title>
   <pubDate>Tue, 3 Dec 2024 17:08:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1608</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1608</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:compare depends on implicit timezone&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1611 closed</title>
   <pubDate>Tue, 3 Dec 2024 17:08:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1611</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1611</guid>
   <description>&lt;div&gt;&lt;p&gt;1608 add dependency to fn compare&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1630 created</title>
   <pubDate>Tue, 3 Dec 2024 15:26:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1630</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1630</guid>
   <description>&lt;div&gt;&lt;p&gt;Two minor corrections of `minus-sign` spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Per #1250, &lt;code&gt;minus-sign&lt;/code&gt; is now a string rather than a single character.&lt;/p&gt;
&lt;p&gt;This change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;corrects that in one place where it was still said to be a character&lt;/li&gt;
&lt;li&gt;changes the formulation from "represent" to "mark" a negative number.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sorry for opening a branch in this repo. I did this accidentally, omitting the fork that I originally wanted to create.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1629 created</title>
   <pubDate>Tue, 3 Dec 2024 10:41:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1629</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1629</guid>
   <description>&lt;div&gt;&lt;p&gt;1628 Clarify rules for XQuery version declaration&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1628&lt;/p&gt;
&lt;p&gt;Hopefully the new rules are clearer. They were motivated by a couple of test cases using weird version numbers such as "4.00".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1628 created</title>
   <pubDate>Tue, 3 Dec 2024 00:13:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1628</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1628</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery version number&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XQuery 1.0 and 3.0 the version number was simply a string.&lt;/p&gt;
&lt;p&gt;XQuery version 3.1 specified that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An XQuery version number consists of two integers separated by a dot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In 4.0 we have taken this rather literally, and have spelled out the consequences in a note:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The version numbers 4.01 and 4.1 are equivalent: both have a major number of 4 and a minor number of 1. Version 4.10 by the same reasoning has a higher minor number than version 4.2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is completely counter-intuitive.&lt;/p&gt;
&lt;p&gt;I propose that we eliminate the confusion by requiring the version number to consist of two single-digit integers separated by a dot.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 101 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 2 Dec 2024 09:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/12-03</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-12-03</guid>
</item><item>
   <title>Issue #1627 created</title>
   <pubDate>Sun, 1 Dec 2024 23:33:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1627</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1627</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop validate() and valid() functions from schema-type-record&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The functions schema-type(), atomic-type-annotation(), and node-type-annotation() return a schema-type-record in which two of the fields are function items validate() and valid().&lt;/p&gt;
&lt;p&gt;I've come to the conclusion that these are difficult to specify, difficult to implement, and difficult to test, and that the benefit of providing them is not great. I propose to drop them. They can always be added back in later.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1626 created</title>
   <pubDate>Sun, 1 Dec 2024 11:42:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1626</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1626</guid>
   <description>&lt;div&gt;&lt;p&gt;1625 Editorial changes to notes on path expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1625&lt;/p&gt;
&lt;p&gt;Purely editorial.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1625 created</title>
   <pubDate>Sun, 1 Dec 2024 11:22:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1625</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1625</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: misplaced notes for absolute/relative path expressions.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The note regarding leading-lone-slash ambiguity in 4.6.2 (relative path expressions) properly belongs in 4.6.1 (absolute path expressions)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1624 created</title>
   <pubDate>Fri, 29 Nov 2024 21:33:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1624</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1624</guid>
   <description>&lt;div&gt;&lt;p&gt;document-node(a|b) is the same type as document-node(a)|document-node(b)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;document-node(a|b)&lt;/code&gt; is the same type as &lt;code&gt;document-node(a) | document-node(b)&lt;/code&gt; but the current subtyping rules don't say this.&lt;/p&gt;
&lt;p&gt;Revealed by test case misc/subtyping-076&lt;/p&gt;
&lt;p&gt;Note, this problem existed before we introduced document-node(X), the same is true of the expansion:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;document-node(element(a|b))&lt;/code&gt; is the same type as &lt;code&gt;document-node(element(a)) | document-node(element(b))&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1603 closed</title>
   <pubDate>Fri, 29 Nov 2024 20:44:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1603</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1603</guid>
   <description>&lt;div&gt;&lt;p&gt;1602 Editorial update to "other operations" on maps and arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1623 created</title>
   <pubDate>Fri, 29 Nov 2024 18:44:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1623</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1623</guid>
   <description>&lt;div&gt;&lt;p&gt;1615 Editorial rearrangement of "context" sections&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is purely editorial.&lt;/p&gt;
&lt;p&gt;It drops some rarely-used and imprecise terminology like "module context", and clarifies the description of the role of the static and dynamic context.&lt;/p&gt;
&lt;p&gt;In XQuery, it pulls together the material from §2.3.5 (the "Serialization" section of the processing model) and Appendix C.1 (the "static context" appendix) into a new section 5.22 Output Declarations.&lt;/p&gt;
&lt;p&gt;Note that much of this material differs between XPath and XQuery, so please review both.&lt;/p&gt;
&lt;p&gt;Fix #1615&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1622 created</title>
   <pubDate>Fri, 29 Nov 2024 13:04:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1622</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1622</guid>
   <description>&lt;div&gt;&lt;p&gt;1619 Specify XSLT map-for-key function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1619&lt;/p&gt;
&lt;p&gt;Specifies an XSLT function map-for-key that converts a key to a map.&lt;/p&gt;
&lt;p&gt;Refines the semantics of fn:key() to align with maps in edge cases.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1621 created</title>
   <pubDate>Fri, 29 Nov 2024 11:22:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1621</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1621</guid>
   <description>&lt;div&gt;&lt;p&gt;compare() with collations that do not support ordering&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Many functions that rely on equality-comparison of strings, for example deep-equal() and the &lt;code&gt;eq&lt;/code&gt; operator, invoke &lt;code&gt;compare(A, B, Collation)&lt;/code&gt;. But we say that some collations only support equality comparison, not ordering. Presumably (we don't actually say), &lt;code&gt;compare(A, B, Collation)&lt;/code&gt; will fail if the collation does not support ordering; but if it fails, then equality comparisons will fail as well.&lt;/p&gt;
&lt;p&gt;It's not obvious what we should do about this. The simplest fix is probably to say that all collations must support ordering as well as equality comparison. Or we could have a fourth result value from &lt;code&gt;compare()&lt;/code&gt; to say "values not equal, but their ordering is not defined"&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1620 created</title>
   <pubDate>Fri, 29 Nov 2024 10:13:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1620</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1620</guid>
   <description>&lt;div&gt;&lt;p&gt;332 Add options for fn:path&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #332&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1619 created</title>
   <pubDate>Fri, 29 Nov 2024 08:23:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1619</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1619</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: keys as maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose an XSLT function map-for-key('keyname', $root) which returns a map $M having the property that &lt;code&gt;map:get($M, $key)&lt;/code&gt; returns the value of &lt;code&gt;key('keyname', $key, $root)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This enables XSLT keys to be exploited in new ways: for example it becomes easy to merge the indexes for multiple documents, or to iterate over all the keys in a document.&lt;/p&gt;
&lt;p&gt;These benefits can already be obtained by scrapping keys entirely and building maps instead; but keys do have some benefits (like remaining implicitly associated with particular documents, and being "more declarative") and if you've got a legacy application that makes extensive use of keys, this function gives you a bridging capability.&lt;/p&gt;
&lt;p&gt;There are a few edge cases that will need ironing out, for example keys allow matching using a collation, which maps don't. (And the spec of xsl:key, now I come to think of it, says nothing about comparing date/time values in different timezones; I don't expect anyone has ever tried.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1618 created</title>
   <pubDate>Thu, 28 Nov 2024 16:38:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1618</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1618</guid>
   <description>&lt;div&gt;&lt;p&gt;Adaptive serialization: doubles&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We should make the serialization spec more liberal when it comes to the representation of double values. The prescribed output format is &lt;code&gt;format-number(?, '0.0##########################e0')&lt;/code&gt;, which is very strict and often confusing when maps and arrays are serialized. Maps resulting from JSON conversions often contain doubles without users noticing it (related: #1583).&lt;/p&gt;
&lt;p&gt;We should make the behavior implementation-dependent or align it with the serialization of JSON data (without losing its additional features to e.g. serialize function items or sequences). Backward compliance shouldn’t be an important issue, as the method was mainly introduced for debugging purposes.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1617 created</title>
   <pubDate>Wed, 27 Nov 2024 18:26:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1617</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1617</guid>
   <description>&lt;div&gt;&lt;p&gt;1606 Drop named item types, refine named record types, esp in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1606
Fix #1506
Fix #1485&lt;/p&gt;
&lt;p&gt;This PR drops the general concept of declaring named item types in XQuery and XSLT, and focuses on declaring named record types. The rules for named record types are tidied up editorially in XQuery (for example there is a clearer distinction between the syntax production &lt;code&gt;RecordType&lt;/code&gt; and the concept of a record type, which can be declared either using that syntax, or otherwise). In XSLT the &lt;code&gt;&amp;lt;xsl:item-type&amp;gt;&lt;/code&gt; declaration is dropped and an &lt;code&gt;&amp;lt;xsl:record-type&amp;gt;&lt;/code&gt; declaration is introduced.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1616 created</title>
   <pubDate>Wed, 27 Nov 2024 17:49:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1616</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1616</guid>
   <description>&lt;div&gt;&lt;p&gt;A little cleanup; support function/xfunction globally&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is another PR related to #1610&lt;/p&gt;
&lt;p&gt;@michaelhkay suggested that it would be nice to be able to use &lt;code&gt;&amp;lt;function&amp;gt;&lt;/code&gt; consistently. This PR attempts to implement that. (It also implements &lt;code&gt;&amp;lt;xfunction&amp;gt;&lt;/code&gt; which appears to have been an attempt to do this in the XSLT spec.)&lt;/p&gt;
&lt;p&gt;Markup of the form &lt;code&gt;&amp;lt;function&amp;gt;prefix:name#arity&amp;lt;/function&amp;gt;&lt;/code&gt; will attempt to find the definition of &lt;code&gt;prefix:name&lt;/code&gt; in the F&amp;amp;O and XSLT specifications. It will make an appropriate link. If no &lt;code&gt;prefix&lt;/code&gt; is provided &lt;code&gt;fn:&lt;/code&gt; is assumed and the &lt;em&gt;#arity&lt;/em&gt; part is optional.&lt;/p&gt;
&lt;p&gt;If someone can pull this PR locally (instructions below) and kick the tires (excuse me, "tyres") I'd appreciate it. I've done a little spot checking, but I can't say I've been comprehensive.&lt;/p&gt;
&lt;p&gt;If we agree to merge this, it will then be possible to cleanup markup in some places. For example, it appears that the F&amp;amp;O spec relies on special processing of &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; rather than &lt;code&gt;&amp;lt;function&amp;gt;&lt;/code&gt;. We should never have done that!&lt;/p&gt;
&lt;p&gt;(There's no point looking at the formatted version of this PR, it's all build changes that won't be reflected there.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1615 created</title>
   <pubDate>Wed, 27 Nov 2024 15:34:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1615</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1615</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop the terms "module context" and "expression context"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's not at all clear what these terms are supposed to mean; they are rarely used, and when they are used, they only cause confusion.&lt;/p&gt;
&lt;p&gt;For example, the sentence "The names of public variables and public functions must be unique within the [module contexts] of a query" doesn't bear scrutiny. (Can variables have the same names as functions? Yes they can. Can they have the same names as private variables and functions in the same module? No they can't.)&lt;/p&gt;
&lt;p&gt;The term "expression context" can probably be usefully replaced in most places by "the static context of an expression".&lt;/p&gt;
&lt;p&gt;I think that the idea behind "module context" is that a large part of the static context for expressions is the same for all expressions within a module. But I think that when we use the term, there is usually a better way of saying what we mean.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1614 created</title>
   <pubDate>Wed, 27 Nov 2024 09:45:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1614</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1614</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix xfunction refs in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I changed &lt;code&gt;xfunction&lt;/code&gt; refs so that they point to the right URI for 40 functions.&lt;/p&gt;
&lt;p&gt;(Partial fix for #1610 )&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1613 created</title>
   <pubDate>Tue, 26 Nov 2024 18:41:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1613</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1613</guid>
   <description>&lt;div&gt;&lt;p&gt;1605 csv-to-xml to return document node rather than element&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1605&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1612 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:42:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1612</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1612</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop diagnostic message from stylesheet&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1612 created</title>
   <pubDate>Tue, 26 Nov 2024 17:42:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1612</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1612</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop diagnostic message from stylesheet&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Debugging output was accidentally left in place.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1611 created</title>
   <pubDate>Tue, 26 Nov 2024 17:37:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1611</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1611</guid>
   <description>&lt;div&gt;&lt;p&gt;1608 add dependency to fn compare&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1608&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 100 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 26 Nov 2024 17:25:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/11-26</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-11-26</guid>
</item><item>
   <title>Issue #1503 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:20:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1503</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1503</guid>
   <description>&lt;div&gt;&lt;p&gt;$err:map in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1505 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:20:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1505</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1505</guid>
   <description>&lt;div&gt;&lt;p&gt;1503 Add err:map, err:stack-trace, err:additional to XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1527 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:19:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1527</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1527</guid>
   <description>&lt;div&gt;&lt;p&gt;Rendition of record definitions in F&amp;amp;O spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1586 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:19:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1586</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1586</guid>
   <description>&lt;div&gt;&lt;p&gt;1527 Move record types into separate sections&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1598 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:16:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1598</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1598</guid>
   <description>&lt;div&gt;&lt;p&gt;$err:stack-trace: string, please&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1599 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:16:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1599</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1599</guid>
   <description>&lt;div&gt;&lt;p&gt;1598 $err:stack-trace: string, please&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1593 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:13:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1593</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1593</guid>
   <description>&lt;div&gt;&lt;p&gt;Item type syntax document-node(*)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1604 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:13:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1604</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1604</guid>
   <description>&lt;div&gt;&lt;p&gt;1593 Allow `document-node(NameTestUnion)`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1570 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:10:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1570</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1570</guid>
   <description>&lt;div&gt;&lt;p&gt;1550 Replace node-kind() with new type-of() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1590 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:07:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1590</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1590</guid>
   <description>&lt;div&gt;&lt;p&gt;What is the status of fn:current-mode() in XSLT?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1607 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:07:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1607</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1607</guid>
   <description>&lt;div&gt;&lt;p&gt;1590 Drop draft current-mode function from catalog&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1516 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:04:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1516</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1516</guid>
   <description>&lt;div&gt;&lt;p&gt;Test failures in app-spec-examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1601 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:04:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1601</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1601</guid>
   <description>&lt;div&gt;&lt;p&gt;1516(B) Fix problems with testing examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1594 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:01:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1594</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1594</guid>
   <description>&lt;div&gt;&lt;p&gt;typos: dependant and repeated word&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1600 closed</title>
   <pubDate>Tue, 26 Nov 2024 17:01:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1600</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1600</guid>
   <description>&lt;div&gt;&lt;p&gt;1594 typos: dependant and repeated word&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1595 closed</title>
   <pubDate>Tue, 26 Nov 2024 16:58:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1595</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1595</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: wording in https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-concat misses "be" in "and the arguments can sequences of strings "&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1597 closed</title>
   <pubDate>Tue, 26 Nov 2024 16:58:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1597</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1597</guid>
   <description>&lt;div&gt;&lt;p&gt;1595 Editorial&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1610 created</title>
   <pubDate>Tue, 26 Nov 2024 15:52:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1610</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1610</guid>
   <description>&lt;div&gt;&lt;p&gt;Some cross references are incorrect&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If you look in, for example XSLT, at references to the "FO40" spec, they actually attempt to link the w3.org location where it would have been if it was a REC. Not sure what the fix is, but...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1609 created</title>
   <pubDate>Mon, 25 Nov 2024 18:24:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1609</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1609</guid>
   <description>&lt;div&gt;&lt;p&gt;1651 Ordered Maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #564&lt;/p&gt;
&lt;p&gt;Introduces ordered maps: specifically, sorted maps which return entries in order sorted by key, and fifo maps which return entries in the order of insertion.&lt;/p&gt;
&lt;p&gt;Although this has been on the TODO-list for a long time and has many useful applications, raising a PR at this stage is particularly motivated by comments on the elements-to-maps() function pointing out that having a predictable order of properties in serialized JSON can be very useful, and that many existing XML-to-JSON converters achieve this. This gives the opportunity, for example, to parse JSON into a representation that retains input order, delete and/or add some properties, and then serializate the JSON with the order retained.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 100 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 25 Nov 2024 11:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/11-26</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-11-26</guid>
</item><item>
   <title>Issue #1608 created</title>
   <pubDate>Mon, 25 Nov 2024 10:08:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1608</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1608</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:compare depends on implicit timezone&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The properties of fn:compare state that it is context-dependent on collations, but fail to say that it also depends on implicit timezone.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1607 created</title>
   <pubDate>Mon, 25 Nov 2024 00:04:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1607</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1607</guid>
   <description>&lt;div&gt;&lt;p&gt;1590 Drop draft current-mode function from catalog&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1590.&lt;/p&gt;
&lt;p&gt;A draft spec for this function is in the function-catalog, but it has never been referenced in the published spec and the draft is incomplete.&lt;/p&gt;
&lt;p&gt;This PR has no impact on the published specs, only on processes that access the function catalog.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1606 created</title>
   <pubDate>Sun, 24 Nov 2024 23:57:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1606</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1606</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop named item types other than named record types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We started with named item types, they were mainly intended for defining records, but allowed any type. Then we realised that records required extra capability, especially recursive definitions and constructors, so we introduced &lt;code&gt;declare record&lt;/code&gt; for that case. This begs the question as to whether the general &lt;code&gt;declare type&lt;/code&gt; is still useful enough to merit inclusion. I suspect that if we had &lt;code&gt;declare record&lt;/code&gt; and didn't have &lt;code&gt;declare type&lt;/code&gt;, no one would be clamouring for it.&lt;/p&gt;
&lt;p&gt;It's not as if all our work on this feature is done. There's still a fair bit to do on the XSLT side, as well as issues like #1520, and I don't think we've really sorted all the issues relating visibility of types to visibility of variables and functions using those types.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1605 created</title>
   <pubDate>Sun, 24 Nov 2024 12:06:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1605</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1605</guid>
   <description>&lt;div&gt;&lt;p&gt;Change csv-to-xml() to return a document node, not an element node&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Generally, functions that construct a new node tree return a document node rather than an element node. This is friendlier, because it means for example that path expressions starting with "/" can be used. (An exception is analyze-string, which it's too late to change).&lt;/p&gt;
&lt;p&gt;I propose to bring &lt;code&gt;csv-to-xml&lt;/code&gt; into line.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1604 created</title>
   <pubDate>Sun, 24 Nov 2024 12:01:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1604</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1604</guid>
   <description>&lt;div&gt;&lt;p&gt;1593 Allow `document-node(NameTestUnion)`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1593&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1603 created</title>
   <pubDate>Sun, 24 Nov 2024 11:01:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1603</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1603</guid>
   <description>&lt;div&gt;&lt;p&gt;1602 Editorial update to "other operations" on maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Updates and aligns the "Other Operations" sections for maps and arrays.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1602 created</title>
   <pubDate>Sat, 23 Nov 2024 22:49:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1602</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1602</guid>
   <description>&lt;div&gt;&lt;p&gt;Additional Operations on Arrays - redundant/spurious text&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;F&amp;amp;O Sections 18.3.1 (Singleton Arrays) and 18.3.2 (Value Maps) are almost identical to each other, and neither seems to bear much relationship to the section heading. The material is non-normative so this is a purely editorial issue.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1601 created</title>
   <pubDate>Sat, 23 Nov 2024 17:41:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1601</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1601</guid>
   <description>&lt;div&gt;&lt;p&gt;1516(B) Fix problems with testing examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1516&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fixes some examples in the spec where the expected results were apparently incorrect&lt;/li&gt;
&lt;li&gt;Introduces a mechanism for giving a test assertion for an example that is separate from the published result, for example where alternative results are possible&lt;/li&gt;
&lt;li&gt;Marks some tests as schema-aware so a non-schema-aware processor won't attempt to run them&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All the tests for features that are implemented in Saxon now run successfully.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1600 created</title>
   <pubDate>Fri, 22 Nov 2024 13:11:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1600</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1600</guid>
   <description>&lt;div&gt;&lt;p&gt;1594 typos: dependant and repeated word&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1594&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1599 created</title>
   <pubDate>Fri, 22 Nov 2024 13:08:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1599</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1599</guid>
   <description>&lt;div&gt;&lt;p&gt;1598 $err:stack-trace: string, please&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1598&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1598 created</title>
   <pubDate>Fri, 22 Nov 2024 09:01:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1598</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1598</guid>
   <description>&lt;div&gt;&lt;p&gt;$err:stack-trace: string, please&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;One unfortunate thing about &lt;code&gt;$err:stack-trace&lt;/code&gt; is that it is difficult to serialize, for example as json: &lt;code&gt;serialize($err:map, { 'method': 'json' })&lt;/code&gt; does not work anymore.&lt;/p&gt;
&lt;p&gt;I think we should not focus on optimization concerns, but rather return a plain string. If an implementation wants to optimize it further, it shouldn’t be that hard to internally represent it as a lazy string that is generated only when requested.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1597 created</title>
   <pubDate>Fri, 22 Nov 2024 08:45:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1597</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1597</guid>
   <description>&lt;div&gt;&lt;p&gt;1595 Editorial&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1595&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1596 created</title>
   <pubDate>Thu, 21 Nov 2024 21:14:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1596</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1596</guid>
   <description>&lt;div&gt;&lt;p&gt;1592 Rework rules for selecting a layout&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've reworked the rules for selecting a layout. There's probably more to be done, but this is a start - feeback welcome. I'm marking this "revise" for the moment because I haven't finished it yet. There's no deliberate changing of the spec apart from fixing errors.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1595 created</title>
   <pubDate>Thu, 21 Nov 2024 19:52:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1595</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1595</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: wording in https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-concat misses "be" in "and the arguments can sequences of strings "&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think there is a slight wording/grammar issue in https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-concat saying&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The function can now take any number of arguments (previously it had to be two or more), and the arguments can sequences of strings rather than single strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It it probably meant to say&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The function can now take any number of arguments (previously it had to be two or more), and the arguments be can sequences of strings rather than single strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1594 created</title>
   <pubDate>Thu, 21 Nov 2024 13:43:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1594</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1594</guid>
   <description>&lt;div&gt;&lt;p&gt;typos: dependant and repeated word&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I spotted two typos in the XSLT 3 spec, and I'm reporting them here because they are in the XSLT 4 spec as well, in https://raw.githubusercontent.com/qt4cg/qtspecs/refs/heads/master/specifications/xslt-40/src/xslt.xml&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dependant, in "versions of the packages on which this package is dependant."&lt;/li&gt;
&lt;li&gt;"the the ", in "appears in the the initializing expression"&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1593 created</title>
   <pubDate>Wed, 20 Nov 2024 07:43:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1593</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1593</guid>
   <description>&lt;div&gt;&lt;p&gt;Item type syntax document-node(*)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that the syntax &lt;code&gt;document-node(NameTest)&lt;/code&gt; be allowed as a synonym for &lt;code&gt;document-node(element(NameTest))&lt;/code&gt; to match a document node that has exactly one element node child matching &lt;code&gt;NameTest&lt;/code&gt; (possibly with comment, and processing-instruction siblings).&lt;/p&gt;
&lt;p&gt;The rationale is that &lt;code&gt;document-node()&lt;/code&gt; is often used in situations where a well-formed document is required, and people are more likely to use the more precise type &lt;code&gt;document-node(*)&lt;/code&gt; if it can be expressed with less verbosity.&lt;/p&gt;
&lt;p&gt;For example, the return type of &lt;code&gt;parse-xml()&lt;/code&gt; can then be &lt;code&gt;document-node(*)&lt;/code&gt;, and the return type of &lt;code&gt;parse-html()&lt;/code&gt; can be &lt;code&gt;document-node(*:xhtml)&lt;/code&gt;. I propose also that &lt;code&gt;csv-to-xml()&lt;/code&gt; be brought into line by returning &lt;code&gt;document-node(fn:csv)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a number of places in F&amp;amp;O where we currently accept or return &lt;code&gt;document-node()&lt;/code&gt; and could be more specific by changing this to &lt;code&gt;document-node(*)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The verbosity is especially apparent when we want to use the type &lt;code&gt;(document-node(element(X)) | element (X))&lt;/code&gt; which can now be abbreviated to &lt;code&gt;(document-node(X) | element(X))&lt;/code&gt; which reads much more clearly,&lt;/p&gt;
&lt;p&gt;There are also a number of places where we currently require &lt;code&gt;element(*)&lt;/code&gt; -- for example the first argument of &lt;code&gt;elements-to-maps&lt;/code&gt; -- where it would be user-friendly to change this to &lt;code&gt;(document-node(*) | element(*))&lt;/code&gt; (with the semantics that supplying a document node has the same effect as supplying the outermost element of the document).&lt;/p&gt;
&lt;p&gt;We should also clarify that &lt;code&gt;document-node(element())&lt;/code&gt; does not match a document node having text node children - something that is not currently stated very explicitly.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 099 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 19 Nov 2024 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/11-19</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-11-19</guid>
</item><item>
   <title>Issue #528 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:19:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/528</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-528</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps (before: Review of the fn:json() function)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1575 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:19:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1575</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1575</guid>
   <description>&lt;div&gt;&lt;p&gt;528bis element to map&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1491 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:16:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1491</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1491</guid>
   <description>&lt;div&gt;&lt;p&gt;Empty record?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1577 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:16:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1577</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1577</guid>
   <description>&lt;div&gt;&lt;p&gt;1491 Empty record types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1585 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:13:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1585</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1585</guid>
   <description>&lt;div&gt;&lt;p&gt;Update RELAX NG grammar for XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #767 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:10:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/767</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-767</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-html(): case of SVG element names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1582 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:10:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1582</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1582</guid>
   <description>&lt;div&gt;&lt;p&gt;767 Fix reference to HTML5 spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #69 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:07:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/69</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-69</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:document, fn:function-available: default arguments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1581 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:07:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1581</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1581</guid>
   <description>&lt;div&gt;&lt;p&gt;69 Add default for current-merge-group $source&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1580 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:04:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1580</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1580</guid>
   <description>&lt;div&gt;&lt;p&gt;1462 Change default for deep-equal options&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1493 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:01:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1493</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1493</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:xml-to-json: Amendments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1578 closed</title>
   <pubDate>Tue, 19 Nov 2024 17:01:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1578</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1578</guid>
   <description>&lt;div&gt;&lt;p&gt;1493 Expand the rules for handling numbers in xml-to-json&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1574 closed</title>
   <pubDate>Tue, 19 Nov 2024 16:58:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1574</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1574</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar productions missing spec conditionality&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1576 closed</title>
   <pubDate>Tue, 19 Nov 2024 16:58:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1576</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1576</guid>
   <description>&lt;div&gt;&lt;p&gt;1574 Mark some productions as XQuery only&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1592 created</title>
   <pubDate>Tue, 19 Nov 2024 16:58:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1592</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1592</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps: Observations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a placeholder for feedback on the recently added &lt;code&gt;fn:elements-to-maps&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Adopted from https://github.com/qt4cg/qtspecs/pull/529#issuecomment-1765060154 (and as also suggested by @dnovatchev), some rules still refer to JSON. I think we should refer to the XDM, XML or maps instead. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mapping XML to ~~JSON~~ &lt;strong&gt;a map&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;~~JSON~~ &lt;strong&gt;Map&lt;/strong&gt; equivalent (13x) → adjust syntax&lt;/li&gt;
&lt;li&gt;their ~~JSON~~ &lt;strong&gt;map&lt;/strong&gt; equivalents&lt;/li&gt;
&lt;li&gt;…etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Issues that have not fully been discussed: https://github.com/qt4cg/qtspecs/pull/529#issuecomment-1765761565&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/qt4cg/qt4tests/issues/181: empty-plus shouldn't require that attributes exist.&lt;/li&gt;
&lt;li&gt;https://github.com/qt4cg/qt4tests/issues/180: "list" incorrectly states that it doesn't apply where the INNER element has attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…more to come.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1349 closed</title>
   <pubDate>Tue, 19 Nov 2024 16:57:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1349</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1349</guid>
   <description>&lt;div&gt;&lt;p&gt;Nothing&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #421 closed</title>
   <pubDate>Tue, 19 Nov 2024 16:57:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/421</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-421</guid>
   <description>&lt;div&gt;&lt;p&gt;Make sure the build system syntax checks the syntax of examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #92 closed</title>
   <pubDate>Tue, 19 Nov 2024 16:57:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/92</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-92</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplify rule for attribute values on Extension Instructions used to invoke named templates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1552 closed</title>
   <pubDate>Tue, 19 Nov 2024 16:55:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1552</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1552</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:siblings() on parentless nodes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1573 closed</title>
   <pubDate>Tue, 19 Nov 2024 16:55:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1573</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1573</guid>
   <description>&lt;div&gt;&lt;p&gt;1552 Change fn:siblings to include self in all cases&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1591 created</title>
   <pubDate>Tue, 19 Nov 2024 10:27:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1591</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1591</guid>
   <description>&lt;div&gt;&lt;p&gt;Implausible filter expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose to classify &lt;code&gt;E[P]&lt;/code&gt; as an implausible expression if the only possible value of P that has an effective boolean value is the empty sequence.&lt;/p&gt;
&lt;p&gt;An example might be &lt;code&gt;$uris[parse-uri(.)]&lt;/code&gt;. The result of &lt;code&gt;parse-uri&lt;/code&gt; is either a map or an empty sequence, so computing the EBV will give either false or an error.&lt;/p&gt;
&lt;p&gt;Classifying an expression as implausible licenses the processor to reject it as a static error.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1590 created</title>
   <pubDate>Tue, 19 Nov 2024 09:51:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1590</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1590</guid>
   <description>&lt;div&gt;&lt;p&gt;What is the status of fn:current-mode() in XSLT?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It appears in the function catalog but not in the specification.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1589 closed</title>
   <pubDate>Tue, 19 Nov 2024 09:25:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1589</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1589</guid>
   <description>&lt;div&gt;&lt;p&gt;Implement an instruction/function finder in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1589 created</title>
   <pubDate>Tue, 19 Nov 2024 09:12:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1589</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1589</guid>
   <description>&lt;div&gt;&lt;p&gt;Implement an instruction/function finder in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See also #1588&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1588 created</title>
   <pubDate>Mon, 18 Nov 2024 17:53:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1588</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1588</guid>
   <description>&lt;div&gt;&lt;p&gt;Move the Streamability chapter?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a minor thing, but it annoys me every single time. Open up the XSLT spec and search for any instruction and the first hit in the ToC is always 19.8.4.x "Streamability of [instruction]" which has never been the reason I was looking for the instruction.&lt;/p&gt;
&lt;p&gt;Seems we could move 19 to 27, putting it before Serialization or we could tinker with the markup so that 19.8.4.x didn't appear in the ToC.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1587 created</title>
   <pubDate>Mon, 18 Nov 2024 17:27:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1587</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1587</guid>
   <description>&lt;div&gt;&lt;p&gt;557 Add fn:unparsed-binary function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds the function &lt;code&gt;fn:binary-resource&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also fixes some inconstencies in the handling of static/executable base URI in other resource access functions.&lt;/p&gt;
&lt;p&gt;Fix #557&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1579 closed</title>
   <pubDate>Mon, 18 Nov 2024 16:48:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1579</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1579</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow $key in map:contains to be empty&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1586 created</title>
   <pubDate>Mon, 18 Nov 2024 15:19:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1586</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1586</guid>
   <description>&lt;div&gt;&lt;p&gt;1527 Move record types into separate sections&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes the rendition of record type definitions so each is now defined in a section of its own, extracted from the function catalog into the narrative spec by means of a processing instruction, following the precedent of function definitions. Record type definitions can therefore be cross-referenced using a specref, but they are automatically cross-referenced if named in a function signature.&lt;/p&gt;
&lt;p&gt;Fix #1527&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 099 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 18 Nov 2024 11:50:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/11-19</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-11-19</guid>
</item><item>
   <title>Pull request #1585 created</title>
   <pubDate>Mon, 18 Nov 2024 11:28:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1585</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1585</guid>
   <description>&lt;div&gt;&lt;p&gt;Update RELAX NG grammar for XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR updates the RELAX NG grammar to be (more) consistent with the XSD grammar (and consequently more correct for XSLT 4.0)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Relaxes the definition of QNames so that prefixes declared with &lt;code&gt;fixed-namespaces&lt;/code&gt; can be supported&lt;/li&gt;
&lt;li&gt;Adds the &lt;code&gt;fixed-namespaces&lt;/code&gt; attribute to &lt;code&gt;xsl:stylesheet&lt;/code&gt;, &lt;code&gt;xsl:transform&lt;/code&gt;, and &lt;code&gt;xsl:package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adds the &lt;code&gt;xsl:switch&lt;/code&gt; element&lt;/li&gt;
&lt;li&gt;Adds the &lt;code&gt;xsl:array&lt;/code&gt; and &lt;code&gt;xsl:array-member&lt;/code&gt; elements&lt;/li&gt;
&lt;li&gt;Adds &lt;code&gt;shallow-copy-all&lt;/code&gt; to the possible values for &lt;code&gt;on-no-match&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adds &lt;code&gt;separator&lt;/code&gt; to &lt;code&gt;xsl:apply-templates&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Removes &lt;code&gt;select&lt;/code&gt; attribute from &lt;code&gt;xsl:copy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adds &lt;code&gt;as&lt;/code&gt; attribute to &lt;code&gt;xsl:sequence&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Updated the declarations for &lt;code&gt;xsl:accumulator-rule&lt;/code&gt;, &lt;code&gt;xsl:array&lt;/code&gt;, &lt;code&gt;xsl:array-member&lt;/code&gt;, &lt;code&gt;xsl:attribute&lt;/code&gt;, &lt;code&gt;xsl:catch&lt;/code&gt;, &lt;code&gt;xsl:comment&lt;/code&gt;, &lt;code&gt;xsl:map-entry&lt;/code&gt;, &lt;code&gt;xsl:matching-substring&lt;/code&gt;, &lt;code&gt;xsl:message&lt;/code&gt;, &lt;code&gt;xsl:namespace&lt;/code&gt;, &lt;code&gt;xsl:non-matching-substring&lt;/code&gt;, &lt;code&gt;xsl:on-empty&lt;/code&gt;, &lt;code&gt;xsl:on-non-empty&lt;/code&gt;, &lt;code&gt;xsl:otherwise&lt;/code&gt;, &lt;code&gt;xsl:param&lt;/code&gt;, &lt;code&gt;xsl:processing-instruction&lt;/code&gt;, &lt;code&gt;xsl:sequence&lt;/code&gt;, &lt;code&gt;xsl:sort&lt;/code&gt;, &lt;code&gt;xsl:value-of&lt;/code&gt;, &lt;code&gt;xsl:variable&lt;/code&gt;, &lt;code&gt;xsl:when&lt;/code&gt;, and &lt;code&gt;xsl:with-param&lt;/code&gt; so that they accept &lt;em&gt;either&lt;/em&gt; a &lt;code&gt;select&lt;/code&gt; attribute or a sequence constructor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More changes may also be required. A comprehensive comparision of the RNC and XSD schemas is needed, #1584&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1584 created</title>
   <pubDate>Mon, 18 Nov 2024 11:28:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1584</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1584</guid>
   <description>&lt;div&gt;&lt;p&gt;Review the XML Schema and RELAX NG schemas for XSLT 4.0 for compatibility&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's likely that we've allowed them to drift.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1583 created</title>
   <pubDate>Mon, 18 Nov 2024 11:17:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1583</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1583</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON: Parsing and serializing numbers, often undesired E notation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If JSON numbers are converted to XML and serialized as JSON, it is confusing to end up with an E notation for large numbers. An example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;'100000000000000000000'
=&amp;gt; parse-json()
=&amp;gt; serialize(map { 'method': 'json' })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, lossless roundtripping is not possible (&lt;code&gt;1e20&lt;/code&gt; is a valid JSON number, so we cannot distinguish it from &lt;code&gt;100000000000000000000&lt;/code&gt;), but as the E notation is much less common than integers, maybe we could try to return more numbers in their integer representation if the result would be equivalent?&lt;/p&gt;
&lt;p&gt;Related: #1445&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1582 created</title>
   <pubDate>Mon, 18 Nov 2024 11:08:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1582</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1582</guid>
   <description>&lt;div&gt;&lt;p&gt;767 Fix reference to HTML5 spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The reference to §13.2.9 of the WhatWG DOM spec should be a reference to §13.2.9 of the WhatWG HTML spec.&lt;/p&gt;
&lt;p&gt;Fix #767&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #854 closed</title>
   <pubDate>Mon, 18 Nov 2024 10:29:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/854</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-854</guid>
   <description>&lt;div&gt;&lt;p&gt;Need more discussion and explanation of deep-lookup operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1392 closed</title>
   <pubDate>Mon, 18 Nov 2024 09:29:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1392</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1392</guid>
   <description>&lt;div&gt;&lt;p&gt;`element(a|b)` vs `(element(a)|element(b))`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1581 created</title>
   <pubDate>Sun, 17 Nov 2024 19:32:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1581</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1581</guid>
   <description>&lt;div&gt;&lt;p&gt;69 Add default for current-merge-group $source&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I found that the two functions mentioned in the issue (document and function-available) had been updated as suggested. However I also checked all the XSLT-specific functions, and found that for current-merge-group(), the prose has been updated to say what happens if the argument is omitted, but the signature does not actually define a default. I have corrected this.&lt;/p&gt;
&lt;p&gt;Fix #69&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1035 closed</title>
   <pubDate>Sun, 17 Nov 2024 10:53:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1035</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1035</guid>
   <description>&lt;div&gt;&lt;p&gt;Add default values for parameters in constructor functions for records&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1580 created</title>
   <pubDate>Sun, 17 Nov 2024 10:43:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1580</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1580</guid>
   <description>&lt;div&gt;&lt;p&gt;1462 Change default for deep-equal options&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1579 created</title>
   <pubDate>Sun, 17 Nov 2024 06:01:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1579</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1579</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow $key in map:contains to be empty&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I wonder if we could relax the 3rd line of the current signature...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map:contains(
   $map	as map(*),	
   $key	as xs:anyAtomicType	
) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   $key	as xs:anyAtomicType?	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It hit me tonight, as I was running a lengthy operation, and some nulls were passed to &lt;code&gt;key&lt;/code&gt;. I expected the function to return false, not raise an error.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1578 created</title>
   <pubDate>Sat, 16 Nov 2024 17:23:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1578</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1578</guid>
   <description>&lt;div&gt;&lt;p&gt;1493 Expand the rules for handling numbers in xml-to-json&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have (a) added more explanation of why the conversion is needed, and (b) described the conversions more prescriptively.&lt;/p&gt;
&lt;p&gt;Fix #1493&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1577 created</title>
   <pubDate>Thu, 14 Nov 2024 22:43:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1577</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1577</guid>
   <description>&lt;div&gt;&lt;p&gt;1491 Empty record types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As well as allowing &lt;code&gt;record()&lt;/code&gt; for an empty record type as proposed in #1491, this PR also allows named record declarations in XQuery to have no fields. In the course of implementing this I discovered there was old text in the F&amp;amp;O "Constructors" section which duplicated but had become out of sync with the XQuery spec, so much of this has been deleted and replaced with a cross-reference. Named record definitions for XSLT have not yet been defined, this is unfinished business.&lt;/p&gt;
&lt;p&gt;Fix #1491&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1576 created</title>
   <pubDate>Thu, 14 Nov 2024 21:55:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1576</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1576</guid>
   <description>&lt;div&gt;&lt;p&gt;1574 Mark some productions as XQuery only&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Marks the relevant production rules as XQuery-only&lt;/p&gt;
&lt;p&gt;Fix #1574&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #529 closed</title>
   <pubDate>Thu, 14 Nov 2024 00:21:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/529</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-529</guid>
   <description>&lt;div&gt;&lt;p&gt;528 fn:elements-to-maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1575 created</title>
   <pubDate>Thu, 14 Nov 2024 00:20:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1575</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1575</guid>
   <description>&lt;div&gt;&lt;p&gt;528bis element to map&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Supersedes #529
Fix #528&lt;/p&gt;
&lt;p&gt;Coming back to this after a long gap, I have redrafted the proposal. I've tried to take as many of the comments into account as possible, but I'm aware that I haven't responded to them all.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1574 created</title>
   <pubDate>Wed, 13 Nov 2024 15:53:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1574</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1574</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar productions missing spec conditionality&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XPath grammar currently projects the following productions, which appear to be only relevant to XQuery, are not reachable from the &lt;code&gt;XPath&lt;/code&gt; root, and either lack an &lt;code&gt;if="xquery40"&lt;/code&gt; condition, or wrongly have &lt;code&gt;xpath40&lt;/code&gt; in the condition:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ExtendedFieldDeclaration&lt;/code&gt;, &lt;code&gt;ParamListWithDefaults&lt;/code&gt;,&lt;code&gt;ParamWithDefault&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In fact, the grammar doesn't allow default values for arguments of inline functions.  Is this the case?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1546 closed</title>
   <pubDate>Wed, 13 Nov 2024 00:42:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1546</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1546</guid>
   <description>&lt;div&gt;&lt;p&gt;1538 Add XSLT support for json-lines&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1538 closed</title>
   <pubDate>Wed, 13 Nov 2024 00:42:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1538</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1538</guid>
   <description>&lt;div&gt;&lt;p&gt;Add XSLT support for the new json-lines serialization option&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1573 created</title>
   <pubDate>Wed, 13 Nov 2024 00:35:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1573</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1573</guid>
   <description>&lt;div&gt;&lt;p&gt;1552 Change fn:siblings to include self in all cases&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1552&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1572 closed</title>
   <pubDate>Tue, 12 Nov 2024 18:05:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1572</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1572</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix markup error&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1572 created</title>
   <pubDate>Tue, 12 Nov 2024 18:04:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1572</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1572</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix markup error&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Merging allowed a &lt;code&gt;changes&lt;/code&gt; block to become split into two blocks, which isn't allowed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 098 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 12 Nov 2024 18:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/11-12</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-11-12</guid>
</item><item>
   <title>Issue #1449 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:50:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1449</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1449</guid>
   <description>&lt;div&gt;&lt;p&gt;Discussion: include/import of files.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1454 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:50:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1454</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1454</guid>
   <description>&lt;div&gt;&lt;p&gt;1449 Relax rules on multiple xsl:includes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1540 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:48:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1540</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1540</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: self-reference in global variables&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1544 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:48:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1544</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1544</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow (some) self-references in global variables&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1548 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:47:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1548</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1548</guid>
   <description>&lt;div&gt;&lt;p&gt;Managing indentation parameters for serialization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1560 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:47:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1560</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1560</guid>
   <description>&lt;div&gt;&lt;p&gt;1548 Clarify default for xsl:output/@indent&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #689 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:45:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/689</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-689</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:stack-trace: replace with $err:stack-trace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1470 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:45:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1470</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1470</guid>
   <description>&lt;div&gt;&lt;p&gt;689 fn:stack-trace: replace with $err:stack-trace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1555 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:42:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1555</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1555</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-json() - default for the `escape` option&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1565 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:42:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1565</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1565</guid>
   <description>&lt;div&gt;&lt;p&gt;1555 change default for parse json escape&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1486 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:38:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1486</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1486</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial corrections &amp;amp; cleanups&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1556 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:38:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1556</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1556</guid>
   <description>&lt;div&gt;&lt;p&gt;1486 Editorial corrections &amp;amp; cleanups&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1567 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:35:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1567</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1567</guid>
   <description>&lt;div&gt;&lt;p&gt;Missing change log entries&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1569 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:35:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1569</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1569</guid>
   <description>&lt;div&gt;&lt;p&gt;1567 Supply missing change metadata&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1571 created</title>
   <pubDate>Tue, 12 Nov 2024 17:35:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1571</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1571</guid>
   <description>&lt;div&gt;&lt;p&gt;Discussion: On the implementability of the specs and helping implementors&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;Functions and Operators&lt;/h2&gt;
&lt;p&gt;There are 4 classes of function here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;functions that have to be implemented natively -- e.g. &lt;code&gt;fn:parse-html&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;functions that are implemented in terms of native operations -- i.e. the &lt;code&gt;dm:*&lt;/code&gt; and &lt;code&gt;op:*&lt;/code&gt; functions;&lt;/li&gt;
&lt;li&gt;functions that can be implemented in XSLT or XQuery but can be done more efficiently natively;&lt;/li&gt;
&lt;li&gt;functions that can be implemented in XSLT or XQuery as efficiently as they can natively.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It could be useful to generate a function library of the form &lt;code&gt;namespace/function.xqy&lt;/code&gt; and &lt;code&gt;namespace/function.xsl&lt;/code&gt; that has the implementation of the functions that can be implemented in XSLT and XQuery. This would allow implementors to import/include those implementations into their processors/engines. -- This is more flexible than providing them all in a single file as implementors can include the functions they don't have implementations for without having to edit the files every time the spec changes.&lt;/p&gt;
&lt;p&gt;Note: JavaScript supports polyfill files for new classes/functions so that engines that don't support those features can get a functioning implementation of that function/class.&lt;/p&gt;
&lt;p&gt;Note: Many JavaScript engines implement various functions in JavaScript itself.&lt;/p&gt;
&lt;h2&gt;XPath and XQuery&lt;/h2&gt;
&lt;p&gt;We could make the EBNF available as a separate file in addition to the iXML grammar that has been discused/worked on. This would help implementors on the lexer and parser at least. There's not much else we can do here as the language is custom.&lt;/p&gt;
&lt;h2&gt;XSLT&lt;/h2&gt;
&lt;p&gt;We have the XMLSchema and RelaxNG grammars to help with validation. Implementors could use these in their build systems to provide API bindings to the data model.&lt;/p&gt;
&lt;h2&gt;XDM&lt;/h2&gt;
&lt;p&gt;We could provide the XDM/XPath specific XMLSchema extensions as a separate XMLSchema definition to allow implementors to get access to the type infomation for these such as for &lt;code&gt;xs:numeric&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1325 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:32:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1325</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1325</guid>
   <description>&lt;div&gt;&lt;p&gt;Variadic System Functions: Principles?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1478 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:32:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1478</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1478</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop variadic functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1535 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:32:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1535</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1535</guid>
   <description>&lt;div&gt;&lt;p&gt;1478 Drop variadic functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1463 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:29:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1463</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1463</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:element-number: Feedback&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1543 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:29:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1543</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1543</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop fn:element-number&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1534 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:26:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1534</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1534</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow xsl:result-document/@select&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1549 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:26:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1549</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1549</guid>
   <description>&lt;div&gt;&lt;p&gt;1534 Allow xsl:result-document/@select&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1553 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:23:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1553</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1553</guid>
   <description>&lt;div&gt;&lt;p&gt;Define positional predicates on axis steps more formally&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1557 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:23:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1557</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1557</guid>
   <description>&lt;div&gt;&lt;p&gt;1553 Expand explanation of predicates in axis steps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1522 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:20:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1522</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1522</guid>
   <description>&lt;div&gt;&lt;p&gt;Ambiguity in XSLT Pattern Grammar&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1558 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:20:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1558</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1558</guid>
   <description>&lt;div&gt;&lt;p&gt;1522 Fix syntax ambiguity in patterns&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1515 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:17:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1515</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1515</guid>
   <description>&lt;div&gt;&lt;p&gt;higher order function group-by or gather-by for grouping&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1559 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:17:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1559</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1559</guid>
   <description>&lt;div&gt;&lt;p&gt;1515 Add cross-references to map:build&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1561 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:11:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1561</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1561</guid>
   <description>&lt;div&gt;&lt;p&gt;schema-for-xslt40 is invalid&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1562 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:11:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1562</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1562</guid>
   <description>&lt;div&gt;&lt;p&gt;1561 Correct the schema for XSLT 4.0&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1563 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:08:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1563</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1563</guid>
   <description>&lt;div&gt;&lt;p&gt;Errors in examples of new fn:schema-type function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1564 closed</title>
   <pubDate>Tue, 12 Nov 2024 17:08:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1564</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1564</guid>
   <description>&lt;div&gt;&lt;p&gt;1563 Fix fn:schema-type examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1570 created</title>
   <pubDate>Tue, 12 Nov 2024 12:58:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1570</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1570</guid>
   <description>&lt;div&gt;&lt;p&gt;1550 Replace node-kind() with new type-of() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Drops the newly-introduced &lt;code&gt;fn:node-kind()&lt;/code&gt; function in favour of a more general function &lt;code&gt;fn:type-of()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1569 created</title>
   <pubDate>Tue, 12 Nov 2024 11:07:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1569</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1569</guid>
   <description>&lt;div&gt;&lt;p&gt;1567 Supply missing change metadata&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1567&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1568 created</title>
   <pubDate>Tue, 12 Nov 2024 10:17:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1568</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1568</guid>
   <description>&lt;div&gt;&lt;p&gt;Define a Unicode case-insensitive collation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Unfinished business from issue #668.&lt;/p&gt;
&lt;p&gt;Analogously to the current HTML case-insensitive collation (which case-normalises ASCII characters only), define a Unicode case-insensitive collation that case-normalizes all Unicode characters. It is basically equivalent to converting both strings to lower-case and then comparing using code-point collation. Although UCA collations allow for case-insensitivity, they combine this with lots of other baggage such as ignoring punctuation characters.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1567 created</title>
   <pubDate>Tue, 12 Nov 2024 09:43:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1567</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1567</guid>
   <description>&lt;div&gt;&lt;p&gt;Missing change log entries&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Some 4.0 changes have no entries in the change log.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1566 created</title>
   <pubDate>Tue, 12 Nov 2024 09:15:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1566</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1566</guid>
   <description>&lt;div&gt;&lt;p&gt;EXPath Modules: Future&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Would it be realistic to move the most important EXPath specifications (Binary, File, maybe other modules) to the W3 realm?&lt;/p&gt;
&lt;p&gt;Nowadays, it has become close to impossible to get into contact with Florent Georges reliably, and we have no guarantee that https://expath.org/ remains online.&lt;/p&gt;
&lt;p&gt;I would be ready to transform the File Module to a new format and to maintain it in the future.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 098 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 11 Nov 2024 10:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/11-12</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-11-12</guid>
</item><item>
   <title>Pull request #1565 created</title>
   <pubDate>Mon, 11 Nov 2024 00:51:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1565</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1565</guid>
   <description>&lt;div&gt;&lt;p&gt;1555 change default for parse json escape&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1555&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1564 created</title>
   <pubDate>Sun, 10 Nov 2024 16:40:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1564</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1564</guid>
   <description>&lt;div&gt;&lt;p&gt;1563 Fix fn:schema-type examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1563&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1563 created</title>
   <pubDate>Sun, 10 Nov 2024 16:35:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1563</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1563</guid>
   <description>&lt;div&gt;&lt;p&gt;Errors in examples of new fn:schema-type function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;primitive-type&lt;/code&gt; and &lt;code&gt;base-type&lt;/code&gt; are functions.&lt;/p&gt;
&lt;p&gt;The base type of &lt;code&gt;positiveInteger&lt;/code&gt; is &lt;code&gt;nonNegativeInteger&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1562 created</title>
   <pubDate>Sun, 10 Nov 2024 01:13:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1562</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1562</guid>
   <description>&lt;div&gt;&lt;p&gt;1561 Correct the schema for XSLT 4.0&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1561&lt;/p&gt;
&lt;p&gt;Test case catalog-005 now passes, showing that all the non-error stylesheets in the test suite are valid against the schema.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1561 created</title>
   <pubDate>Sun, 10 Nov 2024 00:04:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1561</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1561</guid>
   <description>&lt;div&gt;&lt;p&gt;schema-for-xslt40 is invalid&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The schema for XSLT 4.0 (included as a free-standing file and incorporated as an appendix) is not a valid schema.&lt;/p&gt;
&lt;p&gt;(a) The union type for the &lt;code&gt;fixed-namespaces&lt;/code&gt; attributes contains children of the form &lt;code&gt;&amp;lt;xs:simpleType ref=".."/&amp;gt;&lt;/code&gt; which though intuitive, is not allowed.&lt;/p&gt;
&lt;p&gt;(b) The first &lt;code&gt;xs:assert&lt;/code&gt; in the definition of &lt;code&gt;xsl:for-each-group&lt;/code&gt; has  misplaced parentheses in the call on &lt;code&gt;count()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addition, the schema needs some updates to catch up with the latest XSLT 4.0 syntax changes. The problems are revealed by XSLT 4.0 test case catalog-005.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1560 created</title>
   <pubDate>Sat, 9 Nov 2024 21:19:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1560</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1560</guid>
   <description>&lt;div&gt;&lt;p&gt;1548 Clarify default for xsl:output/@indent&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1548&lt;/p&gt;
&lt;p&gt;XSLT 3.0 specified no default for xsl:output/@indent in the case of the JSON and Adaptive output methods. This PR sets the default to "no".&lt;/p&gt;
&lt;p&gt;I believe this is sufficient to close #1548.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1348 closed</title>
   <pubDate>Sat, 9 Nov 2024 18:09:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1348</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1348</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar rules: redundancies&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1559 created</title>
   <pubDate>Sat, 9 Nov 2024 18:04:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1559</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1559</guid>
   <description>&lt;div&gt;&lt;p&gt;1515 Add cross-references to map:build&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Purely editorial; adds cross-references to map:build (for example from XSLT and XQuery grouping) to make the function more visible.&lt;/p&gt;
&lt;p&gt;@Fix #1515&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1558 created</title>
   <pubDate>Sat, 9 Nov 2024 17:18:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1558</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1558</guid>
   <description>&lt;div&gt;&lt;p&gt;1522 Fix syntax ambiguity in patterns&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1522&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1557 created</title>
   <pubDate>Sat, 9 Nov 2024 00:21:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1557</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1557</guid>
   <description>&lt;div&gt;&lt;p&gt;1553 Expand explanation of predicates in axis steps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Purely editorial.&lt;/p&gt;
&lt;p&gt;Fix #1553&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1556 created</title>
   <pubDate>Thu, 7 Nov 2024 13:25:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1556</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1556</guid>
   <description>&lt;div&gt;&lt;p&gt;1486 Editorial corrections &amp;amp; cleanups&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1486&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1555 created</title>
   <pubDate>Thu, 7 Nov 2024 12:32:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1555</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1555</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-json() - default for the `escape` option&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See https://github.com/w3c/qt3tests/issues/65&lt;/p&gt;
&lt;p&gt;where it is pointed out that we have test cases that assume the default for the &lt;code&gt;escape&lt;/code&gt; option of parse-json() is &lt;code&gt;false&lt;/code&gt;, whereas the spec says it should be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Saxon implementation (and presumably any other implementation that passes the tests) sets the default to &lt;code&gt;false&lt;/code&gt;, and if we were arguing from first principles then I think I would argue this is a better choice.&lt;/p&gt;
&lt;p&gt;We need either to change the tests or to change the spec. Since we can't change the 3.1 spec retrospectively, neither choice is particularly attractive.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1554 created</title>
   <pubDate>Thu, 7 Nov 2024 09:49:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1554</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1554</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Formal Specification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the XQFO, the “Formal Specification” sections present XPath/XQuery expressions that are equivalent to the introduced function.&lt;/p&gt;
&lt;p&gt;In a previous meeting, it has been noted that “Equivalent Expression” may be a better term for these sections.&lt;/p&gt;
&lt;p&gt;Would it be sufficient to simply rename the section, and adapt the wording in &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#id-function-signatures-formal-specification"&gt;1.5.5 Formal Specification&lt;/a&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1553 created</title>
   <pubDate>Wed, 6 Nov 2024 10:46:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1553</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1553</guid>
   <description>&lt;div&gt;&lt;p&gt;Define positional predicates on axis steps more formally&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The effect of positional predicates on axis steps (for example &lt;code&gt;preceding-sibling::*[1]&lt;/code&gt;) is an area that causes users a lot of trouble. We could provide a more formal definition, and we could also provide more notes and examples.&lt;/p&gt;
&lt;p&gt;In particular, we haven't expanded the notes and examples to explain what happens when you have a range of integers such as &lt;code&gt;preceding-sibling::*[1 to 3]&lt;/code&gt;, which is now allowed. (Spoiler alert: if the siblings are A B C D E, you get C D E in that order).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1552 created</title>
   <pubDate>Wed, 6 Nov 2024 10:37:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1552</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1552</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:siblings() on parentless nodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It feels rather odd that the result of &lt;code&gt;fn:siblings()&lt;/code&gt; should include the argument node, except when it is parentless.&lt;/p&gt;
&lt;p&gt;If fn:siblings were defined as &lt;code&gt;preceding-sibling::node() | self::node() | following-sibling::node()&lt;/code&gt;, then the start node would be included even if it is parentless -- and even if it is an attribute or namespace node.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1551 closed</title>
   <pubDate>Wed, 6 Nov 2024 09:23:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1551</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1551</guid>
   <description>&lt;div&gt;&lt;p&gt;Correct return type for fn:siblings&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1551 created</title>
   <pubDate>Wed, 6 Nov 2024 09:23:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1551</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1551</guid>
   <description>&lt;div&gt;&lt;p&gt;Correct return type for fn:siblings&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As noted during the review at yesterday's meeting. (I was supposed to correct it before applying the PR, but pressed the wrong key...)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1550 created</title>
   <pubDate>Tue, 5 Nov 2024 20:45:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1550</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1550</guid>
   <description>&lt;div&gt;&lt;p&gt;More requirements for type information&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See original issue #148.&lt;/p&gt;
&lt;p&gt;There have been requests for further type information beyond that supplied by the four new functions&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node-kind()
atomic-type-annotation()
node-type-annotation()
schema-type()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the requests was to be able to test if an item is a map, and array, some other function, a node, or an atomic value.&lt;/p&gt;
&lt;p&gt;This could perhaps be done by broadening node-kind() to a function item-kind() that returns "map" for a map, "array" for an array, etc. We could also return the result in item-type syntax, say &lt;code&gt;map(*)&lt;/code&gt; or &lt;code&gt;array(*)&lt;/code&gt; or &lt;code&gt;function(*)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What else is needed?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1539 closed</title>
   <pubDate>Tue, 5 Nov 2024 20:18:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1539</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1539</guid>
   <description>&lt;div&gt;&lt;p&gt;New function: System’s default time zone for arbitrary date/time values.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1545 closed</title>
   <pubDate>Tue, 5 Nov 2024 20:18:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1545</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1545</guid>
   <description>&lt;div&gt;&lt;p&gt;1539 New civil-timezone function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1542 closed</title>
   <pubDate>Tue, 5 Nov 2024 18:07:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1542</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1542</guid>
   <description>&lt;div&gt;&lt;p&gt;Formalize definitions of axes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1547 closed</title>
   <pubDate>Tue, 5 Nov 2024 18:07:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1547</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1547</guid>
   <description>&lt;div&gt;&lt;p&gt;1542 Add "formal" definitions of non-primitive axes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 097 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 5 Nov 2024 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/11-05</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-11-05</guid>
</item><item>
   <title>Issue #148 closed</title>
   <pubDate>Tue, 5 Nov 2024 17:12:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/148</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-148</guid>
   <description>&lt;div&gt;&lt;p&gt;Get the type of a value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1523 closed</title>
   <pubDate>Tue, 5 Nov 2024 17:12:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1523</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1523</guid>
   <description>&lt;div&gt;&lt;p&gt;148 New functions to get type information&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1541 closed</title>
   <pubDate>Tue, 5 Nov 2024 17:11:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1541</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1541</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-096-1 Add notes explaining EBNF notation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1549 created</title>
   <pubDate>Mon, 4 Nov 2024 11:37:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1549</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1549</guid>
   <description>&lt;div&gt;&lt;p&gt;1534 Allow xsl:result-document/@select&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1534&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 097 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 4 Nov 2024 10:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/11-05</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-11-05</guid>
</item><item>
   <title>Issue #1548 created</title>
   <pubDate>Mon, 4 Nov 2024 10:29:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1548</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1548</guid>
   <description>&lt;div&gt;&lt;p&gt;Managing indentation parameters for serialization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the &lt;a href="https://qt4cg.org/meeting/minutes/2024/10-29.html#pr-1497"&gt;discussion&lt;/a&gt; of PR #1497 at &lt;a href="https://qt4cg.org/meeting/minutes/2024/10-29.html"&gt;meeting 096&lt;/a&gt;, some concern was expressed that the default value for indentation might be problematic in testing.&lt;/p&gt;
&lt;p&gt;It was observed that all of the serialization parameter settings are defined by the host language, not by the serialization specification, but that did not resolve the concerns.&lt;/p&gt;
&lt;p&gt;Can we/should we/would we mandate that indentation is disabled by default? (Is that not already the case in XQuery and XSLT?)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1547 created</title>
   <pubDate>Fri, 1 Nov 2024 17:15:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1547</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1547</guid>
   <description>&lt;div&gt;&lt;p&gt;1542 Add "formal" definitions of non-primitive axes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1542&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1546 created</title>
   <pubDate>Fri, 1 Nov 2024 16:03:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1546</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1546</guid>
   <description>&lt;div&gt;&lt;p&gt;1538 Add XSLT support for json-lines&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1538&lt;/p&gt;
&lt;p&gt;I also did some editorial cleanup of the serialization spec, in particular parameters like &lt;code&gt;indent&lt;/code&gt; now have the value &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, while recognizing that some host languages may allow alternative representations such as yes/no or 1/0.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1545 created</title>
   <pubDate>Fri, 1 Nov 2024 13:47:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1545</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1545</guid>
   <description>&lt;div&gt;&lt;p&gt;1539 New civil-timezone function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1539&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1544 created</title>
   <pubDate>Fri, 1 Nov 2024 10:28:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1544</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1544</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow (some) self-references in global variables&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1540&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1543 created</title>
   <pubDate>Fri, 1 Nov 2024 09:56:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1543</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1543</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop fn:element-number&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1463&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1542 created</title>
   <pubDate>Wed, 30 Oct 2024 22:15:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1542</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1542</guid>
   <description>&lt;div&gt;&lt;p&gt;Formalize definitions of axes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It would be good if the definitions of the various axes were less informal.&lt;/p&gt;
&lt;p&gt;The four axes children, parent, attribute, and namespace are defined directly in terms of data model accessors.&lt;/p&gt;
&lt;p&gt;The remaining axes can be defined as follows, where axis names are used as functions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;self($node): $node
ancestor($node):  transitive-closure($node, parent#1)
ancestor-or-self($node): ancestor($node) | $node
descendant($node): transitive-closure($node, child#1)
descendant-or-self($node): descendant($node) ! $node
following($node): $node / ancestor-or-self() / following-sibling() / descendant-or-self()
following-or-self($node): following($node) | $node
following-sibling($node): parent() / child() [. &amp;gt;&amp;gt; $node]
following-sibling-or-self($node): following-sibling($node) | $node
preceding($node): $node =&amp;gt; ancestor-or-self() / preceding-sibling() / descendant-or-self()
preceding-or-self($node): preceding($node) | $node
preceding-sibling($node): parent() / child() [. &amp;lt;&amp;lt; $node]
preceding-sibling-or-self($node): preceding-sibling($node) | $node
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1541 created</title>
   <pubDate>Wed, 30 Oct 2024 18:49:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1541</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1541</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-096-1 Add notes explaining EBNF notation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1500 closed</title>
   <pubDate>Wed, 30 Oct 2024 17:56:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1500</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1500</guid>
   <description>&lt;div&gt;&lt;p&gt;Coupling of global variable-bound maps to character maps in XSLT &lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1530 closed</title>
   <pubDate>Wed, 30 Oct 2024 17:56:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1530</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1530</guid>
   <description>&lt;div&gt;&lt;p&gt;1500 New XSLT character-map() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1540 created</title>
   <pubDate>Wed, 30 Oct 2024 16:04:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1540</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1540</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: self-reference in global variables&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We should change the rules for XSLT global variables to align with the new rules for XQuery.&lt;/p&gt;
&lt;p&gt;Specifically, drop the rule that a global variable is out of scope within its own definition, falling back on the existing circularity rules to disallow cases where the reference is genuinely circular.&lt;/p&gt;
&lt;p&gt;The effect would be to allow a global variable to be bound to a recursive inline function, for example (nonsense example)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:variable name="tot" select="fn($x){if ($x=0) then 0 else $tot($x - 1) + 2"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1471 closed</title>
   <pubDate>Tue, 29 Oct 2024 18:38:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1471</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1471</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON Serialization: Sequences on Top Level&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1497 closed</title>
   <pubDate>Tue, 29 Oct 2024 18:38:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1497</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1497</guid>
   <description>&lt;div&gt;&lt;p&gt;1471 JSON Serialization: json-lines&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1539 created</title>
   <pubDate>Tue, 29 Oct 2024 18:38:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1539</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1539</guid>
   <description>&lt;div&gt;&lt;p&gt;New function: System’s default time zone for arbitrary date/time values.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It is not easy to find out the correct timezone for a given UTC &lt;code&gt;xs:dateTime&lt;/code&gt; in the current region. We have &lt;code&gt;fn:implicit-timezone&lt;/code&gt;, but it only refers to the current date and time.&lt;/p&gt;
&lt;p&gt;The following code works for at least BaseX and Saxon; it applies the system’s default time zone to a given &lt;code&gt;xs:dateTime&lt;/code&gt; item:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $dtm := xs:dateTime('2024-07-01T01:01:01Z')
let $ms := xs:integer(($dtm - xs:dateTime('1970-01-01T00:00:00Z')) div xs:dayTimeDuration('PT0.001S'))
let $tz := xs:dayTimeDuration('PT' ||
  Q{java:java.time.ZonedDateTime}ofInstant(
    Q{java:java.time.Instant}ofEpochMilli($ms),
    Q{java:java.time.ZoneId}systemDefault()
  )
  =&amp;gt; Q{java:java.time.ZonedDateTime}getOffset()
  =&amp;gt; Q{java:java.time.ZoneOffset}getTotalSeconds()|| 'S')
return adjust-dateTime-to-timezone($dtm, $tz)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It returns &lt;code&gt;2024-07-01T03:01:01+02:00&lt;/code&gt; (MESZ) on systems located in Leipzig and nearby cities.&lt;/p&gt;
&lt;p&gt;We could either introduce a function that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;returns an &lt;code&gt;xs:dayTimeDuration&lt;/code&gt; timezone for a given &lt;code&gt;xs:dateTime&lt;/code&gt; item (with the system’s default time zone applied), or&lt;/li&gt;
&lt;li&gt;converts an &lt;code&gt;xs:dateTime&lt;/code&gt; item to the system’s default time zone at the given date/time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Suggestions for good names are welcome.&lt;/p&gt;
&lt;p&gt;See also https://xmlcom.slack.com/archives/C01GVC3JLHE/p1730216267200449:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1536 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:45:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1536</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1536</guid>
   <description>&lt;div&gt;&lt;p&gt;document-uri of xslt transformation primary output&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 096 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 29 Oct 2024 16:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/10-29</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-10-29</guid>
</item><item>
   <title>Issue #1366 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:29:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1366</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1366</guid>
   <description>&lt;div&gt;&lt;p&gt;In the EBNF, use explicit separator syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1498 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:29:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1498</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1498</guid>
   <description>&lt;div&gt;&lt;p&gt;1366 Use ++ and ** operators in EBNF&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #868 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:27:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/868</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-868</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:intersperse → fn:join, array:join($arrays, $separator)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1504 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:27:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1504</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1504</guid>
   <description>&lt;div&gt;&lt;p&gt;868 fn:intersperse → fn:join, array:join($arrays, $separator)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1318 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:24:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1318</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1318</guid>
   <description>&lt;div&gt;&lt;p&gt;Function Coercion: Records, Maps, Arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1501 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:24:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1501</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1501</guid>
   <description>&lt;div&gt;&lt;p&gt;1318 Function Coercion: Records, Maps, Arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1495 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:21:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1495</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1495</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop "context value static type"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1496 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:21:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1496</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1496</guid>
   <description>&lt;div&gt;&lt;p&gt;1495 Drop context value static type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1519 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:17:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1519</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1519</guid>
   <description>&lt;div&gt;&lt;p&gt;Add `-or-self` variants of all relevant axes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1532 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:17:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1532</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1532</guid>
   <description>&lt;div&gt;&lt;p&gt;1519 Add -or-self axes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1525 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:14:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1525</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1525</guid>
   <description>&lt;div&gt;&lt;p&gt;Add more explanation on enumeration types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1529 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:14:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1529</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1529</guid>
   <description>&lt;div&gt;&lt;p&gt;1525 Add notes on enumeration types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1499 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:12:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1499</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1499</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: reduce noise in serialization spec for unused options&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1531 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:12:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1531</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1531</guid>
   <description>&lt;div&gt;&lt;p&gt;1499 Deduplicate text relating to unused serialization parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1533 closed</title>
   <pubDate>Tue, 29 Oct 2024 17:08:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1533</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1533</guid>
   <description>&lt;div&gt;&lt;p&gt;Actions QT4CG-095-01 and -02 - follow-up on computed node constructors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1538 created</title>
   <pubDate>Tue, 29 Oct 2024 15:50:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1538</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1538</guid>
   <description>&lt;div&gt;&lt;p&gt;Add XSLT support for the new json-lines serialization option&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add XSLT support for the new json-lines serialization option (PR #1497)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1537 created</title>
   <pubDate>Tue, 29 Oct 2024 11:07:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1537</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1537</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: local functions within an enclosing xsl:mode&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I recently wrote a multi-phase transformation and tried out the new "enclosing modes" feature where the template rules for a mode are enclosed within the &lt;code&gt;xsl:mode&lt;/code&gt; element. Worked very well, and really helps to give the stylesheet a more modular structure. But I found myself wanting to write "helper" functions within the &lt;code&gt;xsl:mode&lt;/code&gt; definition.&lt;/p&gt;
&lt;p&gt;I don't think it would too difficult to add this feature. I imagine that such functions would be scoped to the enclosing xsl:mode, and would automatically have higher import precedence than anything outside the mode. There are probably a few complications e.g. if the arity range overlaps a function with the same name declared outside the enclosed mode, but I would think it's manageable.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1536 created</title>
   <pubDate>Tue, 29 Oct 2024 04:03:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1536</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1536</guid>
   <description>&lt;div&gt;&lt;p&gt;document-uri of xslt transformation primary output&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When using XSLT transformations, it would be helpful in many cases to know the transformation target, that is the base-uri of the primary result document. This would allow, for example,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to make the uri of secondary result documents relative to the primary base-uri to ensure that all output is in the same target directory&lt;/li&gt;
&lt;li&gt;to copy media files from transformation source directory into transformation target directory&lt;/li&gt;
&lt;li&gt;to generate a transformation report as secondary output, which informs and links to the primary result document&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am pretty sure that there are situations where the URI of the primary result document is undefined or unknown. The XPath function &lt;code&gt;fn:document-uri&lt;/code&gt; is decribed as "Returns the URI of a resource where a document can be found, if available.". So maybe we could have a new function &lt;code&gt;fn:primary-result-document-uri&lt;/code&gt; as "Returns the URI of the primary result document, if available.".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1535 created</title>
   <pubDate>Mon, 28 Oct 2024 18:37:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1535</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1535</guid>
   <description>&lt;div&gt;&lt;p&gt;1478 Drop variadic functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1478
Fix #1325&lt;/p&gt;
&lt;p&gt;This PR drops variadic functions, reverting to the situation in previous versions where concat was in a special category of its own.&lt;/p&gt;
&lt;p&gt;We decided (see the referenced issues) not to introduce further variadic system functions, mainly in the interests of extensibility, and the same argument apply to user-defined functions.&lt;/p&gt;
&lt;p&gt;It is not a great hardship to write &lt;code&gt;f((x, y, z))&lt;/code&gt; rather than &lt;code&gt;f(x, y, z)&lt;/code&gt; and dropping the feature therefore removes a fair bit of complexity that has proved to be of rather limited value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 096 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 28 Oct 2024 10:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/10-29</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-10-29</guid>
</item><item>
   <title>Issue #1534 created</title>
   <pubDate>Mon, 28 Oct 2024 10:03:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1534</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1534</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow xsl:result-document/@select&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Nearly all XSLT instructions that accept a sequence constructor also allow the input to be supplied using a select expression.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xsl:result-document&lt;/code&gt; is an exception.&lt;/p&gt;
&lt;p&gt;A particular use case for this is with a multi-phase transformation where you want to capture the result of the first phase of processing in a variable, and then output it before further processing, perhaps for diagnostics or perhaps because the processing pipeline branches.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1533 created</title>
   <pubDate>Sun, 27 Oct 2024 19:42:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1533</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1533</guid>
   <description>&lt;div&gt;&lt;p&gt;Actions QT4CG-095-01 and -02 - follow-up on computed node constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Adds advice and guidance on avoiding reserved words&lt;/li&gt;
&lt;li&gt;Drops XQuery-specific material from the XPath spec&lt;/li&gt;
&lt;li&gt;Adds a paragraph to the incompatibilities appendix&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1532 created</title>
   <pubDate>Fri, 25 Oct 2024 12:03:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1532</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1532</guid>
   <description>&lt;div&gt;&lt;p&gt;1519 Add -or-self axes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1519&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1531 created</title>
   <pubDate>Fri, 25 Oct 2024 11:12:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1531</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1531</guid>
   <description>&lt;div&gt;&lt;p&gt;1499 Deduplicate text relating to unused serialization parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1499&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1530 created</title>
   <pubDate>Fri, 25 Oct 2024 10:32:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1530</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1530</guid>
   <description>&lt;div&gt;&lt;p&gt;1500 New XSLT character-map() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1500&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1529 created</title>
   <pubDate>Fri, 25 Oct 2024 09:16:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1529</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1529</guid>
   <description>&lt;div&gt;&lt;p&gt;1525 Add notes on enumeration types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1525&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1528 created</title>
   <pubDate>Thu, 24 Oct 2024 07:25:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1528</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1528</guid>
   <description>&lt;div&gt;&lt;p&gt;Computed node constructors: observations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Observations/conclusions from the exchange on &lt;a href="https://xmlcom.slack.com/archives/C01GVC3JLHE/p1729683669891659"&gt;Slack&lt;/a&gt; regarding computed node constructors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We should highlight the breaking change in the appendix: J.1 Incompatibilities relative to XQuery 3.1.&lt;/li&gt;
&lt;li&gt;We should present a list of keywords which is ambiguous and exclude other ones (like e.g. &lt;code&gt;count&lt;/code&gt; or &lt;code&gt;value&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Maybe we should generally discourage users from using the legacy NCName syntax, and remove corresponding examples in the spec, as further versions of the language may lead to new incompatibilities.&lt;/li&gt;
&lt;li&gt;Syntax errors in quoted element names were should already be detected at parse time, for example by using pseudo quotes:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# currently
CompNodeName    ::=  StringLiteral | UnreservedName | ("{" Expr "}")
CompNodeNCName  ::=  StringLiteral | UnreservedNCName | ("{" Expr "}")
# proposed
CompNodeName    ::=  UnreservedName | ('"' UnreservedName '"') | ("'" UnreservedName "'") | ("{" Expr "}")
CompNodeNCName  ::=  UnreservedNCName | ('"' UnreservedNCName '"') | ("'" UnreservedNCName "'") | ("{" Expr "}")
&lt;/code&gt;&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;A quick evaluation over appr. 8,000 XQuery files resulted in the following list of occurrences of possible incompatibilities (spread across  appr. 400 files):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;300x &lt;code&gt;attribute type {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;107x &lt;code&gt;element option {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;98x &lt;code&gt;element record {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;85x &lt;code&gt;attribute count {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;81x &lt;code&gt;attribute value {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;31x &lt;code&gt;element value {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;24x &lt;code&gt;element type {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;18x &lt;code&gt;attribute text {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;15x &lt;code&gt;attribute values {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;12x &lt;code&gt;attribute namespace {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;11x &lt;code&gt;attribute default {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;10x &lt;code&gt;element text {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;10x &lt;code&gt;attribute key {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;10x &lt;code&gt;element key {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;9x &lt;code&gt;element group {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;9x &lt;code&gt;element count {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;8x &lt;code&gt;element to {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;8x &lt;code&gt;element item {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;5x &lt;code&gt;element div {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4x &lt;code&gt;attribute collation {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4x &lt;code&gt;attribute encoding {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4x &lt;code&gt;attribute comment {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3x &lt;code&gt;attribute context {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3x &lt;code&gt;attribute case {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3x &lt;code&gt;element map {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3x &lt;code&gt;element empty {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;code&gt;element items {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;code&gt;attribute to {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1x &lt;code&gt;attribute empty {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1x &lt;code&gt;attribute item {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1x &lt;code&gt;element element {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1x &lt;code&gt;attribute where {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1x &lt;code&gt;element values {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1x &lt;code&gt;attribute if {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1x &lt;code&gt;element in {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1x &lt;code&gt;element comment {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1x &lt;code&gt;attribute start {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1x &lt;code&gt;attribute end {&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1x &lt;code&gt;element document {&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1527 created</title>
   <pubDate>Wed, 23 Oct 2024 13:59:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1527</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1527</guid>
   <description>&lt;div&gt;&lt;p&gt;Rendition of record definitions in F&amp;amp;O spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We're making progress here but there are still things that need fixing.&lt;/p&gt;
&lt;p&gt;Currently a record definition like uri-structure-record is expanded:&lt;/p&gt;
&lt;p&gt;(a) into a full definition (with explanations of all the fields) at the point where a PI of the form &lt;code&gt;&amp;lt;?record-description uri-structure-record?&amp;gt;&lt;/code&gt;appears. This may be either within a specific function entry in the function catalog, or in the narrative prose of xpath-functions.xml.&lt;/p&gt;
&lt;p&gt;(b) into a concise definition (without explanations of fields) at the point where the type is referenced in a function signature.&lt;/p&gt;
&lt;p&gt;A hyperlink to the record definition is created (i) where the type name appears in a function signature, and (ii) manually, using the generic link format &lt;code&gt;&amp;lt;loc href="#uri-structure-record"&amp;gt;uri-structure-record&amp;lt;/loc&amp;gt;&lt;/code&gt;. However, the target of the link is the first concise definition (see (b) above) rather than the full definition.&lt;/p&gt;
&lt;p&gt;There are also some limitations in the rendering of the definitions. The full definition does not indicate which fields are optional/required, though this information is available in the XML. Neither the full nor the concise definition appears to indicate whether the record is extensible.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1526 closed</title>
   <pubDate>Wed, 23 Oct 2024 11:39:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1526</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1526</guid>
   <description>&lt;div&gt;&lt;p&gt;Emergency fix to test generator stylesheet&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1526 created</title>
   <pubDate>Wed, 23 Oct 2024 11:38:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1526</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1526</guid>
   <description>&lt;div&gt;&lt;p&gt;Emergency fix to test generator stylesheet&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There's a parse-xml() call in the test generator stylesheet that's failing to process some of the test examples, for reasons that aren't entirely clear. This is causing the entire build to fail. This PR adds a try/catch around the parse-xml() call so that a failure only affects the individual tests, not the entire build.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1525 created</title>
   <pubDate>Wed, 23 Oct 2024 07:01:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1525</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1525</guid>
   <description>&lt;div&gt;&lt;p&gt;Add more explanation on enumeration types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In 3.2.6 Enumeration Types we already have some explanation of how enumeration types work, and I think it's sound, but I think a few more words about the consequences might be useful.&lt;/p&gt;
&lt;p&gt;We note correctly that &lt;code&gt;'red' instance of enum('red', 'green', 'blue')&lt;/code&gt; is false.&lt;/p&gt;
&lt;p&gt;We should also note that &lt;code&gt;let $red as enum('red', 'green', 'blue', 'yellow') := "red" return $red instance of enum('red', 'green', 'blue')&lt;/code&gt; is true; and indeed that a string S that is cast or coerced to any enumeration type that permits S is an instance of every enumeration type that permits S. This is a conscious design decision that has both advantages and disadvantages, so we should explain the consequences carefully.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1524 closed</title>
   <pubDate>Tue, 22 Oct 2024 17:43:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1524</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1524</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercing records: error codes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 095 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 22 Oct 2024 16:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/10-22</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-10-22</guid>
</item><item>
   <title>Issue #1524 created</title>
   <pubDate>Tue, 22 Oct 2024 16:58:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1524</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1524</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercing records: error codes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;By analysing the coercion rules for complex data structures (see the discussion in #1501), I wondered which error codes, apart from &lt;code&gt;XPTY0004&lt;/code&gt;, may arise from the coercion of records.&lt;/p&gt;
&lt;p&gt;If we attempt to coerce a function item to a string, we get &lt;code&gt;FOTY0013&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $r as xs:string := true#0
return $r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would expect to also get &lt;code&gt;FOTY0013&lt;/code&gt; if a map value, which is a function item, is coerced to a string. Is this correct? If not, how does this case differ from the first one?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $r as record(a as xs:string) := { 'a': true#0 }
return $r
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1518 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:27:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1518</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1518</guid>
   <description>&lt;div&gt;&lt;p&gt;Add to changes metadata&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1517 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:24:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1517</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1517</guid>
   <description>&lt;div&gt;&lt;p&gt;1516(A) Fix failing F&amp;amp;O examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1509 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:22:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1509</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1509</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery import schema (location hints)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1510 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:22:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1510</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1510</guid>
   <description>&lt;div&gt;&lt;p&gt;1509 Drop obsolete/redundant text about "import schema" location hints&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1507 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:17:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1507</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1507</guid>
   <description>&lt;div&gt;&lt;p&gt;Formal spec of fn:parse-integer&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1508 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:17:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1508</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1508</guid>
   <description>&lt;div&gt;&lt;p&gt;1507 Make format-integer spec legible&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1357 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:15:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1357</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1357</guid>
   <description>&lt;div&gt;&lt;p&gt;Rendering of new vs. updated features&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1521 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:15:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1521</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1521</guid>
   <description>&lt;div&gt;&lt;p&gt;Update the changed/new marks in the ToC&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1345 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:14:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1345</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1345</guid>
   <description>&lt;div&gt;&lt;p&gt;Bare brace ambiguity resolution in practice&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1511 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:14:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1511</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1511</guid>
   <description>&lt;div&gt;&lt;p&gt;1345 Re-allow bare-brace map constructors everywhere&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1179 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:12:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1179</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1179</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: `array:values`, `map:values`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1169 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:12:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1169</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1169</guid>
   <description>&lt;div&gt;&lt;p&gt;Maps &amp;amp; Arrays: Consistency &amp;amp; Terminology&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1114 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:12:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1114</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1114</guid>
   <description>&lt;div&gt;&lt;p&gt;Partial function application: Keywords and placeholders&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1065 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:12:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1065</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1065</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-number: further notes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #735 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:12:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/735</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-735</guid>
   <description>&lt;div&gt;&lt;p&gt;Local functions in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #573 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:12:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/573</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-573</guid>
   <description>&lt;div&gt;&lt;p&gt;Node construction functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1512 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:11:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1512</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1512</guid>
   <description>&lt;div&gt;&lt;p&gt;Disallow reserved names in computed processing-instruction and namespace node constructors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1513 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:11:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1513</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1513</guid>
   <description>&lt;div&gt;&lt;p&gt;1512 Disallow reserved names in namespace and PI constructors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1458 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:08:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1458</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1458</guid>
   <description>&lt;div&gt;&lt;p&gt;Arguments that have a default value but don't accept ()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1502 closed</title>
   <pubDate>Tue, 22 Oct 2024 16:08:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1502</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1502</guid>
   <description>&lt;div&gt;&lt;p&gt;1458 Arguments that have a default value but don't accept ()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1523 created</title>
   <pubDate>Tue, 22 Oct 2024 11:33:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1523</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1523</guid>
   <description>&lt;div&gt;&lt;p&gt;148 New functions to get type information&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Provides four new functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node-kind&lt;/li&gt;
&lt;li&gt;schema-type&lt;/li&gt;
&lt;li&gt;atomic-type-annotation&lt;/li&gt;
&lt;li&gt;node-type-annotation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to return type information using a new record structure schema-record-type.&lt;/p&gt;
&lt;p&gt;Fix #148
Partial Fix for #1271&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1522 created</title>
   <pubDate>Mon, 21 Oct 2024 16:42:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1522</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1522</guid>
   <description>&lt;div&gt;&lt;p&gt;Ambiguity in XSLT Pattern Grammar&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've tested the grammar against the ~500 distinct patterns in the stylesheets of the &lt;code&gt;attr/match&lt;/code&gt; test sets (which is the largest collection I can find). As far as I can tell, there is one ambiguity inherent in the current grammar, which is not covered by notes, in that the pattern&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;id()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(and similar for &lt;code&gt;element-with-id()&lt;/code&gt;, &lt;code&gt;key()&lt;/code&gt; and &lt;code&gt;root()&lt;/code&gt;) can parse (in reduced form) in two ways:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Pattern40 xmlns:ixml="http://invisiblexml.org/NS" ixml:state="ambiguous"&amp;gt;
   &amp;lt;RootedPath&amp;gt;
      &amp;lt;FunctionCallP&amp;gt;
         &amp;lt;OuterFunctionName&amp;gt;id&amp;lt;/OuterFunctionName&amp;gt;
         &amp;lt;ArgumentListP/&amp;gt;
      &amp;lt;/FunctionCallP&amp;gt;
   &amp;lt;/RootedPath&amp;gt;
&amp;lt;/Pattern40&amp;gt;
&amp;lt;Pattern40 xmlns:ixml="http://invisiblexml.org/NS" ixml:state="ambiguous"&amp;gt;
   &amp;lt;PostfixExprP&amp;gt;
      &amp;lt;FunctionCallP&amp;gt;
         &amp;lt;OuterFunctionName&amp;gt;id&amp;lt;/OuterFunctionName&amp;gt;
         &amp;lt;ArgumentListP/&amp;gt;
      &amp;lt;/FunctionCallP&amp;gt;
   &amp;lt;/PostfixExprP&amp;gt;
&amp;lt;/Pattern40&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;that is, there are two paths, via &lt;code&gt;RootedPath&lt;/code&gt; and &lt;code&gt;RelativePathExprP/StepExprP/PostfixExprP&lt;/code&gt; to get from &lt;code&gt;PathExprP&lt;/code&gt; to &lt;code&gt;FunctionCallP&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1521 created</title>
   <pubDate>Mon, 21 Oct 2024 14:29:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1521</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1521</guid>
   <description>&lt;div&gt;&lt;p&gt;Update the changed/new marks in the ToC&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1357&lt;/p&gt;
&lt;p&gt;This is a purely cosmetic PR. I think @ChristianGruen is right that it is unfortunate that we've lost the distinction between "new" and "only updated" functions. I'm trying to make that work again, in a way that's more visually distinct.&lt;/p&gt;
&lt;p&gt;I have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;Δ&lt;/code&gt; for changed sections.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Δ➕&lt;/code&gt; for new functions. (I'm making no effort to determine if non-function sections are new or changed; I doubt that it's either worth the effort or likely to be correct. One could argue that &lt;code&gt;➕&lt;/code&gt; alone is sufficient, but I liked the consistency this way. Even new functions do change between drafts.)&lt;/li&gt;
&lt;li&gt;Per @michaelhkay, a function is "new" if it doesn't appear on F&amp;amp;O 3.1.&lt;/li&gt;
&lt;li&gt;I found it distracting that the delta symbol preceded the ToC entry. That's purely aesthetic, I guess, but I've put them at the end.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can see the results here: https://qt4cgtest.nwalsh.com/branch/iss-1357/xpath-functions-40/Overview.html&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1520 created</title>
   <pubDate>Mon, 21 Oct 2024 13:58:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1520</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1520</guid>
   <description>&lt;div&gt;&lt;p&gt;Type declarations of cyclically dependent modules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specification of &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-item-type-declaration"&gt;Item Type Declarations&lt;/a&gt; has this restriction:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The declaration of an item type (whether locally declared in a module or imported from a public declaration in an imported module) must precede any use of the item type name: that is, the name only becomes available in the static context of constructs that lexically follow the relevant item type declaration or module import. A consequence of this rule is that cyclic and self-referential definitions are not allowed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But modules explicitly are allowed to have &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-module-handling-cycles"&gt;cyclic dependencies&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Implementations must resolve cycles in the import graph, either at the level of target namespace URIs or at the level of location URIs, and ensure that each module is imported only once.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Does that mean that the modules below are valid? They depend on each other, but the types that they define do not have a cyclic dependency. In particular, the use of each type lexically follows the relevant module import, as asked for.&lt;/p&gt;
&lt;p&gt;If this case must be supported, the usefulness of the above restriction for XQuery processors is somewhat limited, IMO it compromises &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-item-type-declaration"&gt;this suggestion&lt;/a&gt; for handling declared types:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Named item types have been designed so that a reference to an item type name can be expanded (that is, replaced by its definition) as soon as the reference is encountered during query parsing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: a.xqm :)
module namespace a = 'a';
import module namespace b = 'b' at 'b.xqm';
declare type a:t1 as b:t2;
declare type a:t2 as xs:integer;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: b.xqm :)
module namespace b = 'b';
import module namespace a = 'a' at 'a.xqm';
declare type b:t1 as a:t2;
declare type b:t2 as xs:integer;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1519 created</title>
   <pubDate>Mon, 21 Oct 2024 11:53:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1519</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1519</guid>
   <description>&lt;div&gt;&lt;p&gt;Add `-or-self` variants of all relevant axes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add the axes &lt;code&gt;preceding-or-self&lt;/code&gt;, &lt;code&gt;following-or-self&lt;/code&gt;, &lt;code&gt;preceding-sibling-or-self&lt;/code&gt;, &lt;code&gt;following-sibling-or-self&lt;/code&gt;, with the obvious meanings.&lt;/p&gt;
&lt;p&gt;A minor convenience avoiding the frequent need to write things like &lt;code&gt;(. | preceding-sibling::*)[@x][last()]&lt;/code&gt; ; especially useful because preceding-sibling-or-self returns results starting at the context node whereas &lt;code&gt;(. | preceding-sibling)&lt;/code&gt; reverses the order.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 095 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 21 Oct 2024 10:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/10-21</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-10-21</guid>
</item><item>
   <title>Pull request #1518 created</title>
   <pubDate>Sun, 20 Oct 2024 21:19:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1518</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1518</guid>
   <description>&lt;div&gt;&lt;p&gt;Add to changes metadata&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;No issue raised.&lt;/p&gt;
&lt;p&gt;Adds links from change metadata in the spec to issue and PR numbers in GitHub in many cases where these were previously missing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1517 created</title>
   <pubDate>Sun, 20 Oct 2024 21:13:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1517</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1517</guid>
   <description>&lt;div&gt;&lt;p&gt;1516(A) Fix failing F&amp;amp;O examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Corrects many of the errors in tests identified in issue #1516&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1516 created</title>
   <pubDate>Sun, 20 Oct 2024 17:42:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1516</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1516</guid>
   <description>&lt;div&gt;&lt;p&gt;Test failures in app-spec-examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm getting the following test failures (exluding ones where the Saxon implementation is known to be incomplete).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fo-test-fn-csv-to-xml-004 to -010&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are failing because the results are formatted with whitespace which the example expression does not actually generate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fo-test-fn-format-number-005&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Error on line 3 at column 16 (in expression on line 1116) of ... qt4tests/app/fo-spec-examples.xml
FODF1310  format-number picture: Digit sign must not appear after a zero-digit sign in the
integer part of a sub-picture&lt;/p&gt;
&lt;p&gt;The test is format-number(12345, '0,###^0', {
'percent': '%:pc'
})
Result:	
"14pc"&lt;/p&gt;
&lt;p&gt;which seems to be a complete aberration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fo-test-fn-format-number-008, -009, -010&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;fail saying decimal-format 'de' is not defined. The dependency is documented in narrative prose, but is not codified so that the test generator knows about it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fo-test-fn-function-annotations-&lt;/strong&gt;* **&lt;/p&gt;
&lt;p&gt;failing because the examples use a non-existant function xs:QName#2. Probably fn:QName#2 is intended.&lt;/p&gt;
&lt;p&gt;** fo-test-fn-highest-005 **
Error
XPST0142  Keyword key does not match the name of any declared parameter of function fn:highest&lt;/p&gt;
&lt;p&gt;Possible Saxon bug ??&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fo-test-fn-hours-from-dateTime-007&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Example is incorrect - it calls year-from-dateTime not hours-from-dateTime&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fo-test-map-build-007&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Results are not deep-equal to the stated result -haven't established why. Possible whitespace issue.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fo-test-map-pairs-001&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Getting "assert-permutation failed" from the Saxon test driver. Possible problem with the test driver?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1336 closed</title>
   <pubDate>Sat, 19 Oct 2024 16:14:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1336</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1336</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: fos record descriptions within xmlspec prose&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1515 created</title>
   <pubDate>Sat, 19 Oct 2024 05:16:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1515</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1515</guid>
   <description>&lt;div&gt;&lt;p&gt;higher order function group-by or gather-by for grouping&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;xpath 4 offers a new function &lt;code&gt;fn:partition&lt;/code&gt;: "&lt;em&gt;Partitions a sequence of items into a sequence of non-empty arrays containing the same items, starting a new partition when a supplied condition is true&lt;/em&gt;". Looks like an equivalent to XSLT &lt;code&gt;xsl:for-each-group&lt;/code&gt;with &lt;code&gt;@group-starting-with&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I would appreciate another new HOF as an equivalent to XSLT &lt;code&gt;xsl:for-each-group&lt;/code&gt;with &lt;code&gt;@group-by&lt;/code&gt;, that is &lt;em&gt;Partitions a sequence of items into a sequence of non-empty arrays containing the same items, where all items in a partition give the same value when a function f is applied&lt;/em&gt;. This is called &lt;code&gt;gather-by&lt;/code&gt; in &lt;em&gt;Mathematica&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1514 created</title>
   <pubDate>Sat, 19 Oct 2024 04:54:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1514</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1514</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: optional position argument in function signature for for-each and other HOF &lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The change in 4.0 for the higher order function &lt;code&gt;for-each&lt;/code&gt; is that "&lt;em&gt;the $action callback function accepts an &lt;strong&gt;optional&lt;/strong&gt; position argument&lt;/em&gt;".  But the function signature is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:for-each(
  $input as item()*, 	
  $action as fn(item(), xs:integer) as item()* 	
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I read &lt;code&gt;$action as fn(item(), xs:integer) as item()* &lt;/code&gt; as a function with two &lt;strong&gt;mandatory&lt;/strong&gt; parameters &lt;code&gt;item()&lt;/code&gt; and &lt;code&gt;xs:integer&lt;/code&gt;. Since the second (position) argument should be optional, i would expect:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:for-each(
  $input as item()*, 	
  $action as fn(item(), xs:integer?) as item()* 	
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are several HOFs with this new &lt;strong&gt;optional&lt;/strong&gt; position argument which seems to be &lt;strong&gt;mandatory&lt;/strong&gt; in the function signature.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1513 created</title>
   <pubDate>Fri, 18 Oct 2024 17:43:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1513</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1513</guid>
   <description>&lt;div&gt;&lt;p&gt;1512 Disallow reserved names in namespace and PI constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1512&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1512 created</title>
   <pubDate>Fri, 18 Oct 2024 14:00:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1512</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1512</guid>
   <description>&lt;div&gt;&lt;p&gt;Disallow reserved names in computed processing-instruction and namespace node constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The new rules banning unquoted reserved names in computed element and attribute constructors should apply equally to processing instruction and namespace node constructors.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1511 created</title>
   <pubDate>Fri, 18 Oct 2024 11:28:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1511</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1511</guid>
   <description>&lt;div&gt;&lt;p&gt;1345 Re-allow bare-brace map constructors everywhere&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1345&lt;/p&gt;
&lt;p&gt;Having changed computed element/attribute constructors to require reserved names to be quoted, we can now reintroduce bare-brace map constructors without ambiguity.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1510 created</title>
   <pubDate>Fri, 18 Oct 2024 10:01:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1510</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1510</guid>
   <description>&lt;div&gt;&lt;p&gt;1509 Drop obsolete/redundant text about "import schema" location hints&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1509&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1509 created</title>
   <pubDate>Fri, 18 Oct 2024 09:12:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1509</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1509</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery import schema (location hints)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XQuery §5.11, the paragraph starting "The first [URILiteral]) in a schema import..." contains obsolete information about the handling of location hints. It should refer instead to the new and more complete treatment given four paragraphs later at "The [URILiterals] that follow the at keyword are optional location hints..."&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1508 created</title>
   <pubDate>Thu, 17 Oct 2024 12:05:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1508</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1508</guid>
   <description>&lt;div&gt;&lt;p&gt;1507 Make format-integer spec legible&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1507&lt;/p&gt;
&lt;p&gt;Make the "formal spec" of fn:parse-integer legible (and portable between XPath and XQuery) by avoiding use of XML character references in the code.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1507 created</title>
   <pubDate>Thu, 17 Oct 2024 11:41:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1507</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1507</guid>
   <description>&lt;div&gt;&lt;p&gt;Formal spec of fn:parse-integer&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the formal spec of fn:parse-integer, it is not visually clear what the second argument of translate() is in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $preprocessed-value := translate($value, "_ 	

", "")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should spell out the characters by using codepoints-to-string() or char().&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1506 created</title>
   <pubDate>Thu, 17 Oct 2024 09:56:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1506</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1506</guid>
   <description>&lt;div&gt;&lt;p&gt;Type declarations: Constructor functions?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I’ve tagged this as a discussion issue:&lt;/p&gt;
&lt;p&gt;Would it make sense to declare constructor functions for the new XQuery type declarations, similar to what we now have for records, or do we believe that’s over the top?&lt;/p&gt;
&lt;p&gt;It might improve typing in complex code, and it would allow us to write things like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare type world:continent as enum('Africa', 'America', 'Asia', 'Australia', 'Europe');
world:continent('Africa')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the type above, an implicit constructor function would be created that would simply coerce its argument to the declared type:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function world:continent($value) as world:continent { $value };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One current drawback is that this only works for prefixed types (see #657), whereas it’s possible to define types without prefix, and reference them in local type declarations:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare type continent as enum('Africa', 'America', 'Asia', 'Australia', 'Europe');
let $c as continent := 'Africa'
return $c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1505 created</title>
   <pubDate>Wed, 16 Oct 2024 16:39:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1505</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1505</guid>
   <description>&lt;div&gt;&lt;p&gt;1503 Add err:map, err:stack-trace, err:additional to XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1503&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1504 created</title>
   <pubDate>Wed, 16 Oct 2024 11:59:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1504</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1504</guid>
   <description>&lt;div&gt;&lt;p&gt;868 fn:intersperse → fn:join, array:join($arrays, $separator)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #868&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1503 created</title>
   <pubDate>Wed, 16 Oct 2024 10:56:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1503</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1503</guid>
   <description>&lt;div&gt;&lt;p&gt;$err:map in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XSLT needs to be brought into line with XQuery in terms of the variables available in a catch clause, in particular $err:map (see PR #493)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1502 created</title>
   <pubDate>Wed, 16 Oct 2024 10:16:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1502</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1502</guid>
   <description>&lt;div&gt;&lt;p&gt;1458 Arguments that have a default value but don't accept ()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1458&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1330 closed</title>
   <pubDate>Wed, 16 Oct 2024 10:13:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1330</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1330</guid>
   <description>&lt;div&gt;&lt;p&gt;$fallback argument of map:get() and array:get() should allow () to be supplied&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1501 created</title>
   <pubDate>Wed, 16 Oct 2024 09:31:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1501</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1501</guid>
   <description>&lt;div&gt;&lt;p&gt;1318 Function Coercion: Records, Maps, Arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1318&lt;/p&gt;
&lt;p&gt;Coercion rules added for maps and arrays.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1500 created</title>
   <pubDate>Wed, 16 Oct 2024 01:37:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1500</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1500</guid>
   <description>&lt;div&gt;&lt;p&gt;Coupling of global variable-bound maps to character maps in XSLT &lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In an application I am writing now, the &lt;code&gt;xsl:output-character&lt;/code&gt;s I am writing in my &lt;code&gt;xsl:character-map&lt;/code&gt; are of interest elsewhere in the XSLT complex that is slowly emerging.&lt;/p&gt;
&lt;p&gt;The exercise makes me realize that character maps can be interesting in their own right. We give &lt;code&gt;xsl:character-map&lt;/code&gt;s names, and include them within each other, because they group meaningfully related character-string pairs. Such sets are the sort of thing one might want to have more closely coupled to the XSLT apparatus. For example, someone might create a &lt;code&gt;xsl:character-map&lt;/code&gt; to deal with Unicode characters in a particular script. And those characters are of interest in their own right, and the character selection might engage with other processes that need to interact with those characters.&lt;/p&gt;
&lt;p&gt;What if we were to extend &lt;code&gt;@use-character-maps&lt;/code&gt; to allow character maps to draw from other preexisting maps? The list of &lt;code&gt;eqNames&lt;/code&gt; in &lt;code&gt;@use-character-maps&lt;/code&gt; would be resolved first against names of character maps. For any &lt;code&gt;eqName&lt;/code&gt; that is not the name of a character map, the processor would search for a global variable or global parameter by that name. Any referenced global variable/parameter must be empty or a map. Every key must be castable as a character, and every value must be a string. Failure on any of these points would raise an error.&lt;/p&gt;
&lt;p&gt;Here is an example of hypothetical XSLT code, to illustrate how the innovation might be productively useful, producing two different character maps, each of which might be appropriate for one type of serialization or another:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;xsl:item-type name="letters:grc" as="record(transliteration as xs:string, name as xs:string)"/&amp;gt;
    &amp;lt;xsl:variable name="master-map" as="map(*)"&amp;gt;
        &amp;lt;xsl:map&amp;gt;
            &amp;lt;xsl:map-entry key="'α'" select="letters:grc('a', 'alpha')"/&amp;gt;
            &amp;lt;xsl:map-entry key="'β'" select="letters:grc('b', 'beta')"/&amp;gt;
        &amp;lt;/xsl:map&amp;gt;
    &amp;lt;/xsl:variable&amp;gt;
    &amp;lt;xsl:variable name="serialization-transliteration-map" as="map(xs:string, xs:string)"&amp;gt;
        &amp;lt;xsl:map&amp;gt;
            &amp;lt;xsl:for-each select="map:keys($master-map)"&amp;gt;
                &amp;lt;xsl:map-entry key="." select="$master-map(current())?transliteration"/&amp;gt;
            &amp;lt;/xsl:for-each&amp;gt;
        &amp;lt;/xsl:map&amp;gt;
    &amp;lt;/xsl:variable&amp;gt;
    &amp;lt;xsl:variable name="serialization-name-map" as="map(xs:string, xs:string)"&amp;gt;
        &amp;lt;xsl:map&amp;gt;
            &amp;lt;xsl:for-each select="map:keys($master-map)"&amp;gt;
                &amp;lt;xsl:map-entry key="." select="$master-map(current())?name"/&amp;gt;
            &amp;lt;/xsl:for-each&amp;gt;
        &amp;lt;/xsl:map&amp;gt;
    &amp;lt;/xsl:variable&amp;gt;
    &amp;lt;xsl:character-map name="transliteration" use-character-maps="serialization-transliteration-map"/&amp;gt;
    &amp;lt;xsl:character-map name="names" use-character-maps="serialization-name-map"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other words, if an &lt;code&gt;xsl:character-map&lt;/code&gt; is just a map, why not give it access to other XSLT structures that are maps?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1499 created</title>
   <pubDate>Tue, 15 Oct 2024 21:03:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1499</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1499</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: reduce noise in serialization spec for unused options&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I suggest that instead of the repetitive use of paragraphs like "The json-lines serialization parameter is not applicable to the XML output method.", we should have a general statement that serialization parameters are not applicable unless otherwise specified; perhaps accompanied by a chart showing which parameters apply to which methods.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1498 created</title>
   <pubDate>Tue, 15 Oct 2024 20:47:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1498</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1498</guid>
   <description>&lt;div&gt;&lt;p&gt;1366 Use ++ and ** operators in EBNF&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1366&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1487 closed</title>
   <pubDate>Tue, 15 Oct 2024 19:41:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1487</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1487</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:array - don't allow content to be supplied in array form&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 094 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 15 Oct 2024 16:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/10-15</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-10-15</guid>
</item><item>
   <title>Issue #1472 closed</title>
   <pubDate>Tue, 15 Oct 2024 17:18:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1472</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1472</guid>
   <description>&lt;div&gt;&lt;p&gt;1471 JSON Serialization: Sequences on Top Level&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1497 created</title>
   <pubDate>Tue, 15 Oct 2024 17:17:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1497</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1497</guid>
   <description>&lt;div&gt;&lt;p&gt;1471 JSON Serialization: json-lines&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1471 and #1472.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1496 created</title>
   <pubDate>Tue, 15 Oct 2024 17:09:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1496</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1496</guid>
   <description>&lt;div&gt;&lt;p&gt;1495 Drop context value static type&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1495&lt;/p&gt;
&lt;p&gt;Also corrects one or two broken cross-spec links.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1488 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:30:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1488</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1488</guid>
   <description>&lt;div&gt;&lt;p&gt;1487 in xsl:array, drop option to construct arrays from arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1495 created</title>
   <pubDate>Tue, 15 Oct 2024 16:29:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1495</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1495</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop "context value static type"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Drop the "context value static type" from the definition of the static context.&lt;/p&gt;
&lt;p&gt;In the absence of a specification for static typing, the feature is unused, and we have dropped similar features such as statically-known document and collection types.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1394 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:27:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1394</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1394</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT Default priority for `element(p:*)` etc&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1442 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:27:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1442</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1442</guid>
   <description>&lt;div&gt;&lt;p&gt;1394 Add new default priority rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1378 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:24:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1378</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1378</guid>
   <description>&lt;div&gt;&lt;p&gt;1375 bugs in pattern syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1375 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:24:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1375</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1375</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: names of functions in pattern&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1467 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:22:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1467</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1467</guid>
   <description>&lt;div&gt;&lt;p&gt;Modest editorial corrections to XSLT specs through 2.7&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1483 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:20:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1483</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1483</guid>
   <description>&lt;div&gt;&lt;p&gt;Type `none`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1489 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:20:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1489</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1489</guid>
   <description>&lt;div&gt;&lt;p&gt;1483 return type of fn:error&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1308 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:10:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1308</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1308</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:apply argument names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1490 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:10:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1490</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1490</guid>
   <description>&lt;div&gt;&lt;p&gt;1308 In fn:apply, Correct $array to $arguments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1312 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:06:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1312</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1312</guid>
   <description>&lt;div&gt;&lt;p&gt;Productions missing ws:explicit&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1492 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:06:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1492</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1492</guid>
   <description>&lt;div&gt;&lt;p&gt;1312 Add ws:explicit annotations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1183 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:05:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1183</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1183</guid>
   <description>&lt;div&gt;&lt;p&gt;transient() - a function to make functions nondeterministic&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1305 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:05:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1305</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1305</guid>
   <description>&lt;div&gt;&lt;p&gt;Almost all functions in FO that must process multiple string items, can have as a parameter only a single collation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1473 closed</title>
   <pubDate>Tue, 15 Oct 2024 16:05:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1473</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1473</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:identity: make it variadic&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 094 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 14 Oct 2024 09:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/10-15</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-10-15</guid>
</item><item>
   <title>Issue #1469 closed</title>
   <pubDate>Fri, 11 Oct 2024 10:37:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1469</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1469</guid>
   <description>&lt;div&gt;&lt;p&gt;Function finder&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1494 created</title>
   <pubDate>Thu, 10 Oct 2024 15:15:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1494</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1494</guid>
   <description>&lt;div&gt;&lt;p&gt;Records: Introduction?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It has been reported to me that the XQuery specification provides a nice and compact introduction on maps and arrays, but there currently is no comparable introduction for records yet. The “Changes” section on &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-record-test"&gt;3.2.8.3 Record Type&lt;/a&gt; gives a hint: It contains the sentence “Record types are added as a new kind of ItemType, constraining the value space of maps.”.&lt;/p&gt;
&lt;p&gt;In addition, maybe we could rename the section &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-named-record-types"&gt;Named Record Types&lt;/a&gt; to “Record Declaration”, analogous to “Variable Declaration”, “Context Value Declaration” and “Function Declaration(s)”. “Item Type Declarations” could be renamed to “Type Declaration”.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1493 created</title>
   <pubDate>Thu, 10 Oct 2024 14:35:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1493</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1493</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:xml-to-json: Amendments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Maybe I was too quick in waving through #1476 as I believe that the current version is a bit sketchy. It says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An element &lt;code&gt;$E&lt;/code&gt; named &lt;code&gt;number&lt;/code&gt; is processed by copying the string value of &lt;code&gt;$E&lt;/code&gt; to the output, making any changes that are necessary to ensure that the result is a valid JSON number. Such changes include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Removing leading and trailing whitespace.&lt;/li&gt;
&lt;li&gt;Removing a leading plus sign.&lt;/li&gt;
&lt;li&gt;Removing redundant leading zero digits.&lt;/li&gt;
&lt;li&gt;Adding a zero digit before or after a decimal point that is not preceded and followed by a digit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;For input like &lt;code&gt;X&lt;/code&gt;, we cannot ensure that it will be a valid JSON number, so I assume that the changed string needs to be validated before being output?&lt;/li&gt;
&lt;li&gt;“Removing redundant leading zero digits” may not consider negative number like &lt;code&gt;-01&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Does “Such changes include” imply that the list may not be comprehensive?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In many cases, the numbers to be output will be the result of an earlier &lt;code&gt;json-to-xml&lt;/code&gt; conversion. If it is generated with XPath numbers, we shouldn’t encounter plus signs, redundant leading zeros etc. either, so I would suggest getting rid of all post-processing. We could simply say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An element &lt;code&gt;$E&lt;/code&gt; named &lt;code&gt;number&lt;/code&gt; results in the output of the string value of the element if it is a valid JSON number. Otherwise, &lt;code&gt;[FOJS0006]&lt;/code&gt; is raised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we do want to tweak the string value, we should provide a complete set of rules; maybe something like…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The string value of an element &lt;code&gt;$E&lt;/code&gt; named &lt;code&gt;number&lt;/code&gt; is modified by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;removing leading and trailing whitespace,&lt;/li&gt;
&lt;li&gt;removing a single leading plus sign,&lt;/li&gt;
&lt;li&gt;removing redundant leading zero digits, which are optionally preceded by a leading minus sign,&lt;/li&gt;
&lt;li&gt;adding a zero digit before a decimal point that is not preceded by a digit, and&lt;/li&gt;
&lt;li&gt;adding a zero digit after a decimal point that is not followed by a digit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the result is a valid JSON number, it is output. Otherwise, &lt;code&gt;[FOJS0006]&lt;/code&gt; is raised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…but that’s still fuzzy (for example, it lacks the explanation of what redundant zero digits are).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1492 created</title>
   <pubDate>Thu, 10 Oct 2024 10:57:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1492</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1492</guid>
   <description>&lt;div&gt;&lt;p&gt;1312 Add ws:explicit annotations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Also updates the list of tokens using angle-brackets.&lt;/p&gt;
&lt;p&gt;Fix #1312&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1491 created</title>
   <pubDate>Thu, 10 Oct 2024 10:01:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1491</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1491</guid>
   <description>&lt;div&gt;&lt;p&gt;Empty record?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Even if the use cases may be limited: Shouldn’t we allow empty record types and declarations for the sake of completeness?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: check for empty map :)
if($map instance of record()) then ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare record empty();

let $empty as empty := {}
return $empty
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1490 created</title>
   <pubDate>Thu, 10 Oct 2024 09:32:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1490</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1490</guid>
   <description>&lt;div&gt;&lt;p&gt;1308 In fn:apply, Correct $array to $arguments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1308&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1489 created</title>
   <pubDate>Thu, 10 Oct 2024 09:18:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1489</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1489</guid>
   <description>&lt;div&gt;&lt;p&gt;1483 return type of fn:error&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1483&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1488 created</title>
   <pubDate>Thu, 10 Oct 2024 08:37:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1488</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1488</guid>
   <description>&lt;div&gt;&lt;p&gt;1487 in xsl:array, drop option to construct arrays from arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1487 created</title>
   <pubDate>Wed, 9 Oct 2024 10:58:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1487</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1487</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:array - don't allow content to be supplied in array form&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We reviewed and accepted a revised specification for xsl:array, but there was some unease about one of the options: specifically the ability to supply the content in the form of a sequence of arrays, which is then converted to an array of sequences.&lt;/p&gt;
&lt;p&gt;Further work on implementation and on writing test cases inclines me to drop this option. There are several reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is error-prone. When constructing nested arrays, there is a tendency to use &lt;code&gt;xsl:array/xsl:array&lt;/code&gt; rather than &lt;code&gt;xsl:array/xsl:array-member/xsl:array&lt;/code&gt;, and rather than leading to an error, this leads to incorrect results which can be hard to diagnose.&lt;/li&gt;
&lt;li&gt;The specification relies on converting an array to a sequence using &lt;code&gt;$array?*&lt;/code&gt;, but this is lossy, for example the array &lt;code&gt;[(1,2),3]&lt;/code&gt; is converted to the sequence &lt;code&gt;(1,2,3)&lt;/code&gt;. This provides a further source of potential confusion when users get it wrong.&lt;/li&gt;
&lt;li&gt;Use of &lt;code&gt;xsl:array-member&lt;/code&gt; seems to handle all the requirements and result in more readable code, and it's best to focus on providing a smaller number of different ways of achieving the same effect.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The proposal is to drop option 2(e) of section 22.1.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1450 closed</title>
   <pubDate>Tue, 8 Oct 2024 17:29:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1450</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1450</guid>
   <description>&lt;div&gt;&lt;p&gt;Syntax of computed element and attribute constructors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1480 closed</title>
   <pubDate>Tue, 8 Oct 2024 17:29:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1480</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1480</guid>
   <description>&lt;div&gt;&lt;p&gt;1450 Disallow reserved names in element/attribute constructors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 093 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 8 Oct 2024 16:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/10-08</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-10-08</guid>
</item><item>
   <title>Issue #1486 created</title>
   <pubDate>Tue, 8 Oct 2024 16:58:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1486</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1486</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial corrections &amp;amp; cleanups&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XQFO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] &lt;code&gt;fn:hours-from-dateTime&lt;/code&gt;: Wrong example: &lt;code&gt;year-from-dateTime( xs:time("12:30:00") )&lt;/code&gt; → https://github.com/qt4cg/qtspecs/pull/1517/files#diff-7625c07ae8131ff65c3caa677b188ed2b9b66237312d11c05a2fa2838c6f5c67R9794&lt;/li&gt;
&lt;li&gt;[x] &lt;code&gt;fn:void&lt;/code&gt;: “Formal Specification” should be dropped. As it is ·implementation-dependent· whether the supplied argument is evaluated or ignored, the empty sequence may not be equivalent.&lt;/li&gt;
&lt;li&gt;[x] &lt;code&gt;fn:parse-uri&lt;/code&gt;: Ampersands in 4th example (&lt;code&gt;...&amp;amp;sort=relevance&lt;/code&gt;) must be escaped.&lt;/li&gt;
&lt;li&gt;[x] &lt;code&gt;fn:format-number&lt;/code&gt;: &lt;code&gt;format-number(0.14, '01%', {'percent': '%:pc')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[x] Unify equivalent expressions&lt;/li&gt;
&lt;li&gt;[x] &lt;code&gt;fn:civil-timezone&lt;/code&gt;: &lt;code&gt;$dateTime&lt;/code&gt; → &lt;code&gt;$value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[x] &lt;code&gt;fo-test-fn-siblings-002&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XPath:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] Add changes section for &lt;code&gt;=?&amp;gt;&lt;/code&gt; (https://github.com/qt4cg/qtspecs/pull/985)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XQuery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] &lt;code&gt;declare record p:person {$first as xs:string, $last as xs:string, *);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[x] &lt;code&gt;declare type app:invoice as map("xs:string", element(inv:paid-invoice))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[x] &lt;code&gt;declare type app:overdue-invoices as map("xs:date", app:invoice*)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;General:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] Format code (see #1124)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1474 closed</title>
   <pubDate>Tue, 8 Oct 2024 16:15:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1474</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1474</guid>
   <description>&lt;div&gt;&lt;p&gt;xml-to-json: strip leading plus signs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1476 closed</title>
   <pubDate>Tue, 8 Oct 2024 16:15:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1476</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1476</guid>
   <description>&lt;div&gt;&lt;p&gt;1474 xml-to-json: ensure numbers are JSON conformant&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1477 closed</title>
   <pubDate>Tue, 8 Oct 2024 16:12:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1477</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1477</guid>
   <description>&lt;div&gt;&lt;p&gt;1475 Stylesheet change to mark optional fields with '?'&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1475 closed</title>
   <pubDate>Tue, 8 Oct 2024 16:12:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1475</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1475</guid>
   <description>&lt;div&gt;&lt;p&gt;In rendered named record types, optional fields are not so marked&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1448 closed</title>
   <pubDate>Tue, 8 Oct 2024 16:09:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1448</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1448</guid>
   <description>&lt;div&gt;&lt;p&gt;Operations on the dateTime family of types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1481 closed</title>
   <pubDate>Tue, 8 Oct 2024 16:09:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1481</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1481</guid>
   <description>&lt;div&gt;&lt;p&gt;1448 Component extraction on gregorian types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1468 closed</title>
   <pubDate>Tue, 8 Oct 2024 16:07:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1468</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1468</guid>
   <description>&lt;div&gt;&lt;p&gt;Understanding the xsl:array constructor&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1482 closed</title>
   <pubDate>Tue, 8 Oct 2024 16:07:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1482</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1482</guid>
   <description>&lt;div&gt;&lt;p&gt;1468 Revise the xsl:array instruction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1351 closed</title>
   <pubDate>Tue, 8 Oct 2024 16:03:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1351</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1351</guid>
   <description>&lt;div&gt;&lt;p&gt;declare item type → type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1277 closed</title>
   <pubDate>Tue, 8 Oct 2024 16:03:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1277</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1277</guid>
   <description>&lt;div&gt;&lt;p&gt;Declare named record types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1355 closed</title>
   <pubDate>Tue, 8 Oct 2024 16:03:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1355</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1355</guid>
   <description>&lt;div&gt;&lt;p&gt;1351 Add "declare record" in XQuery&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1485 created</title>
   <pubDate>Tue, 8 Oct 2024 15:59:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1485</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1485</guid>
   <description>&lt;div&gt;&lt;p&gt;Record declarations in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In PR #1355 we have added "declare record" syntax to XQuery.&lt;/p&gt;
&lt;p&gt;We should now do the same for XSLT.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #46 closed</title>
   <pubDate>Tue, 8 Oct 2024 11:48:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/46</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-46</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:sequence: @as&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1403 closed</title>
   <pubDate>Tue, 8 Oct 2024 11:20:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1403</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1403</guid>
   <description>&lt;div&gt;&lt;p&gt;Align AnyMapTest, AnyArrayTest and with ElementTest&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1484 created</title>
   <pubDate>Tue, 8 Oct 2024 08:47:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1484</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1484</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions that expect a record type should make it extensible&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In general a function (or other operation, e.g. an XSLT instruction) that expects a record type as input should make that record type extensible. For example, &lt;code&gt;array:of-members&lt;/code&gt; should accept &lt;code&gt;record(value as item()*, *)&lt;/code&gt; rather than &lt;code&gt;record(value as item()*)&lt;/code&gt; as currently defined; similarly &lt;code&gt;map:of-pairs&lt;/code&gt; should accept &lt;code&gt;record(key, value, *)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Two reasons: (a) it avoids the user having to remove extraneous fields from records if they happen to be present, and (b) it avoids the system having to check whether extraneous fields are present.&lt;/p&gt;
&lt;p&gt;For example, it now becomes legal (and perhaps sometimes useful) to write &lt;code&gt;array:of-members(map:pairs($map))&lt;/code&gt;; currently this fails because the result of &lt;code&gt;map:pairs&lt;/code&gt; includes &lt;code&gt;key&lt;/code&gt; fields which &lt;code&gt;array:of-members&lt;/code&gt; does not permit.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 093 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 7 Oct 2024 13:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/10-08</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-10-08</guid>
</item><item>
   <title>Issue #1483 created</title>
   <pubDate>Mon, 7 Oct 2024 09:29:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1483</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1483</guid>
   <description>&lt;div&gt;&lt;p&gt;Type `none`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The function &lt;code&gt;fn:error&lt;/code&gt; uses &lt;code&gt;none&lt;/code&gt; as return type. This type is only defined in the outdated &lt;a href="https://www.w3.org/TR/xquery-semantics/"&gt;XQuery 1.0 and XPath 2.0 Formal Semantics&lt;/a&gt; specification:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do we want to live with the current state?&lt;/li&gt;
&lt;li&gt;Should we include a better definition in the current specifications?&lt;/li&gt;
&lt;li&gt;Should we simply use &lt;code&gt;item()*&lt;/code&gt; as return type, even if the function never returns anything?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we keep &lt;code&gt;none&lt;/code&gt;, the test case generator should be revised for &lt;a href="https://github.com/qt4cg/qt4tests/blob/b0d8df63d57ab0ab9f985217178811487f0b74ae/misc/BuiltInKeywords.xml#L74C21-L82"&gt;Keywords-fn-error-1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1482 created</title>
   <pubDate>Fri, 4 Oct 2024 16:32:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1482</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1482</guid>
   <description>&lt;div&gt;&lt;p&gt;1468 Revise the xsl:array instruction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Attempts an improved (more intuitive) specification for the xsl:array instruction.&lt;/p&gt;
&lt;p&gt;Fix #1468&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1239 closed</title>
   <pubDate>Fri, 4 Oct 2024 15:37:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1239</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1239</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT xsl:next-match with select attribute&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1273 closed</title>
   <pubDate>Fri, 4 Oct 2024 15:36:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1273</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1273</guid>
   <description>&lt;div&gt;&lt;p&gt;Generalize for-each-pair to work with any number of input sequences&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1481 created</title>
   <pubDate>Thu, 3 Oct 2024 11:51:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1481</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1481</guid>
   <description>&lt;div&gt;&lt;p&gt;1448 Component extraction on gregorian types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1448&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1480 created</title>
   <pubDate>Thu, 3 Oct 2024 11:07:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1480</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1480</guid>
   <description>&lt;div&gt;&lt;p&gt;1450 Disallow reserved names in element/attribute constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1450&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1479 created</title>
   <pubDate>Thu, 3 Oct 2024 09:24:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1479</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1479</guid>
   <description>&lt;div&gt;&lt;p&gt;Default element namespace in XQuery: interaction of 'fixed' and '##any'&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In §5.14 we document two changes to "declare default element namespace":&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The [default namespace for elements and types] can now be declared to be &lt;code&gt;fixed&lt;/code&gt; for a query module, meaning it is unaffected by a namespace declaration appearing on a direct element constructor. [citation missing - should be issue #65, PR #753]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The [default namespace for elements and types] can be set to the value ##any, allowing unprefixed names in axis steps to match elements with a given local name in any namespace.   [Issue #296 PR #1181]&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We don't discuss how these two options interact. Are they completely orthogonal?&lt;/p&gt;
&lt;p&gt;The description of &lt;code&gt;##any&lt;/code&gt; says its effect is that "an unprefixed name appearing in any other context where an element or type name is expected is treated as being in no namespace." This deserves a mention in the rules for direct and computed element constructors.&lt;/p&gt;
&lt;p&gt;In §2.2.1 we have added the statement: &lt;em&gt;The statically known namespaces may include a binding for the zero-length prefix; however, this is used only in limited circumstances because the rules for resolving unprefixed QNames depend on how such a name is used.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It's not clear how such a binding can come into existence. It can't be done using any of the prolog declarations that bind  a prefix. And under the current rules, I don't think it can be done using a namespace declaration attribute on a fixed element constructor. Perhaps it was the intent that &lt;code&gt;xmlns="abc"&lt;/code&gt; would do this if "fixed" is set, but that's not the case currently.&lt;/p&gt;
&lt;p&gt;Section §4.12.1.2 Namespace Declaration Attributes could do with a "changes" section explaining what has changed.&lt;/p&gt;
&lt;p&gt;In §4.12.1, Direct Element Constructors, we say "If the element name has no namespace prefix, the namespace binding for the zero-length prefix in the [statically known namespaces] is used; if there is no such binding, the element name will be in no namespace." That can't be right, there's no mention of the default element/type namespace at all.&lt;/p&gt;
&lt;p&gt;In §4.12.3.1 Computed Element Constructors, the same problem arises for a bare unprefixed NCName, but for a dynamically-computed name, we use the default element/type namespace.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1478 created</title>
   <pubDate>Wed, 2 Oct 2024 16:52:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1478</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1478</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop variadic functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We've made a decision -- for good reasons of maintaining extensibility -- not to make any of the functions in the system function library variadic.&lt;/p&gt;
&lt;p&gt;I think this raises the question of whether the feature is worth retaining. And we already had the situation that many functions that were obvious candidates for variadicity (min, max, distinct-values, sum) couldn't use the feature because they already had additional optional arguments.&lt;/p&gt;
&lt;p&gt;If it's not a good design principle for system-defined functions, then the same applies equally to user-defined functions.&lt;/p&gt;
&lt;p&gt;We could drop the feature and just revert to defining concat() as a special case. It would remove a significant amount of complexity.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1477 created</title>
   <pubDate>Wed, 2 Oct 2024 16:43:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1477</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1477</guid>
   <description>&lt;div&gt;&lt;p&gt;1475 Stylesheet change to mark optional fields with '?'&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1475&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1476 created</title>
   <pubDate>Wed, 2 Oct 2024 11:52:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1476</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1476</guid>
   <description>&lt;div&gt;&lt;p&gt;1474 xml-to-json: ensure numbers are JSON conformant&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1474&lt;/p&gt;
&lt;p&gt;Describes the changes that might be needed to supplied numbers to ensure the output conforms with JSON syntax.&lt;/p&gt;
&lt;p&gt;Independently, adds a note to appendix to G.4 to affirm that changes to argument keywords have no backwards compatibility implication, satisfying action  QT4CG-091-01&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1464 closed</title>
   <pubDate>Wed, 2 Oct 2024 06:42:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1464</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1464</guid>
   <description>&lt;div&gt;&lt;p&gt;Inconsistent spelling: implementer or implementor?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1466 closed</title>
   <pubDate>Wed, 2 Oct 2024 06:42:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1466</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1466</guid>
   <description>&lt;div&gt;&lt;p&gt;1464 Standardize on "implementer" spelling&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1475 created</title>
   <pubDate>Tue, 1 Oct 2024 19:46:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1475</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1475</guid>
   <description>&lt;div&gt;&lt;p&gt;In rendered named record types, optional fields are not so marked&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;For example in uri-structure-record as shown beneath the signatures of fn:build-uri and fn:parse-uri, the field names are not marked "?" to indicate the field is optional.&lt;/p&gt;
&lt;p&gt;The underlying XML contains this information correctly.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1461 closed</title>
   <pubDate>Tue, 1 Oct 2024 19:39:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1461</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1461</guid>
   <description>&lt;div&gt;&lt;p&gt;### Errors in `misc/BuiltinKeywords`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1460 closed</title>
   <pubDate>Tue, 1 Oct 2024 19:31:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1460</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1460</guid>
   <description>&lt;div&gt;&lt;p&gt;1323b Function parameters names: $uri → $source&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1323 closed</title>
   <pubDate>Tue, 1 Oct 2024 19:31:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1323</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1323</guid>
   <description>&lt;div&gt;&lt;p&gt;Function parameters names: $uri vs. $href&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1474 created</title>
   <pubDate>Tue, 1 Oct 2024 17:37:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1474</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1474</guid>
   <description>&lt;div&gt;&lt;p&gt;xml-to-json: strip leading plus signs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;xml-to-json now retains the format of supplied numbers, except that it strips off redundant leading zeros to ensure they are valid JSON.&lt;/p&gt;
&lt;p&gt;It also needs to strip off redundant leading plus signs for the same reason.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 092 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 1 Oct 2024 16:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/10—01</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-10-01</guid>
</item><item>
   <title>Issue #1436 closed</title>
   <pubDate>Tue, 1 Oct 2024 16:53:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1436</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1436</guid>
   <description>&lt;div&gt;&lt;p&gt;1323 Function parameters names: $href → $uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1445 closed</title>
   <pubDate>Tue, 1 Oct 2024 16:14:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1445</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1445</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:xml-to-json: `number-formatter` option&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1455 closed</title>
   <pubDate>Tue, 1 Oct 2024 16:14:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1455</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1455</guid>
   <description>&lt;div&gt;&lt;p&gt;1445 Drop number-formatter option, retain string value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1437 closed</title>
   <pubDate>Tue, 1 Oct 2024 16:12:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1437</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1437</guid>
   <description>&lt;div&gt;&lt;p&gt;1325 Variadic System Functions limited to `fn:concat`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1429 closed</title>
   <pubDate>Tue, 1 Oct 2024 16:11:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1429</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1429</guid>
   <description>&lt;div&gt;&lt;p&gt;1403 Align type tests&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1465 closed</title>
   <pubDate>Tue, 1 Oct 2024 15:55:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1465</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1465</guid>
   <description>&lt;div&gt;&lt;p&gt;1461 Generate correct tests for functions involving named record types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1473 created</title>
   <pubDate>Tue, 1 Oct 2024 15:46:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1473</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1473</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:identity: make it variadic&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;…see https://github.com/qt4cg/qtspecs/pull/1437#issuecomment-2346599503.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1472 created</title>
   <pubDate>Tue, 1 Oct 2024 14:29:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1472</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1472</guid>
   <description>&lt;div&gt;&lt;p&gt;1471 JSON Serialization: Sequences on Top Level&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1471&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1471 created</title>
   <pubDate>Tue, 1 Oct 2024 13:43:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1471</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1471</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON Serialization: Sequences on Top Level&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Extracted from #576:&lt;/p&gt;
&lt;p&gt;All serialization methods except for &lt;code&gt;json&lt;/code&gt; allow sequences to be output on top level. We should also allow this for JSON data. This way, constructs like…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare option output:item-separator '&amp;amp;#xa;';
declare option output:method 'text';

for $json in ({ 1: 2 }, { 3: 4 })
return serialize($json, { 'method': 'json' })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…can be simplified to:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare option output:method 'json';
{ 1: 2 },
{ 3: 4 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should still not allow sequences within JSON structures. It would be inconsistent to have different output rules depending on the number of items in a sequence (&lt;code&gt;(1)&lt;/code&gt; and &lt;code&gt;[1]&lt;/code&gt; would not be serialized identically).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1470 created</title>
   <pubDate>Tue, 1 Oct 2024 13:02:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1470</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1470</guid>
   <description>&lt;div&gt;&lt;p&gt;689 fn:stack-trace: replace with $err:stack-trace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #689&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1469 created</title>
   <pubDate>Tue, 1 Oct 2024 08:54:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1469</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1469</guid>
   <description>&lt;div&gt;&lt;p&gt;Function finder&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With the number of functions in the fn:namespace now standing at 213, the use of a drop-down in the F+O "function finder" has become a little unwieldy. Are there ways it could be improved, for example by reducing the size of the list when you type the first character of the required function name?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1468 created</title>
   <pubDate>Tue, 1 Oct 2024 02:00:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1468</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1468</guid>
   <description>&lt;div&gt;&lt;p&gt;Understanding the xsl:array constructor&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In reading the XSLT specs on the &lt;code&gt;xsl:array&lt;/code&gt; constructor (#406 adopted at meeting &lt;a href="https://qt4cg.org/meeting/minutes/2023/03-28.html#pr-406"&gt;28&lt;/a&gt;) I find myself somewhat confused. Either I need to be illumined, the specs need to be clarified, or some other adjustments are needed.&lt;/p&gt;
&lt;p&gt;First, I'm still struck by the disparity between maps and arrays; there's a &lt;code&gt;xsl:map-member&lt;/code&gt; but no &lt;code&gt;xsl:array-member&lt;/code&gt;. That horse has been beaten many times, I know. But I need to record that the disparity is very noticeable. The disorientation is aggravated by the second example in the &lt;a href="https://qt4cg.org/specifications/xslt-40/Overview.html#array-construction"&gt;constructor overview&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:array use="?value"&amp;gt;
   &amp;lt;xsl:for-each-group select="0 to 19" group-adjacent=". idiv 4"&amp;gt;
     &amp;lt;xsl:map-entry key="'value'" select="current-group()"/&amp;gt;
   &amp;lt;/xsl:for-each-group&amp;gt;
&amp;lt;/xsl:array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A map entry within an array? This just strikes me as a hack, and is suggestive of a design flaw in the language. (I know what you're about to say in response; hold that thought...) That's exacerbated when I see example 2c invoking an array constructor within an array, only to get rid of the nested array to get at what you wanted in the first place, the items grouped into members.&lt;/p&gt;
&lt;p&gt;Furthermore, the value of attribute &lt;code&gt;@use&lt;/code&gt;, &lt;code&gt;?value&lt;/code&gt;, is cryptic. Yes, I get what's going on, but the first several times reading it I thought it was very abracadabrish. And that same feeling hit me for the other examples' values of &lt;code&gt;@use&lt;/code&gt;: &lt;code&gt;.()&lt;/code&gt; and &lt;code&gt;?*&lt;/code&gt;. The &lt;code&gt;.()&lt;/code&gt; bit of syntax appears only twice in the specs (here), without explanation.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;@use&lt;/code&gt; is evaluated once for every item, then in example 2b...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:array use=".()"&amp;gt;
   &amp;lt;xsl:for-each-group select="0 to 19" group-adjacent=". idiv 4"&amp;gt;
     &amp;lt;xsl:sequence select="current-group#0"/&amp;gt;
   &amp;lt;/xsl:for-each-group&amp;gt;
&amp;lt;/xsl:array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...I would expect the expression &lt;code&gt;.()&lt;/code&gt; to be applied to twenty items, because a sequence of five sequences of four items each is simply one sequence of twenty items, innit? Or are we allowed here and only here for a sequence constructor to create a sequence of sequences?&lt;/p&gt;
&lt;p&gt;It seems that &lt;code&gt;@use&lt;/code&gt; is striving to do something similar to &lt;code&gt;@group-by&lt;/code&gt; in &lt;code&gt;xsl:for-each-group&lt;/code&gt;. But it isn't. Understanding the goal is obfuscated by the vague name. Use what, to what end?&lt;/p&gt;
&lt;p&gt;Overall, I feel that the array constructor is a 2nd-class citizen in the specs. I love using the map constructor in XSLT: it tells users very clearly what's going on. I don't look forward to the using the array constructor in XSLT, because I think it does the opposite. But maybe I'm wrong.&lt;/p&gt;
&lt;p&gt;I don't have a specific proposal to fix, because I understand some of the conceptual hurdles to a putative &lt;code&gt;xsl:array-member&lt;/code&gt;. Still. I can't help but wish that that's what we had.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1467 created</title>
   <pubDate>Tue, 1 Oct 2024 00:37:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1467</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1467</guid>
   <description>&lt;div&gt;&lt;p&gt;Modest editorial corrections to XSLT specs through 2.7&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;Two largish sections had duplicate prose nearby;&lt;/li&gt;
&lt;li&gt;Some punctuation rendered consistently;&lt;/li&gt;
&lt;li&gt;Some substantive insertions/edits for clarification, when it seemed clear to me.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if any of these changes are misfires.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1466 created</title>
   <pubDate>Sat, 28 Sep 2024 09:34:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1466</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1466</guid>
   <description>&lt;div&gt;&lt;p&gt;1464 Standardize on "implementer" spelling&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1464&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1465 created</title>
   <pubDate>Sat, 28 Sep 2024 09:25:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1465</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1465</guid>
   <description>&lt;div&gt;&lt;p&gt;1461 Generate correct tests for functions involving named record types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR addresses issue #1461 in a fairly narrow way, without attempting to tackle the deeper problem identified in issue #1336.&lt;/p&gt;
&lt;p&gt;This involves expanding the &lt;code&gt;fos:type&lt;/code&gt; entries for types such as &lt;code&gt;uri-structure-record&lt;/code&gt; that are referenced in function signatures, resulting in some duplication with the &lt;code&gt;fos:record-description&lt;/code&gt; entries that describe the same types in a different place.: hopefully the resolution to #1336 will resolve that duplication.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1464 created</title>
   <pubDate>Fri, 27 Sep 2024 12:56:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1464</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1464</guid>
   <description>&lt;div&gt;&lt;p&gt;Inconsistent spelling: implementer or implementor?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We use both spellings.&lt;/p&gt;
&lt;p&gt;oxfordreference.com says: Although the variant spelling implementor predominated for much of the late 20th century, today implementer is considered standard.&lt;/p&gt;
&lt;p&gt;Personally, being a late 20th century kind of guy, I prefer "implementor", but we should be consistent.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1463 created</title>
   <pubDate>Wed, 25 Sep 2024 14:45:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1463</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1463</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:element-number: Feedback&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;All other XQFO functions that have &lt;code&gt;.&lt;/code&gt; as the default value for a node parameter (&lt;code&gt;fn:name&lt;/code&gt;, etc.) return an empty sequence if the passed argument is an empty sequence. Could we use the same rule for &lt;code&gt;fn:element-number&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;The last example is incomplete; it must be &lt;code&gt;$e//section...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The last example should return &lt;code&gt;1.2&lt;/code&gt; instead of &lt;code&gt;1.1&lt;/code&gt;. If the given result is correct, the equivalent XPath expression needs to be revised.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While it was a no-brainer to implement the function, its specification seems overwhelming to me. I eventually read all the notes, but at the end I was more confused than in the beginning ;·) It could be one of those functions that are more accessible to users than to implementors, though.&lt;/p&gt;
&lt;p&gt;Still, maybe at least 1, 2 more examples could be provided? The last example goes into that direction, but it could be a bit cryptic for non-experts (e.g. it expects users to know that the result of &lt;code&gt;$s/ancestor-or-self::section&lt;/code&gt; is returned in document order).&lt;/p&gt;
&lt;p&gt;As this function seems to be mostly targeted to XSLT users, maybe we should offer XSLT examples. I assume that XQuery developers may rather be tempted to enumerate all children/descedants of a node, and write recursive code like…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function enumerate($element, $numbers) {
  for $child at $pos in $element/*
  let $n := $numbers || '.' || $pos
  return ($n, enumerate($child, $numbers || $n))
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In general, if we were able to generalize the function in one way or another, that would be great.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1462 created</title>
   <pubDate>Wed, 25 Sep 2024 13:38:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1462</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1462</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: default option&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The default value for the option parameter of &lt;code&gt;fn:deep-equal&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;{ 'collation': fn:default-collation() }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can we simply use &lt;code&gt;{}&lt;/code&gt;, or is there a particular reason for mentioning the &lt;code&gt;collation&lt;/code&gt; and no other option?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1461 created</title>
   <pubDate>Tue, 24 Sep 2024 16:34:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1461</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1461</guid>
   <description>&lt;div&gt;&lt;p&gt;### Errors in `misc/BuiltinKeywords`&lt;/p&gt;&lt;div class="markup"&gt;&lt;pre&gt;&lt;code&gt;          ### Errors in `misc/BuiltinKeywords`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test cases &lt;code&gt;Keywords-fn-parse-html-1&lt;/code&gt; and &lt;code&gt;Keywords-fn-build-uri-1&lt;/code&gt; contain invalid function signatures, caused I think by a bug in &lt;code&gt;generate-keyword-test-set.xsl&lt;/code&gt;. Both seem to omit the &lt;code&gt;SequenceType&lt;/code&gt; of one of the arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; fn:parse-html(html := ?, options := ?) instance of 
    function((xs:string | xs:hexBinary | xs:base64Binary)?, ) as document-node(element(*:html))?
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;fn:build-uri(parts := ?, options := ?) instance of function(, map(*)?) as xs:string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Examining &lt;code&gt;generate-keyword-test-set.xsl&lt;/code&gt; shows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each select="arg"&amp;gt;
      &amp;lt;xsl:if test="position() != 1"&amp;gt;, &amp;lt;/xsl:if&amp;gt;
      &amp;lt;xsl:text&amp;gt;{@type}&amp;lt;/xsl:text&amp;gt;
&amp;lt;/xsl:for-each&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but for these two function definitions, type information is indirected via a &lt;code&gt;@type-ref&lt;/code&gt; attribute:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;fos:proto name="parse-html" return-type="document-node(element(*:html))?"&amp;gt;
        &amp;lt;fos:arg name="html" type="(xs:string | xs:hexBinary | xs:base64Binary)?"/&amp;gt;
        &amp;lt;fos:arg name="options" type-ref="parse-html-options"
                     default="{
                                 &amp;amp;quot;method&amp;amp;quot;: &amp;amp;quot;html&amp;amp;quot;,
                                 &amp;amp;quot;html-version&amp;amp;quot;: &amp;amp;quot;5&amp;amp;quot;
                              }"/&amp;gt;
 &amp;lt;/fos:proto&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;fos:proto name="build-uri" return-type="xs:string"&amp;gt;
            &amp;lt;fos:arg name="parts" type-ref="uri-structure-record"
               example='{
               "scheme": "https",
               "host": "qt4cg.org",
               "port": (),
               "path": "/specifications/index.html"
               }'/&amp;gt;
            &amp;lt;fos:arg name="options" type="map(*)?" default="{}"/&amp;gt;
&amp;lt;/fos:proto&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Originally posted by @johnlumley in https://github.com/qt4cg/qtspecs/issues/1451#issuecomment-2358082401&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1451 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:30:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1451</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1451</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor syntax errors in FO examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1453 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:30:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1453</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1453</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo in load-xquery-module example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1235 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:27:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1235</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1235</guid>
   <description>&lt;div&gt;&lt;p&gt;Function Identity: Treating function items with identical bodies&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1439 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:27:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1439</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1439</guid>
   <description>&lt;div&gt;&lt;p&gt;1235 Function Identity: Treating function items with identical bodies&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1435 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:24:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1435</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1435</guid>
   <description>&lt;div&gt;&lt;p&gt;1421 fn:unix-dateTime: Revisions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1421 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:24:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1421</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1421</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:unix-time`: Revisions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1422 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:21:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1422</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1422</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:hash`: Revision&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1433 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:21:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1433</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1433</guid>
   <description>&lt;div&gt;&lt;p&gt;1422 fn:hash: Revision&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1427 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:18:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1427</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1427</guid>
   <description>&lt;div&gt;&lt;p&gt;Add a function equivalent to xsl:number&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1430 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:18:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1430</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1430</guid>
   <description>&lt;div&gt;&lt;p&gt;1427 Add element-number function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1373 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:14:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1373</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1373</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Editorial&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1434 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:14:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1434</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1434</guid>
   <description>&lt;div&gt;&lt;p&gt;1373 XQFO: Editorial&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1322 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:11:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1322</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1322</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:collation-available (editorial)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1438 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:11:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1438</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1438</guid>
   <description>&lt;div&gt;&lt;p&gt;1322 fn:collation-available (editorial)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1460 created</title>
   <pubDate>Tue, 24 Sep 2024 16:11:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1460</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1460</guid>
   <description>&lt;div&gt;&lt;p&gt;1323b Function parameters names: $uri → $source&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Second attempt. Closes #1323 and #1436.&lt;/p&gt;
&lt;p&gt;In addition, includes a change to &lt;code&gt;fn:json-doc($uri)&lt;/code&gt;, and fixed an editorial bug for the &lt;code&gt;fn:escape-html-uri&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1444 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:08:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1444</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1444</guid>
   <description>&lt;div&gt;&lt;p&gt;Implement improvement to bibligraphy entry for IEEE 802.3&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1446 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:05:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1446</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1446</guid>
   <description>&lt;div&gt;&lt;p&gt;Limits on xs:dateTime&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1447 closed</title>
   <pubDate>Tue, 24 Sep 2024 16:05:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1447</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1447</guid>
   <description>&lt;div&gt;&lt;p&gt;1446 Rephrase conformance rule on xs:dateTime limits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1459 created</title>
   <pubDate>Tue, 24 Sep 2024 14:59:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1459</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1459</guid>
   <description>&lt;div&gt;&lt;p&gt;Function properties and arities (editorial)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I try to understand the semantics behind the &lt;strong&gt;Properties&lt;/strong&gt; section in the XQFO spec. Here are some examples of existing functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fn:format-integer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The two-argument form of this function is ·deterministic·, ·context-dependent·, and ·focus-independent·. It depends on default language.
The three-argument form of this function is ·deterministic·, ·context-independent·, and ·focus-independent·.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;code&gt;fn:format-time&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;This function is ·deterministic·, ·context-dependent·, and ·focus-independent·. It depends on default calendar, and default language, and default place, and implicit timezone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;code&gt;fn:index-of&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The two-argument form of this function is ·deterministic·, ·context-dependent·, and ·focus-independent·. It depends on collations, and implicit timezone.
The three-argument form of this function is ·deterministic·, ·context-dependent·, and ·focus-independent·. It depends on collations, and static base URI, and implicit timezone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;code&gt;fn:element-number&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The zero-argument form of this function is ·deterministic·, ·context-dependent·, and ·focus-dependent·.
The one-argument form of this function is ·deterministic·, ·context-independent·, and ·focus-independent·.
The two-argument form of this function is ·deterministic·, ·context-independent·, and ·focus-independent·.
The three-argument form of this function is ·deterministic·, ·context-independent·, and ·focus-independent·.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am afraid I cannot give hints for improvement yet; I just noticed it is increasingly difficult to interpret. For the moment, I wonder…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Are all of these current definitions correct?&lt;/li&gt;
&lt;li&gt;In many cases, if the user supplies an empty sequence as argument, the default value is used instead. This contrasts with the current property description that relies a lot on the function arities. For example, &lt;code&gt;fn:index($a, $b)&lt;/code&gt; and &lt;code&gt;fn:index-of($a, $b, ())&lt;/code&gt; should have identical properties, but the current wording implies that the three-argument of this function has different properties, e.g., it is said to rely in this case on the static base URI.&lt;/li&gt;
&lt;li&gt;Some functions with default values have a single property description (see &lt;code&gt;fn:format-integer&lt;/code&gt;), other have multiple descriptions (see &lt;code&gt;fn:format-time&lt;/code&gt;). Is there a particular rule behind that?&lt;/li&gt;
&lt;li&gt;Could we merge the descriptions for arities with identical properties?&lt;/li&gt;
&lt;li&gt;Maybe it will be easier not to consider the arities at all anymore?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1396 closed</title>
   <pubDate>Tue, 24 Sep 2024 14:44:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1396</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1396</guid>
   <description>&lt;div&gt;&lt;p&gt;Rendition of EBNF syntax scraps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1458 created</title>
   <pubDate>Thu, 19 Sep 2024 08:04:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1458</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1458</guid>
   <description>&lt;div&gt;&lt;p&gt;Arguments that have a default value but don't accept ()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The following functions define an argument that has a default value, but don't allow () to be supplied explicitly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lang
id
element-with-id
idref
parse-html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As determined by running the following query against the function catalog:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;//*:arg[@default and not(ends-with(@type,'?') or ends-with(@type, '*'))]/(ancestor::*:function/(@prefix||':'||@name))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There are others which this query doesn't pick up, mainly where the defaultable argument is a function, including:&lt;/p&gt;
&lt;p&gt;array:build
map:build
array:get
map:get
fn:highest
fn:lowest&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1224 closed</title>
   <pubDate>Wed, 18 Sep 2024 21:57:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1224</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1224</guid>
   <description>&lt;div&gt;&lt;p&gt;Attribute priority for xsl:accumulator-rule&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #409 closed</title>
   <pubDate>Wed, 18 Sep 2024 21:49:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/409</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-409</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: xsl:next-match and xsl:apply-imports interaction with on-multiple-match&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #296 closed</title>
   <pubDate>Wed, 18 Sep 2024 21:34:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/296</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-296</guid>
   <description>&lt;div&gt;&lt;p&gt;Default namespace for elements; especially in the context of HTML&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1457 created</title>
   <pubDate>Wed, 18 Sep 2024 12:36:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1457</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1457</guid>
   <description>&lt;div&gt;&lt;p&gt;Common name for maps &amp;amp; arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Past thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/qt4cg/qtspecs/issues/826#issuecomment-1821359131&lt;/li&gt;
&lt;li&gt;https://github.com/qt4cg/qtspecs/issues/1456#issuecomment-2358257374 ff.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Copied from Michael:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It would be great if we could agree on a collective term for "maps and arrays". "Structured item" feels too generic to me. I've toyed with terms like "tabulation", "tabula", "composition", "dataset", "compendium", "aggregate".
Perhaps "combo"? It's best to have a word that stands out from the crowd if we can't find one whose meaning is self-explanatory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1381 closed</title>
   <pubDate>Wed, 18 Sep 2024 11:56:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1381</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1381</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-uri: Observations (cont.)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1387 closed</title>
   <pubDate>Wed, 18 Sep 2024 11:56:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1387</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1387</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:build-uri: Observations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1456 created</title>
   <pubDate>Tue, 17 Sep 2024 22:30:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1456</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1456</guid>
   <description>&lt;div&gt;&lt;p&gt;Filtering by type in lookup expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have dropped the syntax &lt;code&gt;??type(T)&lt;/code&gt; for filtering the results of lookup expressions, because of problems with syntax ambiguity. This issue seeks an alternative.&lt;/p&gt;
&lt;p&gt;Although selection by type also makes sense with shallow lookup, it is most relevant with deep lookup. The main need arises with intermediate steps of a path such as &lt;code&gt;?? X ?? Y&lt;/code&gt; which gives a dynamic error if X selects something that is not a map or array. This is consistent at one level with &lt;code&gt;// X // Y&lt;/code&gt;, except that &lt;code&gt;// X&lt;/code&gt; can never select something that isn't a node.&lt;/p&gt;
&lt;p&gt;The main problems with filtering using an &lt;code&gt;[. instance of record(p, q)]&lt;/code&gt; predicate is that it's very long-winded. For example, if we want to select only those members of a selected array that are sequences of a particular record type, without flattening everything else, we have to write something like &lt;code&gt;?? values::* ?[. instance of record(p, q)+] ? *&lt;/code&gt;, which is a bit of a nightmare.&lt;/p&gt;
&lt;p&gt;Starting from the end goal, I would like to be able to write something close to &lt;code&gt;??record(first, last)&lt;/code&gt; to select all the items of this record type at any depth. We know that syntax doesn't work, because &lt;code&gt;??NCName&lt;/code&gt; is already taken. That's also true for &lt;code&gt;??items::record(first, last)&lt;/code&gt;, unless we change the rules for what can appear after &lt;code&gt;::&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, there's another syntax hazard: what we want here is a SequenceType, not an ItemType, and that means that it can contain a trailing &lt;code&gt;?&lt;/code&gt; occurrence indicator, which is easily confused with the next lookup operator in a path.&lt;/p&gt;
&lt;p&gt;Looking at it from all angles, I do feel the best solution is to prefix the &lt;code&gt;record(first, last)&lt;/code&gt; with a marker character so that we know we've got a type filter here. Characters that might do the job include &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;. Of these, my preference remains &lt;code&gt;~&lt;/code&gt;, for three reasons:&lt;/p&gt;
&lt;p&gt;(a) it's currently unused: overloading a different symbol is more likely to cause visual confusion
(b) one of the traditional uses of &lt;code&gt;~&lt;/code&gt; is to indicate a "matches" or "is kind of like" relationship.
(c) there's a mnemonic association between "tilde" and "type" (compare "at" and "attribute")&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1324 closed</title>
   <pubDate>Tue, 17 Sep 2024 21:27:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1324</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1324</guid>
   <description>&lt;div&gt;&lt;p&gt;Executable specifications&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1335 closed</title>
   <pubDate>Tue, 17 Sep 2024 21:25:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1335</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1335</guid>
   <description>&lt;div&gt;&lt;p&gt;Data Model primitives for Maps and Arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1455 created</title>
   <pubDate>Tue, 17 Sep 2024 21:03:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1455</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1455</guid>
   <description>&lt;div&gt;&lt;p&gt;1445 Drop number-formatter option, retain string value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1445&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1454 created</title>
   <pubDate>Tue, 17 Sep 2024 18:29:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1454</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1454</guid>
   <description>&lt;div&gt;&lt;p&gt;1449 Relax rules on multiple xsl:includes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1449&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1453 created</title>
   <pubDate>Tue, 17 Sep 2024 17:47:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1453</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1453</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo in load-xquery-module example&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1451&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1372 closed</title>
   <pubDate>Tue, 17 Sep 2024 16:17:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1372</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1372</guid>
   <description>&lt;div&gt;&lt;p&gt;Unknown option: FORG0013 → XPTY0004&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1431 closed</title>
   <pubDate>Tue, 17 Sep 2024 16:17:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1431</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1431</guid>
   <description>&lt;div&gt;&lt;p&gt;1372 Unknown option: FORG0013 → XPTY0004&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1379 closed</title>
   <pubDate>Tue, 17 Sep 2024 16:14:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1379</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1379</guid>
   <description>&lt;div&gt;&lt;p&gt;Circular dependencies: XQDY0054 vs. XPST0008 vs. optional errors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1432 closed</title>
   <pubDate>Tue, 17 Sep 2024 16:14:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1432</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1432</guid>
   <description>&lt;div&gt;&lt;p&gt;1379 Initializing expression: Allow self references&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1364 closed</title>
   <pubDate>Tue, 17 Sep 2024 16:09:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1364</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1364</guid>
   <description>&lt;div&gt;&lt;p&gt;1314 Change to type() syntax to fix ambiguity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1314 closed</title>
   <pubDate>Tue, 17 Sep 2024 16:09:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1314</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1314</guid>
   <description>&lt;div&gt;&lt;p&gt;Ambiguity in XPath EBNF - Lookup with TypeQualifier vs DynamicFunctionCall&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1414 closed</title>
   <pubDate>Tue, 17 Sep 2024 16:07:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1414</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1414</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT spec abstract, introduction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1389 closed</title>
   <pubDate>Tue, 17 Sep 2024 16:05:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1389</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1389</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:while-do: Optional error: will not terminate&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1440 closed</title>
   <pubDate>Tue, 17 Sep 2024 16:04:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1440</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1440</guid>
   <description>&lt;div&gt;&lt;p&gt;1387 Another tweak to build-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1452 created</title>
   <pubDate>Tue, 17 Sep 2024 14:55:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1452</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1452</guid>
   <description>&lt;div&gt;&lt;p&gt;Links from the agendas/minutes to the dashboard don't redirect when the PR is no longer on the dashboard&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Could they?&lt;/p&gt;
&lt;p&gt;S.M.O.P. I suppose.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1451 created</title>
   <pubDate>Tue, 17 Sep 2024 13:33:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1451</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1451</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor syntax errors in FO examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The example for &lt;code&gt;fn-load-xquery-module&lt;/code&gt; contains I think an errant semicolon:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $expr := "2 + 2"
let $module := `xquery version "4.0"; 
                module namespace dyn="http://example.com/dyn";
                declare %public variable $dyn:value := {$expr};`
let $exec := load-xquery-module("http://example.com/dyn", 
                                {'content':$module}); 
let $variables := $exec?variables
return $variables(QName("http://example.com/dyn", "value"))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The semicolon after the third &lt;code&gt;let&lt;/code&gt; is not permitted by the grammar - it only appears as a separator in &lt;code&gt;Version&lt;/code&gt;, &lt;code&gt;Module&lt;/code&gt; and &lt;code&gt;Prolog&lt;/code&gt;. Removing that semicolon permits a parse under the current grammar.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #832 closed</title>
   <pubDate>Tue, 17 Sep 2024 11:32:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/832</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-832</guid>
   <description>&lt;div&gt;&lt;p&gt;77 Lookup returning path selection&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1450 created</title>
   <pubDate>Tue, 17 Sep 2024 10:12:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1450</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1450</guid>
   <description>&lt;div&gt;&lt;p&gt;Syntax of computed element and attribute constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The syntax of computed element and attribute constructors causes parsing problems, and problems in extending the grammar (for example it restricts the contexts in which bare-brace map constructors can appear).&lt;/p&gt;
&lt;p&gt;In the syntax &lt;code&gt;element|attribute _name_ { _content-expression_ }&lt;/code&gt; I propose that:&lt;/p&gt;
&lt;p&gt;(a) it should be possible to use a &lt;code&gt;StringTemplate&lt;/code&gt; in place of the &lt;em&gt;name&lt;/em&gt;. This will normally just be the name enclosed in backticks but interpolated expressions are allowed.&lt;/p&gt;
&lt;p&gt;(b) reserved names should be disallowed. This is a backwards-incompatible change. The reserved names are the non-delimiting terminal symbols listed in A.3.2. We should add a warning that additional names might be reserved in future versions, and advise use of backticks.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1449 created</title>
   <pubDate>Tue, 17 Sep 2024 07:41:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1449</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1449</guid>
   <description>&lt;div&gt;&lt;p&gt;Discussion: include/import of files.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I don't especially do this.&lt;/p&gt;
&lt;p&gt;a) because the environment that we run XSLT in (95% of the time) doesnt support it
b) because its too rigid to use (maybe I'm doing it wrong).&lt;/p&gt;
&lt;p&gt;Motivation:&lt;/p&gt;
&lt;p&gt;I have 'module' List.xsl lets say that models lists, and has a function (in psuedo XPath so you can see the types)
(a module contains constructors and ideally all functions related to, here, a list)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;function tryHead($xs as list()) as maybe() &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I have 'module' Maybe.xsl lets say that models Maybe&lt;/p&gt;
&lt;p&gt;&lt;code&gt;function toList($xs as maybe()) as list() &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So Maybe.xsl needs to know about List.xsl and List.xsl needs to know about Maybe.xsl&lt;/p&gt;
&lt;p&gt;if I use xsl:include or xsl:import (in saxon) I get:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;The stylesheet module includes/imports itself directly or indirectly&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(which I'm happy reflects the correct behaviour given the spec - i.e. I don't think this is a bug in the implementation)&lt;/p&gt;
&lt;p&gt;Given that I CAN write this cycle in a single file, without restrictions on the order of the constructs (i.e. this isnt a restriction of the language itself - this isnt alway true in other languages), it seems less than ideal that I can't freely compose files in order to replicate the situation an allow decomposition into logical files.&lt;/p&gt;
&lt;p&gt;(I expect this is a consequence of the rules around priority of templates, which I am broadly ignorant of, and to be honest, largely not directly concerned with - I don't use this to 'compose' templates, but to write 'function' libraries)&lt;/p&gt;
&lt;p&gt;(MK has answered a question in stack overflow related to this, which solved the issue by reorganising the files, which is what I currently do, but its not ideal that I cannot decompose and test code in isolation)&lt;/p&gt;
&lt;p&gt;Is this worth resolving?&lt;/p&gt;
&lt;p&gt;Many years ago I was a C programmer, and I remember a similar issue that was resolved with #define, whereby header files were imported something like this (excuse my made up C syntax)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#ifndef _Maybe_
#include "Maybe.h"
#endifndef
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then Maybe.h would define &lt;code&gt;_Maybe_&lt;/code&gt;, this would mean, if you followed the idiom, that the file was included by the preprocessor, at most once (I'm not suggesting this mechanism is directly applicable, just that this is a common issue elsewhere).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1448 created</title>
   <pubDate>Mon, 16 Sep 2024 16:53:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1448</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1448</guid>
   <description>&lt;div&gt;&lt;p&gt;Operations on the dateTime family of types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Now that we support choice types in function signatures, we can easily generalize functions such as &lt;code&gt;year-from-dateTime&lt;/code&gt; to work on all types in the dateTime family (specifically dateTime, date, time, gYear, gYearMonth, gMonth, gMonthDay, gDay). A request for a component that is not present in the value returns ().&lt;/p&gt;
&lt;p&gt;We can apply this to all seven X-from-dateTime() functions.&lt;/p&gt;
&lt;p&gt;Of course this makes the X-from-date() and X-from-time() versions redundant, but that's not a problem.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1447 created</title>
   <pubDate>Mon, 16 Sep 2024 16:35:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1447</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1447</guid>
   <description>&lt;div&gt;&lt;p&gt;1446 Rephrase conformance rule on xs:dateTime limits&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1446&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1446 created</title>
   <pubDate>Mon, 16 Sep 2024 14:32:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1446</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1446</guid>
   <description>&lt;div&gt;&lt;p&gt;Limits on xs:dateTime&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Section 9.1.1 says&lt;/p&gt;
&lt;p&gt;All minimally conforming processors must support positive year values with a minimum of 4 digits (i.e., YYYY)&lt;/p&gt;
&lt;p&gt;The word "minimum" here is ambiguous.&lt;/p&gt;
&lt;p&gt;I suggest&lt;/p&gt;
&lt;p&gt;All minimally conforming processors must support year values in the range 1 to 9999.&lt;/p&gt;
&lt;p&gt;For bonus points, drop the use of the undefined term "minimally conforming", and link instead to something defined in section 1.2 Conformance.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1445 created</title>
   <pubDate>Mon, 16 Sep 2024 11:34:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1445</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1445</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:xml-to-json: `number-formatter` option&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I try to, but I don’t get happy with the &lt;code&gt;number-formatter&lt;/code&gt; option of &lt;code&gt;fn:xml-to-json&lt;/code&gt;. It results in a lot of special-casing at serialization time for a very special case. More generally, …&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The option would be much more helpful for outputting maps and arrays as JSON with at serialization time, but it is not available as standard serialization parameter.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:xml-to-json&lt;/code&gt; represents numbers as text nodes, so numbers already have a string representation. If needed, they could easily be preprocessed before being serialized as JSON.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I imagine that the major use cases for the option will be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to avoid scientific representation for doubles, and&lt;/li&gt;
&lt;li&gt;to be able to serialize &lt;code&gt;INF&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Couldn’t we simply allow numeric string values (i.e., the children of &lt;code&gt;fn:number&lt;/code&gt; elements) to be output without changes?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;'1000000' =&amp;gt; json-to-xml() =&amp;gt; xml-to-json()  (: 1000000 instead of 1.0E6 :)
xml-to-json(&amp;lt;fn:number&amp;gt;INF&amp;lt;/fn:number&amp;gt;)      (: INF instead of error :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We already have the &lt;code&gt;number-parser&lt;/code&gt; option, which allows us to generate a string representation for numbers that will be suitable for being converted back with &lt;code&gt;fn:xml-to-json&lt;/code&gt;. For other cases, the XML source can easily be updated before being passed to &lt;code&gt;fn:xml-to-json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we really want to keep the option, …&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We should add examples for its usage in the spec.&lt;/li&gt;
&lt;li&gt;We need more tests.&lt;/li&gt;
&lt;li&gt;I would suggest using the function type &lt;code&gt;(fn(xs:untypedAtomic) as xs:untypedAtomic)?&lt;/code&gt;, similar as for &lt;code&gt;fn:replace&lt;/code&gt; and &lt;code&gt;fn:json-to-xml&lt;/code&gt; (this would allow things like &lt;code&gt;xml-to-json($input, { 'number-formatter': fn { . + 1 } })&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;We should also add it as a general serialization parameter to be able to write:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;serialize(xs:double('NaN'), {
  'method': 'json',
  'number-formatter': fn($n) { if(is-NaN($n)) then '"NaN"' else $n }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it’s too much hassle to introduce it as a general serialization parameter, we should at least provide it for &lt;code&gt;fn:serialize&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1444 created</title>
   <pubDate>Mon, 16 Sep 2024 10:42:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1444</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1444</guid>
   <description>&lt;div&gt;&lt;p&gt;Implement improvement to bibligraphy entry for IEEE 802.3&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Thank you, Wendell.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1443 closed</title>
   <pubDate>Mon, 16 Sep 2024 10:29:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1443</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1443</guid>
   <description>&lt;div&gt;&lt;p&gt;CSS tweaks for productions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1443 created</title>
   <pubDate>Mon, 16 Sep 2024 10:29:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1443</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1443</guid>
   <description>&lt;div&gt;&lt;p&gt;CSS tweaks for productions&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Make the productions a little easier to read by removing the border and background on &lt;code&gt;code&lt;/code&gt; elements in production tables.&lt;/li&gt;
&lt;li&gt;Make the background color for production notes a little less ... intense.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1441 closed</title>
   <pubDate>Mon, 16 Sep 2024 10:27:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1441</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1441</guid>
   <description>&lt;div&gt;&lt;p&gt;1396 Improve presentation of grammar rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1442 created</title>
   <pubDate>Sun, 15 Sep 2024 10:12:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1442</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1442</guid>
   <description>&lt;div&gt;&lt;p&gt;1394 Add new default priority rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds rules for the default priority of new match pattern options such as &lt;code&gt;element(p:*)&lt;/code&gt; and &lt;code&gt;element(p|q)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fix #1394&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1441 created</title>
   <pubDate>Sat, 14 Sep 2024 18:13:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1441</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1441</guid>
   <description>&lt;div&gt;&lt;p&gt;1396 Improve presentation of grammar rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Improves the presentation of grammar rules.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Production numbers are dropped&lt;/li&gt;
&lt;li&gt;The width of the RHS column is increased so there is less line wrapping&lt;/li&gt;
&lt;li&gt;The summary EBNF is alphabetically sorted&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1185 closed</title>
   <pubDate>Sat, 14 Sep 2024 08:39:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1185</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1185</guid>
   <description>&lt;div&gt;&lt;p&gt;1179 array:values, map:values → array:get, map:get&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1440 created</title>
   <pubDate>Thu, 12 Sep 2024 16:03:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1440</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1440</guid>
   <description>&lt;div&gt;&lt;p&gt;1387 Another tweak to build-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In #1387 @ChristianGruen observes that the &lt;code&gt;+&lt;/code&gt; seems to be a special case in the &lt;code&gt;tel:&lt;/code&gt; scheme. In fact, I think we concluded that the special case is that you shouldn't encode the path segment of a non-hierarchical URI.&lt;/p&gt;
&lt;p&gt;This PR attempts to implement that.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1269 closed</title>
   <pubDate>Thu, 12 Sep 2024 11:26:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1269</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1269</guid>
   <description>&lt;div&gt;&lt;p&gt;Could the labeling of grammar productions be improved?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1439 created</title>
   <pubDate>Wed, 11 Sep 2024 06:54:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1439</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1439</guid>
   <description>&lt;div&gt;&lt;p&gt;1235 Function Identity: Treating function items with identical bodies&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1235&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1438 created</title>
   <pubDate>Wed, 11 Sep 2024 06:33:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1438</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1438</guid>
   <description>&lt;div&gt;&lt;p&gt;1322 fn:collation-available (editorial)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1322&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1437 created</title>
   <pubDate>Wed, 11 Sep 2024 06:24:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1437</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1437</guid>
   <description>&lt;div&gt;&lt;p&gt;1325 Variadic System Functions limited to `fn:concat`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1325&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1436 created</title>
   <pubDate>Wed, 11 Sep 2024 06:02:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1436</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1436</guid>
   <description>&lt;div&gt;&lt;p&gt;1323 Function parameters names: $href → $uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1323&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1435 created</title>
   <pubDate>Wed, 11 Sep 2024 05:37:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1435</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1435</guid>
   <description>&lt;div&gt;&lt;p&gt;1421 fn:unix-dateTime: Revisions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1421&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1434 created</title>
   <pubDate>Wed, 11 Sep 2024 05:26:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1434</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1434</guid>
   <description>&lt;div&gt;&lt;p&gt;1373 XQFO: Editorial&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1373&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1433 created</title>
   <pubDate>Wed, 11 Sep 2024 05:09:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1433</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1433</guid>
   <description>&lt;div&gt;&lt;p&gt;1422 fn:hash: Revision&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1422&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1432 created</title>
   <pubDate>Wed, 11 Sep 2024 04:47:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1432</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1432</guid>
   <description>&lt;div&gt;&lt;p&gt;1379 Initializing expression: Allow self references&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With function declarations, recursive functions can be declared:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function local:factorial($x) {
  if($x &amp;gt; 1) then $x + local:factorial($x - 1) else $x
};
local:factorial(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should allow the same for variable declarations:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare variable $factorial := fn($x) {
  if($x &amp;gt; 1) then $x + $factorial($x - 1) else $x
};
$factorial(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I believe it is sufficient to simplify the definition of &lt;em&gt;initializing expressions&lt;/em&gt; and drop the exception “other than the variable being declared”.&lt;/p&gt;
&lt;p&gt;Related: https://www.w3.org/Bugs/Public/show_bug.cgi?id=15791 (the static dependency check was given up before due to &lt;code&gt;fn:function-lookup&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Closes #1379&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1431 created</title>
   <pubDate>Wed, 11 Sep 2024 04:26:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1431</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1431</guid>
   <description>&lt;div&gt;&lt;p&gt;1372 Unknown option: FORG0013 → XPTY0004&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1372&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 089 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 10 Sep 2024 16:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/09-10</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-09-10</guid>
</item><item>
   <title>Issue #1209 closed</title>
   <pubDate>Tue, 10 Sep 2024 17:26:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1209</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1209</guid>
   <description>&lt;div&gt;&lt;p&gt;1183 Add transient mode and the transient{} expression&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1426 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:35:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1426</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1426</guid>
   <description>&lt;div&gt;&lt;p&gt;Byte ordering of CRC-32 hash result&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1428 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:35:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1428</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1428</guid>
   <description>&lt;div&gt;&lt;p&gt;1426 Add notes on endianness of CRC-32&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1360 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:32:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1360</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1360</guid>
   <description>&lt;div&gt;&lt;p&gt;1348 Some grammar simplifications&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1391 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:30:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1391</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1391</guid>
   <description>&lt;div&gt;&lt;p&gt;Annotations: duplicate names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1393 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:30:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1393</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1393</guid>
   <description>&lt;div&gt;&lt;p&gt;1391 Change function-annotations to return a sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1411 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:27:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1411</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1411</guid>
   <description>&lt;div&gt;&lt;p&gt;uri-structure-record gives type of path-segments property as xs:string?, not xs:string*&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1412 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:27:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1412</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1412</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo in uri-structure-record&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1413 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:23:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1413</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1413</guid>
   <description>&lt;div&gt;&lt;p&gt;Dispose of action QT4CG-080-05, add absolute to parse-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1408 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:20:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1408</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1408</guid>
   <description>&lt;div&gt;&lt;p&gt;The description of XPTY0117 still refers to the "function conversion rules"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1417 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:20:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1417</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1417</guid>
   <description>&lt;div&gt;&lt;p&gt;1408 Fix reference to "function conversion rules" in XPTY0117&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1415 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:16:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1415</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1415</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:item-type needs to be added to the list of XSLT declaration components&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1418 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:16:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1418</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1418</guid>
   <description>&lt;div&gt;&lt;p&gt;1415 Add to lists of XSLT declarations and instructions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1419 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:13:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1419</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1419</guid>
   <description>&lt;div&gt;&lt;p&gt;1337bis Replace a few remaining occurrences of "atomic value"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1423 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:09:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1423</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1423</guid>
   <description>&lt;div&gt;&lt;p&gt;1387b Clarify parse-uri/build-uri encoding rules, and remove options&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1388 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:08:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1388</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1388</guid>
   <description>&lt;div&gt;&lt;p&gt;1387 Clarify the encoding rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1385 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:07:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1385</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1385</guid>
   <description>&lt;div&gt;&lt;p&gt;Quantifier expressions: optional positional argument&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1424 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:07:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1424</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1424</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo in XQuery spec: expresssions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1425 closed</title>
   <pubDate>Tue, 10 Sep 2024 16:06:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1425</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1425</guid>
   <description>&lt;div&gt;&lt;p&gt;1424 Fix typo&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1430 created</title>
   <pubDate>Mon, 9 Sep 2024 10:46:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1430</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1430</guid>
   <description>&lt;div&gt;&lt;p&gt;1427 Add element-number function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1427&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1429 created</title>
   <pubDate>Sun, 8 Sep 2024 15:43:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1429</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1429</guid>
   <description>&lt;div&gt;&lt;p&gt;1403 Align type tests&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;fixes #1403&lt;/p&gt;
&lt;p&gt;Allow Array and Map tests to omit the asterisk to match any array or map.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array()&lt;/code&gt; &amp;lt;&amp;gt; &lt;code&gt;array(*)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map()&lt;/code&gt; &amp;lt;&amp;gt; &lt;code&gt;map(*)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1428 created</title>
   <pubDate>Sat, 7 Sep 2024 21:35:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1428</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1428</guid>
   <description>&lt;div&gt;&lt;p&gt;1426 Add notes on endianness of CRC-32&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1426 (partially; it would also be good to have a better citation to IEEE 802.3)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1427 created</title>
   <pubDate>Sat, 7 Sep 2024 08:27:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1427</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1427</guid>
   <description>&lt;div&gt;&lt;p&gt;Add a function equivalent to xsl:number&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose adding a function to perform node numbering in a manner analogous to xsl:number (but without the formatting aspects, which can be handled using format-integer, and without multi-level numbering).&lt;/p&gt;
&lt;p&gt;I envisage a function along the following lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node-number($node as element(), 
                         $from as (document-node()|element()), 
                         $count as fn($node as element()) as xs:boolean?)
   as xs:integer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function returns the number of element nodes that satisfy all the following conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they are descendants of $from&lt;/li&gt;
&lt;li&gt;they are preceding-or-self nodes of $node&lt;/li&gt;
&lt;li&gt;they satisfy the $count predicate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$node defaults to the context node. $from defaults to the parent of $node. $count defaults to a function that returns true for an element that has the same name as $node, false otherwise.&lt;/p&gt;
&lt;p&gt;With no arguments, node-number() applied to (say) a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element returns the number of preceding-sibling &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements plus one. &lt;em&gt;[Not quite. Under this definition, it would also count &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements that are descendants of a preceding-sibling element]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The rationale for this proposal is (a) to make the core functionality of xsl:number available in environments other than XSLT, and (b) within XSLT, to make it available in contexts such as a predicate of a match pattern where it is currently difficult or impossible to invoke &lt;code&gt;xsl:number&lt;/code&gt; except by wrapping it in a user-defined variable or function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1426 created</title>
   <pubDate>Fri, 6 Sep 2024 17:48:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1426</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1426</guid>
   <description>&lt;div&gt;&lt;p&gt;Byte ordering of CRC-32 hash result&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Test case hash-str-034 takes a 150,000-character string consisting of 50,000 repetitions of the string "ABC", and computes its CRC-32 hash value.&lt;/p&gt;
&lt;p&gt;On Java the result comes back as decimal 105475755, which we translate to 0x06496EAB&lt;/p&gt;
&lt;p&gt;On C# the result comes back as a 4-byte array AB 6E 49 06. My guess is we need to reverse the byte order, but I'd like to understand why...&lt;/p&gt;
&lt;p&gt;I guess we need to say something about byte ordering, but what?&lt;/p&gt;
&lt;p&gt;I tried to find the definitive specification. We simply point to IEEE 802.3 without a specific URI or section or version number. 802.3 actually appears to be a large family of standards. Can we do better than that?&lt;/p&gt;
&lt;p&gt;I'm interested to know whether the specification actually defines the result to be a 32-bit (unsigned?) integer rather than an array of four bytes. If that's the case, then our spec needs to say how the 32-bit integer is converted to a sequence of 4 octets, which is what fn:hash actually returns. The C# example shows that there's more than one way of doing it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1425 created</title>
   <pubDate>Wed, 4 Sep 2024 12:56:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1425</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1425</guid>
   <description>&lt;div&gt;&lt;p&gt;1424 Fix typo&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #1424&lt;/p&gt;
&lt;p&gt;Thank you, Amanda.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1424 created</title>
   <pubDate>Wed, 4 Sep 2024 12:25:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1424</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1424</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo in XQuery spec: expresssions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XQuery 3.1 spec and XQuery 4.0 draft spec both have an extra "s" in the word expressions, showing it as &lt;code&gt;expresssions&lt;/code&gt;. The typo occurs in the C.1 Static Context Components section.&lt;/p&gt;
&lt;p&gt;I know this repo is only for 4.0 work. Should I make a separate issue in the https://github.com/w3c/qtspecs repo?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1423 created</title>
   <pubDate>Wed, 4 Sep 2024 10:01:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1423</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1423</guid>
   <description>&lt;div&gt;&lt;p&gt;1387b Clarify parse-uri/build-uri encoding rules, and remove options&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a slightly more radical alternative to #1388&lt;/p&gt;
&lt;p&gt;In addition to clarifying the encoding rules (maintaining slightly different rules for path segments, query parameters, and fragment identifiers), it removes the &lt;code&gt;path-separator&lt;/code&gt; and &lt;code&gt;query-separator&lt;/code&gt; options.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1422 created</title>
   <pubDate>Wed, 4 Sep 2024 09:17:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1422</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1422</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:hash`: Revision&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We should make the algorithm argument in the the function signature of &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-hash"&gt;&lt;code&gt;fn:hash&lt;/code&gt;&lt;/a&gt; explicit and change the signature from…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:hash(
  $value    as (xs:string | xs:hexBinary | xs:base64Binary)?,	
  $options  as map(*)?  := {}
) as xs:hexBinary?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…to:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:hash(
  $value      as (xs:string | xs:hexBinary | xs:base64Binary)?,	
  $algorithm  as xs:string? := 'MD5',
  $options    as map(*)?  := {}
) as xs:hexBinary?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will happen often enough that the function is used for algorithms other than MD5:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: OLD :) hash("ABC", { "algorithm": "CRC-32" })
(: NEW :) hash("ABC", "CRC-32")
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1421 created</title>
   <pubDate>Wed, 4 Sep 2024 09:05:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1421</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1421</guid>
   <description>&lt;div&gt;&lt;p&gt;`fn:unix-time`: Revisions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In yesterday’s meeting, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-unix-time"&gt;&lt;code&gt;fn:unix-time&lt;/code&gt;&lt;/a&gt; was added to the spec. It was proposed to…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;drop support for negative values and&lt;/li&gt;
&lt;li&gt;change the function name to &lt;code&gt;fn:unix-dateTime&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I sympathize with both suggestions. What do others think?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1420 closed</title>
   <pubDate>Wed, 4 Sep 2024 08:27:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1420</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1420</guid>
   <description>&lt;div&gt;&lt;p&gt;Markup fix&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1420 created</title>
   <pubDate>Wed, 4 Sep 2024 08:27:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1420</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1420</guid>
   <description>&lt;div&gt;&lt;p&gt;Markup fix&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There's a markup error in the hash function that breaks the automatic test build. This PR fixes that.&lt;/p&gt;
&lt;p&gt;(I'm just going to merge this straight away.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1419 created</title>
   <pubDate>Tue, 3 Sep 2024 20:03:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1419</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1419</guid>
   <description>&lt;div&gt;&lt;p&gt;1337bis Replace a few remaining occurrences of "atomic value"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Replace a few remaining occurrences of "atomic value" with "atomic item".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1418 created</title>
   <pubDate>Tue, 3 Sep 2024 19:36:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1418</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1418</guid>
   <description>&lt;div&gt;&lt;p&gt;1415 Add to lists of XSLT declarations and instructions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1415&lt;/p&gt;
&lt;p&gt;Adds xsl:item-type to the list of declarations.
Adds xsl:array. xsl:map, and xsl:map-entry to the list of instructions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1417 created</title>
   <pubDate>Tue, 3 Sep 2024 19:25:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1417</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1417</guid>
   <description>&lt;div&gt;&lt;p&gt;1408 Fix reference to "function conversion rules" in XPTY0117&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1408&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1416 created</title>
   <pubDate>Tue, 3 Sep 2024 18:39:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1416</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1416</guid>
   <description>&lt;div&gt;&lt;p&gt;Key-value pairs: built-in record type `pair`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A built-in record type should be defined for &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-key-value-pair-map"&gt;key-value pair maps&lt;/a&gt;, which currently defined as follows…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A key-value pair map is a map containing two entries, one (with the key &lt;code&gt;"key"&lt;/code&gt;) containing the key part of a key value pair, the other (with the key &lt;code&gt;"value"&lt;/code&gt;) containing the value part of a key value pair.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…as we can expect them to be used more often in the future. Would it be possible/make sense to assign the record type to the &lt;code&gt;xs&lt;/code&gt; namespace (&lt;code&gt;xs:pair&lt;/code&gt;)?&lt;/p&gt;
&lt;p&gt;In addition, we should…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use it consistently in the text (XQFO, deep lookups, etc.),&lt;/li&gt;
&lt;li&gt;replace existing &lt;code&gt;record(key as xs:anyAtomicType, value as item()*)&lt;/code&gt; references with &lt;code&gt;xs:pair&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;rename &lt;code&gt;$input&lt;/code&gt; or &lt;code&gt;$map&lt;/code&gt; arguments to &lt;code&gt;$pair&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples for function signatures to be updated:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:of-pairs(
  $pairs    as xs:pair*,
  $combine  as fn(item()*, item()*) as item()* := fn:op(',')
) as map(*)

map:pair(
  $key    as xs:anyAtomicType,
  $value  as item()*	
) as xs:pair

map:pairs(
  $map  as map(*)	
) as xs:pair*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could add numerous other record types, but maybe we can handle those in separate issue and keep this one focused on key/value pairs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1343 closed</title>
   <pubDate>Tue, 3 Sep 2024 18:27:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1343</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1343</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop the static typing feature&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1344 closed</title>
   <pubDate>Tue, 3 Sep 2024 18:27:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1344</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1344</guid>
   <description>&lt;div&gt;&lt;p&gt;1343 Drop the static typing feature&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1337 closed</title>
   <pubDate>Tue, 3 Sep 2024 18:23:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1337</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1337</guid>
   <description>&lt;div&gt;&lt;p&gt;Atomic value → atomic item&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1361 closed</title>
   <pubDate>Tue, 3 Sep 2024 18:23:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1361</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1361</guid>
   <description>&lt;div&gt;&lt;p&gt;1337 Atomic value becomes atomic item&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #959 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:20:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/959</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-959</guid>
   <description>&lt;div&gt;&lt;p&gt;Milliseconds ↔ xs:dayTimeDuration, Unix time ↔ xs:dateTime&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1358 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:20:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1358</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1358</guid>
   <description>&lt;div&gt;&lt;p&gt;959 fn:unix-dateTime&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1321 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:17:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1321</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1321</guid>
   <description>&lt;div&gt;&lt;p&gt;Leading lone slash&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1367 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:17:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1367</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1367</guid>
   <description>&lt;div&gt;&lt;p&gt;1321 leading lone slash&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1401 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:14:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1401</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1401</guid>
   <description>&lt;div&gt;&lt;p&gt;Casting from duration to string&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1409 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:14:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1409</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1409</guid>
   <description>&lt;div&gt;&lt;p&gt;1401 Rewrite of F+O section 20, Casting&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1368 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:14:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1368</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1368</guid>
   <description>&lt;div&gt;&lt;p&gt;Further improvements to BuiltInKeywords test needed&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1316 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:11:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1316</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1316</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath: type declarations in quantified expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1384 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:11:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1384</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1384</guid>
   <description>&lt;div&gt;&lt;p&gt;1316 Type declarations in quantified expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1228 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:08:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1228</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1228</guid>
   <description>&lt;div&gt;&lt;p&gt;– Adding the BLAKE3 hashing algorithm to fn:hash&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1193 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:05:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1193</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1193</guid>
   <description>&lt;div&gt;&lt;p&gt;Parsing Functions: Empty input&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1231 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:05:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1231</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1231</guid>
   <description>&lt;div&gt;&lt;p&gt;1193 Parsing Functions: Empty input&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1339 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:02:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1339</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1339</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop unordered mode&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1342 closed</title>
   <pubDate>Tue, 3 Sep 2024 17:02:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1342</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1342</guid>
   <description>&lt;div&gt;&lt;p&gt;1339 Deprecate ordering mode declaration&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1350 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:58:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1350</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1350</guid>
   <description>&lt;div&gt;&lt;p&gt;unparsed-text-available() signature&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1352 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:58:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1352</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1352</guid>
   <description>&lt;div&gt;&lt;p&gt;1350 Fix signature for unparsed-text-available&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1347 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:56:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1347</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1347</guid>
   <description>&lt;div&gt;&lt;p&gt;The escape-solidus option should apply to xml-to-json&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1353 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:56:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1353</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1353</guid>
   <description>&lt;div&gt;&lt;p&gt;1347 Add escape-solidus option to xml-to-json function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1346 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:54:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1346</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1346</guid>
   <description>&lt;div&gt;&lt;p&gt;Typos in fn:format-number&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1359 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:53:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1359</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1359</guid>
   <description>&lt;div&gt;&lt;p&gt;1346 Fix minor typos in format-number&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1369 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:50:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1369</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1369</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:round: `rounding-mode` → `mode`?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1370 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:50:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1370</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1370</guid>
   <description>&lt;div&gt;&lt;p&gt;1369 fn:round: rounding-mode → mode&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1320 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:47:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1320</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1320</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-uri: Observations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1380 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:47:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1380</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1380</guid>
   <description>&lt;div&gt;&lt;p&gt;1320 Attempt to resolve a bug in parse-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1374 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:44:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1374</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1374</guid>
   <description>&lt;div&gt;&lt;p&gt;Duplicate keys in map constructor&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1383 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:44:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1383</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1383</guid>
   <description>&lt;div&gt;&lt;p&gt;1374 - allow static error for duplicate keys&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1382 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:41:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1382</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1382</guid>
   <description>&lt;div&gt;&lt;p&gt;Missing XSLT error code&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1386 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:41:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1386</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1386</guid>
   <description>&lt;div&gt;&lt;p&gt;1382 add error code XTSE4040&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1390 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:41:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1390</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1390</guid>
   <description>&lt;div&gt;&lt;p&gt;1368 built in keywords improvements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1398 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:38:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1398</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1398</guid>
   <description>&lt;div&gt;&lt;p&gt;1397 Add missing change log entry for constructor functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1397 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:38:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1397</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1397</guid>
   <description>&lt;div&gt;&lt;p&gt;Missing change log entry for zero-arity constructor functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1395 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:36:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1395</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1395</guid>
   <description>&lt;div&gt;&lt;p&gt;Choice item types: subtyping&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1400 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:36:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1400</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1400</guid>
   <description>&lt;div&gt;&lt;p&gt;1395 Revise rules for subtyping of choice item types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1402 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:33:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1402</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1402</guid>
   <description>&lt;div&gt;&lt;p&gt;Update schema for XSLT 4.0 to include agreed syntax changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1405 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:30:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1405</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1405</guid>
   <description>&lt;div&gt;&lt;p&gt;1404 Change fn:invisible-xml grammar parameter to xs:string?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1404 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:30:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1404</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1404</guid>
   <description>&lt;div&gt;&lt;p&gt;Invisible-xml function: why is $grammar of type item()?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #917 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:29:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/917</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-917</guid>
   <description>&lt;div&gt;&lt;p&gt;Better support for typed maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1371 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:29:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1371</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1371</guid>
   <description>&lt;div&gt;&lt;p&gt;(type)switch: braces after `case` keyword&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1399 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:27:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1399</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1399</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT fixed-namespaces - contradictory statements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1406 closed</title>
   <pubDate>Tue, 3 Sep 2024 16:27:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1406</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1406</guid>
   <description>&lt;div&gt;&lt;p&gt;1399 clarify fixed-namespaces spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1415 created</title>
   <pubDate>Tue, 3 Sep 2024 11:11:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1415</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1415</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:item-type needs to be added to the list of XSLT declaration components&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;https://qt4cg.org/specifications/xslt-40/Overview.html#dt-declaration needs &lt;code&gt;xsl:item-type&lt;/code&gt; adding&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1414 created</title>
   <pubDate>Tue, 3 Sep 2024 02:22:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1414</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1414</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT spec abstract, introduction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As currently written, preliminary parts of the the XSLT specs are out of sync with other specs, or have inconsistencies.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The section called Abstract mostly describes what's different in 4.0. That despite a section shortly later specially devoted to the topic.&lt;/li&gt;
&lt;li&gt;The section called Abstract does not lead with its best foot forward: the language does a &lt;em&gt;lot&lt;/em&gt; more than XML-to-XML transforms.&lt;/li&gt;
&lt;li&gt;The section called "What is XSLT?" never answers the question posed in the header.&lt;/li&gt;
&lt;li&gt;The section called "What is XSLT?" begins with a sentence that both repeats earlier material and is not germane to the header.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the attached PR, I have proposed moving several paragraphs. I have not intentionally edited them. I have also taken a stab at defining XSLT. I have tried to calibrate the Abstract so that it is both sparing, in the spirit of the XQFO abstract.&lt;/p&gt;
&lt;p&gt;I don't think that what I've put in here is any way finalized. But I hope it is a step in the right direction, and a good basis for further refinement.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1413 created</title>
   <pubDate>Mon, 2 Sep 2024 16:00:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1413</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1413</guid>
   <description>&lt;div&gt;&lt;p&gt;Dispose of action QT4CG-080-05, add absolute to parse-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR disposes of my action to add &lt;code&gt;absolute&lt;/code&gt; to the output of &lt;code&gt;fn:parse-uri&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The rules that define an absolute URI: "has a scheme", "does not have a fragment identifier", "is a hierarchical scheme" don't fit neatly into a single place, so there are two different places where the setting is considered.&lt;/p&gt;
&lt;p&gt;Because of this, I think it's simpler to set &lt;code&gt;absolute&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; when the URI is absolute, but not to &lt;code&gt;false&lt;/code&gt; when it isn't. That could be rectified with a bit more prose.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1412 created</title>
   <pubDate>Mon, 2 Sep 2024 15:39:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1412</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1412</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo in uri-structure-record&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1411&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1411 created</title>
   <pubDate>Sat, 31 Aug 2024 11:05:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1411</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1411</guid>
   <description>&lt;div&gt;&lt;p&gt;uri-structure-record gives type of path-segments property as xs:string?, not xs:string*&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current spec &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#uri-structure-record"&gt;defines &lt;code&gt;uri-structure-record&lt;/code&gt;&lt;/a&gt; as having a&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path-segments? 	as xs:string?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;property, which doesn't make sense and also contradicts the example given later:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The unescaped form is easily accessible from path-segments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;("", "path", "to", "a/b")
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;It should be &lt;code&gt;xs:string*&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1410 closed</title>
   <pubDate>Fri, 30 Aug 2024 16:53:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1410</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1410</guid>
   <description>&lt;div&gt;&lt;p&gt;Ignore this PR&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1410 created</title>
   <pubDate>Fri, 30 Aug 2024 09:58:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1410</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1410</guid>
   <description>&lt;div&gt;&lt;p&gt;Ignore this PR&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Just testing&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1409 created</title>
   <pubDate>Thu, 29 Aug 2024 11:32:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1409</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1409</guid>
   <description>&lt;div&gt;&lt;p&gt;1401 Rewrite of F+O section 20, Casting&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1401&lt;/p&gt;
&lt;p&gt;The main changes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The three derived types xs:integer, xs:dayTimeDuration, and xs:yearMonthDuration are no longer treated as primitive for the purpose of this section. They are now treated as derived types, but given special status where necessary as "quasi-primitive".&lt;/li&gt;
&lt;li&gt;In places where the F+O rules give the same result as the canonical representation in XSD 1.1, we now defer to XSD 1.1 rather than replicating the rules. Many of the rules originate with XPath 2.0, which was published before XSD 1.1, but which anticipated some of the changes in XSD 1.1, for example the use of a seven-component model for dates/times, and a two-component model for durations. XPath 3.0/3.1 failed to take advantage of the resulting opportunity for rationalisation.&lt;/li&gt;
&lt;li&gt;Generally the language is a bit less terse, with more notes and examples&lt;/li&gt;
&lt;li&gt;The rules have more to say about the type annotation of the result. In some places the spec appeared to imply that the type annotation on the result must be the target type; in others it appeared to imply that the type annotation must be unchanged from the source (for example 19.1.1 "If ST is xs:string or a type derived from xs:string, TV is SV. [presumably with unchanged type annotation]). The spec is now hopefully clearer that the result TV MUST be an instance of TT and MAY be an instance of some other type derived from TT, especially in the case where the value is unchanged.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1408 created</title>
   <pubDate>Thu, 29 Aug 2024 11:11:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1408</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1408</guid>
   <description>&lt;div&gt;&lt;p&gt;The description of XPTY0117 still refers to the "function conversion rules"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The description of XPTY0117 still refers to the "function conversion rules" rather than the "coercion rules".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1407 created</title>
   <pubDate>Thu, 29 Aug 2024 09:58:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1407</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1407</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve the spec prose and table of content layout for types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This has been discussed on Slack. The key points are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The terminology in the table of content is mixed (Union Types vs Function Tests), focused on the grammar not the organisation.&lt;/li&gt;
&lt;li&gt;The test sections (Function Test, etc.) lack definitions and overviews of the item types like is done with the other types, such as choice item types.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also think the other sections like the &lt;strong&gt;Subtype Relationships&lt;/strong&gt; are largely fine as they are as they are dealing with specific rules around subtypes, coercion, etc.&lt;/p&gt;
&lt;p&gt;So I propose:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding an overview of what the function types/tests, etc. are like is done with the union types, etc.&lt;/li&gt;
&lt;li&gt;Adding a note to the maps overview similar to "A map is a function of the form &lt;code&gt;function (xs:string) as item()*&lt;/code&gt; that can be passed a key name and returns the value of that key entry."&lt;/li&gt;
&lt;li&gt;Adding a note to the arrays overview similar to "An array is a function of the form &lt;code&gt;function (xs:integer) as item()*&lt;/code&gt; that returns the items of the array at the specified index, or raises a FO.... error if the index is out of bounds."&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also propose renaming and reorganizing parts of the table of contents as follows (omitting unaffected sections):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-types"&gt;3 Types&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-sequencetype-syntax"&gt;3.1 Sequence Types&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-sequence-type-examples"&gt;3.1.1 Examples of Sequence Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-sequencetype-matching"&gt;3.1.2 Sequence Type Matching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-matching-item"&gt;3.2 Item Types&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#general-item-types"&gt;3.2.1 General item types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-atomic-types"&gt;3.2.2 Atomic Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-union-types"&gt;3.2.3 Union Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-namespace-sensitive"&gt;3.2.4 Namespace-sensitive Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-choice-item-types"&gt;3.2.5 Δ Choice Item Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-enumeration-types"&gt;3.2.6 Δ Enumeration Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#node-types"&gt;3.2.7 Δ Node Types&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-simple-node-tests"&gt;3.2.7.1 Simple Nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-element-test"&gt;3.2.7.2 Δ Elements&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-schema-element-test"&gt;3.2.7.2.1 Schema Elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-attribute-test"&gt;3.2.7.3 Δ Attributes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-schema-attribute-test"&gt;3.2.7.3.1 Schema Attributes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-function-test"&gt;3.2.8 Δ Function Types&lt;/a&gt; ~ NOTE: Covers the current 3.2.8.1 Δ Function Test section.&lt;/li&gt;
&lt;li&gt;3.2.9 Maps and Records
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-map-test"&gt;3.2.9.1 Map Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-record-test"&gt;3.2.9.2 Δ Record Types&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-recursive-record-tests"&gt;3.2.9.2.1 Recursive Record Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-array-test"&gt;3.2.10 Array Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And to make the heading names in the subtype section consistent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-sequencetype-subtype"&gt;3.3 Δ Subtype Relationships&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-seqtype-subtype"&gt;3.3.1 Subtypes of Sequence Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-itemtype-subtype"&gt;3.3.2 Subtypes of Item Types&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-item-subtype-general"&gt;3.3.2.1 General Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-item-subtype-choice"&gt;3.3.2.2 Choice Item Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-item-subtype-atomic"&gt;3.3.2.3 Atomic and Union Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.3.2.4 Nodes
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-item-subtype-nodes"&gt;3.3.2.4.1 General Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-item-subtype-elements"&gt;3.3.2.4.1 Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-item-subtype-attributes"&gt;3.3.2.4.1 Attributes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-item-subtype-functions"&gt;3.3.2.5 Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-item-subtype-maps"&gt;3.3.2.6 Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-item-subtype-arrays"&gt;3.3.2.7 Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-item-subtype-records"&gt;3.3.2.8 Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-itemtype-subtype-aliases"&gt;3.3.2.9 Named Items&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1406 created</title>
   <pubDate>Wed, 28 Aug 2024 13:50:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1406</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1406</guid>
   <description>&lt;div&gt;&lt;p&gt;1399 clarify fixed-namespaces spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1399.&lt;/p&gt;
&lt;p&gt;The only change is to remove a sentence from &lt;code&gt;&amp;lt;note&amp;gt;...&amp;lt;/note&amp;gt;&lt;/code&gt; markup.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1405 created</title>
   <pubDate>Wed, 28 Aug 2024 06:24:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1405</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1405</guid>
   <description>&lt;div&gt;&lt;p&gt;1404 Change fn:invisible-xml grammar parameter to xs:string?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1404 created</title>
   <pubDate>Tue, 27 Aug 2024 21:12:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1404</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1404</guid>
   <description>&lt;div&gt;&lt;p&gt;Invisible-xml function: why is $grammar of type item()?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the &lt;code&gt;invisible-xml&lt;/code&gt; function, the $grammar argument has type &lt;code&gt;item()?&lt;/code&gt;. There's no evident reason why it isn't &lt;code&gt;xs:string?&lt;/code&gt;; there's no clue in the specification or example what it might mean to supply something that isn't a string (or an empty sequence).&lt;/p&gt;
&lt;p&gt;Note that declaring it as &lt;code&gt;item()&lt;/code&gt; rather than &lt;code&gt;xs:string?&lt;/code&gt; suppresses atomization of the supplied value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1403 created</title>
   <pubDate>Tue, 27 Aug 2024 15:51:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1403</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1403</guid>
   <description>&lt;div&gt;&lt;p&gt;Align AnyMapTest, AnyArrayTest and with ElementTest&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I always wondered why ElementTests for &lt;em&gt;any element&lt;/em&gt; can be written as &lt;code&gt;element()&lt;/code&gt; which is equivalent to &lt;code&gt;element(*)&lt;/code&gt; but &lt;code&gt;as map()&lt;/code&gt; and &lt;code&gt;as array()&lt;/code&gt; are not permitted and always have to include the asterisk (&lt;code&gt;map(*)&lt;/code&gt;) .&lt;/p&gt;
&lt;p&gt;This is still the case even in XPath4 and I think we should have a look, if this can be omitted.
It does not add any value IMHO, but maybe I am overlooking something important.&lt;/p&gt;
&lt;p&gt;https://qt4cg.org/specifications/xquery-40/xquery-40.html#doc-xquery40-ElementTest
https://qt4cg.org/specifications/xquery-40/xquery-40.html#doc-xquery40-ArrayTest
https://qt4cg.org/specifications/xquery-40/xquery-40.html#doc-xquery40-MapTest&lt;/p&gt;
&lt;p&gt;The "fix" would be as simple as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[255]   AnyMapTest   ::=  "map" "(" "*"? ")"
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[265]   AnyArrayTest ::=  "array" "(" "*"? ")"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-- update after comment from @michaelhkay --&lt;/p&gt;
&lt;p&gt;The same does &lt;em&gt;not apply&lt;/em&gt; to FunctionTest as &lt;code&gt;as function()&lt;/code&gt; specifies a zero-arity function wheras &lt;code&gt;as function(*)&lt;/code&gt; matches functions of any arity.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1402 created</title>
   <pubDate>Sun, 25 Aug 2024 11:18:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1402</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1402</guid>
   <description>&lt;div&gt;&lt;p&gt;Update schema for XSLT 4.0 to include agreed syntax changes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Updates the schema for XSLT 4.0 stylesheets to accommodate changes recently agreed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support for xsl:function/@variadic&lt;/li&gt;
&lt;li&gt;Support for extensions to decimal-format properties, for example &lt;code&gt;percent="%:pc"&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1401 created</title>
   <pubDate>Fri, 23 Aug 2024 10:18:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1401</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1401</guid>
   <description>&lt;div&gt;&lt;p&gt;Casting from duration to string&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We've just been examining the rules for casting from duration / dayTimeDuration / yearMonthDuration to string (F+O section 20.1.1) and they are fairly impenetrable: I think we could do better.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We use the phrase "canonical representation as defined in XSD 1.1 part 2"; a more specific reference would be helpful. Mentioning the function &lt;code&gt;·durationCanonicalMap·&lt;/code&gt; would take readers straight to the right place.&lt;/li&gt;
&lt;li&gt;The actual XSD spec has one or two typos, and uses some notations that might not be immediately obvious to every reader, for example &lt;code&gt;|m|&lt;/code&gt; to mean &lt;code&gt;abs(m)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think the best answer to this is to add non-normative examples, which are badly missing from this whole section.&lt;/p&gt;
&lt;p&gt;This would probably require splitting of 20.1.1 into subsections. Alternatively, we could add examples to the string() function, which would have the benefit that we have validation machinery to check that the examples under a specific function are correct; we could point to these examples from 20.1.1.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1400 created</title>
   <pubDate>Thu, 22 Aug 2024 18:49:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1400</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1400</guid>
   <description>&lt;div&gt;&lt;p&gt;1395 Revise rules for subtyping of choice item types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Corrects/clarifies the rules for determining whether A is a subtype of B when either or both is a choice item type.&lt;/p&gt;
&lt;p&gt;Fix #1395&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1399 created</title>
   <pubDate>Thu, 22 Aug 2024 14:41:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1399</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1399</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT fixed-namespaces - contradictory statements&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any one of the strings xsl, xml, xs, xsi, fn, math, map, array, err. This has the effect of binding that particular namespace prefix to the [reserved namespace] with which it is conventionally associated, whether or not the [native namespace bindings] contain a binding for this prefix.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If the namespace prefix is explicitly bound to a different namespace, for example xmlns:math="java:java.util.Math", then that binding takes precedence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:stylsheet fixed-namespaces="math" xmlns:math="java:java.util.Math"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The normative statement implies that "java" is bound to &lt;code&gt;http://www.w3.org/2005/xpath-functions/math&lt;/code&gt;, while the note implies it is bound to &lt;code&gt;"java:java.util.Math"&lt;/code&gt; -- which surely makes more sense. I suspect the intended reading of the normative sentence is "whether or not the [native namespace bindings] contain this binding; but it needs clarifying/correcting.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1398 created</title>
   <pubDate>Thu, 22 Aug 2024 08:59:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1398</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1398</guid>
   <description>&lt;div&gt;&lt;p&gt;1397 Add missing change log entry for constructor functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1397&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1397 created</title>
   <pubDate>Thu, 22 Aug 2024 08:18:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1397</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1397</guid>
   <description>&lt;div&gt;&lt;p&gt;Missing change log entry for zero-arity constructor functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We've changed constructor functions to allow arity zero, but there is no change log entry for this.&lt;/p&gt;
&lt;p&gt;Issue #658, PR #662&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1396 created</title>
   <pubDate>Wed, 21 Aug 2024 23:45:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1396</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1396</guid>
   <description>&lt;div&gt;&lt;p&gt;Rendition of EBNF syntax scraps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the EBNF syntax tabulation, the column width available for the RHS of productions is rather limited, leading to excessive line wrapping, especially where the entire syntax is displayed in Appendix A.&lt;/p&gt;
&lt;p&gt;I haven't been entirely successful in sorting this out, but record my experiments here.&lt;/p&gt;
&lt;p&gt;(a) In the CSS stylesheet qtspecs.css line 169, change the padding from 30px to 10px&lt;/p&gt;
&lt;p&gt;(b) remove all the non-breaking spaces that are inserted after the production number and around the &lt;code&gt;::=&lt;/code&gt; operator. (Search for &lt;code&gt;::=&lt;/code&gt; in xmlspec-2016.xsl&lt;/p&gt;
&lt;p&gt;(c) get rid of the tbody element that surrounds each tr by putting the productions in a prodgroup, achieved by adding a prodgroup element around the line &lt;code&gt;&amp;lt;prodrecap id="BNF-Grammar-prods" ref="BNF-Grammar-prods"/&amp;gt;&lt;/code&gt; (line 43 of ebnf.xml)&lt;/p&gt;
&lt;p&gt;Unfortunately this doesn't seem to allocate extra width to the columns, it merely creates extra whitespace to the right of the table. I can't work out why that is happening.&lt;/p&gt;
&lt;p&gt;Another step would be to remove the final right-hand column containing comments, instead moving the comments to be under the RHS of the production. But the logic here is complex...&lt;/p&gt;
&lt;p&gt;Finally, a pragmatic move would be to reduce the length of the longest production names, such as &lt;code&gt;FunctionSignatureWithDefaults&lt;/code&gt;, which bloat the width of the LH column.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1315 closed</title>
   <pubDate>Wed, 21 Aug 2024 22:19:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1315</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1315</guid>
   <description>&lt;div&gt;&lt;p&gt;12 div-3&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1395 created</title>
   <pubDate>Wed, 21 Aug 2024 16:57:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1395</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1395</guid>
   <description>&lt;div&gt;&lt;p&gt;Choice item types: subtyping&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We say: [with the example changed for clarity]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3.3.2.2 Choice Item Types&lt;/p&gt;
&lt;p&gt;[1] If B is a [choice item type], then A ⊆ B is true if A ⊆ M is true for some item type M among the alternatives of B.&lt;/p&gt;
&lt;p&gt;[2] If A is a [choice item type], then A ⊆ B is true if M ⊆ B is true for every item type M among the alternatives of A.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;Because an [enumeration type] is defined as a choice type of singleton enumerations, these rules have the consequence, for example, that enum("P", "Q") is a subtype of enum("P", "Q", "R").&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, the first condition [1] doesn't hold: &lt;code&gt;enum("P", "Q")&lt;/code&gt; is not a subtype of &lt;code&gt;enum("P")&lt;/code&gt;, nor of &lt;code&gt;enum("Q")&lt;/code&gt;, nor of &lt;code&gt;enum("R")&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But the second condition [2] does hold: &lt;code&gt;enum("P")&lt;/code&gt; and &lt;code&gt;enum("Q")&lt;/code&gt; are both subtypes of &lt;code&gt;enum("P", "Q", "R")&lt;/code&gt;, under rule [1].&lt;/p&gt;
&lt;p&gt;So the rules are far from clear when both A and B are choice item types.&lt;/p&gt;
&lt;p&gt;I think it probably needs a combined rule.&lt;/p&gt;
&lt;p&gt;(i) if both A and B are choice item types, then A ⊆ B is true if every item type a among the alternatives of A satisfies a ⊆ b for some item type b among the alternatives of B.&lt;/p&gt;
&lt;p&gt;The existing two rules are really just special cases of that for singleton choices.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1394 created</title>
   <pubDate>Tue, 20 Aug 2024 16:26:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1394</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1394</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT Default priority for `element(p:*)` etc&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There are new possibilities for node tests used as XSLT patterns, for example &lt;code&gt;element(p:*)&lt;/code&gt;, &lt;code&gt;element(*:local)&lt;/code&gt;, &lt;code&gt;element(p:*, T)&lt;/code&gt;, &lt;code&gt;element(*:local, T)&lt;/code&gt;. These need to have default priorities assigned.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1393 created</title>
   <pubDate>Mon, 19 Aug 2024 10:48:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1393</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1393</guid>
   <description>&lt;div&gt;&lt;p&gt;1391 Change function-annotations to return a sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1391&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changes the data model to clarify exactly what the annotations of a function item are&lt;/li&gt;
&lt;li&gt;Clarifies the XQuery description of what effect annotations in the query prolog have&lt;/li&gt;
&lt;li&gt;Changes the fn:function-annotations function to return a sequence of key value pairs in which there can be duplicate keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1392 created</title>
   <pubDate>Sun, 18 Aug 2024 20:57:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1392</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1392</guid>
   <description>&lt;div&gt;&lt;p&gt;`element(a|b)` vs `(element(a)|element(b))`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have introduced two syntax extensions which achieve the same effect:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;element(a|b)&lt;/code&gt; vs &lt;code&gt;(element(a)|element(b))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Do we actually want both?&lt;/p&gt;
&lt;p&gt;If we do, I would suggest that we define &lt;code&gt;element(a|b)&lt;/code&gt; as a shorthand for &lt;code&gt;(element(a)|element(b))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Are they actually equivalent? I think it's fairly clear that they match the same items. It's less clear what the subtyping rules have to say. I think each is a subtype of the other, which means they are substitutable for each other in a function signature, but it needs a lot of digging in the spec to demonstrate this. Are they equivalent from the point of view of coercion rules? I think they probably are, because no coercion actually takes place when the required type is a node type.&lt;/p&gt;
&lt;p&gt;So I think there's no technical bug here just a lack of clarity. It would be easier (assuming we want to retain the syntax at all) if we defined &lt;code&gt;element(a|b)&lt;/code&gt; as a shorthand for &lt;code&gt;(element(a)|element(b))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Minor editorial issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In 3.2.7.2 example 5 is incorrect -- &lt;code&gt;element(xhtml:*|svg:*|mathml|*)&lt;/code&gt; - the last &lt;code&gt;|&lt;/code&gt; should be &lt;code&gt;:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the changes section of 3.2.7.2, the &lt;code&gt;element(A|B)&lt;/code&gt; syntax is not mentioned.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1391 created</title>
   <pubDate>Fri, 16 Aug 2024 19:54:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1391</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1391</guid>
   <description>&lt;div&gt;&lt;p&gt;Annotations: duplicate names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The function &lt;code&gt;fn:function-annotations&lt;/code&gt; returns a map from QNames to values, which rather assumes that a function cannot have two annotations with the same name. But there is nothing in either the data model or the XQuery language spec that imposes this restriction.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1390 created</title>
   <pubDate>Fri, 16 Aug 2024 17:18:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1390</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1390</guid>
   <description>&lt;div&gt;&lt;p&gt;1368 built in keywords improvements&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Rewrite of stylesheet for generating keyword tests&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1389 created</title>
   <pubDate>Thu, 15 Aug 2024 09:02:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1389</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1389</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:while-do: Optional error: will not terminate&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In many cases, a compiler may detect that a &lt;code&gt;fn:while-do&lt;/code&gt; or &lt;code&gt;fn:do-until&lt;/code&gt; function call will not terminate. Trivial examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;while-do((), true#0, identity#1)
while-do((), exists#1, fn($c) { $c, $c }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should add a fixed error code that an implementation sʜᴏᴜʟᴅ (or ᴍᴀʏ?) raise when it encounters such a case. The error can be raised statically (e.g., as the result of type checks) or dynamically (when the input is not known at compile time). We could reuse &lt;code&gt;XQDY0054&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In principle, the error code could also be used to reject non-terminating recursive functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function local:rec() { local:rec() };
local:rec()

declare function local:duplicate($input) {
  if(exists($input)) then $input else local:duplicate(($input, $input))
};
local:duplicate(())

let $oh := fn($my) { $my($my) }
return $oh($oh)

(: if we legalize this, see #1379 :)
declare variable $rec := fn() { $rec };
$rec()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1388 created</title>
   <pubDate>Wed, 14 Aug 2024 10:26:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1388</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1388</guid>
   <description>&lt;div&gt;&lt;p&gt;1387 Clarify the encoding rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I decided to put this in a separte PR so that it can be reviewed in isolation. I don't expect it to be controversial, exactly, but it may require adjustment.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1387 created</title>
   <pubDate>Tue, 13 Aug 2024 15:55:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1387</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1387</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:build-uri: Observations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@ndw I’ll again start with a single test case, &lt;a href="https://github.com/qt4cg/qt4tests/blob/b5c9431b6e5c7e24729a4de19aac1754b0b34c4a/fn/build-uri.xml#L296-L314"&gt;fn-build-uri-from-parse-020&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;test-case name="fn-build-uri-from-parse-020"&amp;gt;
    &amp;lt;description&amp;gt;Builds an example from the specification&amp;lt;/description&amp;gt;
    &amp;lt;created by="Norm Tovey-Walsh" on="2023-03-10"/&amp;gt;
    &amp;lt;test&amp;gt;fn:build-uri(map {
  "uri": "ldap://[2001:db8::7]/c=GB?objectClass?one",
  "scheme": "ldap",
  "authority": "[2001:db8::7]",
  "host": "[2001:db8::7]",
  "path": "/c=GB",
  "query": "objectClass?one",
  "query-parameters": map {
    "": "objectClass?one"
  },
  "path-segments": ("", "c=GB")
})&amp;lt;/test&amp;gt;
    &amp;lt;result&amp;gt;
      &amp;lt;assert-eq&amp;gt;"ldap://[2001:db8::7]/c=GB?objectClass?one"&amp;lt;/assert-eq&amp;gt;
    &amp;lt;/result&amp;gt;
  &amp;lt;/test-case&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would expect &lt;code&gt;ldap://[2001:db8::7]/c=GB?=objectClass%3Fone&lt;/code&gt; as result, as the spec says…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the &lt;code&gt;query-parameters&lt;/code&gt; key exists in the map, its value must be a map. A sequence of strings is constructed from the values in the map. For each key and each &lt;em&gt;value&lt;/em&gt; associated with that &lt;em&gt;key&lt;/em&gt; in turn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;em&gt;key&lt;/em&gt; is the empty string, the string constructed is the &lt;em&gt;value&lt;/em&gt; encoded with &lt;code&gt;encode-for-uri&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;…and &lt;code&gt;encode-for-uri('?')&lt;/code&gt; gives us &lt;code&gt;%3F&lt;/code&gt;. How do you handle that in your code?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1386 created</title>
   <pubDate>Tue, 13 Aug 2024 10:43:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1386</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1386</guid>
   <description>&lt;div&gt;&lt;p&gt;1382 add error code XTSE4040&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1382&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1385 created</title>
   <pubDate>Tue, 13 Aug 2024 09:04:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1385</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1385</guid>
   <description>&lt;div&gt;&lt;p&gt;Quantifier expressions: optional positional argument&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This has been requested multiple times before (albeit not in this repository): What about adding a positional argument to quantifier expressions? It it simple to implement, and it would allow us to do things like…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;every $item at $pos in $input satisfies $item = $pos * 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…which would be equivalent to…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;every($input, fn($item, $pos) { $item = $pos * 2 })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and much better to read than e.g.…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;not((for $item at $pos in $input return $item = $pos * 2) = false())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1384 created</title>
   <pubDate>Tue, 13 Aug 2024 08:49:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1384</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1384</guid>
   <description>&lt;div&gt;&lt;p&gt;1316 Type declarations in quantified expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1316&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Quantified expressions now allow a type declaration in both XQuery and XPath&lt;/li&gt;
&lt;li&gt;A type declaration now induces coercion of the supplied value to the required type&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1383 created</title>
   <pubDate>Mon, 12 Aug 2024 21:44:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1383</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1383</guid>
   <description>&lt;div&gt;&lt;p&gt;1374 - allow static error for duplicate keys&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1374&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1382 created</title>
   <pubDate>Mon, 12 Aug 2024 17:15:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1382</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1382</guid>
   <description>&lt;div&gt;&lt;p&gt;Missing XSLT error code&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;§2.7.4 says:&lt;/p&gt;
&lt;p&gt;If R has an as attribute, the SequenceType S declared by R must be a subtype of T, according to the relationship subtype(S, T) defined in [].&lt;/p&gt;
&lt;p&gt;There is no allocated error code, I propose to allocate XTSE4040.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1381 created</title>
   <pubDate>Mon, 12 Aug 2024 15:09:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1381</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1381</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-uri: Observations (cont.)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The rules for &lt;code&gt;fn:parse-uri&lt;/code&gt; say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the fragment is the empty string, it is discarded and the fragment is the empty sequence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, the result of &lt;a href="https://github.com/qt4cg/qt4tests/blob/4659dfdcc92ac57c9a7f482a1ec9f3f509020f52/fn/parse-uri.xml#L746-L762"&gt;fn-parse-uri-043&lt;/a&gt; contains an empty fragment string:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;test-case name="fn-parse-uri-043"&amp;gt;
    &amp;lt;description&amp;gt;Parses a URI ending in "#"&amp;lt;/description&amp;gt;
    &amp;lt;created by="Michael Kay" on="2023-10-27"/&amp;gt;
    &amp;lt;test&amp;gt;fn:parse-uri("https://qt4cg.org/specifications/xpath-functions-40/Overview.html#")&amp;lt;/test&amp;gt;
    &amp;lt;result&amp;gt;
      &amp;lt;assert-deep-eq&amp;gt;map {
        "authority": "qt4cg.org",
        "fragment": "",
        "host": "qt4cg.org",
        "path": "/specifications/xpath-functions-40/Overview.html",
        "path-segments": ("", "specifications", "xpath-functions-40", "Overview.html"),
        "scheme": "https",
        "hierarchical": true(),
        "uri": "https://qt4cg.org/specifications/xpath-functions-40/Overview.html#"
        }&amp;lt;/assert-deep-eq&amp;gt;
    &amp;lt;/result&amp;gt;
  &amp;lt;/test-case&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I assume the tests should be updated?&lt;/p&gt;
&lt;p&gt;With regard to the spec, I would suggest adding the normalization rule to query parameters:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the &lt;em&gt;query&lt;/em&gt; is the empty string, it is discarded and the &lt;em&gt;query&lt;/em&gt; is the empty sequence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1380 created</title>
   <pubDate>Mon, 12 Aug 2024 12:50:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1380</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1380</guid>
   <description>&lt;div&gt;&lt;p&gt;1320 Attempt to resolve a bug in parse-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1320&lt;/p&gt;
&lt;p&gt;(A speculative PR in the hope that my proposed resolution is acceptable.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1379 created</title>
   <pubDate>Mon, 12 Aug 2024 11:30:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1379</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1379</guid>
   <description>&lt;div&gt;&lt;p&gt;Circular dependencies: XQDY0054 vs. XPST0008 vs. optional errors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It remains a challenge (for me) to understand how the specification expects implementations to handle circular dependencies. Sorry in advance for mixing up the specification, tests and the behavior of Saxon (it basically demonstrates my confusion):&lt;/p&gt;
&lt;h3&gt;Error Codes&lt;/h3&gt;
&lt;p&gt;The definition of &lt;code&gt;err:XPST0008&lt;/code&gt; is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#dt-static-error"&gt;static error&lt;/a&gt; if an expression refers to an element name, attribute name, schema type name, namespace prefix, or variable name that is not defined in the &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#dt-static-context"&gt;static context&lt;/a&gt;, except for an ElementName in an &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#doc-xquery40-ElementTest"&gt;ElementTest&lt;/a&gt; or an AttributeName in an &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#doc-xquery40-AttributeTest"&gt;AttributeTest&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The definition of &lt;code&gt;err:XQDY0054&lt;/code&gt; is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#dt-dynamic-error"&gt;dynamic error&lt;/a&gt; if a cycle is encountered in the definition of a module’s dynamic context components, for example because of a cycle in variable declarations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Queries&lt;/h3&gt;
&lt;p&gt;The following test case &lt;a href="https://github.com/qt4cg/qt4tests/blob/4659dfdcc92ac57c9a7f482a1ec9f3f509020f52/prod/VarDecl.xml#L1527C21-L1537"&gt;K-InternalVariablesWith-15b&lt;/a&gt; expects &lt;code&gt;XPST0008&lt;/code&gt; as error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare variable $var1 := $var1;
true()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would expect &lt;code&gt;XQDY0054&lt;/code&gt; as error, and &lt;code&gt;true()&lt;/code&gt; to be a valid alternative, as &lt;code&gt;$var1&lt;/code&gt; is indeed defined in the static context. Think of a similar query (for which I would as well expect &lt;code&gt;XQDY0054&lt;/code&gt; or &lt;code&gt;true()&lt;/code&gt; to be correct results):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare variable $var1 := $var2;
declare variable $var2 := $var1;
true()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Saxon outputs  the following error for the first query…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[XPST0008] Circular definition of global variable: $var1 uses $var1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…which is confusing in itself, as the error code and the message do not really match. The output of the second query is consistent:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[XQDY0054] Circular definition of global variable: $var2 uses $var1, which uses $var2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another test case that expects &lt;code&gt;XQDY0054&lt;/code&gt; is &lt;a href="https://github.com/qt4cg/qt4tests/blob/4659dfdcc92ac57c9a7f482a1ec9f3f509020f52/prod/VarDecl.xml#L1582-L1591"&gt;K-InternalVariablesWith-17a&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare variable $var := local:func1();
declare function local:func1() { local:func2($var) };
declare function local:func2($arg2) { 1 };
true()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, I would expect &lt;code&gt;true()&lt;/code&gt; to be a valid alternative, in &lt;code&gt;K-InternalVariablesWith-17&lt;/code&gt; (the original XQuery 1.0 test), the rational for reporting an error was…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A prolog variable having a circular dependency, by having a variable reference in a call site argument. This is an error even though the variable isn't used, because implementations cannot skip reporting static errors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…but we now have a dynamic error.&lt;/p&gt;
&lt;h3&gt;Suggestions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;XPST0008&lt;/code&gt; should only be raised if no declaration exists for that variable in the query prolog.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XQDY0054&lt;/code&gt; should be optional for cases in which the affected code is never evaluated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would like to hear some feedback on this, and I will be happy to move the corresponding questions to &lt;code&gt;qt4tests&lt;/code&gt; and/or the Saxon bug tracker if we believe that the spec is comprehensive enough.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1376 closed</title>
   <pubDate>Mon, 12 Aug 2024 10:09:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1376</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1376</guid>
   <description>&lt;div&gt;&lt;p&gt;User defined operators&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1378 created</title>
   <pubDate>Mon, 12 Aug 2024 10:07:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1378</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1378</guid>
   <description>&lt;div&gt;&lt;p&gt;1375 bugs in pattern syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Changes the pattern syntax to allow any EQName to be used for function calls; the constraints on which functions can be called are defined outside the actual grammar.&lt;/li&gt;
&lt;li&gt;Reinstate root() as a permitted function&lt;/li&gt;
&lt;li&gt;Allow &lt;code&gt;doc()/id()&lt;/code&gt; without requiring parentheses around the second function call&lt;/li&gt;
&lt;li&gt;Stylesheet changes to point external spec references at the 4.0 specs rather than 3.0.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fix #1375&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1377 closed</title>
   <pubDate>Mon, 12 Aug 2024 08:50:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1377</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1377</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix inconsistent definition of return-type-ref-occurs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1377 created</title>
   <pubDate>Mon, 12 Aug 2024 08:50:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1377</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1377</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix inconsistent definition of return-type-ref-occurs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The DTD defines it as a IDREF type which it clearly isn't.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1376 created</title>
   <pubDate>Mon, 12 Aug 2024 07:35:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1376</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1376</guid>
   <description>&lt;div&gt;&lt;p&gt;User defined operators&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This came up on stack overflow and is probable worth a few comments on.&lt;/p&gt;
&lt;p&gt;The motivation was actually to implement something called applicative style programming, but the essence of it, is it requires operators.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/78851758/user-defined-xpath-operators-in-xslt/78856925?noredirect=1#comment139036715_78856925"&gt;stack overflow question&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The simplest (to me) mechanism is the one used in Haskell (to turn a function into an operator) whereby&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.haskell.org/Infix_operator"&gt;haskell backtick mechanism&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; let concatPrint x y = putStrLn $ (++) x y
Prelude&amp;gt; concatPrint "a" "b"
ab
Prelude&amp;gt; "a" `concatPrint` "b"
ab

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the 1st line defines a function
the 2nd line calls the function
the 3rd line uses the function as a operator by wrapping it in backticks.&lt;/p&gt;
&lt;p&gt;I don't believe anything 'clever' happens its simply a mechanical rewriting of the expressions before its parsed.
As Haskell is curried it generalises naturally to n parameters, in XPath you'd probably restrict it to two (and  maybe one) parameters.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1375 created</title>
   <pubDate>Sun, 11 Aug 2024 15:52:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1375</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1375</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: names of functions in pattern&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The spec says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a [FunctionCallP], the EQName used for the function name must have local part doc, id, element-with-id, key, or root, and must use the [standard function namespace] either explicitly or implicitly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But the grammar does not allow an EQName, it only allows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[10]  FunctionCallP  ::=  OuterFunctionName  ....
[11]  OuterFunctionName  ::=  "doc" | "id" | "element-with-id" | "key" |  URIQualifiedName

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example the grammar does not allow &lt;code&gt;fn:doc('a:xml')&lt;/code&gt; when fn is bound to the conventional namespace.&lt;/p&gt;
&lt;p&gt;Also: the XSLT 3.0 grammar allows the &lt;code&gt;root()&lt;/code&gt; pattern, but the 4.0 grammar does not.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1374 created</title>
   <pubDate>Sat, 10 Aug 2024 13:32:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1374</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1374</guid>
   <description>&lt;div&gt;&lt;p&gt;Duplicate keys in map constructor&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We say (concerning map constructors)&lt;/p&gt;
&lt;p&gt;If two or more entries have the [same key value] then a dynamic error is raised [[err:XQDY0137].&lt;/p&gt;
&lt;p&gt;I think we should say:&lt;/p&gt;
&lt;p&gt;if every MapKeyExpr is a Literal then this error SHOULD be reported as a static error.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1365 closed</title>
   <pubDate>Thu, 8 Aug 2024 17:02:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1365</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1365</guid>
   <description>&lt;div&gt;&lt;p&gt;Occurrence indicator meaning "exactly one"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1373 created</title>
   <pubDate>Wed, 7 Aug 2024 15:31:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1373</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1373</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Editorial&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;Wrong example: &lt;code&gt;hash("password123" || $salt, "sha-1234567")&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The following test lacks a &lt;code&gt;use="v-deep-equal-at"&lt;/code&gt; attribute:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;deep-equal(
  $at//name[@first="Bob"], 
  $at//name[@last="Barker"],
  options := { 'items-equal': op('is') } 
)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;graphemes($crlf)&lt;/code&gt;: Result should be &lt;code&gt;char('\r') || char('\n')&lt;/code&gt; instead of &lt;code&gt;$crlf&lt;/code&gt; (otherwise, test doesn’t work)&lt;/li&gt;
&lt;li&gt;fix &lt;code&gt;fn:unix-time&lt;/code&gt; example: &lt;code&gt;1969-12-31T23:59:59.999Z&lt;/code&gt; (thanks @johnlumley)&lt;/li&gt;
&lt;li&gt;TODO for &lt;code&gt;fn:replicate&lt;/code&gt; can be dropped&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:parse-uri&lt;/code&gt;: Remove example for &lt;code&gt;FOUR0002&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…to be continued&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1372 created</title>
   <pubDate>Wed, 7 Aug 2024 15:09:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1372</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1372</guid>
   <description>&lt;div&gt;&lt;p&gt;Unknown option: FORG0013 → XPTY0004&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I would suggest dropping https://qt4cg.org/specifications/xpath-functions-40/Overview.html#ERRFORG0013 and replacing it with a type error, &lt;code&gt;XPTY0004&lt;/code&gt;. This way, it can be perfomed during the type checks (which may also be the best solution if we define options as records).&lt;/p&gt;
&lt;p&gt;I’ll be glad to create the PR for the spec and the tests.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1371 created</title>
   <pubDate>Wed, 7 Aug 2024 12:16:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1371</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1371</guid>
   <description>&lt;div&gt;&lt;p&gt;(type)switch: braces after `case` keyword&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As suggested by Pieter Lamers in https://app.slack.com/client/T011VK9115Z/C01GVC3JLHE, we could alternatively allow curly braces in &lt;code&gt;case&lt;/code&gt; clauses:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;switch($n) {
  case 1  { 'one' }
  case 2  { 'two' }
  default { 'dunno' }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would be in aligment with the new syntax alternative for &lt;code&gt;if&lt;/code&gt; expressions: &lt;code&gt;if($n) { 'one' } else { 'two '}&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1370 created</title>
   <pubDate>Mon, 5 Aug 2024 14:08:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1370</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1370</guid>
   <description>&lt;div&gt;&lt;p&gt;1369 fn:round: rounding-mode → mode&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #1369&lt;/p&gt;
&lt;p&gt;…no need to update any tests.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1369 created</title>
   <pubDate>Mon, 5 Aug 2024 13:39:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1369</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1369</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:round: `rounding-mode` → `mode`?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We could rename the new &lt;code&gt;$rounding-mode&lt;/code&gt; parameter of &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-round"&gt;&lt;code&gt;fn:round&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;$mode&lt;/code&gt; (analogous to &lt;code&gt;$precision&lt;/code&gt;, which isn’t &lt;code&gt;$rounding-precision&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If it sounds reasonable, it’s very probable I’d be able to take charge of this.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1368 created</title>
   <pubDate>Mon, 5 Aug 2024 11:23:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1368</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1368</guid>
   <description>&lt;div&gt;&lt;p&gt;Further improvements to BuiltInKeywords test needed&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;The test generated for fn:seconds() is incorrect (can't handle required type xs:decimal?)&lt;/li&gt;
&lt;li&gt;An incorrect argument is supplied for fn:pin()&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1367 created</title>
   <pubDate>Sun, 4 Aug 2024 00:35:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1367</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1367</guid>
   <description>&lt;div&gt;&lt;p&gt;1321 leading lone slash&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1321&lt;/p&gt;
&lt;p&gt;Fixed as suggested in the issue. I have added a list of tokens that can appear at the start of a RelativePathExpr, produced by analyzing the grammar using a custom stylesheet leading-tokens.xsl which is available for reuse, but not integrated into the build.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1366 created</title>
   <pubDate>Fri, 2 Aug 2024 10:50:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1366</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1366</guid>
   <description>&lt;div&gt;&lt;p&gt;In the EBNF, use explicit separator syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We could pick up the &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; operators from Invisible XML for defining "a sequence of [one|zero] or more Xs separated by Ys".&lt;/p&gt;
&lt;p&gt;So for example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Annotation ::= "%"  EQName ("("  AnnotationValue ("," AnnotationValue)* ")")?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;changes to&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Annotation ::= "%"  EQName ("("  (AnnotationValue ++ ",") ")")?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypedFunctionTest ::= ("function" | "fn") "(" (SequenceType ("," SequenceType)*)? ")" "as" SequenceType&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypedFunctionTest ::= ("function" | "fn") "(" (SequenceType ** ",") ")" "as" SequenceType&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that there is an impact on anyone who uses the machine-readable XML version of our grammar. However, the current version could easily be generated by preprocessing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1365 created</title>
   <pubDate>Fri, 2 Aug 2024 10:05:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1365</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1365</guid>
   <description>&lt;div&gt;&lt;p&gt;Occurrence indicator meaning "exactly one"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There are several reasons it would be good to have an occurrence indicator meaning "exactly one".&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It's generally a good idea if there is explicit syntax that's equivalent to the default: it enables you to write code that is more explicit about the fact that you have chosen the default option; it makes code generation easier.&lt;/li&gt;
&lt;li&gt;Sometimes you need to write an ItemType in parentheses to avoid a following &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; being interpreted as an occurrence indicator. Having an explicit occurrence indicator for "exactly one" would avoid this need.&lt;/li&gt;
&lt;li&gt;It makes it clear that you are writing a SequenceType, not an ItemType.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don't expect this to be used very often, but I think it would be useful to allow it. I propose using U+00B9, superscript 1.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;as="xs:integer¹"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can now write:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;function($a, $b) as xs:integer¹ *&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to mean a sequence of functions each returning a single integer; while writing&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array(xs:integer¹ )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;just serves to remind the reader that  the array entries must be single integers.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1014 closed</title>
   <pubDate>Fri, 2 Aug 2024 10:02:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1014</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1014</guid>
   <description>&lt;div&gt;&lt;p&gt;Predicates, sequences of numbers: Feedback&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1364 created</title>
   <pubDate>Fri, 2 Aug 2024 09:58:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1364</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1364</guid>
   <description>&lt;div&gt;&lt;p&gt;1314 Change to type() syntax to fix ambiguity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1314&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1363 created</title>
   <pubDate>Fri, 2 Aug 2024 09:00:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1363</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1363</guid>
   <description>&lt;div&gt;&lt;p&gt;map:get and array:get&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I find the callback/fallback arguments to &lt;code&gt;map:get&lt;/code&gt; and &lt;code&gt;array:get&lt;/code&gt; rather unsatisfactory. They complicate the specification, and the use cases and examples are tenuous. I don't think they offer a great deal of convenience over alternative ways of achieving the same effect.&lt;/p&gt;
&lt;p&gt;I would like to propose scrapping these arguments, reverting to the 3.1 specification, and adding a new pair of functions &lt;code&gt;map:try-get()&lt;/code&gt; and &lt;code&gt;array:try-get()&lt;/code&gt; with a return type of &lt;code&gt;record(found as xs:boolean, value? as item()*)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The specification for map:try-get($map, $key) is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (map:contains($map, $key))
then {"found":true(), "value":map:get($map, $key)}
else {"found":false()}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The specification for array:try-get($array, $index) is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($index = 1 to array:size($array))
then {"found":true(), "value":array:get($map, $index)}
else {"found":false()}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Though it would probably be better to define it the other way around, that is define &lt;code&gt;*:get&lt;/code&gt; in terms of &lt;code&gt;*:try-get&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The name &lt;code&gt;try-get&lt;/code&gt; comes from C#. I'm not immensely enthusiastic about it, but it will get some name recognition. I would probably prefer &lt;code&gt;test-get&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One of the aims, of course, is to enable you to find whether a value exists and get the value in a single call to the map (so the key only gets hashed once, for example). This benefit will only materialise if &lt;code&gt;?found&lt;/code&gt; and &lt;code&gt;?value&lt;/code&gt; are implemented without requiring another full map lookup, that is if access to fixed fields in simple record types is optimised. That's a challenge we leave to implementors. We're not quite there yet in Saxon - we do have a map implementation in which the fields occupy fixed slot positions, but the static inferencing to reference fields by slot number isn't quite there yet.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1362 closed</title>
   <pubDate>Fri, 2 Aug 2024 07:51:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1362</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1362</guid>
   <description>&lt;div&gt;&lt;p&gt;Update version of DeltaXML&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1362 created</title>
   <pubDate>Fri, 2 Aug 2024 07:51:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1362</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1362</guid>
   <description>&lt;div&gt;&lt;p&gt;Update version of DeltaXML&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This (should!) fix the diffs&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1361 created</title>
   <pubDate>Fri, 2 Aug 2024 07:45:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1361</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1361</guid>
   <description>&lt;div&gt;&lt;p&gt;1337 Atomic value becomes atomic item&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1337&lt;/p&gt;
&lt;p&gt;I was half-expecting this change to have repercussions, but in practice it seems very clean.&lt;/p&gt;
&lt;p&gt;There are probably more places that should change, e.g. use "xs:boolean item" rather than "xs:boolean value", but we can deal with them as we come to them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1360 created</title>
   <pubDate>Thu, 1 Aug 2024 21:41:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1360</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1360</guid>
   <description>&lt;div&gt;&lt;p&gt;1348 Some grammar simplifications&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1348&lt;/p&gt;
&lt;p&gt;Makes some simplifications to the grammar rules, including some of those suggested.&lt;/p&gt;
&lt;p&gt;I've avoided removing productions that are referenced by name in the prose of the spec; these names provide a useful handle to relate the syntax to the semantics.&lt;/p&gt;
&lt;p&gt;I would love to introduce BNF for a comma-separated list. Invisible XML uses&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XX ** ","&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;for zero or more occurrences of XX, separated by ",", and&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XX ++ ","&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;for one or more occurrences of XX, separated by ",", and&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1356 closed</title>
   <pubDate>Thu, 1 Aug 2024 20:13:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1356</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1356</guid>
   <description>&lt;div&gt;&lt;p&gt;Names of private functions in XQuery library modules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1359 created</title>
   <pubDate>Thu, 1 Aug 2024 20:12:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1359</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1359</guid>
   <description>&lt;div&gt;&lt;p&gt;1346 Fix minor typos in format-number&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1346&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1358 created</title>
   <pubDate>Thu, 1 Aug 2024 09:29:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1358</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1358</guid>
   <description>&lt;div&gt;&lt;p&gt;959 fn:unix-dateTime&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #959&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1357 created</title>
   <pubDate>Thu, 1 Aug 2024 08:36:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1357</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1357</guid>
   <description>&lt;div&gt;&lt;p&gt;Rendering of new vs. updated features&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In previous versions of the XQFO drafts, it was possible to differentiate between NEW and UPDATED functions. It would be nice if this distinction could be preserved:&lt;/p&gt;
&lt;p&gt;&lt;img width="300" src="https://github.com/user-attachments/assets/dbb7f726-55de-4a6a-9eaa-c39c50689776"/&gt;    &lt;img width="300" src="https://github.com/user-attachments/assets/074b4863-481d-482a-b608-ce24184e159f"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1356 created</title>
   <pubDate>Wed, 31 Jul 2024 23:36:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1356</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1356</guid>
   <description>&lt;div&gt;&lt;p&gt;Names of private functions in XQuery library modules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Is there any good reason for the rule that the name of a private function or variable declared in a library module must be in the target namespace of the module? I think it makes sense to allow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private functions to be in any non-reserved namespace&lt;/li&gt;
&lt;li&gt;private variables to be in any non-reserved namespace or in no namespace&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason I ask is that I'm looking at what the rule should be for item type declarations.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1354 closed</title>
   <pubDate>Wed, 31 Jul 2024 19:05:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1354</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1354</guid>
   <description>&lt;div&gt;&lt;p&gt;1202 Change Log for F&amp;amp;O spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1202 closed</title>
   <pubDate>Wed, 31 Jul 2024 19:05:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1202</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1202</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Rendering of new/updated functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1355 created</title>
   <pubDate>Wed, 31 Jul 2024 16:41:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1355</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1355</guid>
   <description>&lt;div&gt;&lt;p&gt;1351 Add "declare record" in XQuery&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Renames MapTest, ArrayTest, RecordTest, FunctionTest to MapType, etc (suggested in #1351 and elsewhere)&lt;/li&gt;
&lt;li&gt;Changes the XQuery item type declaration syntax to "declare type NNNN" rather than "declare item type" or "declare item-type", and fixes examples accordingly (also in #1351)&lt;/li&gt;
&lt;li&gt;Provides a separate syntax for declaring record types (as proposed in issue #1277). This declaration creates both a named item type and a constructor function for items of that type, with provision for default values. Only this kind of record type can be recursive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I haven't yet taken on board the suggestion of changing the data model so that records are maps with a type annotation. I'm not totally opposed to the idea, but it's a significant change that needs more exploration, in particular the impact on all the map-related functions.&lt;/p&gt;
&lt;p&gt;Fix #1351
Fix #1277&lt;/p&gt;
&lt;p&gt;Follow-up work is needed to make equivalent changes for XSLT.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1354 created</title>
   <pubDate>Wed, 31 Jul 2024 10:56:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1354</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1354</guid>
   <description>&lt;div&gt;&lt;p&gt;1202 Change Log for F&amp;amp;O spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1202&lt;/p&gt;
&lt;p&gt;Since the changes are purely editorial but are likely to cause conflicts with technical changes, I would request an expedited review.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1353 created</title>
   <pubDate>Tue, 30 Jul 2024 17:25:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1353</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1353</guid>
   <description>&lt;div&gt;&lt;p&gt;1347 Add escape-solidus option to xml-to-json function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1347&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1352 created</title>
   <pubDate>Tue, 30 Jul 2024 16:53:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1352</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1352</guid>
   <description>&lt;div&gt;&lt;p&gt;1350 Fix signature for unparsed-text-available&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1350&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1351 created</title>
   <pubDate>Tue, 30 Jul 2024 09:21:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1351</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1351</guid>
   <description>&lt;div&gt;&lt;p&gt;declare item type → type&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-recursive-record-tests"&gt;3.2.8.4 Recursive Record Tests&lt;/a&gt; presents the following declaration:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare item type my:list as record(value as item()*, next? as my:list);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should probably be &lt;code&gt;declare item-type&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Personally, I would prefer to just use &lt;code&gt;declare type&lt;/code&gt; (I guess we do not plan to introduce “sequence type” declarations?).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1350 created</title>
   <pubDate>Tue, 30 Jul 2024 08:54:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1350</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1350</guid>
   <description>&lt;div&gt;&lt;p&gt;unparsed-text-available() signature&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The $options parameter of unparsed-text-available() should have the same item type as in unparsed-text(), that is either a string or a map.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1349 created</title>
   <pubDate>Mon, 29 Jul 2024 20:40:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1349</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1349</guid>
   <description>&lt;div&gt;&lt;p&gt;Nothing&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the Data Model we are missing an important concept - the concept of &lt;strong&gt;&lt;em&gt;Nothing&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It has been believed that the type &lt;code&gt;item()*&lt;/code&gt; is sufficient to express all results that can be produced or expressed in the evaluation of an XPath expression.&lt;/p&gt;
&lt;p&gt;In reality, there are XPath expressions whose result cannot be expressed unambiguously. Consider:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;array:values([ (), 1, (2 to 4), [ 5 ] ])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to the &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-array-values"&gt;F&amp;amp;O 4.0 specification&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, the result must be:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(1, 2, 3, 4, [ 5 ])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And here the value  of the first array member - &lt;code&gt;()&lt;/code&gt; -  is not returned.&lt;/p&gt;
&lt;p&gt;Thus, in the general case, &lt;code&gt;array:size($ar)&lt;/code&gt; is not equal to &lt;code&gt;count(array:values($ar))&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;and &lt;code&gt;array:size($ar) - count(array:values($ar))&lt;/code&gt; can be any non-negative integer.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/4d29bed7-f287-465c-90b6-fd431602c94b" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;At present there isn't a way in XPath to represent the &lt;strong&gt;&lt;em&gt;lack of value&lt;/em&gt;&lt;/strong&gt;. The empty sequence &lt;code&gt;()&lt;/code&gt; &lt;strong&gt;is&lt;/strong&gt; a value and thus using it to represent the &lt;strong&gt;&lt;em&gt;lack of value&lt;/em&gt;&lt;/strong&gt; is wrong. Also, if the &lt;strong&gt;lack of value&lt;/strong&gt; is represented by &lt;code&gt;()&lt;/code&gt; then this is completely lost/destroyed/vanishes when concatenated with other sequences.&lt;/p&gt;
&lt;p&gt;The expression:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;deep-equal([ ], [ () ])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;evaluates to &lt;code&gt;false()&lt;/code&gt;, because the first array-argument has no members (contains &lt;strong&gt;&lt;em&gt;nothing&lt;/em&gt;&lt;/strong&gt;), and the second array-argument has one member - the value &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thus, &lt;code&gt;()&lt;/code&gt; is not &lt;strong&gt;&lt;em&gt;nothing&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is time for us to be able to represent &lt;strong&gt;&lt;em&gt;nothing&lt;/em&gt;&lt;/strong&gt;  in an explicit way.&lt;/p&gt;
&lt;p&gt;We need a type &lt;em&gt;&lt;strong&gt;&lt;code&gt;nothing&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;, or maybe &lt;strong&gt;&lt;em&gt;&lt;code&gt;xs:nothing&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; that tells us that an expression may not evaluate to any value, even not to &lt;strong&gt;&lt;code&gt;()&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Then we will be able to express correctly the type of a lookup expression as    &lt;strong&gt;item()* | nothing&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1348 created</title>
   <pubDate>Thu, 25 Jul 2024 09:18:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1348</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1348</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar rules: redundancies&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I’m a humble user of our grammar rules, and I’m definitely not an expert when it comes to their definition (my main obstacle is that changes to the XQuery grammar rules need to be compatible with the XPath and possibly XSLT grammars).&lt;/p&gt;
&lt;p&gt;What made it difficult for me to read them in the past were the numerous redundancies (with some of them attached). Is this just “history”, or are there particular reasons for preserving or even enforcing redundance? I noticed that, sometimes, symbol names are used in the prose, but I failed to detect any reasonable pattern.&lt;/p&gt;
&lt;p&gt;Do we believe it would be helpful to clean up the grammar rules, or does it rather feel out of scope?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# currently
ParamWithDefault ::="$" EQName TypeDeclaration? (":=" StandaloneExpr)?
Param ::= "$" EQName TypeDeclaration?
# could be
ParamWithDefault ::= Param (":=" StandaloneExpr)?`
Param ::= "$" EQName TypeDeclaration?

# currently
SchemaAttributeTest ::= "schema-attribute" "(" AttributeDeclaration ")" 
AttributeDeclaration ::= AttributeName 
AttributeName ::= EQName 
# could be
SchemaAttributeTest ::= "schema-attribute" "(" EQName ")" 

# currently
WindowVars ::= ("$" CurrentItem)? PositionalVar? ("previous" "$" PreviousItem)? ("next" "$" NextItem)?
CurrentItem ::= EQName
PreviousItem ::= EQName
NextItem ::= EQName
LetBinding ::= "$" VarName TypeDeclaration? ":=" StandaloneExpr
PositionalVar ::= "at" "$" VarName
VarName ::= EQName
VarRef ::= "$" VarName
# could be
WindowVars ::= ("$" EQName)? PositionalVar? ("previous" Var)? ("next" Var)?
LetBinding ::= Var TypeDeclaration? ":=" StandaloneExpr
PositionalVar ::= "at" Var
VarRef ::= Var
Var := "$" EQName

# currently
MapConstructorEntry ::= MapKeyExpr ":" MapValueExpr
MapKeyExpr ::= ExprSingle
MapValueExpr ::= StandaloneExpr
# could be
MapConstructorEntry ::= ExprSingle ":" StandaloneExpr

# currently
ForwardAxis ::= ("child" "::") | ("descendant" "::") | ("attribute" "::") | ("self" "::") |
  ("descendant-or-self" "::") | ("following-sibling" "::") | ("following" "::")
# could be
ForwardAxis ::= ("attribute" | "child" | "descendant" | "descendant-or-self" |
  "following" | "following-sibling" | "self") "::"

# currently
CompNamespaceConstructor ::= "namespace" (Prefix | EnclosedPrefixExpr) EnclosedURIExpr
Prefix ::= NCName
EnclosedPrefixExpr ::= EnclosedExpr
# could be
CompNamespaceConstructor ::= "namespace" (NCName | EnclosedExpr) EnclosedURIExpr

# currently
Argument ::= StandaloneExpr | ArgumentPlaceholder
ArgumentPlaceholder ::= "?"
# could be
Argument ::= StandaloneExpr | "?"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and so on.&lt;/p&gt;
&lt;p&gt;PS: If we tweak the grammar, I would propose to rename &lt;code&gt;ExprSingle&lt;/code&gt; to &lt;code&gt;SingleExpr&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1347 created</title>
   <pubDate>Thu, 25 Jul 2024 08:49:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1347</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1347</guid>
   <description>&lt;div&gt;&lt;p&gt;The escape-solidus option should apply to xml-to-json&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Recently, we added an &lt;code&gt;escape-solidus&lt;/code&gt; option to &lt;code&gt;fn:serialize()&lt;/code&gt;. That option should apply to &lt;code&gt;fn:xml-to-json()&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;It's not immediately obvious to me if there are other serialize options that should apply as well.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1346 created</title>
   <pubDate>Thu, 25 Jul 2024 08:33:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1346</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1346</guid>
   <description>&lt;div&gt;&lt;p&gt;Typos in fn:format-number&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the rules section of fn:format-number, in the para starting "In the table", the word "rendition" is in the wrong font (use &lt;code&gt;term&lt;/code&gt; markup).&lt;/p&gt;
&lt;p&gt;In the options table, the notation &lt;code&gt;xs:string (: matching '.(:.*)?' :)&lt;/code&gt; is flawed because a comment cannot contain the characters &lt;code&gt;(:&lt;/code&gt;. Simplest answer to this is to just write &lt;code&gt;xs:string matching '.(:.*)?'&lt;/code&gt; - it's intended for the human reader after all, not for machine execution.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1345 created</title>
   <pubDate>Thu, 25 Jul 2024 08:33:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1345</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1345</guid>
   <description>&lt;div&gt;&lt;p&gt;Bare brace ambiguity resolution in practice&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have applied the new bare brace grammar rules to two existing projects, and (if I’m correct) all of the the following constructs cannot be parsed anymore (with the order reflecting my sense of urgency):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Simple maps: &lt;code&gt;$data ! {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sequence arrow: &lt;code&gt;{} =&amp;gt; map:size()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Predicates: &lt;code&gt;{ 'x': 1 }[map:keys(.) = 'x']&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Return clause: &lt;code&gt;let $x := ... return {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Paths: &lt;code&gt;&amp;lt;a/&amp;gt;/{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Instance of: &lt;code&gt;{} instance of record(x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If expression: &lt;code&gt;if($x) then { $x: $y } else {}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think we should try hard to tweak the grammar for some of these.&lt;/p&gt;
&lt;p&gt;I didn’t manage to construct an ambiguous example with &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;{}&lt;/code&gt;; could someone help me?&lt;/p&gt;
&lt;p&gt;Related: #1309&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1344 created</title>
   <pubDate>Wed, 24 Jul 2024 21:12:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1344</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1344</guid>
   <description>&lt;div&gt;&lt;p&gt;1343 Drop the static typing feature&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1343&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1343 created</title>
   <pubDate>Wed, 24 Jul 2024 17:04:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1343</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1343</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop the static typing feature&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Since XQuery 3.0, the effect of the static typing feature has been almost entirely implementation defined. Since there is no interoperability when this feature is in effect, there seems very little point leaving it as an optional feature in the spec. In any case, I think user experience of processors that attempt to implement the static typing feature has been rather negative, and most of the processors that implemented it have been left to languish and are unlikely to be upgraded to 4.0.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 087 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 23 Jul 2024 17:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/07-23</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-07-23</guid>
</item><item>
   <title>Issue #1329 closed</title>
   <pubDate>Tue, 23 Jul 2024 16:11:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1329</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1329</guid>
   <description>&lt;div&gt;&lt;p&gt;load-xquery-module supplying content&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1333 closed</title>
   <pubDate>Tue, 23 Jul 2024 16:11:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1333</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1333</guid>
   <description>&lt;div&gt;&lt;p&gt;1329 Add content option to load-xquery-module&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1309 closed</title>
   <pubDate>Tue, 23 Jul 2024 16:08:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1309</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1309</guid>
   <description>&lt;div&gt;&lt;p&gt;Dangling else syntax ambiguity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1327 closed</title>
   <pubDate>Tue, 23 Jul 2024 16:08:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1327</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1327</guid>
   <description>&lt;div&gt;&lt;p&gt;1309 bare brace ambiguities&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1331 closed</title>
   <pubDate>Tue, 23 Jul 2024 16:05:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1331</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1331</guid>
   <description>&lt;div&gt;&lt;p&gt;1324 Introduce markup for executable specs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1317 closed</title>
   <pubDate>Tue, 23 Jul 2024 16:00:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1317</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1317</guid>
   <description>&lt;div&gt;&lt;p&gt;Record Test Subtype Relationship&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1332 closed</title>
   <pubDate>Tue, 23 Jul 2024 16:00:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1332</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1332</guid>
   <description>&lt;div&gt;&lt;p&gt;1317 Fix the record subtyping rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1263 closed</title>
   <pubDate>Tue, 23 Jul 2024 15:59:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1263</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1263</guid>
   <description>&lt;div&gt;&lt;p&gt;1224 Add xsl:accumulator-rule/@priority attribute&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1326 closed</title>
   <pubDate>Tue, 23 Jul 2024 15:58:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1326</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1326</guid>
   <description>&lt;div&gt;&lt;p&gt;Misleading summary for concat() - "string value"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1328 closed</title>
   <pubDate>Tue, 23 Jul 2024 15:58:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1328</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1328</guid>
   <description>&lt;div&gt;&lt;p&gt;1326 wording improvements for concat and string-join&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1342 created</title>
   <pubDate>Tue, 23 Jul 2024 13:56:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1342</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1342</guid>
   <description>&lt;div&gt;&lt;p&gt;1339 Deprecate ordering mode declaration&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The "declare ordering mode" declaration, and the &lt;code&gt;ordered{}&lt;/code&gt; and &lt;code&gt;unordered{}&lt;/code&gt; declarations are retained for compatibility, but are deprecated and no longer have any effect.&lt;/p&gt;
&lt;p&gt;Fix #1339&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1341 created</title>
   <pubDate>Mon, 22 Jul 2024 21:11:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1341</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1341</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove the `$position`  argument from the `$action` function passed to folds&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;$position&lt;/code&gt;  argument, passed to the &lt;code&gt;$action&lt;/code&gt;-function-argument of the folds is unnecessary and artificial&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The addition of this argument resulted from the &lt;strong&gt;&lt;em&gt;automatic&lt;/em&gt;&lt;/strong&gt;  adding this position-aware &lt;code&gt;$action&lt;/code&gt;-function-argument to all functions processing sequences and producing result based on their values.&lt;/li&gt;
&lt;li&gt;In doing so, no further analysis was made on the specifics of the fold functions.&lt;/li&gt;
&lt;li&gt;Though this issue has been raised again and again for months, no single and meaningful use-case has been provided.&lt;/li&gt;
&lt;li&gt;This addition departs away from the original meaning of folds as has been well-established by the developers community. Whether or not one needs to produce a variety of folds, such as &lt;em&gt;sum, min, max, average, product, all / none / some / any&lt;/em&gt; - in all these cases the position of the individual items does not matter.&lt;/li&gt;
&lt;li&gt;One bad consequence of this change is that it makes it more difficult for the reader to grasp the meaning of a particular fold-function, and even to wonder if the spec talks about the same fold functions that the reader thought he knew well.&lt;/li&gt;
&lt;li&gt;This change results in unnecessarily complex documentation and testing.&lt;/li&gt;
&lt;li&gt;Users have expressed their dismay over the resulting complexity. To quote @benibela: &lt;a href="https://github.com/qt4cg/qtspecs/pull/1296#issuecomment-2226997813"&gt;"&lt;em&gt;Too many variables make the code hard too read. And the implementation becomes slow, when it has to handle too many arguments. Especially with function coercion adding further type checks&lt;/em&gt;" &lt;/a&gt;.
And @michaelhkay himself: "&lt;em&gt;&lt;a href="https://github.com/qt4cg/qtspecs/pull/1296#issuecomment-2186435979"&gt;I'm inclined to propose dropping the position argument for both fold and scan. It complicates the specification and the use cases are unconvincing. I believe it has been incorrectly specified (for fold-left, the first time $action is called, the value supplied for $pos is 2, whereas for fold-right it is count($input)-1; and the "Error conditions" section talks of $action being applied to 2 arguments). For the -right forms in particular, the semantics are mind-bending enough without introducing this complication.&lt;/a&gt;&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;It is very easy to make an accidental mistake and pass a 2-arg. &lt;code&gt;$action&lt;/code&gt; function when a 3-arg. function was meant (or the other way around).&lt;/li&gt;
&lt;li&gt;The giant think-tank of Microsoft gives us a good example of a better solution. They never added position-aware overloads to any folds or fold related methods of the Enumerable class. All the following methods do not have position-aware action-function arguments:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="url"&gt;Aggregate&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.all?view=net-8.0"&gt;All&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any?view=net-8.0"&gt;Any&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.average?view=net-8.0"&gt;Average&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.first?view=net-8.0"&gt;First&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.firstordefault?view=net-8.0"&gt;FirstOrDefault&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.last?view=net-8.0"&gt;Last&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.lastordefault?view=net-8.0"&gt;LastOrDefault&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.max?view=net-8.0"&gt;Max&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.maxby?view=net-8.0"&gt;MaxBy&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.min?view=net-8.0"&gt;Min&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.minby?view=net-8.0"&gt;MinBy&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.zip?view=net-8.0"&gt;Zip&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is not an accidental mistake, as Microsoft added to other Enumerable methods overloads that do require position-aware &lt;code&gt;$action&lt;/code&gt;-function arguments:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.select?view=net-8.0#system-linq-enumerable-select-2(system-collections-generic-ienumerable((-0))-system-func((-0-system-int32-1)))"&gt;Select&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.selectmany?view=net-8.0"&gt;SelectMany&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.skipwhile?view=net-8.0"&gt;SkipWhile&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.takewhile?view=net-8.0"&gt;TakeWhile&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where?view=net-8.0#system-linq-enumerable-where-1(system-collections-generic-ienumerable((-0))-system-func((-0-system-int32-system-boolean)))"&gt;Where&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="10"&gt;
&lt;li&gt;Last and probably most important: &lt;a href="https://github.com/qt4cg/qtspecs/pull/1296#issuecomment-2194049829"&gt;&lt;strong&gt;@michaelhkay gave us a general and an elegant and very readable way&lt;/strong&gt;&lt;/a&gt; of expressing any fold that needs positional information as a 2-step operation where the 1st step creates a map with entries: &lt;code&gt;{"position": $input[$pos]}&lt;/code&gt; and then a fold-operation that only has a non-position-aware &lt;code&gt;$action&lt;/code&gt;-function argument, and has this map as input.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Proposed solution&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leave the folds unchanged - in order to preserve their original, established meaning and avoid introducing inadequate complexity.&lt;/li&gt;
&lt;li&gt;If deemed really necessary, define separate functions that can take as parameter a position-aware &lt;code&gt;$action&lt;/code&gt;-function.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1340 created</title>
   <pubDate>Mon, 22 Jul 2024 12:04:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1340</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1340</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespace nodes and the namespace axis&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It would be nice to bring XSLT, XPath, and XQuery into line here.&lt;/p&gt;
&lt;p&gt;The current state of play seems to be:&lt;/p&gt;
&lt;p&gt;XQuery: the namespace axis is not supported. Namespace nodes can be constructed, but they exist only as detached orphans; they can never be attached to a parent element.&lt;/p&gt;
&lt;p&gt;XPath: the namespace axis is deprecated and support is optional. There is no mechanism for constructing namespace nodes.&lt;/p&gt;
&lt;p&gt;XSLT: the namespace axis is mandatory. Namespace nodes can be constructed and can be attached to elements.&lt;/p&gt;
&lt;p&gt;I believe that the only reason for the differences is that XQuery implementors were concerned that it would be difficult to implement namespace nodes efficiently. I think XSLT has clearly demonstrated that this concern is unjustified.&lt;/p&gt;
&lt;p&gt;However, there are implementation complexities, primarily around the fact that namespace nodes have identity and parentage, so if a namespace is declared on a root element, then every element in the document has a namespace node for this namespace, and these have distinct identity. To implement this efficiently, the implementation has to instantiate namespace nodes lazily on demand, and then has to ensure that if the "same" namespace node is instantiated again, it has the same "identity".&lt;/p&gt;
&lt;p&gt;I suggest a solution along the following lines, applied to all three languages:&lt;/p&gt;
&lt;p&gt;(a) the namespace axis is supported and delivers namespace nodes&lt;/p&gt;
&lt;p&gt;(b) operations that depend on the ordering, identity, or parentage of namespace nodes are deprecated and implementation-defined.&lt;/p&gt;
&lt;p&gt;(c) the data model says that the in-scope namespaces of an element are in the form of a (prefix, URI) map. The semantics of the namespace axis are described in terms of constructing transient namespace nodes from this map.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1339 created</title>
   <pubDate>Mon, 22 Jul 2024 11:40:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1339</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1339</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop unordered mode&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Is there any evidence that unordered mode is useful, or that any implementations actually take note of it (by delivering a different result if unordered mode is set)?&lt;/p&gt;
&lt;p&gt;If not, could we drop it? I would suggest continuing to recognize the syntax, marking it deprecated, and saying it has no effect.&lt;/p&gt;
&lt;p&gt;It's not doing a great deal of harm, but there are a lot of places where our examples in the spec assume ordered mode, but the examples don't explicitly call out this assumption. Similarly, a great many QT3 test cases would fail on an implementation that sets unordered mode by default.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1338 created</title>
   <pubDate>Mon, 22 Jul 2024 11:05:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1338</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1338</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays and maps: Members, entries, values, contents, pairs, …&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With version 4.0, we are adding a lot of promising and powerful new map and array features. This is a big step forward, compared to the obvious limitations of 3.1.&lt;/p&gt;
&lt;p&gt;Some aspects of the 3.1 design have made it difficult (or impossible) to fully adjust array and maps, but (in my opinion) the old overall concept was impressively consistent – and it is definitely a big challenge to achieve a 4.0 design that is not too fragmented.&lt;/p&gt;
&lt;p&gt;To me, this becomes particularly evident in the case of arrays. The following example sums up the items of all members of an array. For the cumbersome 3.1 solution…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $pos in 1 to array:size($array)
return sum($array($pos))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…we now have at least several (roughly?) equivalent options to do this; for example…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;for member $m in $array return sum($m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array:members($array) ! sum(?value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$array?entry::* ! sum(?value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$array?value::* ! sum(.)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;…which is great – but the downside is that we have introduced a terminological jungle. The examples above could imply that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for 1., an &lt;em&gt;array member&lt;/em&gt; is a sequence (which it indeed is);&lt;/li&gt;
&lt;li&gt;for 2., an &lt;em&gt;array member&lt;/em&gt; is a map;&lt;/li&gt;
&lt;li&gt;for 3., an &lt;em&gt;array&lt;/em&gt; has entries (but there is no &lt;code&gt;array:entries&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;for 4., an &lt;em&gt;array&lt;/em&gt; has values (which is true, but &lt;code&gt;array:value&lt;/code&gt; returns a different structure).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, with the current proposals, &lt;code&gt;$array:content::1&lt;/code&gt; gives us the sequence-concatenated version of the first member of an array. Similar observations can be made with maps: &lt;code&gt;map:entries($map)&lt;/code&gt; returns singleton maps, whereas &lt;code&gt;$map?entry::*&lt;/code&gt; is actually equivalent to &lt;code&gt;map:pairs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fundamental obstacle are clear have already been discussed a lot, but I think that with each new concept, we should try really hard not to blur terminology, and work with terms that users can assign to the underlying concepts without too much guessing or trial’n’error.&lt;/p&gt;
&lt;p&gt;My general suggestions would be to…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;align the new lookup terminology and the builtin functions, and&lt;/li&gt;
&lt;li&gt;omit, rename or drop builtin functions that do not rely on the existing or arising terminology.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My concrete proposals:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As we already have &lt;code&gt;map:pairs&lt;/code&gt;, &lt;code&gt;$map-or-array?entry::*&lt;/code&gt; should become &lt;code&gt;$map-or-array?pair::*&lt;/code&gt;, and we should add a &lt;code&gt;array:pairs&lt;/code&gt; function, and probably &lt;code&gt;array:of-pairs&lt;/code&gt; (see #832). We shouldn’t do it the other way round and rename &lt;code&gt;map:pairs&lt;/code&gt; to &lt;code&gt;map:entries&lt;/code&gt;, as the existing &lt;code&gt;map:entry&lt;/code&gt; function returns a singleton map.&lt;/li&gt;
&lt;li&gt;If we keep calling the sequence-concatenated result “content”, we should include it in the definition of sequence-concatenation. In addition, &lt;code&gt;(array|map):values&lt;/code&gt; should be renamed to &lt;code&gt;(array|map):contents&lt;/code&gt; (see #1179).&lt;/li&gt;
&lt;li&gt;Due to the existence of &lt;code&gt;array:value::*&lt;/code&gt;, we should make clear what an “array value” is, how it it positions itself in relation to an “array member”, and we should add &lt;code&gt;map:values&lt;/code&gt; and &lt;code&gt;array:values&lt;/code&gt; for equivalent results.&lt;/li&gt;
&lt;li&gt;Due to the existence of &lt;code&gt;array:key::*&lt;/code&gt;, we should add a &lt;code&gt;array:keys&lt;/code&gt; function (which returns a dense integer range). &lt;code&gt;1 to array:size($array)&lt;/code&gt; could then be written as &lt;code&gt;array:keys($array)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As we have &lt;code&gt;map:entries&lt;/code&gt; and &lt;code&gt;map:merge&lt;/code&gt;, we could add equivalent &lt;code&gt;array:entries&lt;/code&gt; and &lt;code&gt;array:merge&lt;/code&gt; functions.&lt;/li&gt;
&lt;li&gt;I would suggest dropping &lt;code&gt;array:members&lt;/code&gt;/&lt;code&gt;array:of-members&lt;/code&gt; in favor of either &lt;code&gt;array:split&lt;/code&gt;/&lt;code&gt;array:join&lt;/code&gt;, &lt;code&gt;array:pairs&lt;/code&gt;/&lt;code&gt;array:of-pairs&lt;/code&gt; (see 1.) or &lt;code&gt;array:entries&lt;/code&gt;/&lt;code&gt;array:merge&lt;/code&gt; (see 5). I really believe that an “array member“ should not be a map; an “array pair” or ”array entry” certainly could.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One might question if we should really introduce map terminology for arrays. I think we have no other chance if we want to treat maps and arrays identically with lookup key specifiers, and it may help us later on to treat both data structures as similar as possible.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1337 created</title>
   <pubDate>Mon, 22 Jul 2024 08:55:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1337</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1337</guid>
   <description>&lt;div&gt;&lt;p&gt;Atomic value → atomic item&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I liked @michaelhkay’s proposal in https://github.com/qt4cg/qtspecs/issues/826#issuecomment-1821359131:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;• The term "atomic item" (or just atom?) replaces "atomic value".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I often used “atomic items” in the past (although it’s no defined term at the moment) as it seemed more intuitive to me.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1336 created</title>
   <pubDate>Mon, 22 Jul 2024 08:10:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1336</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1336</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: fos record descriptions within xmlspec prose&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the F+O spec, the &lt;code&gt;uri-structure-record&lt;/code&gt; appearing in section 6.6, and various other similar record descriptions, are defined using the &lt;code&gt;fos&lt;/code&gt; namespace markup in xpath-functions.xml. Normally the &lt;code&gt;fos&lt;/code&gt; XML vocabulary is confined to function-catalog.xml, and is converted to the usual xmlspec vocabulary by the &lt;code&gt;merge-function-specs&lt;/code&gt; stylesheet.&lt;/p&gt;
&lt;p&gt;Using this vocabulary directly within an xmlspec document means that the document doesn't validate against its DTD, and that the &lt;code&gt;fos&lt;/code&gt; islands aren't validated against the fos.xsd schema.&lt;/p&gt;
&lt;p&gt;A better approach here might be to use XInclude to insert text from a separate, schema-validated, document.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #31 closed</title>
   <pubDate>Sun, 21 Jul 2024 21:48:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/31</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-31</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend FLWOR expressions to maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1160 closed</title>
   <pubDate>Sun, 21 Jul 2024 21:31:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1160</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1160</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:is-collation-available&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1334 closed</title>
   <pubDate>Sun, 21 Jul 2024 21:22:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1334</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1334</guid>
   <description>&lt;div&gt;&lt;p&gt;map:build parameter keywords&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1335 created</title>
   <pubDate>Sat, 20 Jul 2024 09:51:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1335</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1335</guid>
   <description>&lt;div&gt;&lt;p&gt;Data Model primitives for Maps and Arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In principle we ought to be able to define all operations on maps and arrays in terms of the primitives defined in the Data Model spec.&lt;/p&gt;
&lt;p&gt;Currently the data model defines the primitives as &lt;code&gt;dm:map-entries&lt;/code&gt;, &lt;code&gt;dm:array-size&lt;/code&gt;, and &lt;code&gt;dm:array-get&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a workable set for retrieval functions, though it's not necessarily an ideal set. But what is missing is any primitives for map and array construction.&lt;/p&gt;
&lt;p&gt;I think we need to regard the empty array and empty map as given, and then define array:append and map:put as primitives.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;dm:map-entries()&lt;/code&gt; isn't the same as the user-visible &lt;code&gt;map:entries()&lt;/code&gt; it might be a good idea to rename it.&lt;/p&gt;
&lt;p&gt;Another way of defining the primitives would be to make iteration primitive, so the primitives become&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dm:for-each-map-entry($map, fn($key, $value)) &lt;/code&gt;
and&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dm:for-each-array-member($array, fn($position, $value))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This has some merit in that (a) maps and arrays are treated symmetrically, and (b) there are only 2 primitives rather than 3.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1334 created</title>
   <pubDate>Sat, 20 Jul 2024 06:58:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1334</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1334</guid>
   <description>&lt;div&gt;&lt;p&gt;map:build parameter keywords&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently &lt;code&gt;$keys, $value&lt;/code&gt;. Both should be plural.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1333 created</title>
   <pubDate>Fri, 19 Jul 2024 16:43:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1333</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1333</guid>
   <description>&lt;div&gt;&lt;p&gt;1329 Add content option to load-xquery-module&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1329&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1332 created</title>
   <pubDate>Fri, 19 Jul 2024 16:11:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1332</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1332</guid>
   <description>&lt;div&gt;&lt;p&gt;1317 Fix the record subtyping rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix as proposed in the issue.&lt;/p&gt;
&lt;p&gt;Fix #1317&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1331 created</title>
   <pubDate>Fri, 19 Jul 2024 15:42:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1331</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1331</guid>
   <description>&lt;div&gt;&lt;p&gt;1324 Introduce markup for executable specs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Makes schema changes for the function catalog to allow an executable specification of a function to be marked up as such.&lt;/li&gt;
&lt;li&gt;Uses this markup initially for functions in the array namespace.&lt;/li&gt;
&lt;li&gt;Makes stylesheet changes to render this markup in the published spec.&lt;/li&gt;
&lt;li&gt;Commits an XSLT stylesheet (not yet integrated into the build system) that runs against the function catalog to produce an XQuery module whose effect is to declare functions based on the "executable specifications" and run the published executable examples against these functions, checking that they produce the expected result. The "success" output of this query (which runs with no source document) is an XML document containing an empty element &lt;code&gt;&amp;lt;result/&amp;gt;&lt;/code&gt;. (If it has content, this will relate to tests that failed).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To get this to work, I had to tweak a couple of functions (array:sort and array:get) where Saxon has not yet implemented the required functionality. Although the test query is using the implementations from the spec, not those from Saxon, these implementations make calls on other functions where the Saxon implementation is used. For example array:fold-left calls fn:fold-left and this currently uses the Saxon implementation of fn:fold-left.&lt;/p&gt;
&lt;p&gt;The query binds a dummy namespace to the &lt;code&gt;array&lt;/code&gt; prefix to avoid problems with reserved namespaces. There are a couple of "core" functions that have no executable specification -- notably array:of-members() -- and the generated query contains an implementation of these that maps the function in the dummy array namespace to the function in the true array namespace.&lt;/p&gt;
&lt;p&gt;This is phase 1. Most of the machinery is in place. It now needs to be applied to executable specifications of functions in other namespaces.&lt;/p&gt;
&lt;p&gt;The stylesheet has no Saxon dependencies, but it does include a couple of template rules to exclude specific functions/tests that Saxon does not currently implement. The stylesheet could be made portable across implementations by moving these exception cases to an overriding stylesheet module.&lt;/p&gt;
&lt;p&gt;I did find a few examples of supposedly executable code that needed fixing; hopefully these will show up in the diff version.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1330 created</title>
   <pubDate>Fri, 19 Jul 2024 14:26:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1330</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1330</guid>
   <description>&lt;div&gt;&lt;p&gt;$fallback argument of map:get() and array:get() should allow () to be supplied&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As a general rule, if an argument is optional then it should accept an empty sequence.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1329 created</title>
   <pubDate>Fri, 19 Jul 2024 07:29:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1329</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1329</guid>
   <description>&lt;div&gt;&lt;p&gt;load-xquery-module supplying content&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose to provide an additional option&lt;/p&gt;
&lt;p&gt;&lt;code&gt;content as xs:string&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;for fn:load-xquery-module. The effect is to supply the content of the XQuery library module as a string. If supplied, the location-hints option is ignored.&lt;/p&gt;
&lt;p&gt;Use case: I'm writing code that attempts to test the XQuery examples in the specification. This requires some kind of capability for dynamic XQuery execution, and this seems the simplest way of doing it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1328 created</title>
   <pubDate>Thu, 18 Jul 2024 22:11:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1328</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1328</guid>
   <description>&lt;div&gt;&lt;p&gt;1326 wording improvements for concat and string-join&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Very minor editorial improvements.&lt;/p&gt;
&lt;p&gt;Fix #1326&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1327 created</title>
   <pubDate>Thu, 18 Jul 2024 20:56:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1327</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1327</guid>
   <description>&lt;div&gt;&lt;p&gt;1309 bare brace ambiguities&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1309&lt;/p&gt;
&lt;p&gt;The proposal restructures the grammar so a bare brace map constructor (that is, one without the "map" keyword) can be used only where this causes no ambiguity, for example as a function argument.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1326 created</title>
   <pubDate>Wed, 17 Jul 2024 15:57:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1326</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1326</guid>
   <description>&lt;div&gt;&lt;p&gt;Misleading summary for concat() - "string value"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The summary of fn:concat says that it concatenates the string values of its arguments. This isn't strictly correct: if a node is supplied as an argument, the node is atomized and the typed value is cast to a string, which doesn't necessarily give you the same result. For example (a) if the node is an attribute whose type is list, the result is the elements of the list without space separation, and (b) if the node is an element with element-only content, concat() fails although string() would succeed.&lt;/p&gt;
&lt;p&gt;In 3.1, supplying a list-valued attribute would fail because the required type of each argument was &lt;code&gt;xs:anyAtomicType?&lt;/code&gt;. It now succeeds because the required type is &lt;code&gt;xs:anyAtomicType?&lt;/code&gt; - but perhaps it doesn't have the desired effect?&lt;/p&gt;
&lt;p&gt;We should clarify these points with notes and examples. Also affects the &lt;code&gt;||&lt;/code&gt; operator.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1325 created</title>
   <pubDate>Tue, 16 Jul 2024 18:50:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1325</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1325</guid>
   <description>&lt;div&gt;&lt;p&gt;Variadic System Functions: Principles?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the current spec, the following functions are variadic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:concat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:codepoints-to-string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:distinct-ordered-nodes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The advantage of the variadic representation is that a user can omit additional parentheses; the drawback is that the function cannot be enhanced with parameters later on. In my point of view, &lt;code&gt;fn:distinct-ordered-nodes&lt;/code&gt; might be a candidate for that in the future (on the other hand, it will only be used by a very small user group one or the other way).&lt;/p&gt;
&lt;p&gt;Other candidates for variadicity could be (among others):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:count&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:exists&lt;/code&gt;, &lt;code&gt;fn:empty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:head&lt;/code&gt;, &lt;code&gt;fn:tail&lt;/code&gt;, &lt;code&gt;fn:trunk&lt;/code&gt;, &lt;code&gt;fn:foot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:one-or-more&lt;/code&gt;, &lt;code&gt;fn:exactly-one&lt;/code&gt;, &lt;code&gt;fn:zero-or-one&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:innermost&lt;/code&gt;, &lt;code&gt;fn:outermost&lt;/code&gt;, &lt;code&gt;fn:unordered&lt;/code&gt;, &lt;code&gt;fn:reverse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:boolean&lt;/code&gt;, &lt;code&gt;fn:not&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:identity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:data&lt;/code&gt;, &lt;code&gt;fn:has-children&lt;/code&gt; (the 0-arity case would need to be preserved due to its special semantics)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that function calls like &lt;code&gt;fn:exactly-one(E1, E2)&lt;/code&gt; can be reasonable in practice, as &lt;code&gt;E1&lt;/code&gt; may return an empty sequence.&lt;/p&gt;
&lt;p&gt;I wonder if we can define a principle which functions should be variadic?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 086 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 16 Jul 2024 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/07-16</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-07-16</guid>
</item><item>
   <title>Issue #1324 created</title>
   <pubDate>Tue, 16 Jul 2024 16:10:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1324</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1324</guid>
   <description>&lt;div&gt;&lt;p&gt;Executable specifications&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;For a number of functions we have provided executable specifications: that is, we have provided an XQuery function declaration that claims to be a conformant implementation of the function being specified.&lt;/p&gt;
&lt;p&gt;We should add machinery to ensure that these reference implementations are correct: that is, that they compile, that they correctly run the examples in the spec, and that they can be used to run the tests for the relevant function in the test suite.&lt;/p&gt;
&lt;p&gt;There are one or two cases where we have been doing this in an ad-hoc way by having additional test cases in the test suite that use the reference implementation (or a copy of it!) in place of the real function; but this is clumsy and the process should be automated.&lt;/p&gt;
&lt;p&gt;It can be tied in with the mechanism that currently generates test cases from the examples in the spec.&lt;/p&gt;
&lt;p&gt;We should probably handle several levels:&lt;/p&gt;
&lt;p&gt;(a) There are cases where the reference implementation can be a simple XPath expression: for example the function &lt;code&gt;fn:local-name($x)&lt;/code&gt; delivers &lt;code&gt;fn:local-name-from-QName(fn:node-name($x))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(b) In other cases a full XQuery function declaration is needed, especially where it makes use of a supporting helper function.&lt;/p&gt;
&lt;p&gt;Ideally the reference implementation should use 3.1 syntax only (to make it easily testable on 3.1 implementations); but not if this sacrifices clarity, given that the primary audience is the human reader.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1244 closed</title>
   <pubDate>Tue, 16 Jul 2024 16:03:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1244</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1244</guid>
   <description>&lt;div&gt;&lt;p&gt;566-partial Rewrite parse-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1272 closed</title>
   <pubDate>Tue, 16 Jul 2024 16:02:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1272</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1272</guid>
   <description>&lt;div&gt;&lt;p&gt;Add xsl:value-of/@as attribute&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1323 created</title>
   <pubDate>Tue, 16 Jul 2024 13:11:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1323</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1323</guid>
   <description>&lt;div&gt;&lt;p&gt;Function parameters names: $uri vs. $href&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I was asked about the difference between the function parameter names &lt;code&gt;$href&lt;/code&gt; and &lt;code&gt;$uri&lt;/code&gt;…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:doc($href)&lt;/code&gt; (“Retrieves a document using a URI supplied as an &lt;code&gt;xs:string&lt;/code&gt;…”); &lt;code&gt;fn:unparsed-text($href)&lt;/code&gt;; others&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:collection($uri)&lt;/code&gt;, &lt;code&gt;fn:uri-collection($uri)&lt;/code&gt;; others&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…and I couldn’t give a convincing answer. At least in BaseX, both &lt;code&gt;fn:doc&lt;/code&gt; and &lt;code&gt;fn:collection&lt;/code&gt; can be used interchangeably to address single resources (but things change when the target contains multiple resources).&lt;/p&gt;
&lt;p&gt;Would it be reasonable to rename &lt;code&gt;$href&lt;/code&gt; to &lt;code&gt;$uri&lt;/code&gt;, or are there reasons why we need to differ those two?&lt;/p&gt;
&lt;p&gt;If we rename the parameter, &lt;code&gt;fn:resolve-uri&lt;/code&gt; may be the only function using &lt;code&gt;$href&lt;/code&gt; (maybe even here, &lt;code&gt;$uri&lt;/code&gt; could work?).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1322 created</title>
   <pubDate>Tue, 16 Jul 2024 13:00:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1322</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1322</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:collation-available (editorial)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Minor observations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As the function input is a plain URI, I would propose to rename &lt;code&gt;$collation&lt;/code&gt; to &lt;code&gt;$uri&lt;/code&gt; (see &lt;code&gt;fn:collection&lt;/code&gt; and other functions).&lt;/li&gt;
&lt;li&gt;I believe we should make &lt;code&gt;fn:collation-available($uri, ())&lt;/code&gt; and &lt;code&gt;fn:collation-available($uri)&lt;/code&gt; equivalent. Could we change the default value of &lt;code&gt;$usage&lt;/code&gt; to &lt;code&gt;()&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;It would be helpful to have (successul and failing) examples for the &lt;code&gt;$usage&lt;/code&gt; argument added to the specification. Maybe things get easier once test cases exist.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1321 created</title>
   <pubDate>Mon, 15 Jul 2024 23:56:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1321</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1321</guid>
   <description>&lt;div&gt;&lt;p&gt;Leading lone slash&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;PR #1313 clarifies how tokenization of direct constructors works.&lt;/p&gt;
&lt;p&gt;As a result we should rephrase the section on "leading lone slash" in A.1.2. This currently says (inter alia)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the &amp;lt; token could be either an operator or the start of a [DirectConstructor]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But we now speak of &lt;strong&gt;terminals&lt;/strong&gt; rather than &lt;strong&gt;tokens&lt;/strong&gt;, and a DirectConstructor is a terminal, whereas the &lt;code&gt;&amp;lt;&lt;/code&gt; character that appears at the start of a DirectConstructor is not a terminal.&lt;/p&gt;
&lt;p&gt;The revised formulation affects the interpretation of examples like &lt;code&gt;/ &amp;lt; 5&lt;/code&gt; (test cases PathExpr-5 and PathExpr-8) which I believe are now valid in XP40 and XQ40 (&lt;code&gt;&amp;lt;&lt;/code&gt; as a character can appear at the start of a RelativePathExpr, but &lt;code&gt;&amp;lt;&lt;/code&gt; as a token/terminal can't).&lt;/p&gt;
&lt;p&gt;The rule currently talks of a "token that can appear at the start of a RelativePathExpr" without enumerating the tokens/terminals that can do so. It would be helpful to both implementors and users (and test authors) if we could enumerate them - I believe we can construct a list by conducting a suitable query against the grammar.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1266 closed</title>
   <pubDate>Mon, 15 Jul 2024 14:07:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1266</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1266</guid>
   <description>&lt;div&gt;&lt;p&gt;1158 Add array mapping operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1320 created</title>
   <pubDate>Thu, 11 Jul 2024 11:30:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1320</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1320</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-uri: Observations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@ndw I decided to only give feedback on the first test that fails; maybe it makes things easier. Next, I chose this repository (instead of &lt;code&gt;qt4tests&lt;/code&gt;), as you are the better person to judge if bugs are to be fixed in the tests or the spec.&lt;/p&gt;
&lt;p&gt;The test case &lt;a href="https://github.com/qt4cg/qt4tests/blob/5b0750b035d336040b4944dba6225e50bd004839/fn/parse-uri.xml#L239-L253"&gt;fn-parse-uri-012&lt;/a&gt; uses &lt;code&gt;fn:parse-uri("file:///c:/path/to/file")&lt;/code&gt; and returns:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;{
  "uri": "file:///c:/path/to/file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c:", "path", "to", "file")
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Following the current rules, I would have expected &lt;code&gt;filepath&lt;/code&gt; to be &lt;code&gt;/c:/path/to/file&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;If URI matches `^([a-zA-Z][A-Za-z0-9\+\-\.]*):(.*)$`:
• SCHEME: file
• STRING: ///c:/path/to/file

If the scheme is known to be file and the string matches "^/*(/[a-zA-Z][:|].*)$":
• STRING: /c:/path/to/file

If the scheme is file or the empty sequence, and filepath is the empty sequence, filepath is also the whole string:
• FILEPATH: /c:/path/to/file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Would you propose to revise the test or the specification?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 085 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 9 Jul 2024 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/07-09</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-07-09</guid>
</item><item>
   <title>Issue #1158 closed</title>
   <pubDate>Tue, 9 Jul 2024 16:26:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1158</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1158</guid>
   <description>&lt;div&gt;&lt;p&gt;Simple mapping operator for arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1319 created</title>
   <pubDate>Tue, 9 Jul 2024 16:20:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1319</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1319</guid>
   <description>&lt;div&gt;&lt;p&gt;Specification Documents: Editors and Contributors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have noticed that the headers of the specification documents of previous versions of the languages contain more than one editor. In some EXPath documents, both editors and contributors are listed (with editors doing the majority of the work).&lt;/p&gt;
&lt;p&gt;As various people have now been contributing to the new specifications and the documents for the last months and years already, would it make sense (and would it conform to current W3 conventions) to name more than one person in the header? In either case, it should certainly be made clear that Michael Kay has contributed the very vast majority of the content.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1306 closed</title>
   <pubDate>Tue, 9 Jul 2024 16:15:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1306</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1306</guid>
   <description>&lt;div&gt;&lt;p&gt;46 Add @as attribute to xsl:sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1262 closed</title>
   <pubDate>Tue, 9 Jul 2024 16:12:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1262</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1262</guid>
   <description>&lt;div&gt;&lt;p&gt;1160 Add collation-available() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1311 closed</title>
   <pubDate>Tue, 9 Jul 2024 16:08:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1311</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1311</guid>
   <description>&lt;div&gt;&lt;p&gt;Tokenization and element constructors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1313 closed</title>
   <pubDate>Tue, 9 Jul 2024 16:08:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1313</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1313</guid>
   <description>&lt;div&gt;&lt;p&gt;1311 Tokenizing after &amp;lt;&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #566 closed</title>
   <pubDate>Tue, 9 Jul 2024 15:03:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/566</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-566</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-uri, fn:build-uri: Feedback&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1318 created</title>
   <pubDate>Tue, 9 Jul 2024 08:30:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1318</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1318</guid>
   <description>&lt;div&gt;&lt;p&gt;Function Coercion: Records, Maps, Arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Conclusion (2024-09-11):&lt;/strong&gt; As we plan to keep coercion rules for records, we should add rules for arrays and maps as well: If &lt;code&gt;$v as xs:int+&lt;/code&gt; is successful for &lt;code&gt;(1, 2)&lt;/code&gt;, &lt;code&gt;$v as array(xs:int)&lt;/code&gt; should be successful for &lt;code&gt;[ 1, 2 ]&lt;/code&gt;.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;I like to question the coercion rule that encompasses record tests:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start="6"&gt;
&lt;li&gt;If &lt;em&gt;R&lt;/em&gt; is a &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#doc-xquery40-RecordTest"&gt;RecordTest&lt;/a&gt; and &lt;em&gt;J&lt;/em&gt; is a map, then J is converted to a new map as follows:&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The keys in the supplied map are unchanged.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;In any map entry whose key is an &lt;code&gt;xs:string&lt;/code&gt; equal to the name of one of the field declarations in R, the corresponding value is converted to the required type defined by that field declaration, by applying the coercion rules recursively (but with XPath 1.0 compatibility mode treated as false).&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;I would like us to drop this rule. I believe that both the instance checks and the conversions of large maps can get very expensive. In addition, it may even require recursive rebuilds of map structures if a supplied record test includes nested record tests.&lt;/p&gt;
&lt;p&gt;I think it’s completely fair to expect users to deliver maps in a way that matches record definitions, and it could even be counterintuitive if map updates take place as a consequence of a simple function call.&lt;/p&gt;
&lt;p&gt;If we want to stick to that coercion rule, we should also define coercion rules for maps and arrays.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1317 created</title>
   <pubDate>Mon, 8 Jul 2024 11:18:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1317</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1317</guid>
   <description>&lt;div&gt;&lt;p&gt;Record Test Subtype Relationship&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;For a subtype relationship between record tests, &lt;code&gt;A ⊆ B&lt;/code&gt;, I am trying to understand the impact of the extensibility of &lt;code&gt;A&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; is extensible, but I can't spot any.&lt;/p&gt;
&lt;p&gt;The cases of extensible and non-extensible &lt;code&gt;A&lt;/code&gt; are distinguished in &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-item-subtype-records"&gt;3.3.2.10 Record Tests&lt;/a&gt;, points 5 and 6. The only difference between those, apart from &lt;code&gt;A&lt;/code&gt;'s extensibility, is the first one saying&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For every field that is declared in B but not in A, the declared type in B is item()*.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;while the second one has&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every field that is declared in B with a type other than item()* is also declared in A.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the first one asks for a type of &lt;code&gt;item(*)&lt;/code&gt; when a declaration is missing, and the second one allows a missing declaration only for a type of &lt;code&gt;item(*)&lt;/code&gt;. How can that not be the same?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 085 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 8 Jul 2024 10:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/07-09</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-07-09</guid>
</item><item>
   <title>Issue #1316 created</title>
   <pubDate>Sat, 6 Jul 2024 14:49:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1316</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1316</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath: type declarations in quantified expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have added type declarations to XPath "for" and "let" expressions, but not to "some" and "every", where they remain XQuery-only. This seems a needless inconsistency.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1315 created</title>
   <pubDate>Thu, 4 Jul 2024 13:29:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1315</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1315</guid>
   <description>&lt;div&gt;&lt;p&gt;12 div-3&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Revisiting an old issue here: should &lt;code&gt;12 div-3&lt;/code&gt; parse?&lt;/p&gt;
&lt;p&gt;Under the new 4.0 tokenization rules, it certainly doesn't.&lt;/p&gt;
&lt;p&gt;But under Michael Dyck's interpretation of the 3.1 rules, it does parse; and accordingly we made it parse in Saxon: see https://saxonica.plan.io/issues/2715 .&lt;/p&gt;
&lt;p&gt;Michael D's reasoning is at&lt;/p&gt;
&lt;p&gt;https://lists.w3.org/Archives/Public/public-xsl-query/2016Mar/0037.html&lt;/p&gt;
&lt;p&gt;He argued that the the longest token "consistent with the EBNF" is &lt;code&gt;div&lt;/code&gt; (because &lt;code&gt;div-3&lt;/code&gt; is not consistent with the EBNF), and that the rule requiring a space between an NCName and a hyphen does not apply because &lt;code&gt;div&lt;/code&gt; in this context is a keyword, not an NCName.&lt;/p&gt;
&lt;p&gt;Specifically, in existing XPath processors, does it parse?&lt;/p&gt;
&lt;p&gt;I'm going to defend the new rules in 4.0 here, in which tokenization is independent of syntactic context. I think that's a much clearer definition. But in the interests of full disclosure, the CG might like to note that this may be incompatible with the way some people have interpreted the 3.1 rules&lt;/p&gt;
&lt;p&gt;Incidentally, removing the tweak that makes Saxon able to parse &lt;code&gt;12 div-3&lt;/code&gt; doesn't break any test cases.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 084 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 2 Jul 2024 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/07-02</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-07-02</guid>
</item><item>
   <title>Issue #729 closed</title>
   <pubDate>Tue, 2 Jul 2024 16:09:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/729</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-729</guid>
   <description>&lt;div&gt;&lt;p&gt;xsi:schemaLocation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1254 closed</title>
   <pubDate>Tue, 2 Jul 2024 16:09:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1254</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1254</guid>
   <description>&lt;div&gt;&lt;p&gt;729 Add rules for use of xsi:schemaLocation during validation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1161 closed</title>
   <pubDate>Tue, 2 Jul 2024 16:07:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1161</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1161</guid>
   <description>&lt;div&gt;&lt;p&gt;More changes to drop the requirement for document-uri() uniqueness&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1265 closed</title>
   <pubDate>Tue, 2 Jul 2024 16:07:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1265</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1265</guid>
   <description>&lt;div&gt;&lt;p&gt;1161 Further revision of document-uri constraints&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1289 closed</title>
   <pubDate>Tue, 2 Jul 2024 16:05:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1289</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1289</guid>
   <description>&lt;div&gt;&lt;p&gt;Delete XQuery Appendix J&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1293 closed</title>
   <pubDate>Tue, 2 Jul 2024 16:05:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1293</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1293</guid>
   <description>&lt;div&gt;&lt;p&gt;1289 Delete XQuery Appendix J&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1314 created</title>
   <pubDate>Mon, 1 Jul 2024 16:39:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1314</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1314</guid>
   <description>&lt;div&gt;&lt;p&gt;Ambiguity in XPath EBNF - Lookup with TypeQualifier vs DynamicFunctionCall&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Additional to https://github.com/qt4cg/qtspecs/issues/1050
An additional ambiguity occurs in one of the deep lookup examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$tree ??$from ??type(record(to, distance))[?to=$to] ?distance
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which can be simplified to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$tree ??type(foo)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where there is ambiguity between a &lt;code&gt;LookupExpr&lt;/code&gt; with &lt;code&gt;TypeQualifier&lt;/code&gt; and a &lt;code&gt;DynamicFunctionCall&lt;/code&gt; on a function named &lt;code&gt;type&lt;/code&gt;. That is, &lt;code&gt;type&lt;/code&gt; should perhaps be one of the restrictions on function name to avoid this ambiguity.&lt;/p&gt;
&lt;p&gt;Whether something more fundamental is needed on the productions around [74],[75] and [84]-[88] I'm not sure, but certainly &lt;code&gt;type&lt;/code&gt; can appear either as a keyword for &lt;code&gt;TypeQualifier&lt;/code&gt; (consuming the bracketed type) or a value of an &lt;code&gt;NCName&lt;/code&gt; (with the bracketed section being a higher-level &lt;code&gt;PositionalArgumentList&lt;/code&gt;), both being part of a&lt;code&gt; KeySpecifier&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1313 created</title>
   <pubDate>Mon, 1 Jul 2024 15:59:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1313</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1313</guid>
   <description>&lt;div&gt;&lt;p&gt;1311 Tokenizing after &amp;lt;&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1311&lt;/p&gt;
&lt;p&gt;Defines precise rules for tokenization in the presence of direct element and PI constructors.&lt;/p&gt;
&lt;p&gt;I chose to make the rules independent of the syntactic context.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1312 created</title>
   <pubDate>Mon, 1 Jul 2024 07:24:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1312</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1312</guid>
   <description>&lt;div&gt;&lt;p&gt;Productions missing ws:explicit&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Some lexical productions including&lt;/p&gt;
&lt;p&gt;Digits, DecDigit, HexDigits,  HexDigit, BinaryDigits, BinaryDigit&lt;/p&gt;
&lt;p&gt;are missing the ws:explicit annotation&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1311 created</title>
   <pubDate>Sun, 30 Jun 2024 22:02:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1311</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1311</guid>
   <description>&lt;div&gt;&lt;p&gt;Tokenization and element constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The new rules in Appendix A.3 on tokenization are, I believe, a great improvement on what went before. But I think there is one thing missing: they claim that the rules allow you to identify boundaries between tokens unambiguously independently of the syntactic context, but in the case of a token starting with &lt;code&gt;&amp;lt;&lt;/code&gt;, this isn't true: to distinguish whether &lt;code&gt;&amp;lt;&lt;/code&gt; represents a less-than-operator (or &lt;code&gt;&amp;lt;=&lt;/code&gt; operator) or whether it is the start of an element constructor, you need some context information.&lt;/p&gt;
&lt;p&gt;Saxon's tokenization is still based on the principles outlined in the XPath 1.0 spec where tokens are disambiguated based on the immediately preceding and following tokens; this is becoming increasingly unviable. Most cases can be handled instead by moving the disambiguation into the parser rather than the tokenizer, but this relies on being able to find token boundaries without knowledge of context (as described in the 4.0 spec), which appears to be possible in all cases except &lt;code&gt;&amp;lt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Essentially we need to add an exception to the rule: &lt;em&gt;"If the current position is not the end of the input, then return the longest [literal terminal]( or [variable terminal] that can be matched starting at the current position..."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I think the exception might be formulated as follows:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In XQuery, when the next character is &lt;code&gt;&amp;lt;&lt;/code&gt; and this is immediately followed by an NCNameStart character (for example &lt;code&gt;X&lt;/code&gt;) the next token could be either a less than operator, or a DirElemConstructor. The "longest terminal" rule cannot reliably distinguish these cases. Instead, the decision must take into account the syntactic context. A DirElemConstructor can only appear where the parser is expecting to read an expression, while the less-than operator can never appear where the parser is expecting an expression. This aspect of the syntactic context therefore needs to be communicated from the parser to the tokenizer.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, the two cases might be distinguished by backtracking. The tokenizer could attempt to interpret the text following the &lt;code&gt;&amp;lt;&lt;/code&gt; character as a DirElemConstructor, and revert to the alternative interpretation if this fails.&lt;/p&gt;
&lt;p&gt;Note: this was not explained clearly in 3.1. Perhaps it was covered by the quixotic phrase "the longest token consistent with the EBNF".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1310 created</title>
   <pubDate>Sun, 30 Jun 2024 02:38:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1310</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1310</guid>
   <description>&lt;div&gt;&lt;p&gt;add fn:match-groups() function&lt;/p&gt;…failed to parse issue text…&lt;/div&gt;</description>
</item><item>
   <title>Issue #1309 created</title>
   <pubDate>Thu, 27 Jun 2024 19:53:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1309</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1309</guid>
   <description>&lt;div&gt;&lt;p&gt;Dangling else syntax ambiguity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think this is ambiguous, or at any rate, involves arbitrary lookahead:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if (a = b) then if (c = d) {23} else {}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You only get a successful parse if you associate the "else" with the first "if", but you can't do that until you know that there isn't going to be a second "else".&lt;/p&gt;
&lt;p&gt;Again, it's the fact that an expression can now begin with a left curly brace that's the culprit.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1308 created</title>
   <pubDate>Thu, 27 Jun 2024 16:41:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1308</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1308</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:apply argument names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The narrative of fn:apply repeatedly refers to &lt;code&gt;$array&lt;/code&gt; where &lt;code&gt;$arguments&lt;/code&gt; is intended.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1303 closed</title>
   <pubDate>Thu, 27 Jun 2024 13:54:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1303</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1303</guid>
   <description>&lt;div&gt;&lt;p&gt;Recognize 'fn' as well as 'function' in signatures&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1307 created</title>
   <pubDate>Thu, 27 Jun 2024 07:54:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1307</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1307</guid>
   <description>&lt;div&gt;&lt;p&gt;For symmetry, add functions array:scan-left and array:scan-right&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The fold-left and fold-right functions are defined both for sequences and arrays; symmetry demands that the same should apply to scan-left and scan-right.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1281 closed</title>
   <pubDate>Wed, 26 Jun 2024 08:51:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1281</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1281</guid>
   <description>&lt;div&gt;&lt;p&gt;invisible-xml() return type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1294 closed</title>
   <pubDate>Wed, 26 Jun 2024 08:47:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1294</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1294</guid>
   <description>&lt;div&gt;&lt;p&gt;46 Add xsl:item and xsl:sequence/@as&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1306 created</title>
   <pubDate>Wed, 26 Jun 2024 07:43:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1306</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1306</guid>
   <description>&lt;div&gt;&lt;p&gt;46 Add @as attribute to xsl:sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Revised PR that drops the proposed xsl:item instruction&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1287 closed</title>
   <pubDate>Tue, 25 Jun 2024 21:11:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1287</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1287</guid>
   <description>&lt;div&gt;&lt;p&gt;Missing error conditions for fn:parse-xml()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1288 closed</title>
   <pubDate>Tue, 25 Jun 2024 21:11:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1288</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1288</guid>
   <description>&lt;div&gt;&lt;p&gt;1287 Define parse-xml error conditions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1298 closed</title>
   <pubDate>Tue, 25 Jun 2024 20:45:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1298</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1298</guid>
   <description>&lt;div&gt;&lt;p&gt;In change markup, handle multiple issue or PR numbers&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1305 created</title>
   <pubDate>Tue, 25 Jun 2024 19:22:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1305</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1305</guid>
   <description>&lt;div&gt;&lt;p&gt;Almost all functions in FO that must process multiple string items, can have as a parameter only a single collation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;The problem&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;At present the only XPath 4 function (that I am aware of) that can process multiple strings and use multiple collations (a specific collation for a specific string comparison) is &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-sort"&gt;&lt;strong&gt;&lt;code&gt;fn:sort&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some very important functions, such as &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-deep-equal"&gt;&lt;strong&gt;&lt;code&gt;fn:deep-equal&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-compare"&gt;&lt;strong&gt;&lt;code&gt;fn:compare&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; can have only one collation as a parameter.&lt;/p&gt;
&lt;p&gt;This means that when we are comparing sequences of items which contain multiple strings each of which could need to be handled in a specific collation, we are not able to provide all such collations (but are providing just a single collation) to the comparing function - &lt;code&gt;fn:deep-equal&lt;/code&gt; or &lt;code&gt;fn:compare&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The end result is that all string comparisons will be done using that single collation and may not produce the correct result (that would be produced if the particular comparison was done with the particular collation).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Possible solutions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is difficult to provide a solution to this problem and the list below is open ended:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add a &lt;strong&gt;&lt;code&gt;collation&lt;/code&gt;&lt;/strong&gt; property to the type &lt;code&gt;xs:string&lt;/code&gt;.
Then we would specify the type as &lt;strong&gt;&lt;code&gt;(xs:string, collation-name?)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make &lt;code&gt;fn:deep-equal&lt;/code&gt; and &lt;code&gt;fn:compare&lt;/code&gt; accept not a single collation but a sequence of collation-names.
In this case a pair of strings will be compared once for every collation that is specified. The idea is that the sequence of collations would be provided ordered by decreasing specificity. The first result that is produced at least twice in this process (something like voting) would be the result of the comparison. In case of a tie, the comparison done with the collation that is earliest (supposed to be more specific) will have higher priority.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave this as it is at present, but add to the specification a warning to the user that specifying a single collation-name may not be what they want.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove from &lt;code&gt;fn:sort&lt;/code&gt; the multiple-collations parameter and allow only a single collation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 083 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 25 Jun 2024 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/06-25</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-06-25</guid>
</item><item>
   <title>Issue #1096 closed</title>
   <pubDate>Tue, 25 Jun 2024 16:17:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1096</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1096</guid>
   <description>&lt;div&gt;&lt;p&gt;Effect of atomization on array:index-of()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1295 closed</title>
   <pubDate>Tue, 25 Jun 2024 16:17:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1295</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1295</guid>
   <description>&lt;div&gt;&lt;p&gt;1096 Redefine array:index-of to use deep-equal for comparisons&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1285 closed</title>
   <pubDate>Tue, 25 Jun 2024 16:16:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1285</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1285</guid>
   <description>&lt;div&gt;&lt;p&gt;Appendix H of F&amp;amp;O should mention change for unrecognised option parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1286 closed</title>
   <pubDate>Tue, 25 Jun 2024 16:16:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1286</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1286</guid>
   <description>&lt;div&gt;&lt;p&gt;Updated list of incompatibilities in F+O&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1291 closed</title>
   <pubDate>Tue, 25 Jun 2024 16:12:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1291</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1291</guid>
   <description>&lt;div&gt;&lt;p&gt;Change obsolete notes on rounding&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1292 closed</title>
   <pubDate>Tue, 25 Jun 2024 16:12:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1292</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1292</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue 1291 (rounding)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1253 closed</title>
   <pubDate>Tue, 25 Jun 2024 16:09:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1253</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1253</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: add xsl:switch to list of instructions within which whitespace is ignored&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1255 closed</title>
   <pubDate>Tue, 25 Jun 2024 16:09:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1255</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1255</guid>
   <description>&lt;div&gt;&lt;p&gt;1253 whitespace in xsl:switch&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1282 closed</title>
   <pubDate>Tue, 25 Jun 2024 16:06:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1282</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1282</guid>
   <description>&lt;div&gt;&lt;p&gt;Revise fn:invisible-xml&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1304 closed</title>
   <pubDate>Tue, 25 Jun 2024 16:03:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1304</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1304</guid>
   <description>&lt;div&gt;&lt;p&gt;Fixed typo in the example of scan-right&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1290 closed</title>
   <pubDate>Tue, 25 Jun 2024 07:39:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1290</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1290</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix keyword tests to treat "fn" = "function"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1302 closed</title>
   <pubDate>Tue, 25 Jun 2024 04:24:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1302</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1302</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet fix for 1298&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1304 created</title>
   <pubDate>Mon, 24 Jun 2024 17:19:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1304</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1304</guid>
   <description>&lt;div&gt;&lt;p&gt;Fixed typo in the example of scan-right&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fixed a minor typo in one of the examples for fn:scan-right&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1297 closed</title>
   <pubDate>Mon, 24 Jun 2024 17:06:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1297</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1297</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor correction to fn:scan-right  - typo&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1303 created</title>
   <pubDate>Mon, 24 Jun 2024 16:10:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1303</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1303</guid>
   <description>&lt;div&gt;&lt;p&gt;Recognize 'fn' as well as 'function' in signatures&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Stylesheet changes to the stylesheet that generates tests for all parameter keywords in system functions. The changes recognize &lt;code&gt;fn(&lt;/code&gt; in function signatures indicating that the generated test case needs to supply a function as the argument value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1302 created</title>
   <pubDate>Mon, 24 Jun 2024 15:57:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1302</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1302</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet fix for 1298&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes stylesheet to handle case where a change log entry refers to multiple issues or PRs. See "Lookup Expressions" in XQuery for an example.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1301 closed</title>
   <pubDate>Mon, 24 Jun 2024 15:51:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1301</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1301</guid>
   <description>&lt;div&gt;&lt;p&gt;1298 links to multiple issues&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1301 created</title>
   <pubDate>Mon, 24 Jun 2024 15:50:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1301</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1301</guid>
   <description>&lt;div&gt;&lt;p&gt;1298 links to multiple issues&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes stylesheet so that where a change entry refers to multiple issues or PRs, the links to each one are rendered correctly. (For an example, see "Lookup Expressions" in XQuery.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 083 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 24 Jun 2024 14:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/06-25</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-06-25</guid>
</item><item>
   <title>Issue #1300 closed</title>
   <pubDate>Mon, 24 Jun 2024 11:10:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1300</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1300</guid>
   <description>&lt;div&gt;&lt;p&gt;Commit the updated tests to the tests repository&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1300 created</title>
   <pubDate>Mon, 24 Jun 2024 11:10:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1300</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1300</guid>
   <description>&lt;div&gt;&lt;p&gt;Commit the updated tests to the tests repository&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Yes, it looks like that worked.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1299 closed</title>
   <pubDate>Mon, 24 Jun 2024 10:58:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1299</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1299</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to rework how the test repository is updated&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1299 created</title>
   <pubDate>Mon, 24 Jun 2024 10:58:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1299</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1299</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to rework how the test repository is updated&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This test will only work if I merge it, so ...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1298 created</title>
   <pubDate>Mon, 24 Jun 2024 08:03:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1298</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1298</guid>
   <description>&lt;div&gt;&lt;p&gt;In change markup, handle multiple issue or PR numbers&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In change markup we sometimes use multiple issue or PR numbers, for example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;change issue="123 456" PR="789 799"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;but the stylesheet is not currently recognizing this and generating multiple links.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1297 created</title>
   <pubDate>Mon, 24 Jun 2024 01:15:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1297</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1297</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor correction to fn:scan-right  - typo&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the first example the expression was:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scan-right(1 to 5, 0, op('+'))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but must be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scan-right(1 to 10, 0, op('+'))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1296 created</title>
   <pubDate>Sun, 23 Jun 2024 22:57:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1296</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1296</guid>
   <description>&lt;div&gt;&lt;p&gt;982 Rewrite of scan-left and scan-right&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #982&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The "equivalent expression" is replaced with one that is much shorter and hopefully easier to understand, though hopelessly inefficient as an actual implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The result no longer includes the zero value. This seems simpler, and is consistent with other expositions I have read, e.g. of the Scala functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The signature of scan-left and scan-right is now identical to fold-left and fold-right, which apart from having the virtue of consistency, makes it much easier to specify one in terms of the other. The change is that the callback function now allows a position argument.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1048 closed</title>
   <pubDate>Sun, 23 Jun 2024 19:51:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1048</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1048</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-number: relax restrictions on exponent-separator (possibly minus-sign, percent, per-mille)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1295 created</title>
   <pubDate>Sun, 23 Jun 2024 19:48:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1295</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1295</guid>
   <description>&lt;div&gt;&lt;p&gt;1096 Redefine array:index-of to use deep-equal for comparisons&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1096&lt;/p&gt;
&lt;p&gt;Using deep-equal for comparisons seems a reasonable default that avoids the atomization problem.&lt;/p&gt;
&lt;p&gt;Note, I would personally be quite happy to drop the function as an alternative resolution.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1294 created</title>
   <pubDate>Sun, 23 Jun 2024 18:47:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1294</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1294</guid>
   <description>&lt;div&gt;&lt;p&gt;46 Add xsl:item and xsl:sequence/@as&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #46&lt;/p&gt;
&lt;p&gt;Fix #1272&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1293 created</title>
   <pubDate>Sun, 23 Jun 2024 17:24:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1293</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1293</guid>
   <description>&lt;div&gt;&lt;p&gt;1289 Delete XQuery Appendix J&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1289&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1292 created</title>
   <pubDate>Sun, 23 Jun 2024 15:59:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1292</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1292</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue 1291 (rounding)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Delete an obsolete note.&lt;/p&gt;
&lt;p&gt;Make the spec consistent with regard to the keyword "to-even" vs "half-to-even".&lt;/p&gt;
&lt;p&gt;Fix #1291&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1291 created</title>
   <pubDate>Sun, 23 Jun 2024 15:44:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1291</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1291</guid>
   <description>&lt;div&gt;&lt;p&gt;Change obsolete notes on rounding&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There are a couple of non-normative notes on rounding that don't reflect the latest changes to the spec.&lt;/p&gt;
&lt;p&gt;In addition, the specification has been left inconsistent as to whether the option for rounding to even is written as "to-even" or "half-to-even". The latter spelling was intended.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1245 closed</title>
   <pubDate>Sun, 23 Jun 2024 15:39:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1245</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1245</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-dateTime: Properties&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1264 closed</title>
   <pubDate>Sun, 23 Jun 2024 15:39:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1264</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1264</guid>
   <description>&lt;div&gt;&lt;p&gt;1245 Correct properties of format-DT function family&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1236 closed</title>
   <pubDate>Sun, 23 Jun 2024 15:36:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1236</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1236</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-078-01 fn:unparsed-text-lines, normalize newlines&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1290 created</title>
   <pubDate>Sun, 23 Jun 2024 14:42:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1290</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1290</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix keyword tests to treat "fn" = "function"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When generating keyword tests for higher-order functions, the parameter type now generally uses "fn" rather than "function", which causes the stylesheet to generate incorrect tests.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1289 created</title>
   <pubDate>Sat, 22 Jun 2024 11:57:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1289</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1289</guid>
   <description>&lt;div&gt;&lt;p&gt;Delete XQuery Appendix J&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Appendix J contains examples of XQuery applications. It already acknowledges that some of these could significantly benefit from using new features in versions 3.0 and 3.1. I think it has now served its purpose and it's time to remove it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1288 created</title>
   <pubDate>Fri, 21 Jun 2024 16:47:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1288</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1288</guid>
   <description>&lt;div&gt;&lt;p&gt;1287 Define parse-xml error conditions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1287&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1287 created</title>
   <pubDate>Thu, 20 Jun 2024 18:43:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1287</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1287</guid>
   <description>&lt;div&gt;&lt;p&gt;Missing error conditions for fn:parse-xml()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose to define:&lt;/p&gt;
&lt;p&gt;FODC0007 - DTD or schema validation was requested in &lt;code&gt;parse-xml()&lt;/code&gt;, and the XML was found to be invalid.&lt;/p&gt;
&lt;p&gt;FODC0008 - Invalid value for the schema-validation option of &lt;code&gt;parse-xml()&lt;/code&gt; (for example, "Type XXX" where XXX is an invalid QName or a QName that does not refer to a known type.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 082 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 18 Jun 2024 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/06-18</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-06-18</guid>
</item><item>
   <title>Issue #1274 closed</title>
   <pubDate>Tue, 18 Jun 2024 16:27:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1274</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1274</guid>
   <description>&lt;div&gt;&lt;p&gt;Further refinement of fn:round()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1275 closed</title>
   <pubDate>Tue, 18 Jun 2024 16:27:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1275</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1275</guid>
   <description>&lt;div&gt;&lt;p&gt;1274 Further rounding modes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1268 closed</title>
   <pubDate>Tue, 18 Jun 2024 16:25:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1268</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1268</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-077-03 Add note on document order across documents&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1270 closed</title>
   <pubDate>Tue, 18 Jun 2024 16:17:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1270</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1270</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-081-01 Add cross refererence from fn:round-half-to-even&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1276 closed</title>
   <pubDate>Tue, 18 Jun 2024 16:14:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1276</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1276</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-081-03 parse-xml-[fragment]: $options should be optional&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1278 closed</title>
   <pubDate>Tue, 18 Jun 2024 16:12:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1278</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1278</guid>
   <description>&lt;div&gt;&lt;p&gt;Line endings in unparsed-text-lines()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1279 closed</title>
   <pubDate>Tue, 18 Jun 2024 16:12:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1279</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1279</guid>
   <description>&lt;div&gt;&lt;p&gt;1278 - line endings in unparsed-text-lines&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1267 closed</title>
   <pubDate>Tue, 18 Jun 2024 16:07:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1267</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1267</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:apply() - contradiction in spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1280 closed</title>
   <pubDate>Tue, 18 Jun 2024 16:07:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1280</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1280</guid>
   <description>&lt;div&gt;&lt;p&gt;1267 fn:apply contradictions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1286 created</title>
   <pubDate>Tue, 18 Jun 2024 10:58:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1286</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1286</guid>
   <description>&lt;div&gt;&lt;p&gt;Updated list of incompatibilities in F+O&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Added an incompatibility regarding unrecognized option values.&lt;/p&gt;
&lt;p&gt;Removed an incompatibility regarding normalisation of line endings in unparsed-text().&lt;/p&gt;
&lt;p&gt;Fix #1285&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1285 created</title>
   <pubDate>Mon, 17 Jun 2024 16:31:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1285</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1285</guid>
   <description>&lt;div&gt;&lt;p&gt;Appendix H of F&amp;amp;O should mention change for unrecognised option parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have made a change to the option parameter conventions so that unrecognised options are no longer ignored, they are now rejected. We should document this in Appendix H as a backwards incompatibility.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1284 created</title>
   <pubDate>Mon, 17 Jun 2024 16:28:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1284</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1284</guid>
   <description>&lt;div&gt;&lt;p&gt;Build issue: Unsupported specref to  [streamability-fn-distinct-ordered-nodes]&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; the problem is that there's no "streamibility of fn:distinct-ordered-nodes" section. The expanded versions of the XSLT 4.0 specification all contain generated links to such a section, but there's no such section.&lt;/p&gt;
&lt;p&gt;Editorial oversight, or should that function &lt;em&gt;not&lt;/em&gt; generate the specref for some reason?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1283 created</title>
   <pubDate>Mon, 17 Jun 2024 15:56:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1283</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1283</guid>
   <description>&lt;div&gt;&lt;p&gt;77b Update expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is the result of splitting PR #832 into two parts; this part extracts update expressions into a separate proposal, for ease of review.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1282 created</title>
   <pubDate>Mon, 17 Jun 2024 15:47:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1282</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1282</guid>
   <description>&lt;div&gt;&lt;p&gt;Revise fn:invisible-xml&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Resolve &lt;code&gt;QT4CG-080-04&lt;/code&gt;: NW to revise p:invisible-xml, fix #991&lt;/li&gt;
&lt;li&gt;Resolve &lt;code&gt;QT4CG-081-04&lt;/code&gt;: NW to update the function signature of fn:invisible-xml&lt;/li&gt;
&lt;li&gt;Resolve &lt;code&gt;QT4CG-081-04&lt;/code&gt;: NW to describe why the grammar option can be empty on fn:invisible-xml&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1281 created</title>
   <pubDate>Mon, 17 Jun 2024 11:23:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1281</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1281</guid>
   <description>&lt;div&gt;&lt;p&gt;invisible-xml() return type&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It has been pointed out that the return type of &lt;code&gt;fn:invisible-xml()&lt;/code&gt;, currently &lt;code&gt;fn(xs:string) as item()&lt;/code&gt;, could be more precisely given as &lt;code&gt;fn(xs:string) as document-node()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1280 created</title>
   <pubDate>Mon, 17 Jun 2024 07:52:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1280</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1280</guid>
   <description>&lt;div&gt;&lt;p&gt;1267 fn:apply contradictions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1267&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1279 created</title>
   <pubDate>Mon, 17 Jun 2024 05:41:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1279</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1279</guid>
   <description>&lt;div&gt;&lt;p&gt;1278 - line endings in unparsed-text-lines&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1278&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1278 created</title>
   <pubDate>Sun, 16 Jun 2024 21:28:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1278</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1278</guid>
   <description>&lt;div&gt;&lt;p&gt;Line endings in unparsed-text-lines()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The status quo text says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The $options argument is interpreted in the same way as the $options argument of [fn:unparsed-text]. In particular, for backwards compatibility, the supplied argument may be either a string (the name of an encoding) or a map.&lt;/p&gt;
&lt;p&gt;If the normalize-newlines option is set to true, then the single character U+000A (NEWLINE) , the single character U+000D (CARRIAGE RETURN) , and the character pair (U+000D (CARRIAGE RETURN) , U+000A (NEWLINE) ) are all recognized as line delimiters for the purpose of splitting the text into lines. If the option is set to false, then only the single character U+000A (NEWLINE) is recognized.&lt;/p&gt;
&lt;p&gt;The result of the function is the same as the result of the expression:&lt;/p&gt;
&lt;p&gt;(fn:unparsed-text($href, map:put($options, 'normalize-newlines', true()))
=&amp;gt; fn:tokenize('\n'))
[not(position()=last() and .='')]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There's clearly an inconsistency here. In unparsed-text, the default for normalize-newlines is false. But the equivalent expression ignores the supplied value and uses normalize-newlines=true. The second paragraph says that setting normalize-newlines to false means that only NL is recognized, but the equivalent expression contradicts this.&lt;/p&gt;
&lt;p&gt;I think the answer is to disallow the normalize-newlines option entirely, and recognize all three line endings as in 3.1.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1277 created</title>
   <pubDate>Sun, 16 Jun 2024 18:52:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1277</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1277</guid>
   <description>&lt;div&gt;&lt;p&gt;Declare named record types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Raised in response to action QT4CG-063-06.&lt;/p&gt;
&lt;p&gt;Currently named item types are simply an alias - except when they declare a record type, in which case they have some magic properties by allowing the record type to be recursive, and by the fact that they implicitly create constructor functions.&lt;/p&gt;
&lt;p&gt;We would also like to refine these constructor functions for example by allowing default values for fields to be defined.&lt;/p&gt;
&lt;p&gt;It might therefore make sense to define a separate construct for declaring named record types (in both XQuery and XSLT), and perhaps putting these in a separate category in the static context.&lt;/p&gt;
&lt;p&gt;We might also consider introducing some built-in named record types, for example for key-value pairs, so that users can conveniently construct instances of these record types without explicitly declaring them. These would presumably be in the fn namespace.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1276 created</title>
   <pubDate>Sun, 16 Jun 2024 18:05:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1276</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1276</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-081-03 parse-xml-[fragment]: $options should be optional&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes the function signature of parse-xml and parse-xml-fragment so the $options argument can be set to an empty sequence.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1275 created</title>
   <pubDate>Fri, 14 Jun 2024 10:54:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1275</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1275</guid>
   <description>&lt;div&gt;&lt;p&gt;1274 Further rounding modes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1274&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1274 created</title>
   <pubDate>Fri, 14 Jun 2024 09:44:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1274</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1274</guid>
   <description>&lt;div&gt;&lt;p&gt;Further refinement of fn:round()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've been adding tests and an implementation of the changes to fn:round() which now allow control of midpoint rounding, and this generates some thoughts.&lt;/p&gt;
&lt;p&gt;Firstly, we're using the rounding modes "floor" and "ceiling" with a different meaning from Java class RoundingMode, which may confuse some users. In our spec, these only affect handling of midpoint values, whereas in Java they affect all values, for example rounding 1.7 with rounding mode "floor" gives 1.0.&lt;/p&gt;
&lt;p&gt;Secondly, the function library only offers &lt;code&gt;fn:floor()&lt;/code&gt; and &lt;code&gt;fn:ceiling()&lt;/code&gt; to an integer. There's no way, for example, of rounding 1.9997 to 1.999 (which happens to be what we do in &lt;code&gt;format-time()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;So I propose that we extend the set of rounding modes to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;floor - towards negative infinity&lt;/li&gt;
&lt;li&gt;ceiling - towards positive infinity&lt;/li&gt;
&lt;li&gt;toward-zero - towards zero (i.e. truncate)&lt;/li&gt;
&lt;li&gt;away-from-zero - away from zero&lt;/li&gt;
&lt;li&gt;half-to-floor - to nearest, or floor if at midpoint&lt;/li&gt;
&lt;li&gt;half-to-ceiling - to nearest, or ceiling if at midpoint&lt;/li&gt;
&lt;li&gt;half-toward-zero - to nearest, or toward zero if at midpoint&lt;/li&gt;
&lt;li&gt;half-away-from-zero - to nearest, or away from zero if at midpoint&lt;/li&gt;
&lt;li&gt;half-to-even - to nearest, or to even if at midpoint&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1273 created</title>
   <pubDate>Thu, 13 Jun 2024 16:49:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1273</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1273</guid>
   <description>&lt;div&gt;&lt;p&gt;Generalize for-each-pair to work with any number of input sequences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Inspired by https://stackoverflow.com/questions/78614003&lt;/p&gt;
&lt;p&gt;fn:for-each-pair is great when you want to select corresponding items from two input sequences. But what if there are more than two?&lt;/p&gt;
&lt;p&gt;We could provide&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for-corresponding-items($input-sequences as array(item*)), $action as function(item()*))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for-corresponding-items([(1,2,3), ("a","b","c"), (true(), false(), true())],
       fn{ array{.} }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;returns &lt;code&gt;[1, "a", true()], [2, "b", false()], [3, "c", true()]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1272 created</title>
   <pubDate>Wed, 12 Jun 2024 08:27:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1272</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1272</guid>
   <description>&lt;div&gt;&lt;p&gt;Add xsl:value-of/@as attribute&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It has been suggested that we should add an @as attribute to xsl:value-of.&lt;/p&gt;
&lt;p&gt;The intent is to use this when returning a function result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:function name="f:incr"&amp;gt;
  &amp;lt;xsl:param name="x" as="xs:integer"/&amp;gt;
  &amp;lt;xsl:value-of select="$x+1" as="xs:integer"/&amp;gt;
&amp;lt;/xsl:function&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the absense of the @as attribute, the instruction constructs a text node as now. If @as is added, the effect of the instruction is to evaluate the select expression and coerce the result to the specified type.&lt;/p&gt;
&lt;p&gt;There are a number of questions of detail. What do we do about the @separator and @disable-output-escaping attributes? Do we allow &lt;code&gt;as="text()"&lt;/code&gt; so that there is an explicit way of getting the default behavior?&lt;/p&gt;
&lt;p&gt;More generally, will this actually make users' lives easier? It might read better than &lt;code&gt;xsl:sequence&lt;/code&gt; in this situation, but it isn't any more discoverable. Users who write code by copy-and-paste will still write xsl:value-of without realising the significance of the @as attribute.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1271 created</title>
   <pubDate>Wed, 12 Jun 2024 06:42:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1271</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1271</guid>
   <description>&lt;div&gt;&lt;p&gt;Schema validation in XPath&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In PR #1257 we added an options parameter to parse-xml() which includes the ability to request schema validation. We should make it clear what happens if this option is used in a non-schema-aware processor.&lt;/p&gt;
&lt;p&gt;XPath does not have the XQuery validate expression but it can now request validation by calling &lt;code&gt;serialize() =&amp;gt; parse-xml()&lt;/code&gt;. This doesn't seem very satisfactory - either XPath shouldn't have a validation capability, or it should do it properly.&lt;/p&gt;
&lt;p&gt;This will also affect other functions such as doc() if we add options for schema validation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1270 created</title>
   <pubDate>Tue, 11 Jun 2024 20:38:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1270</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1270</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-081-01 Add cross refererence from fn:round-half-to-even&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1248 closed</title>
   <pubDate>Tue, 11 Jun 2024 20:19:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1248</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1248</guid>
   <description>&lt;div&gt;&lt;p&gt;for member allowing empty&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1241 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:27:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1241</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1241</guid>
   <description>&lt;div&gt;&lt;p&gt;Node constructor vs. otherwise/map constructor&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1259 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:27:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1259</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1259</guid>
   <description>&lt;div&gt;&lt;p&gt;1241 Add constraint to resolve node constructor ambiguity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1246 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:25:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1246</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1246</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:json-to-xml: `number-parser` option&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1258 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:25:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1258</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1258</guid>
   <description>&lt;div&gt;&lt;p&gt;1246 Revert incompatibility in json-to-xml number formatting&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #305 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:23:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/305</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-305</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-xml() and whitespace stripping&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1257 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:23:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1257</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1257</guid>
   <description>&lt;div&gt;&lt;p&gt;305 Add options parameter for parse-xml and parse-xml-fragment&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1187 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:21:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1187</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1187</guid>
   <description>&lt;div&gt;&lt;p&gt;Decimal rounding&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1260 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:21:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1260</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1260</guid>
   <description>&lt;div&gt;&lt;p&gt;1187 Add midpoint-rounding option to fn:round()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #991 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:19:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/991</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-991</guid>
   <description>&lt;div&gt;&lt;p&gt;Invisible-xml - missing details&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1256 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:19:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1256</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1256</guid>
   <description>&lt;div&gt;&lt;p&gt;991 Fix editorial details in fn:invisible-xml&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1250 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:17:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1250</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1250</guid>
   <description>&lt;div&gt;&lt;p&gt;1048 Extended decimal format properties&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1249 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:15:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1249</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1249</guid>
   <description>&lt;div&gt;&lt;p&gt;31 Introduce "for key $k value $v in $map"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1119 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:15:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1119</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1119</guid>
   <description>&lt;div&gt;&lt;p&gt;Declare namespace bindings in XPath&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1055 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:14:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1055</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1055</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:variable/@as - simplifying the language - attempt 2&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #955 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:14:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/955</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-955</guid>
   <description>&lt;div&gt;&lt;p&gt;Options parameters as record types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #954 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:14:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/954</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-954</guid>
   <description>&lt;div&gt;&lt;p&gt;Establish a default value for the XSLT fixed-namespaces attribute&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #745 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:14:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/745</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-745</guid>
   <description>&lt;div&gt;&lt;p&gt;Support for inline (anonymous) xslt functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #379 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:14:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/379</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-379</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespace handling in parse-html&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1181 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:13:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1181</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1181</guid>
   <description>&lt;div&gt;&lt;p&gt;296 Allow default-namespace=##any&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #266 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:13:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/266</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-266</guid>
   <description>&lt;div&gt;&lt;p&gt;Add an option on xsl:copy-of to copy a subtree with a change of namespace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #168 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:13:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/168</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-168</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT Extension Instructions invoking Named Templates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #111 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:13:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/111</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-111</guid>
   <description>&lt;div&gt;&lt;p&gt;FLWOR tracing&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1013 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:12:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1013</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1013</guid>
   <description>&lt;div&gt;&lt;p&gt;[XSLT] Need to say what happens when a capturing accumulator rule matches a non-element node&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1015 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:12:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1015</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1015</guid>
   <description>&lt;div&gt;&lt;p&gt;1013 [XSLT] Clarify effect of accumulator capture on non-element nodes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #956 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:09:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/956</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-956</guid>
   <description>&lt;div&gt;&lt;p&gt;850-partial Editorial improvements to parse-html()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #920 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:06:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/920</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-920</guid>
   <description>&lt;div&gt;&lt;p&gt;The rules for the "tail position" of a sequence constructor need to take account of xsl:switch&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #921 closed</title>
   <pubDate>Tue, 11 Jun 2024 16:06:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/921</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-921</guid>
   <description>&lt;div&gt;&lt;p&gt;920 Allow xsl:break and xsl:next-iteration within branch of xsl:switch&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1269 created</title>
   <pubDate>Tue, 11 Jun 2024 16:05:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1269</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1269</guid>
   <description>&lt;div&gt;&lt;p&gt;Could the labeling of grammar productions be improved?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There was some discussion at &lt;a href="https://qt4cg.org/meeting/minutes/2024/06-11.html"&gt;meeting 081&lt;/a&gt; about whether the labeling of grammar productions could be improved. The current numbering isn't stable, but may have useful implications. The productions appear in snippets, sometimes more than once in different places.&lt;/p&gt;
&lt;p&gt;Could we do better? How?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1268 created</title>
   <pubDate>Tue, 11 Jun 2024 14:54:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1268</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1268</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-077-03 Add note on document order across documents&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1267 created</title>
   <pubDate>Tue, 11 Jun 2024 13:58:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1267</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1267</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:apply() - contradiction in spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The spec says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The arity of the supplied function $function must be the same as the size of the array $array.&lt;/p&gt;
&lt;p&gt;The effect of calling fn:apply($f, [$a, $b, $c, ...]) is the same as the effect of the dynamic function call $f($a, $b, $c, ....). For example, the function conversion rules are applied to the supplied arguments in the usual way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These two rules appear contradictory. If the function conversion rules (should be: coercion rules) are applied in the usual way, then it is possible to supply excess arguments, which will be ignored.&lt;/p&gt;
&lt;p&gt;If excess arguments can be supplied then the example &lt;code&gt;apply($f, array:subarray([ "a", "b", "c", "d", "e", "f" ], 1, function-arity($f)))&lt;/code&gt; becomes meaningless, since the same effect can be achieved with &lt;code&gt;apply($f, [ "a", "b", "c", "d", "e", "f" ])&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(Also, we could now write &lt;code&gt;apply($f, [ "a", "b", "c", "d", "e", "f" ]?[1 to function-arity($f)])&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1266 created</title>
   <pubDate>Tue, 11 Jun 2024 08:18:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1266</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1266</guid>
   <description>&lt;div&gt;&lt;p&gt;1158 Add array mapping operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1158&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1265 created</title>
   <pubDate>Tue, 11 Jun 2024 07:21:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1265</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1265</guid>
   <description>&lt;div&gt;&lt;p&gt;1161 Further revision of document-uri constraints&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1161&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1264 created</title>
   <pubDate>Mon, 10 Jun 2024 21:49:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1264</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1264</guid>
   <description>&lt;div&gt;&lt;p&gt;1245 Correct properties of format-DT function family&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1245&lt;/p&gt;
&lt;p&gt;Note: since any of the last three arguments can now be present but set to (), the relevant context dependency becomes independent of arity, so the rules can be simplified.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1263 created</title>
   <pubDate>Mon, 10 Jun 2024 17:04:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1263</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1263</guid>
   <description>&lt;div&gt;&lt;p&gt;1224 Add xsl:accumulator-rule/@priority attribute&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1224&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1262 created</title>
   <pubDate>Mon, 10 Jun 2024 16:37:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1262</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1262</guid>
   <description>&lt;div&gt;&lt;p&gt;1160 Add collation-available() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;New function collation-available()&lt;/p&gt;
&lt;p&gt;Existing function fn:collation() no longer fails if the constructed collation URI is unavailable.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 081 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 10 Jun 2024 12:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/06-11</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-06-11</guid>
</item><item>
   <title>Issue #1261 created</title>
   <pubDate>Mon, 10 Jun 2024 09:49:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1261</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1261</guid>
   <description>&lt;div&gt;&lt;p&gt;Add decimal-divide function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Introduce a decimal-divide function that&lt;/p&gt;
&lt;p&gt;(a) defines the precision of the required result, perhaps with rounding options
(b) returns both the quotient and the remainder in a single operation (as a map/record)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1260 created</title>
   <pubDate>Mon, 10 Jun 2024 09:46:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1260</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1260</guid>
   <description>&lt;div&gt;&lt;p&gt;1187 Add midpoint-rounding option to fn:round()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1187&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1259 created</title>
   <pubDate>Mon, 10 Jun 2024 09:04:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1259</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1259</guid>
   <description>&lt;div&gt;&lt;p&gt;1241 Add constraint to resolve node constructor ambiguity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1241&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1258 created</title>
   <pubDate>Mon, 10 Jun 2024 08:26:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1258</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1258</guid>
   <description>&lt;div&gt;&lt;p&gt;1246 Revert incompatibility in json-to-xml number formatting&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1246&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1257 created</title>
   <pubDate>Mon, 10 Jun 2024 06:09:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1257</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1257</guid>
   <description>&lt;div&gt;&lt;p&gt;305 Add options parameter for parse-xml and parse-xml-fragment&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #305&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1256 created</title>
   <pubDate>Sun, 9 Jun 2024 08:47:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1256</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1256</guid>
   <description>&lt;div&gt;&lt;p&gt;991 Fix editorial details in fn:invisible-xml&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #991&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1255 created</title>
   <pubDate>Sat, 8 Jun 2024 21:48:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1255</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1255</guid>
   <description>&lt;div&gt;&lt;p&gt;1253 whitespace in xsl:switch&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1253&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1254 created</title>
   <pubDate>Sat, 8 Jun 2024 21:33:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1254</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1254</guid>
   <description>&lt;div&gt;&lt;p&gt;729 Add rules for use of xsi:schemaLocation during validation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #729&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1253 created</title>
   <pubDate>Sat, 8 Jun 2024 20:27:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1253</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1253</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: add xsl:switch to list of instructions within which whitespace is ignored&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add &lt;code&gt;xsl:switch&lt;/code&gt; to the list in 3.13.1 rule 5.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 080 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Thu, 6 Jun 2024 08:50:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/06-04</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-06-04</guid>
</item><item>
   <title>Issue #1252 created</title>
   <pubDate>Wed, 5 Jun 2024 12:33:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1252</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1252</guid>
   <description>&lt;div&gt;&lt;p&gt;Add a new function `fn:html-doc`&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;The current specification has functions to retrieve &lt;em&gt;and&lt;/em&gt; parse XML (&lt;code&gt;fn:doc#1&lt;/code&gt;), and JSON (&lt;code&gt;fn:json-doc#1&lt;/code&gt;) but &lt;em&gt;not&lt;/em&gt; for html.&lt;/p&gt;
&lt;p&gt;For convenience and consistency I propose to add &lt;code&gt;fn:html-doc($href as xs:string?) as document-node()?&lt;/code&gt; to be added to the spec.&lt;/p&gt;
&lt;h2&gt;Justification&lt;/h2&gt;
&lt;p&gt;Parsing an html document after retrieving it from a source is a very common use-case.&lt;/p&gt;
&lt;p&gt;@cedporter raised the question if we also want to have &lt;code&gt;fn:csv-doc#1&lt;/code&gt; or maybe instead of adding specialised functions to retrieve and parse a document per data format rather extend &lt;code&gt;fn:doc&lt;/code&gt; with an option to parse the retrieved document as being in a certain format (xml, json, html or csv).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #871 closed</title>
   <pubDate>Wed, 5 Jun 2024 10:23:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/871</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-871</guid>
   <description>&lt;div&gt;&lt;p&gt;Action qt4 cg 027 01 next match&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1216 closed</title>
   <pubDate>Wed, 5 Jun 2024 08:50:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1216</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1216</guid>
   <description>&lt;div&gt;&lt;p&gt;Detailed comments on math:e, sinh(), cosh(), tanh()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1230 closed</title>
   <pubDate>Wed, 5 Jun 2024 08:50:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1230</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1230</guid>
   <description>&lt;div&gt;&lt;p&gt;1216 Detailed comments on math:e, sinh(), cosh(), tanh()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1233 closed</title>
   <pubDate>Wed, 5 Jun 2024 08:50:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1233</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1233</guid>
   <description>&lt;div&gt;&lt;p&gt;517 Major edits to fn:chain, clarification only&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #814 closed</title>
   <pubDate>Tue, 4 Jun 2024 12:37:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/814</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-814</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: Rules for on-no-match="shallow-copy-all"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #774 closed</title>
   <pubDate>Tue, 4 Jun 2024 12:35:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/774</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-774</guid>
   <description>&lt;div&gt;&lt;p&gt;What should be percent-encoded in a URI?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1251 created</title>
   <pubDate>Tue, 4 Jun 2024 08:56:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1251</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1251</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow sequence constructor in extension instructions that are implemented with named templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is follow up of #168&lt;/p&gt;
&lt;p&gt;I would like to extend https://qt4cg.org/specifications/xslt-40/Overview.html#invoking-templates-with-extension-instructions  and allow sequence constructor inside extension instruction. I'm using such instructions in my code and it would be nice to be able to rewrite them to pure XSLT 4.0 code. Sequence constructor could be mapped to predefined parameter name. E.g.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;t:_&amp;gt;Hello world.&amp;lt;/t:_&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Would be translated to&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;xsl:call-template name="t:_"&amp;gt;
  &amp;lt;xsl:with-param name="xsl:input"&amp;gt;Hello world.&amp;lt;/xsl:with-param&amp;gt;
&amp;lt;/xsl:call-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1250 created</title>
   <pubDate>Sun, 2 Jun 2024 23:53:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1250</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1250</guid>
   <description>&lt;div&gt;&lt;p&gt;1048 Extended decimal format properties&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1249 created</title>
   <pubDate>Sat, 1 Jun 2024 18:42:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1249</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1249</guid>
   <description>&lt;div&gt;&lt;p&gt;31 Introduce "for key $k value $v in $map"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Implements ForClause / ForExpression iterating over entries in maps.&lt;/p&gt;
&lt;p&gt;Note that the feature is described differently in XP and XQ - I have made some starter attempts to reconverge the two specs, but there is more to be done. (However, the change involved reordering sections, which will adversely affect the diff version).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1248 created</title>
   <pubDate>Sat, 1 Jun 2024 18:24:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1248</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1248</guid>
   <description>&lt;div&gt;&lt;p&gt;for member allowing empty&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XQuery spec says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The allowing empty option is available only when processing sequences, not when processing arrays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It also says "This option is not available with "for member"&lt;/p&gt;
&lt;p&gt;But then it gives an example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for member $x allowing empty in []&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Logically, on grounds of orthogonality, I think we should allow it. (However, there is a justification for NOT allowing it, namely that there's no "null" value to which we can bind the range variable in this case).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 080 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 31 May 2024 11:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/06-04</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-06-04</guid>
</item><item>
   <title>Issue #1247 created</title>
   <pubDate>Fri, 31 May 2024 10:44:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1247</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1247</guid>
   <description>&lt;div&gt;&lt;p&gt;`??type(T)` in lookup expressions - shortcuts&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We've introduced the syntax &lt;code&gt;??type(T)&lt;/code&gt; in lookup expressions to allow selection of items of a particular type.&lt;/p&gt;
&lt;p&gt;The most common usages for T are to select a record type or an array type. It would be useful to provide shortcut syntax for such cases: &lt;code&gt;??record(longitude, latitude, *)&lt;/code&gt; as a shortcut for &lt;code&gt;??type(record(longitude, latitude, *))&lt;/code&gt;, &lt;code&gt;??array(xs:integer)&lt;/code&gt; as a shortcut for &lt;code&gt;??type(array(xs:integer))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note this aligns with syntax for XSLT pattern matching where for most item types (with the notable exception of atomic types) the &lt;code&gt;type()&lt;/code&gt; wrapper can be omitted.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1246 created</title>
   <pubDate>Wed, 29 May 2024 13:18:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1246</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1246</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:json-to-xml: `number-parser` option&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With #973, the &lt;code&gt;number-parser&lt;/code&gt; option was added to &lt;code&gt;fn:json-to-xml&lt;/code&gt;. It has been reported back to us that the current definition introduces a backward incompatibility:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;json-to-xml('1234567')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…now returns:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;number xmlns="http://www.w3.org/2005/xpath-functions"&amp;gt;1.234567E6&amp;lt;/number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before, we got:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;number xmlns="http://www.w3.org/2005/xpath-functions"&amp;gt;1234567&amp;lt;/number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m convinced that the &lt;code&gt;number-parser&lt;/code&gt; option is am important addition for &lt;code&gt;fn:json-to-xml&lt;/code&gt; – I’ve already seen its application in practice – but I think we’ll need to change the default, which currently &lt;code&gt;xs:double#1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It seems sufficient to me to change &lt;code&gt;xs:double#1&lt;/code&gt; to &lt;code&gt;identity#1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As a side note, &lt;a href="https://www.w3.org/TR/xpath-functions-31/#json-to-xml-mapping"&gt;17.4.2 XML Representation of JSON&lt;/a&gt; still states that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-json-to-xml"&gt;fn:json-to-xml&lt;/a&gt; function creates an element whose string value is lexically the same as the JSON representation of the number.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…which means that the semantics of &lt;code&gt;number-parser&lt;/code&gt; have not been incorporated in this section yet (my fault).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 079 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 28 May 2024 17:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/05-28</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-05-28</guid>
</item><item>
   <title>Issue #1245 created</title>
   <pubDate>Tue, 28 May 2024 16:02:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1245</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1245</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-dateTime: Properties&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;strong&gt;Properties&lt;/strong&gt; of &lt;code&gt;fn:format-dateTime&lt;/code&gt; say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The two-argument form of this function is ·deterministic·, ·context-dependent·, and ·focus-independent·. It depends on default calendar, and default language, and default place, and implicit timezone.
The five-argument form of this function is ·deterministic·, ·context-dependent·, and ·focus-independent·. It depends on implicit timezone, and namespaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They fail to mention the new three- and four-argument form.&lt;/p&gt;
&lt;p&gt;The same applies to &lt;code&gt;fn:format-date&lt;/code&gt; and &lt;code&gt;fn:format-time&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1108 closed</title>
   <pubDate>Tue, 28 May 2024 15:56:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1108</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1108</guid>
   <description>&lt;div&gt;&lt;p&gt;566-partial Describe a less aggressive %-encoding for fn:build-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1232 closed</title>
   <pubDate>Tue, 28 May 2024 15:56:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1232</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1232</guid>
   <description>&lt;div&gt;&lt;p&gt;Rendition of RFC2119 terms&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1237 closed</title>
   <pubDate>Tue, 28 May 2024 15:56:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1237</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1237</guid>
   <description>&lt;div&gt;&lt;p&gt;1232 consistent rendition of rfc2119 terms&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #894 closed</title>
   <pubDate>Tue, 28 May 2024 15:55:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/894</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-894</guid>
   <description>&lt;div&gt;&lt;p&gt;Errors in forming function items&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #908 closed</title>
   <pubDate>Tue, 28 May 2024 15:55:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/908</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-908</guid>
   <description>&lt;div&gt;&lt;p&gt;Function identity: documentation, nondeterminism&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1000 closed</title>
   <pubDate>Tue, 28 May 2024 15:55:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1000</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1000</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO Code in the Rules sections&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1242 closed</title>
   <pubDate>Tue, 28 May 2024 15:54:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1242</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1242</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: system-property('xsl:xpath-version')&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1243 closed</title>
   <pubDate>Tue, 28 May 2024 15:54:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1243</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1243</guid>
   <description>&lt;div&gt;&lt;p&gt;Change required result of system-property(...version)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1098 closed</title>
   <pubDate>Tue, 28 May 2024 14:44:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1098</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1098</guid>
   <description>&lt;div&gt;&lt;p&gt;566-partial Editorial improvements for parse-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1244 created</title>
   <pubDate>Tue, 28 May 2024 14:44:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1244</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1244</guid>
   <description>&lt;div&gt;&lt;p&gt;566-partial Rewrite parse-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;What happened was, I discovered I'd messed with the code in two different branches.&lt;/p&gt;
&lt;p&gt;In the course of trying to straighten that out, I came to the conclusion that the &lt;em&gt;real&lt;/em&gt; difficulty in parsing URIs is what to do about all the special cases around &lt;code&gt;file:&lt;/code&gt;. And that the approach I'd taken in the previous draft was unnecessarily complicated.&lt;/p&gt;
&lt;p&gt;I think this is better.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 079 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 27 May 2024 11:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/05-28</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-05-28</guid>
</item><item>
   <title>Pull request #1243 created</title>
   <pubDate>Sun, 26 May 2024 14:53:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1243</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1243</guid>
   <description>&lt;div&gt;&lt;p&gt;Change required result of system-property(...version)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1242&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1242 created</title>
   <pubDate>Sun, 26 May 2024 13:35:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1242</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1242</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: system-property('xsl:xpath-version')&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XSLT 4.0 it should be required that &lt;code&gt;system-property('xsl:xpath-version')&lt;/code&gt; returns 4.0&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1241 created</title>
   <pubDate>Sun, 26 May 2024 08:05:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1241</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1241</guid>
   <description>&lt;div&gt;&lt;p&gt;Node constructor vs. otherwise/map constructor&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I wonder whether we should care that the following expression could be interpreted in two ways:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;🤔/&amp;gt; ! (element otherwise {})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result could either be &lt;code&gt;&amp;lt;otherwise/&amp;gt;&lt;/code&gt; or an empty map.&lt;/p&gt;
&lt;p&gt;If we say it’s an edge case that we can ignore, it would be fine for me.&lt;/p&gt;
&lt;p&gt;Before &lt;code&gt;otherwise&lt;/code&gt; was introduced, we used &lt;code&gt;?:&lt;/code&gt; in our implementation, analogous to Kotlin’s &lt;a href="https://kotlinlang.org/docs/null-safety.html#elvis-operator"&gt;Elvis operator&lt;/a&gt;. JavaScript now has &lt;code&gt;??&lt;/code&gt; (which is no option for us).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1240 created</title>
   <pubDate>Thu, 23 May 2024 16:34:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1240</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1240</guid>
   <description>&lt;div&gt;&lt;p&gt;$sequence-of-maps ? info()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We're increasingly using the design pattern where maps contain entries that are function items. If &lt;code&gt;$map&lt;/code&gt; is a map and it has an entry &lt;code&gt;info&lt;/code&gt; that is a zero-arity function, then &lt;code&gt;$map ? info()&lt;/code&gt; invokes the function. This looks appealingly as if it's a method application applying the method &lt;code&gt;info()&lt;/code&gt; on the object &lt;code&gt;$map&lt;/code&gt;, but that's not actually what's really going on underneath. What is really happening is that we evaluate &lt;code&gt;($map ? info)&lt;/code&gt; which yields a function item, and then we dynamically call this function.&lt;/p&gt;
&lt;p&gt;Now what if &lt;code&gt;$maps&lt;/code&gt; is a sequence of maps each of which has an &lt;code&gt;info&lt;/code&gt; field? This parses as &lt;code&gt;($maps ? info)()&lt;/code&gt;. &lt;code&gt;$maps ? info&lt;/code&gt; returns a sequence of function items, and a dynamic function call can't be applied to a sequence of functions items. Instead you have to write &lt;code&gt;($maps ? info)!.()&lt;/code&gt; which feels fairly bizarre.&lt;/p&gt;
&lt;p&gt;Should we allow the LHS of a dynamic function call to be a sequence? On the whole, I don't tend to like operations to do implicit mapping over one of the arguments, but I feel like this might warrant an exception. The justification is that a dynamic function call is a postfix expression, and all the other postfix expressions accept a sequence on the LHS. Thoughts please.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1239 created</title>
   <pubDate>Thu, 23 May 2024 06:56:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1239</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1239</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT xsl:next-match with select attribute&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The ability of &lt;code&gt;xsl:next-match&lt;/code&gt; to apply a sequence of template rules to the same item is limited by the fact that the item in question cannot be changed in any way. For example, if I want a template rule that matches an array to sort the array and then continue processing using the next rule for arrays, it's not possible; applying templates to the new array will sort it again, ad infinitum, while doing next-match is only possible on the original array, not the new sorted version.&lt;/p&gt;
&lt;p&gt;I propose that xsl:next-match should have a select attribute. The effect is to process the selected items using the current mode, considering only the template rules that are lower in ranking order than the current template rule.&lt;/p&gt;
&lt;p&gt;Alternatively or in addition, we could drop the rule that instructions that change the context item also clear the current mode. This would enable, for example, xsl:next-match to be used within xsl:for-each. However, it's possible that the results here could be confusing: we need to look at use cases.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1238 created</title>
   <pubDate>Thu, 23 May 2024 06:30:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1238</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1238</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT on-no-match="shallow-copy-all" - revised rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The work on deep lookup with modifiers enables an improved set of rules for processing trees of maps and arrays using a mode with &lt;code&gt;on-no-match="shallow-copy-all"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Recall that the intent is that if the user writes no template rules at all in such a mode, the effect is to recursively copy the entire structure without change. But it should be as easy as possible for the user to add template rules to override this processing for a selected part of the structure.&lt;/p&gt;
&lt;p&gt;With this in mind, the proposed built-in rules are as follows:&lt;/p&gt;
&lt;p&gt;For an array with no additional information available, we split it up into array members in a way that makes it possible to override
the processing for a specific array member:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="array(*)"&amp;gt;
  &amp;lt;xsl:array use="?member"&amp;gt;
     &amp;lt;xsl:apply-templates select="for member $m at $pos in . 
                  return {"array-member":true(), "index": $pos, "member": $m}"
                                          mode="#current"/&amp;gt;
  &amp;lt;/xsl:array&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The field 'array-member' here is a dummy, provided simply to make it easier to match these records at the next level of processing.&lt;/p&gt;
&lt;p&gt;For the array members, when represented in this way, the items in the array member are processed one-by-one to produce
a new array member:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="record(array-member as xs:boolean, index as xs:integer, member as item()*)"&amp;gt;
     &amp;lt;xsl:map:entry key="'member'"&amp;gt;
        &amp;lt;xsl:apply-templates select="for $item at $pos in ?member
                                                          return {"array-member-item":true(), 
                                                                       "index": ?index, 
                                                                       "member": ?member, 
                                                                       "item": $item,
                                                                       "position": $pos }"
                                            mode="#current"/&amp;gt;
    &amp;lt;/xsl:map:entry&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The new array members are delivered as singleton maps, in the form expected by the match="array(*)" template given above.&lt;/p&gt;
&lt;p&gt;For the individual items within each array member, the default is simply to apply-templates to the item:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="record(array-member-item as ..., index as ..., member as ..., item as item(), position as ...)"&amp;gt;
   &amp;lt;xsl:apply-templates select="?item" mode="#current"/&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly for a map with no additional information, we reconstruct the map by applying templates to its individual entries:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="map(*)"&amp;gt;
  &amp;lt;xsl:map on-duplicates="op(',')"&amp;gt;
     &amp;lt;xsl:apply-templates select="for entry ($k, $v) in . 
                                                        return {"map-entry":true(), "key": $k, "value": $v}"
                                          mode="#current"/&amp;gt;
  &amp;lt;/xsl:array&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The built in processing for a map entry represented in this way is to reconstruct the map entry by applying templates to its individual items:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="record(map-entry as xs:boolean, key as xs:anyAtomicType, value as item()*)"&amp;gt;
     &amp;lt;xsl:map:entry key="$key"&amp;gt;
        &amp;lt;xsl:apply-templates select="for $item at $pos in ?value
                                                          return {"map-entry-item":true(), 
                                                                       "key": ?key, 
                                                                       "value": ?value, 
                                                                       "item": $item,
                                                                       "position": $pos }"
                                            mode="#current"/&amp;gt;
    &amp;lt;/xsl:map:entry&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the individual items within each map entry, the default is simply to apply-templates to the item:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="record(map-entry-item as ..., key as ..., value as ..., item as item(), position as ...)"&amp;gt;
   &amp;lt;xsl:apply-templates select="?item" mode="#current"/&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course the fallback processing for items not in the above list is to return them unchanged:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="item()"&amp;gt;
   &amp;lt;xsl:sequence select="."/&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows user-written template rules to intervene at any of these levels, and to have access to contextual information about the item they are processing. For example to rename map entries with key "comment" to have key "note" instead, use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="record(map-entry, *)[?key = 'comment']"&amp;gt;
   &amp;lt;xsl:map-entry key="'note'" select="?value"/&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There's one more refinement I would like, which is to provide access to the selection path for each map and array entry. I think this can be done by ensuring that within the template, items are labeled so that the function call selection-path(?value) or selection-path(?item) delivers the required result.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1146 closed</title>
   <pubDate>Wed, 22 May 2024 19:21:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1146</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1146</guid>
   <description>&lt;div&gt;&lt;p&gt;Identifying 4.0 Changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1237 created</title>
   <pubDate>Wed, 22 May 2024 18:57:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1237</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1237</guid>
   <description>&lt;div&gt;&lt;p&gt;1232 consistent rendition of rfc2119 terms&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1232&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1236 created</title>
   <pubDate>Wed, 22 May 2024 12:52:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1236</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1236</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-078-01 fn:unparsed-text-lines, normalize newlines&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think we should offer &lt;code&gt;normalize-newlines&lt;/code&gt; only for &lt;code&gt;fn:unparsed-text&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should never affect the result of &lt;code&gt;fn:unparsed-text-available&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I doubt (after further consideration) that it’s really helpful for &lt;code&gt;fn:unparsed-text-lines&lt;/code&gt;. The default should work just fine for nearly all users. If someone really needs to do more sophisticated string processing, it’s still possible to use &lt;code&gt;fn:unparsed-text&lt;/code&gt; and modify the result.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have commited some test that (more or less) reflect the status quo: https://github.com/qt4cg/qt4tests/commit/68d40455f2404c379fdccddc1d524648ae4c8803&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1189 closed</title>
   <pubDate>Wed, 22 May 2024 10:06:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1189</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1189</guid>
   <description>&lt;div&gt;&lt;p&gt;Function: distinct document order&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1180 closed</title>
   <pubDate>Wed, 22 May 2024 10:05:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1180</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1180</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:unparsed-text: `cache` option&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1172 closed</title>
   <pubDate>Wed, 22 May 2024 10:01:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1172</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1172</guid>
   <description>&lt;div&gt;&lt;p&gt;Iterating maps: Positional access&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1214 closed</title>
   <pubDate>Wed, 22 May 2024 09:46:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1214</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1214</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:hash, CRC-32: Describe output&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1235 created</title>
   <pubDate>Wed, 22 May 2024 08:56:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1235</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1235</guid>
   <description>&lt;div&gt;&lt;p&gt;Function Identity: Treating function items with identical bodies&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;(One) requirement resulting from #908 (in particular, https://github.com/qt4cg/qtspecs/issues/908#issuecomment-1891524815):&lt;/p&gt;
&lt;p&gt;The following examples reflect the status quo:&lt;/p&gt;
&lt;p&gt;# | Function | Result
-- | -- | --
1 | &lt;code&gt;deep-equal(&amp;lt;a/&amp;gt;, &amp;lt;a/&amp;gt;)&lt;/code&gt; | &lt;code&gt;true&lt;/code&gt;
2 | &lt;code&gt;let $f := fn { &amp;lt;a/&amp;gt; } return deep-equal($f, $f)&lt;/code&gt; | &lt;code&gt;true&lt;/code&gt;
3 | &lt;code&gt;deep-equal(fn { 1 }, fn { 1 })&lt;/code&gt; | &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;
4 | &lt;code&gt;deep-equal(fn { &amp;lt;a/&amp;gt; }, fn { &amp;lt;a/&amp;gt; })&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Notes&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;The result is &lt;code&gt;true&lt;/code&gt; (regardless of the identity of the compared nodes).&lt;/li&gt;
&lt;li&gt;The result is &lt;code&gt;true&lt;/code&gt; (regardless of the identity of the nodes that result from evaluating the functions)&lt;/li&gt;
&lt;li&gt;The result is allowed to be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, depending on the optimization strategies of a processor.&lt;/li&gt;
&lt;li&gt;Only in this case, the result must currently be &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We should allow &lt;code&gt;deep-equal&lt;/code&gt; to return &lt;code&gt;true&lt;/code&gt; for function items that have the same arguments and bodies. An implementation should be allowed to use the same internal representation for multiple occurrences of such functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #812 closed</title>
   <pubDate>Wed, 22 May 2024 08:34:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/812</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-812</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion Rules: Unifications&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #358 closed</title>
   <pubDate>Wed, 22 May 2024 08:15:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/358</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-358</guid>
   <description>&lt;div&gt;&lt;p&gt;serialization indent whitespace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #101 closed</title>
   <pubDate>Wed, 22 May 2024 08:15:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/101</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-101</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:serialize line breaks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1234 created</title>
   <pubDate>Wed, 22 May 2024 08:15:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1234</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1234</guid>
   <description>&lt;div&gt;&lt;p&gt;Seralization Parameters: Indentation, Whitespace, Newlines&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Summary of #358 and #101:&lt;/p&gt;
&lt;p&gt;Parameter | Description | Values
--- | --- | ---
&lt;code&gt;indent-unit&lt;/code&gt; | Character sequence to use for indentation. | Pattern: &lt;code&gt;(\\t\| +)&lt;/code&gt;&lt;br/&gt;Examples: (&lt;code&gt;"\t"&lt;/code&gt;, &lt;code&gt;" "&lt;/code&gt;, &lt;code&gt;"    "&lt;/code&gt;)
&lt;code&gt;indent-attributes&lt;/code&gt; | Indent multiple attributes&lt;br/&gt;(similar: &lt;a href="http://api.html-tidy.org/tidy/quickref_5.0.0.html#indent-attributes"&gt;HTML Tidy’s configuration option&lt;/a&gt;).&lt;br/&gt;Should be used with spaces as indentation characters. | &lt;code&gt;"yes"&lt;/code&gt;, &lt;code&gt;"no"&lt;/code&gt;
&lt;code&gt;line-ending&lt;/code&gt; | Newline character. | &lt;code&gt;"\r\n"&lt;/code&gt;, &lt;code&gt;"\n"&lt;/code&gt;, &lt;code&gt;"\r"&lt;/code&gt;, …&lt;/p&gt;
&lt;p&gt;If no parameter is specified, the default of the implementation is used.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1233 created</title>
   <pubDate>Wed, 22 May 2024 02:32:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1233</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1233</guid>
   <description>&lt;div&gt;&lt;p&gt;517 Major edits to fn:chain, clarification only&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@dnovatchev For your review. The current version of &lt;code&gt;fn:chain&lt;/code&gt; in the specs has unnecessary verbiage, is out of sync with other comparable spec entries, and has passages that cry out for clarity and concision. I do not think I have made any edits that change any substantive points. A summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Summary simplified&lt;/li&gt;
&lt;li&gt;Rules: prose for the recursive process brought into conformity with other functions in the specs that describe recursive processes.&lt;/li&gt;
&lt;li&gt;Error conditions: two entries, and clarification of the conditions when they are triggered.&lt;/li&gt;
&lt;li&gt;Former note 1 deleted (excessively wordy, introduces unfamiliar or unnecessary terms/concepts).&lt;/li&gt;
&lt;li&gt;Former notes 3 and 4 moved to rules, distilled into more concise prose.&lt;/li&gt;
&lt;li&gt;Former note 5 (now 2) recast to convey what I think was your original intent, and allows the reader to more quickly compare &lt;code&gt;fn:chain&lt;/code&gt; to two comparable methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Signature, properties, XPath rule, and examples are unchanged.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1192 closed</title>
   <pubDate>Tue, 21 May 2024 20:55:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1192</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1192</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow "fn" as abbreviation for "function" in ItemType syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1232 created</title>
   <pubDate>Tue, 21 May 2024 20:54:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1232</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1232</guid>
   <description>&lt;div&gt;&lt;p&gt;Rendition of RFC2119 terms&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specs use consistent markup for RFC 2119 terms (&lt;em&gt;must&lt;/em&gt;, &lt;em&gt;should&lt;/em&gt;, &lt;em&gt;may&lt;/em&gt;) but the rendition differs between specs.&lt;/p&gt;
&lt;p&gt;XQuery/XPath and XDM use bold text, XSLT and F&amp;amp;O use small caps, serialization uses bold caps.&lt;/p&gt;
&lt;p&gt;I propose using small caps throughout.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 078 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 21 May 2024 18:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/05-21</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-05-21</guid>
</item><item>
   <title>Issue #1229 closed</title>
   <pubDate>Tue, 21 May 2024 16:57:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1229</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1229</guid>
   <description>&lt;div&gt;&lt;p&gt;Rework record descriptions per ACTION QT4CG-070-01&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1211 closed</title>
   <pubDate>Tue, 21 May 2024 16:36:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1211</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1211</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-076-01 Add examples of coercions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1208 closed</title>
   <pubDate>Tue, 21 May 2024 16:33:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1208</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1208</guid>
   <description>&lt;div&gt;&lt;p&gt;Reserved Function Names: item, empty-sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1212 closed</title>
   <pubDate>Tue, 21 May 2024 16:33:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1212</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1212</guid>
   <description>&lt;div&gt;&lt;p&gt;1208 correct details of formerly-reserved function names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1213 closed</title>
   <pubDate>Tue, 21 May 2024 16:30:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1213</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1213</guid>
   <description>&lt;div&gt;&lt;p&gt;1199 Add ellipsis markup for arguments in variadic functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1199 closed</title>
   <pubDate>Tue, 21 May 2024 16:30:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1199</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1199</guid>
   <description>&lt;div&gt;&lt;p&gt;In F+O function signatures, show some indication that a function is variadic.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1207 closed</title>
   <pubDate>Tue, 21 May 2024 16:27:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1207</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1207</guid>
   <description>&lt;div&gt;&lt;p&gt;Array filter: Positional access&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1217 closed</title>
   <pubDate>Tue, 21 May 2024 16:27:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1217</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1217</guid>
   <description>&lt;div&gt;&lt;p&gt;1207 Allow numeric predicates when filtering arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1219 closed</title>
   <pubDate>Tue, 21 May 2024 16:24:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1219</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1219</guid>
   <description>&lt;div&gt;&lt;p&gt;1218 Drop use of union(A,B) syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1218 closed</title>
   <pubDate>Tue, 21 May 2024 16:24:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1218</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1218</guid>
   <description>&lt;div&gt;&lt;p&gt;Residual references to union(A, B)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #934 closed</title>
   <pubDate>Tue, 21 May 2024 16:20:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/934</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-934</guid>
   <description>&lt;div&gt;&lt;p&gt;String comparison in deep-equal&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1167 closed</title>
   <pubDate>Tue, 21 May 2024 16:20:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1167</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1167</guid>
   <description>&lt;div&gt;&lt;p&gt;Merge $collation into $options parameter of fn:deep-equal()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1191 closed</title>
   <pubDate>Tue, 21 May 2024 16:20:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1191</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1191</guid>
   <description>&lt;div&gt;&lt;p&gt;1167, 934 deep equal merge collations param&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1197 closed</title>
   <pubDate>Tue, 21 May 2024 16:18:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1197</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1197</guid>
   <description>&lt;div&gt;&lt;p&gt;1192 Allow fn as abbreviation for function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1116 closed</title>
   <pubDate>Tue, 21 May 2024 16:15:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1116</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1116</guid>
   <description>&lt;div&gt;&lt;p&gt;unparsed-text() end-of-line normalization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1117 closed</title>
   <pubDate>Tue, 21 May 2024 16:15:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1117</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1117</guid>
   <description>&lt;div&gt;&lt;p&gt;1116 Add options param to unparsed-text&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1223 closed</title>
   <pubDate>Tue, 21 May 2024 16:11:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1223</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1223</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor: fixed URL&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1222 closed</title>
   <pubDate>Tue, 21 May 2024 16:09:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1222</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1222</guid>
   <description>&lt;div&gt;&lt;p&gt;1214 hash examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #116 closed</title>
   <pubDate>Tue, 21 May 2024 16:07:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/116</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-116</guid>
   <description>&lt;div&gt;&lt;p&gt;Clarify the fn:transform function() wrt multiple top-level elements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #652 closed</title>
   <pubDate>Tue, 21 May 2024 16:07:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/652</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-652</guid>
   <description>&lt;div&gt;&lt;p&gt;Defining a common function library for XPath, XSLT, and XQuery applications&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1220 closed</title>
   <pubDate>Tue, 21 May 2024 16:05:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1220</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1220</guid>
   <description>&lt;div&gt;&lt;p&gt;73 copy&amp;amp;paste typo in fn:graphemes (combining diaeresis should be ZWJ)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1231 created</title>
   <pubDate>Tue, 21 May 2024 12:19:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1231</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1231</guid>
   <description>&lt;div&gt;&lt;p&gt;1193 Parsing Functions: Empty input&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1193 (covers only the obvious 4.0 inconsistencies)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1230 created</title>
   <pubDate>Tue, 21 May 2024 11:38:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1230</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1230</guid>
   <description>&lt;div&gt;&lt;p&gt;1216 Detailed comments on math:e, sinh(), cosh(), tanh()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1216&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1229 created</title>
   <pubDate>Mon, 20 May 2024 16:46:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1229</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1229</guid>
   <description>&lt;div&gt;&lt;p&gt;Rework record descriptions per ACTION QT4CG-070-01&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think this PR completes the work I started before and that we reviewed briefly some time ago.&lt;/p&gt;
&lt;p&gt;Note: because this PR involves changes to the schemas and the stylesheets, the PR build is going to be...funky. I don't know if the diffs will be useful either. There are no (intentional) technical changes in this PR. You can preview the built result by look at https://qt4cgtest.nwalsh.com/branch/action-qt4cg-70-01/xpath-functions-40/Overview.html&lt;/p&gt;
&lt;p&gt;A few notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instead of just reusing &lt;code&gt;fos:options&lt;/code&gt;, I added &lt;code&gt;fos:record-description&lt;/code&gt; with a very similar content model.&lt;/li&gt;
&lt;li&gt;I couldn't completely remove some of the &lt;code&gt;&amp;lt;fos:type&amp;gt;&lt;/code&gt; elements defined in the globals section at the top of the &lt;code&gt;function-catalog.xml&lt;/code&gt; because it causes IDREF failures when that file is parsed.&lt;/li&gt;
&lt;li&gt;I tinkered a bit with the styling, and moved a bunch of inline table styles into CSS&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 078 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 20 May 2024 11:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/05-21</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-05-21</guid>
</item><item>
   <title>Issue #1221 closed</title>
   <pubDate>Sun, 19 May 2024 20:07:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1221</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1221</guid>
   <description>&lt;div&gt;&lt;p&gt;new function - fn:tail-recurse a function to allow users to hand roll their recursion and guarentee tail recursion.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1228 created</title>
   <pubDate>Sun, 19 May 2024 17:56:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1228</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1228</guid>
   <description>&lt;div&gt;&lt;p&gt;– Adding the BLAKE3 hashing algorithm to fn:hash&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a resubmission of the original https://github.com/qt4cg/qtspecs/pull/1226.
No new changes, this is fixing a pure git-technical issue.&lt;/p&gt;
&lt;p&gt;Now the PR is submitted from a dedicated feature-branch and does not depend on any other branch&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1227 created</title>
   <pubDate>Sun, 19 May 2024 17:47:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1227</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1227</guid>
   <description>&lt;div&gt;&lt;p&gt;150 PR resubmission for fn ranks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a resubmission of the original &lt;a href="https://github.com/qt4cg/qtspecs/pull/1027"&gt;PR 1027 for function fn:ranks&lt;/a&gt;.
No new changes, this is fixing a pure git-technical issue.&lt;/p&gt;
&lt;p&gt;Now the PR is submitted from a dedicated feature-branch and not from &lt;em&gt;master&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1226 closed</title>
   <pubDate>Sun, 19 May 2024 17:05:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1226</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1226</guid>
   <description>&lt;div&gt;&lt;p&gt;Add the BLAKE3 hashing algorithm to fn:hash&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1027 closed</title>
   <pubDate>Sun, 19 May 2024 17:02:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1027</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1027</guid>
   <description>&lt;div&gt;&lt;p&gt;150 fn:ranks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1226 created</title>
   <pubDate>Sat, 18 May 2024 22:33:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1226</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1226</guid>
   <description>&lt;div&gt;&lt;p&gt;Add the BLAKE3 hashing algorithm to fn:hash&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR adds the &lt;strong&gt;BLAKE3&lt;/strong&gt; hashing algorithm as one of the hashing algorithms in &lt;strong&gt;&lt;code&gt;fn:hash&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This comes from a different branch than the one that contains the PR for &lt;strong&gt;&lt;code&gt;fn:ranks&lt;/code&gt;&lt;/strong&gt;, thus both PRs must be active and independent of each other.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1225 created</title>
   <pubDate>Sat, 18 May 2024 08:33:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1225</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1225</guid>
   <description>&lt;div&gt;&lt;p&gt;Generalization of Deep Updates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is a discussion issue, as I cannot contribute something substantial so far.&lt;/p&gt;
&lt;h3&gt;Observations&lt;/h3&gt;
&lt;p&gt;Our current development to support updates in the languages may come as a surprise to developers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The XQuery core specification (which includes &lt;strong&gt;X&lt;/strong&gt; in its name) will include constructs for updating &lt;strong&gt;Maps&lt;/strong&gt; and &lt;strong&gt;Arrays&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;To update &lt;strong&gt;XML&lt;/strong&gt;, an implementation must support the XQuery Update (XQUF) specification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think we should…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;either embed map/array updates in XQUF, or&lt;/li&gt;
&lt;li&gt;support a modified subset of XQUF in our core specs (while remaining fully compatible with XQUF).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I believe 2. is more realistic. By providing a simplified syntax, we could tackle some of the shortcomings of XQUF, such as its verbosity, and seemingly unnecessary restrictions:&lt;/p&gt;
&lt;h3&gt;XQUF: Verbosity&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;Transform&lt;/em&gt; expression (or &lt;em&gt;Copy Modify&lt;/em&gt; expression, as it’s called in 3.0) has a cumbersome and wordy syntax for doing very trivial things:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;copy $node := &amp;lt;a&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;/a&amp;gt;
modify delete node $node/b
return $node
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The 3.0 &lt;em&gt;Transform With&lt;/em&gt; syntax is a bit simpler, it utilizes the context item:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;a&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;/a&amp;gt; transform with {
  delete node ./b
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It resulted from the BaseX &lt;code&gt;update&lt;/code&gt; syntax…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;a&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;/a&amp;gt; update {
  delete node ./b
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…which comes with an ambiguity that forbids its unchanged adoption: &lt;code&gt;element update {}&lt;/code&gt; could be both an element constructor and an update statement. I think that dropping the curly braces (and, optionally, using parentheses) would resolve this issue.&lt;/p&gt;
&lt;h3&gt;XQUF: Restrictions&lt;/h3&gt;
&lt;p&gt;The XQUF syntax is very powerful, but it has some restrictions that require the use of FLWOR expressions when addressing multiple nodes. For example, the following statement is illegal…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;replace //village with &amp;lt;village/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…if the target is not a single node, which means that you have to write…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $v in //village
return replace $v with &amp;lt;village/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…or…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: only supported in BaseX :)
//village ! (replace . with &amp;lt;village/&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m pretty sure it would be safe to drop the restriction, which also exists for other update expressions, such as &lt;code&gt;insert nodes NODES into SINGLE-NODE&lt;/code&gt; or &lt;code&gt;rename node NODE as 'NAME'&lt;/code&gt; (&lt;code&gt;delete nodes NODES&lt;/code&gt; is legal). Allowing multiple targets would greatly reduce the number of iterations required within update blocks in practice.&lt;/p&gt;
&lt;h3&gt;XQuery Update &lt;em&gt;light&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;I think the new update syntax should meet the following requirements (among others):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compatible with the XQUF node semantics.&lt;/li&gt;
&lt;li&gt;Similar syntax for supported input types.&lt;/li&gt;
&lt;li&gt;Chaining of update operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, we would need to decide on a syntax that would be applicable to both maps/arrays and nodes. We could:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build on the proposal in &lt;a href="https://github.com/qt4cg/qtspecs/pull/832"&gt;#832&lt;/a&gt;, which introduces a new syntax for maps and arrays, and  extend it for nodes:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;update map   INPUT-MAP   { ... }
update array INPUT-ARRAY { ... }
update node  INPUT-NODE  { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Build on XQUF 3.0:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;INPUT-MAP   transform with { ... }
INPUT-ARRAY transform with { ... }
INPUT-NODE  transform with { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Build on BaseX (allowing multiple input items and chains):&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;INPUT-MAPS   update (...) update (...)
INPUT-ARRAYS update (...) update (...)
INPUT-NODES  update (...) update (...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Syntax 2. and 3. is challenging, as the type of the input can only be evaluated at time (and for XQUF it has to be determined statically whether an expression is an updating or non-updating).&lt;/p&gt;
&lt;p&gt;As we currently have a proposal for 1., I will stick to that syntax, but allow an optional plural form for &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;array&lt;/code&gt; (inspired by XQUF), and use chains. Within the the update block, we could now use the short syntax also for nodes without the &lt;code&gt;node&lt;/code&gt;/&lt;code&gt;nodes&lt;/code&gt; keywords:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;update map $country-map {
  delete ??entry:city
},
update maps $country-maps update {
  rename ?entry:village as 'city'
},

update node $country-node {
  delete //city
},
update nodes $country-nodes {
  insert &amp;lt;lakes/&amp;gt; into .,
  insert &amp;lt;mountains/&amp;gt; into .
} {
  insert &amp;lt;lake/&amp;gt; into //lakes
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Semantics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Note that for XQUF update expressions it makes a difference whether multiple expressions are defined with the same block or in a subsequent block – which is why I think chains are essential.&lt;/li&gt;
&lt;li&gt;Even though the syntax would be similar for node and map/array updates, the inherent semantics would differ a lot – which is something, however, users would not need to care about too much: Node updates would greatly rely on XQUF, whereas map/array updates would be based on the new proposal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m looking forward to everyone’s opinions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1224 created</title>
   <pubDate>Sat, 18 May 2024 02:27:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1224</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1224</guid>
   <description>&lt;div&gt;&lt;p&gt;Attribute priority for xsl:accumulator-rule&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that XSLT &lt;code&gt;xsl:accumulator-rule&lt;/code&gt; be allowed to take attribute &lt;code&gt;priority&lt;/code&gt;, to allow users to be more declarative in their accumulator rules. Even accumulators with two or three rules might require simple overshadowing: a default rule for the majority of nodes, with accommodation for certain exceptions. An explicitly declared priority rather than document order will allows users to better express their intentions, and processor-generated warnings about duplicate matches will be more meaningful.&lt;/p&gt;
&lt;p&gt;Because the current rules stipulate that among multiple rules the last one in document order wins, I think that backward compatibility prevents us from using the default priority rules for templates (i.e., allotting -0.5, 0, 0.25 scores based on match pattern types). Rather, in this case, every accumulator rule is assumed to have priority 0, unless otherwise specified. If a node matches more than one rule of the same priority level, the last one wins. This simpler version of priority (assume zero, and if you know multiple matches will overlap, use &lt;code&gt;@priority&lt;/code&gt;) is one that many developers have come to use for templates.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1188 closed</title>
   <pubDate>Sat, 18 May 2024 01:40:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1188</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1188</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:hash: Editorial&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1223 created</title>
   <pubDate>Sat, 18 May 2024 01:38:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1223</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1223</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor: fixed URL&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fixes link to Unicode TR29&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1222 created</title>
   <pubDate>Sat, 18 May 2024 01:31:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1222</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1222</guid>
   <description>&lt;div&gt;&lt;p&gt;1214 hash examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;addresses #1214&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1221 created</title>
   <pubDate>Fri, 17 May 2024 13:40:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1221</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1221</guid>
   <description>&lt;div&gt;&lt;p&gt;new function - fn:tail-recurse a function to allow users to hand roll their recursion and guarentee tail recursion.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Motivation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I as a user of XPath want to write a recursive function.&lt;/li&gt;
&lt;li&gt;I write the function,&lt;/li&gt;
&lt;li&gt;I run it,&lt;/li&gt;
&lt;li&gt;it causes a stack overflow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I don't believe tail recursion detection is part of the spec thus an implementation may not implement it&lt;/li&gt;
&lt;li&gt;tail recursion detection I suspect is hard, and I suspect there are cases that are tail recursion that an implementation doesnt  detect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tail recursion is not an uncommon problem in other languages, in imperative languages I would simply implement the algorithm using a 'while' loop, creating the 'body' of the while loop is my problem, but once I've done it, I KNOW that in all implementations my algorithm will be executed tail recursively (imperative code is FULL of loops, stack overloads are not an issue).&lt;/p&gt;
&lt;p&gt;An example&lt;/p&gt;
&lt;p&gt;I want to implement a power function in C# I know how to write it recursively, but C# doesn't support tail recursion, so I have to turn it into a loop. I could do this in an ad hoc way using a while loop, but I could also write the loop once, and then ask the developer to pass in a function that defines the body of the loop&lt;/p&gt;
&lt;p&gt;in C# that function could have the type (i.e. it takes a state and either returns a new state or null, a null would indicte the end of the 'loop')&lt;/p&gt;
&lt;p&gt;&lt;code&gt;State? recurse(State state)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and the library function that executes it have the signature:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;State TailRecurse&amp;lt;State&amp;gt;(Func&amp;lt;State,State?&amp;gt; f, State state) &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;a complete example of how this would appear in C# would be:
(note C# has a nuance w.r.t. the higher kinded type '?' and so the signature of TailRecurse below is slightly weaker than the one above).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var toPower3 = TailRecursion.Power2(3);
var result = TailRecursion.TailRecurse(toPower3, (0, 2));

Console.WriteLine(result.Value.Item2);

class TailRecursion
{
    // actually we want, but because of a quirk in C# around the '?' higher kinded type we have to write the signature symetrically (I think).
    //public static State TailRecurse&amp;lt;State&amp;gt;(Func&amp;lt;State, State?&amp;gt; f, State state)
    public static State TailRecurse&amp;lt;State&amp;gt;(Func&amp;lt;State?,State?&amp;gt; f, State state)
    {
        while (true)
        {
            var result = f(state);
            if (result == null)
            {
                return state;
            }
            state = result;
        }
    }

    public static Func&amp;lt;(int,int)?,(int,int)?&amp;gt; Power2(int n)
    {
        return powerAndX =&amp;gt;
        {
            if (powerAndX.Value.Item1 &amp;gt; n)
            {
                return null;
            }
            return (powerAndX.Value.Item1 + 1, powerAndX.Value.Item2 * powerAndX.Value.Item2);
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in XSLT I could write this function&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:function name="kooks:pow" as="xs:integer"&amp;gt;
    &amp;lt;xsl:param name="x" as ="xs:integer"/&amp;gt;
    &amp;lt;xsl:param name="n" as ="xs:integer"/&amp;gt;
    &amp;lt;xsl:choose&amp;gt;
        &amp;lt;xsl:when test="$n = 0"&amp;gt;
            &amp;lt;xsl:sequence select="$x"/&amp;gt;
        &amp;lt;/xsl:when&amp;gt;
        &amp;lt;xsl:otherwise&amp;gt;
            &amp;lt;xsl:sequence select="$x * kooks:pow($x,$n - 1)"/&amp;gt;
        &amp;lt;/xsl:otherwise&amp;gt;
    &amp;lt;/xsl:choose&amp;gt;
&amp;lt;/xsl:function&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know its tail recursive, but my environment may not for whatever reason detect it (I would hope it does, but I could be doing something much more complex, that IS tail recursive but the environment simply doesn't see it).&lt;/p&gt;
&lt;p&gt;I can't write a loop in XPath etc, it doesnt exist, so I can't escape like I do in C# or scala, in F# (which also doesnt support while loops), I would have to write a function that I was sure F# detected as tail recursive and then path the 'body' of the while loop as a function.&lt;/p&gt;
&lt;p&gt;in XSLT this could look like this (basically the same as the C# example)&lt;/p&gt;
&lt;p&gt;here the C# signature
&lt;code&gt;State TailRecurse&amp;lt;State&amp;gt;(Func&amp;lt;State,State?&amp;gt; f, State state) &lt;/code&gt;
has been translated by using &lt;code&gt;item()*&lt;/code&gt; for state an &lt;code&gt;array(*)&lt;/code&gt; for State?, where an empty array corresponds to null/none, and an array with 1 element corresponds to 'some' State.&lt;/p&gt;
&lt;p&gt;This function IS tail recursive in a very simple way that I think all implementations would detect as such, and thus (if it does) I can pass any function I like and be confident it is processed tail recursively - I can of course do this now, I use saxon, (even though I'm wrestling with it to detect tail recursion for some bizarre reason which is probably my fault) I think it would ideally be a library function and (using a loop) allow non tail recursive environments to support tail recursion, or allow me to simply do the detection myself.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;xsl:function name="kooks:tailRecurse"&amp;gt;
        &amp;lt;xsl:param name="unfolder" as="function(item()*) as array(*)"/&amp;gt;
        &amp;lt;xsl:param name="state" as="item()*"/&amp;gt;
        &amp;lt;xsl:variable name="newState" select="$unfolder($state)"/&amp;gt;
        &amp;lt;xsl:choose&amp;gt;
            &amp;lt;!-- loop returns null/none - end of recurstion --&amp;gt;
            &amp;lt;xsl:when test="array:size($newState) = 0"&amp;gt;
                &amp;lt;xsl:sequence select="$state"/&amp;gt;
            &amp;lt;/xsl:when&amp;gt;
            &amp;lt;!-- else, unpack the state and loop again --&amp;gt;
            &amp;lt;xsl:otherwise&amp;gt;
                &amp;lt;xsl:sequence select="kooks:tailRecurse($unfolder,array:get($newState,1))"/&amp;gt;
            &amp;lt;/xsl:otherwise&amp;gt;
        &amp;lt;/xsl:choose&amp;gt;        
    &amp;lt;/xsl:function&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For environments that don't do tail recursion detection, they can simple implement the analogous code to the C# example in their implementation i.e. map it to a while loop.&lt;/p&gt;
&lt;p&gt;In both cases I think this is hopefully trivial for the implementor of the language.&lt;/p&gt;
&lt;p&gt;Here's a complete example, with tailRecurse defined as above, that would guarentee (in an environment that detected it correctly) that any passed function is processed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:array="http://www.w3.org/2005/xpath-functions/array"
    xmlns:map="http://www.w3.org/2005/xpath-functions/map"
    exclude-result-prefixes="xs"
    version="3.0"
    xmlns:kooks="http://www.kookerella.com"&amp;gt;
    
    &amp;lt;!-- (state -&amp;gt; Maybe state) -&amp;gt; state -&amp;gt; state --&amp;gt; 
    &amp;lt;xsl:function name="kooks:tailRecurse"&amp;gt;
        &amp;lt;xsl:param name="unfolder" as="function(item()*) as array(*)"/&amp;gt;
        &amp;lt;xsl:param name="state" as="item()*"/&amp;gt;
        &amp;lt;xsl:variable name="newState" select="$unfolder($state)"/&amp;gt;
        &amp;lt;xsl:choose&amp;gt;
            &amp;lt;!-- loop returns null/none - end of recurstion --&amp;gt;
            &amp;lt;xsl:when test="array:size($newState) = 0"&amp;gt;
                &amp;lt;xsl:sequence select="$state"/&amp;gt;
            &amp;lt;/xsl:when&amp;gt;
            &amp;lt;!-- else, unpack the state and loop again --&amp;gt;
            &amp;lt;xsl:otherwise&amp;gt;
                &amp;lt;xsl:sequence select="kooks:tailRecurse($unfolder,array:get($newState,1))"/&amp;gt;
            &amp;lt;/xsl:otherwise&amp;gt;
        &amp;lt;/xsl:choose&amp;gt;        
    &amp;lt;/xsl:function&amp;gt;
    
    &amp;lt;xsl:function name="kooks:powUnfolder" as="function(item()*) as array(*)"&amp;gt;
        &amp;lt;xsl:param name="x" as="xs:integer"/&amp;gt;
        &amp;lt;xsl:param name="n" as="xs:integer"/&amp;gt;
        &amp;lt;xsl:sequence select="function($state) {
                if (map:get($state,'power') &amp;gt;= $n)
                (: we're done so return null/none :)
                then array {}
                else
                (: else calculate the next power and loop again :)
                    let $newState := map { 
                        'power': map:get($state,'power') + 1,
                        'result': map:get($state,'result') * $x
                        }
                    return array { $newState }
            }"/&amp;gt;
    &amp;lt;/xsl:function&amp;gt;
    
    &amp;lt;xsl:template match="/"&amp;gt;
        &amp;lt;twoToThePower4&amp;gt;
            &amp;lt;xsl:variable name="seed" select="map { 'power':0,'result':1 }"/&amp;gt;
            &amp;lt;xsl:sequence select="map:get(kooks:tailRecurse(kooks:powUnfolder(2,4),$seed),'result')"/&amp;gt;
        &amp;lt;/twoToThePower4&amp;gt;
    &amp;lt;/xsl:template&amp;gt;    
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I suspect these lines are not obvious.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:variable name="seed" select="map { 'power':0,'result':1 }"/&amp;gt;
            &amp;lt;xsl:sequence select="map:get(kooks:tailRecurse(kooks:powUnfolder(2,4),$seed),'result')"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line says anything to the power 0 is 1, the second line says, I want the 'result of 2 to the power 4.&lt;/p&gt;
&lt;p&gt;Note its VERY similar to xsl:iterate, but that requires an sequence to drive it, this is just general recursion.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #73 closed</title>
   <pubDate>Wed, 15 May 2024 11:12:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/73</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-73</guid>
   <description>&lt;div&gt;&lt;p&gt;Split a string by graphemes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1220 created</title>
   <pubDate>Wed, 15 May 2024 09:32:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1220</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1220</guid>
   <description>&lt;div&gt;&lt;p&gt;73 copy&amp;amp;paste typo in fn:graphemes (combining diaeresis should be ZWJ)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I wonder which font I need to use in order to see U+1F476 U+200D U+1F6D1 as a single grapheme. When I naively put the character sequence into an HTML page, the two glyphs will be rendered individually. How can we make sure that the grapheme will be rendered as intended for most people when they read the spec?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1219 created</title>
   <pubDate>Tue, 14 May 2024 20:41:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1219</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1219</guid>
   <description>&lt;div&gt;&lt;p&gt;1218 Drop use of union(A,B) syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1218&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1218 created</title>
   <pubDate>Tue, 14 May 2024 20:18:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1218</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1218</guid>
   <description>&lt;div&gt;&lt;p&gt;Residual references to union(A, B)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XQuery spec has 10 uses of the obsolete syntax &lt;code&gt;union(A, B)&lt;/code&gt;, and the F&amp;amp;O spec has another 6. XSLT has 7, and XDM has two.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 077 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 14 May 2024 18:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/05-14</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-05-14</guid>
</item><item>
   <title>Pull request #1217 created</title>
   <pubDate>Tue, 14 May 2024 17:58:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1217</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1217</guid>
   <description>&lt;div&gt;&lt;p&gt;1207 Allow numeric predicates when filtering arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1207&lt;/p&gt;
&lt;p&gt;Also a minor change: &lt;code&gt;$V[23, "fred"]&lt;/code&gt; now throws FORG0006 rather than XPTY0004. This keeps it compatible with 3.1 (in case anyone is catching the errors), and is more uniform: it seems unreasonable for &lt;code&gt;$V[23, "fred"]&lt;/code&gt; and &lt;code&gt;$V["fred", 23]&lt;/code&gt; to throw different errors.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1216 created</title>
   <pubDate>Tue, 14 May 2024 16:37:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1216</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1216</guid>
   <description>&lt;div&gt;&lt;p&gt;Detailed comments on math:e, sinh(), cosh(), tanh()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I should have made these comments before we accepted the proposal, but it's only minor details.&lt;/p&gt;
&lt;p&gt;In the example given for &lt;code&gt;math:e&lt;/code&gt;, the explanation of the example as a compound interest calculation seems a bit simplistic. There are all sorts of assumptions here about the initial investment, the frequency at which interest is calculated, etc. It might be better just to give the expression and the result and not attempt an interpretation.&lt;/p&gt;
&lt;p&gt;According to IEEE 754-2008 table 9.1, &lt;code&gt;sinh()&lt;/code&gt; can produce overflow or underflow, &lt;code&gt;cosh()&lt;/code&gt; can produce overflow, and &lt;code&gt;tanh()&lt;/code&gt; can produce underflow. We seem to be catering for exceptions that cannot occur?&lt;/p&gt;
&lt;p&gt;The example results should perhaps be tagged as approximate to ensure that they pass automated testing.&lt;/p&gt;
&lt;p&gt;We should perhaps be referencing IEEE 754-2019 (though I'm reluctant to purchase a copy...)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1195 closed</title>
   <pubDate>Tue, 14 May 2024 16:31:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1195</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1195</guid>
   <description>&lt;div&gt;&lt;p&gt;Hash Function: CRC-32&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1206 closed</title>
   <pubDate>Tue, 14 May 2024 16:31:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1206</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1206</guid>
   <description>&lt;div&gt;&lt;p&gt;1195 Hash Function: CRC-32&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1196 closed</title>
   <pubDate>Tue, 14 May 2024 16:28:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1196</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1196</guid>
   <description>&lt;div&gt;&lt;p&gt;Math Functions: `math:e`, `math:sinh`, `math:cosh`, `math:tanh`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1205 closed</title>
   <pubDate>Tue, 14 May 2024 16:28:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1205</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1205</guid>
   <description>&lt;div&gt;&lt;p&gt;1196 Math Functions: math:e, math:sinh, math:cosh, math:tanh&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1204 closed</title>
   <pubDate>Tue, 14 May 2024 16:24:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1204</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1204</guid>
   <description>&lt;div&gt;&lt;p&gt;1203 Define out-of-range conditions in CSV get function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1203 closed</title>
   <pubDate>Tue, 14 May 2024 16:24:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1203</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1203</guid>
   <description>&lt;div&gt;&lt;p&gt;CSV parsing: in call of get($R, $Z), what if $R is out of range&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1215 closed</title>
   <pubDate>Tue, 14 May 2024 16:24:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1215</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1215</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix ID/IDREF typo&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1215 created</title>
   <pubDate>Tue, 14 May 2024 16:24:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1215</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1215</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix ID/IDREF typo&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm not sure how this slipped past the PR build checks...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1214 created</title>
   <pubDate>Tue, 14 May 2024 16:21:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1214</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1214</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:hash, CRC-32: Describe output&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the &lt;a href="https://qt4cg.org/meeting/minutes/2024/05-14.html"&gt;QT4 CG Meeting 077&lt;/a&gt; it was suggested that the binary output of the newly added &lt;code&gt;CRC-32&lt;/code&gt; algorithm should be further described.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1198 closed</title>
   <pubDate>Tue, 14 May 2024 16:17:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1198</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1198</guid>
   <description>&lt;div&gt;&lt;p&gt;1189 distinct document order&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1068 closed</title>
   <pubDate>Tue, 14 May 2024 16:15:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1068</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1068</guid>
   <description>&lt;div&gt;&lt;p&gt;73 fn:graphemes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1200 closed</title>
   <pubDate>Tue, 14 May 2024 16:12:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1200</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1200</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-075-02 Define the term sequence concatenation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #146 closed</title>
   <pubDate>Tue, 14 May 2024 16:09:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/146</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-146</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:apply with last two arguments (array, map) for the positional and keyword args in a func-call&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #162 closed</title>
   <pubDate>Tue, 14 May 2024 16:09:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/162</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-162</guid>
   <description>&lt;div&gt;&lt;p&gt;Support unbounded variadic functions on map parameter keys&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #369 closed</title>
   <pubDate>Tue, 14 May 2024 16:08:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/369</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-369</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespaces for Functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #572 closed</title>
   <pubDate>Tue, 14 May 2024 16:08:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/572</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-572</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:evaluate-xpath() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1190 closed</title>
   <pubDate>Tue, 14 May 2024 16:08:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1190</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1190</guid>
   <description>&lt;div&gt;&lt;p&gt;1188 XQFO hash&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1213 created</title>
   <pubDate>Tue, 14 May 2024 14:58:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1213</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1213</guid>
   <description>&lt;div&gt;&lt;p&gt;1199 Add ellipsis markup for arguments in variadic functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1199&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1210 closed</title>
   <pubDate>Tue, 14 May 2024 14:37:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1210</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1210</guid>
   <description>&lt;div&gt;&lt;p&gt;An edge case with coercion in 1.0 compatibility mode&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1212 created</title>
   <pubDate>Tue, 14 May 2024 11:45:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1212</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1212</guid>
   <description>&lt;div&gt;&lt;p&gt;1208 correct details of formerly-reserved function names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1208&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1211 created</title>
   <pubDate>Tue, 14 May 2024 10:38:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1211</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1211</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-076-01 Add examples of coercions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Added examples of coercion rules in action, as requested.&lt;/p&gt;
&lt;p&gt;Note to reviewers: the XPath spec contains addition paragraphs explaining the effect of the 1.0 compatibility rules.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1210 created</title>
   <pubDate>Mon, 13 May 2024 16:31:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1210</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1210</guid>
   <description>&lt;div&gt;&lt;p&gt;An edge case with coercion in 1.0 compatibility mode&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XPath 3.1 says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a static function call, if [XPath 1.0 compatibility mode] is true and an argument of a static function is not of the expected type, then the following conversions are applied sequentially to the argument value V:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In 4.0, we have dropped the phrase &lt;em&gt;and [the supplied value] is not of the expected type&lt;/em&gt;. One effect of this omission is that when the expected type is &lt;code&gt;xs:string?&lt;/code&gt; and the supplied value is &lt;code&gt;()&lt;/code&gt;, we now apply the &lt;code&gt;string()&lt;/code&gt; function which means we supply &lt;code&gt;""&lt;/code&gt; rather than &lt;code&gt;()&lt;/code&gt; as the coerced value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1209 created</title>
   <pubDate>Mon, 13 May 2024 14:49:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1209</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1209</guid>
   <description>&lt;div&gt;&lt;p&gt;1183 Add transient mode and the transient{} expression&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1183&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 077 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 13 May 2024 13:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/05-14</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-05-14</guid>
</item><item>
   <title>QT4 CG meeting 076 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Mon, 13 May 2024 13:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/05-07</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-05-07</guid>
</item><item>
   <title>Issue #1208 created</title>
   <pubDate>Mon, 13 May 2024 10:13:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1208</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1208</guid>
   <description>&lt;div&gt;&lt;p&gt;Reserved Function Names: item, empty-sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The keywords &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;empty-sequence&lt;/code&gt; have been dropped from the list of reversed function names:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-reserved-fn-names&lt;/li&gt;
&lt;li&gt;https://www.w3.org/TR/2017/REC-xquery-31-20170321/#id-reserved-fn-names&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A note exists only for the dropped &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;array&lt;/code&gt; keywords.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1207 created</title>
   <pubDate>Mon, 13 May 2024 10:03:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1207</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1207</guid>
   <description>&lt;div&gt;&lt;p&gt;Array filter: Positional access&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I apologize for warming up an already accepted feature, but I have mixed feelings about the deviating rules for filters and array filters. People can do…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $n in $numbers[1 to 5]
return $n + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…but they won’t be able to do…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for member $n in $numbers?[1 to 5]
return $n + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course you can always use &lt;code&gt;array:subarray&lt;/code&gt;, &lt;code&gt;array:slice&lt;/code&gt;, etc., but from the perspective of symmetry and usability, it’s just not obvious why positions are exclusively allowed for sequences. Even if we regard numeric predicates as a design error, we should rather &lt;em&gt;deliberately repeat other people’s mistakes&lt;/em&gt;…&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1206 created</title>
   <pubDate>Mon, 13 May 2024 08:28:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1206</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1206</guid>
   <description>&lt;div&gt;&lt;p&gt;1195 Hash Function: CRC-32&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1195&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1205 created</title>
   <pubDate>Mon, 13 May 2024 07:31:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1205</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1205</guid>
   <description>&lt;div&gt;&lt;p&gt;1196 Math Functions: math:e, math:sinh, math:cosh, math:tanh&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1196&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1204 created</title>
   <pubDate>Sat, 11 May 2024 18:44:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1204</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1204</guid>
   <description>&lt;div&gt;&lt;p&gt;1203 Define out-of-range conditions in CSV get function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1203&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1203 created</title>
   <pubDate>Sat, 11 May 2024 18:01:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1203</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1203</guid>
   <description>&lt;div&gt;&lt;p&gt;CSV parsing: in call of get($R, $Z), what if $R is out of range&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the description of the &lt;code&gt;?get($R, $Z)&lt;/code&gt; callback function, it is stated what happens if $Z doesn't identify an actual column (error when $Z is a string, return "" when it is an integer), but it's not stated what happens when $R (the row number) is out of range.&lt;/p&gt;
&lt;p&gt;The existing text could also be improved because it talks of "the argument" to the function, when there are two.&lt;/p&gt;
&lt;p&gt;The Saxon implementation currently returns "" and I proposed to say that unless anyone objects.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1202 created</title>
   <pubDate>Fri, 10 May 2024 11:58:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1202</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1202</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Rendering of new/updated functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It’s not always clear in the XQFO draft what has been updated when a function is marked as such. In the attached examples (there are several cases), either the &lt;code&gt;Changed&lt;/code&gt; section is missing, or the renderer fails to detect that the function has not actually changed:&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/196589/0c616f31-278a-4147-9266-8d8f5d51378d" alt="image"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1201 closed</title>
   <pubDate>Thu, 9 May 2024 05:13:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1201</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1201</guid>
   <description>&lt;div&gt;&lt;p&gt;Update the Saxonica EE repo&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1201 created</title>
   <pubDate>Thu, 9 May 2024 05:13:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1201</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1201</guid>
   <description>&lt;div&gt;&lt;p&gt;Update the Saxonica EE repo&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This should be harmless and I would have thought unnecessary, but there were reports of trouble reading Saxon EE 12.2 from Maven. This PR just updates the maven EE repo URI. The old URI redirects to the new one, but maybe that's causing a problem somehow?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1162 closed</title>
   <pubDate>Wed, 8 May 2024 18:09:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1162</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1162</guid>
   <description>&lt;div&gt;&lt;p&gt;Revert strict type for positional variables (xs:integer → xs:positiveInteger)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1165 closed</title>
   <pubDate>Wed, 8 May 2024 18:07:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1165</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1165</guid>
   <description>&lt;div&gt;&lt;p&gt;[Editorial] References to numeric codepoints in prose: consistency&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1200 created</title>
   <pubDate>Wed, 8 May 2024 17:36:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1200</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1200</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-075-02 Define the term sequence concatenation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Purely editorial&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1199 created</title>
   <pubDate>Wed, 8 May 2024 14:29:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1199</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1199</guid>
   <description>&lt;div&gt;&lt;p&gt;In F+O function signatures, show some indication that a function is variadic.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently the markup indicates that a function is variadic, but this is not flagged in the displayed signature.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1198 created</title>
   <pubDate>Wed, 8 May 2024 14:28:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1198</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1198</guid>
   <description>&lt;div&gt;&lt;p&gt;1189 distinct document order&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add distinct-document-order function.&lt;/p&gt;
&lt;p&gt;(Somehow this PR also includes changes to XSLT examples consequent on allowing "fn" as a synonym for "function")&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1197 created</title>
   <pubDate>Wed, 8 May 2024 13:30:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1197</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1197</guid>
   <description>&lt;div&gt;&lt;p&gt;1192 Allow fn as abbreviation for function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Brings function tests into line with inline function syntax&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1196 created</title>
   <pubDate>Wed, 8 May 2024 10:58:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1196</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1196</guid>
   <description>&lt;div&gt;&lt;p&gt;Math Functions: `math:e`, `math:sinh`, `math:cosh`, `math:tanh`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The functions &lt;code&gt;math:e&lt;/code&gt;, &lt;code&gt;math:sinh&lt;/code&gt;, &lt;code&gt;math:cosh&lt;/code&gt; and &lt;code&gt;math:tanh&lt;/code&gt; might have been missed in the past, and would be simple to add.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1195 created</title>
   <pubDate>Wed, 8 May 2024 10:47:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1195</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1195</guid>
   <description>&lt;div&gt;&lt;p&gt;Hash Function: CRC-32&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I discovered only now that &lt;code&gt;fn:hash&lt;/code&gt; mentions that the function can also be used for computing cyclic redundancy checks.&lt;/p&gt;
&lt;p&gt;Shouldn’t we add the basic &lt;code&gt;CRC-32&lt;/code&gt; algorithm to the list of mandatory algorithms?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1194 created</title>
   <pubDate>Wed, 8 May 2024 09:10:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1194</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1194</guid>
   <description>&lt;div&gt;&lt;p&gt;New function fn:query()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose a new function &lt;code&gt;fn:query()&lt;/code&gt; to perform dynamic XQuery/XPath evaluation: a similar role to fn:transform() and xsl:evaluate.&lt;/p&gt;
&lt;p&gt;I propose a design based on the design of fn:invisible-xml() - fn:query should take a query string as its argument, and return a function item that can be called to evaluate the query.&lt;/p&gt;
&lt;p&gt;The fn:query() function will need an options map to supply significant aspects of the static context, for example the base URI. But I don't think we need to support everything. Public functions in the calling module should probably be made available automatically, in which case we don't need to support "import module".&lt;/p&gt;
&lt;p&gt;The dynamic evaluation function will need an options map to supply significant aspects of the dynamic context, notably the context value and values of external parameters. The query result should be returned in "raw" (ie. unserialized) form.&lt;/p&gt;
&lt;p&gt;Perhaps there should be an option language="xpath" to say that the "query" is actually an XPath expression; some implementations might find that easier to support, especially when the processor is itself an XPath processor.&lt;/p&gt;
&lt;p&gt;(Motivation: Saxon has a pair of ancient extension functions &lt;code&gt;saxon:compile-query&lt;/code&gt; and &lt;code&gt;saxon:query&lt;/code&gt; and the design needs modernising, and bridging across to additional platforms. We might as well get it into the standard if we're doing that.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1143 closed</title>
   <pubDate>Tue, 7 May 2024 18:24:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1143</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1143</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion Rules for Choice Item Types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1148 closed</title>
   <pubDate>Tue, 7 May 2024 18:24:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1148</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1148</guid>
   <description>&lt;div&gt;&lt;p&gt;1143 Coercion rules: handle choice types before atomization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1184 closed</title>
   <pubDate>Tue, 7 May 2024 17:44:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1184</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1184</guid>
   <description>&lt;div&gt;&lt;p&gt;1165-Use Unicode-style character references&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1171 closed</title>
   <pubDate>Tue, 7 May 2024 16:08:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1171</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1171</guid>
   <description>&lt;div&gt;&lt;p&gt;Predicates returning xs:boolean vs. xs:boolean?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1182 closed</title>
   <pubDate>Tue, 7 May 2024 16:06:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1182</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1182</guid>
   <description>&lt;div&gt;&lt;p&gt;1171 Change predicate callbacks to allow empty return value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1170 closed</title>
   <pubDate>Tue, 7 May 2024 16:05:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1170</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1170</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: fn:index-where; parentheses; …&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1186 closed</title>
   <pubDate>Tue, 7 May 2024 16:05:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1186</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1186</guid>
   <description>&lt;div&gt;&lt;p&gt;1170 Editorial: fn:index-where&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1193 created</title>
   <pubDate>Tue, 7 May 2024 14:34:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1193</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1193</guid>
   <description>&lt;div&gt;&lt;p&gt;Parsing Functions: Empty input&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I was asked why some of the parsing functions allow empty input and others don’t:&lt;/p&gt;
&lt;p&gt;Function | Input
--- | ---
&lt;code&gt;fn:parse-integer&lt;/code&gt; | &lt;code&gt;xs:string&lt;/code&gt;
&lt;code&gt;fn:parse-uri&lt;/code&gt; | &lt;code&gt;xs:string&lt;/code&gt;
&lt;code&gt;fn:parse-ietf-date&lt;/code&gt; | &lt;code&gt;xs:string?&lt;/code&gt;
&lt;code&gt;fn:parse-QName&lt;/code&gt; | &lt;code&gt;xs:string&lt;/code&gt;
&lt;code&gt;fn:parse-xml&lt;/code&gt; | &lt;code&gt;xs:string?&lt;/code&gt;
&lt;code&gt;fn:parse-xml-fragment&lt;/code&gt; | &lt;code&gt;xs:string?&lt;/code&gt;
&lt;code&gt;fn:parse-html&lt;/code&gt; | &lt;code&gt;(xs:string \| xs:hexBinary \| xs:base64Binary)?&lt;/code&gt;
&lt;code&gt;fn:parse-json&lt;/code&gt; | &lt;code&gt;xs:string?&lt;/code&gt;
&lt;code&gt;fn:parse-csv&lt;/code&gt; | &lt;code&gt;xs:string?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I would assume there is no rationale behind this, and that we should always allow empty input.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1192 created</title>
   <pubDate>Tue, 7 May 2024 10:11:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1192</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1192</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow "fn" as abbreviation for "function" in ItemType syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The syntax for inline functions is, by design, similar to the syntax for function tests. So it's confusing that you can abbreviate "function" to "fn" in the first case but not the second.&lt;/p&gt;
&lt;p&gt;Open question: what about "declare function" in the XQuery prolog? My instinct is to leave that as it is.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1191 created</title>
   <pubDate>Mon, 6 May 2024 22:14:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1191</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1191</guid>
   <description>&lt;div&gt;&lt;p&gt;1167, 934 deep equal merge collations param&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #934 String comparisons in fn:deep-equal
Fix #1167 Merge $collation and $options params of fn:deep-equal&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1190 created</title>
   <pubDate>Mon, 6 May 2024 15:09:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1190</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1190</guid>
   <description>&lt;div&gt;&lt;p&gt;1188 XQFO hash&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fixed description&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1189 created</title>
   <pubDate>Mon, 6 May 2024 10:43:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1189</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1189</guid>
   <description>&lt;div&gt;&lt;p&gt;Function: distinct document order&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The nodes resulting from path traversals are normalized by restoring document order and removing duplicates. There are use cases where this operation needs to be enforced, for which people do things like…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;$nodes/.
$nodes/self::node()
$nodes union ()
$nodes except ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…which all look arcane to occasional readers, and are prone to be accidentally optimized away.&lt;/p&gt;
&lt;p&gt;It would be sensible to have a helper function that makes this operation explicit, so that users have some clue that something intentional is going on. Some articles called this postprocessing step &lt;em&gt;distinct document order&lt;/em&gt;, which is why we added &lt;code&gt;util:ddo&lt;/code&gt; in the past – but I would love to find a both canonical and catchier name for it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 076 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 6 May 2024 09:55:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/05-07</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-05-07</guid>
</item><item>
   <title>Issue #1188 created</title>
   <pubDate>Mon, 6 May 2024 08:58:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1188</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1188</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:hash: Editorial&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The summary of &lt;code&gt;fn:hash&lt;/code&gt; says…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Returns a string representation of the results from a specified hash, checksum, or cyclic redundancy check function upon the input.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…but the latest version returns a &lt;code&gt;xs:hexBinary&lt;/code&gt; value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1187 created</title>
   <pubDate>Sat, 4 May 2024 10:55:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1187</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1187</guid>
   <description>&lt;div&gt;&lt;p&gt;Decimal rounding&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is in response to a bug/feature request from a Saxon user: see https://saxonica.plan.io/issues/6408&lt;/p&gt;
&lt;p&gt;Currently&lt;/p&gt;
&lt;p&gt;(a) the round() function gives no control over rounding mode (towards zero, towards positive infinity, etc etc).&lt;/p&gt;
&lt;p&gt;(b) decimal division leaves it entirely implementation-defined what the precision of the result should be, let alone what rounding is applied to attain that precision.&lt;/p&gt;
&lt;p&gt;This can cause difficulties for users where, for example, financial accounting standards mandate a particular rounding mode.&lt;/p&gt;
&lt;p&gt;Is this something we want to address?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1186 created</title>
   <pubDate>Thu, 2 May 2024 11:17:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1186</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1186</guid>
   <description>&lt;div&gt;&lt;p&gt;1170 Editorial: fn:index-where&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: 1170&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Editorial, 2 characters added&lt;/li&gt;
&lt;li&gt;“2. Redundant parens in function signatures“ is obsolete (https://github.com/qt4cg/qtspecs/pull/1182/files#diff-7625c07ae8131ff65c3caa677b188ed2b9b66237312d11c05a2fa2838c6f5c67R21233)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1185 created</title>
   <pubDate>Thu, 2 May 2024 11:07:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1185</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1185</guid>
   <description>&lt;div&gt;&lt;p&gt;1179 array:values, map:values → array:get, map:get&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1179&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1184 created</title>
   <pubDate>Wed, 1 May 2024 21:14:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1184</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1184</guid>
   <description>&lt;div&gt;&lt;p&gt;1165-Use Unicode-style character references&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently only affects F+O.&lt;/p&gt;
&lt;p&gt;New element &lt;code&gt;&amp;lt;char&amp;gt;U+xxxx&amp;lt;/char&amp;gt;&lt;/code&gt; is supported in the DTD and XSLT. It is automatically expanded to include the character name and glyph. I was hoping to get the Unicode character names directly from the Unicode database, but that's a bit unwieldy, so I created a little file (in the style directory) containing the names of the characters that we actually use.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1183 created</title>
   <pubDate>Wed, 1 May 2024 20:24:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1183</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1183</guid>
   <description>&lt;div&gt;&lt;p&gt;transient() - a function to make functions nondeterministic&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose a function &lt;code&gt;transient()&lt;/code&gt; which takes a function as input and returns a function that is functionally identical, but which relaxes the requirement for determinism.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;transient(current-dateTime#0)&lt;/code&gt; returns a function that returns a date and time, but is not required to return the same date and time on every call, while &lt;code&gt;transient(doc#1)&lt;/code&gt; returns a function that dereferences an XML document URI, but is not required to return the same document every time it is called with the same URI.&lt;/p&gt;
&lt;p&gt;A valid implementation, of course, could return the supplied function unchanged - the transient() function gives the implementation the freedom to relax the rules, but does not require it to do so.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;transient()&lt;/code&gt; seems like a more friendly name than &lt;code&gt;nondeterministic()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1182 created</title>
   <pubDate>Tue, 30 Apr 2024 23:39:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1182</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1182</guid>
   <description>&lt;div&gt;&lt;p&gt;1171 Change predicate callbacks to allow empty return value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Return type changes from &lt;code&gt;xs:boolean&lt;/code&gt; to &lt;code&gt;xs:boolean?&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1181 created</title>
   <pubDate>Tue, 30 Apr 2024 22:00:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1181</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1181</guid>
   <description>&lt;div&gt;&lt;p&gt;296 Allow default-namespace=##any&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Allows the default namespace for elements and types to have the special value "##any", which causes unprefixed QNames to match elements in any namespace. Use cases include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Casual ad-hoc XPath queries, where over-retrieval isn't a problem&lt;/li&gt;
&lt;li&gt;Use with HTML, where it can be unpredictable whether elements will be in a namespace, and where users are accustomed to browser behaviour with its "wilful violation" of the XPath 1.0 specification&lt;/li&gt;
&lt;li&gt;Any environment where multiple namespaces are in use for variants of what is essentially the same vocabulary of element names (for example, where the XML designer has made the mistake of versioning the namespace URI)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #161 closed</title>
   <pubDate>Tue, 30 Apr 2024 20:02:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/161</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-161</guid>
   <description>&lt;div&gt;&lt;p&gt;Support unbounded variadic functions on sequence parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1137 closed</title>
   <pubDate>Tue, 30 Apr 2024 20:02:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1137</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1137</guid>
   <description>&lt;div&gt;&lt;p&gt;161 Variadic functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1180 created</title>
   <pubDate>Tue, 30 Apr 2024 18:04:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1180</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1180</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:unparsed-text: `cache` option&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In #1117, we discussed the pros and cons of a &lt;code&gt;deterministic&lt;/code&gt; option for &lt;code&gt;fn:unparsed-text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I would suggest  making the function strictly nondeterministic, but adding a &lt;code&gt;cache&lt;/code&gt; option:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;That way we don’t equate determinism with caching, which can in fact be different things. For example, an implementation might decide to do deterministic things at compile time, whereas it might be better to cache data only when it’s actually requested.&lt;/li&gt;
&lt;li&gt;The meaning of the option will be easier to explain to non-experts (…and avoid confusion among experts).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 075 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 30 Apr 2024 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/04-30</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-04-30</guid>
</item><item>
   <title>Issue #1086 closed</title>
   <pubDate>Tue, 30 Apr 2024 16:22:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1086</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1086</guid>
   <description>&lt;div&gt;&lt;p&gt;array:values spec cleanup&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1087 closed</title>
   <pubDate>Tue, 30 Apr 2024 16:22:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1087</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1087</guid>
   <description>&lt;div&gt;&lt;p&gt;1086 Editorial changes to array:values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1166 closed</title>
   <pubDate>Tue, 30 Apr 2024 16:16:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1166</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1166</guid>
   <description>&lt;div&gt;&lt;p&gt;Invalid option keys: the rule is unclear&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1168 closed</title>
   <pubDate>Tue, 30 Apr 2024 16:16:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1168</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1168</guid>
   <description>&lt;div&gt;&lt;p&gt;1166 Clarify rule on invalid option keys&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1173 closed</title>
   <pubDate>Tue, 30 Apr 2024 16:12:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1173</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1173</guid>
   <description>&lt;div&gt;&lt;p&gt;array:build, map:build: Positional access&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1174 closed</title>
   <pubDate>Tue, 30 Apr 2024 16:12:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1174</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1174</guid>
   <description>&lt;div&gt;&lt;p&gt;1173 array:build, map:build: Positional access&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1177 closed</title>
   <pubDate>Tue, 30 Apr 2024 16:10:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1177</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1177</guid>
   <description>&lt;div&gt;&lt;p&gt;1162 Positional variables are xs:integer not xs:positiveInteger&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #553 closed</title>
   <pubDate>Tue, 30 Apr 2024 16:08:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/553</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-553</guid>
   <description>&lt;div&gt;&lt;p&gt;New function fn:substitute()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1179 created</title>
   <pubDate>Tue, 30 Apr 2024 16:02:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1179</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1179</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: `array:values`, `map:values`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Triggered by #1087:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Align &lt;code&gt;map:values&lt;/code&gt; with &lt;code&gt;array:values&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Revise notes.&lt;/li&gt;
&lt;li&gt;Rename the functions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;@michaelhkay You suggested that &lt;code&gt;content&lt;/code&gt; might be a better name – rather than &lt;code&gt;item&lt;/code&gt; – for retrieving the sequence-concatenation of values in map lookups in https://github.com/qt4cg/qtspecs/issues/1169#issuecomment-2074378446. Should we rename the functions to &lt;code&gt;array:contents&lt;/code&gt;, &lt;code&gt;map:contents&lt;/code&gt; or use &lt;code&gt;array:items&lt;/code&gt; and &lt;code&gt;map:items&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1178 closed</title>
   <pubDate>Tue, 30 Apr 2024 16:00:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1178</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1178</guid>
   <description>&lt;div&gt;&lt;p&gt;1146 Add inline change markup in the XPath/XQuery spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1178 created</title>
   <pubDate>Sun, 28 Apr 2024 22:51:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1178</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1178</guid>
   <description>&lt;div&gt;&lt;p&gt;1146 Add inline change markup in the XPath/XQuery spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There is more work to be done to ensure the change log entries are complete, but this is a good start.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1159 closed</title>
   <pubDate>Sat, 27 Apr 2024 20:40:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1159</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1159</guid>
   <description>&lt;div&gt;&lt;p&gt;Filter operator for arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1177 created</title>
   <pubDate>Sat, 27 Apr 2024 20:36:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1177</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1177</guid>
   <description>&lt;div&gt;&lt;p&gt;1162 Positional variables are xs:integer not xs:positiveInteger&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Reverts a change that made the type xs:positiveInteger as the impact of the change was not fully explored, and the same change was not made elsewhere e.g. to the argument type of array:get() or the return type of fn:position().&lt;/p&gt;
&lt;p&gt;Note: the use of xs:positiveInteger has been retained for row and column numbers in the CSV functions, and for codepoints in the fn:char() function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1176 created</title>
   <pubDate>Fri, 26 Apr 2024 03:15:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1176</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1176</guid>
   <description>&lt;div&gt;&lt;p&gt;Use fn:parse-uri to check whether a filepath is relative or absolute&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have a question about the new function &lt;code&gt;fn:parse-uri()&lt;/code&gt;. A common use case is to check whether a file path is absolute or relative. For example, I want to check whether the file path &lt;code&gt;images/img1.png&lt;/code&gt; is relative and can therefore be converted to an absolute file path using &lt;code&gt;resolve-uri()&lt;/code&gt;. Or I want to check whether &lt;code&gt;$base&lt;/code&gt; is absolute and can therefore be used as the second argument in &lt;code&gt;resolve-uri()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;How would I use a &lt;code&gt;uri-structure-record&lt;/code&gt; map determined as a result of&lt;code&gt; fn:parse-uri ()&lt;/code&gt; to decide whether it is a relative or absolute file path?&lt;br/&gt;
Greetings, Frank&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1175 created</title>
   <pubDate>Thu, 25 Apr 2024 18:18:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1175</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1175</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath: Optional parameters in the definition of an inline function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a proposal to extend the definition of an inline-function item with the ability to specify a set of optional/keyword-value parameters, following the sequence of positional parameters of the function.&lt;/p&gt;
&lt;p&gt;This is very similar to what we already have for static function definitions: https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-function-definition and https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-static-functions&lt;/p&gt;
&lt;p&gt;While a &lt;strong&gt;static function definition&lt;/strong&gt; has the following parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The function name, which is an &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-expanded-qname"&gt;expanded QName&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A (possibly empty) list of required parameters, each having:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a parameter name (an &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-expanded-qname"&gt;expanded QName&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a required type (a &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-sequence-type"&gt;sequence type&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A (possibly empty) list of optional parameters, each having:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a parameter name (an &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-expanded-qname"&gt;expanded QName&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a required type (a &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-sequence-type"&gt;sequence type&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a default value expression (an expression: see &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-expressions"&gt;4 Expressions&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A return type (a &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-sequence-type"&gt;sequence type&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A (possibly empty) set of function annotations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A body. The function body contains the logic that enables the function result to be computed from the supplied arguments and information in the static and dynamic context.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For an &lt;strong&gt;inline function definition&lt;/strong&gt; we will have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A name of a variable to contain the function item being defined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A (possibly empty) list of required parameters, each having:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a parameter name (an &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-expanded-qname"&gt;expanded QName&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an optional type (a &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-sequence-type"&gt;sequence type&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A (possibly empty) list of optional parameters, each having:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a parameter name (an &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-expanded-qname"&gt;expanded QName&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an optional type (a &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-sequence-type"&gt;sequence type&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a default value expression (an expression: see &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-expressions"&gt;4 Expressions&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An optional return type (a &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#dt-sequence-type"&gt;sequence type&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A body. The function body contains the logic that enables the function result to be computed from the supplied arguments and information in the static and dynamic context.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What is accomplished by introducing optional parameters&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;The answer is the same as for the effect of having optional parameters in a static function definition: increased &lt;strong&gt;&lt;em&gt;brevity&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;conciseness&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;clarity&lt;/em&gt;&lt;/strong&gt; .&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $myFun := fn($pos1, $pos2, $posK, $kw1 := expr1, $kw2 := expr2, ...,  $kwN := exprN) { (: Some expression :)} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;replaces what would otherwise be a set of &lt;code&gt;N! + 1&lt;/code&gt; separate inline function definitions, each of which must be assigned to a separate variable.&lt;/p&gt;
&lt;p&gt;Similarly to the static function calls, with this new feature a call to such an inline function must provide values for all positional arguments, followed by an optional set (meaning in any order) of assignments of values to specific keyword-valued (optional) arguments. The rules for an inline function call are similar to those for a call to a static function - the provided values for the positional arguments must precede all other provided values and the values for the optional arguments may be provided in any order.&lt;/p&gt;
&lt;p&gt;Here is a short example of an inline function definition and calling it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $incr := fn($arg1, $increment := 1) {$arg1 + $increment }
 return
  (
   $incr(5),
   $incr(5, increment := 2),
   $incr(5, increment := 3)
 )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;6, 7, 8&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1174 created</title>
   <pubDate>Wed, 24 Apr 2024 12:45:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1174</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1174</guid>
   <description>&lt;div&gt;&lt;p&gt;1173 array:build, map:build: Positional access&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1173&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1110 closed</title>
   <pubDate>Wed, 24 Apr 2024 12:40:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1110</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1110</guid>
   <description>&lt;div&gt;&lt;p&gt;New error codes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1173 created</title>
   <pubDate>Wed, 24 Apr 2024 10:13:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1173</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1173</guid>
   <description>&lt;div&gt;&lt;p&gt;array:build, map:build: Positional access&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;array:build&lt;/code&gt; seems to be the only function (for iterating over ordered input) for which the HOF parameters lacks a positional parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;array:build(
  $input   as item()*,	
  $action  as function(item()) as item()*  := fn:identity#1
) as array(*)

(: should be :)
array:build(
  $input   as item()*,	
  $action  as function(item(), xs:integer) as item()*  := fn:identity#1
) as array(*)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1172 created</title>
   <pubDate>Wed, 24 Apr 2024 10:08:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1172</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1172</guid>
   <description>&lt;div&gt;&lt;p&gt;Iterating maps: Positional access&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With the new filter expression for maps, the context position is available. To be consistent, if we want to provide positional access for unordered data, we should…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;either provide this for map functions  as well (&lt;code&gt;map:filter&lt;/code&gt;, &lt;code&gt;map:for-each&lt;/code&gt;), or&lt;/li&gt;
&lt;li&gt;don’t provide it for map predicates at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1171 created</title>
   <pubDate>Wed, 24 Apr 2024 10:02:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1171</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1171</guid>
   <description>&lt;div&gt;&lt;p&gt;Predicates returning xs:boolean vs. xs:boolean?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-filter-maps-and-arrays"&gt;4.13.4  Filter Expressions for Maps and Arrays&lt;/a&gt;, the type of the predicate expression &lt;code&gt;FILTER&lt;/code&gt; is &lt;code&gt;xs:boolean?&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To be consistent, we should either relax the types of the predicate/filter functions (for &lt;code&gt;fn:filter&lt;/code&gt;, etc.) or stick with &lt;code&gt;xs:boolean&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1170 created</title>
   <pubDate>Wed, 24 Apr 2024 07:31:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1170</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1170</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: fn:index-where; parentheses; …&lt;/p&gt;&lt;div class="markup"&gt;&lt;h4&gt;1. fn:index-where, array:index-where&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Returns the position in an input ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;→ positions&lt;/p&gt;
&lt;h4&gt;2. Redundant parens in function signatures&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;as (function(xs:anyAtomicType, item()*) as xs:boolean)
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1169 created</title>
   <pubDate>Wed, 24 Apr 2024 06:35:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1169</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1169</guid>
   <description>&lt;div&gt;&lt;p&gt;Maps &amp;amp; Arrays: Consistency &amp;amp; Terminology&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;After the introduction of #1094 and #1159, and before adding more map/array operations, I think it’s time to get more serious about consistency and terminology. The current drafts employ a variety of terms that are not clearly defined, or separated from each other. We now have at least…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;items, members, pairs, keys, values, entries&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…which are sometimes used for maps, for arrays, or for both data structures. A first attempt to clean up, with reducing the overall effort:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A minor one: The modifier for lookups should be in singular form, analagous to node axes: &lt;code&gt;item&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;pair&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While I first advocated the orthogonality principle for axes in lookup expressions, I now think we should stick to the existing terminology. Otherwise, we would need to revise many other existing parts of the spec. My suggestion would be to:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;introduce &lt;code&gt;member&lt;/code&gt; for arrays&lt;/li&gt;
&lt;li&gt;only allow &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;pair&lt;/code&gt; for maps&lt;/li&gt;
&lt;li&gt;allow &lt;code&gt;items&lt;/code&gt; for both maps and arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This would make it symmetric with a) the current terminology for maps and arrays, and b) enhanced &lt;code&gt;for&lt;/code&gt; clauses, i.e. &lt;code&gt;for member $m&lt;/code&gt; and &lt;code&gt;for key $k value $v&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reverse approach would be to drop &lt;code&gt;for member $m&lt;/code&gt; and to also allow &lt;code&gt;for key $k value $v&lt;/code&gt; for arrays (with &lt;code&gt;for value&lt;/code&gt; replacing &lt;code&gt;for member&lt;/code&gt;). In addition, we could have &lt;code&gt;for pair&lt;/code&gt;.&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;
&lt;p&gt;With the introduction of the &lt;code&gt;item&lt;/code&gt; axis, &lt;code&gt;map:values&lt;/code&gt; and &lt;code&gt;arrays:values&lt;/code&gt; should be renamed to &lt;code&gt;map:items&lt;/code&gt; and &lt;code&gt;array:items&lt;/code&gt;. → &lt;code&gt;map:contents&lt;/code&gt; and &lt;code&gt;array:contents&lt;/code&gt;, see &lt;a href="https://github.com/qt4cg/qtspecs/issues/1179"&gt;#1179&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I would suggest dropping &lt;code&gt;array:members&lt;/code&gt; and &lt;code&gt;array:of-members&lt;/code&gt;. The names don’t imply we’ll deal with records, and it’s not in line with &lt;code&gt;for member $m&lt;/code&gt; either. If we want to keep these functions, we could rename them to &lt;code&gt;array:pairs&lt;/code&gt; and &lt;code&gt;array:of-pairs&lt;/code&gt; and add the integer positions as keys, and we should introduce and consistently use the term &lt;code&gt;pair&lt;/code&gt; for maps and arrays.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Closely related: #826&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1125 closed</title>
   <pubDate>Tue, 23 Apr 2024 22:48:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1125</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1125</guid>
   <description>&lt;div&gt;&lt;p&gt;1094 Enhanced lookup expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1094 closed</title>
   <pubDate>Tue, 23 Apr 2024 22:48:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1094</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1094</guid>
   <description>&lt;div&gt;&lt;p&gt;Axis steps in lookup expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 074 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 23 Apr 2024 17:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/04-23</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-04-23</guid>
</item><item>
   <title>Issue #1135 closed</title>
   <pubDate>Tue, 23 Apr 2024 16:04:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1135</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1135</guid>
   <description>&lt;div&gt;&lt;p&gt;Definition of focus functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1157 closed</title>
   <pubDate>Tue, 23 Apr 2024 16:04:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1157</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1157</guid>
   <description>&lt;div&gt;&lt;p&gt;1135 Correction to definition of focus functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1163 closed</title>
   <pubDate>Tue, 23 Apr 2024 16:01:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1163</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1163</guid>
   <description>&lt;div&gt;&lt;p&gt;1159 Add filter expressions for maps and arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #235 closed</title>
   <pubDate>Tue, 23 Apr 2024 15:59:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/235</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-235</guid>
   <description>&lt;div&gt;&lt;p&gt;Add multiple=true() option to fn:parse-json and fn:json-doc&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1155 closed</title>
   <pubDate>Tue, 23 Apr 2024 15:59:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1155</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1155</guid>
   <description>&lt;div&gt;&lt;p&gt;Glossary formatting&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1164 closed</title>
   <pubDate>Tue, 23 Apr 2024 15:59:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1164</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1164</guid>
   <description>&lt;div&gt;&lt;p&gt;1155 Consistency of glossaries&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1168 created</title>
   <pubDate>Mon, 22 Apr 2024 23:15:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1168</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1168</guid>
   <description>&lt;div&gt;&lt;p&gt;1166 Clarify rule on invalid option keys&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;An error is raised for an option key unless (a) it is listed in the specification, or (b) it is recognized by the implementation, or (c) it is a QName with a non-absent namespace.&lt;/p&gt;
&lt;p&gt;Also clarified the rule about accepting an array in place of a sequence (I'm not sure whether this is something that we actually do, and certainly it doesn't happen unless the parameter explicitly allows an array.)&lt;/p&gt;
&lt;p&gt;Fix #1166&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1167 created</title>
   <pubDate>Mon, 22 Apr 2024 17:08:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1167</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1167</guid>
   <description>&lt;div&gt;&lt;p&gt;Merge $collation into $options parameter of fn:deep-equal()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;To avoid the ugly third parameter to deep-equal which will almost always be set to (), merge $collation into the $options parameter, whose type becomes &lt;code&gt;(map(*) | xs:string)?&lt;/code&gt; for backwards compatibility.&lt;/p&gt;
&lt;p&gt;The same idea is being applied to unparsed-text and can probably be done elsewhere.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1166 created</title>
   <pubDate>Mon, 22 Apr 2024 14:42:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1166</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1166</guid>
   <description>&lt;div&gt;&lt;p&gt;Invalid option keys: the rule is unclear&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;PR #1059 introduced the rule:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If an option is not described in the specification, if it is not supported by the implementation and if its name is in no namespace, a type error [err:FORG0013] must be raised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and this has proved its worth in finding quite a few errors in the test suite!&lt;/p&gt;
&lt;p&gt;However, it's not entirely clear what it means.&lt;/p&gt;
&lt;p&gt;Entries in the options map can have keys of any type. I suspect this rule is intended to apply to (a) keys of type xs:string, and (b) strings of type xs:QName where the namespace URI is absent.&lt;/p&gt;
&lt;p&gt;Alternatively, perhaps it should apply to ALL option keys other than a QName in a non-null namespace?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 074 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 22 Apr 2024 13:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/04-23</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-04-23</guid>
</item><item>
   <title>Issue #1165 created</title>
   <pubDate>Mon, 22 Apr 2024 11:06:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1165</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1165</guid>
   <description>&lt;div&gt;&lt;p&gt;[Editorial] References to numeric codepoints in prose: consistency&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A quick glance in F+O finds:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; \n (newline, x0A)
π (x3C0)
the glyph ≂̸ which is expressed using the two codepoints #x2242 #x0338
A format token of &amp;amp;#x661; (Arabic-Indic digit one)
the format token &amp;amp;#x2460; (circled digit one, ①)
the actual Unicode character COMBINING DIARESIS (Unicode codepoint U+0308) or &amp;amp;#x0308;
The Latin small letter dotless i (ı, U+0131, used in Turkish)
the Unicode replacement character (U+FFFD)
CRLF (U+000D, U+000A), LF (U+000A), or CR (U+000D)
comma "," (U+002C)
the Unicode quotation mark " (U+0022)
a single newline (U+000A) character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I feel we could do better...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #700 closed</title>
   <pubDate>Sun, 21 Apr 2024 22:47:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/700</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-700</guid>
   <description>&lt;div&gt;&lt;p&gt;Operators for array mapping and filtering&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1164 created</title>
   <pubDate>Sun, 21 Apr 2024 22:16:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1164</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1164</guid>
   <description>&lt;div&gt;&lt;p&gt;1155 Consistency of glossaries&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Use a common style for all glossaries.&lt;/p&gt;
&lt;p&gt;Add a glossary to F+O.&lt;/p&gt;
&lt;p&gt;Fix #1155&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1163 created</title>
   <pubDate>Fri, 19 Apr 2024 20:39:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1163</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1163</guid>
   <description>&lt;div&gt;&lt;p&gt;1159 Add filter expressions for maps and arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1162 created</title>
   <pubDate>Thu, 18 Apr 2024 10:19:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1162</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1162</guid>
   <description>&lt;div&gt;&lt;p&gt;Revert strict type for positional variables (xs:integer → xs:positiveInteger)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I feel that the decision to change &lt;code&gt;xs:integer&lt;/code&gt; to &lt;code&gt;xs:positiveInteger&lt;/code&gt; was a bit hasty (https://github.com/qt4cg/qtspecs/pull/1131#issuecomment-2051379262):&lt;/p&gt;
&lt;p&gt;To be consistent, numerous other expressions and functions would need to be rewritten as well to use stricter types (arbitrary examples: the &lt;code&gt;count&lt;/code&gt; clause; &lt;code&gt;$err:line-number&lt;/code&gt; in the catch clause; the result type of &lt;code&gt;fn:string-to-codepoints&lt;/code&gt;; positions in &lt;code&gt;array:get&lt;/code&gt;, &lt;code&gt;fn:parse-integer&lt;/code&gt;, etc.; the position parameter in HOF functions, and so on and on). We haven’t done so yet, and I seriously wonder what exactly we would win from the stricter types. In many cases, it would be reasonable to also define a strict upper limit, which is not possible with our types anyway.&lt;/p&gt;
&lt;p&gt;Implementations may build heavily on the fact that &lt;code&gt;xs:integer&lt;/code&gt; has been the default type for integer values in previous versions of the languages. For example, we use cached instances for the most small integer values, or we rewrite constructs with &lt;code&gt;xs:integer&lt;/code&gt; to other constructs accepting the same type.&lt;/p&gt;
&lt;p&gt;For all these challenges, as always, technical solutions exist, but the question is if there aren’t more interesting things to focus on than on such corner cases. Queries like &lt;code&gt;count(1 to 1000000000000)&lt;/code&gt; are not supported by all implementations either although they may appear trivial to the ordinary user (by coincidence, it’s supported by BaseX, but I doubt it has been used a lot).&lt;/p&gt;
&lt;p&gt;In short, I would like us to revert the change in https://github.com/qt4cg/qtspecs/pull/1131/commits/bba6e4f1067e0ef0779688622a58320a5298d440 and stick with &lt;code&gt;xs:integer&lt;/code&gt;. If people feel bad about it, I would suggest discussing strict types in a much broader and general way.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1161 created</title>
   <pubDate>Thu, 18 Apr 2024 07:49:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1161</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1161</guid>
   <description>&lt;div&gt;&lt;p&gt;More changes to drop the requirement for document-uri() uniqueness&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue #898 was about dropping this constraint that document-uri()s had to be unique and PR #905 was adopted to resolve it. However, I see that the the XPath specification still contains the following note:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;This means that given a document node $N, the result of fn:doc(fn:document-uri($N)) is $N will always be true, unless fn:document-uri($N) is an empty sequence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don't believe that applies any longer, so it should be removed.&lt;/p&gt;
&lt;p&gt;It's possible that we need to finesse the description of &lt;em&gt;available documents&lt;/em&gt; as well. The current description was clearly written from the perspective that document URIs would be unique and there'd be a 1:1 mapping from URIs to documents.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 073 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 16 Apr 2024 17:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/04-16</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-04-16</guid>
</item><item>
   <title>Issue #1160 created</title>
   <pubDate>Tue, 16 Apr 2024 17:38:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1160</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1160</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:is-collation-available&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The new function &lt;strong&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-collation"&gt;fn:collation&lt;/a&gt;&lt;/strong&gt; raises an error [&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#ERRFOCH0002"&gt;err:FOCH0002&lt;/a&gt;]  in the case when the requested collation is not supported. Or, if the &lt;code&gt;fallback&lt;/code&gt; key's value is &lt;code&gt;true()&lt;/code&gt;, then the implementation chooses "the most similar supported collation" - which could be perceived as arbitrary and unexpected by the code developer.&lt;/p&gt;
&lt;p&gt;This might be OK if the language has try/catch capabilities and &lt;code&gt;fallback="no"&lt;/code&gt;  is specified, but may not be the best outcome in a pure XPath evaluation.&lt;/p&gt;
&lt;p&gt;A solution to this problem is to provide a function &lt;strong&gt;fn:is-collation-available&lt;/strong&gt; that accepts the same argument (&lt;code&gt;$options&lt;/code&gt; map) as &lt;code&gt;fn:collation&lt;/code&gt;, and also could accept a string argument whose value is the URI of the collation. This function produces a boolean, &lt;code&gt;true()&lt;/code&gt; meaning that the collation is available and can be constructed and used, &lt;code&gt;false()&lt;/code&gt; - otherwise.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Signature&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:is-collation-available( $descriptor  as xs:string | map(*)  ) as xs:boolean&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1140 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:31:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1140</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1140</guid>
   <description>&lt;div&gt;&lt;p&gt;Use $target instead of $search for indexing functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1141 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:31:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1141</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1141</guid>
   <description>&lt;div&gt;&lt;p&gt;1140 Replace 'search' with 'target' for indexing functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1147 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:28:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1147</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1147</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-072-01 Clarify schema type terminology&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1142 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:25:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1142</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1142</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: items-equal&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1150 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:25:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1150</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1150</guid>
   <description>&lt;div&gt;&lt;p&gt;1142 Drop restriction disallowing items-equal with unordered&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1138 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:22:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1138</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1138</guid>
   <description>&lt;div&gt;&lt;p&gt;format-number arguments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1151 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:22:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1151</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1151</guid>
   <description>&lt;div&gt;&lt;p&gt;1138 Merge format and format-name params of format-number&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1152 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:18:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1152</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1152</guid>
   <description>&lt;div&gt;&lt;p&gt;1146 Inline change log&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #298 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:12:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/298</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-298</guid>
   <description>&lt;div&gt;&lt;p&gt;Abstract supertype for map and array&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #397 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:12:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/397</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-397</guid>
   <description>&lt;div&gt;&lt;p&gt;Type names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #836 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:12:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/836</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-836</guid>
   <description>&lt;div&gt;&lt;p&gt;Add support for CSV 'dialect' features covered by the OKFN's Frictionless Data CSV spec in `fn:parse-csv` and related functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1115 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:12:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1115</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1115</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT - ability to call a function from xslt (not just xpath)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1154 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:10:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1154</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1154</guid>
   <description>&lt;div&gt;&lt;p&gt;[xsl:item-type] error in sample&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1156 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:10:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1156</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1156</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix error in XSLT example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1084 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:10:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1084</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1084</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect rendition of option defaults&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1149 closed</title>
   <pubDate>Tue, 16 Apr 2024 16:10:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1149</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1149</guid>
   <description>&lt;div&gt;&lt;p&gt;1084 Add fos:default-description to support prose descriptions of defaults&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1159 created</title>
   <pubDate>Mon, 15 Apr 2024 22:41:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1159</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1159</guid>
   <description>&lt;div&gt;&lt;p&gt;Filter operator for arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose to provide &lt;code&gt;?[...]&lt;/code&gt; as a filter operator for arrays.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $array := [(1,2,3), (4,5,6,7)]
return $array?[count(.) = 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;returns&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[(4,5,6,7)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I propose that the operator should work exactly like the familiar &lt;code&gt;[]&lt;/code&gt; for sequences in its handling of numeric and boolean predicate values. So for example $array?[2,1] in the above example returns &lt;code&gt;[(4,5,6,7), (1,2,3)]&lt;/code&gt;. The result is always an array (which may be a little surprising). This means that &lt;code&gt;$array?[3]&lt;/code&gt; has the same effect as &lt;code&gt;[$array?3]&lt;/code&gt; or &lt;code&gt;[$array(3)]&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1158 created</title>
   <pubDate>Mon, 15 Apr 2024 22:33:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1158</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1158</guid>
   <description>&lt;div&gt;&lt;p&gt;Simple mapping operator for arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose to provide &lt;code&gt;!!&lt;/code&gt; as a simple mapping operator for arrays.&lt;/p&gt;
&lt;p&gt;For example &lt;code&gt;[(1,2,3), (4.5.6)]!!count(.)&lt;/code&gt; returns &lt;code&gt;[3, 3]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression on the LHS must be an array.&lt;/p&gt;
&lt;p&gt;The expression on the RHS is evaluated once for every member of the array, with that member as the context value, with the context position set to the position of that member in the array, and with the context size set to the array size.&lt;/p&gt;
&lt;p&gt;The result is returned as an array which will always be the same size as the input array.&lt;/p&gt;
&lt;p&gt;Note in passing that this provides a solution (though perhaps a clumsy solution) to issue #755, in that the example expression&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(0 to 4) ~ count(.)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;can now be written as &lt;code&gt;[(0 to 4)]!!count(.)?*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1157 created</title>
   <pubDate>Mon, 15 Apr 2024 17:23:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1157</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1157</guid>
   <description>&lt;div&gt;&lt;p&gt;1135 Correction to definition of focus functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1135&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1156 created</title>
   <pubDate>Mon, 15 Apr 2024 17:06:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1156</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1156</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix error in XSLT example&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1154&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 073 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 15 Apr 2024 12:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/04-16</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-04-16</guid>
</item><item>
   <title>Issue #1155 created</title>
   <pubDate>Mon, 15 Apr 2024 12:05:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1155</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1155</guid>
   <description>&lt;div&gt;&lt;p&gt;Glossary formatting&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The format of the glossary for the data model spec differs needlessly from the other specifications. (Note, linking from the glossary entry to the place where the term is defined seems useful.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1154 created</title>
   <pubDate>Sun, 14 Apr 2024 19:41:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1154</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1154</guid>
   <description>&lt;div&gt;&lt;p&gt;[xsl:item-type] error in sample&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Here : https://qt4cg.org/specifications/xslt-40/Overview-diff.html#named-item-types&lt;/p&gt;
&lt;p&gt;First sample is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:item-type name="cx:complex" as="record(r as xs:double, i as xs:double)"/&amp;gt;

&amp;lt;xsl:variable name="i" as="cx:complex" select="cx:number(0, 1)"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;xsl:variable/@select&lt;/code&gt; should probably be &lt;code&gt;cx:complex(0, 1)&lt;/code&gt; instead of &lt;code&gt;cx:number&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1153 created</title>
   <pubDate>Sun, 14 Apr 2024 15:05:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1153</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1153</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: debugging template rule selection&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The biggest headache when debugging XSLT stylesheets is working out which template rules have been invoked in response to an &lt;code&gt;xsl:apply-templates&lt;/code&gt; instruction (I'm hitting this frustration right now with the qtspecs build stylesheets...). The &lt;code&gt;xsl:message&lt;/code&gt; instruction is unhelpful here, because if the "wrong" template rule is firing, you don't know where to add the message. And the only other standardised debugging aids are &lt;code&gt;fn:trace()&lt;/code&gt; and &lt;code&gt;xsl:assert&lt;/code&gt;, which don't help either.&lt;/p&gt;
&lt;p&gt;I propose an attribute on &lt;code&gt;xsl:apply-templates&lt;/code&gt;, &lt;code&gt;xsl:apply-imports&lt;/code&gt;, and &lt;code&gt;xsl:next-match&lt;/code&gt;: trace=yes|no. If enabled, execution of the instruction causes a message to be output (as if by xsl:message) identifying the rule that is invoked, in an implementation-defined way. In the case that a built-in template rule is invoked, the message should indicate this, and any implicit apply-templates performed by the built-in rule should be evaluated as if it specified trace="yes". It is "recommended" that the message output should identify the stylesheet module, line number, match pattern, and mode, if the information is available, and should also include a representation of the item that is being processed by the instruction, for example the node kind and name.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1152 created</title>
   <pubDate>Sat, 13 Apr 2024 07:35:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1152</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1152</guid>
   <description>&lt;div&gt;&lt;p&gt;1146 Inline change log&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a first cut at changes to introduce an inline change log - changes shown at the start of each affected section, with a flag in the TOC to indicate which sections have changed.&lt;/p&gt;
&lt;p&gt;It is currently applied, for demonstration purposes, to changes made in the serialization spec.&lt;/p&gt;
&lt;p&gt;More specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added the &lt;code&gt;changes&lt;/code&gt; and &lt;code&gt;change&lt;/code&gt; elements to the DTD; &lt;code&gt;changes&lt;/code&gt; is an optional element that follows &lt;code&gt;head&lt;/code&gt; within any section&lt;/li&gt;
&lt;li&gt;Changed the XSLT stylesheets and CSS to render the &lt;code&gt;changes&lt;/code&gt; element, and to add a flag to the TOC entry if a &lt;code&gt;changes&lt;/code&gt; element is present&lt;/li&gt;
&lt;li&gt;Added specimen &lt;code&gt;changes&lt;/code&gt; elements to the seriallization spec&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's a lot more to be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate an aggregated list of changes in an appendix&lt;/li&gt;
&lt;li&gt;Improve the CSS rendition&lt;/li&gt;
&lt;li&gt;Toggle change markings on and off; browse forward and backward through changed sections&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;changes&lt;/code&gt; data to the other specs&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1151 created</title>
   <pubDate>Fri, 12 Apr 2024 18:14:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1151</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1151</guid>
   <description>&lt;div&gt;&lt;p&gt;1138 Merge format and format-name params of format-number&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;close #1138&lt;/p&gt;
&lt;p&gt;Note, the proposal could do with further editorial work to use standard &lt;code&gt;options&lt;/code&gt; markup to define the options available.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1150 created</title>
   <pubDate>Fri, 12 Apr 2024 17:51:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1150</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1150</guid>
   <description>&lt;div&gt;&lt;p&gt;1142 Drop restriction disallowing items-equal with unordered&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Allows the use of an items-equal callback even when comparisons are unordered, despite the fact that this may have atrocious performance.&lt;/p&gt;
&lt;p&gt;close #1142&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1149 created</title>
   <pubDate>Fri, 12 Apr 2024 14:53:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1149</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1149</guid>
   <description>&lt;div&gt;&lt;p&gt;1084 Add fos:default-description to support prose descriptions of defaults&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #1084&lt;/p&gt;
&lt;p&gt;This won't render correctly in the PR, but hopefully the diff is clear enough to decide if this is the approach we want to take.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1148 created</title>
   <pubDate>Fri, 12 Apr 2024 14:45:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1148</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1148</guid>
   <description>&lt;div&gt;&lt;p&gt;1143 Coercion rules: handle choice types before atomization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1143&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1147 created</title>
   <pubDate>Fri, 12 Apr 2024 14:12:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1147</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1147</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-072-01 Clarify schema type terminology&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Responding to an action from the review of PR #1132, this editorial PR attempts to improve the definitions and usage of terms such as "schema type", "atomic type", "pure union type", "generalized atomic type".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #796 closed</title>
   <pubDate>Fri, 12 Apr 2024 11:41:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/796</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-796</guid>
   <description>&lt;div&gt;&lt;p&gt;allow explicit type expressions in XPath variable bindings&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1131 closed</title>
   <pubDate>Fri, 12 Apr 2024 11:41:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1131</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1131</guid>
   <description>&lt;div&gt;&lt;p&gt;796,231 - Extend XPath for and let expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1146 created</title>
   <pubDate>Fri, 12 Apr 2024 08:57:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1146</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1146</guid>
   <description>&lt;div&gt;&lt;p&gt;Identifying 4.0 Changes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The list of changes in an appendix is (a) difficult to maintain (with a tendency to cause Git conflicts) and (b) remote from the places in the spec where the changes actually arise. At the same time, automated diff markup tends to give a lot of unwanted detail, highlighting changes that are purely editorial.&lt;/p&gt;
&lt;p&gt;I propose that we try out an alternative approach. Each section/subsection with significant changes should start with an info box listing the changes, headed "Changes in 4.0". This should be rendered with a distinct colour or border to make it recognisable, and it should be possible to toggle whether the changes are shown or hidden. Changes that represent an incompatibility should be specially marked, perhaps with a device such as a warning triangle. A Δ marker (or colour highlighting) could appear in the table of contents against any section that has a &lt;code&gt;changes&lt;/code&gt; entry.&lt;/p&gt;
&lt;p&gt;Internally, the changes should be identified with custom markup: I suggest an optional &lt;code&gt;&amp;lt;changes&amp;gt;&lt;/code&gt; element immediately after &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, with a sequence of &lt;code&gt;&amp;lt;change&amp;gt;&lt;/code&gt; children, each of which should contain administrative metadata (such as a link to the issue and/or PR) as well as user-readable text.&lt;/p&gt;
&lt;p&gt;For changes to F+O functions, corresponding elements should be added to the FOS catalog schema; this should replace (or generate) the current "History" section.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1145 closed</title>
   <pubDate>Fri, 12 Apr 2024 08:19:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1145</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1145</guid>
   <description>&lt;div&gt;&lt;p&gt;Array Decomposition&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1144 closed</title>
   <pubDate>Fri, 12 Apr 2024 08:18:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1144</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1144</guid>
   <description>&lt;div&gt;&lt;p&gt;Sequence Decomposition&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1145 created</title>
   <pubDate>Fri, 12 Apr 2024 07:54:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1145</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1145</guid>
   <description>&lt;div&gt;&lt;p&gt;Array Decomposition&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal allows arrays to be decomposed and assigned to separate variables in a single declaration within a for or let expression binding.&lt;/p&gt;
&lt;p&gt;Given an array such as &lt;code&gt;[1, 2, 3]&lt;/code&gt;, the values within that array cannot easily be extracted. With the current version of XPath and XQuery, they need to be assigned to a temporary variable first. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $result := get-camera-point()
let $x := $result?(1)
let $y := $result?(2)
let $z := $result?(3)
return "(" || $x || "," || $y || "," || $z || ")"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This proposal would allow this to be written more concisely as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let [$x, $y, $z] := get-camera-point()
return "(" || $x || "," || $y || "," || $z || ")"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are equivalent in this proposal, except that &lt;code&gt;$result&lt;/code&gt; is not a statically known variable binding in the array decomposition let clause.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The older syntax in &lt;a href="https://github.com/expath/xpath-ng/pull/8"&gt;XPath-NG&lt;/a&gt; was:&lt;/p&gt;
&lt;p&gt;let $[x, y, z] := get-camera-point()
return "(" || $x || "," || $y || "," || $z || ")"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For each variable declaration in the array decomposition at index &lt;code&gt;N&lt;/code&gt;, and &lt;code&gt;$expr&lt;/code&gt; being the result of the for/let expression, then &lt;code&gt;$expr?(N)&lt;/code&gt; is the value bound to the variable declaration as a new variable binding. If the value does not exist, an &lt;code&gt;err:FOAY0001&lt;/code&gt; (array index out of bounds) error will be raised.&lt;/p&gt;
&lt;p&gt;An array decomposition can be used in any for or let clause binding to decompose the items in an array. If the type of the for or let clause binding expression is not a sequence, an &lt;code&gt;err:XPTY0004&lt;/code&gt; error is raised.&lt;/p&gt;
&lt;h3&gt;Assigning the rest of an array&lt;/h3&gt;
&lt;p&gt;It can be useful to only extract part of an array (e.g. the heading of a table), and store the rest of the items in another variable. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $(heading as array(xs:string), rows as array(xs:string)...) :=
    load-csv("test.csv")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there are no items remaining in the array the result is an empty array.&lt;/p&gt;
&lt;h3&gt;Influences&lt;/h3&gt;
&lt;p&gt;Tuple decomposition is found in various languages such as Python, Scala, and C#. These languages also have support for tuple types.&lt;/p&gt;
&lt;p&gt;Python has support for specifying that a variable is assigned the remaining values in the tuple.&lt;/p&gt;
&lt;h2&gt;Use Cases&lt;/h2&gt;
&lt;p&gt;There are many cases where fixed size sequences may be used such as points, complex and rational numbers, sin/cos, and mul/div. This makes extracting data from these simpler, and may also be used to aid readability by assigning descriptive names to each of the items in the sequence.&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;Extracting values from an array:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare function sincos($angle as xs:double?) {
    [ math:sin($angle), math:cos($angle) ]
};

let $angle := math:pi()
let [$sin, $cos] := sincos($angle)
return $sin || "," || $cos
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1144 created</title>
   <pubDate>Fri, 12 Apr 2024 07:47:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1144</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1144</guid>
   <description>&lt;div&gt;&lt;p&gt;Sequence Decomposition&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal allows sequences to be decomposed and assigned to separate variables in a single declaration within a for or let expression binding.&lt;/p&gt;
&lt;p&gt;Given a sequence such as &lt;code&gt;(1, 2, 3)&lt;/code&gt;, the values within that sequence cannot easily be extracted. With the current version of XPath and XQuery, they need to be assigned to a temporary variable first. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $result := get-camera-point()
let $x := $result[1]
let $y := $result[2]
let $z := $result[3]
return "(" || $x || "," || $y || "," || $z || ")"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This proposal would allow this to be written more concisely as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let ($x, $y, $z) := get-camera-point()
return "(" || $x || "," || $y || "," || $z || ")"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are equivalent in this proposal, except that &lt;code&gt;$result&lt;/code&gt; is not a statically known variable binding in the sequence decomposition let clause.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The older syntax in &lt;a href="https://github.com/expath/xpath-ng/pull/8"&gt;XPath-NG&lt;/a&gt; was:&lt;/p&gt;
&lt;p&gt;let $(x, y, z) := get-camera-point()
return "(" || $x || "," || $y || "," || $z || ")"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For each variable declaration in the sequence decomposition at index &lt;code&gt;N&lt;/code&gt;, and &lt;code&gt;$expr&lt;/code&gt; being the result of the for/let expression, then &lt;code&gt;$expr[N]&lt;/code&gt; is the value bound to the variable declaration as a new variable binding. If the value does not exist, an empty sequence is bound to the variable.&lt;/p&gt;
&lt;p&gt;A sequence decomposition can be used in any for or let clause binding to decompose the items in a sequence. If the type of the for or let clause binding expression is not a sequence, an &lt;code&gt;err:XPTY0004&lt;/code&gt; error is raised.&lt;/p&gt;
&lt;h3&gt;Assigning the rest of a sequence&lt;/h3&gt;
&lt;p&gt;It can be useful to only extract part of a sequence or array (e.g. the heading of a table), and store the rest of the items in another variable. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $(heading, rows ...) := fn:parse-csv("test.csv")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there are no items remaining in the sequence the result is an empty sequence.&lt;/p&gt;
&lt;h3&gt;Influences&lt;/h3&gt;
&lt;p&gt;Tuple decomposition is found in various languages such as Python, Scala, and C#. These languages also have support for tuple types.&lt;/p&gt;
&lt;p&gt;Python has support for specifying that a variable is assigned the remaining values in the tuple.&lt;/p&gt;
&lt;h2&gt;Use Cases&lt;/h2&gt;
&lt;p&gt;There are many cases where fixed size sequences may be used such as points, complex and rational numbers, sin/cos, and mul/div. This makes extracting data from these simpler, and may also be used to aid readability by assigning descriptive names to each of the items in the sequence.&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;Extracting values from a sequence:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare function sincos($angle as xs:double?) {
    math:sin($angle), math:cos($angle)
};

let $angle := math:pi()
let ($sin, $cos) := sincos($angle)
return $sin || "," || $cos
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #983 closed</title>
   <pubDate>Fri, 12 Apr 2024 06:33:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/983</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-983</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:reduce (or fn:fold without initial value)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1143 created</title>
   <pubDate>Thu, 11 Apr 2024 21:52:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1143</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1143</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion Rules for Choice Item Types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The proposal that we accepted for choice item types (PR #1132) invokes atomization only if the choice type is a generalised atomic type, that is, if all alternatives in the choice are atomic.&lt;/p&gt;
&lt;p&gt;This makes it tricky to take advantage of choice types for extending existing functions in a backwards-compatible way. For example, we might want to change the second argument of fn:unparsed-text from &lt;code&gt;$encoding as xs:string&lt;/code&gt; to &lt;code&gt;$options as (xs:string | map(*))&lt;/code&gt;. But under the current rules, this means the supplied value of the $encoding argument will no longer be atomized.&lt;/p&gt;
&lt;p&gt;I propose to change this by effectively promoting rule 3 to appear before rule 2. Rule 2 is the atomization rule, and rule 3 is the new rule:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If R is a [choice item type] &lt;em&gt;that is not a [generalized atomic type]&lt;/em&gt;, then the following rules are applied with R set to each of the alternatives in the choice item type, in order, until an alternative is found that does not result in a type error; a type error is raised only if all alternatives fail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The phrase in italics is deleted.&lt;/p&gt;
&lt;p&gt;The effect is that if the required type is &lt;code&gt;(xs:string | map(*))&lt;/code&gt; then we first try converting the supplied argument as if the required type were &lt;code&gt;xs:string&lt;/code&gt; (including atomization), and if that fails we try converting it as if the required type were map(*).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #231 closed</title>
   <pubDate>Thu, 11 Apr 2024 21:35:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/231</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-231</guid>
   <description>&lt;div&gt;&lt;p&gt;for expression: "at" keyword&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1139 closed</title>
   <pubDate>Thu, 11 Apr 2024 21:34:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1139</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1139</guid>
   <description>&lt;div&gt;&lt;p&gt;let clause: function coercion&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #788 closed</title>
   <pubDate>Thu, 11 Apr 2024 21:31:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/788</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-788</guid>
   <description>&lt;div&gt;&lt;p&gt;New function fn:annotate()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1105 closed</title>
   <pubDate>Thu, 11 Apr 2024 21:20:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1105</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1105</guid>
   <description>&lt;div&gt;&lt;p&gt;Casting to numerical type from strings with underscores&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #67 closed</title>
   <pubDate>Thu, 11 Apr 2024 21:18:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/67</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-67</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow optional parameters and keyword arguments on map and sequence variadic functions.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #132 closed</title>
   <pubDate>Thu, 11 Apr 2024 21:17:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/132</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-132</guid>
   <description>&lt;div&gt;&lt;p&gt;Clarify if redirects should be followed&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #613 closed</title>
   <pubDate>Thu, 11 Apr 2024 21:16:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/613</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-613</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow "union" as synonym for "|" everywhere&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #666 closed</title>
   <pubDate>Thu, 11 Apr 2024 21:16:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/666</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-666</guid>
   <description>&lt;div&gt;&lt;p&gt;Polyfill function implementations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #713 closed</title>
   <pubDate>Thu, 11 Apr 2024 21:15:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/713</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-713</guid>
   <description>&lt;div&gt;&lt;p&gt;Annotations: Editorial notes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #834 closed</title>
   <pubDate>Thu, 11 Apr 2024 21:14:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/834</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-834</guid>
   <description>&lt;div&gt;&lt;p&gt;Add creation function for `csv-row-record` type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1142 created</title>
   <pubDate>Thu, 11 Apr 2024 11:51:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1142</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1142</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: items-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current spec says about &lt;code&gt;items-equal&lt;/code&gt; that…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If this option is present then the &lt;code&gt;ordered&lt;/code&gt; option MUST be &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;unordered-elements&lt;/code&gt; option MUST be an empty sequence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I doesn’t say what is going to happen if &lt;code&gt;ordered&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; or if &lt;code&gt;unordered-elements&lt;/code&gt; is non-empty.&lt;/p&gt;
&lt;p&gt;My preference would be to allow all combinations; we could then do things like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;deep-equal(
  (1, 2, 3),
  (3.1, 2.1, 1.1),
  { 'ordered': false(), 'items-equal': fn($a, $b) { xs:integer($a) = xs:integer($b) } }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It may imply O(n²), but it’s very simple to formulate other XPath expressions with the same complexity, such as &lt;code&gt;$huge1[. = $huge2]&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1141 created</title>
   <pubDate>Wed, 10 Apr 2024 09:07:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1141</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1141</guid>
   <description>&lt;div&gt;&lt;p&gt;1140 Replace 'search' with 'target' for indexing functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #1140&lt;/p&gt;
&lt;p&gt;Having created the issue, per my outstanding action, I thought I'd take a quick look to see how extensive the change would be. AFAICT (though I confess to not looking exceedingly carefully), only two functions are effected. Here, for your consideration, is a PR that resolves the issue.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1140 created</title>
   <pubDate>Wed, 10 Apr 2024 08:59:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1140</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1140</guid>
   <description>&lt;div&gt;&lt;p&gt;Use $target instead of $search for indexing functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Back in February, when we discussed &lt;code&gt;array:index-of&lt;/code&gt;, DN observed that the argument name &lt;code&gt;$search&lt;/code&gt; could be interpreted as performing some sort of action. The alternative &lt;code&gt;$target&lt;/code&gt; was proposed instead as being more "noun like".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 072 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 9 Apr 2024 17:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/04-09</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-04-09</guid>
</item><item>
   <title>Issue #1093 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:32:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1093</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1093</guid>
   <description>&lt;div&gt;&lt;p&gt;1091 Add fn:collation function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1091 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:32:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1091</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1091</guid>
   <description>&lt;div&gt;&lt;p&gt;Convenience function to construct a collation URI&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #99 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:29:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/99</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-99</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions that determine equality of two sequences or equality of two arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1063 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:29:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1063</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1063</guid>
   <description>&lt;div&gt;&lt;p&gt;deep-equal() - option to compare functions liberally&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1120 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:29:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1120</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1120</guid>
   <description>&lt;div&gt;&lt;p&gt;99v2 deep equal with callback&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #122 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:26:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/122</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-122</guid>
   <description>&lt;div&gt;&lt;p&gt;Support general union sequence types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1132 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:26:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1132</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1132</guid>
   <description>&lt;div&gt;&lt;p&gt;122 Choice item types (generalizing local union types)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1112 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:23:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1112</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1112</guid>
   <description>&lt;div&gt;&lt;p&gt;1110-partial New error codes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1118 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:20:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1118</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1118</guid>
   <description>&lt;div&gt;&lt;p&gt;Use new map{} syntax in adaptive output method&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1123 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:20:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1123</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1123</guid>
   <description>&lt;div&gt;&lt;p&gt;1118 Drop the "map" keyword in adaptive serialization output&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1128 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:17:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1128</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1128</guid>
   <description>&lt;div&gt;&lt;p&gt;1020 Further notes on the consequences of function coercion&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1133 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:14:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1133</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1133</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:filter why predicate as map(*)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1134 closed</title>
   <pubDate>Tue, 9 Apr 2024 16:14:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1134</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1134</guid>
   <description>&lt;div&gt;&lt;p&gt;1133 Correct map:filter callback signature&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1139 created</title>
   <pubDate>Tue, 9 Apr 2024 11:00:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1139</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1139</guid>
   <description>&lt;div&gt;&lt;p&gt;let clause: function coercion&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@michaelhkay I should be careful (as I regularly miss changes and additions in the 4.0 drafts), but it seems that the application of the function coercion rules for typed &lt;code&gt;let&lt;/code&gt; clauses (https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-binding-rules) is not mentioned in the list of substantive changes at the end of the document. Would it be useful to add it, or does this change fall into a different category?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 072 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 8 Apr 2024 11:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/04-09</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-04-09</guid>
</item><item>
   <title>Issue #1138 created</title>
   <pubDate>Sun, 7 Apr 2024 23:01:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1138</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1138</guid>
   <description>&lt;div&gt;&lt;p&gt;format-number arguments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Given the availability of choice item types, I propose that we merge the &lt;code&gt;format&lt;/code&gt; and &lt;code&gt;format-name&lt;/code&gt; parameters of &lt;code&gt;fn:format-number&lt;/code&gt; into a single parameter of type &lt;code&gt;(xs:string | xs:QName | map(*))&lt;/code&gt;. This seems a better design when parameters are mutually exclusive and perform a related role.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1137 created</title>
   <pubDate>Sun, 7 Apr 2024 15:27:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1137</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1137</guid>
   <description>&lt;div&gt;&lt;p&gt;161 Variadic functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #161&lt;/p&gt;
&lt;p&gt;This proposal attempts to do the minimum necessary to allow the variable-arity nature of the fn:concat function to be reproduced for other functions including user-defined functions. The idea is that fn:concat should no longer be treated as a special case.&lt;/p&gt;
&lt;p&gt;The proposal is deliberately less ambitious than some of the ideas discussed in the referenced issue. It's generally easier to get something into the language if we take smaller steps.&lt;/p&gt;
&lt;p&gt;For an overview see section 4.5.3 of the XQuery spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1136 created</title>
   <pubDate>Sun, 7 Apr 2024 11:34:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1136</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1136</guid>
   <description>&lt;div&gt;&lt;p&gt;Defining names for parameters on typed function tests&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When defining the type of a higher-order function parameter, you cannot currently specify the names of the parameters of that higher-order function.&lt;/p&gt;
&lt;p&gt;Allowing this can be useful for variou reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;documenting the parameter names in the function signature -- this makes it clear looking at the function in an IDE, etc. what the parameters are;&lt;/li&gt;
&lt;li&gt;making the specs clearer by referring to the parameters by name;&lt;/li&gt;
&lt;li&gt;allowing a processor to provide better error messages by referring to the parameters names, e.g. when there is a type conversion error;&lt;/li&gt;
&lt;li&gt;allowing a user to reference the parameter by name if we enable this to resolve named keyword argments (which is currently being discussed in #1114).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, you could declare e.g. &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-index-where"&gt;index-where&lt;/a&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function fn:index-where(
  $input as item()*,
  $predicate as function(
    $item as item(),
    $position as xs:integer
  ) as xs:boolean
) as xs:integer* {
  (: ... :)
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1135 created</title>
   <pubDate>Sat, 6 Apr 2024 12:08:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1135</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1135</guid>
   <description>&lt;div&gt;&lt;p&gt;Definition of focus functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;§5.4.2.6 states&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The expression function { EXPR } (or fn { EXPR }) is a syntactic shorthand for the expression function($Z as item()&lt;em&gt;) as item()&lt;/em&gt; { $Z ! (EXPR) }, where $Z is a variable name that is otherwise unused. Note that the function body (EXPR) is evaluated with a [fixed focus]: the context position and context size will always be 1 (one).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is no longer true now since generalization of the context item to context value. EXPR is evaluated once with the entire sequence $Z as the context value, it is not evaluated once for each item in $Z.&lt;/p&gt;
&lt;p&gt;We have no direct way of expressing this in the absence of a resolution to issue #755.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1134 created</title>
   <pubDate>Fri, 5 Apr 2024 15:45:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1134</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1134</guid>
   <description>&lt;div&gt;&lt;p&gt;1133 Correct map:filter callback signature&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1133&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1133 created</title>
   <pubDate>Fri, 5 Apr 2024 15:23:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1133</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1133</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:filter why predicate as map(*)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;fn:filter&lt;/code&gt; is defined like this :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map:filter(
  $map as map(*),	
  $predicate as function(xs:anyAtomicType, item()*) as map(*)	
) as map(*)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why the predicate function is not returning a &lt;code&gt;xs:boolean&lt;/code&gt; ?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1132 created</title>
   <pubDate>Fri, 5 Apr 2024 11:26:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1132</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1132</guid>
   <description>&lt;div&gt;&lt;p&gt;122 Choice item types (generalizing local union types)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #122.&lt;/p&gt;
&lt;p&gt;Allows the new item type syntax &lt;code&gt;(A | B)&lt;/code&gt;, replacing &lt;code&gt;union(A, B)&lt;/code&gt;; the alternatives are no longer restricted to be atomic types. The choice item type is a generalized atomic type if and only if all the alternatives are generalized atomic types.&lt;/p&gt;
&lt;p&gt;Note that #122 also proposed unions of sequence types. While that is also viable, I found that unions of item types handled pretty well all practical use cases, and it seems excessive to offer both. Unions of item types proved (a) more useful (b) easier to combine with the existing feature of local union types, and (c) easier to handle in the coercion rules. Providing both is also tricky to handle in the grammar.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1044 closed</title>
   <pubDate>Thu, 4 Apr 2024 08:51:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1044</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1044</guid>
   <description>&lt;div&gt;&lt;p&gt;CSV row delimiter - allowed values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1104 closed</title>
   <pubDate>Thu, 4 Apr 2024 08:49:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1104</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1104</guid>
   <description>&lt;div&gt;&lt;p&gt;TypeTest expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1131 created</title>
   <pubDate>Sun, 31 Mar 2024 22:29:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1131</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1131</guid>
   <description>&lt;div&gt;&lt;p&gt;796,231 - Extend XPath for and let expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #796
Fix #231&lt;/p&gt;
&lt;p&gt;Extends "for" and "let" expressions in XPath to allow a larger subset of XQuery FLWOR expression syntax. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow positional variables (&lt;code&gt;at $pos&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Allow type declarations (&lt;code&gt;as type&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Allow let/for clauses to be mixed without an intervening &lt;code&gt;return&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1122 closed</title>
   <pubDate>Thu, 28 Mar 2024 14:10:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1122</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1122</guid>
   <description>&lt;div&gt;&lt;p&gt;Rendering xspecref&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1130 closed</title>
   <pubDate>Thu, 28 Mar 2024 14:10:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1130</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1130</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix xspecref to production&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1130 created</title>
   <pubDate>Thu, 28 Mar 2024 14:10:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1130</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1130</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix xspecref to production&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1122&lt;/p&gt;
&lt;p&gt;This is (apparently) the first use of an &lt;code&gt;xspecref&lt;/code&gt; to a production.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1129 closed</title>
   <pubDate>Thu, 28 Mar 2024 13:22:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1129</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1129</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix Norm's affiliation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1129 created</title>
   <pubDate>Thu, 28 Mar 2024 13:22:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1129</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1129</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix Norm's affiliation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Someone preparing a QT4 status talk for a conference observed that my affiliation on the data model spec was out-of-date.&lt;/p&gt;
&lt;p&gt;I'm just going to merge this one without any fanfare.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1128 created</title>
   <pubDate>Thu, 28 Mar 2024 11:07:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1128</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1128</guid>
   <description>&lt;div&gt;&lt;p&gt;1020 Further notes on the consequences of function coercion&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds further notes an examples explaining the consequences of function coercion, especially when applied to maps and arrays. The new notes make it clear that test case MapTest-058 is incorrect; a map, once coerced to a function, cannot be used as a map.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1127 created</title>
   <pubDate>Thu, 28 Mar 2024 00:59:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1127</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1127</guid>
   <description>&lt;div&gt;&lt;p&gt;Binary resources&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have some functions that accept binary input (parse-html, parse-csv) and others that don't (parse-xml, parse-json). There seems to be no obvious justification for the inconsistency.&lt;/p&gt;
&lt;p&gt;Related to this:&lt;/p&gt;
&lt;p&gt;(a) we have no functions to convert (encode/decode) between binary and string given an encoding&lt;/p&gt;
&lt;p&gt;(b) we have no function to read a binary resource from a URI&lt;/p&gt;
&lt;p&gt;Both of these are available in the EXPath bin library but should perhaps be promoted to the main spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1039 closed</title>
   <pubDate>Thu, 28 Mar 2024 00:24:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1039</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1039</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow dynamic collations in XQuery "order by" and "group by"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1092 closed</title>
   <pubDate>Thu, 28 Mar 2024 00:24:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1092</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1092</guid>
   <description>&lt;div&gt;&lt;p&gt;1039 Add notes referring to fn:collation-key&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1100 closed</title>
   <pubDate>Wed, 27 Mar 2024 23:59:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1100</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1100</guid>
   <description>&lt;div&gt;&lt;p&gt;99 fn:equal() function to compare sequences and arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1113 closed</title>
   <pubDate>Wed, 27 Mar 2024 22:18:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1113</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1113</guid>
   <description>&lt;div&gt;&lt;p&gt;Misleading rendering BiDi text in parse-integer example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1126 closed</title>
   <pubDate>Wed, 27 Mar 2024 14:34:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1126</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1126</guid>
   <description>&lt;div&gt;&lt;p&gt;1060 Minor fixes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1126 created</title>
   <pubDate>Wed, 27 Mar 2024 14:34:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1126</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1126</guid>
   <description>&lt;div&gt;&lt;p&gt;1060 Minor fixes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Whitespace, variable names, tests&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1121 closed</title>
   <pubDate>Wed, 27 Mar 2024 14:13:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1121</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1121</guid>
   <description>&lt;div&gt;&lt;p&gt;1060 Formatting&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1125 created</title>
   <pubDate>Wed, 27 Mar 2024 12:26:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1125</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1125</guid>
   <description>&lt;div&gt;&lt;p&gt;1094 Enhanced lookup expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1094&lt;/p&gt;
&lt;p&gt;Lookup expressions (both deep and shallow) are enhanced in two ways:&lt;/p&gt;
&lt;p&gt;(a) the syntax is extended to provide options that avoid flattening the result. For example &lt;code&gt;$V?pairs::K&lt;/code&gt; delivers the result as a sequence of key-value pairs.&lt;/p&gt;
&lt;p&gt;(b) a new KeySpecifier format is provided to filter the results by type. For example &lt;code&gt;$V??type(record(first, last))&lt;/code&gt; selects all items in the recursive content that are of type &lt;code&gt;record(first, last)&lt;/code&gt;. This replaces the previous syntax &lt;code&gt;$V??*::record(first, last)&lt;/code&gt; which caused ambiguities with occurrence indicators.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #859 closed</title>
   <pubDate>Wed, 27 Mar 2024 09:21:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/859</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-859</guid>
   <description>&lt;div&gt;&lt;p&gt;Syntax problem with type-qualified wildcards in lookup expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1106 closed</title>
   <pubDate>Wed, 27 Mar 2024 09:21:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1106</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1106</guid>
   <description>&lt;div&gt;&lt;p&gt;859 lookup syntax problems&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1124 created</title>
   <pubDate>Wed, 27 Mar 2024 08:46:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1124</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1124</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting XPath/XQuery: Preferences, Conventions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In #1060, the formatting of code examples in the spec was unified. This issue is about discussing the formatting rules and (ideally) to define conventions for newly added code. If we don’t manage to define rules, the existing specs should provide enough examples for all syntactical constructs to be inspired by.&lt;/p&gt;
&lt;p&gt;To start with, one suggestion in &lt;a href="https://qt4cg.org/meeting/minutes/2024/03-26.html"&gt;yesterday’s meeting&lt;/a&gt; was to choose a more compact presentation. Empty maps, empty arrays, and functions with an empty body are currently formatted as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map { }, { },
array { }, [ ],
function { }, fn { }, fn($x) { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could remove the inner whitespace:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map {}, {},
array {}, [],
function {}, fn {}, fn($x) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1123 created</title>
   <pubDate>Wed, 27 Mar 2024 08:36:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1123</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1123</guid>
   <description>&lt;div&gt;&lt;p&gt;1118 Drop the "map" keyword in adaptive serialization output&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #1118&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1122 created</title>
   <pubDate>Wed, 27 Mar 2024 08:33:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1122</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1122</guid>
   <description>&lt;div&gt;&lt;p&gt;Rendering xspecref&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;xspecref markup in the serialization spec is being rendered incorrectly. See for example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xspecref spec="XP40" ref="doc-xpath40-MapConstructor"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;in section 10, which renders as&lt;/p&gt;
&lt;p&gt;A [map item] is serialized using the syntax of a [Section ] ^XP40 without ...&lt;/p&gt;
&lt;p&gt;where the link to the referenced section works correctly, but the section title is not displayed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1121 created</title>
   <pubDate>Wed, 27 Mar 2024 08:24:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1121</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1121</guid>
   <description>&lt;div&gt;&lt;p&gt;1060 Formatting&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Minor editorial fixes (examples, typos). I’ll merge this after a while if no one objects.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1120 created</title>
   <pubDate>Tue, 26 Mar 2024 23:44:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1120</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1120</guid>
   <description>&lt;div&gt;&lt;p&gt;99v2 deep equal with callback&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A second attempt to address issue #99&lt;/p&gt;
&lt;p&gt;Replaces PR #1100&lt;/p&gt;
&lt;p&gt;Fix #99
Fix #1063&lt;/p&gt;
&lt;p&gt;In response to comments during the review of #1100, this PR abandons the proposed fn:equal() function and instead adds a callback option to fn:deep-equal. This can potentially be used to compare any pair of items (including maps and arrays) if desired.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1119 created</title>
   <pubDate>Tue, 26 Mar 2024 22:01:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1119</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1119</guid>
   <description>&lt;div&gt;&lt;p&gt;Declare namespace bindings in XPath&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have dropped the proposed "with" expression, which was in the spec but never reviewed by the WG.&lt;/p&gt;
&lt;p&gt;We need to reconsider the requirement: do we need some kind of construct to declare namespace prefixes, and perhaps other parts of the static context, in XPath?&lt;/p&gt;
&lt;p&gt;One thought here is that when XPath expressions are issued from a host language such as Javascript or Python, the typical pattern is to have lots of small independent XPath expressions within a program. It doesn't make sense for each such expression to have its own boilerplate to establish the context, which will usually be the same for each expression. Rather it makes sense for the XPath invocation API to supply a reference to a context object which is set up once and reused. However, this doesn't mean that there's no room for XPath syntax to establish the context. For example, one might envisage a program doing&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;XPath engine = new XPath();
engine.setStaticContext("declare namespace abc='http://abc.uri'; pqr = 'http://pqr.uri");
engine.evaluate("//x/@y");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so the syntax for creating the static context would be decoupled from the expression syntax.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #711 closed</title>
   <pubDate>Tue, 26 Mar 2024 21:52:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/711</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-711</guid>
   <description>&lt;div&gt;&lt;p&gt;Using annotations for navigation of JSON trees&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1070 closed</title>
   <pubDate>Tue, 26 Mar 2024 21:31:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1070</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1070</guid>
   <description>&lt;div&gt;&lt;p&gt;Concise syntax for map construction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1071 closed</title>
   <pubDate>Tue, 26 Mar 2024 21:31:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1071</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1071</guid>
   <description>&lt;div&gt;&lt;p&gt;1070 Bare Brace map constructor syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1118 created</title>
   <pubDate>Tue, 26 Mar 2024 21:30:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1118</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1118</guid>
   <description>&lt;div&gt;&lt;p&gt;Use new map{} syntax in adaptive output method&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Should the adaptive output method be changed to use the new bare-brace syntax when serializing maps, dropping the &lt;code&gt;map&lt;/code&gt; keyword?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1019 closed</title>
   <pubDate>Tue, 26 Mar 2024 17:26:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1019</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1019</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Unknown option parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1059 closed</title>
   <pubDate>Tue, 26 Mar 2024 17:26:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1059</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1059</guid>
   <description>&lt;div&gt;&lt;p&gt;1019 XQFO: Unknown option parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1077 closed</title>
   <pubDate>Tue, 26 Mar 2024 17:23:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1077</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1077</guid>
   <description>&lt;div&gt;&lt;p&gt;Correct the status of new language features&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1074 closed</title>
   <pubDate>Tue, 26 Mar 2024 17:20:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1074</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1074</guid>
   <description>&lt;div&gt;&lt;p&gt;Confirm status of provisional functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1097 closed</title>
   <pubDate>Tue, 26 Mar 2024 17:17:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1097</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1097</guid>
   <description>&lt;div&gt;&lt;p&gt;566-partial Fix colon issue in URI parsing&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1107 closed</title>
   <pubDate>Tue, 26 Mar 2024 17:14:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1107</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1107</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar discrepancy on fn:pin() examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1060 closed</title>
   <pubDate>Tue, 26 Mar 2024 17:14:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1060</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1060</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting XPath/XQuery&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1078 closed</title>
   <pubDate>Tue, 26 Mar 2024 17:14:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1078</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1078</guid>
   <description>&lt;div&gt;&lt;p&gt;1060 Formatting XPath/XQuery&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1076 closed</title>
   <pubDate>Tue, 26 Mar 2024 17:10:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1076</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1076</guid>
   <description>&lt;div&gt;&lt;p&gt;1075 Drop 'with' expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1075 closed</title>
   <pubDate>Tue, 26 Mar 2024 17:10:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1075</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1075</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop "with" expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1109 closed</title>
   <pubDate>Tue, 26 Mar 2024 02:17:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1109</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1109</guid>
   <description>&lt;div&gt;&lt;p&gt;Discrepancies in fn:hash() published examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1117 created</title>
   <pubDate>Tue, 26 Mar 2024 00:04:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1117</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1117</guid>
   <description>&lt;div&gt;&lt;p&gt;1116 Add options param to unparsed-text&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Reverts the change to unparsed-text and unparsed-text-lines so they no longer normalise line endings by default.&lt;/p&gt;
&lt;p&gt;Instead an options parameter is added to select this as a non-default behaviour.&lt;/p&gt;
&lt;p&gt;At the same time, we add an option to control whether the function is deterministic (that is, returns the same content if called repeatedly with the same URI). In 3.1 the spec stated that implementations might provide an option to do this, but did not provide an interoperable way of setting this option. For compatibility, the default is still to be deterministic.&lt;/p&gt;
&lt;p&gt;Fix #1116&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1116 created</title>
   <pubDate>Mon, 25 Mar 2024 15:43:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1116</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1116</guid>
   <description>&lt;div&gt;&lt;p&gt;unparsed-text() end-of-line normalization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm uncomfortable with the backwards-incompatible change we have made to &lt;code&gt;unparsed-text()&lt;/code&gt; which now normalizes line endings.&lt;/p&gt;
&lt;p&gt;I think it's unlikely that there are many users who care about the difference between LF and CRLF line endings and want to preserve that difference; but I think it's very likely that there are users who have written application code that expects the line ending to be CRLF, where the application will break if the line ending changes.&lt;/p&gt;
&lt;p&gt;I would be more comfortable with the change if there were an option setting to revert to the 3.1 behaviour. But my preference would be to add the option and keep the default compatible with 3.1.&lt;/p&gt;
&lt;p&gt;Also, for users who want to treat the file as a sequence of lines, we already introduced &lt;code&gt;unparsed-text-lines()&lt;/code&gt; so they don't have to worry about different representations of line endings.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 071 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 25 Mar 2024 14:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/03-26</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-03-26</guid>
</item><item>
   <title>Issue #1115 created</title>
   <pubDate>Mon, 25 Mar 2024 14:11:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1115</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1115</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT - ability to call a function from xslt (not just xpath)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I don't think this is possible in 3.0 and I don't think its yet suggested (whats the easiest way to find out)....if it has then close.&lt;/p&gt;
&lt;p&gt;I wonder in passing many times why I ever use&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:call-template.../&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when functions exist?
I never use the data context inside a named template...feels dangerous.&lt;/p&gt;
&lt;p&gt;So the only reason I do it, is because I can embed literal XML elements e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:call-template name='foo'&amp;gt;
   &amp;lt;xsl:with-param name='barElement' as='element(barElement)'&amp;gt;
     &amp;lt;barElement/&amp;gt;
   &amp;lt;xsl:with-param/&amp;gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but if I could do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:call-function name='foo'&amp;gt;
   &amp;lt;xsl:with-param name='barElement' as='element(barElement)'&amp;gt;
     &amp;lt;barElement/&amp;gt;
   &amp;lt;xsl:with-param/&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then i would use functions always in preference to named templates.&lt;/p&gt;
&lt;p&gt;motivation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;language simplification (though you'd have to keep named templates for legacy)&lt;/li&gt;
&lt;li&gt;you explicitly remove the data context (which I think is error prone in practice).&lt;/li&gt;
&lt;li&gt;if people used functions in preference to named templates then you would be able to use more of your code directly from x-path expressions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1114 created</title>
   <pubDate>Mon, 25 Mar 2024 13:32:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1114</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1114</guid>
   <description>&lt;div&gt;&lt;p&gt;Partial function application: Keywords and placeholders&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The test suite contains test cases – &lt;a href="https://github.com/qt4cg/qt4tests/blob/e633f879db71b4bac91ac304fa13fd28619d0e1b/prod/FunctionCall.xml#L1178-L1240"&gt;FunctionCall-414 … FunctionCall-417&lt;/a&gt; – for partially applied functions with keywords and placeholders:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;test-case name="FunctionCall-414" covers-40="keywords"&amp;gt;
  &amp;lt;description&amp;gt;Use of keyword arguments with placeholders on user-defined function&amp;lt;/description&amp;gt;
  &amp;lt;created by="Michael Kay" on="2023-03-13"/&amp;gt;
  &amp;lt;modified by="Michael Kay" on="2023-12-13" change="do what the description says"/&amp;gt;
  &amp;lt;dependency type="spec" value="XQ40+"/&amp;gt;
  &amp;lt;test&amp;gt;&amp;lt;![CDATA[
     declare function local:diff ($s as xs:integer, $t as xs:integer) as xs:integer { 
        $s - $t
     };  
     local:diff(s := 12, t := ?)(8)
  ]]&amp;gt;&amp;lt;/test&amp;gt;
  &amp;lt;result&amp;gt;
    &amp;lt;assert-eq&amp;gt;4&amp;lt;/assert-eq&amp;gt;
  &amp;lt;/result&amp;gt;
&amp;lt;/test-case&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I didn’t find information on this feature combination in the spec; is it already covered? If yes, is it also possible to partially apply function items with keywords?…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function local:f($s, $t) { $s - $t };
local:f#2(s := 12, t := ?)(8),
local:f(?, ?)(s := 12, t := ?)(8)
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If 2x yes, I can try to add some more test cases (for example, I assume that &lt;code&gt;$f(t := 12, ?)&lt;/code&gt; is illegal, as arguments without keywords probably need to be placed first).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1113 created</title>
   <pubDate>Mon, 25 Mar 2024 10:40:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1113</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1113</guid>
   <description>&lt;div&gt;&lt;p&gt;Misleading rendering BiDi text in parse-integer example&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In fuction index one example of fn:parse-integer() is using parameters containing arabic letters. This leads to wrong display of parameters as 1st and 2nd parameter look like switched because browser renders both of them from left to right. It is this example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;fos:test&amp;gt;
               &amp;lt;fos:expression&amp;gt;&amp;lt;eg&amp;gt;translate('٢٠٢٣', '٠١٢٣٤٥٦٧٨٩', '0123456789')
=&amp;gt; parse-integer()&amp;lt;/eg&amp;gt;&amp;lt;/fos:expression&amp;gt;
               &amp;lt;fos:result&amp;gt;2023&amp;lt;/fos:result&amp;gt;
            &amp;lt;/fos:test&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks confusing. I don't know what will be the best fix. Maybe storing '٠١٢٣٤٥٦٧٨٩' into variable would help and prevent the issue.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1112 created</title>
   <pubDate>Mon, 25 Mar 2024 08:15:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1112</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1112</guid>
   <description>&lt;div&gt;&lt;p&gt;1110-partial New error codes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1110.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-hash"&gt;fn:hash&lt;/a&gt;: I added &lt;code&gt;FOHA0001&lt;/code&gt; as error code.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-op"&gt;fn:op&lt;/a&gt;: I used &lt;code&gt;XPTY0004&lt;/code&gt; as error code, as the allowed operators could also be defined as string enumeration.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40-diff.html#id-map-test"&gt;XQuery, Map Test&lt;/a&gt;: Not included in this PR.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1111 created</title>
   <pubDate>Sun, 24 Mar 2024 08:40:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1111</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1111</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:pipeline&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XSLT 3.0 it is not possible to write a multi-phase streaming transformation, where two are more phases each operate in streaming mode and the result of one phase is piped into the next. Such transformations can only be written as multiple stylesheets, coordinated by some calling application.&lt;/p&gt;
&lt;p&gt;A non-streamed multiphase transformation typically uses variables for the intermediate results:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:variable name="temp1"&amp;gt;
   &amp;lt;xsl:apply-templates mode="phase1"/&amp;gt;
&amp;lt;/xsl:variable&amp;gt;
&amp;lt;xsl:variable name="temp2"&amp;gt;
   &amp;lt;xsl:apply-templates select="$temp1" mode="phase2"/&amp;gt;
&amp;lt;/xsl:variable&amp;gt;
&amp;lt;xsl:apply-templates select="$temp2"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This cannot be streamed because variables cannot hold streamed nodes.&lt;/p&gt;
&lt;p&gt;The idea is to allow this to be written:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:pipeline streamable="yes"&amp;gt;
   &amp;lt;xsl:apply-templates mode="phase1"/&amp;gt;
   &amp;lt;xsl:apply-templates select="." mode="phase2"/&amp;gt;
   &amp;lt;xsl:apply-templates select="." mode="phase3"/&amp;gt;
&amp;lt;/xsl:pipeline&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where each instruction in the pipeline takes as its context value the result of the previous instruction.&lt;/p&gt;
&lt;p&gt;Even when no streaming is involved, the xsl:pipeline instruction brings usability benefits: it's much clearer to the reader what is going on.&lt;/p&gt;
&lt;p&gt;(Triggered by a support request from a user wanting to make an existing pipelined transformation streamable; but the idea was considered and "postponed to v.next" during XSLT 3.0 development. The replacement of "context item" by "context value" removes one of the obstacles.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1110 created</title>
   <pubDate>Sat, 23 Mar 2024 17:40:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1110</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1110</guid>
   <description>&lt;div&gt;&lt;p&gt;New error codes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XQFO spec includes various “[TODO: error code]” comments. Should we add error codes when finalizing PRs, or does a master plan exist to add them at the very end?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1109 created</title>
   <pubDate>Sat, 23 Mar 2024 15:46:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1109</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1109</guid>
   <description>&lt;div&gt;&lt;p&gt;Discrepancies in fn:hash() published examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the third example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hash("") &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;the expected result has a spurious trailing letter "o". That's trivial and I will fix it.&lt;/p&gt;
&lt;p&gt;In the seventh example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hash(serialize($doc), map{"algorithm": "sha-1"}) &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I am getting a completely different result, which I suspect is because I am getting a different result from &lt;code&gt;serialize()&lt;/code&gt;. Perhaps the difference is something like a trailing newline, I don't know.&lt;/p&gt;
&lt;p&gt;In my case the result of &lt;code&gt;serialize($doc)&lt;/code&gt; is the 14-character string &lt;code&gt;"&amp;lt;doc&amp;gt;abc&amp;lt;/doc&amp;gt;"&lt;/code&gt;, which I believe is correct, but I suspect there might be other results of &lt;code&gt;serialize($doc)&lt;/code&gt; that would also be conformant with the spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1108 created</title>
   <pubDate>Fri, 22 Mar 2024 17:06:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1108</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1108</guid>
   <description>&lt;div&gt;&lt;p&gt;566-partial Describe a less aggressive %-encoding for fn:build-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;My proposal seemed to meet with general approval, so here is my attempt to implement it in the spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1107 created</title>
   <pubDate>Fri, 22 Mar 2024 16:27:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1107</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1107</guid>
   <description>&lt;div&gt;&lt;p&gt;Grammar discrepancy on fn:pin() examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm probably getting the wrong end of the stick, but I can't see how the example for &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-pin"&gt;fn:pin():&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pin(["a","b","c"])?1 =&amp;gt; label()?parent =&amp;gt; array:foot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;meets the current EBNF. (I know bits of this area may be in flux, so this may be just for the record .)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pin(["a","b","c"])?1 =&amp;gt; label()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;meets the production for &lt;code&gt;ArrowExpr&lt;/code&gt;, and the RHS of an &lt;code&gt;ArrowExpr&lt;/code&gt; is, in this case, an &lt;code&gt;ArrowStaticFunction&lt;/code&gt; &lt;code&gt;ArgumentList&lt;/code&gt; pair, which doesn't encompass the subsequent lookup.&lt;/p&gt;
&lt;p&gt;But for &lt;code&gt;LookupExpr&lt;/code&gt; to include the &lt;code&gt;?parent&lt;/code&gt; requires &lt;code&gt;PostfixExpr&lt;/code&gt; as its first term, and &lt;code&gt;PostfixExpr&lt;/code&gt; can only include &lt;code&gt;ArrowExpr&lt;/code&gt; via &lt;code&gt;PrimaryExpr/ParenthesizedExpr&lt;/code&gt;, i.e. with brackets.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1052 closed</title>
   <pubDate>Thu, 21 Mar 2024 12:51:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1052</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1052</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-csv() - simplify output&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1106 created</title>
   <pubDate>Thu, 21 Mar 2024 12:41:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1106</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1106</guid>
   <description>&lt;div&gt;&lt;p&gt;859 lookup syntax problems&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix the syntax ambiguity identified in issue #859 by dropping the troublesome construct.&lt;/p&gt;
&lt;p&gt;It is hoped something else will be introduced in its place.&lt;/p&gt;
&lt;p&gt;Fix #859&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1105 created</title>
   <pubDate>Thu, 21 Mar 2024 11:53:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1105</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1105</guid>
   <description>&lt;div&gt;&lt;p&gt;Casting to numerical type from strings with underscores&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#prod-xpath40-Digits"&gt;Digits&lt;/a&gt; production now permits underscores as separators in long numerical character sequences.
However in casting to numerical types, either by operator or by function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;'12_345_678' as xs:integer
number('12.345_678')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;am I correct that this should fail according to &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#casting-from-strings"&gt;Casting from xs:string and xs:untypedAtomic&lt;/a&gt;, even though a static resolution/rewrite would be possible?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1104 created</title>
   <pubDate>Thu, 21 Mar 2024 10:06:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1104</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1104</guid>
   <description>&lt;div&gt;&lt;p&gt;TypeTest expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Our current status quo text allows the result of a lookup expression to be filtered by type:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[1,2], [3,4], 5, 6]?*::array(*)?1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and issue #859 points out that this doesn't work because of a syntax ambiguity involving occurrence indicators ('?' is both an occurrence indicator and a lookup operator).&lt;/p&gt;
&lt;p&gt;This issue addresses that problem by re-examining the requirements, and pulling in a number of other issues at the same time.&lt;/p&gt;
&lt;p&gt;In path expressions we have a shorthand syntax for selecting nodes, called the node test, and the proposed syntax &lt;code&gt;::array(*)&lt;/code&gt; was modelled on this. Node tests have a considerable overlap with types, but there are limitations. For example the &lt;code&gt;self&lt;/code&gt; axis is often used to turn a node test into a general predicate, but &lt;code&gt;[self::XX]&lt;/code&gt; can only be used to test elements, not attributes. However, the popularity of node tests and the self axis illustrates the need for a concise filtering operation.&lt;/p&gt;
&lt;p&gt;Of course it's always possible to write &lt;code&gt;[. instance of array(*)]&lt;/code&gt; but this gets extremely verbose.&lt;/p&gt;
&lt;p&gt;In XSLT 3.0, template rules matching maps and arrays could only be written as &lt;code&gt;match=".[. instance of array(*)]"&lt;/code&gt;, which gets really ugly, so we have proposed an alternative in 4.0. Specifically, you can match any type using &lt;code&gt;match="type(ItemType)"&lt;/code&gt;, and for many types such as arrays and maps you can abbreviate this to, for example &lt;code&gt;match="array(*)"&lt;/code&gt;. But this feels clumsy because the type() wrapper is sometimes needed and sometimes not.&lt;/p&gt;
&lt;p&gt;I would like to propose an expression that has concise syntax, whose effect is equivalent to &lt;code&gt;. instance of T&lt;/code&gt;. I propose to use the &lt;code&gt;~&lt;/code&gt; symbol. This is available as both a binary and unary operator, so we can define a binary form &lt;code&gt;$z ~ T&lt;/code&gt; which is syntactic shorthand for &lt;code&gt;$z instance of T&lt;/code&gt;, and a unary form &lt;code&gt;~T&lt;/code&gt; which is shorthand for &lt;code&gt;. ~ T&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, in the case of lookup expressions, we can now write:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[1,2], [3,4], 5, 6]?*[~array(*)]?1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;TypeTests will often be used within predicates in this way, and of course the usage is completely general.&lt;/p&gt;
&lt;p&gt;Here's an example used for array:filter: &lt;code&gt;array:filter($array, fn{~xs:integer+})&lt;/code&gt; which selects all members of the array comprising one or more integers.&lt;/p&gt;
&lt;p&gt;In XSLT 4.0 the syntax &lt;code&gt;~T&lt;/code&gt; replaces the current TypePattern, giving a much more uniform way of matching items by type.&lt;/p&gt;
&lt;p&gt;In XPath and XSLT conditionals the construct can be used as an equivalent to XQuery's TypeswitchExpr:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:choose&amp;gt;
  &amp;lt;xsl:when test="~xs:integer"&amp;gt;...&amp;lt;/xsl:when&amp;gt;
  &amp;lt;xsl:when test="~xs:string"&amp;gt;...&amp;lt;/xsl:when&amp;gt;
  ...
&amp;lt;/xsl:choose&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The choice of tilde for this operator is motivated by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are not many symbols available&lt;/li&gt;
&lt;li&gt;Tilde has many different uses in mathematics and computing, some of which represent a boolean test applied to a value (for example testing whether it is similar to another value or whether it matches some pattern), which is not dissimilar to this proposed usage&lt;/li&gt;
&lt;li&gt;The alliteration between "tilde" and "type" has some mnemonic value (cf. the use of &lt;code&gt;@&lt;/code&gt; for the attribute axis).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1103 created</title>
   <pubDate>Tue, 19 Mar 2024 18:24:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1103</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1103</guid>
   <description>&lt;div&gt;&lt;p&gt;CSV Parsing - handling line ending normalization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;During discussion of PR #1066 there was much debate about how best to handle normalization of (typically CRLF) line endings.&lt;/p&gt;
&lt;p&gt;Perhaps it's very unlikely that CRLF line endings will make it as far as the parse-csv() function, because they will already have been normalized for example by unparsed-text(). But data can also be read in other ways, for example bin:read-binary() or sql:query() extension functions, or passed in as a string-valued parameter to a transformation.&lt;/p&gt;
&lt;p&gt;Perhaps we should have a separate mechanism for normalizing line endings in any data, independent of CSV parsing? (But perhaps it's important to retain CRLF in quoted strings?)&lt;/p&gt;
&lt;p&gt;Perhaps CSV parsing should normalise CRLF unconditionally, without needing to set a special option for it?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1101 closed</title>
   <pubDate>Tue, 19 Mar 2024 18:21:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1101</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1101</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery: Normalize line endings&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1089 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:49:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1089</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1089</guid>
   <description>&lt;div&gt;&lt;p&gt;Rounding when casting string to date/time or duration types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1090 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:49:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1090</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1090</guid>
   <description>&lt;div&gt;&lt;p&gt;1089 Add rounding rules for casting string to duration etc&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1079 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:46:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1079</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1079</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: XSLT, Applying Template Rules, Examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1083 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:46:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1083</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1083</guid>
   <description>&lt;div&gt;&lt;p&gt;1079 Change book used in example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1050 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:43:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1050</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1050</guid>
   <description>&lt;div&gt;&lt;p&gt;Potential (low-risk) Ambiguities in XPath EBNF&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1081 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:43:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1081</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1081</guid>
   <description>&lt;div&gt;&lt;p&gt;1050 Fix ItemType grammar ambiguity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1080 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:40:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1080</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1080</guid>
   <description>&lt;div&gt;&lt;p&gt;1036 Rephrase the rules for number-parser with liberal JSON&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1036 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:40:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1036</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1036</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-json: liberal parsing&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1102 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:40:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1102</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1102</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix broken idref to escaped-crlf in test generation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1102 created</title>
   <pubDate>Tue, 19 Mar 2024 17:40:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1102</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1102</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix broken idref to escaped-crlf in test generation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It appears that &lt;code&gt;escaped-crlf-3&lt;/code&gt; might have been intended. @michaelhkay ?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1073 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:33:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1073</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1073</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO (editorial)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #757 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:32:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/757</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-757</guid>
   <description>&lt;div&gt;&lt;p&gt;Function families&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #463 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:32:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/463</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-463</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parts() - extract the parts of a (not-really) atomic value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #448 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:31:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/448</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-448</guid>
   <description>&lt;div&gt;&lt;p&gt;Support extended dateTime formats of ISO-8601:2019?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #283 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:31:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/283</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-283</guid>
   <description>&lt;div&gt;&lt;p&gt;Enumeration types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #218 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:31:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/218</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-218</guid>
   <description>&lt;div&gt;&lt;p&gt;Function library for maps with composite keys: and thoughts on encapsulation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #33 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:31:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/33</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-33</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON Parsing &amp;amp; Serialization: Numbers&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #883 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:30:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/883</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-883</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve return type for fn:load-xquery-module()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 070 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 19 Mar 2024 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/03-19</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-03-19</guid>
</item><item>
   <title>Issue #1072 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:29:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1072</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1072</guid>
   <description>&lt;div&gt;&lt;p&gt;883 Return type of load-xquery-module&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1066 closed</title>
   <pubDate>Tue, 19 Mar 2024 17:27:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1066</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1066</guid>
   <description>&lt;div&gt;&lt;p&gt;1052 Simplify the results of parse-csv&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1101 created</title>
   <pubDate>Tue, 19 Mar 2024 13:04:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1101</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1101</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery: Normalize line endings&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Various tests, such as &lt;a href="https://github.com/qt4cg/qt4tests/blob/c4210d9d22e756a05dfb54a0ca06fae159fe0bbc/misc/XMLEdition.xml#L132-L140"&gt;&lt;code&gt;line-ending-Q002&lt;/code&gt;&lt;/a&gt;, validate if line ending are normalized when parsing the input:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;test-case name="line-ending-Q002"&amp;gt;
  &amp;lt;description&amp;gt;Normalization of line endings in XQuery&amp;lt;/description&amp;gt;
  &amp;lt;created by="Michael Kay" on="2011-11-24"/&amp;gt;
  &amp;lt;dependency type="spec" value="XQ10+"/&amp;gt;
  &amp;lt;test&amp;gt;deep-equal(string-to-codepoints('&amp;amp;#xd;&amp;amp;#xa;'), (10))&amp;lt;/test&amp;gt;
  &amp;lt;result&amp;gt;
    &amp;lt;assert-true/&amp;gt;
  &amp;lt;/result&amp;gt;
&amp;lt;/test-case&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I cannot find a corresponding note in the current &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html"&gt;XQuery 4 draft&lt;/a&gt;. Should we add it?&lt;/p&gt;
&lt;p&gt;I would welcome this normalization. I assume that no one over the last decades has missed carriage return in XML?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1099 closed</title>
   <pubDate>Tue, 19 Mar 2024 12:35:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1099</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1099</guid>
   <description>&lt;div&gt;&lt;p&gt;Build fixes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1100 created</title>
   <pubDate>Tue, 19 Mar 2024 12:21:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1100</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1100</guid>
   <description>&lt;div&gt;&lt;p&gt;99 fn:equal() function to compare sequences and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix issue #99&lt;/p&gt;
&lt;p&gt;Introduces a function fn:equal() that compares two arbitrary values (sequences, maps, arrays, etc), with a callback for comparing "leaf" items in the structure.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1099 created</title>
   <pubDate>Tue, 19 Mar 2024 12:17:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1099</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1099</guid>
   <description>&lt;div&gt;&lt;p&gt;Build fixes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I had a brain cramp when I wrote the &lt;code&gt;build.gradle&lt;/code&gt; file for this repository. This PR fixes that.&lt;/p&gt;
&lt;p&gt;It also adds a &lt;code&gt;nobreak&lt;/code&gt; attribute to the &lt;code&gt;code&lt;/code&gt; element. The intent, not yet implemented, is that you can say&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;code nobreak="true"&amp;gt;some long, but not unreasonably long expression&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the stylesheet will prevent a line break in the middle of the expression.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1098 created</title>
   <pubDate>Tue, 19 Mar 2024 12:14:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1098</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1098</guid>
   <description>&lt;div&gt;&lt;p&gt;566-partial Editorial improvements for parse-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Add a note clarifying that the fragment identifier should be (1) URI decoded and (2) ignored if it's the empty string.&lt;/li&gt;
&lt;li&gt;Reworked a bit of the description in order to avoid an ambiguity in how &lt;code&gt;///abc&lt;/code&gt; should be parsed. (The current spec can be satisfied either by parsing it as &lt;code&gt;//(/abc)()&lt;/code&gt; or &lt;code&gt;//()/abc&lt;/code&gt; and only the former is intended.)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1097 created</title>
   <pubDate>Mon, 18 Mar 2024 16:22:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1097</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1097</guid>
   <description>&lt;div&gt;&lt;p&gt;566-partial Fix colon issue in URI parsing&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the course of reviewing the tests for &lt;code&gt;fn:parse-uri&lt;/code&gt;, I discovered (or perhaps more correctly, @ChristianGruen discovered) that the rules for matching Windows drive letters are inconsistent. This PR fixes that inconsistency.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1096 created</title>
   <pubDate>Mon, 18 Mar 2024 15:36:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1096</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1096</guid>
   <description>&lt;div&gt;&lt;p&gt;Effect of atomization on array:index-of()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;What is the expected result of the expression:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:index-of( [[1,2], [3,4]],  [3,4] )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It seems that the second argument is atomised (because its declared type is atomic), but the first argument is not.&lt;/p&gt;
&lt;p&gt;So both members of the array have count=1, whereas $search has count=2, so nothing matches, so the result is ().&lt;/p&gt;
&lt;p&gt;Now, what if we write:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:index-of( [[1,2], (3,4)],  [3,4] )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This time it seems that the second member of the array matches, so the result is 2.&lt;/p&gt;
&lt;p&gt;This doesn't feel right. One solution would be to say that each member of the array is itself atomised. But that seems to lead to other surprises with other examples of nested arrays.&lt;/p&gt;
&lt;p&gt;An alternative would be to atomize neither argument (which would mean changing the function signature). But then we would need to use a different comparison operation.&lt;/p&gt;
&lt;p&gt;We seem to be back where we started -- I was unhappy about introducing this function because of the difficulty of defining a good comparison operation for it to use.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 070 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 18 Mar 2024 14:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/03-19</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-03-19</guid>
</item><item>
   <title>Issue #1095 closed</title>
   <pubDate>Mon, 18 Mar 2024 11:44:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1095</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1095</guid>
   <description>&lt;div&gt;&lt;p&gt;Collation: caseblind → Standardize or replace with `html-ascii-case-insensitive`?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1095 created</title>
   <pubDate>Mon, 18 Mar 2024 11:20:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1095</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1095</guid>
   <description>&lt;div&gt;&lt;p&gt;Collation: caseblind → Standardize or replace with `html-ascii-case-insensitive`?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Various test cases use the artificial &lt;code&gt;http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind&lt;/code&gt; collation. It seems that most (all) of them could also be written with the &lt;code&gt;http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Could we replace the tests with the standardized collation, or should we rather try to standardize the caseblind variant?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1094 created</title>
   <pubDate>Mon, 18 Mar 2024 09:25:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1094</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1094</guid>
   <description>&lt;div&gt;&lt;p&gt;Axis steps in lookup expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue picks up where issue #341, issue #350, issue #596, issue #960 etc left off - an attempt to find better syntax and semantics for navigation within JTrees (by which I mean trees of maps and arrays). The problems we are addressing are well aired in those previous issues. There are new opportunities for improving navigation within pinned trees, where upwards navigation becomes possible.&lt;/p&gt;
&lt;p&gt;Firstly I propose that the existing constructs &lt;code&gt;?*&lt;/code&gt;, &lt;code&gt;?key&lt;/code&gt;, and &lt;code&gt;?1&lt;/code&gt; be treated as abbreviations for &lt;code&gt;?content::*&lt;/code&gt;, &lt;code&gt;?content::key&lt;/code&gt;, and &lt;code&gt;?content::1&lt;/code&gt; respectively. The content axis delivers a flattened sequence of items.&lt;/p&gt;
&lt;p&gt;Then I propose we introduce an &lt;code&gt;entry&lt;/code&gt; axis. &lt;code&gt;?entry::*&lt;/code&gt;, &lt;code&gt;?entry::key&lt;/code&gt;, and &lt;code&gt;?entry::1&lt;/code&gt; deliver their results as a sequence of key value pairs, in the style of &lt;code&gt;map:pairs()&lt;/code&gt;. Arrays for this purpose are treated as maps with integer keys. For example if &lt;code&gt;$A&lt;/code&gt; is &lt;code&gt;[(1,2), (3,4)]&lt;/code&gt; then &lt;code&gt;$A?entry::*&lt;/code&gt; delivers &lt;code&gt;(map{'key':1, 'value':(1,2)}, map{'key':2 'value':(3,4)}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This applies equally to the deep lookup operator. &lt;code&gt;$A??entry::*&lt;/code&gt; returns all the key-value pairs within the JTree rooted at $A, recursively.&lt;/p&gt;
&lt;p&gt;We could also consider a &lt;code&gt;value&lt;/code&gt; axis which delivers a sequence of arrays containing the values, losing the associated keys.&lt;/p&gt;
&lt;p&gt;If values are labelled, as a result of being found by navigating a pinned JTree. then upwards navigation is also possible. For an item in a pinned tree,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;containing-entry::*&lt;/code&gt; delivers the containing entry as a key-value pair. Duplicates are eliminated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;owner::*&lt;/code&gt; delivers the immediately containing map or array as identified by the label&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ownership::*&lt;/code&gt; delivers the transitive closure of the &lt;code&gt;owner::*&lt;/code&gt; axis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;peer::*&lt;/code&gt; delivers &lt;code&gt;owner::*/entry::*&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;following-member::*&lt;/code&gt; delivers the subarray of the containing array that follows the current entry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;preceding-member::*&lt;/code&gt; delivers the subarray of the containing array thay precedes the current entry&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, improved names for these concepts are welcomed!&lt;/p&gt;
&lt;p&gt;In these examples I have used &lt;code&gt;*&lt;/code&gt; to select everything on the relevant axis. This can always be replaced by a key specifier K that selects the item only if it is labelled with a key K. So for example ownership::address selects the containing maps and arrays that are themselves in a map entry with key "address".&lt;/p&gt;
&lt;p&gt;I think we also need a convenient way to filter the selection by type (see issue #859 for a problem with the current syntax). I propose&lt;/p&gt;
&lt;p&gt;&lt;code&gt;??content::[record(longitude, latitude)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to select all items in the recursive content that match type &lt;code&gt;record(longitude, latitude)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Similarly&lt;/p&gt;
&lt;p&gt;&lt;code&gt;??entry::[array(xs:integer)+]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to select all entries where the value is an array of integers.&lt;/p&gt;
&lt;p&gt;Finally, responding to issue #341, I propose that lookup operators should be error free: rather than reporting errors, they should return nothing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1093 created</title>
   <pubDate>Sun, 17 Mar 2024 16:08:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1093</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1093</guid>
   <description>&lt;div&gt;&lt;p&gt;1091 Add fn:collation function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1091&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1092 created</title>
   <pubDate>Sun, 17 Mar 2024 09:30:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1092</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1092</guid>
   <description>&lt;div&gt;&lt;p&gt;1039 Add notes referring to fn:collation-key&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1039&lt;/p&gt;
&lt;p&gt;Rather than adding a new feature to the language, we add notes to "order by" and "group by" explaining how the requirement can be met using the fn:collation-key() function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #334 closed</title>
   <pubDate>Sat, 16 Mar 2024 21:51:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/334</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-334</guid>
   <description>&lt;div&gt;&lt;p&gt;Transient properties: a new approach to deep selection and update in maps and arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #86 closed</title>
   <pubDate>Sat, 16 Mar 2024 21:40:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/86</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-86</guid>
   <description>&lt;div&gt;&lt;p&gt;Fallback for named timezones &lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #64 closed</title>
   <pubDate>Sat, 16 Mar 2024 21:36:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/64</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-64</guid>
   <description>&lt;div&gt;&lt;p&gt;Specify optional parameters to create bounded variadic functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #56 closed</title>
   <pubDate>Sat, 16 Mar 2024 21:18:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/56</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-56</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow item-type to be matched within its definition scope&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1091 created</title>
   <pubDate>Sat, 16 Mar 2024 15:16:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1091</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1091</guid>
   <description>&lt;div&gt;&lt;p&gt;Convenience function to construct a collation URI&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose a convenience function to construct a collation URI: for example&lt;/p&gt;
&lt;p&gt;collation({'lang':'fr'})&lt;/p&gt;
&lt;p&gt;returns a collation URI suitable for French.&lt;/p&gt;
&lt;p&gt;If the property names supplied are those that are defined for UCA collation names, the result will be the corresponding UCA collation URI; alternatively, implementation-defined property names can be included.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1090 created</title>
   <pubDate>Fri, 15 Mar 2024 15:53:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1090</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1090</guid>
   <description>&lt;div&gt;&lt;p&gt;1089 Add rounding rules for casting string to duration etc&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1089&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1089 created</title>
   <pubDate>Fri, 15 Mar 2024 15:35:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1089</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1089</guid>
   <description>&lt;div&gt;&lt;p&gt;Rounding when casting string to date/time or duration types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;F+O section 21.2 describes rules for rounding when strings are cast to xs:decimal. The same rules should apply when casting to a dateTime, time, or duration, in the case where the number of digits in the fractional seconds part exceeds the precision supported by the implementation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1082 closed</title>
   <pubDate>Fri, 15 Mar 2024 14:50:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1082</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1082</guid>
   <description>&lt;div&gt;&lt;p&gt;Inconsistency in underscore in numeric literal grammar&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1088 closed</title>
   <pubDate>Fri, 15 Mar 2024 14:50:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1088</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1088</guid>
   <description>&lt;div&gt;&lt;p&gt;1082 Fix numeric literal grammar&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1088 created</title>
   <pubDate>Fri, 15 Mar 2024 13:07:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1088</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1088</guid>
   <description>&lt;div&gt;&lt;p&gt;1082 Fix numeric literal grammar&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1082&lt;/p&gt;
&lt;p&gt;Also adds some notes and examples&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1087 created</title>
   <pubDate>Fri, 15 Mar 2024 11:44:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1087</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1087</guid>
   <description>&lt;div&gt;&lt;p&gt;1086 Editorial changes to array:values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #1086&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1086 created</title>
   <pubDate>Fri, 15 Mar 2024 10:40:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1086</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1086</guid>
   <description>&lt;div&gt;&lt;p&gt;array:values spec cleanup&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The rules for array:values say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The function concatenates the members of $array and returns them as a sequence. The values are returned in their original order. Arrays contained within members are returned unchanged.&lt;/p&gt;
&lt;p&gt;The effect of the function is equivalent to $array?*.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is all a bit too vague.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the values are not concatenated, at least not in the sense of concat()&lt;/li&gt;
&lt;li&gt;it doesn't return the members, it returns their sequence concatenation&lt;/li&gt;
&lt;li&gt;the phrase "arrays contained within members" is unclear. The examples reveal that this rule is intended to include arrays that ARE members.&lt;/li&gt;
&lt;li&gt;the equivalent expression &lt;code&gt;$array?*&lt;/code&gt; allows $array to be things that &lt;code&gt;array:values()&lt;/code&gt; doesn't allow (like an empty sequence).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More subtly, the introduction to section 19.1 says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All functionality on arrays is defined in terms of two primitives:&lt;/p&gt;
&lt;p&gt;The function [array:members] decomposes an array to a sequence of value records.
The function [array:of-members] composes an array from a sequence of value records.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and the spec for array:values doesn't conform to this guideline.&lt;/p&gt;
&lt;p&gt;Try:&lt;/p&gt;
&lt;p&gt;The function returns the sequence-concatenation of the members of $array, retaining order. More formally, the effect of the function is equivalent to the expression &lt;code&gt;array:members($array)?value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;and add to the notes:&lt;/p&gt;
&lt;p&gt;Unlike array:flatten, the function does not apply recursively to nested arrays.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1085 created</title>
   <pubDate>Thu, 14 Mar 2024 22:07:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1085</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1085</guid>
   <description>&lt;div&gt;&lt;p&gt;Parameters to fn:sort&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;An interesting suggestion made in passing in the thread discussing fn:ranks(). It would be possible to combine the &lt;code&gt;collation&lt;/code&gt; argument and the &lt;code&gt;ascending/descending&lt;/code&gt; argument of &lt;code&gt;fn:sort&lt;/code&gt; into a single argument, whose value is an optional "ascending|descending" keyword followed by an optional collation URI (whitespace-separated, presumably).&lt;/p&gt;
&lt;p&gt;This might seem a little bizarre at first sight, but having a list of collation URIs followed by a list of sort key functions followed by a list of ascending/descending keywords is also a little bizarre, and it would have two advantages - it would make better use of the second argument which is currently nearly always set to &lt;code&gt;()&lt;/code&gt;, and it would put the two parts of the order specification (the collation and its direction) in closer proximity. After all, they are used in combination to decide whether one value precedes or follows another.&lt;/p&gt;
&lt;p&gt;I'm not 100% convinced by the idea, but it seems worth considering. What do people think?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1084 created</title>
   <pubDate>Wed, 13 Mar 2024 18:29:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1084</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1084</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect rendition of option defaults&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the F&amp;amp;O spec, when rendering the default value of an option, code font is being used for narrative prose: see for example defaults for the &lt;code&gt;delivery-format&lt;/code&gt; and &lt;code&gt;base-output-uri&lt;/code&gt; options of &lt;code&gt;fn:transform&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1083 created</title>
   <pubDate>Wed, 13 Mar 2024 17:58:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1083</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1083</guid>
   <description>&lt;div&gt;&lt;p&gt;1079 Change book used in example&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changed the example to a book by a reputable author.&lt;/p&gt;
&lt;p&gt;Fix #1079&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1082 created</title>
   <pubDate>Wed, 13 Mar 2024 17:35:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1082</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1082</guid>
   <description>&lt;div&gt;&lt;p&gt;Inconsistency in underscore in numeric literal grammar&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-numeric-literals"&gt;Numeric Literals&lt;/a&gt; describes permitting underscores to be used as separators in sequences of digits within long numbers. The first interpretation rule says underscores are first stripped out.&lt;/p&gt;
&lt;p&gt;But the grammar provided appears to me to be inconsistent.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IntegerLiteral	   ::=   	Digits
DecimalLiteral	   ::=   	("." Digits) | (Digits "." [0-9]*)
DoubleLiteral	   ::=   	(("." Digits) | (Digits ("." [0-9]*)?)) [eE] [+-]? Digits
Digits	           ::=   	DecDigit ((DecDigit | "_")* DecDigit)?
DecDigit	   ::=   	[0-9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Digits&lt;/code&gt; permits underscores in the grammar, which works in the integer portion of the numeric literal, but when the value exceeds 1 the fractional part is described as &lt;code&gt;[0-9]*&lt;/code&gt;. If underscore stripping is a 'pre-parsing' step, then &lt;code&gt;Digits&lt;/code&gt; need not mention it at all.&lt;/p&gt;
&lt;p&gt;On the other hand if the grammar is defining the sequence of characters that are permitted, then the fractional section in the grammar should also permit underscores, which it plainly does not in the presence of an integer part. (The test &lt;code&gt;seconds-010&lt;/code&gt; uses such in an expansion of π.)&lt;/p&gt;
&lt;p&gt;An alternative formulation that I think does describe underscores in fractional parts might be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; DecimalLiteral	   ::=   	("." Digits) | (Digits "." Digits?) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and similarly for &lt;code&gt;DoubleLiteral&lt;/code&gt;. I know this isn't a game-changer, but for those generating grammars, consistency certainly helps.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1081 created</title>
   <pubDate>Wed, 13 Mar 2024 16:26:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1081</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1081</guid>
   <description>&lt;div&gt;&lt;p&gt;1050 Fix ItemType grammar ambiguity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Two alternatives in the grammar were both EQNames, distinguished semantically. This ambiguity in the grammar is now fixed (no living XPath expressions are harmed by this change).&lt;/p&gt;
&lt;p&gt;Fix #1050&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1080 created</title>
   <pubDate>Wed, 13 Mar 2024 15:42:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1080</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1080</guid>
   <description>&lt;div&gt;&lt;p&gt;1036 Rephrase the rules for number-parser with liberal JSON&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Rephrasing as suggested in the issue.&lt;/p&gt;
&lt;p&gt;Fix #1036&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1079 created</title>
   <pubDate>Wed, 13 Mar 2024 14:45:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1079</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1079</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: XSLT, Applying Template Rules, Examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This guy is all around. Do we really need him in our specs as well? 😏&lt;/p&gt;
&lt;p&gt;https://qt4cg.org/pr/1078/xslt-40/Overview.html#applying-templates&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;  "Title": "How to Win Elections",
  "Authors": [ "...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1078 created</title>
   <pubDate>Wed, 13 Mar 2024 14:20:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1078</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1078</guid>
   <description>&lt;div&gt;&lt;p&gt;1060 Formatting XPath/XQuery&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Editorial; closes #1060.&lt;/p&gt;
&lt;p&gt;This PR attempts to unify the presentation of XPath and XQuery code. It’s not complete, but it should definitely improve the status quo.&lt;/p&gt;
&lt;p&gt;The chosen formatting and indentation rules can certainly be discussed. My major objective was consistency: I selected rules that were used frequently enough in the given documents.&lt;/p&gt;
&lt;p&gt;Apart from the presentation stuff, this PR fixes various minor bugs in the rules and examples.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1077 created</title>
   <pubDate>Wed, 13 Mar 2024 12:50:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1077</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1077</guid>
   <description>&lt;div&gt;&lt;p&gt;Correct the status of new language features&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR corrects the status of certain language features that the change appendix in the spec incorrectly describes as having not been accepted by the WG., The features in question are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The rules for reporting type errors during static analysis have been changed
so that a processor has more freedom to report errors in respect of constructs that
are evidently wrong, such as &lt;code&gt;@price/@value&lt;/code&gt;, even though dynamic evaluation
is defined to return an empty sequence rather than an error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This change has in fact been discussed and accepted by the group.  See PRs #603 and #884.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Record types are added as a new kind of ItemType, constraining
  the value space of maps.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Record types have become a fundamental feature of much of our work, with many additional capabilities relying on them. They became an official part of the spec with the closure of issue #172.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Local union types are added as a new kind of ItemType, constraining
  the value space of atomic values.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Enumeration types are added as a new kind of &lt;code&gt;ItemType&lt;/code&gt;, constraining
the value space of strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Local union types and enumeration types became an official part of the spec with the acceptance of PR #691&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The lookup operator &lt;code&gt;?&lt;/code&gt; can now be followed by a string literal, for cases where
map keys are strings other than NCNames.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These changes were endorsed by acceptance of PR #926.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The rules for value comparisons when comparing values of different types (for example, decimal and double)
have changed to be transitive. A decimal value is no longer converted to double, instead the double is converted
to a decimal without loss of precision. This may affect compatibility in edge cases involving comparison of
values that are numerically very close.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We still have open issues regarding comparison, conversion, and promotion of numeric values. See for example issue #986. So we may yet decide to roll back these changes. For practical purposes it's sensible to treat the current text as status quo, since so many individual changes have been made that unwinding can only be treated as a new issue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;for member&lt;/code&gt; clause is added to FLWOR expressions to allow iteration over
an array.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The current specification of &lt;code&gt;for member&lt;/code&gt; results from the acceptance of PR #752.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1076 created</title>
   <pubDate>Wed, 13 Mar 2024 12:02:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1076</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1076</guid>
   <description>&lt;div&gt;&lt;p&gt;1075 Drop 'with' expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Proposes dropping "with" expressions from the spec.&lt;/p&gt;
&lt;p&gt;Fix #1075&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1075 created</title>
   <pubDate>Wed, 13 Mar 2024 11:50:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1075</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1075</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop "with" expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current draft includes a proposal for a "with" expression to establish the namespace context for an XPath expression. This has never been reviewed or accepted by the group. See §4.1 of the language specifications.&lt;/p&gt;
&lt;p&gt;I propose to raise a PR that drops this feature, in order to force discussion as to whether we want it in its current form, or to replace it with something better, or to drop it entirely.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1074 created</title>
   <pubDate>Wed, 13 Mar 2024 11:42:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1074</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1074</guid>
   <description>&lt;div&gt;&lt;p&gt;Confirm status of provisional functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The purpose of this PR is to bring the current F&amp;amp;O draft specification into a state where it is confirmed as the current status quo accepted by the CG.&lt;/p&gt;
&lt;p&gt;The following functions (mainly new, some amended) that have been present in the draft for some while, but with caveats about their status, are confirmed as part of the status quo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fn:slice&lt;/li&gt;
&lt;li&gt;fn:format-number&lt;/li&gt;
&lt;li&gt;fn:stack-trace&lt;/li&gt;
&lt;li&gt;map:filter&lt;/li&gt;
&lt;li&gt;map:replace&lt;/li&gt;
&lt;li&gt;array:replace&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following functions are dropped (for the time being):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fn:json&lt;/li&gt;
&lt;li&gt;map:substitute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The actual PR essentially changes text that alludes to the status of these functions, it does not change the actual specifications.&lt;/p&gt;
&lt;p&gt;The current state of qt4tests in relation to these functions is:&lt;/p&gt;
&lt;p&gt;fn:slice - OK
fn:format-number - missing tests for recent changes
fn:stack-trace - no tests
map:filter - OK
map:replace - no tests
array:replace - no tests
fn:json - no tests
map:substitute - no tests&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1073 created</title>
   <pubDate>Wed, 13 Mar 2024 09:01:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1073</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1073</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO (editorial)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Examples fixed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1072 created</title>
   <pubDate>Wed, 13 Mar 2024 00:51:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1072</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1072</guid>
   <description>&lt;div&gt;&lt;p&gt;883 Return type of load-xquery-module&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Use a record type for the return type of the function.&lt;/p&gt;
&lt;p&gt;Fix #883&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1071 created</title>
   <pubDate>Tue, 12 Mar 2024 22:10:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1071</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1071</guid>
   <description>&lt;div&gt;&lt;p&gt;1070 Bare Brace map constructor syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Makes the keyword "map" in map constructors optional.&lt;/p&gt;
&lt;p&gt;Fix #1070&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 069 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 12 Mar 2024 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/03-12</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-03-12</guid>
</item><item>
   <title>Issue #220 closed</title>
   <pubDate>Tue, 12 Mar 2024 17:18:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/220</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-220</guid>
   <description>&lt;div&gt;&lt;p&gt;Encapsulation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #262 closed</title>
   <pubDate>Tue, 12 Mar 2024 17:18:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/262</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-262</guid>
   <description>&lt;div&gt;&lt;p&gt;Navigation in deep-structured arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #274 closed</title>
   <pubDate>Tue, 12 Mar 2024 17:17:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/274</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-274</guid>
   <description>&lt;div&gt;&lt;p&gt;What would it take/would it be possible to build a module repository for QT?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #295 closed</title>
   <pubDate>Tue, 12 Mar 2024 17:17:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/295</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-295</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend support for self-reference in record types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #314 closed</title>
   <pubDate>Tue, 12 Mar 2024 17:17:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/314</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-314</guid>
   <description>&lt;div&gt;&lt;p&gt;Basic Operations on Maps and Arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #825 closed</title>
   <pubDate>Tue, 12 Mar 2024 17:17:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/825</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-825</guid>
   <description>&lt;div&gt;&lt;p&gt;array:members-at&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #829 closed</title>
   <pubDate>Tue, 12 Mar 2024 17:17:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/829</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-829</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:boolean: EBV support for more item types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #960 closed</title>
   <pubDate>Tue, 12 Mar 2024 17:17:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/960</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-960</guid>
   <description>&lt;div&gt;&lt;p&gt;Should ??KS flatten the results&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #961 closed</title>
   <pubDate>Tue, 12 Mar 2024 17:17:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/961</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-961</guid>
   <description>&lt;div&gt;&lt;p&gt;Simulating Objects: Performance&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1037 closed</title>
   <pubDate>Tue, 12 Mar 2024 17:16:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1037</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1037</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:json-to-xml: 'number-parser' option&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1058 closed</title>
   <pubDate>Tue, 12 Mar 2024 17:15:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1058</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1058</guid>
   <description>&lt;div&gt;&lt;p&gt;1037 fn:json-to-xml: 'number-parser' option&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 069 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 11 Mar 2024 14:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/03-12</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-03-12</guid>
</item><item>
   <title>Issue #1070 created</title>
   <pubDate>Fri, 8 Mar 2024 23:10:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1070</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1070</guid>
   <description>&lt;div&gt;&lt;p&gt;Concise syntax for map construction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It has been suggested that we should allow a "bare braces" syntax for map construction. This would reduce visual clutter especially when defining options arguments, as in&lt;/p&gt;
&lt;p&gt;&lt;code&gt;serialize($result, map{"method": "adaptive", "indent": true()})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I believe there are no syntactic obstacles to dropping the "map" keyword. The main reason it is there was because there was competition for the construct with people doing so-called scripting extensions who wanted "bare braces" to represent blocks of statements.&lt;/p&gt;
&lt;p&gt;Allowing &lt;code&gt;{"method": "adaptive"}&lt;/code&gt; would align with JSON.&lt;/p&gt;
&lt;p&gt;But I think we should go a step further and drop the quotes:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{method: "adaptive"}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;except that we could allow a string literal if the key isn't an NCName, as with record type syntax.&lt;/p&gt;
&lt;p&gt;Could we do this and still allow computed or non-string keys? I don't think we need to, the existing syntax remains available.&lt;/p&gt;
&lt;p&gt;So I propose we allow:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;serialize($result, {method: "adaptive", indent: true()})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;While we're about it, is there any enthusiasm for allowing&lt;/p&gt;
&lt;p&gt;&lt;code&gt;serialize($result, {method: "adaptive", indent: ✅})&lt;/code&gt;  (: U+2705 :)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #596 closed</title>
   <pubDate>Fri, 8 Mar 2024 22:45:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/596</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-596</guid>
   <description>&lt;div&gt;&lt;p&gt;Pinned values: Transforming Trees&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1069 created</title>
   <pubDate>Fri, 8 Mar 2024 03:58:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1069</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1069</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:ucd&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue floats the idea of a new function, &lt;code&gt;fn:ucd&lt;/code&gt; (for Unicode character database).&lt;/p&gt;
&lt;p&gt;The working signature would be &lt;code&gt;fn:ucd($codepoint as xs:positiveInteger) as map(*)?&lt;/code&gt;.  In the returned map, each entry would have a key that is a Unicode property name (full or abbreviated) and a value that reflects the property of &lt;code&gt;$character&lt;/code&gt; in the Unicode character database.&lt;/p&gt;
&lt;p&gt;What would users get? Access to a deep store of character data not otherwise (easily) available, such as name, name alias, bidirectional properties, age (when it entered Unicode), breaks (word, sentence, grapheme), scripts, and dozens of other properties. See &lt;a href="https://www.unicode.org/reports/tr44/#Property_Index"&gt;Unicode TR 44&lt;/a&gt;. Although many properties are of specialized interest, I think most people would find at least a few of these properties of significance.&lt;/p&gt;
&lt;p&gt;Can't we already do this with regular expressions? Well, no. Category escapes in XPath regular expressions, e.g., &lt;code&gt;\p{Lm}&lt;/code&gt;, are based upon general categories, but the properties mentioned above cut across these general categories. For example, general category &lt;code&gt;Pd&lt;/code&gt; dash is not coterminous with the property &lt;code&gt;Dash&lt;/code&gt;. Property &lt;code&gt;Quotation_Mark&lt;/code&gt; crosses many subcategories of &lt;code&gt;P&lt;/code&gt; Punctuation.&lt;/p&gt;
&lt;p&gt;A few use cases:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extrapolation&lt;/strong&gt;
&lt;code&gt;string-to-codepoints('ɑϞ') ! ('U+' || dec-to-hex(.) || ': ' || ucd(.)('Name'))&lt;/code&gt; would return &lt;code&gt;('U+251: LATIN SMALL LETTER ALPHA', 'U+3DE: GREEK LETTER KOPPA')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Filtering&lt;/strong&gt;
&lt;code&gt;if (some $i in string-to-codepoints($text) satisfies ucd($i)('Soft_Dotted')) then...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Annotating&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class="{myfunc:most-frequent((string-to-codepoints($text) ! ucd(.)('Script')))}"&amp;gt;
    &amp;lt;xsl:value-of select="$text"/&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;might produce&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class="Syriac"&amp;gt;ܡܠܟܘܬܐ ܕܫܡܝܐ ܐܝܬܝܗ̇. ܠܐ ܚܫܘܫܘܬܐ ܕܢܦܫܐ܆ ܥܡ ܝܕܥܬܐ ܕܫܪܪܐ ܕܗܠܝܢ ܕܐܝܬܝܗܝܢ&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And so forth. I can think of dozens of different types of operations where &lt;code&gt;fn:ucd&lt;/code&gt; might be significant.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1068 created</title>
   <pubDate>Fri, 8 Mar 2024 01:51:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1068</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1068</guid>
   <description>&lt;div&gt;&lt;p&gt;73 fn:graphemes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;First draft of &lt;code&gt;fn:graphemes&lt;/code&gt;, in response to discussion at #73 .&lt;/p&gt;
&lt;p&gt;A battery of tests will be submitted as a PR to the qt4tests repository.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1067 closed</title>
   <pubDate>Thu, 7 Mar 2024 13:48:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1067</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1067</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: significant children&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1067 created</title>
   <pubDate>Thu, 7 Mar 2024 12:22:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1067</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1067</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: significant children&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current rules of &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-deep-equal"&gt;fn:deep-equal&lt;/a&gt; are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;e. Let &lt;code&gt;significant-children($parent)&lt;/code&gt; be the sequence of nodes obtained by applying the following steps to the children of &lt;code&gt;$parent&lt;/code&gt;, in turn:
  i. Comment nodes are discarded if the option &lt;code&gt;comments&lt;/code&gt; is false.
  ii. Processing instruction nodes are discarded if the option &lt;code&gt;processing-instructions&lt;/code&gt; is false.
  iii. Adjacent text nodes are merged.
…
…the sequence &lt;code&gt;significant-children($i1)&lt;/code&gt; is deep-equal to the sequence &lt;code&gt;significant-children($i2)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If my interpretation is correct, the following expression is now expected to return &lt;code&gt;true&lt;/code&gt;…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;deep-equal(
  &amp;lt;e&amp;gt;A&amp;lt;!----&amp;gt;B&amp;lt;/e&amp;gt;,
  &amp;lt;e&amp;gt;AB&amp;lt;/e&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and we need to update various test cases (e.g. &lt;a href="https://github.com/qt4cg/qt4tests/blob/af7640a513bd7bda9f301a0cc8334a58bb5ea78e/fn/deep-equal.xml#L2390-L2398"&gt;K2-SeqDeepEqualFunc-22&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1066 created</title>
   <pubDate>Wed, 6 Mar 2024 22:03:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1066</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1066</guid>
   <description>&lt;div&gt;&lt;p&gt;1052 Simplify the results of parse-csv&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes parse-csv to deliver the results in a simpler format:&lt;/p&gt;
&lt;p&gt;(a) the result structure is less deeply nested: one record with four entries
(b) the actual data is delivered as a sequence of arrays of strings, closely aligned with the result of &lt;code&gt;csv-to-arrays&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The rules in the spec have also been rearranged to reflect this, so the rules are now organised according to the values delivered for each of these four fields.&lt;/p&gt;
&lt;p&gt;The examples in the spec are changed to reflect the new output format; in addition they have been editorially reorganized so each example is more self-contained, avoiding the need for extensive scrolling to find the values of variables referenced in each example.&lt;/p&gt;
&lt;p&gt;Fix issue #1052&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1065 created</title>
   <pubDate>Wed, 6 Mar 2024 12:34:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1065</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1065</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-number: further notes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue summarizes suggestions for &lt;code&gt;fn:format-number&lt;/code&gt; from the &lt;a href="https://qt4cg.org/meeting/minutes/2024/03-05.html"&gt;QT4 Meeting 068&lt;/a&gt; that have not yet been incorporated into the current draft:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;a href="https://cldr.unicode.org/translation/number-currency-formats/number-and-currency-patterns"&gt;Unicode Common Locale Data Repository&lt;/a&gt; (CLDR) should be referenced; it has recommendations for all of the languages in Unicode and some variants.&lt;/li&gt;
&lt;li&gt;We could consider introducing an options map so that we can just add more things later (such as e.g. an option for using the default decimal format for parsing the picture string, see https://github.com/qt4cg/qtspecs/issues/1048#issuecomment-1978869499).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #919 closed</title>
   <pubDate>Wed, 6 Mar 2024 12:06:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/919</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-919</guid>
   <description>&lt;div&gt;&lt;p&gt;Should predicate callbacks use EBV?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #944 closed</title>
   <pubDate>Wed, 6 Mar 2024 12:04:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/944</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-944</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion rules: implicit types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1047 closed</title>
   <pubDate>Wed, 6 Mar 2024 12:02:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1047</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1047</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect note for `fn:some` and `fn:every`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1064 closed</title>
   <pubDate>Wed, 6 Mar 2024 09:56:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1064</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1064</guid>
   <description>&lt;div&gt;&lt;p&gt;340-editorial fn:format-number&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1064 created</title>
   <pubDate>Wed, 6 Mar 2024 09:56:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1064</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1064</guid>
   <description>&lt;div&gt;&lt;p&gt;340-editorial fn:format-number&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;…an addendum to the editorial change I made yesterday; will be merged in a minute.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1054 closed</title>
   <pubDate>Wed, 6 Mar 2024 09:45:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1054</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1054</guid>
   <description>&lt;div&gt;&lt;p&gt;Spec fn:message #id using old name fn:log&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1057 closed</title>
   <pubDate>Wed, 6 Mar 2024 09:45:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1057</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1057</guid>
   <description>&lt;div&gt;&lt;p&gt;1054 Spec fn:message #id using old name fn:log&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1063 created</title>
   <pubDate>Tue, 5 Mar 2024 23:20:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1063</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1063</guid>
   <description>&lt;div&gt;&lt;p&gt;deep-equal() - option to compare functions liberally&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have changed deep-equal() so it no longer automatically treats functions as not equal.&lt;/p&gt;
&lt;p&gt;However, it is still in practice infeasible to use deep-equal() for comparison of test results that include function items because it is not in general possible to supply an expected result that compares true to the function item actually returned. Since comparison of test results is an important use case for deep-equal, this is a serious limitation. It affects our own process that checks that output from examples in the spec is correct: the examples for parse-csv, for example, are artificially adjusted to make test comparison feasible by eliminating the function items in the result, which reduces the pedagogical value of the examples.&lt;/p&gt;
&lt;p&gt;There should be an option such as &lt;code&gt;strict-function-comparison=true|false&lt;/code&gt;. If set to false, then the function properties such as name, arity, and signature are compared, but the function body is ignored and assumed equal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 068 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 5 Mar 2024 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/03-05</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-03-05</guid>
</item><item>
   <title>Issue #1053 closed</title>
   <pubDate>Tue, 5 Mar 2024 17:19:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1053</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1053</guid>
   <description>&lt;div&gt;&lt;p&gt;1047 Default predicate for some#1 and every#1&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1046 closed</title>
   <pubDate>Tue, 5 Mar 2024 17:16:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1046</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1046</guid>
   <description>&lt;div&gt;&lt;p&gt;1038 take-while predicate no longer uses EBV&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #413 closed</title>
   <pubDate>Tue, 5 Mar 2024 17:14:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/413</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-413</guid>
   <description>&lt;div&gt;&lt;p&gt;New function: parse-csv()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1017 closed</title>
   <pubDate>Tue, 5 Mar 2024 17:13:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1017</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1017</guid>
   <description>&lt;div&gt;&lt;p&gt;Change csv-to-xml() to produce an XHTML table&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1043 closed</title>
   <pubDate>Tue, 5 Mar 2024 17:13:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1043</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1043</guid>
   <description>&lt;div&gt;&lt;p&gt;CSV parsing - "blank" rows&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1051 closed</title>
   <pubDate>Tue, 5 Mar 2024 17:13:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1051</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1051</guid>
   <description>&lt;div&gt;&lt;p&gt;1043 Clarification of CSV edge cases&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #340 closed</title>
   <pubDate>Tue, 5 Mar 2024 17:08:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/340</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-340</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-number: Specifying decimal format&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1049 closed</title>
   <pubDate>Tue, 5 Mar 2024 17:00:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1049</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1049</guid>
   <description>&lt;div&gt;&lt;p&gt;340-partial fn:format-number: Specifying decimal format&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1061 closed</title>
   <pubDate>Tue, 5 Mar 2024 12:54:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1061</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1061</guid>
   <description>&lt;div&gt;&lt;p&gt;discussion - language pragmas&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1062 created</title>
   <pubDate>Tue, 5 Mar 2024 12:05:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1062</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1062</guid>
   <description>&lt;div&gt;&lt;p&gt;150bis revised proposal for fn:ranks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal is an amended/alternative proposal for the fn:ranks function, taking into account the work done on the original issue #150 and the PR #1027 and the comments raised. Acknowledgements to the original author for the idea and for a lot of good work on examples etc.&lt;/p&gt;
&lt;p&gt;It amends the previous proposal as follows:&lt;/p&gt;
&lt;p&gt;(a) the signature and the semantics are aligned with fn:sort. This adds some functionality (multiple sort keys, ascending/descending) and also removes some complexity (two different collations for comparing input items and result items)&lt;/p&gt;
&lt;p&gt;(b) the style of exposition is changed editorially for consistency with other functions&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1061 created</title>
   <pubDate>Tue, 5 Mar 2024 10:10:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1061</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1061</guid>
   <description>&lt;div&gt;&lt;p&gt;discussion - language pragmas&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The motivation is introducing breaking changes into the language that may have value, but not enough value to justify a breaking change.&lt;/p&gt;
&lt;p&gt;Haskell uses language pragmas for this, and actually most (well, a lot) Haskell code does not use the base specification, and quite common constructs (GADTs, multi param type classes) require extensions.&lt;/p&gt;
&lt;p&gt;Haskell devs are used to this, it may require some referring to the the top of the file to change the pragmas but its a working solution to introducing optional things that may be breaking changes.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;
&lt;p&gt;Benefits&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allows breaking changes to be introduced&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Costs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;developers may have to refer to the language pragma to correctly understand the code&lt;/li&gt;
&lt;li&gt;implementation explosion, extensions may not be independent and interact causing an explosion of combinations of extensions (though i think its reasonable for an implementation to just implement combinations that are practical).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm biased, I want to introduce breaking changes, but am thwarted by the versioning strategy.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1060 created</title>
   <pubDate>Mon, 4 Mar 2024 17:57:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1060</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1060</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting XPath/XQuery&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I got reminded today that the specification documents are kind of “wild”, because all code snippets use a different formatting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The indentation is inconsistent (the tendency seems to be 2 spaces, in accordance with the function signatures). Repeatedly, indentations are used that don’t seem to follow any conventions at all.&lt;/li&gt;
&lt;li&gt;Sometimes, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;array&lt;/code&gt; keywords are followed by a space, sometimes not. My preference would be not be too stingy; we have enough space.&lt;/li&gt;
&lt;li&gt;Sometimes, the &lt;code&gt;return&lt;/code&gt; keyword starts in a new line, sometimes it’s attached to the previous line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is certainly something we cannot finalize too early, but I think we shouldn’t be too erratic in an official document, even though it’s “just code”.&lt;/p&gt;
&lt;p&gt;Related: #1000.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1059 created</title>
   <pubDate>Mon, 4 Mar 2024 15:32:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1059</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1059</guid>
   <description>&lt;div&gt;&lt;p&gt;1019 XQFO: Unknown option parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1019&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1058 created</title>
   <pubDate>Mon, 4 Mar 2024 14:37:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1058</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1058</guid>
   <description>&lt;div&gt;&lt;p&gt;1037 fn:json-to-xml: 'number-parser' option&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1037&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1057 created</title>
   <pubDate>Mon, 4 Mar 2024 14:31:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1057</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1057</guid>
   <description>&lt;div&gt;&lt;p&gt;1054 Spec fn:message #id using old name fn:log&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1054&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1056 closed</title>
   <pubDate>Mon, 4 Mar 2024 12:30:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1056</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1056</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplifying match templates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1056 created</title>
   <pubDate>Fri, 1 Mar 2024 13:53:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1056</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1056</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplifying match templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I like match templates a lot, I think they are a USP for XSLT, but I find using them quite clumsy e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;priority rules are quite subtle (I couldn't tell you what they are not, and I tend to make them explicit)&lt;/li&gt;
&lt;li&gt;because each match sits in a different template they tend to sort of drift around in the spaghetti of the code&lt;/li&gt;
&lt;li&gt;they don't naturally extend to nested local matches....everything exists at the top level.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you compare this with main stream functional match expressions then they are quite syntactically different, and I think the mainstream syntax is probably a bit simpler (and much more familiar)
(I can see this potentially extending to lots of subsequent things but I'll keep it to the headline)&lt;/p&gt;
&lt;p&gt;I think something like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template mode="foo" as="xs:string"&amp;gt;
    &amp;lt;xsl:match select="Foo"&amp;gt;
        &amp;lt;xsl:sequence select="'this is a foo'"/&amp;gt;
    &amp;lt;/xsl:match&amp;gt;
    &amp;lt;xsl:match select="Bar"&amp;gt;
        &amp;lt;xsl:sequence select="'this is a bar'"/&amp;gt;
    &amp;lt;/xsl:match&amp;gt;
    &amp;lt;xsl:match&amp;gt;
        &amp;lt;xsl:sequence select="'this is something else'"/&amp;gt;
    &amp;lt;/xsl:match&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;templates are matched in sequence (as is the norm), no opaque priority rules&lt;/li&gt;
&lt;li&gt;if nothing is matched then nothing is returned...I have effectively a catchall match above.&lt;/li&gt;
&lt;li&gt;everything is cohesive, the template contains all matches....no secret ones hidden at the bottom of the file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;there's lots of holes here,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how does this interact with existing match templates?&lt;/li&gt;
&lt;li&gt;are the a different syntax for the same thing?&lt;/li&gt;
&lt;li&gt;how do they work with includes and imports?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;my guesses are...they ARE just different syntax for the existing infrastructure...because thats the smallest change.
and then the other questions are answered by how the above syntax maps into "priority" but tbh, as I barely know how the current priority rules work, I can't really give a sensible guess.&lt;/p&gt;
&lt;p&gt;tbh, if this is just different syntax then secret matches CAN exist elsewhere in the spaghetti, but at least the programmer does have a construct to not do that, rather than the default contract to lack cohesion from the outset.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1055 created</title>
   <pubDate>Fri, 1 Mar 2024 13:20:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1055</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1055</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:variable/@as - simplifying the language - attempt 2&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've thought about it.&lt;/p&gt;
&lt;p&gt;The key issue I had which genuinely caused me years of confusion (I didnt understand it so I ignored it, and dealt with it by typeing random xslt code)....this....&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:variable name="presentationMediaElement" as="element(urn:presentationMedia)"&amp;gt;
                &amp;lt;presentationMedia/&amp;gt;
            &amp;lt;/xsl:variable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if I don't declare the "as" then it does something different and confusing (it assumes its a document element &lt;strong&gt;I think&lt;/strong&gt;, though I NEVER want it to do this).&lt;/p&gt;
&lt;p&gt;so for stylesheets declared as version "4.0"+, can we make the default interpretation of that its an element?&lt;/p&gt;
&lt;p&gt;Does this breaks backwards compatability with v1? tbh, the code is already incompatible because the equivalent 1.0 code requires &lt;code&gt;node-set&lt;/code&gt;, its already broken, so I suggest making the fix simple to understand.&lt;/p&gt;
&lt;p&gt;why is this so irksome to me?
because for me its &lt;strong&gt;incredibly&lt;/strong&gt; confusing&lt;/p&gt;
&lt;p&gt;its confusing because (and i didnt express this well the last time), it makes a type declaration have inconsistent behaviours.&lt;/p&gt;
&lt;p&gt;In languages with OO (is it reynolds?) type systems this also happens  BUT in an OO type system an expression has a type than can be cast to a &lt;strong&gt;subtype&lt;/strong&gt; and a subtype is very special because everything that is true of the supertype (in the constained type logic) is true of the subtype (you can express this in terms of set/class membership in a universe if thats how you think about these things).&lt;/p&gt;
&lt;p&gt;but in this case, this isnt the case....the two interpretations are disjoint, this isnt a cast.&lt;/p&gt;
&lt;p&gt;So the concrete proposal is uniquely define the semantics of.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;             &amp;lt;xsl:variable name="presentationMediaElement"&amp;gt;
                &amp;lt;presentationMedia/&amp;gt;
            &amp;lt;/xsl:variable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to be&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:variable name="presentationMediaElement" as="element(urn:presentationMedia)"&amp;gt;
                &amp;lt;presentationMedia/&amp;gt;
            &amp;lt;/xsl:variable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;from 4.0 onwards.&lt;/p&gt;
&lt;p&gt;(ironically, personally i will probably still put the "as" clause in, but if i were trying to learn the language today I'd understand this on day 1, not day 1000).&lt;/p&gt;
&lt;p&gt;P.S.&lt;/p&gt;
&lt;p&gt;I have a suspicion I still dont fully understand it, but i'm sure someone will point that out in due course.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1054 created</title>
   <pubDate>Fri, 1 Mar 2024 10:50:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1054</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1054</guid>
   <description>&lt;div&gt;&lt;p&gt;Spec fn:message #id using old name fn:log&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-message&lt;/li&gt;
&lt;li&gt;https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-log&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1018 closed</title>
   <pubDate>Thu, 29 Feb 2024 10:11:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1018</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1018</guid>
   <description>&lt;div&gt;&lt;p&gt;Output of parse-csv()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1053 created</title>
   <pubDate>Thu, 29 Feb 2024 10:06:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1053</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1053</guid>
   <description>&lt;div&gt;&lt;p&gt;1047 Default predicate for some#1 and every#1&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes the default predicate for &lt;code&gt;fn:some#1&lt;/code&gt; and &lt;code&gt;fn:every#1&lt;/code&gt; to be &lt;code&gt;fn:boolean#1&lt;/code&gt;, which takes the EBV of the items in the input sequence. The previous use of &lt;code&gt;fn:identity#1&lt;/code&gt; caused some unexpected behaviour.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1052 created</title>
   <pubDate>Thu, 29 Feb 2024 08:41:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1052</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1052</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-csv() - simplify output&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently parse-csv produces a structure like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map {
  "columns": map {
      "names": map{"one":1, "two":2},
      "fields": ("one", "two")
   }
  "rows":  (
     map{
        "fields": ("aaa", "bbb"),
        "field" fn($col){$this?fields[$col]}
    },
   map{
        "fields": ("ccc", "ddd"),
        "field" fn($col){$this?fields[$col]}
    }
 )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a number of ways this could be improved.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The structure is needlessly different from the return value of maps-to-arrays(). Users will get confused between the two representations, and will find it hard to switch from one to the other. For example, one delivers rows as sequences, the other delivers rows as arrays.&lt;/li&gt;
&lt;li&gt;There are too many levels in the structure; the expressions to select within it are unnecessarily complicated, and users will get poor diagnostics when they get it wrong.&lt;/li&gt;
&lt;li&gt;In this example (with two columns) for each row there is one map, one sequence, one function, and two strings - five values in all. The output of &lt;code&gt;csv-to-arrays&lt;/code&gt; has only three objects (one array and two strings). However hard an optimized implementation tries to reduce the overhead, the space occupied by a million-row parsed CSV is likely to be larger than needed.&lt;/li&gt;
&lt;li&gt;The use of sequences rather than arrays means that no JSON-serialization of the structure is possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I propose using a flatter structure, like this pseudo-code sketch:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map {
      "column-index": map{"one":1, "two":2},
      "columns": ["one", "two"]
      "rows": (
         ["aaa", "bbb"],
         ["ccc", "ddd"]
     )
     "get": fn($row, $col){$this?rows[$row]($col)}
     "size": fn(){count($this?rows)}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This doesn't meet all the objections outlined above; for example it represents rows as a sequence of arrays, which is consistent with &lt;code&gt;csv-to-arrays&lt;/code&gt;, but not JSON-serializable. But I think it's a considerable improvement.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1051 created</title>
   <pubDate>Wed, 28 Feb 2024 23:58:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1051</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1051</guid>
   <description>&lt;div&gt;&lt;p&gt;1043 Clarification of CSV edge cases&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Gives a more precise definition of blank rows and empty fields, and generally adds detail on how edge cases should be handled.&lt;/p&gt;
&lt;p&gt;Fix #1043.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1038 closed</title>
   <pubDate>Wed, 28 Feb 2024 22:23:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1038</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1038</guid>
   <description>&lt;div&gt;&lt;p&gt;Backwards incompatibility caused by use of EBV in callback functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1050 created</title>
   <pubDate>Wed, 28 Feb 2024 16:02:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1050</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1050</guid>
   <description>&lt;div&gt;&lt;p&gt;Potential (low-risk) Ambiguities in XPath EBNF&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;After demonstrating &lt;code&gt;iXML&lt;/code&gt; XPath grammar production at the meeting of 27th Feburary, it seemed worth recording some of the ambiguity issues encountered, if only so others might be aware of possible pitfalls.&lt;/p&gt;
&lt;p&gt;Please note that the &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#lexical-structure"&gt;Lexical Structure&lt;/a&gt; notes in the spec &lt;em&gt;do&lt;/em&gt; resolve these ambiguities, by extra-grammatical interpretations, most notably the choice of &lt;em&gt;longest conforming match&lt;/em&gt;, but for grammar/parsers which don't specify or support this, such as &lt;a href="https://invisiblexml.org/"&gt;InvisibleXML&lt;/a&gt;, ambiguities might arise, though there may be ameliorating changes to the resulting grammar that will resolve them. &lt;strong&gt;I am not advocating changes to the specification EBNF&lt;/strong&gt;  but merely noting where such problems might occur from my implementation experience, and potentially suggesting some workarounds.&lt;/p&gt;
&lt;p&gt;Here are a couple of cases:&lt;/p&gt;
&lt;h3&gt;TypeName / AtomicOrUnionType&lt;/h3&gt;
&lt;p&gt;The rule for &lt;code&gt;ItemType &lt;/code&gt;is ~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ItemType ::= ... TypeName| .... | AtomicOrUnionType |  ... &lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;where both &lt;code&gt;TypeName &lt;/code&gt;and &lt;code&gt;AtomicOrUnionType&lt;/code&gt; resolve solely to the &lt;code&gt;EQName &lt;/code&gt;production. The grammar interpretation notes suggests (I think) that it binds to &lt;code&gt;TypeName&lt;/code&gt; if such exists in the current static context, which is an extra-grammatical concept, but I may be mistaken.&lt;/p&gt;
&lt;h3&gt;StringTemplate&lt;/h3&gt;
&lt;p&gt;The productions for StringTemplate are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[106]   	StringTemplate	             ::=   	"`" (StringTemplateFixedPart | StringTemplateVariablePart)* "`"	
[107]   	StringTemplateFixedPart	     ::=   	((Char - ('{' | '}' | '`')) | "{{" | "}}" | "``")*
[108]   	StringTemplateVariablePart   ::=   	EnclosedExpr 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where it relies on &lt;em&gt;longest match&lt;/em&gt; semantics to avoid ambiguity. (If this was not the case a potential infinity of empty  &lt;code&gt;StringTemplateFixedPart&lt;/code&gt; productions could be satisfied, or any sequential partitions of a sequence of characters.)&lt;/p&gt;
&lt;p&gt;An alternative (recursive and more cumbersome) formulation, which avoids the ambiguity is (in an iXML grammar for compactness):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;               StringTemplate: -"`", StringTemplateContent?, -"`".
       -StringTemplateContent: StringTemplateFixedPart |
                               StringTemplateVariablePart |
                               StringTemplateVariablePart, StringTemplateContent |
                               StringTemplateFixedPart, StringTemplateVariablePart, StringTemplateContent?.
      StringTemplateFixedPart: ("{{"; "}}"; "``"; ~["`{}"])+.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;StringTemplateVariablePart&lt;/code&gt; remains unchanged. (iXML doesn't support character set subtraction, so &lt;code&gt;~["``{}"]&lt;/code&gt; (&lt;em&gt;any character except...&lt;/em&gt;) is used for the &lt;code&gt;Char -  ....&lt;/code&gt; term.) By allowing a fixed part only to be followed by a variable part, this effectively permits the content either to be empty, or a sequence of parts such that &lt;code&gt;StringTemplateVariablePart&lt;/code&gt; terms can be consecutive, but not &lt;code&gt;StringTemplateFixedPart&lt;/code&gt; and it seems to work effectively, at least in my iXML parser.&lt;/p&gt;
&lt;p&gt;Reactions, corrections, remarks, praise and brickbats welcome.
I'll document any more as I find them.
John&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1049 created</title>
   <pubDate>Wed, 28 Feb 2024 13:46:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1049</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1049</guid>
   <description>&lt;div&gt;&lt;p&gt;340-partial fn:format-number: Specifying decimal format&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The PR introduces an additional &lt;code&gt;$format&lt;/code&gt; argument to &lt;code&gt;fn:format-number&lt;/code&gt;, which allows you to override decimal formats with custom properties.&lt;/p&gt;
&lt;p&gt;Next, we may need to clarify if the current specification already allows processors to provide custom decimal formats (https://github.com/qt4cg/qtspecs/issues/340#issuecomment-1968856655). It’s not part of this PR.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1048 created</title>
   <pubDate>Wed, 28 Feb 2024 11:14:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1048</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1048</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-number: relax restrictions on exponent-separator (possibly minus-sign, percent, per-mille)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current rules for decimal formats are too restrictive (i.e., too much focused on Anglo-Saxon formatting rules). The most prominent case is the Arabic exponent-separator „character“, which consists of two characters: &lt;code&gt;عر&lt;/code&gt; (https://www.localeplanet.com/icu/ar/). The exponent separator of other locales is not restricted to a single character either. For example, &lt;code&gt;se-NO&lt;/code&gt; uses &lt;code&gt;·10^&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we include the ICU library in the analysis, we also find &lt;code&gt;minus-sign&lt;/code&gt;, &lt;code&gt;percent&lt;/code&gt; and &lt;code&gt;per-mille&lt;/code&gt; properties that are longer than 1 character. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;minus-sign&lt;/code&gt; character for &lt;code&gt;he&lt;/code&gt; consists of &lt;code&gt;200e&lt;/code&gt; and &lt;code&gt;002d&lt;/code&gt; (&lt;code&gt;200e&lt;/code&gt; is the Left-to-Right Mark).&lt;/li&gt;
&lt;li&gt;The Arabic &lt;code&gt;percent&lt;/code&gt; character consists of &lt;code&gt;066a&lt;/code&gt; and &lt;code&gt;061c&lt;/code&gt; (&lt;code&gt;061c&lt;/code&gt; is the “Arabic Letter Mark”).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;per-mille&lt;/code&gt; property of &lt;code&gt;en-US-posix&lt;/code&gt; is &lt;code&gt;0/00&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1047 created</title>
   <pubDate>Wed, 28 Feb 2024 10:13:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1047</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1047</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect note for `fn:some` and `fn:every`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;fn:some&lt;/code&gt; and &lt;code&gt;fn:every&lt;/code&gt; state (non-normatively):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"If the second argument is omitted or an empty sequence, the first argument must be a sequence of xs:boolean values.".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don't think this note is correct. If the default predicate &lt;code&gt;identity#1&lt;/code&gt; is used, it is coerced to the required type &lt;code&gt;function(item()) as xs:boolean&lt;/code&gt;, so the effective predicate is &lt;code&gt;fn($x as item()) as xs:boolean {identity($x)}&lt;/code&gt;. This atomises the result of calling &lt;code&gt;identity($x)&lt;/code&gt; and casts the result to &lt;code&gt;xs:boolean&lt;/code&gt;. Therefore expressions such as &lt;code&gt;some([true()])&lt;/code&gt; and &lt;code&gt;some(&amp;lt;a&amp;gt;true&amp;lt;/a&amp;gt;)&lt;/code&gt; return true, not an error.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1046 created</title>
   <pubDate>Wed, 28 Feb 2024 09:55:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1046</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1046</guid>
   <description>&lt;div&gt;&lt;p&gt;1038 take-while predicate no longer uses EBV&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See issue #1038, which pointed out compatibility problems with using EBV for callback predicates, as proposed in issue #919.&lt;/p&gt;
&lt;p&gt;In specifying &lt;code&gt;fn:take-while&lt;/code&gt; we anticipated acceptance of the proposal to use EBV for predicate callbacks; now that we have decided not to make that change, this PR brings &lt;code&gt;take-while&lt;/code&gt; into alignment with other functions using a predicate callback.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1016 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:31:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1016</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1016</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial comments on fn:parse-csv()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1042 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:30:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1042</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1042</guid>
   <description>&lt;div&gt;&lt;p&gt;1016 Editorial cleanup - csv-to-arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #236 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:28:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/236</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-236</guid>
   <description>&lt;div&gt;&lt;p&gt;map:build: sequence of keys&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1041 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:28:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1041</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1041</guid>
   <description>&lt;div&gt;&lt;p&gt;236 map:build: sequence of keys&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #988 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:22:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/988</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-988</guid>
   <description>&lt;div&gt;&lt;p&gt;960 Pinned and labeled values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 067 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 27 Feb 2024 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/02-27</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-02-27</guid>
</item><item>
   <title>Issue #485 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:19:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/485</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-485</guid>
   <description>&lt;div&gt;&lt;p&gt;Predeclared namespaces in XQuery&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1040 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:18:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1040</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1040</guid>
   <description>&lt;div&gt;&lt;p&gt;485 Predeclared namespaces in XQuery: output&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1029 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:14:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1029</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1029</guid>
   <description>&lt;div&gt;&lt;p&gt;Make argument of fn:void optional&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1032 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:14:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1032</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1032</guid>
   <description>&lt;div&gt;&lt;p&gt;1029 Make argument of fn:void optional&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1033 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:09:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1033</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1033</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-066-01 Add note that whitespace and comments in regexen are lexical constructs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #356 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:08:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/356</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-356</guid>
   <description>&lt;div&gt;&lt;p&gt;array:leaves&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #843 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:08:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/843</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-843</guid>
   <description>&lt;div&gt;&lt;p&gt;Standard, array &amp;amp; map functions: Equivalencies&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #872 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:08:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/872</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-872</guid>
   <description>&lt;div&gt;&lt;p&gt;Symmetry: fn:items-at → fn:get&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #990 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:08:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/990</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-990</guid>
   <description>&lt;div&gt;&lt;p&gt;Transitive closure on non-nodes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1007 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:08:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1007</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1007</guid>
   <description>&lt;div&gt;&lt;p&gt;How to invert a predicate function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1030 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:07:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1030</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1030</guid>
   <description>&lt;div&gt;&lt;p&gt;allow pattern matches in axis expression&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1034 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:05:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1034</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1034</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-066-xx Add note regarding absence of drop-while / skip-while&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1024 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:00:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1024</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1024</guid>
   <description>&lt;div&gt;&lt;p&gt;Precedence of `otherwise` operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1031 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:00:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1031</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1031</guid>
   <description>&lt;div&gt;&lt;p&gt;1024 Change precedence of 'otherwise' operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1003 closed</title>
   <pubDate>Tue, 27 Feb 2024 17:00:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1003</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1003</guid>
   <description>&lt;div&gt;&lt;p&gt;919 Use EBV in boolean callbacks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1045 created</title>
   <pubDate>Mon, 26 Feb 2024 13:22:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1045</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1045</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions to manage namespace usage&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Prior to saving XML generated in XQuery I often tweak the namespace usage.
This makes the XML lighter and clearer for the casual reader and is sometimes mandated by users and systems.
I think providing builtin solutions for these cases would ease these tasks.&lt;/p&gt;
&lt;p&gt;Common cases are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Remove unused prefixes
Example: the function presented at https://stackoverflow.com/questions/23002655/xquery-how-to-remove-unused-namespace-in-xml-node&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a namespace the default wherever it is used.
Example: &lt;code&gt;functx:change-element-ns-deep($nodes,$targetns,"")&lt;/code&gt;&lt;br/&gt;
See  http://www.xqueryfunctions.com/xq/functx_change-element-ns-deep.html&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove the use of all/some namespaces
Example: BaseX https://docs.basex.org/wiki/Utility_Module#util:strip-namespaces&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A somewhat related issue https://github.com/qt4cg/qtspecs/issues/266&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 067 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 26 Feb 2024 11:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/02-27</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-02-27</guid>
</item><item>
   <title>Issue #1044 created</title>
   <pubDate>Mon, 26 Feb 2024 10:50:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1044</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1044</guid>
   <description>&lt;div&gt;&lt;p&gt;CSV row delimiter - allowed values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Section 15.4.2.1 says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The row delimiter defaults to matching any of CRLF (
), LF (
), or CR (
). Valid values for the row delimiter are a single Unicode character, or one of CRLF, LF, or CR, that has not been marked for use as the column delimiter. Implementations must raise [[err:FOCV0002](] if the row-delimiter option is set to a multi-character string other than CRLF (
)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;It's not entirely clear to me what this is saying. Are alternative row delimiters other than newline delimiters allowed (&lt;code&gt;row-delimiter:('|','/')&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;The statement in this section doesn't align with the error conditions appearing in the actual function specs, which says: "A dynamic error [[err:FOCV0002] occurs if one or more of the values for field-delimiter or quote-character are specified and are not a single character." - no mention here of the row-delimiter.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1043 created</title>
   <pubDate>Mon, 26 Feb 2024 08:59:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1043</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1043</guid>
   <description>&lt;div&gt;&lt;p&gt;CSV parsing - "blank" rows&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The CSV parsing specification states "A blank row is represented as an empty array.".&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It's not clear what "blank" means here. Does it depend on the whitespace-trimming option?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It would be more logical to return an array containing a single zero-length string, since any other line containing no field delimiter is considered to contain one field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alternatively, it might make sense to ignore the row entirely.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1042 created</title>
   <pubDate>Mon, 26 Feb 2024 00:11:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1042</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1042</guid>
   <description>&lt;div&gt;&lt;p&gt;1016 Editorial cleanup - csv-to-arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The changes here are almost entirely editorial, reordering material, removing duplication and changing some of the language for consistency with the rest of the spec. There is one substantive change - the function &lt;code&gt;csv-to-simple-rows&lt;/code&gt; is renamed &lt;code&gt;csv-to-arrays&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fix #1016&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1041 created</title>
   <pubDate>Fri, 23 Feb 2024 10:47:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1041</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1041</guid>
   <description>&lt;div&gt;&lt;p&gt;236 map:build: sequence of keys&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #236&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1040 created</title>
   <pubDate>Fri, 23 Feb 2024 09:23:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1040</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1040</guid>
   <description>&lt;div&gt;&lt;p&gt;485 Predeclared namespaces in XQuery: output&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #485&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1039 created</title>
   <pubDate>Thu, 22 Feb 2024 09:42:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1039</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1039</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow dynamic collations in XQuery "order by" and "group by"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that in "order by" and "group by" clauses, the keyword "collation" should be followed by an expression rather than by a URILiteral.&lt;/p&gt;
&lt;p&gt;The only problem this causes is if the expression depends on variables in the tuple stream, because obviously the collation must be selected for the tuple stream as a whole, not for each individual tuple.&lt;/p&gt;
&lt;p&gt;We can solve this problem by amending the rules for the scope of variables bound in FLWOR expressions (§4.15.1 rule 1) so that collation expressions are excluded from the scope; or perhaps (it might be simpler) to make it a static error if the collation expression refers to a variable bound in the containing FLWOR expression.&lt;/p&gt;
&lt;p&gt;If the syntax allows a general expression then a simple &lt;code&gt;"quoted-string"&lt;/code&gt; will be interpreted as a &lt;code&gt;StringLiteral&lt;/code&gt; rather than a &lt;code&gt;URILiteral&lt;/code&gt;. As far as I'm aware the two things are syntactically and semantically identical so this isn't a problem.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1038 created</title>
   <pubDate>Wed, 21 Feb 2024 21:03:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1038</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1038</guid>
   <description>&lt;div&gt;&lt;p&gt;Backwards incompatibility caused by use of EBV in callback functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changing fn:filter and similar functions that existed in 3.1 to use the EBV of the callback function's result has introduced a backwards incompatibility. In 3.1, the function conversion rules were used to convert the callback function's result to &lt;code&gt;xs:boolean&lt;/code&gt;. This involves atomization. If the callback returned the untyped node &lt;code&gt;&amp;lt;a&amp;gt;false&amp;lt;/a&amp;gt;&lt;/code&gt;, this is atomised as &lt;code&gt;false()&lt;/code&gt;, but its EBV is &lt;code&gt;true()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Revealed by test case fn:filter-006.&lt;/p&gt;
&lt;p&gt;I think it's unlikely to happen much in practice, but it's a bit nasty. Perhaps we shouldn't make the change to use EBV for functions that existed in 3.1?&lt;/p&gt;
&lt;p&gt;Perhaps we should even consider reverting the change entirely. It's not exactly essential.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1037 created</title>
   <pubDate>Wed, 21 Feb 2024 17:22:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1037</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1037</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:json-to-xml: 'number-parser' option&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A function supplied via the &lt;code&gt;number-parser&lt;/code&gt; option of &lt;code&gt;fn:json-to-xml&lt;/code&gt; is now allowed to return zero or &lt;del&gt;more&lt;/del&gt; &lt;strong&gt;one&lt;/strong&gt; items (see #973). Analogous to the &lt;code&gt;action&lt;/code&gt; argument of &lt;code&gt;fn:replace&lt;/code&gt;, the result should be converted to a string by invoking &lt;code&gt;fn:string&lt;/code&gt; on the result. An example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;json-to-xml('-1', map { 'number-parser': abs#1 })
→ &amp;lt;fn:number&amp;gt;1&amp;lt;/fn:number&amp;gt;

json-to-xml('1', map { 'number-parser': fn { true#0 } })
→ err:FOTY0013
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No change is required for &lt;code&gt;fn:parse-json&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1036 created</title>
   <pubDate>Wed, 21 Feb 2024 13:19:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1036</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1036</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-json: liberal parsing&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I noticed that some new test cases (&lt;a href="https://github.com/qt4cg/qt4tests/blob/1859042e97f5d2ce4917bd3eef7beae4e5f64171/fn/parse-json.xml#L960-L973"&gt;&lt;code&gt;fn-parse-json-712&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;fn-parse-json-716&lt;/code&gt;, possibly others) rely on specific liberal parsing rules.&lt;/p&gt;
&lt;p&gt;@michaelhkay Do you think that it could make sense to formalize some of those rules, or should we rather fix the test cases?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1005 closed</title>
   <pubDate>Wed, 21 Feb 2024 10:29:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1005</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1005</guid>
   <description>&lt;div&gt;&lt;p&gt;regular expressions - whitespace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #709 closed</title>
   <pubDate>Wed, 21 Feb 2024 10:29:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/709</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-709</guid>
   <description>&lt;div&gt;&lt;p&gt;(Un)Checked Evaluation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #459 closed</title>
   <pubDate>Wed, 21 Feb 2024 10:28:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/459</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-459</guid>
   <description>&lt;div&gt;&lt;p&gt;Eager and lazy evaluation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #135 closed</title>
   <pubDate>Wed, 21 Feb 2024 10:28:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/135</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-135</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays' counterparts for functions on sequences, and vice versa&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #94 closed</title>
   <pubDate>Wed, 21 Feb 2024 10:28:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/94</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-94</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions that determine if a given sequence is a subsequence of another sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #43 closed</title>
   <pubDate>Wed, 21 Feb 2024 10:28:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/43</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-43</guid>
   <description>&lt;div&gt;&lt;p&gt;Support standard and user-defined composite values using item type definitions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1001 closed</title>
   <pubDate>Tue, 20 Feb 2024 23:53:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1001</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1001</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:subsequence-where: equivalent `fn:slice` expression&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1020 closed</title>
   <pubDate>Tue, 20 Feb 2024 23:51:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1020</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1020</guid>
   <description>&lt;div&gt;&lt;p&gt;When to apply the coercion rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1035 created</title>
   <pubDate>Tue, 20 Feb 2024 19:04:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1035</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1035</guid>
   <description>&lt;div&gt;&lt;p&gt;Add default values for parameters in constructor functions for records&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have added implicit constructor functions for named record types; we should allow the parameters in these functions to take explicit default values.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;declare item type my:complex as record(r as xs:double, i as xs:double := 0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;At the same time we might consider introducing fixed values, for example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;declare item type my:rectangle as record(height, width, area ::= function($rect){$rect?height * $rect?width))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;in which (a) the area function must NOT be supplied as an argument to the constructor function call, and (b) a map in which the area field is different from this fixed value is not a valid instance of the &lt;code&gt;my:rectangle&lt;/code&gt; record type.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1034 created</title>
   <pubDate>Tue, 20 Feb 2024 18:56:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1034</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1034</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-066-xx Add note regarding absence of drop-while / skip-while&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In response to comments noted in the minutes of meeting 066, and made in writing against PR #1008, add a note justifying the absence of drop-while or skip-while functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1033 created</title>
   <pubDate>Tue, 20 Feb 2024 18:44:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1033</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1033</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-066-01 Add note that whitespace and comments in regexen are lexical constructs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds a note explaining why whitespace and comments are not explicit in the regex grammar; see action QT4CG-066-01&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1032 created</title>
   <pubDate>Tue, 20 Feb 2024 18:25:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1032</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1032</guid>
   <description>&lt;div&gt;&lt;p&gt;1029 Make argument of fn:void optional&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Allows the use of &lt;code&gt;fn:void#0&lt;/code&gt; when required.&lt;/p&gt;
&lt;p&gt;Fix #1029&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1031 created</title>
   <pubDate>Tue, 20 Feb 2024 18:07:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1031</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1031</guid>
   <description>&lt;div&gt;&lt;p&gt;1024 Change precedence of 'otherwise' operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes the precedence of the &lt;code&gt;otherwise&lt;/code&gt; operator so that &lt;code&gt;@price otherwise @cost * 2&lt;/code&gt; now means &lt;code&gt;@price otherwise (@cost * 2)&lt;/code&gt; rather than &lt;code&gt;(@price otherwise @cost) * 2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fix #1024&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 066 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 20 Feb 2024 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/02-20</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-02-20</guid>
</item><item>
   <title>Issue #999 closed</title>
   <pubDate>Tue, 20 Feb 2024 17:25:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/999</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-999</guid>
   <description>&lt;div&gt;&lt;p&gt;regular expression addition - comments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1022 closed</title>
   <pubDate>Tue, 20 Feb 2024 17:25:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1022</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1022</guid>
   <description>&lt;div&gt;&lt;p&gt;999 Allow comments in regular expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1028 closed</title>
   <pubDate>Tue, 20 Feb 2024 17:22:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1028</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1028</guid>
   <description>&lt;div&gt;&lt;p&gt;960(partial) Recognize alternative representation of JSON null&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #617 closed</title>
   <pubDate>Tue, 20 Feb 2024 17:19:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/617</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-617</guid>
   <description>&lt;div&gt;&lt;p&gt;Implicit constructor functions for record types and union types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #953 closed</title>
   <pubDate>Tue, 20 Feb 2024 17:19:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/953</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-953</guid>
   <description>&lt;div&gt;&lt;p&gt;617 Define record constructors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1002 closed</title>
   <pubDate>Tue, 20 Feb 2024 17:16:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1002</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1002</guid>
   <description>&lt;div&gt;&lt;p&gt;Reinstate subsequence-before&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1008 closed</title>
   <pubDate>Tue, 20 Feb 2024 17:16:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1008</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1008</guid>
   <description>&lt;div&gt;&lt;p&gt;1002 Add fn:take-while function (replacing subsequence-before)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #655 closed</title>
   <pubDate>Tue, 20 Feb 2024 17:13:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/655</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-655</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:sort-with: Comparators&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #795 closed</title>
   <pubDate>Tue, 20 Feb 2024 17:13:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/795</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-795</guid>
   <description>&lt;div&gt;&lt;p&gt;655 fn:sort-with&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1023 closed</title>
   <pubDate>Tue, 20 Feb 2024 17:09:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1023</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1023</guid>
   <description>&lt;div&gt;&lt;p&gt;1020 explain consequences of function coercion&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1025 closed</title>
   <pubDate>Tue, 20 Feb 2024 17:04:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1025</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1025</guid>
   <description>&lt;div&gt;&lt;p&gt;1001 Fix incorrect operator precedence in subsequence-where&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1030 created</title>
   <pubDate>Tue, 20 Feb 2024 14:37:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1030</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1030</guid>
   <description>&lt;div&gt;&lt;p&gt;allow pattern matches in axis expression&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There's a danger that this already exists, and that i dont know about it, but i dont think it does.&lt;/p&gt;
&lt;p&gt;Consider this SO question.&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/78027093/selecting-preceding-cousins-inclusing-siblings&lt;/p&gt;
&lt;p&gt;the questioner is writing this&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/root/level1/level2[@id='6']/preceding::level2[parent::level1[parent::root]][1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;eeek...look at the nasty nested predicates&lt;/p&gt;
&lt;p&gt;when he/she wants to write this&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/root/level1/level2[@id='6']/preceding::(root/level/level2)[1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;there is an answer on the question which sort of shows how horrific the problem is in general.&lt;/p&gt;
&lt;p&gt;(its a problem that crops up quite a lot for me)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1029 created</title>
   <pubDate>Tue, 20 Feb 2024 09:50:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1029</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1029</guid>
   <description>&lt;div&gt;&lt;p&gt;Make argument of fn:void optional&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If you want to supply a function that always returns an empty sequence, fn:void#0 would be useful; but currently there is no arity-zero variant.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;map:build(...., combine:=fn:void#0)&lt;/code&gt; returns a map in which any key that occurs more than once in the input is mapped to an empty sequence.&lt;/p&gt;
&lt;p&gt;The first argument of &lt;code&gt;fn:void&lt;/code&gt; should default to an empty sequence.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 066 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 19 Feb 2024 14:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/02-20</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-02-20</guid>
</item><item>
   <title>Pull request #1028 created</title>
   <pubDate>Mon, 19 Feb 2024 11:34:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1028</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1028</guid>
   <description>&lt;div&gt;&lt;p&gt;960(partial) Recognize alternative representation of JSON null&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Defines an option in parse-json and json-doc to define a representation for JSON null, defaulting to &lt;code&gt;()&lt;/code&gt; as currently used. Selecting a different value may be useful because it bypasses the problem that the &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;??&lt;/code&gt; operators flatten the results, causing &lt;code&gt;()&lt;/code&gt; to be elided.&lt;/p&gt;
&lt;p&gt;Suggests use of the QName &lt;code&gt;fn:null&lt;/code&gt; as an alternative representation; and changes the JSON serialization method to recognize this QName as a representation of null.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1027 created</title>
   <pubDate>Sat, 17 Feb 2024 22:21:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1027</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1027</guid>
   <description>&lt;div&gt;&lt;p&gt;150 fn:ranks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As proposed and discussed  here: https://github.com/qt4cg/qtspecs/issues/150&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1026 created</title>
   <pubDate>Sat, 17 Feb 2024 09:44:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1026</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1026</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT match patterns on pinned maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Given that &lt;code&gt;&amp;lt;xsl:apply-templates select="pin(.)??course?code"/&amp;gt;&lt;/code&gt; will select items that are labeled with their position in the containing tree of maps and arrays, it should be possible to match the selected items with a match pattern of the form&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match="?course?code"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;that operates in a similar way to patterns such as &lt;code&gt;course/code&lt;/code&gt; in XML.&lt;/p&gt;
&lt;p&gt;Perhaps the pinning of the map should be done automatically by the &lt;code&gt;xsl:apply-templates&lt;/code&gt; instruction.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1025 created</title>
   <pubDate>Tue, 13 Feb 2024 21:25:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1025</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1025</guid>
   <description>&lt;div&gt;&lt;p&gt;1001 Fix incorrect operator precedence in subsequence-where&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fixes the "equivalent expression" to subsequence-where.&lt;/p&gt;
&lt;p&gt;Fix issue #1001&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1024 created</title>
   <pubDate>Tue, 13 Feb 2024 21:10:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1024</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1024</guid>
   <description>&lt;div&gt;&lt;p&gt;Precedence of `otherwise` operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I made a mistake when specifying subsequence-where, caused by misunderstanding the precedence of the &lt;code&gt;otherwise&lt;/code&gt; operator: see issue #1001.&lt;/p&gt;
&lt;p&gt;In the expression&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $start := index-where($input, $from)[1] 
              otherwise count($input) + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I failed to realise that &lt;code&gt;otherwise&lt;/code&gt; binds more tightly than &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I'm opening the issue to solicit views as to whether we have got this right.&lt;/p&gt;
&lt;p&gt;One might take the view that the closest thing to &lt;code&gt;otherwise&lt;/code&gt; in other familiar language is the ternary conditional operator, which has lower precedence than anything else including &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;; but then, its first operand is a boolean expression while it's relatively unlikely that the operands of &lt;code&gt;otherwise&lt;/code&gt; will be boolean. I'm therefore thinking that it might be best to put it between 'eq' and '||`, so&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$a eq $b otherwise $c || $d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;parses as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$a eq ($b otherwise ($c || $d))&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #827 closed</title>
   <pubDate>Tue, 13 Feb 2024 20:04:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/827</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-827</guid>
   <description>&lt;div&gt;&lt;p&gt;map:empty, map:exists ← array:empty, array:exists&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #779 closed</title>
   <pubDate>Tue, 13 Feb 2024 20:02:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/779</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-779</guid>
   <description>&lt;div&gt;&lt;p&gt;Hash/checksum function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #978 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:21:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/978</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-978</guid>
   <description>&lt;div&gt;&lt;p&gt;948 Reflected the comments of the CG on the specification of scan-left and scan-right&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 065 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 13 Feb 2024 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/02-13</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-02-13</guid>
</item><item>
   <title>Issue #720 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:18:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/720</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-720</guid>
   <description>&lt;div&gt;&lt;p&gt;From Records to Objects&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #985 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:18:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/985</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-985</guid>
   <description>&lt;div&gt;&lt;p&gt;720 Add lookup arrow expressions (method invocations)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #949 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:15:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/949</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-949</guid>
   <description>&lt;div&gt;&lt;p&gt;Partial Function Applications: Allow return of function name&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #972 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:15:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/972</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-972</guid>
   <description>&lt;div&gt;&lt;p&gt;949 Partial Function Applications: Allow return of function name&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #42 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:13:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/42</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-42</guid>
   <description>&lt;div&gt;&lt;p&gt;Relax type incompatibility in order by clause (impl. dep. instead of XPST0004)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #55 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:13:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/55</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-55</guid>
   <description>&lt;div&gt;&lt;p&gt;Provide an XML version of the stack trace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #79 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:12:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/79</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-79</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-normalize-space($e as node())&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #989 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:12:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/989</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-989</guid>
   <description>&lt;div&gt;&lt;p&gt;character sequence constructor 'a' to 'z'&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #994 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:12:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/994</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-994</guid>
   <description>&lt;div&gt;&lt;p&gt;Invoking maps &amp;amp; arrays: allow sequences?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1009 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:08:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1009</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1009</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-064-03, QT4CG-064-04: Examples, Return type of `fallback`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1010 closed</title>
   <pubDate>Tue, 13 Feb 2024 17:08:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1010</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1010</guid>
   <description>&lt;div&gt;&lt;p&gt;1009 Examples, Return type of parse-json:fallback&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #916 closed</title>
   <pubDate>Tue, 13 Feb 2024 15:33:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/916</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-916</guid>
   <description>&lt;div&gt;&lt;p&gt;720 Allow methods in maps with access to $this&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1023 created</title>
   <pubDate>Tue, 13 Feb 2024 12:39:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1023</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1023</guid>
   <description>&lt;div&gt;&lt;p&gt;1020 explain consequences of function coercion&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds explanatory material to explain my interpretation of the spec and the consequences on backwards compatibility. No change to the spec is proposed. (To review the PR, I suggest reading the change markings in the XQuery spec.)&lt;/p&gt;
&lt;p&gt;Fix issue #1020&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1022 created</title>
   <pubDate>Tue, 13 Feb 2024 11:51:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1022</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1022</guid>
   <description>&lt;div&gt;&lt;p&gt;999 Allow comments in regular expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #999&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1021 created</title>
   <pubDate>Mon, 12 Feb 2024 12:46:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1021</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1021</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend `fn:doc`, `fn:collection` and `fn:uri-collection` with options maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;fn:doc&lt;/code&gt;, &lt;code&gt;fn:collection&lt;/code&gt; and &lt;code&gt;fn:uri-collection&lt;/code&gt; currently expect only a single argument, a URI.&lt;/p&gt;
&lt;p&gt;There is no way of adding additional parameters to those functions.&lt;/p&gt;
&lt;p&gt;Several implementations of XPath have worked around that limitation by&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;passing of parameters via query string as part of the URI:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;see https://www.saxonica.com/documentation10/index.html#!sourcedocs/collections&lt;/li&gt;
&lt;li&gt;exist-db's implementation of &lt;code&gt;uri-collection&lt;/code&gt; works similarly&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;create custom functions in other namespaces to add an options map as a second parameter&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;saxon:doc&lt;/code&gt; in Saxon https://www.saxonica.com/documentation10/index.html#!changes/extensions/9.7-9.8&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch:doc&lt;/code&gt; in baseX https://docs.basex.org/wiki/Fetch_Module#fetch:doc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While both approaches do work well, they do fall flat in terms of interoperability and discoverability.
A script written for Saxon leveraging &lt;code&gt;saxon:doc&lt;/code&gt; will not work on baseX in vice versa even though they offer options with some overlap.
And a developer looking at the language specification will not discover that these options even exist.&lt;/p&gt;
&lt;p&gt;I would like to add a second signature to the above functions with an options map as a second argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:doc($href as xs:string?) as document-node()?
fn:doc($href as xs:string?, $options as map(xs:string, *)? := ()) as document-node()?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: Looking at the other two functions below I believe the first parameter should be defined as &lt;code&gt;$href as xs:string? := ()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:collection( $uri as xs:string? := ()) as item()*
fn:collection( $uri as xs:string? := (), $options as map(xs:string, *)? := ()) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:uri-collection( $uri as xs:string? := ()) as xs:anyURI*
fn:uri-collection( $uri as xs:string? := (), $options as map(xs:string, *)? := ()) as xs:anyURI*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since a lot of those options depend on the current runtime most of them will be "free" options.
This will also help us get to a specification quickly and circumvent long infighting about some very specific details.&lt;/p&gt;
&lt;p&gt;I do see, however, a good chance of specifying a small set of options that would work across implementations.&lt;/p&gt;
&lt;h2&gt;Possible standard options&lt;/h2&gt;
&lt;h3&gt;For &lt;code&gt;fn:doc&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;validation&lt;/code&gt;: wether and how to validate the input files against a schema&lt;/li&gt;
&lt;li&gt;&lt;code&gt;whitespace&lt;/code&gt;: (&lt;code&gt;strip-space&lt;/code&gt;, &lt;code&gt;stripws&lt;/code&gt;) what to do with whitespace in the input document&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parser&lt;/code&gt;: could be used to define a different parser (for html documents)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;For &lt;code&gt;collection&lt;/code&gt; and &lt;code&gt;uri-collection&lt;/code&gt; I see the following:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;recurse&lt;/code&gt;: traverse collection trees down into its subcollections&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: this is already vaguely mentioned in the spec and would benefit from a clearer specification&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: (aka &lt;code&gt;media-type&lt;/code&gt; or &lt;code&gt;content-type&lt;/code&gt;) while the allowed values will be implementation defined the key should be standardised&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This would bring the above functions to follow a pattern developers are already familiar with (see &lt;code&gt;fn:serialize&lt;/code&gt; and others)&lt;/p&gt;
&lt;p&gt;Thanks for initial input by @ChristianGruen, Liam Quin and @michaelhkay&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 065 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 12 Feb 2024 11:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/02-13</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-02-13</guid>
</item><item>
   <title>Issue #1020 created</title>
   <pubDate>Sun, 11 Feb 2024 23:56:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1020</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1020</guid>
   <description>&lt;div&gt;&lt;p&gt;When to apply the coercion rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The rules for function calling say that the coercion rules are applied to the values supplied as function arguments; they are also applied in other circumstances such as when binding values to variables. The coercion rules are applied (as far as the spec is concerned) whether or not the supplied value already matches the required type.&lt;/p&gt;
&lt;p&gt;Saxon has always attempted to optimise this process: if the supplied value is already an instance of the required type, no coercion takes place.&lt;/p&gt;
&lt;p&gt;I have discovered at least one case where this assumption is incorrect: the coercion rules are not idempotent in the case where the supplied value matches the required type. This case concerns function coercion, exemplified by the new test case FunctionCall-058: if the expected type of a callback parameter is &lt;code&gt;function(xs:integer) as xs:boolean&lt;/code&gt;, and the supplied value for the callback is a function that accepts &lt;code&gt;xs:decimal&lt;/code&gt;, then the coercion rules say that a call to the supplied function that supplies an &lt;code&gt;xs:decimal&lt;/code&gt; must be rejected as a type error even though the supplied function accepts it.&lt;/p&gt;
&lt;p&gt;Note that this means we have introduced a rather subtle backwards incompatibility. In XQuery 3.1, coercion was not applied to variable bindings, so the following would work (the supplied function matches the declared type of the variable):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare variable $f as function(xs:integer) as xs:boolean 
              := function($x as item()) as xs:boolean {string($x)};
return $f("banana");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(see new tests VarDecl065/066)&lt;/p&gt;
&lt;p&gt;In 4.0 I believe this is supposed to throw a type error, because the supplied function is wrapped in a wrapper function that checks that the supplied argument is an integer.&lt;/p&gt;
&lt;p&gt;We have extended the coercion rules considerably in 4.0, and we need to be confident that there are no other similar cases where the coercion rules are no longer idempotent.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1019 created</title>
   <pubDate>Sun, 11 Feb 2024 15:23:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1019</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1019</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Unknown option parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#option-parameter-conventions"&gt;option parameter conventions&lt;/a&gt; are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start="4"&gt;
&lt;li&gt;It is not an error if the options map contains options with names other than those described in this specification. Implementations MAY attach an ·implementation-defined· meaning to such entries, and MAY define errors that arise if such entries are present with invalid values. Implementations MUST ignore such entries unless they have a specific ·implementation-defined· meaning. Implementations that define additional options in this way SHOULD use values of type &lt;code&gt;xs:QName&lt;/code&gt; as the option names, using an appropriate namespace.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;The obvious consequence is that wrongly typed or unsupported options are not reported as such:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;serialize($node, map { 'format': 'html' })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think we should still allow proprietary options, but raise errors when an option is neither defined in the specification nor supported by the given implementation. On the one hand, this will help users to spot typos (e.g., &lt;code&gt;byte-order-mask&lt;/code&gt; or instead of &lt;code&gt;byte-order-mark&lt;/code&gt;). On the other hand, options that are supported by one implementation will be rejected, which feels reasonable to me, as options usually change either the result, or the way how the input is treated.&lt;/p&gt;
&lt;p&gt;If we believe that this change is too disruptive, we could tolerate entries with &lt;code&gt;xs:QName&lt;/code&gt; keys.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1018 created</title>
   <pubDate>Sun, 11 Feb 2024 07:01:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1018</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1018</guid>
   <description>&lt;div&gt;&lt;p&gt;Output of parse-csv()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose making some simplifications to the output of parse-csv() to make it more amenable to processing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Represent each row as a map, rather than as a structure with a data field and an accessor function. Note that implementations worried about memory usage can devise a custom map implementation optimised for the case where many maps have the same regular structure. (cf recent thread about Javascript "shapes")&lt;/li&gt;
&lt;li&gt;The key for a field in this map should be an integer if (i) column-names is set to false, or (ii) the column in question does not have a unique header name; in other cases it should be the name from the header.&lt;/li&gt;
&lt;li&gt;Replace the top-level &lt;code&gt;columns&lt;/code&gt; record with a simple array of field names. It's easy enough to map names to positions using index-of.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also propose changing the name to &lt;code&gt;csv-to-maps&lt;/code&gt; for consistency with &lt;code&gt;csv-to-table&lt;/code&gt; and &lt;code&gt;csv-to-arrays&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We should advocate use of csv-to-arrays where data is to be accessed positionally, and csv-to-maps where it is to be accessed by column names, and optimise the design accordingly.&lt;/p&gt;
&lt;p&gt;Looking at a use case, the first example (§15.4.7.1) would be unnecessary if as proposed we change csv-to-xml to generate XHTML directly, But if it were needed, it would change from&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $csv := fn:parse-csv(`name,city{$crlf}Bob,Berlin`)
return &amp;lt;table&amp;gt;
   &amp;lt;thead&amp;gt;{
      for $column in $csv?columns?fields
         return &amp;lt;th&amp;gt;{ $column }&amp;lt;/th&amp;gt;
   }&amp;lt;/thead&amp;gt;
   &amp;lt;tbody&amp;gt;{
      for $row in $csv?rows return &amp;lt;tr&amp;gt;
         { for $field in $row?fields return &amp;lt;td&amp;gt;{ $field }&amp;lt;/td&amp;gt; }
      &amp;lt;/tr&amp;gt;
   }&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $csv := fn:parse-csv(`name,city{$crlf}Bob,Berlin`)
return &amp;lt;table&amp;gt;
   &amp;lt;thead&amp;gt;{
      for $column in $csv?columns
         return &amp;lt;th&amp;gt;{ $column }&amp;lt;/th&amp;gt;
   }&amp;lt;/thead&amp;gt;
   &amp;lt;tbody&amp;gt;{
      for $row in $csv?rows return &amp;lt;tr&amp;gt;
         { for $column in $csv?columns return &amp;lt;td&amp;gt;{ $row?$column }&amp;lt;/td&amp;gt; }
      &amp;lt;/tr&amp;gt;
   }&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1017 created</title>
   <pubDate>Sun, 11 Feb 2024 06:20:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1017</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1017</guid>
   <description>&lt;div&gt;&lt;p&gt;Change csv-to-xml() to produce an XHTML table&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose (a) renaming &lt;code&gt;csv-to-xml&lt;/code&gt; as &lt;code&gt;csv-to-table&lt;/code&gt;, and (b) changing the output to be an XHTML table. Specifically, instead of outputting&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;csv xmlns="http://www.w3.org/2005/xpath-functions"&amp;gt;
   &amp;lt;columns&amp;gt;
      &amp;lt;column&amp;gt;name&amp;lt;/column&amp;gt;
      &amp;lt;column&amp;gt;city&amp;lt;/column&amp;gt;
   &amp;lt;/columns&amp;gt;
   &amp;lt;rows&amp;gt;
      &amp;lt;row&amp;gt;
         &amp;lt;field column="name"&amp;gt;Bob&amp;lt;/field&amp;gt;
         &amp;lt;field column="city"&amp;gt;Berlin&amp;lt;/field&amp;gt;
      &amp;lt;/row&amp;gt;
      &amp;lt;row&amp;gt;
         &amp;lt;field column="name"&amp;gt;Alice&amp;lt;/field&amp;gt;
         &amp;lt;field column="city"&amp;gt;Aachen&amp;lt;/field&amp;gt;
      &amp;lt;/row&amp;gt;
   &amp;lt;/rows&amp;gt;
&amp;lt;/csv&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it should output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
   &amp;lt;thead&amp;gt;
      &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;name&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;city&amp;lt;/th&amp;gt;
      &amp;lt;/tr&amp;gt;
   &amp;lt;/thead&amp;gt;
   &amp;lt;tbody&amp;gt;
      &amp;lt;tr&amp;gt;
         &amp;lt;td title="name"&amp;gt;Bob&amp;lt;/td&amp;gt;
         &amp;lt;td title="city"&amp;gt;Berlin&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
         &amp;lt;td title="name"&amp;gt;Alice&amp;lt;/td&amp;gt;
         &amp;lt;td title="city"&amp;gt;Aachen&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
   &amp;lt;/thead&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Benefits:&lt;/h3&gt;
&lt;p&gt;(a) the data is just as easy to manipulate or transform as the current output
(b) it can be copied directly into HTML transformation output if required
(c) it is familiar to users
(d) we don't have to write, test, and document a schema
(e) there may well be libraries that can perform further transformations on the structure, for example conversion to other table representations, extraction to spreadsheet formats, etc.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1016 created</title>
   <pubDate>Sat, 10 Feb 2024 21:02:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1016</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1016</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial comments on fn:parse-csv()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;(a) The spec says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first argument is CSV data, as defined in ..., in the form of a sequence of xs:string values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But in fact, the argument is a single (optional) xs:string value, not a sequence.&lt;/p&gt;
&lt;p&gt;(b) The spec says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If $csv is the empty sequence, implementations must return a parsed-csv-structure-record whose rows entry is the empty sequence.&lt;/p&gt;
&lt;p&gt;If $csv is the empty sequence, but column name extraction has been requested, or explicit column names have been supplied, then the parsed-csv-structure-record returned by implementations must have a rows entry whose value is the empty sequence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The second paragraph seems to add nothing to the first.&lt;/p&gt;
&lt;p&gt;(c) And the phrase "&lt;em&gt;implementations must return XXX&lt;/em&gt;" is unidiomatic. The normal form of words is "&lt;em&gt;the function returns XXX&lt;/em&gt;".&lt;/p&gt;
&lt;p&gt;(d) The grammar of the sentence "Handling of delimiters, and whitespace trimming, are handled using..." is inelegant.&lt;/p&gt;
&lt;p&gt;(e) References to the record type names (such as parsed-csv-structure-record) should be hyperlinked.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1015 created</title>
   <pubDate>Fri, 9 Feb 2024 12:52:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1015</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1015</guid>
   <description>&lt;div&gt;&lt;p&gt;1013 [XSLT] Clarify effect of accumulator capture on non-element nodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds a sentence saying that when an accumulator rule with capture="yes" matches a non-element node, the capture attribute has no effect.&lt;/p&gt;
&lt;p&gt;Fix #1013&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1014 created</title>
   <pubDate>Thu, 8 Feb 2024 13:43:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1014</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1014</guid>
   <description>&lt;div&gt;&lt;p&gt;Predicates, sequences of numbers: Feedback&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Feedback on #996:&lt;/p&gt;
&lt;h3&gt;Successful result: early exit&lt;/h3&gt;
&lt;p&gt;If the EBV is computed, and if the first item is a node, the remaining items are ignored:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;'OK'[ &amp;lt;a/&amp;gt;, 1, 'x' ]  →  'OK'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would suggest doing the same for predicates that start with a number:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a comparison is successful, an implementation should be allowed to skip the remaining comparisons.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;$seq&lt;/code&gt; starts with a number, &lt;code&gt;E[$seq]&lt;/code&gt; and &lt;code&gt;E[position() = $seq]&lt;/code&gt; will become equivalent:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;$seq[1 to 100, 'x']
$seq[position() = (1 to 100, 'x')]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, an error still needs to be raised if a comparisons leads to a type error.&lt;/p&gt;
&lt;h3&gt;Error Codes&lt;/h3&gt;
&lt;p&gt;If we don’t equate &lt;code&gt;E[$seq]&lt;/code&gt; and &lt;code&gt;E[position() = $seq]&lt;/code&gt;, it would be useful to stick with &lt;code&gt;FORG0006&lt;/code&gt; (instead of &lt;code&gt;XPTY0004&lt;/code&gt;) [1]:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It would be confusing to get &lt;code&gt;FORG0006&lt;/code&gt; for &lt;code&gt;E['x', 1]&lt;/code&gt; and &lt;code&gt;XPTY0004&lt;/code&gt; for &lt;code&gt;E[1, 'x']&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If a processor uses unified implementations for EBV and predicate checks, it leads to additional effort just because the error code differs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we use different error codes, existing tests need to be revised ([2], maybe others).&lt;/p&gt;
&lt;p&gt;[1] https://github.com/qt4cg/qtspecs/pull/996/files#diff-b37a92a9eb3ab9ba48a00de9627a1124466b9c86ecb2b4989d04be3942c597a6R8240
[2] https://github.com/qt4cg/qt4tests/blob/70e52c690a26bbeee0641af14ccb319a2cc98081/prod/Predicate.xml#L1158-L1165&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1012 closed</title>
   <pubDate>Thu, 8 Feb 2024 10:50:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1012</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1012</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix some incorrect examples in the F&amp;amp;O spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1013 created</title>
   <pubDate>Thu, 8 Feb 2024 09:14:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1013</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1013</guid>
   <description>&lt;div&gt;&lt;p&gt;[XSLT] Need to say what happens when a capturing accumulator rule matches a non-element node&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The option capture="yes" has been added to &lt;code&gt;xsl:accumulator-rule&lt;/code&gt;; its purpose is to indicate that the entire subtree under an element is to be captured during streamed processing of the document, and is made available as an in-memory tree once the element end tag has been processed.&lt;/p&gt;
&lt;p&gt;We need to say what happens when such a rule matches a node other than an element. I think it makes sense for the capture="yes" to be ignored, optionally with a warning.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1012 created</title>
   <pubDate>Thu, 8 Feb 2024 00:57:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1012</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1012</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix some incorrect examples in the F&amp;amp;O spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;No issue raised; the errors are revealed by the generated QT4 tests.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1011 created</title>
   <pubDate>Wed, 7 Feb 2024 20:52:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1011</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1011</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:transform() improvements&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;The spec talks about how to invoke an XSLT 1.0, 2.0, or 3.0 processor, but not a 4.0 processor.&lt;/li&gt;
&lt;li&gt;There is no way of supplying a source document in a way that allows streaming. Saxon has added a &lt;code&gt;source-location&lt;/code&gt; parameter for this purpose; this should be in the standard.&lt;/li&gt;
&lt;li&gt;If the stylesheet is to read streamed input, then there also needs to be control over whether and how it does schema validation.&lt;/li&gt;
&lt;li&gt;When calling from XSLT, the best default for &lt;code&gt;base-output-uri&lt;/code&gt; is probably the value of &lt;code&gt;current-output-uri()&lt;/code&gt;. The default is currently implementation-defined, but we should recommend this possibility.&lt;/li&gt;
&lt;li&gt;The post-process option was added with the aspiration that it would enable secondary result documents (xsl:result-document output) to be written directly (e.g. to filestore) as a side-effect. However, it fails to achieve this. There should probably be an option to request this even though we cannot define its semantics precisely.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1010 created</title>
   <pubDate>Wed, 7 Feb 2024 16:09:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1010</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1010</guid>
   <description>&lt;div&gt;&lt;p&gt;1009 Examples, Return type of parse-json:fallback&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #1009&lt;/p&gt;
&lt;p&gt;I’ve used this PR to fix some other buggy examples in the XQFO spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1009 created</title>
   <pubDate>Wed, 7 Feb 2024 13:59:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1009</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1009</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-064-03, QT4CG-064-04: Examples, Return type of `fallback`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Thanks for the attentive inspection of #975.&lt;/p&gt;
&lt;p&gt;The type &lt;code&gt;xs:untypedAtomic&lt;/code&gt; for the &lt;code&gt;fallback&lt;/code&gt; function of &lt;code&gt;fn:parse-json&lt;/code&gt; made no sense indeed: JSON escape sequence can never be converted to numbers. The return type will be &lt;code&gt;xs:anyAtomicType&lt;/code&gt; instead of &lt;code&gt;item()&lt;/code&gt; (the result will be converted to a string).&lt;/p&gt;
&lt;p&gt;I’ll revise the rules and add some examples.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #977 closed</title>
   <pubDate>Wed, 7 Feb 2024 13:09:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/977</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-977</guid>
   <description>&lt;div&gt;&lt;p&gt;Ignore this, it's just a test&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1008 created</title>
   <pubDate>Wed, 7 Feb 2024 11:12:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1008</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1008</guid>
   <description>&lt;div&gt;&lt;p&gt;1002 Add fn:take-while function (replacing subsequence-before)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds function &lt;code&gt;fn:take-while&lt;/code&gt;, replacing/reinstating previously proposed &lt;code&gt;items-before()&lt;/code&gt; and &lt;code&gt;subsequence-before()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fix #1002&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1007 created</title>
   <pubDate>Wed, 7 Feb 2024 09:45:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1007</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1007</guid>
   <description>&lt;div&gt;&lt;p&gt;How to invert a predicate function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's nice to be able to write&lt;/p&gt;
&lt;p&gt;&lt;code&gt;index-where($in, contains(?, 'e'))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to select all the items that contain an 'e'.&lt;/p&gt;
&lt;p&gt;What should we write in order to select all the items that do not contain an 'e'? All formulations seem a bit clumsy in comparison:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;index-where($in, fn{not(contains(., 'e'))})&lt;/code&gt;
&lt;code&gt;index-where($in, chain((contains(?, 'e'), not#1))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Perhaps this is a sufficiently common requirement that it would be helpful to allow&lt;/p&gt;
&lt;p&gt;&lt;code&gt;index-where($in, inverse(contains(?, 'e')))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;code&gt;inverse($predicate)&lt;/code&gt; is defined as &lt;code&gt;fn($it, $pos){not($predicate($it, $pos))}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1006 created</title>
   <pubDate>Wed, 7 Feb 2024 07:34:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1006</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1006</guid>
   <description>&lt;div&gt;&lt;p&gt;regular expression addition - word boundaries&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Could we provide support for the regex character sequence &lt;code&gt;\b&lt;/code&gt; for matching word boundaries?&lt;/p&gt;
&lt;p&gt;It’s already supported by some processors via vendor-specific flags, and would be very helpful even if didn’t over the full Unicode range.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1005 created</title>
   <pubDate>Wed, 7 Feb 2024 07:26:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1005</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1005</guid>
   <description>&lt;div&gt;&lt;p&gt;regular expressions - whitespace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There is some confusion about the rationale for defining the multi-character escape for whitespaces in a &lt;a href="https://xmlcom.slack.com/archives/C011NLXE4DU/p1707158555769749"&gt;recent discussion&lt;/a&gt; on Slack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\s&lt;/code&gt; is limited to &lt;code&gt;[#x20\t\n\r]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In contrast, &lt;code&gt;\w\&lt;/code&gt; covers &lt;code&gt;[#x0000-#x10FFFF]-[\p{P}\p{Z}\p{C}]&lt;/code&gt;, i.e., considers the full Unicode range&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do we know the reason?&lt;/p&gt;
&lt;p&gt;I assume it’s both too late and out of scope to change that in our specs, but maybe we can improve the XQFO spec and…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mention why &lt;code&gt;\s&lt;/code&gt; does not include &lt;code&gt;\p{Zs}&lt;/code&gt; or &lt;code&gt;\p{Z}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add an example for looking up non-breaking spaces… for example:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;matches(
  string-join(('my', 'pleasure'), char(0xA0)),
  '\p{Z}'
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1004 closed</title>
   <pubDate>Wed, 7 Feb 2024 06:56:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1004</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-1004</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:char updated as agreed 2024-02-06: drop the form char('#x20')&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1004 created</title>
   <pubDate>Wed, 7 Feb 2024 06:43:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1004</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1004</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:char updated as agreed 2024-02-06: drop the form char('#x20')&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The forms char('#32`) and char('#x20') are dropped.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #963 closed</title>
   <pubDate>Wed, 7 Feb 2024 06:41:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/963</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-963</guid>
   <description>&lt;div&gt;&lt;p&gt;Errors in forming function items (continued)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #888 closed</title>
   <pubDate>Wed, 7 Feb 2024 06:41:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/888</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-888</guid>
   <description>&lt;div&gt;&lt;p&gt;Reclassify XPDY0002 as a type error&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #992 closed</title>
   <pubDate>Wed, 7 Feb 2024 06:41:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/992</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-992</guid>
   <description>&lt;div&gt;&lt;p&gt;888, 963: Error handling for unsatisfied context dependencies&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #1003 created</title>
   <pubDate>Wed, 7 Feb 2024 00:05:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1003</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1003</guid>
   <description>&lt;div&gt;&lt;p&gt;919 Use EBV in boolean callbacks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes functions with a $predicate callback function to use the effective boolean value of the result, mainly to allow things like &lt;code&gt;index-where(*, fn{self::x})&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fix #919&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 064 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 6 Feb 2024 18:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/02-06</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-02-06</guid>
</item><item>
   <title>Issue #187 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:50:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/187</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-187</guid>
   <description>&lt;div&gt;&lt;p&gt;Add a 'while' clause to FLWOR expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #943 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:49:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/943</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-943</guid>
   <description>&lt;div&gt;&lt;p&gt;187 Add FLWOR expression while clause&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #260 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:46:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/260</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-260</guid>
   <description>&lt;div&gt;&lt;p&gt;array:index-of&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #968 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:46:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/968</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-968</guid>
   <description>&lt;div&gt;&lt;p&gt;260 array:index-of&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #969 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:43:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/969</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-969</guid>
   <description>&lt;div&gt;&lt;p&gt;843-partial Standard, array &amp;amp; map functions: Equivalencies&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #973 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:40:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/973</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-973</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-json, fn:json-to-xml: `number-parser`, `fallback`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #975 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:40:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/975</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-975</guid>
   <description>&lt;div&gt;&lt;p&gt;973 fn:parse-json, fn:json-to-xml: number-parser, fallback&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #984 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:37:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/984</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-984</guid>
   <description>&lt;div&gt;&lt;p&gt;959-partial Add fn:seconds function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #993 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:34:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/993</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-993</guid>
   <description>&lt;div&gt;&lt;p&gt;989 (partial) Allow char() to take integer argument&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #830 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:31:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/830</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-830</guid>
   <description>&lt;div&gt;&lt;p&gt;Revise appendix D.4 of F+O: Illustrative user-written functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #997 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:31:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/997</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-997</guid>
   <description>&lt;div&gt;&lt;p&gt;830 Drop F+O appendix D.4&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #816 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:28:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/816</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-816</guid>
   <description>&lt;div&gt;&lt;p&gt;Predicates: Support for numeric sequences &lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #996 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:28:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/996</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-996</guid>
   <description>&lt;div&gt;&lt;p&gt;816 Allow a predicate in a filter expression to be a sequence of numbers&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #995 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:25:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/995</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-995</guid>
   <description>&lt;div&gt;&lt;p&gt;937 (fn:hash) revised in light of CG feedback&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #628 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:22:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/628</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-628</guid>
   <description>&lt;div&gt;&lt;p&gt;distinct-values and duplicate-values: order of results&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #987 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:22:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/987</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-987</guid>
   <description>&lt;div&gt;&lt;p&gt;628 Define result order for distinct-values and duplicate-values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #911 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:19:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/911</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-911</guid>
   <description>&lt;div&gt;&lt;p&gt;Type "Promotion" in the coercion rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #980 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:19:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/980</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-980</guid>
   <description>&lt;div&gt;&lt;p&gt;911 Coercion to allow double to decimal etc&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #966 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:14:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/966</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-966</guid>
   <description>&lt;div&gt;&lt;p&gt;Rewrite spec of deep lookup operator: edits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #979 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:14:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/979</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-979</guid>
   <description>&lt;div&gt;&lt;p&gt;966 Minor fixes to deep lookup &lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #964 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:12:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/964</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-964</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:has-attributes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #970 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:11:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/970</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-970</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Context item → value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #971 closed</title>
   <pubDate>Tue, 6 Feb 2024 17:11:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/971</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-971</guid>
   <description>&lt;div&gt;&lt;p&gt;970 XQFO: Context item → value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1002 created</title>
   <pubDate>Tue, 6 Feb 2024 10:10:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1002</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1002</guid>
   <description>&lt;div&gt;&lt;p&gt;Reinstate subsequence-before&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There's a question on StackOverflow today:&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/77944304/&lt;/p&gt;
&lt;p&gt;that makes me think dropping &lt;code&gt;subsequence-before&lt;/code&gt; might have been a mistake (the replacement, &lt;code&gt;subsequence-where&lt;/code&gt;, doesn't allow the end condition to be exclusive).&lt;/p&gt;
&lt;p&gt;The question is how to find all the consecutive &lt;code&gt;list&lt;/code&gt; elements that follow a given &lt;code&gt;para&lt;/code&gt; element. That would be solved with &lt;code&gt;subsequence-before(following-sibling::*, fn{not(self::list)})&lt;/code&gt;. Doing it with &lt;code&gt;subsequence-where&lt;/code&gt; is much harder - you need to drop the final element in the result if it is not a &lt;code&gt;list&lt;/code&gt; element, while also taking into account that the result might be empty.&lt;/p&gt;
&lt;p&gt;I would like to propose reinstating subsequence-before; or perhaps inverting the predicate and naming it &lt;code&gt;subsequence-while()&lt;/code&gt;, so it becomes &lt;code&gt;subsequence-while(following-sibling::*, fn{self::list})&lt;/code&gt; assuming we accept the proposal in issue #919 to allow a callback predicate to use EBV.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1001 created</title>
   <pubDate>Mon, 5 Feb 2024 13:32:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1001</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1001</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:subsequence-where: equivalent `fn:slice` expression&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I probably should have tagged #940 with »Request Changes«, as I believe the equivalent expression with &lt;code&gt;fn:slice&lt;/code&gt; needs to be fixed (or removed if it turns out to be too quirky): https://github.com/qt4cg/qtspecs/pull/940#issuecomment-1919399348.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 064 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 5 Feb 2024 12:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/02-06</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-02-06</guid>
</item><item>
   <title>Issue #940 closed</title>
   <pubDate>Mon, 5 Feb 2024 12:19:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/940</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-940</guid>
   <description>&lt;div&gt;&lt;p&gt;878 Add subsequence-where function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1000 created</title>
   <pubDate>Sun, 4 Feb 2024 08:34:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1000</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1000</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO Code in the Rules sections&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In #978, it’s being discussed what is the best language for presenting code in the Rules sections of the XQFO specification. Currently, XPath is used for compact equivalencies, for example…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: array:size :)
count(array:members($array))

(: fn:remove :)
$input[not(position() = $positions)].
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...while XQuery is used for more complex expressions, including function declarations, or when the XPath representation would be syntactically more complex. Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: fn:deep-equal :)
declare function equal-strings(
  $string1   as xs:string,
  $string2   as xs:string, 
  $collation as xs:string,
  $options   as map(*)
) as xs:boolean {
  let $n1 := if ($options?whitespace = "normalize"))
             then normalize-unicode(?, $options?normalization-form) 
             else identity#1
  let $n2 := if ($options?normalize-space)
             then normalize-space#1 
             else identity#1               
  return compare($n1($n2($string1)), $n1($n2($string2)), $collation) eq 0    
}

(: fn:index-where :)
for $item at $pos in $input
where $predicate($item, $pos)
return $pos

(: …flatten, fold-left, while-do, others :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we have many cases in which XPath/XQuery code is omitted, either because the presented feature is basic enough, because the equivalent code would get too complicated, or (e.g., for &lt;code&gt;fn:doc&lt;/code&gt;) because it does not provide means to express the feature.&lt;/p&gt;
&lt;p&gt;We should strive for consistency and decide which language(s) the majority of us believes is the best choice…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;XPath &amp;amp; XQuery (what we currently have)&lt;/li&gt;
&lt;li&gt;XPath only&lt;/li&gt;
&lt;li&gt;XPath, XQuery and XSLT (whatever seems most appropriate)&lt;/li&gt;
&lt;li&gt;Other pseudocode&lt;/li&gt;
&lt;li&gt;Don’t use pseudocode at all  if it is too complex to be represented with moderately simple XPath code&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #999 created</title>
   <pubDate>Sun, 4 Feb 2024 04:00:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/999</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-999</guid>
   <description>&lt;div&gt;&lt;p&gt;regular expression addition - comments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The original Perl regular expression syntax allows comments with the x flag. They use # to introduce comments up to a newline.&lt;/p&gt;
&lt;p&gt;Maybe we could support XPath-style comments in regular expressions, such as &lt;code&gt;(:#.......#:)&lt;/code&gt; when the x flag is present?&lt;/p&gt;
&lt;p&gt;Today i use &lt;code&gt;(?:comment: stuff here )?&lt;/code&gt; but this requires that "stuff here" can be compiled into a regular expression!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #998 created</title>
   <pubDate>Sun, 4 Feb 2024 03:57:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/998</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-998</guid>
   <description>&lt;div&gt;&lt;p&gt;regular expression addition - lookbehind assertions and lookahead assertions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;look-ahead assertions are i think the most useful things not found in qt regular expressions, and also look-behind.&lt;/p&gt;
&lt;p&gt;This lets you do things like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  replace( ., '
     / ( [^/]+ ) (*positive_lookahead: /)
    ', '...', 'x')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;replacing components between /..../ but not consuming the trailing /, so that
/a/b/c/d/ comes out as /../../../../&lt;/p&gt;
&lt;p&gt;Perl uses
(?=pattern), (*pla:pattern), (*positive_lookahead:pattern)
(?!pattern), (*nla:pattern), (*negative_lookahead:pattern)
to match only if the pattern is (or is not) followed by a match to pattern,&lt;/p&gt;
&lt;p&gt;and
(?&amp;lt;=pattern), \K, (*plb:pattern), (*popsitive_lookbehind:pattern)
(?&amp;lt;!pattern), (*nlb:pattern), (*negative_lookbehind:pattern)
for zero-width look-behind assertions.&lt;/p&gt;
&lt;p&gt;Note, libpcre (and older Perl version) restrict lookbehind assertions to fixed length. You can write
(?&amp;lt;=dog|cat) food
to match " food" preceded by "dog" or "cat", but you cannot write
(?&amp;lt;=dogs?|cats?) barking&lt;/p&gt;
&lt;p&gt;\C is also forbidden, as are capturing subgroups. But the facility is still very useful, and reduces the need for repeated substitutions.&lt;/p&gt;
&lt;p&gt;I propose adding only the first form in each case, not the newer "*" forms, which are less widely supported.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #997 created</title>
   <pubDate>Sat, 3 Feb 2024 22:29:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/997</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-997</guid>
   <description>&lt;div&gt;&lt;p&gt;830 Drop F+O appendix D.4&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR drops the non-normative appendix D.4, which contained illustrative user-written functions. It was a very patchy and disorganised collection of functions which were primarily there because someone had proposed adding a function to the standard library and the WG had turned down the suggestion on the grounds that users could easily write the function themselves. It's not worth the effort of rewriting the appendix to take 4.0 enhancements into account.&lt;/p&gt;
&lt;p&gt;Fix #830&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #996 created</title>
   <pubDate>Sat, 3 Feb 2024 18:16:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/996</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-996</guid>
   <description>&lt;div&gt;&lt;p&gt;816 Allow a predicate in a filter expression to be a sequence of numbers&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #816&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #995 created</title>
   <pubDate>Sat, 3 Feb 2024 03:34:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/995</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-995</guid>
   <description>&lt;div&gt;&lt;p&gt;937 (fn:hash) revised in light of CG feedback&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This revises #937 (catalyzed by #779) in light CG discussion that approved the PR.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Output is now &lt;code&gt;xs:hexBinary?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Second parameter &lt;code&gt;$algorithm&lt;/code&gt; replaced with an option map. In the specs I avoided &lt;code&gt;fos:values/fos:value&lt;/code&gt;, because this would disallow for case/space normalization, and it would effectively disallow any implement-defined algorithms not on the list of three algorithms, and trigger the dynamic error described in rule 6 in the &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#option-parameter-conventions"&gt;option parameter conventions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Options map has only one option. It doesn't make sense to provide an option changing the kind of output.&lt;/li&gt;
&lt;li&gt;I think this is the first example of an options map where the &lt;code&gt;fos:meaning&lt;/code&gt; has rich text (paragraphs, unordered lists). It builds and renders fine locally.&lt;/li&gt;
&lt;li&gt;Extra note on the output format.&lt;/li&gt;
&lt;li&gt;Examples are expressed as chained functions, to illustrate how to get the customary string values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #994 created</title>
   <pubDate>Fri, 2 Feb 2024 20:12:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/994</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-994</guid>
   <description>&lt;div&gt;&lt;p&gt;Invoking maps &amp;amp; arrays: allow sequences?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Can’t we support integer sequences as arguments in dynamic function calls on maps and arrays?&lt;/p&gt;
&lt;p&gt;The following query is already valid…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;[ 3, 4, 5 ] ? (2, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…but the number of users who are able to decode this syntax is very limited. It would be easier to allow:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;[ 3, 4, 5 ](2, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would expect the results to be returned in the supplied order (&lt;code&gt;4&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #993 created</title>
   <pubDate>Fri, 2 Feb 2024 18:39:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/993</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-993</guid>
   <description>&lt;div&gt;&lt;p&gt;989 (partial) Allow char() to take integer argument&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Addresses the use case in issue #989. (But leave the issue open for now).&lt;/p&gt;
&lt;p&gt;Discussion point: should we drop the options &lt;code&gt;char("#32")&lt;/code&gt; and &lt;code&gt;char("#x20")&lt;/code&gt; as they now seem redundant?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #992 created</title>
   <pubDate>Fri, 2 Feb 2024 18:17:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/992</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-992</guid>
   <description>&lt;div&gt;&lt;p&gt;888, 963: Error handling for unsatisfied context dependencies&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #963 by providing more detail on the expected error handling for partial function application.&lt;/p&gt;
&lt;p&gt;Fix #888 by making XPDY0002 a type error rather than a dynamic error.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #991 created</title>
   <pubDate>Fri, 2 Feb 2024 17:52:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/991</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-991</guid>
   <description>&lt;div&gt;&lt;p&gt;Invisible-xml - missing details&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The spec for invisible-xml doesn't say whether the parsing function returns an element node or a document node.&lt;/p&gt;
&lt;p&gt;It should also say, for completeness, that the parsing function is "nondeterministic with respect to node identity" - that is, if you parse the same input twice, its undefined whether you get the same node twice, or different nodes.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #990 created</title>
   <pubDate>Fri, 2 Feb 2024 10:20:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/990</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-990</guid>
   <description>&lt;div&gt;&lt;p&gt;Transitive closure on non-nodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In PR #988 I inadvertently used the transitive-closure function to process non-nodes; that's not supported by the current specification of the function.&lt;/p&gt;
&lt;p&gt;The only difficulty in extending it is how to define a suitable identity comparator so we know when to terminate. Probably this should be done using a callback, defaulting to &lt;code&gt;op('is')&lt;/code&gt;. In the use case of PR #988, the comparator could be supplied as &lt;code&gt;false#0&lt;/code&gt; - the step function is acyclic, so we can treat all items reached as distinct.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #989 created</title>
   <pubDate>Thu, 1 Feb 2024 12:19:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/989</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-989</guid>
   <description>&lt;div&gt;&lt;p&gt;character sequence constructor 'a' to 'z'&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Although you can write 'a' to 'z' as&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xpath"&gt;   (string-to-codepoints('a') to string-to-codepoints('z') ! codepoints-to-string()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;i’m not sure this is easily discoverable.&lt;/p&gt;
&lt;p&gt;Note, 'a' to 'z' is obviously dependent on the current collation - if you're using EBCDIC may the dogs help you. I’m assuming, however, any two Unicode characters could appear in the string literals, and it’d be an error to have more than one character in either string.&lt;/p&gt;
&lt;p&gt;This means 'ċ' to 'ŗ’ would be an error, not equivalent to 'c' to 'r' (taking the first character of each string), since those are not precomposed forms.&lt;/p&gt;
&lt;p&gt;Mostly, i tend to write this because of other languages - e.g. Perl has 'a' .. 'ÿ' or whatever, as does Ruby.&lt;/p&gt;
&lt;p&gt;ICU in Python has UnicodeSet('[[:Ll:]&amp;amp;[:Latin:]]') which is powerful but grokhard (&amp;amp; here is intersect i think).&lt;/p&gt;
&lt;p&gt;Although 'a' to 'z' is probably what i've seen &amp;amp; used most often, 'a' to 'f' and '0' to '9' are also obvious candidates.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #988 created</title>
   <pubDate>Thu, 1 Feb 2024 11:59:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/988</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-988</guid>
   <description>&lt;div&gt;&lt;p&gt;960 Pinned and labeled values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR introduces the concepts of pinned and labelled values and the way in which they can be used to obtain additional information about the results of a deep lookup or map/array navigation operation. The changes at this stage are confined to a new section in the data model spec introducing the concept of labeled items, and a new section in the XPath language spec showing how these are used when navigating maps and arrays. This is a first step; if the WG approves of the general approach, there will be a lot more detail to add in due course.&lt;/p&gt;
&lt;p&gt;The PR addresses a number of open issues:&lt;/p&gt;
&lt;p&gt;Issue #960 - flattening of results from $map??KS
Issue #711 - using annotations for navigation of JSON trees
Issue #596 - pinned values: transforming trees
Issue #350 - CompPath (composite objects path) expressions
Issue #334 - Transient properties: selection and update in maps and arrays
Issue #262 - navigation in deep-structured arrays
Issue #108 - template match using values of tunnel parameters&lt;/p&gt;
&lt;p&gt;It does not claim to resolve them all, but I believe it provides the groundwork for doing so.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #987 created</title>
   <pubDate>Wed, 31 Jan 2024 22:45:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/987</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-987</guid>
   <description>&lt;div&gt;&lt;p&gt;628 Define result order for distinct-values and duplicate-values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #628&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #986 created</title>
   <pubDate>Wed, 31 Jan 2024 17:07:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/986</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-986</guid>
   <description>&lt;div&gt;&lt;p&gt;Numeric Comparisons&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We've been trying to change the semantics of numeric comparison without breaking existing applications. As a result, the current status quo is very messy. Let's review where we are.&lt;/p&gt;
&lt;p&gt;The eq/lt operators, given mixed operand types, convert decimal operands to double and compare as double. No change from 3.1. This comparison is not transitive in edge cases. The &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; operators are defined in terms of &lt;code&gt;eq&lt;/code&gt; and &lt;code&gt;lt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Map key comparisons compare as "infinite precision decimal". No change from 3.1. This comparison is now exposed as fn:atomic-equal().&lt;/p&gt;
&lt;p&gt;deep-equal() refers to atomic-equal(), which is a change in behaviour from 3.1.&lt;/p&gt;
&lt;p&gt;distinct-values() refers to deep-equal(), which is a change in behaviour - deliberate, because it needs to be transitive.&lt;/p&gt;
&lt;p&gt;index-of() refers to eq. No change from 3.1.&lt;/p&gt;
&lt;p&gt;compare() has been newly introduced; like atomic-equal() it uses infinite precision decimal for comparison.&lt;/p&gt;
&lt;p&gt;sort() uses compare(). This is a change from 3.1; again needed because transitivity is important.&lt;/p&gt;
&lt;p&gt;min() and max() use compare(). This is a change from 3.1.&lt;/p&gt;
&lt;p&gt;The new highest() and lowest() functions use sort().&lt;/p&gt;
&lt;p&gt;XSLT for-each-group refers to distinct-values().&lt;/p&gt;
&lt;p&gt;XSLT xsl:sort currently refers to numeric-compare() and will presumably change to use compare().&lt;/p&gt;
&lt;p&gt;XSLT xsl:merge refers to xsl:sort&lt;/p&gt;
&lt;p&gt;XQuery "group by" refers to deep-equal()&lt;/p&gt;
&lt;p&gt;XQuery "order by" refers to compare()&lt;/p&gt;
&lt;p&gt;So:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nearly everything now uses decimal comparison where the operands are of mixed type&lt;/li&gt;
&lt;li&gt;There are many different ways that we say this - it's often indirect. There are only two comparison methods, but you have to follow a chain of references to work out which one applies.&lt;/li&gt;
&lt;li&gt;The two exceptions that still do comparison the 3.1 way (converting both operands to xs:double) are (a) the eq/lt/=/&amp;lt; operators, and (b) the index-of and array:index-of functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are definitely things that now break. For example I was working on tests yesterday with assertions in the form deep-equal(nodes/number(.), (8.2, 5.4, 6.5)) - that is, comparing doubles to decimals. The nodes actually contain the strings "8.2", "5.4", "6.5". The test was failing because converting the string "8.2" to a double and then converting the double to a decimal does not produce the decimal value 8.2.&lt;/p&gt;
&lt;p&gt;This mixed bag really doesn't seem acceptable. What options do we have?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be bold: make everything uniformly use transitive comparisons, and accept that some user code will break.&lt;/li&gt;
&lt;li&gt;Be timid: use transitive comparisons only where it really matters (distinct-values, grouping, sorting) and use promotion to double everywhere else.&lt;/li&gt;
&lt;li&gt;Compromise: introduce a compatibility mode, or a context option that allows users to control the behaviour, or another set of comparison operators.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Any other ideas?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #985 created</title>
   <pubDate>Wed, 31 Jan 2024 12:29:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/985</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-985</guid>
   <description>&lt;div&gt;&lt;p&gt;720 Add lookup arrow expressions (method invocations)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #720.&lt;/p&gt;
&lt;p&gt;Replaces #916.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #948 closed</title>
   <pubDate>Wed, 31 Jan 2024 10:10:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/948</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-948</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:scan-left and fn:scan-right - produce accumulation of results&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #984 created</title>
   <pubDate>Wed, 31 Jan 2024 10:00:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/984</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-984</guid>
   <description>&lt;div&gt;&lt;p&gt;959-partial Add fn:seconds function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #959&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #983 created</title>
   <pubDate>Wed, 31 Jan 2024 09:30:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/983</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-983</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:reduce (or fn:fold without initial value)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Various languages (Kotlin, F#, Haskell, Rust, Scala, others) offer two functions for what we summarize as folds: one that accepts an initial value and another one that consumes the first item of the input as initial value. The first function is usually called &lt;code&gt;fold&lt;/code&gt;, the latter is called &lt;code&gt;reduce&lt;/code&gt;, but some languages (like JavaScript) pack the functionality into a single function.&lt;/p&gt;
&lt;p&gt;We have the same options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We could tweak &lt;code&gt;fn:fold-left&lt;/code&gt; and &lt;code&gt;fn:fold-right&lt;/code&gt; in a way that the &lt;code&gt;zero&lt;/code&gt; argument is ignored if it’s not explicitly supplied:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fold-left(1 to 5, action := op('*'))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the behavior would then differ from &lt;code&gt;fold-left(1 to 5, (), action := op('*'))&lt;/code&gt;, which is something we tried to avoid in more recent functions (there are functions like &lt;code&gt;fn:name&lt;/code&gt;, though, that behave similarly: &lt;code&gt;fn:name(())&lt;/code&gt; and &lt;code&gt;fn:name()&lt;/code&gt; does something different).&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;We could also introduce a separate function &lt;code&gt;fn:reduce&lt;/code&gt; (or 2 variants, resp. 4 if we include arrays):&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:reduce(
  $input   as item()*,
  $action  as function(item()*, item()) as item()*
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would allow us to do  &lt;code&gt;reduce(1 to 5, op('*'))&lt;/code&gt;, and for some people, a reduce function will be more familiar than a fold.&lt;/p&gt;
&lt;p&gt;On Wikipedia, there’s a good summary on &lt;a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)#In_various_languages"&gt;folds in various languages&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #982 created</title>
   <pubDate>Wed, 31 Jan 2024 08:57:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/982</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-982</guid>
   <description>&lt;div&gt;&lt;p&gt;scan-left, scan-right: position argument, array functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have added an optional position argument to nearly all callback functions that are invoked once for each item in a sequence. This argument is omitted from the new scan-left and scan-right functions. It should be added for consistency.&lt;/p&gt;
&lt;p&gt;One of the proposed use cases for scan-left and scan-right is for debugging calls on fold-left and fold-right. This use case requires that the callback functions in the two cases are compatible.&lt;/p&gt;
&lt;p&gt;Background note: the optional position argument is modelled on Javascript, where it is permitted in all the common higher-order functions such as &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;reduceRight&lt;/code&gt; (which are the Javascript equivalent of fold-left and fold-right). Javascript doesn't appear to offer an equivalent of &lt;code&gt;scan-left&lt;/code&gt; and &lt;code&gt;scan-right&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #981 created</title>
   <pubDate>Wed, 31 Jan 2024 00:34:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/981</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-981</guid>
   <description>&lt;div&gt;&lt;p&gt;Identify optional arguments in callback functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It was pointed out today that is not obvious, looking at a function signature like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:filter(
  $input as item()*, |  
  $predicate as function(item(), xs:integer) as xs:boolean |  
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;that the second argument of the &lt;code&gt;$predicate&lt;/code&gt; function is optional.&lt;/p&gt;
&lt;p&gt;At least in the documentation, it would be useful to capture this in some way. Being "optional" here means that it makes sense, semantically, to supply an arity-1 function, in which case the caller will not supply the second argument.&lt;/p&gt;
&lt;p&gt;Perhaps it would also be useful to go beyond documentation, and attach some syntax and semantics to it. Specifically, if the signature of the callback function indicates that the first N arguments are required, then supplying a function item of arity less than N will result in a type error.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #980 created</title>
   <pubDate>Tue, 30 Jan 2024 23:59:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/980</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-980</guid>
   <description>&lt;div&gt;&lt;p&gt;911 Coercion to allow double to decimal etc&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #911 The coercion rules are changed to allow implicit casts among numeric types, for example a double can be supplied where the required type is decimal. (The term "promotion" is now used only for operators, where the two operands must be converted to a common type.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #979 created</title>
   <pubDate>Tue, 30 Jan 2024 23:11:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/979</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-979</guid>
   <description>&lt;div&gt;&lt;p&gt;966 Minor fixes to deep lookup &lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #966&lt;/p&gt;
&lt;p&gt;Apply suggestions in Christian Grün's comments on PR #927.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #978 created</title>
   <pubDate>Tue, 30 Jan 2024 21:14:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/978</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-978</guid>
   <description>&lt;div&gt;&lt;p&gt;948 Reflected the comments of the CG on the specification of scan-left and scan-right&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Reflected the comments of the CG on the specification of scan-left and scan-right&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #977 created</title>
   <pubDate>Tue, 30 Jan 2024 17:42:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/977</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-977</guid>
   <description>&lt;div&gt;&lt;p&gt;Ignore this, it's just a test&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm trying to work out why sometimes PR succeeds when it contains markup errors...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #976 closed</title>
   <pubDate>Tue, 30 Jan 2024 17:32:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/976</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-976</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix markup errors with fos:notes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #976 created</title>
   <pubDate>Tue, 30 Jan 2024 17:32:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/976</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-976</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix markup errors with fos:notes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 063 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 30 Jan 2024 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/01-30</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-01-30</guid>
</item><item>
   <title>Issue #957 closed</title>
   <pubDate>Tue, 30 Jan 2024 17:00:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/957</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-957</guid>
   <description>&lt;div&gt;&lt;p&gt;948 Added fn:scan-left and fn:scan-right&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #965 closed</title>
   <pubDate>Tue, 30 Jan 2024 16:59:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/965</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-965</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: minor edits and bug fixes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #975 created</title>
   <pubDate>Mon, 29 Jan 2024 16:32:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/975</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-975</guid>
   <description>&lt;div&gt;&lt;p&gt;973 fn:parse-json, fn:json-to-xml: number-parser, fallback&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #973.&lt;/p&gt;
&lt;p&gt;In addition, I fixed the description for the &lt;code&gt;fallback&lt;/code&gt; option &lt;code&gt;fn:parse-json&lt;/code&gt;, as it seemed incomplete to me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The function is called when the JSON input contains a special character (as defined under the escape option) that is valid according to the JSON grammar, whether the special character is represented in the input directly or as an escape sequence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #974 closed</title>
   <pubDate>Mon, 29 Jan 2024 12:32:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/974</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-974</guid>
   <description>&lt;div&gt;&lt;p&gt;Rules for context-dependent function references in XSLT (e.g. regex-group#1)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 063 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 29 Jan 2024 12:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/01-30</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-01-30</guid>
</item><item>
   <title>Issue #974 created</title>
   <pubDate>Mon, 29 Jan 2024 12:25:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/974</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-974</guid>
   <description>&lt;div&gt;&lt;p&gt;Rules for context-dependent function references in XSLT (e.g. regex-group#1)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm not sure where we are on this one.&lt;/p&gt;
&lt;p&gt;Does regex-group#1 capture the "current matching substrings" component of the dynamic context?&lt;/p&gt;
&lt;p&gt;XSLT 4.0 test case analyze-string-101 suggests that it does, and that this represents a change from 3.0 -- there are separate versions of the test with different expected results for the two cases.&lt;/p&gt;
&lt;p&gt;But §5.4 of the XSLT 4.0 spec still ends with the sentence:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;This rule does not extend to the XSLT extensions to the dynamic context defined in this section. If a dynamic function call is made that depends on the XSLT part of the dynamic context (for example, regex-group#1(2)), then the relevant components of the context are cleared as described in the table above.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I suspect this sentence should have been deleted, but need to track down the history.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #973 created</title>
   <pubDate>Mon, 29 Jan 2024 12:24:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/973</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-973</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-json, fn:json-to-xml: `number-parser`, `fallback`&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;See #33: &lt;code&gt;number-parser&lt;/code&gt; option needs to be added to &lt;code&gt;fn:json-to-xml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Similar to &lt;code&gt;fn:replace&lt;/code&gt;, I would suggest using &lt;code&gt;function(xs:untypedAtomic) as item()?)&lt;/code&gt; as signature for both the &lt;code&gt;fallback&lt;/code&gt; and the &lt;code&gt;number-parser&lt;/code&gt; option, and (for &lt;code&gt;fallback&lt;/code&gt;) to invoke &lt;code&gt;fn:string#1&lt;/code&gt; on the result. This way, explicit casts in the code get obsolete. Queries like the following one…&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;parse-json(
  '-123',
  map { 'number-parser': fn($n) { $n =&amp;gt; number() =&amp;gt; abs() }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…can then be simplified to &lt;code&gt;parse-json('-123', abs#1)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #972 created</title>
   <pubDate>Mon, 29 Jan 2024 11:28:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/972</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-972</guid>
   <description>&lt;div&gt;&lt;p&gt;949 Partial Function Applications: Allow return of function name&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #949. The major change is the rule for the &lt;code&gt;name&lt;/code&gt; property of partial function applications for static function calls.&lt;/p&gt;
&lt;p&gt;In addition, I have unified the presentation of the different function item expressions.&lt;/p&gt;
&lt;p&gt;Affects test cases like &lt;code&gt;xqhof40&lt;/code&gt; (which need to be fixed with or without this PR).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #971 created</title>
   <pubDate>Mon, 29 Jan 2024 10:20:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/971</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-971</guid>
   <description>&lt;div&gt;&lt;p&gt;970 XQFO: Context item → value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #970&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #970 created</title>
   <pubDate>Sun, 28 Jan 2024 10:38:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/970</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-970</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Context item → value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Resulting from #129 (related: #755): Many rules in the XQFO spec still refer to the context item, which is currently defined as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When the context value is a single item, it can also be referred to as the context item; when it is a single node, it can also be referred to as the context node.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We need to make clear what’s going to happen if the context value is not a single item:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In many cases, this can simply be done by replacing “context item” with “context value”.&lt;/li&gt;
&lt;li&gt;In some cases (e.g. for &lt;code&gt;fn:string#0&lt;/code&gt;), we should specify that an error is raised (usually &lt;code&gt;XPTY0004&lt;/code&gt;) if the input is not a single item.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #878 closed</title>
   <pubDate>Thu, 25 Jan 2024 08:42:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/878</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-878</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposed extension to subsequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #969 created</title>
   <pubDate>Wed, 24 Jan 2024 18:19:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/969</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-969</guid>
   <description>&lt;div&gt;&lt;p&gt;843-partial Standard, array &amp;amp; map functions: Equivalencies&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #843&lt;/p&gt;
&lt;p&gt;Maybe we should keep the issue open after merging this PR.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #968 created</title>
   <pubDate>Wed, 24 Jan 2024 17:57:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/968</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-968</guid>
   <description>&lt;div&gt;&lt;p&gt;260 array:index-of&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #260&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #967 created</title>
   <pubDate>Wed, 24 Jan 2024 13:22:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/967</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-967</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath Appendix I: Comparisons&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adopted from https://github.com/qt4cg/qtspecs/issues/260#issuecomment-1908033129&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It would be useful if all functions that perform comparison included a cross-reference to the new XPath Appendix I; and I note that appendix doesn't seem to mention index-of.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@michaelhkay I’ve taken the liberty of assigning this to you, as I wasn’t sure what this is about.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #874 closed</title>
   <pubDate>Wed, 24 Jan 2024 09:51:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/874</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-874</guid>
   <description>&lt;div&gt;&lt;p&gt;878 Proposed extension to subsequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #966 created</title>
   <pubDate>Tue, 23 Jan 2024 20:23:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/966</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-966</guid>
   <description>&lt;div&gt;&lt;p&gt;Rewrite spec of deep lookup operator: edits&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@michaelhkay I've created a little new issue to keep track of the 3 minor suggestions that I made in the PR that we merged today: https://github.com/qt4cg/qtspecs/pull/927&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #965 created</title>
   <pubDate>Tue, 23 Jan 2024 18:20:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/965</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-965</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: minor edits and bug fixes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #818 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:52:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/818</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-818</guid>
   <description>&lt;div&gt;&lt;p&gt;Foxpath integration&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #693 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:52:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/693</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-693</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4 Tests without counterpart in the specs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #639 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:52:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/639</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-639</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:void: Naming, Arguments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #937 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:50:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/937</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-937</guid>
   <description>&lt;div&gt;&lt;p&gt;779 hash function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #946 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:46:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/946</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-946</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:iterate-while → fn:while-do, fn:do-until&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #962 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:46:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/962</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-962</guid>
   <description>&lt;div&gt;&lt;p&gt;946 fn:iterate-while → fn:while-do, fn:do-until&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #951 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:42:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/951</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-951</guid>
   <description>&lt;div&gt;&lt;p&gt;Parameters with default values: fn:lang, fn:id, fn:idref, fn:element-with-id&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #958 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:41:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/958</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-958</guid>
   <description>&lt;div&gt;&lt;p&gt;951 Parameters with default values: fn:lang, fn:id, fn:idref, fn:element-id&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #945 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:38:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/945</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-945</guid>
   <description>&lt;div&gt;&lt;p&gt;Module import: apparent contradiction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #952 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:38:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/952</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-952</guid>
   <description>&lt;div&gt;&lt;p&gt;945 module import contradiction&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #950 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:34:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/950</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-950</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor edits (examples, rules)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #939 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:31:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/939</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-939</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove fn:numeric-compare&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #941 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:31:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/941</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-941</guid>
   <description>&lt;div&gt;&lt;p&gt;939 Remove fn:numeric-compare&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #936 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:28:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/936</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-936</guid>
   <description>&lt;div&gt;&lt;p&gt;877 revised rules for op:binary-less-than&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #861 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:25:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/861</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-861</guid>
   <description>&lt;div&gt;&lt;p&gt;Precise meaning of $E??KS&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #927 closed</title>
   <pubDate>Tue, 23 Jan 2024 17:25:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/927</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-927</guid>
   <description>&lt;div&gt;&lt;p&gt;861 Rewrite spec of deep lookup operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 062 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 23 Jan 2024 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/01-23</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-01-23</guid>
</item><item>
   <title>Issue #964 created</title>
   <pubDate>Tue, 23 Jan 2024 12:30:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/964</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-964</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:has-attributes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Trivial (motivated by a user request):&lt;/p&gt;
&lt;p&gt;As there is an &lt;code&gt;fn:has-children&lt;/code&gt; function, it seems surprising that there is no &lt;code&gt;fn:has-attributes&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;I would suggest…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adding this function to the spec, or&lt;/li&gt;
&lt;li&gt;indicating in a note (for &lt;code&gt;fn:has-children&lt;/code&gt;) why this function is missing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #963 created</title>
   <pubDate>Tue, 23 Jan 2024 08:29:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/963</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-963</guid>
   <description>&lt;div&gt;&lt;p&gt;Errors in forming function items (continued)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In #894, the following rule was added to the definition of &lt;strong&gt;Named Function References&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An error is raised if the identified function depends on components of the static or dynamic context that are not present, or that have unsuitable values. […] &lt;code&gt;DC0001&lt;/code&gt; is raised for the call &lt;code&gt;fn:id#1&lt;/code&gt; if the context item is not a node in a tree that is rooted at a document node.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We should be consistent and add this rule to &lt;strong&gt;Partial Function Applications&lt;/strong&gt; and &lt;strong&gt;Inline Function Expressions&lt;/strong&gt; as well. Perhaps such rules could be defined just once for all affected function item constructors in the parent section?&lt;/p&gt;
&lt;p&gt;Also, the error code doesn’t seem to be properly defined in the spec, it shows &lt;code&gt;[ERROR errorref DC0001 NOT FOUND]&lt;/code&gt; (maybe that’s intentional at this editing stage.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 062 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 22 Jan 2024 14:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/01-23</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-01-23</guid>
</item><item>
   <title>Pull request #962 created</title>
   <pubDate>Sat, 20 Jan 2024 14:24:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/962</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-962</guid>
   <description>&lt;div&gt;&lt;p&gt;946 fn:iterate-while → fn:while-do, fn:do-until&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;My first thought was to name the second function &lt;code&gt;fn:do-while&lt;/code&gt;, but &lt;code&gt;fn:do-until&lt;/code&gt; with an inversed predicate seemed more appropriate to me.&lt;/p&gt;
&lt;p&gt;Issue: #946&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #961 created</title>
   <pubDate>Sat, 20 Jan 2024 10:11:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/961</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-961</guid>
   <description>&lt;div&gt;&lt;p&gt;Simulating Objects: Performance&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Related to #953, #917 and #916, I wonder whether we are aware enough of the essential differences when we think of objects in a functional language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mutable objects are extremely efficient, as an update is a simple main-memory value change.&lt;/li&gt;
&lt;li&gt;Immutable data structures need to be fully copied if a single value changes. As a result, the update of a map with, let’s say, 1 string and 50 functions would be a new map with 1 string and 50 functions. Even with efficient immutable map implementations that we have, I doubt that it makes sense to create full copies with 1+50 entries, of which only 1 string will be different.&lt;/li&gt;
&lt;li&gt;Imagine a FLWOR expression that creates 1000 of such maps, with possibly 1 value that’s different in each instance. We don’t need 1000 copies of 50 functions; the memory consumption would be much smaller if we only stored relevant values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This thread is not about premature optimization; I just want to be sure we think about the obstacles when using maps for objects. Maybe the solutions are already on the horizon; maybe we could tackle some of the concerns with the definition of default values…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare record person(
  name   as xs:string,
  title  := (),
  full   := fn { string-join((?title, ?name), ' ') }
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and maps with type annotations. If we don’t materialize defaults, the embedded annotation would indeed need to effect functions like &lt;code&gt;map:get&lt;/code&gt;, as questioned by Michael in https://github.com/qt4cg/qtspecs/pull/953#issuecomment-1896078605.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #960 created</title>
   <pubDate>Fri, 19 Jan 2024 16:24:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/960</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-960</guid>
   <description>&lt;div&gt;&lt;p&gt;Should ??KS flatten the results&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently the result of &lt;code&gt;??KS&lt;/code&gt; (like &lt;code&gt;?KS&lt;/code&gt;) is flattened. So if you do &lt;code&gt;??dimensions&lt;/code&gt; and the value of each &lt;code&gt;dimensions&lt;/code&gt; entry is a sequence of zero or more numbers, the result munges them all together into a single sequence (dropping any empty values in the process).&lt;/p&gt;
&lt;p&gt;Should we change this, for example to return a sequence of arrays, or an array of sequences?&lt;/p&gt;
&lt;p&gt;This makes life a bit more difficult in the simple case where all the values are singletons -- and notably, when constructing a path such as &lt;code&gt;??A??B??C&lt;/code&gt; -- but it makes it possible to handle the more general case where they aren't all singletons.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #959 created</title>
   <pubDate>Thu, 18 Jan 2024 17:06:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/959</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-959</guid>
   <description>&lt;div&gt;&lt;p&gt;Milliseconds ↔ xs:dayTimeDuration, Unix time ↔ xs:dateTime&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We should extend the constructor functions to convert integers (millisecond, and the Unix time, starting from &lt;code&gt;1970-01-01T00:00:00Z&lt;/code&gt;) to &lt;code&gt;xs:dayTimeDuration&lt;/code&gt; and &lt;code&gt;xs:dateTime&lt;/code&gt; instances…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;xs:dateTime(12345),
xs:dayTimeDuration(12345)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and it should be possible to convert the values back to integers.&lt;/p&gt;
&lt;p&gt;Related: https://docs.basex.org/wiki/Conversion_Module#Dates_and_Durations&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #958 created</title>
   <pubDate>Thu, 18 Jan 2024 13:39:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/958</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-958</guid>
   <description>&lt;div&gt;&lt;p&gt;951 Parameters with default values: fn:lang, fn:id, fn:idref, fn:element-id&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Editorial (#951): Reverts the changes made in #901 for 4 context-dependent functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #957 created</title>
   <pubDate>Thu, 18 Jan 2024 01:31:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/957</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-957</guid>
   <description>&lt;div&gt;&lt;p&gt;948 Added fn:scan-left and fn:scan-right&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As discussed at https://github.com/qt4cg/qtspecs/issues/948&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #956 created</title>
   <pubDate>Wed, 17 Jan 2024 17:41:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/956</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-956</guid>
   <description>&lt;div&gt;&lt;p&gt;850-partial Editorial improvements to parse-html()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Related to issue #850, but doesn't close it entirely.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #955 created</title>
   <pubDate>Wed, 17 Jan 2024 12:00:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/955</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-955</guid>
   <description>&lt;div&gt;&lt;p&gt;Options parameters as record types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the new parse-html() function, the content of the options parameter is described using a record type. This differs from other functions, that describe the type as map(*), and have a statement that "the option parameter conventions apply".&lt;/p&gt;
&lt;p&gt;Ideally we should use record types for all options parameters. However we need to check carefully that this does not affect edge-case compatibility, for example implicit conversions or the acceptability of extensions. If we can't do that then we should bring parse-html() into line with other functions such as parse-json().&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #954 created</title>
   <pubDate>Wed, 17 Jan 2024 00:45:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/954</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-954</guid>
   <description>&lt;div&gt;&lt;p&gt;Establish a default value for the XSLT fixed-namespaces attribute&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The newly-defined &lt;a href="https://qt4cg.org/specifications/xslt-40/Overview.html#fixed-namespaces"&gt;&lt;strong&gt;fixed-namespaces&lt;/strong&gt; attribute&lt;/a&gt; on the &lt;em&gt;&lt;code&gt;xsl:stylesheet&lt;/code&gt;&lt;/em&gt; element is a huge positive step towards improving programmer's productivity by removing the need to provide up to 9 namespace declarations in every stylesheet module, thus reducing unnecessary cluttering, simplifying and slimming the code and increasing its readability.&lt;/p&gt;
&lt;p&gt;It seems like an accidental omission that the current text doesn't specify a default value for this attribute. If there is a well-chosen default value, this would even further decrease the requirements for the programmer to engage in such a non-problem-solving activity as entering memorized strings, and would prevent errors such as either not providing the correct values for the namespace-uris or forgetting to specify this new attribute.&lt;/p&gt;
&lt;p&gt;One obvious candidate for a default value of the &lt;strong&gt;fixed-namespaces&lt;/strong&gt; attribute is &lt;code&gt;#standard&lt;/code&gt;, which means that without having to press even a single additional key, the XSLT programmer gets all standard namespaces automatically bound to the well-known prefixes:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xsl&lt;/code&gt; &lt;code&gt;xml&lt;/code&gt; &lt;code&gt;xs&lt;/code&gt; &lt;code&gt;xsi&lt;/code&gt; &lt;code&gt;fn&lt;/code&gt;  &lt;code&gt;math&lt;/code&gt; &lt;code&gt;map&lt;/code&gt; &lt;code&gt;array&lt;/code&gt; &lt;code&gt;err&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Proposal:&lt;/h3&gt;
&lt;p&gt;Please, augment the current text by specifying that the default value for the &lt;strong&gt;fixed-namespaces&lt;/strong&gt; attribute is &lt;code&gt;#standard&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #953 created</title>
   <pubDate>Tue, 16 Jan 2024 23:10:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/953</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-953</guid>
   <description>&lt;div&gt;&lt;p&gt;617 Define record constructors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #617&lt;/p&gt;
&lt;p&gt;Note that this is a first step. Noticeably we can't yet use these constructor functions to create records that have methods. It's nevertheless a big step forward.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #952 created</title>
   <pubDate>Tue, 16 Jan 2024 18:52:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/952</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-952</guid>
   <description>&lt;div&gt;&lt;p&gt;945 module import contradiction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Soem editorial clarifications regarding XQuery module import and schema import.&lt;/p&gt;
&lt;p&gt;Fix #945&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #928 closed</title>
   <pubDate>Tue, 16 Jan 2024 17:33:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/928</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-928</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor edits through ch. 15&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #947 closed</title>
   <pubDate>Tue, 16 Jan 2024 17:30:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/947</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-947</guid>
   <description>&lt;div&gt;&lt;p&gt;Reorganise F+O chapter 15 [editorial]&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #530 closed</title>
   <pubDate>Tue, 16 Jan 2024 17:26:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/530</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-530</guid>
   <description>&lt;div&gt;&lt;p&gt;Escaping of forward slash in JSON output method&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #942 closed</title>
   <pubDate>Tue, 16 Jan 2024 17:26:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/942</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-942</guid>
   <description>&lt;div&gt;&lt;p&gt;530 Fix typo, escape-solidus not escape-uri-attributes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #880 closed</title>
   <pubDate>Tue, 16 Jan 2024 17:26:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/880</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-880</guid>
   <description>&lt;div&gt;&lt;p&gt;872 Symmetry: fn:items-at → fn:get&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 061 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 16 Jan 2024 17:25:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2024/01-16</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#minutes-01-16</guid>
</item><item>
   <title>Issue #930 closed</title>
   <pubDate>Tue, 16 Jan 2024 17:23:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/930</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-930</guid>
   <description>&lt;div&gt;&lt;p&gt;Obsolete comment under fn:deep-equal()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #933 closed</title>
   <pubDate>Tue, 16 Jan 2024 17:23:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/933</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-933</guid>
   <description>&lt;div&gt;&lt;p&gt;930 drop obsolete note about comments and PIs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #932 closed</title>
   <pubDate>Tue, 16 Jan 2024 17:20:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/932</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-932</guid>
   <description>&lt;div&gt;&lt;p&gt;931 Add rules for duration precision&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #931 closed</title>
   <pubDate>Tue, 16 Jan 2024 17:20:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/931</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-931</guid>
   <description>&lt;div&gt;&lt;p&gt;Precision of duration arithmetic&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #737 closed</title>
   <pubDate>Tue, 16 Jan 2024 17:17:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/737</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-737</guid>
   <description>&lt;div&gt;&lt;p&gt;295: Boost the capability of recursive record types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #951 created</title>
   <pubDate>Tue, 16 Jan 2024 13:58:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/951</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-951</guid>
   <description>&lt;div&gt;&lt;p&gt;Parameters with default values: fn:lang, fn:id, fn:idref, fn:element-with-id&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Since #895, absent optional arguments and empty sequences in built-in functions are treated identically. Exceptions are functions that already had different rules for such cases (e.g., &lt;code&gt;fn:node(())&lt;/code&gt; always returns an empty sequence, no matter what the context is).&lt;/p&gt;
&lt;p&gt;I noticed we should also exclude &lt;code&gt;fn:lang&lt;/code&gt;, &lt;code&gt;fn:id&lt;/code&gt;, &lt;code&gt;fn:idref&lt;/code&gt;, and &lt;code&gt;fn:element-with-id&lt;/code&gt;: Otherwise, a compiler won’t be able to statically assess if a function call is dependent on the context.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #950 created</title>
   <pubDate>Tue, 16 Jan 2024 11:53:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/950</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-950</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor edits (examples, rules)&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;Examples were fixed.&lt;/li&gt;
&lt;li&gt;The equivalent expression for &lt;code&gt;map:values&lt;/code&gt; was changed to &lt;code&gt;$map?*&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #949 created</title>
   <pubDate>Tue, 16 Jan 2024 11:21:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/949</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-949</guid>
   <description>&lt;div&gt;&lt;p&gt;Partial Function Applications: Allow return of function name&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Without wanting to revive #889, an important observation I picked up is that named function references and “partially applied functions without applications” can be considered identical. That is, there should be no reason to distinguish between &lt;code&gt;count#1&lt;/code&gt; and &lt;code&gt;count(?)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Currently, however, partially applied functions are currently defined to lose the reference to the original function and its arity (and some Qt4 tests ensure that this is the case: https://github.com/qt4cg/qt4tests/blob/8649941e0e695ff8fb4cb27c52e99590cc88126f/misc/HigherOrderFunctions.xml#L1933).&lt;/p&gt;
&lt;p&gt;From a user perspective, I see no reason why the two cases should be treated differently, and I would argue that we should either treat them identically or (at least) allow implementations to treat them identically, i.e., allowing an implementation to return &lt;code&gt;count&lt;/code&gt; for &lt;code&gt;function-name(count(?))&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #948 created</title>
   <pubDate>Mon, 15 Jan 2024 18:59:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/948</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-948</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:scan-left and fn:scan-right - produce accumulation of results&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;fn:scan-left and fn:scan-right - produce accumulation of results&lt;/h1&gt;
&lt;p&gt;In XPath 4.0 so far we still don't have a convenient way to express the functionality of producing a series of accumulated (accrued) results when applying a folding function over a collection (sequence, array, ...) of items. The general use-case for this is the task to produce a sequence of running totals when applying an operation over a sequence of data points: &lt;strong&gt;produce the partial sums of loan payments&lt;/strong&gt; over fixed periods, &lt;strong&gt;produce the compounded amounts  of a deposit&lt;/strong&gt; with fixed interest rate over years, ..., etc.&lt;/p&gt;
&lt;p&gt;Two functions (shamelessly borrowed from Haskell):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fn:scan-left&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fn:scan-right&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2&gt;fn:scan-left&lt;/h2&gt;
&lt;p&gt;This function has a similar signature to that of &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:fold-left&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; and produces the same final result, however it produces the complete (ordered) sequence of all partial results from every new value the accumulator gets during the evaluation of &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:fold-left&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;fn:scan-left($input	as item()*,	
             $zero	as item()*,	
             $action	as function(item()*, item()) as item()*	
) as array(*)*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Properties&lt;/h3&gt;
&lt;p&gt;This function is &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-deterministic"&gt;·deterministic·&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-context-independent"&gt;·context-independent·&lt;/a&gt;, and &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-focus-independent"&gt;·focus-independent·&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Rules&lt;/h3&gt;
&lt;p&gt;The function is equivalent to the following implementation in XPath(return clause added for completeness):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $scan-left-inner := function($seq as item()*, 
                                 $zero as item(), 
                                 $fun as function(item()*, item()) as item()*,
                                 $self as function(*)
                               ) as array(*)*                               
{
  let $result := [$zero]
   return
     if(empty($seq)) then $result
       else
         (
           $result, $self(tail($seq), $fun($zero, head($seq)), $fun, $self)  
         )
},

$scan-left := function($seq as item()*, 
                       $zero as item(), 
                       $fun as function(item()*, item()) as item()*
                     ) as array(*)*  
{
  $scan-left-inner($seq, $zero, $fun, $scan-left-inner)
}  

  return
    $scan-left(1 to 10, 0, op('+'))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Examples:&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt; $scan-left(1 to 10, 0, op('+'))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;[0]
[1]
[3]
[6]
[10]
[15]
[21]
[28]
[36]
[45]
[55]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/603c0584-31bb-431f-b928-875058111128" alt="image"/&gt;&lt;/p&gt;
&lt;h2&gt;fn:scan-right&lt;/h2&gt;
&lt;p&gt;This function has a similar signature to that of &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:fold-right&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; and produces the same final result, however it produces the complete (ordered) sequence of all partial results from every new value the accumulator gets during the evaluation of &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:fold-right&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;fn:scan-right($input	as item()*,	
              $zero	as item()*,	
              $action	as function(item()*, item()) as item()*	
) as array(*)*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Properties&lt;/h3&gt;
&lt;p&gt;This function is &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-deterministic"&gt;·deterministic·&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-context-independent"&gt;·context-independent·&lt;/a&gt;, and &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-focus-independent"&gt;·focus-independent·&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Rules&lt;/h3&gt;
&lt;p&gt;The function is equivalent to the following implementation in XPath(return clause added for completeness):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let  $scan-right-inner := function($seq as item()*,
                                   $zero as item()*,
                                   $f as function(item(), item()*) as item()*,                          
                                   $self as function(*)
                                  ) as array(*)*
{
    if(empty($seq)) then [$zero]
      else
        let $rightResult := $self(tail($seq), $zero, $f, $self)
         return
            ([$f(head($seq), head($rightResult))], $rightResult)
},

$scan-right := function($seq as item()*,
                        $zero as item()*,
                        $f as function(item(), item()*) as item()*
                       ) as array(*)*
{
  $scan-right-inner($seq, $zero, $f, $scan-right-inner)
}   

return
  $scan-right(1 to 10, 0, op('+'))  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Examples:&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt; $scan-right(1 to 10, 0, op('+'))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;[55]
[54]
[52]
[49]
[45]
[40]
[34]
[27]
[19]
[10]
[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/68f5010d-133d-4bcf-8096-609a3d26697f" alt="image"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 061 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 15 Jan 2024 14:40:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2024/01-16</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#agenda-01-16</guid>
</item><item>
   <title>Issue #899 closed</title>
   <pubDate>Mon, 15 Jan 2024 15:21:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/899</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-899</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplifying the language - types have behaviour.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #947 created</title>
   <pubDate>Mon, 15 Jan 2024 10:39:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/947</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-947</guid>
   <description>&lt;div&gt;&lt;p&gt;Reorganise F+O chapter 15 [editorial]&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR reorganizes the subsections of F+O chapter 15 (the XML/HTML/JSON/CSV/IXML chapter). There is no change to content apart from a couple of introductory sentences. I'm planning to do some fine-grained work on the content in due course, but to make that easier to review it seems best to do the top-level reorganisation first. I'm therefore hoping that this PR will go through quickly "on the nod" so I can use it as a baseline for the detail changes.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #946 created</title>
   <pubDate>Fri, 12 Jan 2024 16:10:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/946</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-946</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:iterate-while → fn:while-do, fn:do-until&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;First feedback shows that &lt;code&gt;fn:iterate-while&lt;/code&gt; is helpful, but the name needs to be improved: It implies that the first iteration occurs before the invocation of the test… Which could sometimes be helpful, too.&lt;/p&gt;
&lt;p&gt;I suggest renaming the function to &lt;code&gt;fn:while-do&lt;/code&gt; (“do” is commonly used when while loops are specified), and adding &lt;code&gt;fn:do-until&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #945 created</title>
   <pubDate>Fri, 12 Jan 2024 15:41:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/945</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-945</guid>
   <description>&lt;div&gt;&lt;p&gt;Module import: apparent contradiction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XQuery 5.12 paragraph 2 says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a module A imports module B, the static context of module A will contain the [in-scope schema definitions]... of module B.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Paragraph 10 says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A [module import] imports only functions, variable declarations, and item type declaratons; it does not import other objects from the imported modules, such as [in-scope schema definitions] or [statically known namespaces].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They can't both be right, surely?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #944 created</title>
   <pubDate>Fri, 12 Jan 2024 11:18:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/944</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-944</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion rules: implicit types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Since 2.0, the coercion rules (formerly function conversion rules) have allowed implicit conversion from decimal to double, decimal to float, and float to double on function calls; other conversions such as double to decimal or float to decimal are not allowed. This has never made very much sense because in some implementations, decimal to float is a lossy conversion whereas float to decimal is not.&lt;/p&gt;
&lt;p&gt;One option would be to allow conversion from any numeric type to any other.&lt;/p&gt;
&lt;p&gt;The main caveat here is that I don't think it makes sense to allow a double such as 1.5e0 to be supplied where the required type is xs:integer. We have introduced new conversions that make it possible to supply a decimal where an integer is expected, but only if the decimal is in the value space of integer.&lt;/p&gt;
&lt;p&gt;A possible formulation would be:&lt;/p&gt;
&lt;p&gt;If the required type is a numeric type (that is, xs:decimal, xs:double, xs:float, or any type derived from these), and if the supplied value is a numeric value, then the supplied value is cast to the required primitive type, and if the result is in the value space of the actual required type it is then relabelled as an instance of the actual required type (if not, the conversion fails).&lt;/p&gt;
&lt;p&gt;This means that supplying 1.0e0 for an argument expecting xs:integer (or xs:positiveInteger, etc) would work (it would cast to xs:decimal and then relabel as xs:integer), but supplying 1.1e0 would fail.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #943 created</title>
   <pubDate>Thu, 11 Jan 2024 10:28:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/943</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-943</guid>
   <description>&lt;div&gt;&lt;p&gt;187 Add FLWOR expression while clause&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #187&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #942 created</title>
   <pubDate>Wed, 10 Jan 2024 16:42:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/942</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-942</guid>
   <description>&lt;div&gt;&lt;p&gt;530 Fix typo, escape-solidus not escape-uri-attributes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #530.&lt;/p&gt;
&lt;p&gt;On half a dozen occasions, &lt;code&gt;escape-uri-attributes&lt;/code&gt; is used where &lt;code&gt;escape-solidus&lt;/code&gt; is clearly intended.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #886 closed</title>
   <pubDate>Wed, 10 Jan 2024 14:28:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/886</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-886</guid>
   <description>&lt;div&gt;&lt;p&gt;Binary map keys&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #941 created</title>
   <pubDate>Wed, 10 Jan 2024 12:20:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/941</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-941</guid>
   <description>&lt;div&gt;&lt;p&gt;939 Remove fn:numeric-compare&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Issue: #939&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #940 created</title>
   <pubDate>Wed, 10 Jan 2024 12:05:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/940</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-940</guid>
   <description>&lt;div&gt;&lt;p&gt;878 Add subsequence-where function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Supersedes PR #874&lt;/p&gt;
&lt;p&gt;Following discussion of PR #874 which proposed an extended subsequence() function with options to define the start and end position by predicates, this new PR proposes instead a subsequence-where() function that allows the start and end position to be defined by predicates, leaving the existing subsequence() function unchanged.&lt;/p&gt;
&lt;p&gt;The items-before/after/starting-where/ending-where quartet are dropped.&lt;/p&gt;
&lt;p&gt;The new function is inclusive at both ends. To start at the item after the one that matches the start condition, apply tail() to the result. To finish before the item that matches the end condition, apply trunk() to the result.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #893 closed</title>
   <pubDate>Wed, 10 Jan 2024 11:55:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/893</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-893</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:compare: Support for arbitrary atomic types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #918 closed</title>
   <pubDate>Wed, 10 Jan 2024 09:19:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/918</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-918</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor cx through chap. 14&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #939 created</title>
   <pubDate>Wed, 10 Jan 2024 09:12:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/939</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-939</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove fn:numeric-compare&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Related action: &lt;a href="https://qt4cg.org/meeting/minutes/2024/01-09.html"&gt;QT4CG-060-04&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;@michaelhkay I proposed to merge &lt;code&gt;fn:numeric-compare&lt;/code&gt; into &lt;code&gt;fn:compare&lt;/code&gt; in #866; your response was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Folding fn:numeric-compare into fn:compare is more feasible, but you've then got one function that does two different jobs; there's no type safety to ensure that the arguments have compatible types, and you need ad-hoc rules to say which combinations of arguments are valid and which aren't. The merit of two separate functions is that each is a total function over the domain implied by its signature.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do you think the concerns are still relevant, or should we tackle this?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #938 created</title>
   <pubDate>Wed, 10 Jan 2024 04:30:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/938</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-938</guid>
   <description>&lt;div&gt;&lt;p&gt;Canonical serialization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue picks up suggestions from #779 regarding canonical serialization, and solicits from the community group input on if such a function is desirable, and what such a function might look like.&lt;/p&gt;
&lt;p&gt;In the context of #779, the idea was that two XML documents with different physical representations, but semantically equivalent, could be serialized to a canonical form, with a hash value applied to each confirming identity. Of course, with canonical operation, a simple string comparison would be sufficient, absent any hashing.&lt;/p&gt;
&lt;p&gt;XML Signature was suggested as one approach, with some hesitation. I would like to suggest, instead, that we look to implement &lt;a href="https://www.w3.org/TR/xml-c14n/"&gt;Canonical XML Version 1.1&lt;/a&gt; (herein &lt;strong&gt;CX1.1&lt;/strong&gt;), perhaps with map options that calibrate how CX1.1 is implemented. I have no experience using CX1.1, so user input is welcome.&lt;/p&gt;
&lt;p&gt;Another point of discussion is whether this merits a new function, e.g., &lt;code&gt;fn:canonical-serialize&lt;/code&gt;, or should be built upon &lt;code&gt;fn:serialize&lt;/code&gt;. A problem with the latter option, is that such an approach makes no sense without the &lt;code&gt;method&lt;/code&gt; option specified as &lt;code&gt;xml&lt;/code&gt;. Another approach would be to go deeper, into the serialization spec, and expand the &lt;code&gt;xml&lt;/code&gt; method to ensure a canonical option.&lt;/p&gt;
&lt;p&gt;I believe that this function would be extremely useful. When preparing test suites, output could be saved as secondary documents as canonical XML, and any subsequent regression tests could adjust comparanda to canonical XML, and very precise node-wise comparisons could be made.&lt;/p&gt;
&lt;p&gt;I look forward to everyone's input.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #937 created</title>
   <pubDate>Wed, 10 Jan 2024 04:03:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/937</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-937</guid>
   <description>&lt;div&gt;&lt;p&gt;779 hash function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;First draft of hash function, proposed in #779.&lt;/p&gt;
&lt;p&gt;Error message left as to-do item; guidance from editors appreciated.&lt;/p&gt;
&lt;p&gt;I opted to leave out wrapper/cryptographic functionality, such as salting, and to demonstrate via example how it could be done by a developer on their own. In my opinion what we need here is a simple atomic function that can be incorporated into other molecular functions.&lt;/p&gt;
&lt;p&gt;I may tinker with the prose description up to CG discussion, so comments are welcome.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #936 created</title>
   <pubDate>Wed, 10 Jan 2024 02:30:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/936</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-936</guid>
   <description>&lt;div&gt;&lt;p&gt;877 revised rules for op:binary-less-than&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Rule 3 for &lt;code&gt;op:binary-less-than&lt;/code&gt; was a bit of a mess (see #877), and needed to be expressed as a recursive operation.&lt;/p&gt;
&lt;p&gt;My proposed revision depends of phraseology drawn from &lt;code&gt;fn:decode-from-uri&lt;/code&gt;, &lt;code&gt;fn:deep-equal&lt;/code&gt;, and 5.3.2 Unicode Codepoint Collation (here slightly adjusted from unordered to ordered list).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #876 closed</title>
   <pubDate>Wed, 10 Jan 2024 01:24:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/876</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-876</guid>
   <description>&lt;div&gt;&lt;p&gt;Placement of fn:in-scope-namespaces(), fn:in-scope-prefixes(), fn:namespace-uri-for-prefix()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #909 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:54:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/909</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-909</guid>
   <description>&lt;div&gt;&lt;p&gt;893 fn:compare: Support for arbitrary atomic types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #860 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:51:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/860</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-860</guid>
   <description>&lt;div&gt;&lt;p&gt;Unary Lookup when the context value is a sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #926 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:51:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/926</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-926</guid>
   <description>&lt;div&gt;&lt;p&gt;860 Editorial rearrangement of spec for shallow lookup&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #780 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:42:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/780</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-780</guid>
   <description>&lt;div&gt;&lt;p&gt;format-number() etc incompatibility&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #925 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:42:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/925</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-925</guid>
   <description>&lt;div&gt;&lt;p&gt;780 Document incompatibility in format-number etc&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #935 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:41:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/935</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-935</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix the fo test catalog&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #935 created</title>
   <pubDate>Tue, 9 Jan 2024 17:41:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/935</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-935</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix the fo test catalog&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A duplicate name was introduced.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #648 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:36:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/648</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-648</guid>
   <description>&lt;div&gt;&lt;p&gt;Schema for FN namespace should block extension and substitution&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #924 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:36:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/924</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-924</guid>
   <description>&lt;div&gt;&lt;p&gt;648 Disallow user modifications to schema for FN namespace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #913 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:30:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/913</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-913</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: under/unused variable apparatus&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #923 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:30:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/923</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-923</guid>
   <description>&lt;div&gt;&lt;p&gt;913-new-examples-for-local-name-etc&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #915 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:27:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/915</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-915</guid>
   <description>&lt;div&gt;&lt;p&gt;[Editorial] Incorrect terminology: function implementation is now function body&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #922 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:27:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/922</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-922</guid>
   <description>&lt;div&gt;&lt;p&gt;915 function body terminology&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #914 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:23:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/914</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-914</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO minor edits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #912 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:20:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/912</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-912</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Minor edits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #906 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:17:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/906</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-906</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: unordered → ordered&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #907 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:17:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/907</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-907</guid>
   <description>&lt;div&gt;&lt;p&gt;906 fn:deep-equal: unordered → ordered&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #898 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:14:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/898</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-898</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop the requirement for document-uri() uniqueness&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #905 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:14:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/905</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-905</guid>
   <description>&lt;div&gt;&lt;p&gt;898 - relax the constraints on document-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #821 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:11:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/821</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-821</guid>
   <description>&lt;div&gt;&lt;p&gt;Annotations: Make default namespace explicit&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #904 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:11:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/904</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-904</guid>
   <description>&lt;div&gt;&lt;p&gt;821 Annotations: Make default namespace explicit&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #895 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:07:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/895</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-895</guid>
   <description>&lt;div&gt;&lt;p&gt;Parameters with default values: allow empty sequences&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #901 closed</title>
   <pubDate>Tue, 9 Jan 2024 17:07:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/901</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-901</guid>
   <description>&lt;div&gt;&lt;p&gt;895 Parameters with default values: allow empty sequences&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #934 created</title>
   <pubDate>Mon, 8 Jan 2024 18:00:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/934</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-934</guid>
   <description>&lt;div&gt;&lt;p&gt;String comparison in deep-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The code showing how strings should be compared in deep-equal has gone awry, it doesn't match the prose. In equal-strings(), the lines&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $n1 := if ($options?whitespace = "normalize"))
             then normalize-unicode(?, $options?normalization-form) 
             else identity#1
  let $n2 := if ($options?normalize-space)
             then normalize-space#1 
             else identity#1      
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should read:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $n1 := if ($options?whitespace = 'normalize')
             then normalize-space#1 
             else identity#1    
let $n2 := if ($options?normalization-form))
             then normalize-unicode(?, $options?normalization-form) 
             else identity#1
  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Actually, the whole thing can now be expressed more concisely using fn:chain:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare function equal-strings(
  $string1   as xs:string,
  $string2   as xs:string, 
  $collation as xs:string,
  $options   as map(*)
) as xs:boolean {
  let $norm := fn:chain(?,
                        (normalize-unicode(?, $options?normalization-form)[$options?whitespace = "normalize"],
                         normalize-space#1[$options?normalize-space]))          
  return compare($norm($string1), $norm($string2), $collation) eq 0    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #933 created</title>
   <pubDate>Mon, 8 Jan 2024 12:49:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/933</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-933</guid>
   <description>&lt;div&gt;&lt;p&gt;930 drop obsolete note about comments and PIs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #930&lt;/p&gt;
&lt;p&gt;The note is obsolete because adjacent text nodes are now combined after stripping comments and PIs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #932 created</title>
   <pubDate>Mon, 8 Jan 2024 12:42:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/932</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-932</guid>
   <description>&lt;div&gt;&lt;p&gt;931 Add rules for duration precision&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #931&lt;/p&gt;
&lt;p&gt;Adds rules for the precision of durations and operations on durations, analogous to the existing rules for dates/times.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #931 created</title>
   <pubDate>Sun, 7 Jan 2024 10:21:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/931</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-931</guid>
   <description>&lt;div&gt;&lt;p&gt;Precision of duration arithmetic&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We specify that dates/times are manipulated at least to millisecond precision, but we have no similar statement for durations.&lt;/p&gt;
&lt;p&gt;See https://stackoverflow.com/questions/77752844&lt;/p&gt;
&lt;p&gt;michael.hor257k points out:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The 2.0 specification states: "The result is obtained by casting $arg to an xs:dayTimeDuration ... and then computing the seconds component as described in 10.3.2.3 Canonical representation." And then: "The canonical representation of xs:dayTimeDuration restricts ... the value of the seconds component to xs:decimal valued from 0.0 to 59.999... ", with reference to XML Schema Part 2: Datatypes which mandates "a minimum fractional second precision of milliseconds or three decimal digits". None of this appears in the 3.0 spec, though the examples still show a decimal digit being extracted. –&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #929 closed</title>
   <pubDate>Sun, 7 Jan 2024 10:19:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/929</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#closed-929</guid>
   <description>&lt;div&gt;&lt;p&gt;map:values() - Would it be better to return an array?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #930 created</title>
   <pubDate>Sat, 6 Jan 2024 17:13:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/930</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-930</guid>
   <description>&lt;div&gt;&lt;p&gt;Obsolete comment under fn:deep-equal()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The notes for fn:deep-equal() include the paragraph:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, the contents of comments and processing instructions are significant only if these nodes appear directly as items in the two sequences being compared. The content of a comment or processing instruction that appears as a descendant of an item in one of the sequences being compared does not affect the result. However, the presence of a comment or processing instruction, if it causes a text node to be split into two text nodes, may affect the result.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is no longer true: we fixed it so that adjacent text nodes are merged after stripping comments and PIs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #929 created</title>
   <pubDate>Sat, 6 Jan 2024 08:34:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/929</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-929</guid>
   <description>&lt;div&gt;&lt;p&gt;map:values() - Would it be better to return an array?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The new function &lt;code&gt;map:values()&lt;/code&gt; returns the values present in a map, flattened into a sequence.&lt;/p&gt;
&lt;p&gt;This loses information if the values are not all singletons.&lt;/p&gt;
&lt;p&gt;Would it be better to return an array?&lt;/p&gt;
&lt;p&gt;That is, to return &lt;code&gt;array:build(map:pairs($map), fn{?value}))&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #928 created</title>
   <pubDate>Sat, 6 Jan 2024 02:47:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/928</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-928</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor edits through ch. 15&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Light edits here for consistency, clarity. I didn't touch the CSV prose much, knowing it is subject to major revisions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #927 created</title>
   <pubDate>Thu, 4 Jan 2024 18:14:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/927</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-927</guid>
   <description>&lt;div&gt;&lt;p&gt;861 Rewrite spec of deep lookup operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #861&lt;/p&gt;
&lt;p&gt;This is a complete rewrite of the spec for deep-lookup, hopefully clarifying some edge cases and fixing bugs, but not intended to introduce any major changes.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #926 created</title>
   <pubDate>Thu, 4 Jan 2024 12:55:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/926</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-926</guid>
   <description>&lt;div&gt;&lt;p&gt;860 Editorial rearrangement of spec for shallow lookup&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Rearranges the spec for lookup expressions so that unary lookup is now defined in terms of postfix lookup, not the other way around; this simplifies the rules when the context value is not a singleton, or when the key specifier expression is context-dependent.&lt;/p&gt;
&lt;p&gt;Fix #860&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #925 created</title>
   <pubDate>Wed, 3 Jan 2024 23:39:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/925</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-925</guid>
   <description>&lt;div&gt;&lt;p&gt;780 Document incompatibility in format-number etc&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #780&lt;/p&gt;
&lt;p&gt;Changes the XSLT and F+O specs to document a minor incompatibility arising from the change to functions such as &lt;code&gt;format-number()&lt;/code&gt; to accept an argument of type &lt;code&gt;union(xs:string, xs:QName)&lt;/code&gt; rather than &lt;code&gt;xs:string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addition, in XSLT, all such functions now accept &lt;code&gt;union(xs:string, xs:QName)&lt;/code&gt; rather than &lt;code&gt;union(xs:QName, xs:string)&lt;/code&gt;. This is primarily to make them all consistent.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #924 created</title>
   <pubDate>Wed, 3 Jan 2024 19:59:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/924</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-924</guid>
   <description>&lt;div&gt;&lt;p&gt;648 Disallow user modifications to schema for FN namespace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #648&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #889 closed</title>
   <pubDate>Wed, 3 Jan 2024 19:34:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/889</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-889</guid>
   <description>&lt;div&gt;&lt;p&gt;Rename "Named Function Reference"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #923 created</title>
   <pubDate>Tue, 2 Jan 2024 23:02:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/923</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-923</guid>
   <description>&lt;div&gt;&lt;p&gt;913-new-examples-for-local-name-etc&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have created new (executable) examples for functions name, local-name, namespace-uri, node-name, count, number.&lt;/p&gt;
&lt;p&gt;There are of course many other functions that would benefit from the same treatment.&lt;/p&gt;
&lt;p&gt;Fix #913&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #922 created</title>
   <pubDate>Mon, 1 Jan 2024 21:23:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/922</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-922</guid>
   <description>&lt;div&gt;&lt;p&gt;915 function body terminology&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #915&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #921 created</title>
   <pubDate>Mon, 1 Jan 2024 20:14:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/921</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-921</guid>
   <description>&lt;div&gt;&lt;p&gt;920 Allow xsl:break and xsl:next-iteration within branch of xsl:switch&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Allow xsl:break and xsl:next-iteration within branch of xsl:switch&lt;/p&gt;
&lt;p&gt;Fix #920&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #920 created</title>
   <pubDate>Sat, 30 Dec 2023 12:55:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/920</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-920</guid>
   <description>&lt;div&gt;&lt;p&gt;The rules for the "tail position" of a sequence constructor need to take account of xsl:switch&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Under &lt;code&gt;xsl:iterate&lt;/code&gt;, there are rules defining what it means for an instruction to be in a tail position in a sequence constructor. In these rules &lt;code&gt;xsl:switch&lt;/code&gt; should be treated the same way as &lt;code&gt;xsl:choose&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #919 created</title>
   <pubDate>Thu, 28 Dec 2023 16:14:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/919</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-919</guid>
   <description>&lt;div&gt;&lt;p&gt;Should predicate callbacks use EBV?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently predicate callback functions used by things like fn:filter have to return a boolean; they can't rely on EBV semantics. For example you have to write &lt;code&gt;fn{boolean(self::p)}&lt;/code&gt; rather than &lt;code&gt;fn{self::p}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It's probably with &lt;code&gt;self&lt;/code&gt; tests that this is most noticeable, because self is so often used in a boolean context.&lt;/p&gt;
&lt;p&gt;Of course the current rule gives stricter type-checking which will presumably catch some user errors. But it seems an unnecessary inconsistency.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #918 created</title>
   <pubDate>Wed, 27 Dec 2023 03:27:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/918</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-918</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor cx through chap. 14&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:splice&lt;/code&gt; examples expanded to illustrate integer steps other than 1.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:unparsed-text-lines&lt;/code&gt; updated to reflect recent decisions about line handling in &lt;code&gt;fn:unparsed-text&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Other clarifications or corrections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if any of these edits are misfires.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #917 created</title>
   <pubDate>Fri, 22 Dec 2023 19:41:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/917</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-917</guid>
   <description>&lt;div&gt;&lt;p&gt;Better support for typed maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Edit (2023-01-04)&lt;/strong&gt;: See https://github.com/qt4cg/qtspecs/issues/917#issuecomment-1875712638 for the most promising suggestion resulting from the discussion in this thread.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Inspired by #720 and concerns regarding usability and performance, it may be a big step, but couldn’t we define records as subtypes of maps?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main difference would be that updates on records are only allowed as long as the resulting map matches a record definition.&lt;/li&gt;
&lt;li&gt;This would allow us to return much better error messages, and to prevent users from deconstructing their own data structures.&lt;/li&gt;
&lt;li&gt;We could still benefit from the existing map functions… provided that we believe it's an advantage. A stricter solution would be to disallow optional map entries completely (and treating records as a separate type).&lt;/li&gt;
&lt;li&gt;From a technical point of view, data with a fixed structure can be optimized much better than a structure that changes dynamically.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #916 created</title>
   <pubDate>Thu, 21 Dec 2023 17:15:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/916</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-916</guid>
   <description>&lt;div&gt;&lt;p&gt;720 Allow methods in maps with access to $this&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal allows functions within maps to access the containing map using the variable $this.&lt;/p&gt;
&lt;p&gt;The proposal needs editorial work to integrate it fully into the text, but it is intended to be sufficiently complete to enable a full technical review.&lt;/p&gt;
&lt;p&gt;Fix #720&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #915 created</title>
   <pubDate>Thu, 21 Dec 2023 11:45:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/915</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-915</guid>
   <description>&lt;div&gt;&lt;p&gt;[Editorial] Incorrect terminology: function implementation is now function body&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In 4.6.2.5 Inline Function Expressions we refer to the "implementation" property of a function item; this property has been renamed as the "function body".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #914 created</title>
   <pubDate>Thu, 21 Dec 2023 04:20:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/914</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-914</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO minor edits&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;From reading up through chap. 13. The change in the title of chap. 10.2 is more accurate, and avoids the repetition of the title of chap. 10 itself.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #913 created</title>
   <pubDate>Wed, 20 Dec 2023 23:00:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/913</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-913</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: under/unused variable apparatus&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the preamble of XQFO chap. 13, several paragraphs are spent introducing a tree structure example, defining variables &lt;code&gt;$po&lt;/code&gt;, &lt;code&gt;$item1&lt;/code&gt;, &lt;code&gt;$item2&lt;/code&gt;, and &lt;code&gt;$item3&lt;/code&gt;. The prose leads the reader to expect frequent invocation of this tree example, but chap. 13 never uses it.&lt;/p&gt;
&lt;p&gt;Chapter 13's tree example is referred to (sans link) and summarized in the preamble of chap. 14. In that chapter it is used only once, in a &lt;code&gt;fn:count&lt;/code&gt; example that really doesn't rely upon anything special in the tree example.&lt;/p&gt;
&lt;p&gt;Variables &lt;code&gt;$item1&lt;/code&gt; and &lt;code&gt;$item2&lt;/code&gt; are invoked only once more: in chap. 4, for &lt;code&gt;fn:number&lt;/code&gt;. It's rather out of the blue, because neither the function definition nor chapter 4's preamble say anything about what the variables mean.&lt;/p&gt;
&lt;p&gt;My recommendation is to drop this material all together, and for the functions &lt;code&gt;fn:count&lt;/code&gt; and &lt;code&gt;fn:number&lt;/code&gt; replace the examples with simpler examples.&lt;/p&gt;
&lt;p&gt;OTOH, I might have come across an incomplete implementation, and the editors might prefer to make more thorough use of this tree example. I don't know.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #912 created</title>
   <pubDate>Wed, 20 Dec 2023 12:13:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/912</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-912</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: Minor edits&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Editorial; examples fixed&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #297 closed</title>
   <pubDate>Tue, 19 Dec 2023 18:24:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/297</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-297</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup in deeply nested JSON, an abbreviated syntax for map:find&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #20 closed</title>
   <pubDate>Tue, 19 Dec 2023 16:37:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/20</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-20</guid>
   <description>&lt;div&gt;&lt;p&gt;Highlight EBNF grammar differences in the diff versions of the specs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #51 closed</title>
   <pubDate>Tue, 19 Dec 2023 16:37:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/51</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-51</guid>
   <description>&lt;div&gt;&lt;p&gt;Generalize lookup operator for function items&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #705 closed</title>
   <pubDate>Tue, 19 Dec 2023 16:37:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/705</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-705</guid>
   <description>&lt;div&gt;&lt;p&gt;Function Coercion: Function Arities&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #707 closed</title>
   <pubDate>Tue, 19 Dec 2023 16:37:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/707</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-707</guid>
   <description>&lt;div&gt;&lt;p&gt;Dynamic Function Calls: Processing Empty Sequences&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #892 closed</title>
   <pubDate>Tue, 19 Dec 2023 16:36:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/892</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-892</guid>
   <description>&lt;div&gt;&lt;p&gt;XPDY0002: Misleading examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #903 closed</title>
   <pubDate>Tue, 19 Dec 2023 16:36:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/903</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-903</guid>
   <description>&lt;div&gt;&lt;p&gt;892 XPDY0002: Misleading examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #902 closed</title>
   <pubDate>Tue, 19 Dec 2023 16:33:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/902</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-902</guid>
   <description>&lt;div&gt;&lt;p&gt;900 fn:sort, array:sort: Parameter names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #900 closed</title>
   <pubDate>Tue, 19 Dec 2023 16:33:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/900</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-900</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:sort, array:sort: Parameter names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #897 closed</title>
   <pubDate>Tue, 19 Dec 2023 16:30:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/897</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-897</guid>
   <description>&lt;div&gt;&lt;p&gt;894 - errors in forming function items&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #866 closed</title>
   <pubDate>Tue, 19 Dec 2023 16:27:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/866</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-866</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:sort, and XSLT and XQuery sorting, should use transitive comparisons&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #881 closed</title>
   <pubDate>Tue, 19 Dec 2023 16:27:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/881</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-881</guid>
   <description>&lt;div&gt;&lt;p&gt;866 Introduce and exploit new numeric-compare() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 059 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 19 Dec 2023 16:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/12-19</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-12-19</guid>
</item><item>
   <title>Issue #911 created</title>
   <pubDate>Mon, 18 Dec 2023 12:44:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/911</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-911</guid>
   <description>&lt;div&gt;&lt;p&gt;Type "Promotion" in the coercion rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have an open action: QT4CG-052-06: MK to consider the editorial question of “promotion” for the symmetric relations.&lt;/p&gt;
&lt;p&gt;I think the point that led to this was the fact that the word "promotion" seems inappropriate for cases like (string/uri) where the implicit conversion can take place in either direction.&lt;/p&gt;
&lt;p&gt;I'd like to propose a fix to this that is not merely editorial. I propose that we allow any cast from one numeric type to another in the coercion rules. For example, if the required type is decimal, then a double or float can be supplied. Since, for many implementations of xs:decimal, this can be done losslessly, it makes at least as much sense to convert from double to decimal as from decimal to double.&lt;/p&gt;
&lt;p&gt;The word "promotion" is in fact used (in relation to the coercion rules) only in a table heading, and we can change this heading to "implicit casting".&lt;/p&gt;
&lt;p&gt;Appendix B.1 currently says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;B.1 Type Promotion&lt;/p&gt;
&lt;p&gt;[Definition: Under certain circumstances, an atomic value can be promoted from one type to another.] Type promotion is used in a number of contexts:&lt;/p&gt;
&lt;p&gt;It forms part of the process described by the [coercion rules], invoked for example when a value of one type is supplied as an argument of a function call where the required type of the corresponding function parameter is declared with a different type.
It forms part of the process described in [B.2 Operator Mapping]), which selects the implementation of a binary operator based on the types of the supplied operands.
It is invoked (by explicit reference) in a number of other situations, for example when computing an average of a sequence of numeric values (in the fn:avg function).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and I suggest we retain the term only for the second case, operator mapping. This differs from the coercion rules in that there are two operands and the effect is always to convert one to the type of the other. This affects numeric types only (not string/uri or binary), and it will continue to promote decimal to double, decimal to float, and float to double.&lt;/p&gt;
&lt;p&gt;Where functions (fn:avg, fn:sum, math:pow) refer to the promotion rules, I suggest that we spell out the conversions that happen explictly, since it's not entirely obvious how the rules should be extrapolated. (For example, fn:avg doesn't make it entirely clear what should happen if the first item is a decimal, the second is a float, and the third is a double. Are you expected to "look ahead" to see what types are present, rather than evaluating the average incrementally?)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 059 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 18 Dec 2023 11:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/12-19</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-12-19</guid>
</item><item>
   <title>Issue #910 created</title>
   <pubDate>Mon, 18 Dec 2023 02:45:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/910</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-910</guid>
   <description>&lt;div&gt;&lt;p&gt;Introduce a Kollection object with functions that operate on all types of items that can be containers of unlimited number of "members"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The base for this issue is the email sent by @ndw  to  public-xslt-40@w3.org on Dec. 13th 2023, fully quoted below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello all,&lt;/p&gt;
&lt;p&gt;After a couple of weeks of discussion[1][2] about naming things, there
seem to be a some quite different perspectives on the problem.&lt;/p&gt;
&lt;p&gt;As background, let’s remember that we have a language (or a set of
languages) that evolved over time. We couldn’t anticipate in version
1.0 what we would have in 4.0. We added new features in 2.0 and 3.0
that weren’t anticipated in previous versions either.&lt;/p&gt;
&lt;p&gt;We live with decisions (some the result of long and hard battles
within the working group(s)) like the fact that sequences don’t nest
so all individual items are also sequences of length one.&lt;/p&gt;
&lt;p&gt;The context for each addition to the language has been roughly: how
can we add new, useful features with a minimum of backwards
incompatibility.&lt;/p&gt;
&lt;p&gt;It’s a natural consequence of this sort of evolution that there are
rough edges. Why does fn:count returns the number of items in a
sequence but always returns 1 if the argument is an array? Because an
array is an item and an item is a sequence of length one.&lt;/p&gt;
&lt;p&gt;(It doesn’t help that the vision of what the X* languages should be
has changed over time. What started out envisioned as a tool for
transforming documents from one format to another for presentation on
the web or in print has grown into something that at least some
members of the group view as first class, functional programming
languages. That’s not bad, but it puts entirely different stresses on
the design, I think.)&lt;/p&gt;
&lt;p&gt;As we add new functions (specifically, in the case of recent
discussions, but I expect the same perspectives apply more generally),
I think one perspective is roughly this:&lt;/p&gt;
&lt;p&gt;How can we name and organize the functions so that users are least
likely to be surprised and most likely to be able to figure out how
to solve a particular problem?&lt;/p&gt;
&lt;p&gt;Taken to an extreme, this perspective isn’t about changing the
semantics of the functions at all, it’s “just” about naming them. Is
fn:get() better (easier to understand, less confusing) than
fn:items-at?&lt;/p&gt;
&lt;p&gt;I think another perspective is roughly this:&lt;/p&gt;
&lt;p&gt;We have a messy design. It would be better if we could refactor the
design so that it was more harmonious and logical. We don’t need
four different, closely related functions to get items out of
different sorts of data structures, we need a set of abstractions
that make it obvious that only one function is necessary.&lt;/p&gt;
&lt;p&gt;Taken to an extreme, this perspective is about reshaping the whole
language so that a single, obvious set of function names emerges
naturally from the carefully constructed abstractions.&lt;/p&gt;
&lt;p&gt;I don’t think anyone holds exactly one perspective (discussions about
renaming often involve some level of discussion about semantics, for
example) and I’m attempting to polarize the perspectives a little bit
in an effort to shine light on a larger problem, not to be divisive.&lt;/p&gt;
&lt;p&gt;With my chair’s hat on, the main problem I see with the first
perspective is that naming is hard, often personal and emotional, and
will never be wholly logical (so there will always be more to discuss,
so the “problem” is never resolved). It’s not quite fair to say it’s a
distraction from the “bigger” issues we need to resolve, but it does
take a lot of time.&lt;/p&gt;
&lt;p&gt;I see the appeal of the second perspective. If we had a green field,
we’d do things differently. I think we might all agree that, ideally,
fn:count should return the number of items in a sequence, the number
of items in an array, and the number of key-value pairs in a map. But
it doesn’t and it can’t without fundamentally breaking things. I don’t
think we’d get agreement to break fn:count, so what can we do?&lt;/p&gt;
&lt;p&gt;A proposal to fundamentally redesign the data model would be a tough
sell, I think.&lt;/p&gt;
&lt;p&gt;One thing we could do is define a new namespace “gn” with functions
that work more logically, that treat sequences, arrays, and maps, as
collections and operate on them uniformly.&lt;/p&gt;
&lt;p&gt;I suppose we could reconstruct the whole set of functions in this new
namespace and focus our efforts there, perhaps going so far as to
deprecate the current fn: namespace in favor of this new one.
But could we get consensus to do that? Would users thank us?&lt;/p&gt;
&lt;p&gt;I dunno. Innovations welcome.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                    Be seeing you,
                                      norm
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This issue addresses the 2nd alternative formulated briefly by Norm as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One thing we could do is define a new namespace “gn” with functions
that work more logically, that treat sequences, arrays, and maps, as
collections and operate on them uniformly.&lt;/p&gt;
&lt;p&gt;I suppose we could reconstruct the whole set of functions in this new
namespace and focus our efforts there, perhaps going so far as to
deprecate the current fn: namespace in favor of this new one.
But could we get consensus to do that? Would users thank us?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are some of the obvious advantages of having a uniform Kollection concept that covers: arrays, sequences, maps, ... and possibly future new, specific, collection-like datatypes as sets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Uniform definition and understanding of a single data type - the Kollection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O(N) functions only, compared to O(M * N) at present. Here N is the number of functions needed for each of the current collection-like data types (Arrays, Sequences and Maps) and M is the number of collection-like data types (currently 3).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The users will need to know about and understand just the single Kollection data type and its functions, not 3 or more similar collection-like data  types and 3 or more number of similar (but different) functions. Minimizing by a factor of 3 the amount of factual knowledge that a user needs is something HUGE  and extremely positive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allowing users to say "Good Bye" to the unclear and treacherous flat-sequence concepts we have as legacy from XPath 1.0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Staying aligned to the examples of other modern programming languages such as C# with its IEnumerable interface. It is good to know that this has already been done in other shining programming languages, thus a nay-sayer will not be able to argue that this is not doable or, if done, would be negative to the language and its users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Freeing enormous resources and time for the members of the Community Group so that they can spend this on more valuable avenues, than trying to find similar and best names to M similar functions each defined to one of the M current collection-like data types.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, to dispel some plausible myths before they start circulating here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Myth 1: This will break backwards-compatibility? No, as proposed by Norm, all the functions operating on the generalized collection data type can be in a separate, new namespace and thus no existing user-code is affected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Myth 2: If a sequence containing a single Kollection still has &lt;code&gt;count()&lt;/code&gt; of 1, then what is the use of the Kollection data type? Actually, as proposed by Norm, the Kollection data type and its functions reside in their own namespace. Doing things using only functions from this new namespace eliminates the possibility of using &lt;code&gt;fn:count&lt;/code&gt; as it resides in the different, currently existing standard function namespace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Myth 3: This will be too-complex for the users and the users will not embrace it, so let us not waste time designing it. Wow, there were such prophets saying exactly the same about LINQ in 2005. As it often happens, the future proved them wrong. Users clearly and overwhelmingly "voted with their code" incorporating LINQ in almost all everyday applications and code repositories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Myth 4: Banning the current functions operating on sequences, arrays and maps would be a huge burden to the users, and would intervene negatively with their programming. In fact, nobody would be banning any of the existing functions. Users can continue to use them forever. The acceptance of the uniform and generalized Kollection data - type can happen gradually with time, as was the case with the addition of LINQ to C#.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #909 created</title>
   <pubDate>Sun, 17 Dec 2023 14:04:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/909</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-909</guid>
   <description>&lt;div&gt;&lt;p&gt;893 fn:compare: Support for arbitrary atomic types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #908 created</title>
   <pubDate>Sun, 17 Dec 2023 11:57:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/908</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-908</guid>
   <description>&lt;div&gt;&lt;p&gt;Function identity: documentation, nondeterminism&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In #520, the concept of function identities was introduced. This is what the current draft says:&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://qt4cg.org/specifications/xpath-datamodel-40/Overview.html#function-items"&gt;XDM, 2.9.4 Function Items&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;identity&lt;/strong&gt;: an abstract property that can be used to test whether two variables refer to the same function or to different functions. This property is exposed only for this purpose.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Currently, the concept of function identity is used for two purposes: firstly, when functions appear in the arguments supplied to the &lt;code&gt;fn:deep-equal&lt;/code&gt; function; and secondly, in establishing whether the arguments and results of a function are "the same" when deciding whether the function is deterministic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Function identity is not currently defined for maps and arrays, because in the circumstances where function identity would otherwise be used, maps and arrays are compared by examining their content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#properties-of-functions"&gt;XQFO, 1.8.4 Properties of functions&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol start="5"&gt;
&lt;li&gt;[…] the two function items have the same function identity. The concept of function identity is explained in Section 2.9.4 Function Items.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-deep-equal"&gt;XQFO, 14.2.8 fn:deep-equal&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;c. &lt;code&gt;$i1&lt;/code&gt; and &lt;code&gt;$i2&lt;/code&gt; have the same function identity. The concept of function identity is explained in Section 2.9.4 Function Items.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-function-lookup"&gt;XQFO, 17.1.1 fn:function-lookup&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The function identity is determined in the same way as for a named function reference. Specifically, if there is no context dependency, two calls on &lt;code&gt;fn:function-lookup&lt;/code&gt; with the same name and arity must return the same function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While I definitely believe in the concept, I believe the documentation is still cryptic, or even impossible, to understand, at least without reading #520 or consuming the existing QT4 test cases. Here are some questions that I’m trying to answer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does “abstract property” mean that the property will not be materialized in an implementation, or does it mean that the property too vague to be precisely defined?&lt;/li&gt;
&lt;li&gt;We should try to specify what “refer to the same function” means. Are function properties that allow us to at least safely identify a subset of functions the same? For example, will &lt;code&gt;true#0&lt;/code&gt; and &lt;code&gt;true#0&lt;/code&gt; always be identical? The test cases imply this, whereas #520 doesn’t.&lt;/li&gt;
&lt;li&gt;In XQFO 17.1.1, there’s a hint that context-dependency influences the decision if functions are identified as equal. Does this mean that &lt;code&gt;name#0&lt;/code&gt; and &lt;code&gt;name#0&lt;/code&gt; cannot be equal? Or can, or will, they be equal if the context is identical?&lt;/li&gt;
&lt;li&gt;The term “deterministic” does not appear anywhere else in the XDM spec, so one is inclined to think of the XQFO nondeterminism. It is then unclear whether two instances of, for example, &lt;code&gt;map:entries&lt;/code&gt; and &lt;code&gt;fn:parse-xml&lt;/code&gt; can be “the same” if the parameters are the same.&lt;/li&gt;
&lt;li&gt;In XQFO 17.1.1, “must return the same function.” is also unclear: What exactly is meant by “same function”? Is it a function that creates an identical result (thus, excluding nondeterministic functions like &lt;code&gt;fn:parse-xml&lt;/code&gt;)?&lt;/li&gt;
&lt;li&gt;We should explain better what was the motivation to include the context-dependency of functions in the definition. It would certainly be more intuitive if both &lt;code&gt;deep-equal(name#0, name#0)&lt;/code&gt; and &lt;code&gt;deep-equal(name#1, name#1)&lt;/code&gt; returned &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m sorry for not offering good answers in return. I could try to describe what we’ve implemented so far – mostly inspired by the test cases – but I’m not sure if it meets the requirements.&lt;/p&gt;
&lt;p&gt;Related: #333&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #907 created</title>
   <pubDate>Sat, 16 Dec 2023 09:33:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/907</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-907</guid>
   <description>&lt;div&gt;&lt;p&gt;906 fn:deep-equal: unordered → ordered&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #906 created</title>
   <pubDate>Sat, 16 Dec 2023 09:32:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/906</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-906</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: unordered → ordered&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As already suggested in https://github.com/qt4cg/qtspecs/pull/798#pullrequestreview-1709271106 (and by first user feedback), the upcoming PR renames the option &lt;code&gt;unordered&lt;/code&gt; to &lt;code&gt;ordered&lt;/code&gt;, with &lt;code&gt;true&lt;/code&gt; as default.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #339 closed</title>
   <pubDate>Fri, 15 Dec 2023 16:24:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/339</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-339</guid>
   <description>&lt;div&gt;&lt;p&gt;The constraints on document-uri are too...constraining&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #905 created</title>
   <pubDate>Thu, 14 Dec 2023 13:49:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/905</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-905</guid>
   <description>&lt;div&gt;&lt;p&gt;898 - relax the constraints on document-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #898&lt;/p&gt;
&lt;p&gt;Changes non-normative text for the doc() and document-uri() functions to make it clearer that the consequences of the normative rules are not quite as previously stated.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #904 created</title>
   <pubDate>Thu, 14 Dec 2023 11:42:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/904</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-904</guid>
   <description>&lt;div&gt;&lt;p&gt;821 Annotations: Make default namespace explicit&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In addition: Lexicographic order; formatting.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #129 closed</title>
   <pubDate>Thu, 14 Dec 2023 11:22:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/129</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-129</guid>
   <description>&lt;div&gt;&lt;p&gt;Context item → Context value?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #608 closed</title>
   <pubDate>Thu, 14 Dec 2023 11:21:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/608</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-608</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting Monospace (II)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #903 created</title>
   <pubDate>Thu, 14 Dec 2023 09:13:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/903</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-903</guid>
   <description>&lt;div&gt;&lt;p&gt;892 XPDY0002: Misleading examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #902 created</title>
   <pubDate>Thu, 14 Dec 2023 08:18:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/902</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-902</guid>
   <description>&lt;div&gt;&lt;p&gt;900 fn:sort, array:sort: Parameter names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #900. In addition, the equivalent expression for &lt;code&gt;array:sort&lt;/code&gt; was fixed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #901 created</title>
   <pubDate>Wed, 13 Dec 2023 18:05:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/901</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-901</guid>
   <description>&lt;div&gt;&lt;p&gt;895 Parameters with default values: allow empty sequences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #895&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #900 created</title>
   <pubDate>Wed, 13 Dec 2023 16:03:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/900</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-900</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:sort, array:sort: Parameter names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The sort functions now accept multiple collations, keys, and orders, and this needs to be reflected in the parameter names (which are still singular).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #899 created</title>
   <pubDate>Wed, 13 Dec 2023 15:31:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/899</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-899</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplifying the language - types have behaviour.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I may misunderstand something but I always find the use of types and "as" to be counter intuitive (I'd prefer to be able to run an xslt 3+ script in some sort of 'strict' mode that was a bit more rigid, but thus simpler) e.g.&lt;/p&gt;
&lt;p&gt;consider&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      &amp;lt;xsl:variable name="foo1"&amp;gt;
         &amp;lt;foo/&amp;gt;
      &amp;lt;/xsl:variable&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;question - what is the type of &lt;code&gt;foo1&lt;/code&gt;?
answer - (according to my saxon/oxygen setup the answer is) "document-node"&lt;/p&gt;
&lt;p&gt;consider&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      &amp;lt;xsl:variable name="foo2" as="element(foo)"&amp;gt;
         &amp;lt;foo/&amp;gt;
      &amp;lt;/xsl:variable&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;question - is this code valid then (I would as someone not used to xslt 2+ assume not)?
answer - yes&lt;/p&gt;
&lt;p&gt;but surely this code is identical to foo1, so the 'type' of variable is actually changing the interpretation of the expression.&lt;/p&gt;
&lt;p&gt;For me that's quite confusing&lt;/p&gt;
&lt;p&gt;It would appear that these 2 values are not two different views (interfaces) of the same underlying value, else this&lt;/p&gt;
&lt;p&gt;&lt;code&gt;     &amp;lt;xsl:variable name="foo3" as="element(foo)" select="$foo1"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;would be valid.&lt;/p&gt;
&lt;p&gt;It isnt (i.e. this doesn't appear to be some subtle OO style scenario where an evaluation can have multiple interfaces, here 'document-node' and 'element' are presumably disjoint types).&lt;/p&gt;
&lt;p&gt;For me conceptually types are descriptions of expressions, they have no behaviour, yet here they appear to (to me) effect the interpretation, not simply describe it.&lt;/p&gt;
&lt;p&gt;For me, I'd prefer a 'strict' mode where either&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      &amp;lt;xsl:variable name="foo2" as="element(foo)"&amp;gt;
         &amp;lt;foo/&amp;gt;
      &amp;lt;/xsl:variable&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is a type error, because the expression is clearly a document-node OR some other mechanism to clarify the ambiguity without this conceptual wrinkle.&lt;/p&gt;
&lt;p&gt;An expression should either have 1 interpretation, or if its ambigious, that should be an error, I don't think the language should default to prefer one over another.&lt;/p&gt;
&lt;p&gt;P.S.
why doesnt this work? I genuinely don't know how to explicitly declare something as a document-node.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;xsl:variable name="foo1" as=document-node()&amp;gt;
     &amp;lt;foo/&amp;gt;
  &amp;lt;/xsl:variable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #898 created</title>
   <pubDate>Wed, 13 Dec 2023 10:04:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/898</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-898</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop the requirement for document-uri() uniqueness&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specification of document-uri() states that the returned URI must be useable as input to the doc() function and that it always round-trips, so &lt;code&gt;doc(document-uri($X)) is $X&lt;/code&gt; is guaranteed true.&lt;/p&gt;
&lt;p&gt;A consequence of this rule is that you can't have two documents in the same execution scope with the same document-uri() property.&lt;/p&gt;
&lt;p&gt;Enforcing this rule causes a lot of trouble. For example at the API level, the user can set two stylesheet or query parameters to two different documents that are associated with the same URI. Another example, two XSLT packages in the same stylesheet can call doc() on the same URI and get different documents back because they have set different validation and whitespace-stripping options. Use of &lt;code&gt;fn:transform()&lt;/code&gt; causes further complications when documents are passed across the boundary (in fact that's where we first encountered the problem). And &lt;code&gt;collection()&lt;/code&gt; brings further complications.&lt;/p&gt;
&lt;p&gt;In order to conform to the rule in the spec, we changed Saxon a while back so the only documents that are guaranteed to have a document-uri() property are those that were read using the doc() function - and even then, things like validation and whitespace variations are troublesome. This causes users much confusion, partly, because of the change from earlier Saxon releases, but more because there are many situations where they would expect document-uri() to give a useful result and it doesn't.&lt;/p&gt;
&lt;p&gt;I think we can fix this simply by removing the guarantee. That will cause less inconvenience to users than the current rule. We could perhaps modify it to say that in the case of a document returned from the doc() function, its document-uri() property will be such that a call to doc() with that URI will return the same document, but in the case of documents derived from other sources (for example &lt;code&gt;collection()&lt;/code&gt;, or a result from &lt;code&gt;fn:transform&lt;/code&gt;) there is no such guarantee.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #887 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:57:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/887</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-887</guid>
   <description>&lt;div&gt;&lt;p&gt;Trivial syntax error under "named function references"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #896 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:57:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/896</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-896</guid>
   <description>&lt;div&gt;&lt;p&gt;887 - fix simple typo in example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #862 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:54:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/862</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-862</guid>
   <description>&lt;div&gt;&lt;p&gt;Examples needed for "Implausible Expressions"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #884 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:54:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/884</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-884</guid>
   <description>&lt;div&gt;&lt;p&gt;862 Add explanations and examples of implausible expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #844 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:53:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/844</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-844</guid>
   <description>&lt;div&gt;&lt;p&gt;New sequence functions: names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #879 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:53:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/879</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-879</guid>
   <description>&lt;div&gt;&lt;p&gt;844 New sequence functions: names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #875 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:49:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/875</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-875</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO, chap. 9 minor edits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #865 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:46:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/865</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-865</guid>
   <description>&lt;div&gt;&lt;p&gt;Need to explain change in numeric comparison semantics&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #873 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:46:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/873</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-873</guid>
   <description>&lt;div&gt;&lt;p&gt;865 Improve explanation of equality comparisons&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #867 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:42:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/867</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-867</guid>
   <description>&lt;div&gt;&lt;p&gt;Signature notation in F+O: default values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #870 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:42:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/870</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-870</guid>
   <description>&lt;div&gt;&lt;p&gt;867 Explain defaults in function signatures&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #864 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:41:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/864</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-864</guid>
   <description>&lt;div&gt;&lt;p&gt;$position argument in fold-right&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #742 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:39:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/742</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-742</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:function-library: keep, drop, or refine?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #863 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:39:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/863</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-863</guid>
   <description>&lt;div&gt;&lt;p&gt;742 Drop xsl:function-library declaration&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #847 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:24:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/847</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-847</guid>
   <description>&lt;div&gt;&lt;p&gt;build-uri() - is {"port":()} legal?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #849 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:24:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/849</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-849</guid>
   <description>&lt;div&gt;&lt;p&gt;847 Allow uri-structure-record keys to have empty sequence values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #479 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:21:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/479</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-479</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: Input order&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #798 closed</title>
   <pubDate>Tue, 12 Dec 2023 17:21:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/798</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-798</guid>
   <description>&lt;div&gt;&lt;p&gt;479: fn:deep-equal: Input order&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 058 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 12 Dec 2023 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/12-12</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-12-12</guid>
</item><item>
   <title>Pull request #897 created</title>
   <pubDate>Tue, 12 Dec 2023 15:59:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/897</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-897</guid>
   <description>&lt;div&gt;&lt;p&gt;894 - errors in forming function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #894&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #896 created</title>
   <pubDate>Tue, 12 Dec 2023 15:18:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/896</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-896</guid>
   <description>&lt;div&gt;&lt;p&gt;887 - fix simple typo in example&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #887&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #895 created</title>
   <pubDate>Tue, 12 Dec 2023 11:47:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/895</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-895</guid>
   <description>&lt;div&gt;&lt;p&gt;Parameters with default values: allow empty sequences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We need a consistent approach for defining types of optional function arguments. In most current cases, if a function argument is supplied, it must be non-empty:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:get(
  $map       as map(*),
  $key       as xs:anyAtomicType,
  $fallback  as function(xs:anyAtomicType) as item()*  := void#1
) as item()*

fn:starts-with-sequence(
  $input        as item()*,
  $subsequence	as item()*,
  $compare      as function(item(), item()) as xs:boolean  := fn:deep-equal#2
) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In some cases, it’s optional:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:replace(
  $value        as xs:string?,
  $pattern      as xs:string,
  $replacement  as xs:string?                                                   := (),
  $flags        as xs:string?                                                   := '',
  $action       as (function(xs:untypedAtomic, xs:untypedAtomic*) as item()?)?  := ()
) as xs:string)

(: #874 :)
fn:subsequence(
  $input   as item()*,
  $start   as xs:double?                                     := (),
  $length  as xs:double?                                     := (),
  $from    as (function(item(), xs:integer) as xs:boolean)?  := (),
  $while   as (function(item(), xs:integer) as xs:boolean)?  := (),
  $until   as (function(item(), xs:integer) as xs:boolean)?  := ()
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result, &lt;code&gt;map:get($map, fallback := ())&lt;/code&gt; is invalid, while &lt;code&gt;replace($string, $pattern, action := ())&lt;/code&gt;  would be valid.&lt;/p&gt;
&lt;p&gt;I think it’s better to enforce non-empty arguments (provided that a single item is expected).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #894 created</title>
   <pubDate>Tue, 12 Dec 2023 11:21:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/894</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-894</guid>
   <description>&lt;div&gt;&lt;p&gt;Errors in forming function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Follow-up to issue #888&lt;/p&gt;
&lt;p&gt;There are a number of situations in which error behaviour is insufficiently specified:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consider the partial function application &lt;code&gt;fn:contains(?, 23)&lt;/code&gt;, where the second argument is an integer, not a string. Does the partial application fail, or does it result in a function item that fails when dynamically evaluated? The spec does not say.&lt;/li&gt;
&lt;li&gt;Consider the expression &lt;code&gt;function-lookup(fn:name, 0&lt;/code&gt;) evaluated when there is no context item in the dynamic context. Does the call on function-lookup fail, or does it return a function item that fails when dynamically evaluated? The spec does not say, though there are numerous test cases in the function-lookup test set that suggest the latter.&lt;/li&gt;
&lt;li&gt;The same is true for the expression &lt;code&gt;fn:name#0&lt;/code&gt; evaluated when there is no context item in the dynamic context.&lt;/li&gt;
&lt;li&gt;Consider a user-defined function &lt;code&gt;my:f&lt;/code&gt; with a parameter that has a default value of "."; consider both a function reference &lt;code&gt;my:f#0&lt;/code&gt; and a partial application &lt;code&gt;my:f(?)&lt;/code&gt; evaluated when there is no context item. Again, I think the spec is unclear on the error behaviour.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It feels to me that the right thing to do in all these cases is to raise the error early: that is, to fail at the point where a function item is being constructed, not at the point where the function item is subsequently evaluated. However, this disagrees with QT3 expected test results for tests such as &lt;code&gt;fn-function-lookup-267&lt;/code&gt; and &lt;code&gt;function-literal-267&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #893 created</title>
   <pubDate>Mon, 11 Dec 2023 17:46:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/893</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-893</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:compare: Support for arbitrary atomic types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Inspired by #866:&lt;/p&gt;
&lt;p&gt;We should extend &lt;code&gt;fn:compare&lt;/code&gt; to support arbitrary atomic types. The comparison rules…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;would be unchanged for strings,&lt;/li&gt;
&lt;li&gt;would rely on &lt;code&gt;fn:numeric-compare&lt;/code&gt; for numbers, and&lt;/li&gt;
&lt;li&gt;would rely on the existing &lt;code&gt;op:&lt;/code&gt; functions for the remaining types.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, the rule for dates would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; is returned if &lt;code&gt;op:date-equal(A, B)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1&lt;/code&gt; is returned if &lt;code&gt;op:date-less-than(A, B)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; is returned otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some types will be rejected (&lt;code&gt;xs:duration&lt;/code&gt;, &lt;code&gt;xs:QName&lt;/code&gt;, &lt;code&gt;xs:NOTATION&lt;/code&gt;, Gregorian types).&lt;/p&gt;
&lt;p&gt;In addition, I would vote for making &lt;code&gt;fn:numeric-compare&lt;/code&gt; and &lt;code&gt;fn:atomic-equal&lt;/code&gt; private. I don’t see a benefit to expose them; I rather expect people to be confused.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #892 created</title>
   <pubDate>Mon, 11 Dec 2023 16:38:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/892</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-892</guid>
   <description>&lt;div&gt;&lt;p&gt;XPDY0002: Misleading examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Related to #888. The examples in &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-eval-dynamic-function-call"&gt;4.6.2.2 Evaluating Dynamic Function Calls&lt;/a&gt;…&lt;/p&gt;
&lt;img src="https://github.com/qt4cg/qtspecs/assets/196589/f8e9996e-e64b-4e90-b05f-92e649220f5f" width="777"/&gt;
&lt;p&gt;…are misleading; all of them raise &lt;code&gt;XPDY0002&lt;/code&gt; if no element is bound to the global context value. Maybe &lt;code&gt;shop&lt;/code&gt; could be replaced with &lt;code&gt;$shop&lt;/code&gt; or &lt;code&gt;doc('wares.xml')/shop&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 058 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 11 Dec 2023 13:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/12-12</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-12-12</guid>
</item><item>
   <title>Issue #891 closed</title>
   <pubDate>Mon, 11 Dec 2023 10:01:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/891</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-891</guid>
   <description>&lt;div&gt;&lt;p&gt;Cleanup the post-diff-hacking hack&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #891 created</title>
   <pubDate>Mon, 11 Dec 2023 10:01:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/891</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-891</guid>
   <description>&lt;div&gt;&lt;p&gt;Cleanup the post-diff-hacking hack&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Improved, I think.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #890 closed</title>
   <pubDate>Mon, 11 Dec 2023 09:38:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/890</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-890</guid>
   <description>&lt;div&gt;&lt;p&gt;Stop fussing with merge base branch&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #890 created</title>
   <pubDate>Mon, 11 Dec 2023 09:38:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/890</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-890</guid>
   <description>&lt;div&gt;&lt;p&gt;Stop fussing with merge base branch&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Trying to track down the spurious diffs that we see in PRs.&lt;/p&gt;
&lt;p&gt;I'll have to merge this to test it, so there will be a few random merges here. Sorry.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #889 created</title>
   <pubDate>Mon, 11 Dec 2023 00:26:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/889</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-889</guid>
   <description>&lt;div&gt;&lt;p&gt;Rename "Named Function Reference"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The term "named function reference" is used for a construct like &lt;code&gt;name#1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Although we define it as "A named function reference is an expression (written name#arity) which evaluates to a [function item]", the term "named function reference" perpetuates the incorrect assumption that it is some kind of literal or constant denoting a function item.&lt;/p&gt;
&lt;p&gt;Of course, in many cases it can be treated as just that. But not when the function is context-dependent, for example name#0 or lang#1.&lt;/p&gt;
&lt;p&gt;The term is also questionable because one would assume that a "named function reference" is a reference to a "named function", but there is no such concept as a "named function".&lt;/p&gt;
&lt;p&gt;So what might be a better name? What the expression actually does (when evaluated) is to search the static context for a function definition whose name and arity range correspond, and then construct a function item that captures the relevant part of the dynamic context in its closure. It's hard to encapsulate all of that in a simple name for the construct, but I would suggest &lt;strong&gt;named function generator&lt;/strong&gt;. This is sufficiently close to the current term to be recognisable, but tries to capture the fact that it's not just a constant or literal, it's an expression that activately does something when evaluated; and it's reasonably accurate in that the result of the evaluation is a function item that has a non-absent name.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #888 created</title>
   <pubDate>Sat, 9 Dec 2023 23:31:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/888</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-888</guid>
   <description>&lt;div&gt;&lt;p&gt;Reclassify XPDY0002 as a type error&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose to reclassify XPDY0002 (context item is absent) as a type error rather than a dynamic error.&lt;/p&gt;
&lt;p&gt;I don't propose to change the error code.&lt;/p&gt;
&lt;p&gt;The only practical distinction is that this will allow the error to be reported statically when it can be detected statically, for example if the user writes something like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function($x as node()) {
  starts-with(name(), 'x')
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At present Saxon will give you a compile-time warning for this, followed by a run-time error if the code is actually executed; this is the required behaviour for dynamic errors.&lt;/p&gt;
&lt;p&gt;The change does mean that in a case like this example, it will no longer be possible to catch the error using try/catch. However, type errors can only be reported statically if the code is bound to fail at run-time, and catching errors that occur every time is not especially useful.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #887 created</title>
   <pubDate>Fri, 8 Dec 2023 15:04:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/887</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-887</guid>
   <description>&lt;div&gt;&lt;p&gt;Trivial syntax error under "named function references"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the XPath/XQuery book, §4.6.2.4,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;let $f := &amp;lt;foo/&amp;gt;/fn:name#0 return &amp;lt;bar&amp;gt;/$f()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;should be&lt;/p&gt;
&lt;p&gt;&lt;code&gt;let $f := &amp;lt;foo/&amp;gt;/fn:name#0 return &amp;lt;bar/&amp;gt;/$f()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Digging a bit deeper, this reveals that we are not properly tagging and syntax-checking code examples in the spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #886 created</title>
   <pubDate>Thu, 7 Dec 2023 23:56:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/886</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-886</guid>
   <description>&lt;div&gt;&lt;p&gt;Binary map keys&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have made &lt;code&gt;xs:hexBinary&lt;/code&gt; and &lt;code&gt;xs:base64Binary&lt;/code&gt; comparable and we now allow implicit coercion between the two types.&lt;/p&gt;
&lt;p&gt;I've been assuming, though I'm not sure we ever discussed it, that this automatically means that the two types can be "atomic equal" from the point of view of entries in maps: that is, a hexBinary representation of a particular binary value can no longer coexist in a map with a base64Binary representation of the same binary value.&lt;/p&gt;
&lt;p&gt;If we were starting from scratch this would clearly make sense, but it has some messy implications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's a backwards incompatibility; in 3.1 you could construct maps that you can no longer construct in 4.0&lt;/li&gt;
&lt;li&gt;It potentially affects interoperability of 3.1 and 4.0 applications. For example, an XQuery 4.0 application invoking an XSLT 3.0 transformation via &lt;code&gt;fn:transform&lt;/code&gt; might get back a map that's not a valid map in 4.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In effect, this is not just a change to the behaviour of one function/operator, it is a data model change, because it changes the value space of the &lt;code&gt;map(*)&lt;/code&gt; data type.&lt;/p&gt;
&lt;p&gt;And more parochially, I freely admit, there's a lot of internal complexity trying to maintain a code base that supports both the 3.1 and 4.0 rules simultaneously.&lt;/p&gt;
&lt;p&gt;Is this a feature that benefits users sufficiently to justify the transition complexities? Note that we can still support "eq" between the two data types without supporting &lt;code&gt;fn:atomic-equal&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #885 created</title>
   <pubDate>Thu, 7 Dec 2023 17:38:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/885</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-885</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:uuid&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;…to create a random universally unique identifier (UUID), represented as 128-bit value.&lt;/p&gt;
&lt;p&gt;Should ideally be nondeterministic, or we may need to do something that’s similar to &lt;code&gt;fn:random-number-generator&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #884 created</title>
   <pubDate>Wed, 6 Dec 2023 22:49:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/884</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-884</guid>
   <description>&lt;div&gt;&lt;p&gt;862 Add explanations and examples of implausible expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #862&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #883 created</title>
   <pubDate>Wed, 6 Dec 2023 21:57:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/883</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-883</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve return type for fn:load-xquery-module()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The return type is given as &lt;code&gt;map(*)&lt;/code&gt;. We could make it more precise with a record type.&lt;/p&gt;
&lt;p&gt;The same goes for a number of other function signatures that currently use map(*) as an argument or result type.&lt;/p&gt;
&lt;p&gt;Perhaps we should also define a more precise type for options parameters.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #882 created</title>
   <pubDate>Wed, 6 Dec 2023 18:53:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/882</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-882</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:chain or fn:compose&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I thought I had a great opportunity to use &lt;code&gt;fn:chain&lt;/code&gt; the other day, and then found it didn't do what I wanted.&lt;/p&gt;
&lt;p&gt;I wanted to negate a predicate: in pseudo-code&lt;/p&gt;
&lt;p&gt;&lt;code&gt;items-where($seq, not contains(?, "e"))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and I thought I could do this by chaining &lt;code&gt;contains&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt;. But it doesn't work that way: &lt;code&gt;fn:chain&lt;/code&gt; &lt;em&gt;applies&lt;/em&gt; a sequence of functions to an argument, it doesn't compose a sequence of functions to yield a new function.&lt;/p&gt;
&lt;p&gt;I wonder if a function that composes functions would be more useful, so I could write&lt;/p&gt;
&lt;p&gt;&lt;code&gt;items-where($seq, compose((contains(?, "e"), not#1)))&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #881 created</title>
   <pubDate>Wed, 6 Dec 2023 11:59:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/881</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-881</guid>
   <description>&lt;div&gt;&lt;p&gt;866 Introduce and exploit new numeric-compare() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #866&lt;/p&gt;
&lt;p&gt;The proposal introduces a new fn:numeric-compare function that differs from lt/eq primarily in that decimals are compared retaining their full precision, rather than converting them to doubles which may lose precision. This makes the comparison fully transitive which makes it safe to use in all sorting algorithms.&lt;/p&gt;
&lt;p&gt;The new comparison semantics are exploited in max(), min(), and sort(), and indirectly in highest() and lowest(); they are also referenced for comparing numeric values in XSLT &lt;code&gt;xsl:sort&lt;/code&gt; (and therefore indirectly in &lt;code&gt;xsl:merge&lt;/code&gt;) and in XQuery &lt;code&gt;order by&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An effect of the change is that max() and min() applied to a sequence of integers now return an integer, not a double.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #880 created</title>
   <pubDate>Wed, 6 Dec 2023 11:13:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/880</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-880</guid>
   <description>&lt;div&gt;&lt;p&gt;872 Symmetry: fn:items-at → fn:get&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #872.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #879 created</title>
   <pubDate>Wed, 6 Dec 2023 11:05:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/879</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-879</guid>
   <description>&lt;div&gt;&lt;p&gt;844 New sequence functions: names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #844. The &lt;code&gt;items&lt;/code&gt; keyword in the function names (excluding &lt;code&gt;items-at&lt;/code&gt;) has been changed to &lt;code&gt;subsequence&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See #878 for the controversial discussion on what to do with &lt;code&gt;subsequence-(after|before|starting-where|ending-where)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #855 closed</title>
   <pubDate>Wed, 6 Dec 2023 10:50:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/855</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-855</guid>
   <description>&lt;div&gt;&lt;p&gt;844 New sequence functions: names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #869 closed</title>
   <pubDate>Wed, 6 Dec 2023 10:29:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/869</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-869</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect example: for-each-pair&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #878 created</title>
   <pubDate>Wed, 6 Dec 2023 08:59:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/878</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-878</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposed extension to subsequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Copied from https://github.com/qt4cg/qtspecs/issues/844#issuecomment-1841415417:&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;I'm thinking again about integrating the items-* quartet into a heavily overloaded &lt;code&gt;subsequence&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Must supply zero or one of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$start - the start position&lt;/li&gt;
&lt;li&gt;$from - a predicate, such that the start is the first item to match the predicate&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;defaulting to 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And zero or one of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$length - the number of items to include&lt;/li&gt;
&lt;li&gt;$while - a predicate, the subsequence takes items so long as the predicate is true&lt;/li&gt;
&lt;li&gt;$until - a predicate, the subsequence takes items up to and including the first for which the predicate is false&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;defaulting to the end of the sequence.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This omits the "items-after" combination, but that one is easily achieved using &lt;code&gt;tail(subsequence(from:="xxx"))&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #877 created</title>
   <pubDate>Wed, 6 Dec 2023 03:29:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/877</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-877</guid>
   <description>&lt;div&gt;&lt;p&gt;Inconsistency in XQFO comparator functions/operators with recursive rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The rules for &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-hexBinary-less-than"&gt;op:hexBinary-less-than()&lt;/a&gt; appear to define a recursive octet-by-octet operation, but I think it flounders in rule 3, where it does not ask for rule 2 to be applied seriatim to each octet pair, but asks for an en masse comparison of two octet sequences.&lt;/p&gt;
&lt;p&gt;Compare to 5.3.2, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#codepoint-collation"&gt;Unicode Codepoint Collation&lt;/a&gt;, which describes a similar recursive item-for-item comparison. Interesting formal differences (e.g., unordered list versus ordered list).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-deep-equal"&gt;fn:deep-equal()&lt;/a&gt; is similar, but it is also much more complex. Nevertheless, the way it breaks down the problem at the outset, to dispense immediately with the recursive factor, and deal simply with the rules for equality, is IMO admirable.&lt;/p&gt;
&lt;p&gt;It would be nice if there were a bit more consistency in the prose and presentation of recursive rules. Do others agree, and are there other functions/operations that should be considered in this question? I'm thinking immediately only of comparator functions/operations, not functions that use recursion to filter or create. (There may be parallels, but let's start with those functions that are most similar.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #876 created</title>
   <pubDate>Wed, 6 Dec 2023 02:50:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/876</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-876</guid>
   <description>&lt;div&gt;&lt;p&gt;Placement of fn:in-scope-namespaces(), fn:in-scope-prefixes(), fn:namespace-uri-for-prefix()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently &lt;code&gt;fn:in-scope-namespaces()&lt;/code&gt;, &lt;code&gt;fn:in-scope-prefixes()&lt;/code&gt;, and &lt;code&gt;fn:namespace-uri-for-prefix&lt;/code&gt; are filed under XQFO chapter 10, which purports to deal exclusively with QNames. But these three functions have no direct bearing on QNames in either input or output.&lt;/p&gt;
&lt;p&gt;Two options occur to me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Move sections 10.2.6-8 to fall after 13.3.&lt;/li&gt;
&lt;li&gt;Rename chapter 10 to "Functions related to QNames and namespaces". Create a 10.3 that pertains exclusively to namespaces. Move to this new subchapter 10.2.4, 10.2.6-8, as well as 13.3 &lt;code&gt;fn:namespace-uri()&lt;/code&gt; .&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or some variant of the above.&lt;/p&gt;
&lt;p&gt;At any rate, I think the current placement doesn't properly expose these functions to the browsing reader.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #875 created</title>
   <pubDate>Wed, 6 Dec 2023 02:18:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/875</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-875</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO, chap. 9 minor edits&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Hopefully nothing controversial here. Edits are motivated by consistency and clarity.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #624 closed</title>
   <pubDate>Wed, 6 Dec 2023 01:14:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/624</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-624</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath function definition clarification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #616 closed</title>
   <pubDate>Wed, 6 Dec 2023 01:13:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/616</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-616</guid>
   <description>&lt;div&gt;&lt;p&gt;XDM: X Node vs. x node&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #464 closed</title>
   <pubDate>Wed, 6 Dec 2023 01:12:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/464</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-464</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization sequence normalization step 3 needs clarification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #874 created</title>
   <pubDate>Wed, 6 Dec 2023 00:09:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/874</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-874</guid>
   <description>&lt;div&gt;&lt;p&gt;878 Proposed extension to subsequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Following discussion under issue #844, I decided to explore the possibility of extending subsequence() with optional parameters, with the aim of making the quartet of items-before/after/starting-with/ending-with unnecessary.&lt;/p&gt;
&lt;p&gt;This is the spec that results. I feel it's a good trade-off; by adding three optional parameters to &lt;code&gt;fn:subsequence&lt;/code&gt;, we can eliminate 4 functions that we are having trouble finding names for. The examples feel to me to be intuitive and readable; and there is more capability in the new function than we had before, for example by combining a predicate for the start position with an integer for the length.&lt;/p&gt;
&lt;p&gt;I haven't explored arity-2 callbacks - these certainly need some notes and examples.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #822 closed</title>
   <pubDate>Tue, 5 Dec 2023 17:10:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/822</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-822</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery, XQFO: Edits (pool)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #851 closed</title>
   <pubDate>Tue, 5 Dec 2023 17:10:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/851</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-851</guid>
   <description>&lt;div&gt;&lt;p&gt;822: XQuery, XQFO: Edits (pool)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 057 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 5 Dec 2023 17:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/12-05</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-12-05</guid>
</item><item>
   <title>Pull request #873 created</title>
   <pubDate>Tue, 5 Dec 2023 14:56:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/873</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-873</guid>
   <description>&lt;div&gt;&lt;p&gt;865 Improve explanation of equality comparisons&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #865&lt;/p&gt;
&lt;p&gt;This PR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adds a non-normative appendix to XPath and XQuery comparing and contrasting the different ways of doing equality comparisons&lt;/li&gt;
&lt;li&gt;Changes fn:atomic-equal so it no longer refers to fn:deep-equal (the recursion terminated, but was confusing to follow)&lt;/li&gt;
&lt;li&gt;Removes text in XQuery describing the non-transitivity of &lt;code&gt;group by&lt;/code&gt; clauses, which is now a solved problem&lt;/li&gt;
&lt;li&gt;Corrects the description of backwards incompatibilities relating to numeric comparisons in the F+O spec.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #872 created</title>
   <pubDate>Tue, 5 Dec 2023 11:58:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/872</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-872</guid>
   <description>&lt;div&gt;&lt;p&gt;Symmetry: fn:items-at → fn:get&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think that &lt;code&gt;fn:items-at&lt;/code&gt; should be changed to &lt;code&gt;fn:get&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In #843, we try to harmonize the function names across sequences, maps, and arrays. We have &lt;code&gt;array:get&lt;/code&gt; and &lt;code&gt;map:get&lt;/code&gt; to retrieve single entries of the input, but we have &lt;code&gt;fn:items-at&lt;/code&gt; for sequences.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:items-at&lt;/code&gt; allows you to supply more than a single position, but &lt;code&gt;items-at($seq, (1, 3, 2)&lt;/code&gt; can easily be rewritten to &lt;code&gt;(1, 3, 2) ! get($seq, .)&lt;/code&gt; – similar to &lt;code&gt;(1, 3, 2) ! array:get($array, .)&lt;/code&gt; and &lt;code&gt;(1, 3, 2) ! map:get($map, .)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;With #844, &lt;code&gt;fn:items-at&lt;/code&gt; would be the only function left with &lt;code&gt;items&lt;/code&gt; in its name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The function signature would be as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:get(
  $input  as item()*,
  $at     as xs:integer	
) as item()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, most people will still use &lt;code&gt;$input[$at]&lt;/code&gt; – but the same applies to arrays and maps (and other functions like &lt;code&gt;fn:head&lt;/code&gt;). One of the advantages of &lt;code&gt;fn:get&lt;/code&gt; is that you can pass on the context item as position argument.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #871 created</title>
   <pubDate>Mon, 4 Dec 2023 15:25:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/871</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-871</guid>
   <description>&lt;div&gt;&lt;p&gt;Action qt4 cg 027 01 next match&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #870 created</title>
   <pubDate>Mon, 4 Dec 2023 15:24:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/870</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-870</guid>
   <description>&lt;div&gt;&lt;p&gt;867 Explain defaults in function signatures&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #867&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #869 created</title>
   <pubDate>Mon, 4 Dec 2023 14:45:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/869</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-869</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect example: for-each-pair&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The fourth example of &lt;code&gt;fn:for-each-pair&lt;/code&gt; is wrong:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for-each-pair(
  (1, 8, 2),
  (3, 4, 3),
  fn($item1, $item2, $pos) {
    $pos || ': ' || max(($item1, $item2))
  }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Result:	
&lt;code&gt;("1: 1", "2: 4", "3: 2")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The results as given return the min of the pair, not the max.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 057 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 4 Dec 2023 12:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/12-05</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-12-05</guid>
</item><item>
   <title>Issue #868 created</title>
   <pubDate>Mon, 4 Dec 2023 11:54:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/868</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-868</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:intersperse → fn:join, array:join($arrays, $separator)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With &lt;code&gt;string-join&lt;/code&gt;, you can create a string for multiple strings, optionally interspersed with a separator. &lt;code&gt;array:join&lt;/code&gt; can be used to create an array from multiple arrays.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:intersperse&lt;/code&gt;, which has been added to the XQuery 4 draft, does something very similar, and early feedback indicates that the function is useful, but easily to overlook due to its name.&lt;/p&gt;
&lt;p&gt;I propose to unify the functions by…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;renaming &lt;code&gt;fn:intersperse&lt;/code&gt; to &lt;code&gt;fn:join&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;adding a parameter to &lt;code&gt;array:join&lt;/code&gt;: &lt;code&gt;$separator as array(*)* := ()&lt;/code&gt;; and&lt;/li&gt;
&lt;li&gt;allowing a separator sequence for &lt;code&gt;fn:string-join&lt;/code&gt;: &lt;code&gt;$separator as xs:string* := ()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Examples&lt;/h4&gt;
&lt;p&gt;Query | Result | Info
-- | -- | --
&lt;code&gt;string-join((1, 2))&lt;/code&gt; | &lt;code&gt;'12'&lt;/code&gt; | &lt;em&gt;existing syntax&lt;/em&gt;
&lt;code&gt;string-join((1, 2), '-')&lt;/code&gt; | &lt;code&gt;'1-2&lt;/code&gt; | &lt;em&gt;existing syntax&lt;/em&gt;
&lt;code&gt;string-join((1, 2), ('-', '+'))&lt;/code&gt; | &lt;code&gt;'1-+2'&lt;/code&gt; | &lt;em&gt;new&lt;/em&gt;
&lt;code&gt;array:join([ [ 1 ], [ 2 ] ])&lt;/code&gt; | &lt;code&gt;[ 1, 2 ]&lt;/code&gt; | &lt;em&gt;existing syntax&lt;/em&gt;
&lt;code&gt;array:join([ [ 1 ], [ 2 ] ], [ '-' ])&lt;/code&gt; | &lt;code&gt;[ 1, '-', 2 ]&lt;/code&gt; | &lt;em&gt;new&lt;/em&gt;
&lt;code&gt;array:join([ [ 1 ], [ 2 ] ], [ '-', '+' ])&lt;/code&gt; | &lt;code&gt;[ 1, '-', '+', 2 ]&lt;/code&gt; | &lt;em&gt;new&lt;/em&gt;
&lt;code&gt;join((1, 2))&lt;/code&gt; | &lt;code&gt;(1, 2)&lt;/code&gt; | &lt;code&gt;intersperse((1, 2))&lt;/code&gt;&lt;br/&gt;(&lt;em&gt;or just&lt;/em&gt; &lt;code&gt;(1, 2)&lt;/code&gt;)
&lt;code&gt;join((1, 2), '-')&lt;/code&gt; | &lt;code&gt;(1, '-', 2)&lt;/code&gt; | &lt;code&gt;intersperse((1, 2), '-')&lt;/code&gt;
&lt;code&gt;join((1, 2), ('-', '+'))&lt;/code&gt; | &lt;code&gt;(1, '-', '+', 2)&lt;/code&gt; | &lt;code&gt;intersperse((1, 2), ('-', '+'))&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #867 created</title>
   <pubDate>Sun, 3 Dec 2023 16:31:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/867</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-867</guid>
   <description>&lt;div&gt;&lt;p&gt;Signature notation in F+O: default values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Section 1.5 of F+O introduces the signature proforma notation, and indicates that default values may be included for parameters.&lt;/p&gt;
&lt;p&gt;It does not however say how the default value is interpreted. For example, with the signature&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:starts-with-sequence(
    $input as item()*,  
    $subsequence as item()*,   
    $compare as function(item(), item()) as xs:boolean := fn:deep-equal#2
) as xs:boolean

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is nothing to tell us that the expression fn:deep-equal#2 is evaluated with the static and dynamic context of the caller (or of the function reference).&lt;/p&gt;
&lt;p&gt;Note that this is different from the similar notation used for function declarations in XQuery, where the static context for the default fn:deep-equal#2 would be taken from the function declaration in the Query prolog.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #866 created</title>
   <pubDate>Sun, 3 Dec 2023 13:19:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/866</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-866</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:sort, and XSLT and XQuery sorting, should use transitive comparisons&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have addressed the question of non-transitivity of equality matching in &lt;code&gt;distinct-values()&lt;/code&gt;, and in XSLT and XQuery grouping, but the same issue exists for sorting. Currently &lt;code&gt;fn:sort&lt;/code&gt;, as well as XSLT and XQuery sorting, rely on the "lt" operator for comparing values including mixed numerics such as doubles and decimals. Because this promotes to double, it is capable of losing precision, and is therefore non-transitive. Most sort algorithms rely on the supplied comparison function being transitive, and if it isn't, then undefined failures may occur including non-termination.&lt;/p&gt;
&lt;p&gt;One particular quirk (which led me here) is that &lt;code&gt;fn:highest&lt;/code&gt; and &lt;code&gt;fn:lowest&lt;/code&gt; start by using &lt;code&gt;fn:sort&lt;/code&gt; semantics to put the values in order, and then rely on &lt;code&gt;fn:deep-equal&lt;/code&gt; semantics to find the values that are "equal highest" or "equal lowest". But &lt;code&gt;fn:sort&lt;/code&gt; and &lt;code&gt;fn:deep-equal&lt;/code&gt; have different ways of deciding whether two values are equal: decimal 1.2 and double 1.2 are equal for &lt;code&gt;fn:sort&lt;/code&gt;, but not for &lt;code&gt;fn:deep-equal&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #865 created</title>
   <pubDate>Sun, 3 Dec 2023 00:49:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/865</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-865</guid>
   <description>&lt;div&gt;&lt;p&gt;Need to explain change in numeric comparison semantics&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We need to explain more clearly that we now have different rules for comparing numeric values in different circumstances. My understanding of the situation is:&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, etc, we continue to use the XPath 2.0/3.0/3.1 rules for backwards compatibility reasons: for example comparison between decimal and double is done by converting the decimal to a double. This has known problems in terms of transitivity, but we have retained the rules because we identified that too many compatibility problems would be introduced by changing them.&lt;/p&gt;
&lt;p&gt;For deep-equal, distinct-values, XSLT and XQuery grouping, etc, we have switched to the rules that were introduced for comparing map keys in 3.0, now available through the fn:atomic-equal function. Under these rules, doubles are promoted to decimals for comparison.&lt;/p&gt;
&lt;p&gt;We should probably include a table showing which rules are used where.&lt;/p&gt;
&lt;p&gt;A good example to use is (1e-3 = 0.001). This is true in both 3.1 and 4.0. But under the rules for maps in 3.1, and the new rules for distinct-values in 4.0, these two values are considered distinct.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #864 created</title>
   <pubDate>Fri, 1 Dec 2023 23:34:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/864</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-864</guid>
   <description>&lt;div&gt;&lt;p&gt;$position argument in fold-right&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In fn:fold-right (and thus array:fold-right) it's not clear how the position parameter works.&lt;/p&gt;
&lt;p&gt;It appears to start at 1, and then to be decremented, which seems a little weird.&lt;/p&gt;
&lt;p&gt;Working out what happens seems to involve reverse engineering the code, which isn't ideal. It's useful to have a formal definition of the function using code, but it shouldn't be necessary to reverse engineer 20 lines of difficult recursive code in order to get a feel for what the function does.&lt;/p&gt;
&lt;p&gt;The only example given doesn't add any clarification.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #470 closed</title>
   <pubDate>Wed, 29 Nov 2023 13:33:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/470</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-470</guid>
   <description>&lt;div&gt;&lt;p&gt;369: add fixed-prefixes attribute in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #412 closed</title>
   <pubDate>Wed, 29 Nov 2023 13:33:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/412</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-412</guid>
   <description>&lt;div&gt;&lt;p&gt;409, QT4CG-027-01: xsl:next-match&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #856 closed</title>
   <pubDate>Wed, 29 Nov 2023 11:58:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/856</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-856</guid>
   <description>&lt;div&gt;&lt;p&gt;Spec for deep-equal() still references FOTY0015&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #857 closed</title>
   <pubDate>Wed, 29 Nov 2023 11:58:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/857</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-857</guid>
   <description>&lt;div&gt;&lt;p&gt;856 Drop reference to obsolete error condition in deep-equal()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #863 created</title>
   <pubDate>Wed, 29 Nov 2023 11:53:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/863</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-863</guid>
   <description>&lt;div&gt;&lt;p&gt;742 Drop xsl:function-library declaration&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #742&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #862 created</title>
   <pubDate>Wed, 29 Nov 2023 04:08:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/862</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-862</guid>
   <description>&lt;div&gt;&lt;p&gt;Examples needed for "Implausible Expressions"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XPath 4.0 there is a new concept of &lt;strong&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-implausible-expressions"&gt;Implausible Expressions&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are several different sections about different types of implausible expressions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.4.6 Implausible Expressions - only a single example, and it is not in an Examples sub-section and is difficult to locate.&lt;/li&gt;
&lt;li&gt;3.8.1 Implausible Coercions -has 3 examples and seems OK.&lt;/li&gt;
&lt;li&gt;4.7.4.3 Implausible Axis Steps - has no visible examples.&lt;/li&gt;
&lt;li&gt;4.15.3.4 Implausible Lookup Expressions - has no examples.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another problem is that the definition of "implausible" seems not precise and subjective (what is the meaning of "&lt;em&gt;there is a high probability that they were written incorrectly&lt;/em&gt;"):&lt;/p&gt;
&lt;p&gt;"&lt;strong&gt;implausible&lt;/strong&gt;
Certain expressions, while not erroneous, are classified as being &lt;strong&gt;implausible&lt;/strong&gt;, because there is a high probability that they were written incorrectly."&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proposed fixing actions&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Provide a more precise and non-subjective definition of the concept.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide many examples of implausible expressions - both in the central section 2.4.6 and in all other sections dealing with more specific types of implausible expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #169 closed</title>
   <pubDate>Tue, 28 Nov 2023 17:24:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/169</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-169</guid>
   <description>&lt;div&gt;&lt;p&gt;Handling of duplicate keys in xsl:map&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 056 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 28 Nov 2023 17:18:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/11-28</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-11-28</guid>
</item><item>
   <title>QT4 CG meeting 056 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 27 Nov 2023 12:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/11-28</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-11-28</guid>
</item><item>
   <title>Issue #858 closed</title>
   <pubDate>Mon, 27 Nov 2023 08:38:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/858</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-858</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:identity: accept 2 arguments, ignore second&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #861 created</title>
   <pubDate>Sun, 26 Nov 2023 22:52:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/861</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-861</guid>
   <description>&lt;div&gt;&lt;p&gt;Precise meaning of $E??KS&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I don't think that the semantics of the expression &lt;code&gt;$E??KS&lt;/code&gt; are clearly enough defined.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The effect of the deep lookup expression E??KS is obtained by evaluating E, establishing its recursive content C, removing any item that is not a map or array to yield a sequence D, and then evaluating the shallow lookup expression D?KS, but with one exception: if evaluation of any shallow lookup fails, then the error is not propagated, but instead its result is taken to be an empty sequence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;The definition of "recursive content" needs to be tightened up.&lt;/li&gt;
&lt;li&gt;It needs to be more clearly stated which errors we ignore, and which we don't. For example, what if the key specifier evaluates to a non-singleton sequence?&lt;/li&gt;
&lt;li&gt;In the case of &lt;code&gt;$E??*&lt;/code&gt; in particular, I don't think it makes much sense to exclude items that are not maps or arrays. I think the expectation in this case is to return the full recursive content.&lt;/li&gt;
&lt;li&gt;As currently defined, if &lt;code&gt;$M&lt;/code&gt; is a map, the the result of &lt;code&gt;$M??*&lt;/code&gt; includes the map &lt;code&gt;$M&lt;/code&gt; itself. I don't think this matches expectations. Certainly, with the parallel expression &lt;code&gt;$node//*&lt;/code&gt;, the result does not include &lt;code&gt;$node&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #860 created</title>
   <pubDate>Sun, 26 Nov 2023 19:46:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/860</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-860</guid>
   <description>&lt;div&gt;&lt;p&gt;Unary Lookup when the context value is a sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have added the text&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the context value is anything other than a single item, the semantics of the expression ?KS are defined to be equivalent to the expression . ! ?KS. The remainder of this section therefore explains the semantics on the assumption that the [context value] is a single item, referred to as the context item.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Consider the case where the context value is a sequence of two maps &lt;code&gt;(map{'x':1, 1:'p', 2:'q'}, map{'x':2, 1:'P', 2:'Q'})&lt;/code&gt; and the expression is &lt;code&gt;?(?x)&lt;/code&gt;. What is the context for evaluation of the key specifier &lt;code&gt;(?x)&lt;/code&gt;? I would have expected that we evaluate the key specifier once, in the outer context, so the key specifier value is &lt;code&gt;(1,2)&lt;/code&gt; and we therefore take the entries with keys 1 and 2 in both maps, giving a result of ('p', 'q', 'P', 'Q'). But the cited paragraph suggests we evaluate KS separately for each item in the context value, and this return entry 1 of map 1 and entry 2 of map 2, giving a result of ('p', 'Q').&lt;/p&gt;
&lt;p&gt;I know it's an edge case and it's unlikely in practice that people will write context-dependent key specifiers, but the rules need to be clear. I thought we had previously decided that the key specifier expression should be evaluated in the outer context.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #859 created</title>
   <pubDate>Sun, 26 Nov 2023 16:32:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/859</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-859</guid>
   <description>&lt;div&gt;&lt;p&gt;Syntax problem with type-qualified wildcards in lookup expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The new syntax for type-qualified wildcards has problems when used in a chained lookup expression, for example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[1,2], [3,4], 5, 6]?*::array(*)?1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;because the "?" that follows &lt;code&gt;array(*)&lt;/code&gt; is interpreted as an occurrence indicator. This can be avoided by using parentheses, but it's too much of an elephant trap - a better solution is needed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #858 created</title>
   <pubDate>Sat, 25 Nov 2023 19:27:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/858</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-858</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:identity: accept 2 arguments, ignore second&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Apart from &lt;code&gt;id&lt;/code&gt;, Haskell has &lt;a href="http://zvon.org/other/haskell/Outputprelude/const_f.html"&gt;&lt;code&gt;const&lt;/code&gt;&lt;/a&gt;, which accepts 2 arguments, but only returns the first. Thanks to the introduction of default arguments, it’s straightforward to extend &lt;code&gt;fn:identity&lt;/code&gt; to be able to accept 2 arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:identity(
  $input    as item()*,
  $ignored  as item()*  := ()
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #857 created</title>
   <pubDate>Fri, 24 Nov 2023 16:00:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/857</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-857</guid>
   <description>&lt;div&gt;&lt;p&gt;856 Drop reference to obsolete error condition in deep-equal()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #856&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #856 created</title>
   <pubDate>Fri, 24 Nov 2023 13:05:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/856</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-856</guid>
   <description>&lt;div&gt;&lt;p&gt;Spec for deep-equal() still references FOTY0015&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The errors section of fn:deep-equal still says&lt;/p&gt;
&lt;p&gt;A type error is raised [[err:FOTY0015] if either input sequence contains a function item that is not a map or array.&lt;/p&gt;
&lt;p&gt;This is no longer the case (and error FOTY0015 is now obsolete and should be removed from the appendix)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #855 created</title>
   <pubDate>Fri, 24 Nov 2023 10:46:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/855</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-855</guid>
   <description>&lt;div&gt;&lt;p&gt;844 New sequence functions: names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #844&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #852 closed</title>
   <pubDate>Thu, 23 Nov 2023 12:04:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/852</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-852</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo in XQuery equivalent for fn:transitive-closure&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #853 closed</title>
   <pubDate>Thu, 23 Nov 2023 12:04:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/853</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-853</guid>
   <description>&lt;div&gt;&lt;p&gt;852 Fix typo in transitive-closure&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #854 created</title>
   <pubDate>Wed, 22 Nov 2023 22:16:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/854</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-854</guid>
   <description>&lt;div&gt;&lt;p&gt;Need more discussion and explanation of deep-lookup operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;During discussion of the &lt;code&gt;??&lt;/code&gt; operator it was pointed out that we need more examples and explanation, especially of how to handle cases where the "flattening" behaviour of the operator is inconvenient. This applies equally to paths using the existing &lt;code&gt;?&lt;/code&gt; operator - &lt;code&gt;$x?y?z&lt;/code&gt; and &lt;code&gt;$x??z&lt;/code&gt; both have this problem. For example, there is no way of filtering the result of&lt;code&gt;$x?y?z&lt;/code&gt; or &lt;code&gt;$x??z&lt;/code&gt; to select only members of size 3.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #57 closed</title>
   <pubDate>Wed, 22 Nov 2023 20:33:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/57</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-57</guid>
   <description>&lt;div&gt;&lt;p&gt;The item-type(T) syntax is not defined&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #172 closed</title>
   <pubDate>Wed, 22 Nov 2023 19:55:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/172</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-172</guid>
   <description>&lt;div&gt;&lt;p&gt;Record Tests&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #233 closed</title>
   <pubDate>Wed, 22 Nov 2023 19:53:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/233</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-233</guid>
   <description>&lt;div&gt;&lt;p&gt;Declare the result type of a mode, via @as&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #698 closed</title>
   <pubDate>Wed, 22 Nov 2023 19:20:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/698</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-698</guid>
   <description>&lt;div&gt;&lt;p&gt;GitHub: Line Endings&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #730 closed</title>
   <pubDate>Wed, 22 Nov 2023 16:44:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/730</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-730</guid>
   <description>&lt;div&gt;&lt;p&gt;Equivalence of map and function types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #840 closed</title>
   <pubDate>Wed, 22 Nov 2023 16:37:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/840</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-840</guid>
   <description>&lt;div&gt;&lt;p&gt;Wrong example in fn:seconds-from-duration&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #853 created</title>
   <pubDate>Wed, 22 Nov 2023 16:34:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/853</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-853</guid>
   <description>&lt;div&gt;&lt;p&gt;852 Fix typo in transitive-closure&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #852&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #852 created</title>
   <pubDate>Wed, 22 Nov 2023 16:04:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/852</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-852</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo in XQuery equivalent for fn:transitive-closure&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;tc-inclusive($node/$step(.)), $step)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;should read&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tc-inclusive($node/$step(.), $step)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #837 closed</title>
   <pubDate>Tue, 21 Nov 2023 17:15:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/837</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-837</guid>
   <description>&lt;div&gt;&lt;p&gt;297 Deep Lookup Operator "??" and wildcard qualifier "::"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 055 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 21 Nov 2023 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/11-21</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-11-21</guid>
</item><item>
   <title>Issue #848 closed</title>
   <pubDate>Tue, 21 Nov 2023 17:14:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/848</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-848</guid>
   <description>&lt;div&gt;&lt;p&gt;More fo spec examples corrections&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #833 closed</title>
   <pubDate>Tue, 21 Nov 2023 17:13:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/833</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-833</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix the line endings, force a single lf in text files&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #841 closed</title>
   <pubDate>Tue, 21 Nov 2023 17:10:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/841</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-841</guid>
   <description>&lt;div&gt;&lt;p&gt;840: Typo in fn:seconds-from-duration example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #845 closed</title>
   <pubDate>Tue, 21 Nov 2023 17:09:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/845</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-845</guid>
   <description>&lt;div&gt;&lt;p&gt;Quantified expressions and "binding tuples" (Editorial)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #846 closed</title>
   <pubDate>Tue, 21 Nov 2023 17:06:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/846</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-846</guid>
   <description>&lt;div&gt;&lt;p&gt;845 Drop mention of tuples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #842 closed</title>
   <pubDate>Tue, 21 Nov 2023 17:03:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/842</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-842</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve stylesheet for generating keyword tests&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #851 created</title>
   <pubDate>Tue, 21 Nov 2023 14:39:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/851</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-851</guid>
   <description>&lt;div&gt;&lt;p&gt;822: XQuery, XQFO: Edits (pool)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Editorial; closes #822 (visit this issue for a list of the changes)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #850 created</title>
   <pubDate>Tue, 21 Nov 2023 13:04:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/850</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-850</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-html: Finalization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Now that &lt;code&gt;fn:parse-html&lt;/code&gt; has been added to the specification, we need test cases for all provided options and input types (including binary input).&lt;/p&gt;
&lt;p&gt;Looking at the current set of test cases, it seems unrealistic to use older libraries such as TagSoup for this function. I wonder if we should support ·implementation-defined· parsing algorithms at all. What do others think?&lt;/p&gt;
&lt;p&gt;Next, is there &lt;strong&gt;any&lt;/strong&gt; implementation available that supports all given method/html-version variants?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #783 closed</title>
   <pubDate>Tue, 21 Nov 2023 12:56:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/783</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-783</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: errors are raised (not reported, signaled, generated, or thrown).&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #849 created</title>
   <pubDate>Tue, 21 Nov 2023 10:09:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/849</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-849</guid>
   <description>&lt;div&gt;&lt;p&gt;847 Allow uri-structure-record keys to have empty sequence values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #847&lt;/p&gt;
&lt;p&gt;The description of &lt;code&gt;build-uri&lt;/code&gt; was written with the expectation that if a key was in the map, it's value should be used. I don't really want to replace every occurrence of&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if `x` is present in the map
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if `x` is present in the map and its value is not the empty sequence
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I've attempted to justify that globally with the following paragraph at the beginning of the description:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The components are derived from the contents of the $parts map. To simplify the description below, any key whose value is the empty sequence is ignored; this is equivalent to the key not being present in the map.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm not hugely proud of that bit of prose though. Suggestions for improvements most welcome.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #848 created</title>
   <pubDate>Tue, 21 Nov 2023 08:07:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/848</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-848</guid>
   <description>&lt;div&gt;&lt;p&gt;More fo spec examples corrections&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adds tagging for &lt;code&gt;fos:test&lt;/code&gt; elements so we know which tests depend on XQuery (rather than XPath).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corrects expected results for some tests&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #847 created</title>
   <pubDate>Mon, 20 Nov 2023 23:52:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/847</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-847</guid>
   <description>&lt;div&gt;&lt;p&gt;build-uri() - is {"port":()} legal?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The (only) example in the spec of a build-uri() call specifies &lt;code&gt;{"port":()} &lt;/code&gt;. But &lt;code&gt;uri-structure-record&lt;/code&gt; has&lt;/p&gt;
&lt;p&gt;&lt;code&gt;port? as xs:string,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which means that the empty sequence is not a valid value. Either the record structure should be changed to specify the type as &lt;code&gt;xs:string?&lt;/code&gt;, or the example should be changed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 055 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 20 Nov 2023 12:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/11-21</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-11-21</guid>
</item><item>
   <title>Pull request #846 created</title>
   <pubDate>Mon, 20 Nov 2023 00:32:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/846</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-846</guid>
   <description>&lt;div&gt;&lt;p&gt;845 Drop mention of tuples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #845&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #845 created</title>
   <pubDate>Sun, 19 Nov 2023 23:46:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/845</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-845</guid>
   <description>&lt;div&gt;&lt;p&gt;Quantified expressions and "binding tuples" (Editorial)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The section of the XPath specification on Quantified Expressions contains paragraph starting&lt;/p&gt;
&lt;p&gt;"The order in which test expressions are evaluated for the various binding tuples"&lt;/p&gt;
&lt;p&gt;This is the only place in which "binding tuples" are mentioned in connection with quantified expressions, and in XPath (as distinct from XQuery) it is the only place where tuples are mentioned at all. The paragraph could easily be rewritten to avoid introducing a new concept.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #844 created</title>
   <pubDate>Sat, 18 Nov 2023 11:11:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/844</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-844</guid>
   <description>&lt;div&gt;&lt;p&gt;New sequence functions: names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Observations:&lt;/p&gt;
&lt;p&gt;A. What about renaming &lt;code&gt;fn:contains-sequence&lt;/code&gt;, &lt;code&gt;fn:starts-with-sequence&lt;/code&gt; and &lt;code&gt;fn:ends-with-sequence&lt;/code&gt; to &lt;code&gt;fn:contains-items&lt;/code&gt;, &lt;code&gt;fn:starts-with-items&lt;/code&gt; and &lt;code&gt;fn:ends-with-items&lt;/code&gt;, in alignment with &lt;code&gt;fn:items-at&lt;/code&gt;, &lt;code&gt;fn:items-before&lt;/code&gt;, etc.? If we add equivalent functions for arrays, it could be &lt;code&gt;array:contains-members&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;B. It seems confusing to have &lt;code&gt;fn:items-starting-where&lt;/code&gt; and &lt;code&gt;fn:items-after&lt;/code&gt;, instead of &lt;code&gt;fn:items-starting-after&lt;/code&gt;. Maybe we can think of alternative (shorter) names for &lt;code&gt;fn:items-starting-where&lt;/code&gt; and &lt;code&gt;fn:items-ending-where&lt;/code&gt;? – I know we’ve discussed before; I raised it again due to user feedback.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #843 created</title>
   <pubDate>Sat, 18 Nov 2023 10:59:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/843</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-843</guid>
   <description>&lt;div&gt;&lt;p&gt;Standard, array &amp;amp; map functions: Equivalencies&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In many threads (#135, others), we have discussed how to align the functions for sequences, arrays, and maps. This is an attempt to summarize the status quo, and I hope to keep it up-to-date in the coming weeks.&lt;/p&gt;
&lt;p&gt;The 4.0 functions are the ones with the keyword &lt;em&gt;new&lt;/em&gt; attached. If the function is followed by a question mark, there may be an existing issue for its addition, or it may be consistent to add it.&lt;/p&gt;
&lt;p&gt;Please note that the data types have fundamental differences, so it’s not always possible to present or provide exact symmetries.&lt;/p&gt;
&lt;h3&gt;To be discussed&lt;/h3&gt;
&lt;p&gt;Functions | Array Functions | Map Functions
--- | --- | ---
&lt;code&gt;fn:contains-subsequence&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt;: #94, #844 | &lt;code&gt;array:contains-subarray&lt;/code&gt; ? | &lt;code&gt;map:contains&lt;/code&gt;
&lt;code&gt;fn:ends-with-subsequence&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt;: #96, #844 | &lt;code&gt;array:ends-with-subarray&lt;/code&gt; ?  | –
&lt;code&gt;fn:starts-with-subsequence&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt;: #96, #844 | &lt;code&gt;array:starts-with-subarray&lt;/code&gt; ? | –
&lt;code&gt;fn:distinct-values&lt;/code&gt; | &lt;code&gt;array:distinct-members&lt;/code&gt; ? | –
&lt;code&gt;fn:duplicate-values&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt;: #123 | &lt;code&gt;array:duplicate-members&lt;/code&gt; ?  | –
&lt;code&gt;fn:empty&lt;/code&gt; | &lt;code&gt;array:empty&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;: #229 | &lt;code&gt;map:empty&lt;/code&gt; ? #827
&lt;code&gt;fn:exists&lt;/code&gt; | &lt;code&gt;array:exists&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;: #229 | &lt;code&gt;map:exists&lt;/code&gt; ? #827
&lt;code&gt;fn:every&lt;/code&gt; &lt;em&gt;new&lt;/em&gt; | &lt;code&gt;array:every&lt;/code&gt; ? | &lt;code&gt;map:every&lt;/code&gt; ?
&lt;code&gt;fn:some&lt;/code&gt; &lt;em&gt;new&lt;/em&gt; | &lt;code&gt;array:some&lt;/code&gt; ? | &lt;code&gt;map:some&lt;/code&gt; ?
&lt;code&gt;fn:highest&lt;/code&gt; &lt;em&gt;new&lt;/em&gt; | &lt;code&gt;array:highest&lt;/code&gt; ? | –
&lt;code&gt;fn:lowest&lt;/code&gt; &lt;em&gt;new&lt;/em&gt; | &lt;code&gt;array:lowest&lt;/code&gt; ? | –
&lt;code&gt;fn:index-of&lt;/code&gt; | &lt;code&gt;array:index-of&lt;/code&gt; ? #260 | –
&lt;code&gt;fn:index-where&lt;/code&gt; &lt;em&gt;new&lt;/em&gt; | &lt;code&gt;array:index-where&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt;: #114 | &lt;code&gt;map:keys($m, $pred)&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt;: #467
&lt;code&gt;fn:items-at&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;: #213&lt;br/&gt;→ &lt;code&gt;fn:get&lt;/code&gt; ? #872 | &lt;code&gt;array:members-at&lt;/code&gt; ? #825&lt;br/&gt;&lt;code&gt;array:get&lt;/code&gt; | &lt;code&gt;map:get&lt;/code&gt;
&lt;code&gt;fn:intersperse&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;: #2&lt;br/&gt;→ &lt;code&gt;fn:join&lt;/code&gt; ? #868 | &lt;code&gt;array:join&lt;/code&gt;  | –
&lt;code&gt;fn:subsequence-where&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt;: #878 | &lt;code&gt;array:subarray-where&lt;/code&gt; ? | –
&lt;code&gt;fn:substitute&lt;/code&gt; ? #553, #583 | &lt;code&gt;array:replace&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;;&lt;br/&gt;&lt;code&gt;array:substitute&lt;/code&gt; ? #583 | &lt;code&gt;map:replace&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;;&lt;br/&gt;&lt;code&gt;map:substitute&lt;/code&gt; ? #583
&lt;code&gt;fn:slice&lt;/code&gt; &lt;em&gt;new&lt;/em&gt; | &lt;code&gt;array:slice&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;  | –
– | &lt;code&gt;array:split&lt;/code&gt; &lt;em&gt;new&lt;/em&gt; | &lt;code&gt;map:entries&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;
– | &lt;code&gt;array:values&lt;/code&gt; &lt;em&gt;new&lt;/em&gt; | &lt;code&gt;map:keys&lt;/code&gt;; &lt;code&gt;map:values&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;
– | &lt;code&gt;array:entries&lt;/code&gt; ? #826 | &lt;code&gt;map:entries&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;
– | &lt;code&gt;array:merge&lt;/code&gt; ? #826 | &lt;code&gt;map:merge&lt;/code&gt;
– | – | &lt;code&gt;map:entry&lt;/code&gt;
– | &lt;code&gt;array:members&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt; → keep? #826 | &lt;code&gt;map:pairs&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt; → keep? #826
– | &lt;code&gt;array:of-members&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt; → keep? #826 | &lt;code&gt;map:of-pairs&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt; → keep? #826
– | – | &lt;code&gt;map:pair&lt;/code&gt;&lt;br/&gt;&lt;em&gt;new&lt;/em&gt;: #508 → keep? #826&lt;/p&gt;
&lt;h3&gt;Settled&lt;/h3&gt;
&lt;p&gt;Functions | Array Functions | Map Functions
--- | --- | ---
&lt;code&gt;fn:count&lt;/code&gt; | &lt;code&gt;array:size&lt;/code&gt; | &lt;code&gt;map:size&lt;/code&gt;
&lt;code&gt;fn:filter&lt;/code&gt; | &lt;code&gt;array:filter&lt;/code&gt; | &lt;code&gt;map:filter&lt;/code&gt;
&lt;code&gt;fn:fold-left&lt;/code&gt; | &lt;code&gt;array:fold-left&lt;/code&gt; | –
&lt;code&gt;fn:fold-right&lt;/code&gt; | &lt;code&gt;array:fold-right&lt;/code&gt; | –
&lt;code&gt;fn:for-each-pair&lt;/code&gt; | &lt;code&gt;array:for-each-pair&lt;/code&gt; | –
&lt;code&gt;fn:for-each&lt;/code&gt; | &lt;code&gt;array:for-each&lt;/code&gt; | &lt;code&gt;map:for-each&lt;/code&gt;
&lt;code&gt;fn:head&lt;/code&gt; | &lt;code&gt;array:head&lt;/code&gt; | –
&lt;code&gt;fn:insert-before&lt;/code&gt; | &lt;code&gt;array:insert-before&lt;/code&gt; | –
&lt;code&gt;fn:remove&lt;/code&gt; | &lt;code&gt;array:remove&lt;/code&gt; | &lt;code&gt;map:remove&lt;/code&gt;
&lt;code&gt;fn:reverse&lt;/code&gt; | &lt;code&gt;array:reverse&lt;/code&gt; | –
&lt;code&gt;fn:sort&lt;/code&gt; | &lt;code&gt;array:sort&lt;/code&gt; | –
&lt;code&gt;fn:subsequence&lt;/code&gt; | &lt;code&gt;array:subarray&lt;/code&gt; | –
&lt;code&gt;fn:tail&lt;/code&gt; | &lt;code&gt;array:tail&lt;/code&gt; | –
– | &lt;code&gt;array:put&lt;/code&gt;; &lt;code&gt;array:append&lt;/code&gt; | &lt;code&gt;map:put&lt;/code&gt;
&lt;code&gt;fn:foot&lt;/code&gt;&lt;em&gt;new&lt;/em&gt;: #250 | &lt;code&gt;array:foot&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;: #250 | –
&lt;code&gt;fn:trunk&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;: #250 | &lt;code&gt;array:trunk&lt;/code&gt; &lt;em&gt;new&lt;/em&gt;: #250 | –&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #91 closed</title>
   <pubDate>Sat, 18 Nov 2023 09:58:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/91</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-91</guid>
   <description>&lt;div&gt;&lt;p&gt;name of map:substitute&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #104 closed</title>
   <pubDate>Sat, 18 Nov 2023 09:57:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/104</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-104</guid>
   <description>&lt;div&gt;&lt;p&gt;name of map:replace/array:replace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #699 closed</title>
   <pubDate>Fri, 17 Nov 2023 16:34:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/699</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-699</guid>
   <description>&lt;div&gt;&lt;p&gt;GitHub: Signing&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #842 created</title>
   <pubDate>Fri, 17 Nov 2023 15:47:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/842</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-842</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve stylesheet for generating keyword tests&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Improves the stylesheet that generates the test set &lt;code&gt;misc/BuiltInKeywords.xml&lt;/code&gt;; specifically, it's smarter about generating acceptable callback functions that won't trigger an unwanted error.&lt;/p&gt;
&lt;p&gt;(The generated test calls each function twice, once with positional arguments and once with keyword arguments, and checks that the two results are deep-equal).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #838 closed</title>
   <pubDate>Fri, 17 Nov 2023 10:35:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/838</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-838</guid>
   <description>&lt;div&gt;&lt;p&gt;Collations in F&amp;amp;O examples for functions such as fn:contains()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #839 closed</title>
   <pubDate>Fri, 17 Nov 2023 10:35:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/839</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-839</guid>
   <description>&lt;div&gt;&lt;p&gt;838 Fix collation variable references&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #841 created</title>
   <pubDate>Thu, 16 Nov 2023 22:57:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/841</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-841</guid>
   <description>&lt;div&gt;&lt;p&gt;840: Typo in fn:seconds-from-duration example&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Addresses #840&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #840 created</title>
   <pubDate>Thu, 16 Nov 2023 22:43:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/840</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-840</guid>
   <description>&lt;div&gt;&lt;p&gt;Wrong example in fn:seconds-from-duration&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The newly added example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;seconds-from-duration(
   xs:duration("P1Y1D")
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Result:	
&lt;code&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Looks clearly wrong.&lt;/p&gt;
&lt;p&gt;Joel, what did you have in mind?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #839 created</title>
   <pubDate>Thu, 16 Nov 2023 20:29:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/839</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-839</guid>
   <description>&lt;div&gt;&lt;p&gt;838 Fix collation variable references&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #838. Editorial.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #838 created</title>
   <pubDate>Thu, 16 Nov 2023 19:25:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/838</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-838</guid>
   <description>&lt;div&gt;&lt;p&gt;Collations in F&amp;amp;O examples for functions such as fn:contains()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The examples for a number of functions, such as &lt;code&gt;fn:contains()&lt;/code&gt;, use a UCA collation URI bound to the variable &lt;code&gt;$coll&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Two problems:&lt;/p&gt;
&lt;p&gt;(a) These sections also contain prose saying "The collation used in these examples, http://example.com/CollationA is a collation in which both -and * are ignorable collation units." - but this is not the collation URI actually used. This error was already present in the published 3.1 Recommendation.&lt;/p&gt;
&lt;p&gt;(b) The examples that use the variable &lt;code&gt;$coll&lt;/code&gt; do not have a &lt;code&gt;use&lt;/code&gt; attribute, which means that the test cases generated in the test suite do not declare the variable, which means that the tests fail.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #837 created</title>
   <pubDate>Wed, 15 Nov 2023 16:57:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/837</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-837</guid>
   <description>&lt;div&gt;&lt;p&gt;297 Deep Lookup Operator "??" and wildcard qualifier "::"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds support for a deep lookup operator "??" as a transitive equivalent of "?", and allows a wildcard lookup &lt;code&gt;X?*&lt;/code&gt; or &lt;code&gt;X??*&lt;/code&gt; to be qualified with the required type of value, for example &lt;code&gt;X??*::record(from, to)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #836 created</title>
   <pubDate>Wed, 15 Nov 2023 13:24:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/836</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-836</guid>
   <description>&lt;div&gt;&lt;p&gt;Add support for CSV 'dialect' features covered by the OKFN's Frictionless Data CSV spec in `fn:parse-csv` and related functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The OKFN's &lt;a href="https://frictionlessdata.io"&gt;Frictionless Data project&lt;/a&gt;'s &lt;a href="https://specs.frictionlessdata.io/csv-dialect/"&gt;CSV Standard&lt;/a&gt; specifies some additional things we should take into account for &lt;code&gt;fn:parse-csv&lt;/code&gt; and related functions.&lt;/p&gt;
&lt;p&gt;Most important is the option to specify a comment line character, whose presence at the start of a line will cause it to be treated as a comment. Because of the way that rows can span lines, post-processing to extract comments might be impossible in some cases.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #835 created</title>
   <pubDate>Wed, 15 Nov 2023 13:14:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/835</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-835</guid>
   <description>&lt;div&gt;&lt;p&gt;Review names of record types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The use of record types as a thing that users will interact with seems to be increasing. There are a number of new types proposed and we should review their names to ensure that we are using a coherent naming scheme for all spec-defined record types, and that the names are good enough - that they explain what they are, and aren't too unwieldy.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #834 created</title>
   <pubDate>Wed, 15 Nov 2023 13:09:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/834</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-834</guid>
   <description>&lt;div&gt;&lt;p&gt;Add creation function for `csv-row-record` type&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;csv-row-record&lt;/code&gt; type used by the CSV XDM mapping provides its fields and an accessor function that can perform field lookup by index or column name. The column names are set when the CSV is parsed. For users who want to make use of &lt;code&gt;csv-row-record&lt;/code&gt; (when needing to parse CSVs that &lt;code&gt;fn:parse-csv&lt;/code&gt; itself cannot handle out-of-the-box, perhaps) we should provide a creation function that accepts the name: index map and the fields for the row and creates a &lt;code&gt;csv-row-record&lt;/code&gt; with a correctly functioning &lt;code&gt;field&lt;/code&gt; function entry.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #833 created</title>
   <pubDate>Wed, 15 Nov 2023 12:48:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/833</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-833</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix the line endings, force a single lf in text files&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;Per discussion on the list, this PR changes the way &lt;code&gt;git&lt;/code&gt; handles line endings so that text files will always, exclusively have line endings delimited by a single &lt;code&gt;lf&lt;/code&gt;. This should be a largely transparent change for Mac/Unix users. On Windows, it means that checked out files will have &lt;code&gt;lf&lt;/code&gt; line termination. If your favorite editing tool can handle this, then you don't have to care. Even if your editor saves files with &lt;code&gt;cr&lt;/code&gt;/&lt;code&gt;lf&lt;/code&gt; line endings, &lt;code&gt;git&lt;/code&gt; will turn them back into single &lt;code&gt;lf&lt;/code&gt; endings when you commit your changes.&lt;/p&gt;
&lt;p&gt;Hat tip to @ChristianGruen for keeping focus on this issue.&lt;/p&gt;
&lt;p&gt;This PR has no technical changes, and effects a relatively small number of files. I'll leave it here for a day or two, then I'm going to be inclined to merge it. Object now, if you object :-)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #832 created</title>
   <pubDate>Wed, 15 Nov 2023 10:29:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/832</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-832</guid>
   <description>&lt;div&gt;&lt;p&gt;77 Lookup returning path selection&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Note that unlike many of the functions we have added, these are non-trivial: they cannot easily be implemented in XSLT or XQuery.&lt;/p&gt;
&lt;p&gt;This is a first cut and I expect some refinement will be needed, but reviews are invited.&lt;/p&gt;
&lt;p&gt;I might subsequently propose layering some XSLT syntax on top of this for convenience.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #831 closed</title>
   <pubDate>Tue, 14 Nov 2023 18:16:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/831</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-831</guid>
   <description>&lt;div&gt;&lt;p&gt;Fixed a couple of markup errors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #831 created</title>
   <pubDate>Tue, 14 Nov 2023 18:16:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/831</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-831</guid>
   <description>&lt;div&gt;&lt;p&gt;Fixed a couple of markup errors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I don't really know how these crept in. Perhaps I was negligent in confirming that #828 passed tests in PR? Too late to tell now, but I think I've fixed them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #516 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:47:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/516</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-516</guid>
   <description>&lt;div&gt;&lt;p&gt;Add position argument to HOF callbacks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #828 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:47:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/828</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-828</guid>
   <description>&lt;div&gt;&lt;p&gt;516 Add position argument to HOF callbacks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #736 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:40:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/736</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-736</guid>
   <description>&lt;div&gt;&lt;p&gt;730: Clarify (and correct) rules for maps as instances of function types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #719 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:37:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/719</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-719</guid>
   <description>&lt;div&gt;&lt;p&gt;413: Spec for CSV-related functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #554 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:33:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/554</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-554</guid>
   <description>&lt;div&gt;&lt;p&gt;The Transitive Closure function produces an incomplete result, completeness/success and number of actual iterations must also be returned&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #754 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:33:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/754</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-754</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:transitive-closure: signature; remarks; too specific?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #761 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:33:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/761</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-761</guid>
   <description>&lt;div&gt;&lt;p&gt;554/754 Simplify the new transitive-closure function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #216 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:21:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/216</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-216</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:unparsed-text: End-of-line characters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #794 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:21:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/794</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-794</guid>
   <description>&lt;div&gt;&lt;p&gt;216: fn:unparsed-text: End-of-line characters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #712 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:18:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/712</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-712</guid>
   <description>&lt;div&gt;&lt;p&gt;array:sort: to be aligned with fn:sort&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #823 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:17:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/823</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-823</guid>
   <description>&lt;div&gt;&lt;p&gt;712 Extend array:sort to align with fn:sort&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 054 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 14 Nov 2023 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/11-14</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-11-14</guid>
</item><item>
   <title>Issue #738 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:12:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/738</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-738</guid>
   <description>&lt;div&gt;&lt;p&gt;FO: Why is fn:op under section "17.3 Dynamic loading"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #799 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:12:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/799</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-799</guid>
   <description>&lt;div&gt;&lt;p&gt;Errors in F&amp;amp;O spec examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #824 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:12:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/824</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-824</guid>
   <description>&lt;div&gt;&lt;p&gt;799 errors in examples; 738 section heading for fn:op&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #743 closed</title>
   <pubDate>Tue, 14 Nov 2023 17:11:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/743</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-743</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend enumeration types to allow values other than strings&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 054 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 13 Nov 2023 11:55:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/11-14</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-11-14</guid>
</item><item>
   <title>Issue #830 created</title>
   <pubDate>Sun, 12 Nov 2023 22:52:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/830</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-830</guid>
   <description>&lt;div&gt;&lt;p&gt;Revise appendix D.4 of F+O: Illustrative user-written functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Many of the functions in this non-normative appendix are no longer needed, or can be expressed more concisely using new 4.0 language features.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #829 created</title>
   <pubDate>Sun, 12 Nov 2023 09:42:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/829</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-829</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:boolean: EBV support for more item types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In #817, it was discussed that the current EBV semantics have been inspired a lot by XPath 1.0. Today, we have numerous other data types apart from strings, doubles, booleans, and nodes, and I believe it’s time to do justice to this by getting rid of the error for unsupported data types for &lt;code&gt;fn:boolean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We currently have:&lt;/p&gt;
&lt;p&gt;Type | Rule to compute boolean value
--- | ---
&lt;code&gt;node()&lt;/code&gt; | &lt;code&gt;true()&lt;/code&gt;
&lt;code&gt;xs:boolean&lt;/code&gt; | &lt;code&gt;$item != 0 and not(is-NaN($item))&lt;/code&gt;
&lt;code&gt;xs:untypedAtomic&lt;/code&gt;, &lt;code&gt;xs:string&lt;/code&gt;, &lt;code&gt;xs:anyURI&lt;/code&gt; | &lt;code&gt;$item != ''&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I have two options in mind:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The easiest solution, which would come closest to JavaScript, would be to return &lt;code&gt;true()&lt;/code&gt; for all other items. This would allow us to do simple checks like:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function local:byte-length($data as xs:basexBinary?) xs:integer {
  (: instead of exists($data); utilizes the EXPath Binary Module :)
  if($data) then bin:length($data) else 0
};
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;If we want to be more fine granular, we could do justice to the specifics of 4 more types:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Type | Rule to compute boolean value
--- | ---
&lt;code&gt;array(*)&lt;/code&gt; | &lt;code&gt;array:size($item) != 0&lt;/code&gt;
&lt;code&gt;map(*)&lt;/code&gt; | &lt;code&gt;map:size($item) != 0&lt;/code&gt;
&lt;code&gt;xs:base64Binary&lt;/code&gt;&lt;br/&gt;&lt;code&gt;xs:hex64Binary&lt;/code&gt; | &lt;code&gt;bin:length($item) != 0&lt;/code&gt; or &lt;br/&gt;&lt;code&gt;not($item = (xs:hexBinary(''), xs:base64Binary(''))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It would then be possible to write:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if($map)&lt;/code&gt; instead of &lt;code&gt;map:size($map) != 0&lt;/code&gt; or &lt;code&gt;map:exists($map)&lt;/code&gt; (see &lt;a href="https://github.com/qt4cg/qtspecs/issues/827"&gt;#827&lt;/a&gt; for the naming controversy).&lt;br/&gt;Note that &lt;code&gt;if($map)&lt;/code&gt; will also return &lt;code&gt;false()&lt;/code&gt; is &lt;code&gt;$map&lt;/code&gt; is an empty sequence.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if($func) { $func(1, 2) }&lt;/code&gt; instead of &lt;code&gt;exists($func)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the last comments of #817, it was addressed that the behavior of existing code may change if errors are replaced by results. I hope we can live with that, as I cannot think of cases in which the EBV computation make sense for items that always raise an error.&lt;/p&gt;
&lt;p&gt;Which option do some of you prefer?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #817 closed</title>
   <pubDate>Sun, 12 Nov 2023 09:07:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/817</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-817</guid>
   <description>&lt;div&gt;&lt;p&gt;EBV 4.0&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #828 created</title>
   <pubDate>Sat, 11 Nov 2023 22:51:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/828</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-828</guid>
   <description>&lt;div&gt;&lt;p&gt;516 Add position argument to HOF callbacks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have added positional parameters to the following functions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array:filter
array:fold-left
array:fold-right
array:for-each
array:for-each-pair
array:index-where
fn:every
fn:filter
fn:fold-left
fn:fold-right
fn:for-each
fn:for-each-pair
fn:index-where
fn:items-after
fn:items-before
fn:items-ending-where
fn:items-starting-where
fn:iterate-while
fn:partition
fn:some
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;fn:every&lt;/code&gt; and &lt;code&gt;fn:some&lt;/code&gt;, the additional parameter seemed useful to me, as a positional variable has been requested for quantifier expressions in the past.&lt;/li&gt;
&lt;li&gt;I’ve also added positional variables to folds.&lt;/li&gt;
&lt;li&gt;I’ve unified and simplified the formal XPath/XQuery equivalencies in the rule sets.&lt;/li&gt;
&lt;li&gt;I’ve dropped some XSLT equivalencies because I felt that the XQuery representations are more concise (I certainly won't mind if they're added back).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Closes #516.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #827 created</title>
   <pubDate>Thu, 9 Nov 2023 14:36:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/827</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-827</guid>
   <description>&lt;div&gt;&lt;p&gt;map:empty, map:exists ← array:empty, array:exists&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have &lt;code&gt;array:empty&lt;/code&gt; and &lt;code&gt;array:exists&lt;/code&gt;, but no equivalent functions for maps.&lt;/p&gt;
&lt;p&gt;I think we have decided to live with the ambiguity (discussed in #229) that &lt;code&gt;map:exists(map {})&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; although the “map exists”. Same for arrays.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #826 created</title>
   <pubDate>Thu, 9 Nov 2023 14:03:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/826</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-826</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays: Representation of single members of an array&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When introducing the new array features to some users, the &lt;code&gt;for member&lt;/code&gt; syntax was welcomed by everyone.&lt;/p&gt;
&lt;p&gt;However, there was some confusion (again, see my past &lt;a href="https://lists.w3.org/Archives/Public/public-xslt-40/2023Jun/0026.html"&gt;feedback to the mailing list&lt;/a&gt;) about what the QT4 group considers to be “members of an array”, and about value records.&lt;/p&gt;
&lt;p&gt;In particular, the “value record” representation of arrays led to questions that I didn’t have a good answer for. In particular, people didn’t understand why an array member was returned as a map, and why that map is (again) called “array member” or “value record” – a term no one associated with arrays (at least for now… which somewhat is not surprising, as it has just been introduced).&lt;/p&gt;
&lt;p&gt;Next, due to atomization (as mentioned before), &lt;code&gt;array:split&lt;/code&gt; allows us to omit the explicit &lt;code&gt;?value&lt;/code&gt; lookups that are required for &lt;code&gt;array:members&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;sum(array:members($array)?value)
sum(array:split($array))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I suppose I have been biased in my presentation, but I’ve failed to give good arguments to justify the current solution in the spec. The questions that I think need to be answered are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How will people benefit from the (usually intermediate) map representation for array members?&lt;/li&gt;
&lt;li&gt;What exactly do we win with &lt;code&gt;array:members&lt;/code&gt; and &lt;code&gt;array:of-members&lt;/code&gt; instead of using the existing &lt;code&gt;array:join&lt;/code&gt; function, combined with the new &lt;code&gt;array:split&lt;/code&gt; function?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Out of interest, I have rewritten the formal equivalencies for the array functions with &lt;code&gt;array:split&lt;/code&gt;/&lt;code&gt;array:join&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:append&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members((array:members($array), map{'value':$member}))&lt;/code&gt;
&lt;code&gt;array:join((array:split($array), array { $member }))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members($input ! map { 'value': $action(.) })&lt;/code&gt;
&lt;code&gt;array:join($input ! array { $action(.) })&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:filter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; filter(function($m) { $predicate($m?value) })&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; filter(function($m) { $predicate($m?*) })&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:for-each&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) ! map { 'value': $action(?value) })&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) ! array { $action(?*) })&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:for-each-pair&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;array:of-members(
  for-each-pair(array:members($array1), 
    array:members($array2), 
    function($m, $n) {map{'value': $action($m?value, $n?value)}}))
array:join(
  for-each-pair(array:split($array1), array:split($array2),
    function($m, $n) { array { $action($m?*, $n?*) } }))
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:insert-before&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; insert-before($position, map{'value':$member}))&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; insert-before($position, array { $member }))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:remove&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; remove($positions))&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; remove($positions))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:reverse&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; reverse())&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; reverse())&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:slice&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; slice($start, $end, $step))&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; slice($start, $end, $step))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:split&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; sort($collation, function($x) { $key($x?value) }))&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; sort($collation, function($x) { $key($x?*) }))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:subarray&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; subsequence($start, $length))&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; subsequence($start, $length))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array { $sequence }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members($sequence ! map { 'value': . })&lt;/code&gt;
&lt;code&gt;array:join($sequence ! array { . })&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[E1, E2, E3, ..., En]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:join((map { 'value': E1 }, map { 'value': E2 }, map { 'value': E3 }, ... map { 'value': En }))&lt;/code&gt;
&lt;code&gt;array:join((array { E1 }, array { E2 }, array { E3 }, ... array { En }))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$array?*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:members($array) ! ?value&lt;/code&gt;
&lt;code&gt;array:split($array) ! ?*&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$array?$N / $array($N)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:members($array)[$N]?value&lt;/code&gt;
&lt;code&gt;array:split($array)[$N]?*&lt;/code&gt;  (or &lt;code&gt;array:get($array, $N)&lt;/code&gt;)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;As a side note, I noticed that the equivalence given for &lt;code&gt;array:join&lt;/code&gt; must be buggy:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: current equivalence presented in the spec :)
array:of-members($arrays ! array:members(.))

(: returns [ 1, 2, 3 ] :)
let $arrays := ([ 1 ], [ 2, 3 ])
return array:of-members($arrays ! array:members(.))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Concluding, If I could choose, I would tend to drop &lt;code&gt;array:members&lt;/code&gt; and &lt;code&gt;array:of-members&lt;/code&gt; and rename &lt;code&gt;array:split&lt;/code&gt; to &lt;code&gt;array:members&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #825 created</title>
   <pubDate>Thu, 9 Nov 2023 02:03:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/825</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-825</guid>
   <description>&lt;div&gt;&lt;p&gt;array:members-at&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The title says it all.&lt;/p&gt;
&lt;p&gt;We have &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-slice"&gt;&lt;strong&gt;fn:slice&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-array-slice"&gt;&lt;strong&gt;array:slice&lt;/strong&gt;&lt;/a&gt;. We also do have &lt;strong&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-items-at"&gt;fn:items-at&lt;/a&gt;&lt;/strong&gt;, but we have somehow missed to add the corresponding &lt;s&gt;&lt;strong&gt;array:items-at&lt;/strong&gt;&lt;/s&gt; &lt;strong&gt;array:members-at&lt;/strong&gt; function.&lt;/p&gt;
&lt;p&gt;We could even think of a function &lt;strong&gt;map:entries-at&lt;/strong&gt; and &lt;strong&gt;map:values-for-keys&lt;/strong&gt;. The first of these would return all map entries that have as keys one of the provided as argument set of keys. The 2nd function would return all values of the map entries that have as keys one of the provided as argument set of keys.&lt;/p&gt;
&lt;p&gt;Here is a complete XPath 3.1 implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $members-at := function(
                 $input as array( *), 
                 $indexes as xs:integer*
                ) as array(*)*
 {
     for $ind in $indexes
       return [$input($ind)]
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Evaluating this expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $members-at := function(
                 $input as array( *), 
                 $indexes as xs:integer*
                ) as array(*)*
 {
     for $ind in $indexes
       return [$input($ind)]
 }
  return
     $members-at([1, (2, 3), (4, 5, 6)], (1, 3) )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces the wanted result:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[1], [(4,5,6)]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #771 closed</title>
   <pubDate>Wed, 8 Nov 2023 20:59:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/771</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-771</guid>
   <description>&lt;div&gt;&lt;p&gt;British vs. American English&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #824 created</title>
   <pubDate>Wed, 8 Nov 2023 20:42:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/824</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-824</guid>
   <description>&lt;div&gt;&lt;p&gt;799 errors in examples; 738 section heading for fn:op&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #799
Fix #738&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #823 created</title>
   <pubDate>Wed, 8 Nov 2023 20:20:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/823</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-823</guid>
   <description>&lt;div&gt;&lt;p&gt;712 Extend array:sort to align with fn:sort&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #712&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #480 closed</title>
   <pubDate>Wed, 8 Nov 2023 14:17:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/480</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-480</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow type promotion of xs:string to xs:anyURI&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #822 created</title>
   <pubDate>Wed, 8 Nov 2023 12:41:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/822</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-822</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery, XQFO: Edits (pool)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XQuery spec:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] 4.3.4 Context Value Reference → 4.3.4 Context Value Reference&lt;strong&gt;s&lt;/strong&gt; (plural, in alignment with the other expressions)&lt;/li&gt;
&lt;li&gt;[x] Move &lt;strong&gt;4.3.4&lt;/strong&gt; before &lt;strong&gt;4.3.3 Parenthesized Expressions&lt;/strong&gt; (and after &lt;strong&gt;4.3.2 Variable References&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;[x] 4.19 Switch Expression → 4.19 Switch Expression&lt;strong&gt;s&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;[x] Try/Catch Expressions: There’s no &lt;code&gt;CatchErrorList&lt;/code&gt; anymore&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XQFO spec:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] Unify representation of equivalent examples, implementations, …see https://github.com/qt4cg/qtspecs/pull/828#issuecomment-1807222990&lt;/li&gt;
&lt;li&gt;[x] Add History sections for new functions&lt;/li&gt;
&lt;li&gt;[x] &lt;code&gt;9^XXX outputs "4451"&lt;/code&gt; → &lt;code&gt;"3185"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[x] errors are signaled → raised (#783)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #820 closed</title>
   <pubDate>Wed, 8 Nov 2023 11:40:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/820</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-820</guid>
   <description>&lt;div&gt;&lt;p&gt;FLWOR: Variable Bindings, coercion&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #821 created</title>
   <pubDate>Wed, 8 Nov 2023 11:32:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/821</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-821</guid>
   <description>&lt;div&gt;&lt;p&gt;Annotations: Make default namespace explicit&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XQuery, the default namespace for annotations is &lt;code&gt;http://www.w3.org/2012/&lt;/code&gt;. It’s the only namespace for which no prefix exists, and I think we should change that. &lt;code&gt;ann&lt;/code&gt; feels like a reasonable choice to me as we tend to have short prefixes (such as &lt;code&gt;err&lt;/code&gt; for errors).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #820 created</title>
   <pubDate>Wed, 8 Nov 2023 11:25:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/820</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-820</guid>
   <description>&lt;div&gt;&lt;p&gt;FLWOR: Variable Bindings, coercion&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the current XQuery 4, the coercion rules are applied to variable bindings of FLWOR expressions:&lt;/p&gt;
&lt;p&gt;https://qt4cg.org/specifications/xquery-40/xquery-40-diff.html#id-binding-rules&lt;/p&gt;
&lt;p&gt;I believe this is yet another feature that needs to be formally accepted. If it has already been done so, this issue can be closed again immediately (maybe with a reference to the related issue, or the associated QT4 meeting).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #65 closed</title>
   <pubDate>Wed, 8 Nov 2023 10:00:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/65</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-65</guid>
   <description>&lt;div&gt;&lt;p&gt;Support using different input/output element namespaces&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #238 closed</title>
   <pubDate>Wed, 8 Nov 2023 09:59:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/238</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-238</guid>
   <description>&lt;div&gt;&lt;p&gt;Support Invisible XML&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #789 closed</title>
   <pubDate>Wed, 8 Nov 2023 09:55:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/789</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-789</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization spec: terminology&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #807 closed</title>
   <pubDate>Wed, 8 Nov 2023 09:55:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/807</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-807</guid>
   <description>&lt;div&gt;&lt;p&gt;789 Serialization terminology [editorial]&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #791 closed</title>
   <pubDate>Tue, 7 Nov 2023 18:14:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/791</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-791</guid>
   <description>&lt;div&gt;&lt;p&gt;238: First draft of an fn:invisible-xml function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #130 closed</title>
   <pubDate>Tue, 7 Nov 2023 18:12:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/130</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-130</guid>
   <description>&lt;div&gt;&lt;p&gt;New super/union type xs:binary?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #815 closed</title>
   <pubDate>Tue, 7 Nov 2023 18:12:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/815</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-815</guid>
   <description>&lt;div&gt;&lt;p&gt;130,480 Binary Promotion&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #772 closed</title>
   <pubDate>Tue, 7 Nov 2023 18:08:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/772</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-772</guid>
   <description>&lt;div&gt;&lt;p&gt;Revise the fn:parse-html rules to make them clearer to follow.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #809 closed</title>
   <pubDate>Tue, 7 Nov 2023 18:06:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/809</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-809</guid>
   <description>&lt;div&gt;&lt;p&gt;Placement of fn:atomic-equal in the specification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #813 closed</title>
   <pubDate>Tue, 7 Nov 2023 18:06:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/813</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-813</guid>
   <description>&lt;div&gt;&lt;p&gt;809 Move fn:atomic-equal to section 14.2&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #806 closed</title>
   <pubDate>Tue, 7 Nov 2023 18:02:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/806</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-806</guid>
   <description>&lt;div&gt;&lt;p&gt;566 A few minor fixes for parse-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #804 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:58:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/804</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-804</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor edits, XQFO chh. 7, 8&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #651 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:45:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/651</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-651</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:log → fn:message&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #803 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:45:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/803</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-803</guid>
   <description>&lt;div&gt;&lt;p&gt;651: fn:log → fn:message&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #801 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:45:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/801</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-801</guid>
   <description>&lt;div&gt;&lt;p&gt;nondeterministic vs non-deterministic&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #802 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:45:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/802</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-802</guid>
   <description>&lt;div&gt;&lt;p&gt;801: non-deterministic → nondeterministic&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #660 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:44:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/660</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-660</guid>
   <description>&lt;div&gt;&lt;p&gt;Static functions, default parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #800 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:44:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/800</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-800</guid>
   <description>&lt;div&gt;&lt;p&gt;660: Static functions, default parameters, XPST0017&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #797 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:34:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/797</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-797</guid>
   <description>&lt;div&gt;&lt;p&gt;Edits to parse-uri()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #704 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:34:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/704</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-704</guid>
   <description>&lt;div&gt;&lt;p&gt;Context Value Expression → Context Value Reference&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #793 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:34:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/793</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-793</guid>
   <description>&lt;div&gt;&lt;p&gt;704: Context Value Expression → Context Value Reference&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #819 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:33:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/819</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-819</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix markup error in example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #819 created</title>
   <pubDate>Tue, 7 Nov 2023 17:33:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/819</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-819</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix markup error in example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #792 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:21:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/792</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-792</guid>
   <description>&lt;div&gt;&lt;p&gt;783 XSLT: errors are raised&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #790 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:21:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/790</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-790</guid>
   <description>&lt;div&gt;&lt;p&gt;129 XSLT40 and SER40 changes for context item -&amp;gt; value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #775 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:21:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/775</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-775</guid>
   <description>&lt;div&gt;&lt;p&gt;517: fn:chain(): Reflected Christian Gruen's remarks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 053 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 7 Nov 2023 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/11-07</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-11-07</guid>
</item><item>
   <title>Issue #756 closed</title>
   <pubDate>Tue, 7 Nov 2023 17:18:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/756</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-756</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON serialization - number formatting&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #818 created</title>
   <pubDate>Tue, 7 Nov 2023 14:46:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/818</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-818</guid>
   <description>&lt;div&gt;&lt;p&gt;Foxpath integration&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a placeholder issue for Syd Bauman’s &lt;a href="https://app.slack.com/client/T011VK9115Z/C01GVC3JLHE"&gt;suggestion on Slack&lt;/a&gt; to integrate Foxpath, or parts of it, in the standard.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #817 created</title>
   <pubDate>Mon, 6 Nov 2023 20:31:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/817</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-817</guid>
   <description>&lt;div&gt;&lt;p&gt;EBV 4.0&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Yes, I dare to question the semantics of effective boolean values. The reason is that I never learned to fully like them. It seems obvious where the rules come from, and why they have been reasonable in previous versions of the language. From today’s perspective, I think there’s really some need to simplify and unify the rules, and I believe it’s possible with little effort and without endangering backward compatibility (provided that we are willing to drop errors and return results).&lt;/p&gt;
&lt;p&gt;Some examples for the somewhat strange nature of the current rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boolean((&amp;lt;_&amp;gt;x&amp;lt;/_&amp;gt;, &amp;lt;_&amp;gt;y&amp;lt;/_&amp;gt;))&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, whereas &lt;code&gt;boolean(('x', 'y'))&lt;/code&gt; raises an error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean(xs:NCName('x'))&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, whereas &lt;code&gt;boolean(xs:QName('x'))&lt;/code&gt; raises an error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean((&amp;lt;a/&amp;gt;, 1))&lt;/code&gt; and &lt;code&gt;boolean((1, &amp;lt;a/&amp;gt;))&lt;/code&gt; may either return &lt;code&gt;true&lt;/code&gt; or raise an error, depending on the implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I believe it will make much more sense to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;check all values of the input equally (in analogy to the existential semantics of general comparisons), and&lt;/li&gt;
&lt;li&gt;use existence checks for more types instead of raising a clueless error.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The semantics would be tidied up a lot, it could look like this…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function ebv($input as item()*) as xs:boolean {
  some $item in $input satisfies typeswitch($item) {
    case xs:untypedAtomic | xs:string | xs:anyURI  return $item != ''
    case xs:numeric                                return $item != 0
    case xs:boolean                                return $item
    default                                        return true()
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…or, if we include more types, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function ebv($input as item()*) as xs:boolean {
  some $item in $input satisfies typeswitch($item) {
    case xs:untypedAtomic | xs:string | xs:anyURI  return $item != ''
    case xs:numeric                                return $item != 0
    case xs:boolean                                return $item
    case xs:base64Binary                           return $item != xs:base64Binary('')
    case xs:hexBinary                              return $item != xs:hexBinary('')
    case array(*)                                  return array:size($item) != 0
    case map(*)                                    return map:size($item) != 0
    default                                        return true()
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(If we believe that it’s too progressive to accept all types, we could still raise an error for some specific types… although I don’t think that anyone would benefit from this choice).&lt;/p&gt;
&lt;p&gt;As a result, EBV checks could also be used to check more than one item:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: true if at least one tokenized string is non-empty :)
if(tokenize('a/', '/')) then ...
(: true if at least one number is unequal to 0 :)
if($numbers) then ...
(: true if at least one Boolean is true :)
if(false(), true(), true()) then ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing would change for the classical EBV checks: &lt;code&gt;if($node/*)&lt;/code&gt;, &lt;code&gt;if($x = $y)&lt;/code&gt;, &lt;code&gt;if($ok)&lt;/code&gt;, …&lt;/p&gt;
&lt;p&gt;Regarding “1. check all values of the input equally”, one could argue that this might affect performance. I don’t actually think so: For node sequences, it will still be sufficient to retrieve only the first item. For mixed-type sequences, errors were raised in the past.&lt;/p&gt;
&lt;p&gt;The resulting EBV could be easily combined with revised predicate semantics (#816).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #816 created</title>
   <pubDate>Mon, 6 Nov 2023 15:43:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/816</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-816</guid>
   <description>&lt;div&gt;&lt;p&gt;Predicates: Support for numeric sequences &lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Predicates provide a compact syntax for positional access to sequences but only single numbers are supported.&lt;/p&gt;
&lt;p&gt;It would be handy to allow &lt;code&gt;E[1, 2, 3]&lt;/code&gt; (&lt;code&gt;E[3, 2, 1]&lt;/code&gt;, &lt;code&gt;E[1 to 3]&lt;/code&gt;, etc.) as a shortcut for &lt;code&gt;E[position() = (1, 2, 3)]&lt;/code&gt; (MarkLogic offers this possibility, if I remember correctly). We shouldn’t change the EBV syntax, and we should continue raising an error  if the predicate sequence contains items other than numbers. Examples:&lt;/p&gt;
&lt;p&gt;Expression | Result
--- | ---
&lt;code&gt;(1 to 5)[2, 3]&lt;/code&gt; | &lt;code&gt;2, 3&lt;/code&gt;
&lt;code&gt;(1 to 5)[3, 2]&lt;/code&gt; | &lt;code&gt;2, 3&lt;/code&gt;
&lt;code&gt;(1 to 5)[2 to 3]&lt;/code&gt; | &lt;code&gt;2, 3&lt;/code&gt;
&lt;code&gt;(1 to 5)[6, 'x']&lt;/code&gt; | &lt;em&gt;error&lt;/em&gt;
&lt;code&gt;(1 to 5)[1 to 5, 'x']&lt;/code&gt; | &lt;code&gt;1, 2, 3, 4, 5&lt;/code&gt; or &lt;em&gt;error&lt;/em&gt; (up to the implementation, similar to sequences that start with a node)&lt;/p&gt;
&lt;p&gt;I bet this has already been discussed in the past…&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 053 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 6 Nov 2023 09:50:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/11-07</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-11-07</guid>
</item><item>
   <title>Issue #538 closed</title>
   <pubDate>Mon, 6 Nov 2023 09:21:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/538</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-538</guid>
   <description>&lt;div&gt;&lt;p&gt;480: Attempt to allow xs:string to be 'promoted to' xs:anyURI&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #815 created</title>
   <pubDate>Fri, 3 Nov 2023 18:15:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/815</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-815</guid>
   <description>&lt;div&gt;&lt;p&gt;130,480 Binary Promotion&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Introduces mutual promotion between xs:base64Binary and xs:hexBinary. Fix #130.&lt;/p&gt;
&lt;p&gt;Reorganises the material on type promotion. Supersedes PR #538.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #814 created</title>
   <pubDate>Fri, 3 Nov 2023 08:53:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/814</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-814</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: Rules for on-no-match="shallow-copy-all"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There are some details missing for the error handling of the built-in template processing for &lt;code&gt;shallow-copy-all&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When the built-in template processes an array, the built-in rule constructs a value record for each member, and applies-templates to this value record, expecting the result to be a value record.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's not stated whether the "value record" is extensible, that is, whether it can contain fields other than "value"&lt;/li&gt;
&lt;li&gt;No error code is given, and it's not identified explicitly as a type error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similarly when a map is processed, the result is expected to be a key-value record, but the details of the error are not spelled out.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #813 created</title>
   <pubDate>Thu, 2 Nov 2023 18:47:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/813</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-813</guid>
   <description>&lt;div&gt;&lt;p&gt;809 Move fn:atomic-equal to section 14.2&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #809&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #812 created</title>
   <pubDate>Thu, 2 Nov 2023 10:59:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/812</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-812</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion Rules: Unifications&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It has always been a challenge to teach the difference between a conversion, coercion, promotion, casts and treats. Of course, we cannot get rid of the complexity, but I think it’s a good step forward that the conversion rules have recently been unified in the specification.&lt;/p&gt;
&lt;p&gt;Maybe we can push it even further. I would suggest…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;renaming “Coercion Rules” to “Type Coercion” (…most other sections contain rules as well),&lt;/li&gt;
&lt;li&gt;making “Function Coercion” a subsection of “Type Coercion”, and&lt;/li&gt;
&lt;li&gt;making “Type Promotion” another subsection of “Type Coercion”.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’m the wrong person to decide this, but maybe the full section can be moved to the Appendix, as it’s referenced all around the documents.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #811 closed</title>
   <pubDate>Wed, 1 Nov 2023 19:16:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/811</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-811</guid>
   <description>&lt;div&gt;&lt;p&gt;Highlight changed functions in the ToCs and headings&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #811 created</title>
   <pubDate>Wed, 1 Nov 2023 19:16:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/811</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-811</guid>
   <description>&lt;div&gt;&lt;p&gt;Highlight changed functions in the ToCs and headings&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Obviously, I should have done icons for functions that have changed as well. So now I have. I'm not convinced that the 🆙 emoji is sufficiently different from the 🆕 emoji. Maybe I should try to make them different colors or something. But it's a start.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #810 closed</title>
   <pubDate>Wed, 1 Nov 2023 16:23:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/810</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-810</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix line endings&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #810 created</title>
   <pubDate>Wed, 1 Nov 2023 16:23:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/810</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-810</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix line endings&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR adds a &lt;code&gt;.gitattributes&lt;/code&gt; file that identifies some files explicitly as text files (and others explicitly as binary files).&lt;/p&gt;
&lt;p&gt;After this PR is merged, I believe it will be the case that end-of-line handling will be correct on a per-platform basis. That is, if a Windows user checks out the repository, all the files will have PC-style line endings (CR followed by LF). If a Mac or Unix user checks out the repository, all the files will have Unix-style line endings (LF).&lt;/p&gt;
&lt;p&gt;Commits should "do the right thing" to preserve the line endings appropriately.&lt;/p&gt;
&lt;p&gt;Fingers crossed!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #809 created</title>
   <pubDate>Wed, 1 Nov 2023 14:35:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/809</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-809</guid>
   <description>&lt;div&gt;&lt;p&gt;Placement of fn:atomic-equal in the specification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;On the XML.com slack, Pieter Lamers observes that &lt;code&gt;fn:atomic-equal&lt;/code&gt; looks a little out of place in chapter 18 with the other map functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #808 closed</title>
   <pubDate>Wed, 1 Nov 2023 13:22:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/808</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-808</guid>
   <description>&lt;div&gt;&lt;p&gt;Tweaks to highlight new functions in F&amp;amp;O&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #808 created</title>
   <pubDate>Wed, 1 Nov 2023 13:21:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/808</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-808</guid>
   <description>&lt;div&gt;&lt;p&gt;Tweaks to highlight new functions in F&amp;amp;O&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Following a discussion on the XML.com slack, this is a little lunchtime hackery...&lt;/p&gt;
&lt;p&gt;Any function listed in the &lt;code&gt;new-functions&lt;/code&gt; section of the changes appendix or identified with an &lt;code&gt;ednote&lt;/code&gt; that contains the string &lt;code&gt;New in 4.0&lt;/code&gt; will be marked as 🆕 in the specification. The 🆕 occurs in the ToC, the drop-down function list, and to the left of the section title.&lt;/p&gt;
&lt;p&gt;(I'm just going to merge this as it has no spec changes and the effect won't be visible in the PR anyway.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #807 created</title>
   <pubDate>Wed, 1 Nov 2023 10:40:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/807</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-807</guid>
   <description>&lt;div&gt;&lt;p&gt;789 Serialization terminology [editorial]&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;"Instance of the data model" generally becomes "input tree"&lt;/p&gt;
&lt;p&gt;An instance of the data model used to hold serialization parameters is now referred to as a "parameter document".&lt;/p&gt;
&lt;p&gt;Fix #789&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #806 created</title>
   <pubDate>Wed, 1 Nov 2023 09:43:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/806</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-806</guid>
   <description>&lt;div&gt;&lt;p&gt;566 A few minor fixes for parse-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As CG observes in &lt;a href="https://github.com/qt4cg/qtspecs/issues/566#issuecomment-1787666119"&gt;issue 566&lt;/a&gt;, there are still a couple of small problems with &lt;code&gt;fn:parse-uri()&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The regular expressions used to parse the fragment identifier and query are incorrect. The URI specification allows &lt;code&gt;?&lt;/code&gt; to appear in a query string and &lt;code&gt;#&lt;/code&gt; to appear in a fragment identifier, so the expressions have been rewritten to match everything after the first &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt;, respectively, even if they contain additional &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt; characters.&lt;/li&gt;
&lt;li&gt;The description of how to interpret the regular expression for parsing a Windows file path preceded by slashes was incorrect. It caused the leading "/" to be lost. That's been corrected.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #805 closed</title>
   <pubDate>Wed, 1 Nov 2023 08:42:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/805</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-805</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve formatting of FO examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #805 created</title>
   <pubDate>Tue, 31 Oct 2023 22:02:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/805</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-805</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve formatting of FO examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Stylesheet changes to improve the formatting of F&amp;amp;O examples. (But they still aren't perfect...!)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Variables used by the examples are pulled out under a separate heading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If any examples include long lines, then single-column ("wide") format is used automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In two-column layout, if the left-hand column uses "eg" format, then so does the right-hand column. (But it would be nice to get rid of the grey background for this case).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #804 created</title>
   <pubDate>Tue, 31 Oct 2023 21:32:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/804</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-804</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor edits, XQFO chh. 7, 8&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In addition to a minor typo, note the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rearrangement of a rule for &lt;code&gt;$input&lt;/code&gt; (the original syntax, mixing types and derived types, confused me)&lt;/li&gt;
&lt;li&gt;examples in &lt;code&gt;X-from-Y&lt;/code&gt; duration functions to help illustrate the problem when mixing the two components of a duration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #753 closed</title>
   <pubDate>Tue, 31 Oct 2023 19:22:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/753</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-753</guid>
   <description>&lt;div&gt;&lt;p&gt;65: Allow xmlns="xxx" to NOT change the default namespace for NameTests&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 052 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 31 Oct 2023 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/10-31</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-10-31</guid>
</item><item>
   <title>Issue #770 closed</title>
   <pubDate>Tue, 31 Oct 2023 17:12:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/770</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-770</guid>
   <description>&lt;div&gt;&lt;p&gt;566: Use fn:decode-from-uri in fn:parse-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #469 closed</title>
   <pubDate>Tue, 31 Oct 2023 17:11:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/469</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-469</guid>
   <description>&lt;div&gt;&lt;p&gt;array:of-members, map:of-pairs: Signatures, Examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #782 closed</title>
   <pubDate>Tue, 31 Oct 2023 17:11:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/782</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-782</guid>
   <description>&lt;div&gt;&lt;p&gt;469: array:of-members, map:of-pairs: Signatures, Examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #778 closed</title>
   <pubDate>Tue, 31 Oct 2023 17:11:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/778</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-778</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO edits 5.4-5.6&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #784 closed</title>
   <pubDate>Tue, 31 Oct 2023 17:11:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/784</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-784</guid>
   <description>&lt;div&gt;&lt;p&gt;fos xsd&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #785 closed</title>
   <pubDate>Tue, 31 Oct 2023 17:11:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/785</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-785</guid>
   <description>&lt;div&gt;&lt;p&gt;777: updated history&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #786 closed</title>
   <pubDate>Tue, 31 Oct 2023 17:10:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/786</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-786</guid>
   <description>&lt;div&gt;&lt;p&gt;695: Added xref to fn:slice()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #787 closed</title>
   <pubDate>Tue, 31 Oct 2023 17:10:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/787</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-787</guid>
   <description>&lt;div&gt;&lt;p&gt;783(part) - Editorial changes to Serialization spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #803 created</title>
   <pubDate>Tue, 31 Oct 2023 17:01:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/803</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-803</guid>
   <description>&lt;div&gt;&lt;p&gt;651: fn:log → fn:message&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #651&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #802 created</title>
   <pubDate>Tue, 31 Oct 2023 12:47:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/802</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-802</guid>
   <description>&lt;div&gt;&lt;p&gt;801: non-deterministic → nondeterministic&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #801&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #801 created</title>
   <pubDate>Tue, 31 Oct 2023 12:45:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/801</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-801</guid>
   <description>&lt;div&gt;&lt;p&gt;nondeterministic vs non-deterministic&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the specs, both “nondeterministic” and “non-deterministic” can be found. The first one is more frequent, so I guess it’s the one that’s preferred.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #359 closed</title>
   <pubDate>Tue, 31 Oct 2023 10:57:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/359</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-359</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:void: Absorb result of evaluated argument&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #800 created</title>
   <pubDate>Tue, 31 Oct 2023 10:51:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/800</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-800</guid>
   <description>&lt;div&gt;&lt;p&gt;660: Static functions, default parameters, XPST0017&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I’ve chosen XPST0017 over XPST0003 (it felt more intuitive to me).&lt;/p&gt;
&lt;p&gt;Closes #660.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #799 created</title>
   <pubDate>Tue, 31 Oct 2023 10:27:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/799</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-799</guid>
   <description>&lt;div&gt;&lt;p&gt;Errors in F&amp;amp;O spec examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In fn:expanded-QName, &lt;code&gt;http:/example.com&lt;/code&gt; should be &lt;code&gt;http://example.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In map:merge, there's a stray "(" in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map:merge((
  ($week, map { 7: "Unbekannt" })
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #798 created</title>
   <pubDate>Tue, 31 Oct 2023 10:19:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/798</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-798</guid>
   <description>&lt;div&gt;&lt;p&gt;479: fn:deep-equal: Input order&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I decided to follow my initial suggestion and add &lt;code&gt;unordered&lt;/code&gt; to &lt;code&gt;fn:deep-equal&lt;/code&gt; instead of adding a separate function for it. My motivation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It’s convenient to be able to use the new option in combination with the other options.&lt;/li&gt;
&lt;li&gt;It will be used more often than many other options we’ve added recently.&lt;/li&gt;
&lt;li&gt;It seemed pretty straightforward to add, both in terms of documentation and implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Closes #479&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #797 created</title>
   <pubDate>Tue, 31 Oct 2023 03:33:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/797</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-797</guid>
   <description>&lt;div&gt;&lt;p&gt;Edits to parse-uri()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Attn @ndw -- these edits pertain to 6.6.1 &lt;code&gt;fn:parse-uri&lt;/code&gt; and require your careful review.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hierarchical&lt;/code&gt; option appears in the rules of the function but not its preamble&lt;/li&gt;
&lt;li&gt;"This function is described..." moved to anticipate the actual narrative.&lt;/li&gt;
&lt;li&gt;I was a bit thrown by the phrase "This approach...is not implementation advice" because "approach" is vague and the reader is left with the impression that a good deal of &lt;em&gt;something&lt;/em&gt; that follows is non-normative. We offer non-normative prose in the rules, but that informal prose is normally followed by an equivalent description that &lt;em&gt;is&lt;/em&gt; normative. I did not make any edits in this area, but I would recommend clarification as to exactly what parts of the narrative are normative and which are non-normative.&lt;/li&gt;
&lt;li&gt;The period-to-colon change at 27573 is to make sure the reader remains aware of the governing "If..." clause.&lt;/li&gt;
&lt;li&gt;I deleted a paragraph that attempted to distill the rather complicated description of &lt;code&gt;fn:decode-from-uri&lt;/code&gt;. A mere xref provides a cleaner narrative here and a more accurate description of uri decoding, and the xref is within the same document, so should not pose a burden on the reader.&lt;/li&gt;
&lt;li&gt;For the &lt;code&gt;query-parameters&lt;/code&gt; there was a discrepancy in the data model presented (in the preamble versus in the function rules), and I opted for the array-of-maps model. If it's supposed to be the other way (simple map), let me know and I'll revise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query-segments&lt;/code&gt; versus &lt;code&gt;query-parameters&lt;/code&gt;; I went with the latter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know where things ain't right.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #796 created</title>
   <pubDate>Mon, 30 Oct 2023 17:28:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/796</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-796</guid>
   <description>&lt;div&gt;&lt;p&gt;allow explicit type expressions in XPath variable bindings&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It would be useful to be able to write&lt;/p&gt;
&lt;p&gt;&lt;code&gt;   let $n as xs:integer := some_expr ....&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and also maybe&lt;/p&gt;
&lt;p&gt;&lt;code&gt; for $s as xs:string, $p as my:name return....&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This might occur e.g. in the body of a function, for example... and would help type safety and debugging.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #795 created</title>
   <pubDate>Mon, 30 Oct 2023 15:02:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/795</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-795</guid>
   <description>&lt;div&gt;&lt;p&gt;655 fn:sort-with&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #655&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #794 created</title>
   <pubDate>Mon, 30 Oct 2023 14:05:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/794</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-794</guid>
   <description>&lt;div&gt;&lt;p&gt;216: fn:unparsed-text: End-of-line characters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #216. See this issue for more details on the proposed change.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #793 created</title>
   <pubDate>Mon, 30 Oct 2023 13:33:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/793</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-793</guid>
   <description>&lt;div&gt;&lt;p&gt;704: Context Value Expression → Context Value Reference&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #704&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #792 created</title>
   <pubDate>Mon, 30 Oct 2023 12:52:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/792</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-792</guid>
   <description>&lt;div&gt;&lt;p&gt;783 XSLT: errors are raised&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See issue #783.&lt;/p&gt;
&lt;p&gt;Errors are raised, not signalled or reported or generated or thrown.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #791 created</title>
   <pubDate>Mon, 30 Oct 2023 12:37:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/791</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-791</guid>
   <description>&lt;div&gt;&lt;p&gt;238: First draft of an fn:invisible-xml function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Pursuant to action QT4CG-051-02, here is a proposal for &lt;code&gt;fn:invisible-xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a number of different design choices that could be made. For example, one could argue that a function of the form &lt;code&gt;fn:invisible-xml($grammar as xs:anyURI, $input as xs:anyURI)&lt;/code&gt; would be the easiest thing for users in many cases. But not in all cases. You might want versions where either the grammar or the input were strings instead of URIs.&lt;/p&gt;
&lt;p&gt;I've attempted to craft the smallest proposal that could get the job done.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #790 created</title>
   <pubDate>Mon, 30 Oct 2023 11:23:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/790</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-790</guid>
   <description>&lt;div&gt;&lt;p&gt;129 XSLT40 and SER40 changes for context item -&amp;gt; value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Proposes XSLT 4.0 and Serialization 4.0 changes resulting from the generalization of context item to context value in XPath 4.0.&lt;/p&gt;
&lt;p&gt;The serialization changes are purely editorial.&lt;/p&gt;
&lt;p&gt;In XSLT, we acknowledge the introduction of the context value in XPath but don't take advantage of it; at the XSLT level, the context value for an instruction is still always a single item. The only technical change is that we allow xsl:evaluate to pass any value as the context value to the dynamically evaluated expression (while retaining the name of the relevant attribute "context-item").&lt;/p&gt;
&lt;p&gt;Fulfils action QT4CG-046-01&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 052 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 30 Oct 2023 11:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/10-31</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-10-31</guid>
</item><item>
   <title>Issue #789 created</title>
   <pubDate>Mon, 30 Oct 2023 11:09:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/789</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-789</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization spec: terminology&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The serialization spec makes extensive use of the phrase "an instance of the data model". This phrase is defined to be a synonym of "value" or "sequence", and it seems to add a lot of words without adding any clarity. In many cases the context makes clear that it is actually referring to a tree rooted at a document node.&lt;/p&gt;
&lt;p&gt;In section 3.1 "Setting Serialization Parameters by Means of a Data Model Instance" it would be helpful to use a more specific phrase, for example "a parameter document".&lt;/p&gt;
&lt;p&gt;Elsewhere the phrase is often used to mean "the value being serialized", and again, it would be helpful to use a more specific phrase, perhaps a term that is quite distinctive such as "the payload". (It's sometimes referred to as "the result tree", but that assumes that the value being serialized is the result of a query or stylesheet.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #788 created</title>
   <pubDate>Mon, 30 Oct 2023 08:48:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/788</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-788</guid>
   <description>&lt;div&gt;&lt;p&gt;New function fn:annotate()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose a function fn:annotate() which will add annotations to a function item. It will create a new function item that differs from the original only in its annotations.&lt;/p&gt;
&lt;p&gt;Currently annotations are a dynamic property of function items, but they can only be set in very limited ways. Allowing them to be set dynamically creates lot of opportunities. For example, there is currently no way to set annotations on a map or array, but one could define annotations, for example, to indicate that a map should hold entries ordered by key, or that an array should use a "sparse" implementation; there is scope both for spec-defined and vendor-defined (and perhaps even user-defined) annotations.&lt;/p&gt;
&lt;p&gt;Some of the possibilities this would open up have been outlined in other issues. At present, though, we have a capability in the data model that is underexploited, and an &lt;code&gt;fn:annotate()&lt;/code&gt; function is a conceptually simple addition, which can be justified purely on the grounds of completeness - if something exists in the data model, surely it should have getters and setters?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #635 closed</title>
   <pubDate>Mon, 30 Oct 2023 08:43:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/635</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-635</guid>
   <description>&lt;div&gt;&lt;p&gt;451: Schema compatibility&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #765 closed</title>
   <pubDate>Mon, 30 Oct 2023 08:41:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/765</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-765</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery version declaration: upgrade to 4.0&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #766 closed</title>
   <pubDate>Mon, 30 Oct 2023 08:41:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/766</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-766</guid>
   <description>&lt;div&gt;&lt;p&gt;765 Update version references etc to 4.0 status&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #787 created</title>
   <pubDate>Fri, 27 Oct 2023 07:46:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/787</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-787</guid>
   <description>&lt;div&gt;&lt;p&gt;783(part) - Editorial changes to Serialization spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Errors are raised, not signaled&lt;/li&gt;
&lt;li&gt;Cross-references point to 4.0 specs rather than 3.0/3.1&lt;/li&gt;
&lt;li&gt;Some internal markup changes for tidiness&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Partial fix for #783 as it affects the serialization spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #695 closed</title>
   <pubDate>Thu, 26 Oct 2023 22:22:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/695</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-695</guid>
   <description>&lt;div&gt;&lt;p&gt;Step in RangeExpression&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #786 created</title>
   <pubDate>Thu, 26 Oct 2023 22:21:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/786</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-786</guid>
   <description>&lt;div&gt;&lt;p&gt;695: Added xref to fn:slice()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This closes #695 .&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #777 closed</title>
   <pubDate>Thu, 26 Oct 2023 22:09:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/777</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-777</guid>
   <description>&lt;div&gt;&lt;p&gt;new replace() parameter $action&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #785 created</title>
   <pubDate>Thu, 26 Oct 2023 22:07:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/785</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-785</guid>
   <description>&lt;div&gt;&lt;p&gt;777: updated history&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes issue #777&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #784 created</title>
   <pubDate>Thu, 26 Oct 2023 21:54:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/784</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-784</guid>
   <description>&lt;div&gt;&lt;p&gt;fos xsd&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;a href="xsd:assert"&gt;xsd:assert&lt;/a&gt; is illegal in schema version 1.0; updated to specify version 1.1.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #783 created</title>
   <pubDate>Thu, 26 Oct 2023 21:49:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/783</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-783</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: errors are raised (not reported, signaled, generated, or thrown).&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The most common phrase we use when describing an error condition is "A (dynamic|static|type) error is raised if ...".&lt;/p&gt;
&lt;p&gt;There are other cases where we use the verb "reported" or "signaled" (and occasionally, "thrown" or "generated"). We should avoid these verbs, partly in the interests of consistency, and partly because they are misleading: an error is not reported if it is caught by a try/catch, but it is still raised.&lt;/p&gt;
&lt;p&gt;XSLT also commonly uses the phrase "It is a (dynamic|static|type) error if ... " which is also acceptable.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #782 created</title>
   <pubDate>Thu, 26 Oct 2023 13:26:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/782</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-782</guid>
   <description>&lt;div&gt;&lt;p&gt;469: array:of-members, map:of-pairs: Signatures, Examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I’ve eventually renamed &lt;code&gt;$pairs&lt;/code&gt; to &lt;code&gt;$input&lt;/code&gt; (I didn’t rename &lt;code&gt;$input&lt;/code&gt; to &lt;code&gt;$members&lt;/code&gt; as initially suggested, as we have &lt;code&gt;$member&lt;/code&gt; parameters in other functions that are of type &lt;code&gt;item()*&lt;/code&gt;, not &lt;code&gt;record(value as item()*)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Closes #469&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #776 closed</title>
   <pubDate>Thu, 26 Oct 2023 11:37:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/776</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-776</guid>
   <description>&lt;div&gt;&lt;p&gt;/etc/XT40 does not get built&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #781 closed</title>
   <pubDate>Thu, 26 Oct 2023 11:37:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/781</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-781</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix etc_XT40 output file&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #781 created</title>
   <pubDate>Thu, 26 Oct 2023 11:37:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/781</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-781</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix etc_XT40 output file&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #776&lt;/p&gt;
&lt;p&gt;You'll need to pull and rebase &lt;code&gt;master&lt;/code&gt; after I merge this.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #764 closed</title>
   <pubDate>Thu, 26 Oct 2023 07:25:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/764</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-764</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery: Simplify module imports&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #780 created</title>
   <pubDate>Thu, 26 Oct 2023 04:04:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/780</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-780</guid>
   <description>&lt;div&gt;&lt;p&gt;format-number() etc incompatibility&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have changed format-number() and some XSLT functions including system-property(), function-available() etc so that the QName-valued argument is now declared with type union(xs:string, xs:QName) rather than xs:string. I believe that there are edge cases where this is an incompatible change -- for example if the supplied value is an xs:anyURI value. I think the edge cases are probably sufficiently obscure and unlikely to occur in practice that it is sufficient to document them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #779 created</title>
   <pubDate>Thu, 26 Oct 2023 03:18:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/779</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-779</guid>
   <description>&lt;div&gt;&lt;p&gt;Hash/checksum function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose a new function for the core XPath functions, here called &lt;code&gt;fn:hash()&lt;/code&gt; for the sake of discussion. The goal is to give XPath users access to CRC, checksum, and cryptographic hash functions.&lt;/p&gt;
&lt;h3&gt;Rationale&lt;/h3&gt;
&lt;p&gt;Simple checksums functions, such as those from the Fletcher family, are relatively easy to write in a host language such as XSLT. More complex ones are far more challenging to write, and may incur serious performance penalties. For example, from the TAN function library, see the &lt;a href="https://github.com/textalign/TAN-2021/blob/master/functions/checksums/TAN-fn-hash-and-check.xsl"&gt;MD5 checksum/hash functions&lt;/a&gt;. (Yes, one day I thought it would be fun to try to implement the MD5 algorithm in XSLT.) Most programming languages in which an implementation is written have access to cryptographic libraries that are highly performative.&lt;/p&gt;
&lt;p&gt;Hash functions are widely used, and certainly important in XML-based workflows, whether as filenames, database fields, etc.&lt;/p&gt;
&lt;p&gt;The closest comparable existing functions is &lt;code&gt;generate-id()&lt;/code&gt;, but this was designed as an identifier for nodes.&lt;/p&gt;
&lt;p&gt;In short, I believe there is a significant need that outstrips current functionality.&lt;/p&gt;
&lt;p&gt;In the draft below, I have adopted only the MD-5 algorithm as a core requirement, to catalyze discussion. I have assumed the user wants the string form of the output, not the raw bits. I have not tried to flesh out prose that would warn users away from security complacency.&lt;/p&gt;
&lt;p&gt;For discussion, &lt;a href="https://en.wikipedia.org/wiki/List_of_hash_functions"&gt;here is a list of relevant algorithms&lt;/a&gt;. I look forward to community feedback.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;fn:hash&lt;/code&gt; Draft Specification&lt;/h3&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;This function takes as input a string or octet sequence and returns a string representation of the results from a specified hash, checksum, or cyclic redundancy check function.&lt;/p&gt;
&lt;h4&gt;Signature&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;fn:hash(
   $value as union(xs:string, xs:hexBinary, 
                   xs:base64Binary)?   := fn:string(.),
   $algorithm as xs:string             := "md5"
) as xs:string?
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Properties&lt;/h4&gt;
&lt;p&gt;The zero-argument form of this function is deterministic, context-dependent, and focus-dependent.&lt;/p&gt;
&lt;p&gt;The one- and two-argument form of this function is deterministic, context-independent, and focus-independent.&lt;/p&gt;
&lt;h4&gt;Rules&lt;/h4&gt;
&lt;p&gt;If the zero-argument version of the function is used, the result is the same as calling the one-argument version, with &lt;code&gt;$value&lt;/code&gt; set to &lt;code&gt;fn:string(.)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the one-argument version of the function is used, the result is the same as calling the two-argument version, with &lt;code&gt;$algorithm&lt;/code&gt; set to "md5".&lt;/p&gt;
&lt;p&gt;The effective value of &lt;code&gt;$algorithm&lt;/code&gt; is the value of the expression &lt;code&gt;fn:lower-case(fn:replace($function, '\W+', ''))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;$value&lt;/code&gt; is the empty sequence, or a string of zero length, the function returns the empty sequence.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;$value&lt;/code&gt; is an instance of &lt;code&gt;xs:string&lt;/code&gt; it is cast to &lt;code&gt;xs:hexBinary&lt;/code&gt; on the basis of UTF-8 encoding. If &lt;code&gt;$value&lt;/code&gt; is an instance of &lt;code&gt;xs:base64Binary&lt;/code&gt; it is cast to &lt;code&gt;xs:hexBinary&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function returns an &lt;code&gt;xs:string&lt;/code&gt; representation of the bytes returned by passing the &lt;code&gt;xs:hexBinary&lt;/code&gt; value of &lt;code&gt;$value&lt;/code&gt; as an octet sequence through the specified hash or checksum function.&lt;/p&gt;
&lt;p&gt;Conforming implementations MUST support &lt;code&gt;md5&lt;/code&gt; and the associated MD5 Message-Digest algorithm defined by RFC 6151 (update to RFC 1321). They MAY support other checksum and hash functions with implementation-defined semantics.&lt;/p&gt;
&lt;h4&gt;Error Conditions&lt;/h4&gt;
&lt;p&gt;A dynamic error is raised &lt;em&gt;[err:XXXXXXX]&lt;/em&gt; if the effective value of &lt;code&gt;$algorithm&lt;/code&gt; is not one of the values supported by the implementation.&lt;/p&gt;
&lt;h4&gt;Notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The MD5 algorithm is normally not used for cryptographic purposes. &lt;em&gt;[More cautionary prose about not assuming that something can be trusted as secure.]&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Examples&lt;/h4&gt;
&lt;p&gt;Expression | Result
-- | --
fn:hash("abc") | 900150983cd24fb0d6963f7d28e17f72
fn:hash("ABC") | 902fbdd2b1df0c4f70b4a5d23525e932&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #778 created</title>
   <pubDate>Thu, 26 Oct 2023 01:53:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/778</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-778</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO edits 5.4-5.6&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Light edits for consistency.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Examples in &lt;code&gt;char()&lt;/code&gt; have been reordered so that the most interesting and useful examples are at top.&lt;/li&gt;
&lt;li&gt;Substring functions were difficult to read in the specs because of the overly long collation URI. These are now bound to a variable, to enhance legibility.&lt;/li&gt;
&lt;li&gt;Schema location fixed.&lt;/li&gt;
&lt;li&gt;extra examples in &lt;code&gt;string-length()&lt;/code&gt;, to help users recognize the role of combining characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #777 created</title>
   <pubDate>Thu, 26 Oct 2023 01:35:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/777</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-777</guid>
   <description>&lt;div&gt;&lt;p&gt;new replace() parameter $action&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the current draft for &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-replace"&gt;replace()&lt;/a&gt; the history log states that the new parameter &lt;code&gt;$action&lt;/code&gt; has not yet had community review. This ticket provides a placeholder for attention and discussion.&lt;/p&gt;
&lt;p&gt;If the CG has already reviewed and accepted &lt;code&gt;$action&lt;/code&gt;, comment here and I will update the function history accordingly.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #776 created</title>
   <pubDate>Wed, 25 Oct 2023 21:54:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/776</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-776</guid>
   <description>&lt;div&gt;&lt;p&gt;/etc/XT40 does not get built&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The serialisation spec has &lt;code&gt;xspecref spec="XT31"&lt;/code&gt; references that need to be updated to &lt;code&gt;XT40&lt;/code&gt;. But for some reason the &lt;code&gt;/etc/XT40&lt;/code&gt; file isn't being built, so these references fail to resolve.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #775 created</title>
   <pubDate>Wed, 25 Oct 2023 21:14:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/775</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-775</guid>
   <description>&lt;div&gt;&lt;p&gt;517: fn:chain(): Reflected Christian Gruen's remarks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I deleted my fork, got a new one and applied the latest changes. Seems this fixed the issues.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #773 closed</title>
   <pubDate>Wed, 25 Oct 2023 20:38:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/773</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-773</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-051-04/05: Reflected today's meeting editorial suggestions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #768 closed</title>
   <pubDate>Wed, 25 Oct 2023 16:44:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/768</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-768</guid>
   <description>&lt;div&gt;&lt;p&gt;Details about decode-for-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #769 closed</title>
   <pubDate>Wed, 25 Oct 2023 16:44:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/769</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-769</guid>
   <description>&lt;div&gt;&lt;p&gt;768: details about decode-from-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #517 closed</title>
   <pubDate>Wed, 25 Oct 2023 15:11:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/517</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-517</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:chain (before: fn:multi-compose)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #758 closed</title>
   <pubDate>Wed, 25 Oct 2023 15:10:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/758</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-758</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO UCA keyword strength, quaternary setting&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #686 closed</title>
   <pubDate>Wed, 25 Oct 2023 15:09:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/686</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-686</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO presentation of diagnostic functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #774 created</title>
   <pubDate>Wed, 25 Oct 2023 12:46:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/774</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-774</guid>
   <description>&lt;div&gt;&lt;p&gt;What should be percent-encoded in a URI?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;(This is related to &lt;code&gt;fn:parse-uri&lt;/code&gt;, &lt;code&gt;fn:build-uri&lt;/code&gt;, and &lt;code&gt;fn:decode-from-uri&lt;/code&gt;. I'm making it a distinct issue to call it out and see if we can get consensus on the right answer. I've come to the conclusion that what I've implemented isn't justified by any specific reading of the relevant specifications, so it's wrong.)&lt;/p&gt;
&lt;p&gt;This question is slightly tricky because encoding (or not encoding) characters can change the meaning of the URI.&lt;/p&gt;
&lt;p&gt;If you trace your way through the ABNF in RFC 3986 you eventually get to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   path-abempty  = *( "/" segment )
   path-absolute = "/" [ segment-nz *( "/" segment ) ]
   path-noscheme = segment-nz-nc *( "/" segment )
   path-rootless = segment-nz *( "/" segment )
   path-empty    = 0&amp;lt;pchar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The various &lt;code&gt;segment&lt;/code&gt; nonterminals boil down to some number of &lt;code&gt;pchar&lt;/code&gt;. (The &lt;code&gt;segment-nz&lt;/code&gt; form is used to forbid a zero length string before the first &lt;code&gt;/&lt;/code&gt;; the &lt;code&gt;segment-nz-nc&lt;/code&gt; form is used for a URI that does not begin with a scheme: it must have a non-zero length string before the first &lt;code&gt;/&lt;/code&gt; that additionally must not contain a &lt;code&gt;:&lt;/code&gt;.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
  pct-encoded   = "%" HEXDIG HEXDIG
  sub-delims    = "!" / "$" / "&amp;amp;" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think it follows that all characters &lt;strong&gt;except&lt;/strong&gt; the following must be encoded:&lt;/p&gt;
&lt;p&gt;Upper-and lower-case &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;Z&lt;/code&gt;, the digits &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;'&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt;, and &lt;code&gt;@&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;or, conversely, that any characters &lt;em&gt;other than those&lt;/em&gt; &lt;strong&gt;must&lt;/strong&gt; be encoded.&lt;/p&gt;
&lt;p&gt;Observe that &lt;code&gt;/&lt;/code&gt; isn't among the characters that are not encoded. That's because the &lt;code&gt;/&lt;/code&gt; in hierarchical URIs divides the segments. It's part of the URI syntax. That's &lt;em&gt;why&lt;/em&gt; a literal forward slash that appears somewhere in an actual path segment must be encoded &lt;code&gt;%2F&lt;/code&gt; and it's why causually unencoding such a character changes the URI.&lt;/p&gt;
&lt;p&gt;Observe also that there's no provision here for encoding a space with &lt;code&gt;+&lt;/code&gt;, even though it's fairly common. I've carried that error through to some of the test results for &lt;code&gt;fn:build-uri&lt;/code&gt; and &lt;code&gt;fn:parse-uri&lt;/code&gt;. I'll fix those tests.&lt;/p&gt;
&lt;p&gt;I'm going to try changing my implementation to follow the rule above and see what happens.&lt;/p&gt;
&lt;p&gt;If you think this analysis is incorrect, please explain where I went wrong.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #773 created</title>
   <pubDate>Tue, 24 Oct 2023 18:48:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/773</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-773</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-051-04/05: Reflected today's meeting editorial suggestions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;All 3 editorial suggestions made in today's meeting are now reflected.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #772 created</title>
   <pubDate>Tue, 24 Oct 2023 17:17:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/772</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-772</guid>
   <description>&lt;div&gt;&lt;p&gt;Revise the fn:parse-html rules to make them clearer to follow.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This actions the comment in #767 that the rules for the function are unclear.&lt;/p&gt;
&lt;p&gt;The SVG element name handling is correct in the spec per the comments in https://github.com/qt4cg/qt4tests/issues/57, so don't need changing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 051 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 24 Oct 2023 16:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/10-24</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-10-24</guid>
</item><item>
   <title>Issue #734 closed</title>
   <pubDate>Tue, 24 Oct 2023 16:06:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/734</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-734</guid>
   <description>&lt;div&gt;&lt;p&gt;517: fn:chain&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #763 closed</title>
   <pubDate>Tue, 24 Oct 2023 16:05:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/763</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-763</guid>
   <description>&lt;div&gt;&lt;p&gt;686: XQFO diagnostic function documentation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #762 closed</title>
   <pubDate>Tue, 24 Oct 2023 16:04:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/762</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-762</guid>
   <description>&lt;div&gt;&lt;p&gt;758: XQFO minor edits 3&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #653 closed</title>
   <pubDate>Tue, 24 Oct 2023 16:04:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/653</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-653</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery - option to suppress entity expansion&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #749 closed</title>
   <pubDate>Tue, 24 Oct 2023 16:04:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/749</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-749</guid>
   <description>&lt;div&gt;&lt;p&gt;653: Add string literals E".." and L".." to control entity expansion&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #647 closed</title>
   <pubDate>Tue, 24 Oct 2023 16:04:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/647</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-647</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery: import schema with multiple location hints&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #659 closed</title>
   <pubDate>Tue, 24 Oct 2023 16:04:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/659</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-659</guid>
   <description>&lt;div&gt;&lt;p&gt;647: schema location hints&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #383 closed</title>
   <pubDate>Tue, 24 Oct 2023 16:03:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/383</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-383</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: Order of child elements (unordered-elements)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #771 created</title>
   <pubDate>Tue, 24 Oct 2023 12:42:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/771</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-771</guid>
   <description>&lt;div&gt;&lt;p&gt;British vs. American English&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Purely editorial: Some words in the specification seem to be British English (organised, generalised, behaviour), whereas the majority of the text is American English. Should this be fixed?&lt;/p&gt;
&lt;p&gt;I assume there are tools to get this straight? I am too rarely affected by it to know more about it…&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #770 created</title>
   <pubDate>Mon, 23 Oct 2023 14:03:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/770</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-770</guid>
   <description>&lt;div&gt;&lt;p&gt;566: Use fn:decode-from-uri in fn:parse-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think this is sufficient to close issue 566. @ChristianGruen could you let me know if you agree?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #769 created</title>
   <pubDate>Mon, 23 Oct 2023 13:26:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/769</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-769</guid>
   <description>&lt;div&gt;&lt;p&gt;768: details about decode-from-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #768&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #768 created</title>
   <pubDate>Mon, 23 Oct 2023 12:53:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/768</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-768</guid>
   <description>&lt;div&gt;&lt;p&gt;Details about decode-for-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm unclear on how &lt;code&gt;%XA&lt;/code&gt; should be decoded. Is that &lt;code&gt;%X&lt;/code&gt; (an error) followed by &lt;code&gt;A&lt;/code&gt;, or is that &lt;code&gt;%XA&lt;/code&gt; (an error)?&lt;/p&gt;
&lt;p&gt;Also, a couple of typos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s/to an sequence/to a sequence/
s/that are no hexadecimal/that are not hexadecimal`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 051 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 23 Oct 2023 10:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/10-24</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-10-24</guid>
</item><item>
   <title>Issue #767 created</title>
   <pubDate>Mon, 23 Oct 2023 09:20:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/767</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-767</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-html(): case of SVG element names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Gunther Rademacher points out at https://github.com/qt4cg/qt4tests/issues/57 that the expected test results for parse-html() expect SVG elements to be output in lower case; and as far as I can see, this is consistent with the spec. But is it useful? It means we're producing XML that isn't valid according to the SVG schema, and that presumably might be rejected by tools that expect to handle valid SVG.&lt;/p&gt;
&lt;p&gt;In passing, I note that it's very hard to work out from the parse-html() spec what the function actually does; it's somehow written as if it's obvious, but it never gets around to actually saying it explicitly. It also doesn't say what happens when the &lt;code&gt;method&lt;/code&gt; option is omitted, as it is in these tests.&lt;/p&gt;
&lt;p&gt;In addition, it seems that we don't have any tests that exercise the various options of the function, e.g. the ability to consue binary as well as character input.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #766 created</title>
   <pubDate>Thu, 19 Oct 2023 22:45:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/766</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-766</guid>
   <description>&lt;div&gt;&lt;p&gt;765 Update version references etc to 4.0 status&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Includes the following changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clarification of the syntax and semantics of the version number in the XQuery version declaration&lt;/li&gt;
&lt;li&gt;Updates to front and back matter to reflect the current status of the 4.0 specs&lt;/li&gt;
&lt;li&gt;Update cross-spec references to point to the 4.0 specs rather than 3.1 specs&lt;/li&gt;
&lt;li&gt;A DTD change from spec="SER40" to spec="SE40" to reflect the name of the /etc file generated by the gradle script.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fix #765&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #765 created</title>
   <pubDate>Thu, 19 Oct 2023 10:33:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/765</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-765</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery version declaration: upgrade to 4.0&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The text at §5.1 does not yet acknowledge version="4.0".&lt;/p&gt;
&lt;p&gt;We should also be a bit more precise about the syntax, which currently says that the version number is two integers separated by a dot. We should give a regular expression to be absolutely clear that we mean decimal integers, no underscores allowed.&lt;/p&gt;
&lt;p&gt;There are a few other version references to tidy up at the same time, e.g. "XQuery is designed to meet the requirements identified by the W3C XML Query Working Group [[XQuery 3.1 Requirements]]."&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #764 created</title>
   <pubDate>Thu, 19 Oct 2023 09:07:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/764</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-764</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery: Simplify module imports&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With XQuery, you can import library modules as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;import module namespace utils = 'http://project.org/utils' at 'org/project/utils.xq`;
utils:action()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If an implementation has a mechanism to resolve a namespace URI, you can also do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;import module namespace utils = 'http://project.org/utils`;
utils:action()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be desirable to simplify this further, and be able to do one of…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: already legal, but no namespace binding takes place :)
import module namespace 'http://project.org/utils';
(: not supported yet :)
import module namespace http://project.org/utils;
(: no URI rewriting needed for relative paths :)
import module namespace org/project/utils;

utils:action()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;rewrite namespace URIs to local paths (this is how we proceed: https://docs.basex.org/wiki/Java_Bindings#URI_Rewriting)&lt;/li&gt;
&lt;li&gt;extract the prefix from the path.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I can imagine that the current ways to simplify imports depend a lot on the used implementations. Suggestions are welcome.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #759 closed</title>
   <pubDate>Thu, 19 Oct 2023 05:41:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/759</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-759</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization: JSON Parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #763 created</title>
   <pubDate>Thu, 19 Oct 2023 04:44:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/763</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-763</guid>
   <description>&lt;div&gt;&lt;p&gt;686: XQFO diagnostic function documentation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think what prompted my original ticket was the use of "output". That term is used scores of times in the specs, and it always implies the output of a function within the XPath expression. Although the term is qualified in the diagnostic functions with the adjective "trace" or "log", it's tempting to think of the function's actual output. Coming back a few weeks later, I think some gentle massaging (instead of a convoluted preamble) can help readers not make the requisite adjustment, reflected in the present PR.&lt;/p&gt;
&lt;p&gt;I have offered two examples that I hope show the practical side of these functions. I might have missed something though, so please chime in.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #762 created</title>
   <pubDate>Thu, 19 Oct 2023 03:38:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/762</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-762</guid>
   <description>&lt;div&gt;&lt;p&gt;758: XQFO minor edits 3&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This covers edits to XQFO 4 through 5.3, and incorporates the suggestion in #758&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #746 closed</title>
   <pubDate>Wed, 18 Oct 2023 20:54:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/746</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-746</guid>
   <description>&lt;div&gt;&lt;p&gt;break-when -&amp;gt; split-when in fn:partition&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #761 created</title>
   <pubDate>Wed, 18 Oct 2023 20:42:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/761</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-761</guid>
   <description>&lt;div&gt;&lt;p&gt;554/754 Simplify the new transitive-closure function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Drops the &lt;code&gt;$min&lt;/code&gt; and &lt;code&gt;$max&lt;/code&gt; parameters, with the effect that this corresponds much more closely to the general computer-science definition of a transitive closure.&lt;/p&gt;
&lt;p&gt;The function now computes the set of nodes delivered by the transitive closure of the supplied &lt;code&gt;$step&lt;/code&gt; function when applied to a given &lt;code&gt;$start&lt;/code&gt; node, rather than returning a function item that must then be applied to the chosen $start node. This is hopefully easier for most users to understand, and does not lose any useful functionality.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;$min&lt;/code&gt; parameter of the old function is effectively forced to its default value of 1, and the $max value to its default of infinity.&lt;/p&gt;
&lt;p&gt;Fix #754
Fix #554&lt;/p&gt;
&lt;p&gt;This PR addresses the main points of #554 in making the function correspond more closely to the mathematical (or at least the computer-science) definition of transitive closure. It doesn't implement other ideas in #554, like returning the depth of search alongside the actual closure. That's because I believe in the principle that wherever possible a function should do one thing in as simple a way as possible.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #760 created</title>
   <pubDate>Wed, 18 Oct 2023 08:47:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/760</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-760</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialize functions: consistency&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We should be more ambitious about ensuring consistency when serializing data back to its original representation, and how to achieve it. This is the status quo:&lt;/p&gt;
&lt;p&gt;Format| Serialize Function | Parse Function
--- | --- | ---
&lt;strong&gt;XML&lt;/strong&gt; | &lt;code&gt;fn:serialize($input)&lt;/code&gt; | &lt;code&gt;fn:parse-xml&lt;/code&gt;
&lt;strong&gt;JSON&lt;/strong&gt; | &lt;code&gt;fn:serialize($input, map { 'method': 'json' })&lt;/code&gt; | &lt;code&gt;fn:parse-json&lt;/code&gt;
&lt;strong&gt;JSON&lt;/strong&gt; | &lt;code&gt;fn:xml-to-json($input)&lt;/code&gt; | &lt;code&gt;fn:json-to-xml&lt;/code&gt;
&lt;strong&gt;XHTML&lt;/strong&gt; | &lt;code&gt;fn:serialize($input, map { 'method': 'xhtml' })&lt;/code&gt; | &lt;code&gt;fn:parse-html&lt;/code&gt;
&lt;strong&gt;HTML&lt;/strong&gt; | &lt;code&gt;fn:serialize($input, map { 'method': 'html' })&lt;/code&gt; | &lt;code&gt;fn:parse-html&lt;/code&gt;
&lt;strong&gt;CSV&lt;/strong&gt; | &lt;em&gt;still missing&lt;/em&gt; | &lt;code&gt;fn:parse-csv&lt;/code&gt; and variants&lt;/p&gt;
&lt;p&gt;In BaseX, the XML created by &lt;code&gt;fn:json-to-xml&lt;/code&gt; can be serialized back to JSON as follows (related: #759):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;serialize(
  &amp;lt;map xmlns="http://www.w3.org/2005/xpath-functions"&amp;gt;
    &amp;lt;number key="A"&amp;gt;1&amp;lt;/number&amp;gt;
  &amp;lt;/map&amp;gt;,
  { 'method': 'json', 'json': { 'format': 'basic' }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For CSV, we have introduced a CSV serialization method that supports all CSV flavors we support (see &lt;a href="https://docs.basex.org/main/CSV_Functions"&gt;CSV Functions&lt;/a&gt; for more details):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;serialize(
  &amp;lt;map xmlns="http://www.w3.org/2005/xpath-functions"&amp;gt;
    &amp;lt;number key="A"&amp;gt;1&amp;lt;/number&amp;gt;
  &amp;lt;/map&amp;gt;,
  { 'method': 'csv', 'csv': { 'format': 'direct' }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Related (parse functions): #748&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #759 created</title>
   <pubDate>Wed, 18 Oct 2023 08:41:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/759</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-759</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization: JSON Parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have more and more serialization parameters that are specific to JSON (related: #530, #756, #576, #641). It won’t get better with each new option we add, so maybe it’s time to introduce a custom serialization parameter for JSON (and possibly other methods):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;serialize(
  map { "abc": 123 },
  map { 'method': 'json', 'json': map { 'escape-solidus': true(), 'number-format':'#' }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to be able to use output options in the XQuery prolog, we additionally need to define a syntax for serializing the options to a single string:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare namespace output = 'http://www.w3.org/2010/xslt-xquery-serialization';
declare option output:method 'json';
declare option output:json 'escape-solidus=yes,number-format=#';
map { "abc": 123 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both suggestions are inspired by our own implementation; we use it for our custom JSON and CSV options.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #706 closed</title>
   <pubDate>Wed, 18 Oct 2023 06:53:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/706</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-706</guid>
   <description>&lt;div&gt;&lt;p&gt;FLWOR: for member $m1 in $a1, member $m2 in $a2&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #752 closed</title>
   <pubDate>Wed, 18 Oct 2023 06:53:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/752</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-752</guid>
   <description>&lt;div&gt;&lt;p&gt;706: Fix "for member" grammar problems&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #750 closed</title>
   <pubDate>Wed, 18 Oct 2023 06:45:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/750</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-750</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:mode/@as and built-in template rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #751 closed</title>
   <pubDate>Wed, 18 Oct 2023 06:45:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/751</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-751</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-048-01: xsl:mode/@as with built-in templates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #740 closed</title>
   <pubDate>Wed, 18 Oct 2023 06:32:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/740</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-740</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-047-01: Rename break-when to split-when, plus minor editorial cleanup&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #758 created</title>
   <pubDate>Wed, 18 Oct 2023 03:56:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/758</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-758</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO UCA keyword strength, quaternary setting&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the XQFO specs, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#uca-collations"&gt;5.3.3&lt;/a&gt;, the description of keyword &lt;code&gt;strength&lt;/code&gt;, option &lt;code&gt;quaternary&lt;/code&gt;, is I think confusing/misleading:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;quaternary considers spaces and punctuation that would otherwise be ignored (for example &lt;code&gt;data-base&lt;/code&gt;=&lt;code&gt;database&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I propose the following:&lt;/p&gt;
&lt;p&gt;"quaternary always considers as significant spaces and punctuation (data-base≠database; if &lt;code&gt;maxVariable&lt;/code&gt; is &lt;code&gt;punct&lt;/code&gt; or higher and &lt;code&gt;alternate&lt;/code&gt; is not &lt;code&gt;non-ignorable&lt;/code&gt;, lower strengths will treat data-base=database)."&lt;/p&gt;
&lt;p&gt;That's a lot more words, but I think more accurate. And it may help the reader become familiar with the other two keywords.&lt;/p&gt;
&lt;p&gt;Editors' input is welcome.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 050 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 17 Oct 2023 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/10-17</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-10-17</guid>
</item><item>
   <title>Issue #757 created</title>
   <pubDate>Tue, 17 Oct 2023 16:24:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/757</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-757</guid>
   <description>&lt;div&gt;&lt;p&gt;Function families&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We talked on the call today about the tension between defining multiple simple functions focussed on one task, and a small number of omnibus functions that have many different options.&lt;/p&gt;
&lt;p&gt;I think we would all agree that multiple simple functions would be the better choice except for the problem that they all end up going into a single global namespace. So the question becomes, how can we better partition the name-space (using the term deliberately with a hyphen).&lt;/p&gt;
&lt;p&gt;We're reluctant to use the namespace mechanism to partition our function library because namespaces are cumbersome and clutter the code with lots of boilerplate; declaring namespaces for binding function libraries also has side-effects for example on the semantics of element constructors.&lt;/p&gt;
&lt;p&gt;One approach would be to build on the idea that @dnovatchev presented of using maps containing anonymous functions, so for example &lt;code&gt;csv()?parse()&lt;/code&gt; would first call fn:csv() to load a family (or library) of functions, of which one is then selected for execution. This works, but I don't think it's a perfect solution; for example static analysis becomes a lot more difficult, and we don't get the benefits of default parameters and keyword arguments.&lt;/p&gt;
&lt;p&gt;Most languages use hierarchic names with "." as a separator. Although XML names allow "." as a regular character, none of our built-in function names currently use it as such. So it would be entirely possible to adopt a convention where names like csv.parse() etc are used to name functions in a function family referred to as "csv". This wouldn't by itself require any language changes.&lt;/p&gt;
&lt;p&gt;But if we adopted this convention, we could build on it to provide usability tweaks that make a large function library easier to manage. For example, we could put the math functions into the fn namespace with names like &lt;code&gt;fn:math.sin(x)&lt;/code&gt;, and then provide a way of binding a namespace prefix to a subtree of the fn namespace, so math:sin becomes a synonym for fn:math.sin(). The immediate benefit is that the namespace prefix doesn't need to be declared unless people want to use it. We could also then consider defining an algorithm for searching the fn namespace for abbreviated names such as sin(x), perhaps with some form of "import functions" declaration that says which subtrees of the fn namespace are to be searched.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #741 closed</title>
   <pubDate>Tue, 17 Oct 2023 16:20:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/741</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-741</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-048-03: Fix copy and paste errors in describing type patterns&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #739 closed</title>
   <pubDate>Tue, 17 Oct 2023 16:18:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/739</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-739</guid>
   <description>&lt;div&gt;&lt;p&gt;Apply review comment changes to the HTML DOM XDM mapping.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #618 closed</title>
   <pubDate>Tue, 17 Oct 2023 15:49:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/618</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-618</guid>
   <description>&lt;div&gt;&lt;p&gt;Symmetry: fn:html-doc, fn:csv-doc&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #756 created</title>
   <pubDate>Tue, 17 Oct 2023 14:39:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/756</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-756</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON serialization - number formatting&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We get a lot of complaints about the use of exponential notation when formatting large numbers with the JSON serializer.&lt;/p&gt;
&lt;p&gt;I propose adding an option such as number-format="picture" to control this, where the picture is a subset of what is allowed for format-number().&lt;/p&gt;
&lt;p&gt;And perhaps we should bring &lt;code&gt;xml-to-json()&lt;/code&gt; into line. The current capability of providing a callback function is more powerful, but difficult to align with serialization.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #131 closed</title>
   <pubDate>Tue, 17 Oct 2023 11:16:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/131</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-131</guid>
   <description>&lt;div&gt;&lt;p&gt;Expression for binding the Context Value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #755 created</title>
   <pubDate>Tue, 17 Oct 2023 11:15:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/755</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-755</guid>
   <description>&lt;div&gt;&lt;p&gt;with expression; chaining and concatenation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Outdated:&lt;/strong&gt; See remaining discussion.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;We have no expression yet to bind a value to the context value. Such an expression would be useful, among other things, to extend the focus function to sequences (&lt;code&gt;fn { . }&lt;/code&gt;, see #129).&lt;/p&gt;
&lt;p&gt;Here are 3 possible constructs for that, ordered by my personal preference:&lt;/p&gt;
&lt;h3&gt;1. Value Map Expression&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;ValueExpr      ::=  ValidateExpr | ExtensionExpr | ValueMapExpr
ValueMapExpr   ::=  SimpleMapExpr ("~" SimpleMapExpr)*
SimpleMapExpr  ::=  PathExpr ("!" PathExpr)*

(: Example :)
//flower ~ (count(.) || ' flowers: ' || string-join(name, ', '))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expression would be similar to the simple map expression (which we could rename to item map expression). The following equivalents would then exist for simple FLWOR expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $i in (1 to 5) return string($i)  ≍  (1 to 5) ! string(.)
let $i := (1 to 5) return count($i)   ≍  (1 to 5) ~ count(.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fn { E }&lt;/code&gt; could be rewritten to &lt;code&gt;fn($c) { $c ~ E }&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;2. Context Value Declaration&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;ContextExpr  ::=  "context" "{" Expr "}" EnclosedExpr

(: Example :)
context { //flower } {
  count(.) || ' flowers: ' || string-join(name, ', ')
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of the first expression defines the context value, the second expression can reference the context.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn { E }&lt;/code&gt; could be rewritten to &lt;code&gt;fn($c) { context { $c } { E } }&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;3. Enhanced FLWOR expression (for the sake of completion)&lt;/h3&gt;
&lt;p&gt;Similar to variables, the dot could be used to bind and reference the context:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;LetBinding  ::=  ("." | ("$" VarName)) TypeDeclaration? ":=" ExprSingle
ForBinding  ::=  ("." | ("$" VarName)) TypeDeclaration? AllowingEmpty? PositionalVar? "in" ExprSingle

(: Example :)
let . := //flower
return count(.) || ' flowers: ' || string-join(name, ', ')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fn { E }&lt;/code&gt; could be rewritten to &lt;code&gt;fn($c) { let . := $c return E }&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Assessment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The first solution looks most appealing to me. I like the analogy with the existing syntax for single items.&lt;/li&gt;
&lt;li&gt;We could choose the second solution if we believe that the expression will be rarely used.&lt;/li&gt;
&lt;li&gt;I‘ve backed away from the third solution; I think it would be too pervasive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #754 created</title>
   <pubDate>Tue, 17 Oct 2023 07:22:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/754</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-754</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:transitive-closure: signature; remarks; too specific?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have problems grasping why &lt;code&gt;fn:transitive-closure&lt;/code&gt; returns a function. Wouldn’t it be more consistent with the remaining function set, and easier, to pass on the input as the first argument and directly create the result?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:transitive-closure(
  $node  as node(),
  $step  as function(node()) as node()*,	
  $min   as xs:nonNegativeInteger?       := 1,
  $max   as xs:positiveInteger?          := ()
) as node()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would also be easier then to use the function within chains:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;$nodes =!&amp;gt; transitive-closure(fn { * }) =&amp;gt; count()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #744 closed</title>
   <pubDate>Mon, 16 Oct 2023 14:32:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/744</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-744</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO Examples: minor fixes, formatting&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #753 created</title>
   <pubDate>Mon, 16 Oct 2023 14:05:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/753</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-753</guid>
   <description>&lt;div&gt;&lt;p&gt;65: Allow xmlns="xxx" to NOT change the default namespace for NameTests&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix issue #65. Basically, fix the bug whereby &lt;code&gt;xmlns="xxx"&lt;/code&gt; changes the default namespace for element NameTests, while retaining bug-compatibility.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 050 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 16 Oct 2023 12:55:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/10-17</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-10-17</guid>
</item><item>
   <title>Issue #649 closed</title>
   <pubDate>Mon, 16 Oct 2023 12:33:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/649</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-649</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:fallback&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #650 closed</title>
   <pubDate>Mon, 16 Oct 2023 12:33:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/650</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-650</guid>
   <description>&lt;div&gt;&lt;p&gt;649: fix an xsl:fallback problem&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #752 created</title>
   <pubDate>Mon, 16 Oct 2023 09:21:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/752</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-752</guid>
   <description>&lt;div&gt;&lt;p&gt;706: Fix "for member" grammar problems&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #706&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #751 created</title>
   <pubDate>Mon, 16 Oct 2023 06:41:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/751</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-751</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-048-01: xsl:mode/@as with built-in templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #750.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #750 created</title>
   <pubDate>Sun, 15 Oct 2023 22:56:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/750</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-750</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:mode/@as and built-in template rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See ACTION QT4CG-048-01&lt;/p&gt;
&lt;p&gt;The question arose, if an xsl:mode declaration specifies an expected type in @as, then all template rules in that mode are expected/required to deliver a value conforming to that type. But what about the default/fallback template rules? Surely they need to deliver a value of that type as well?&lt;/p&gt;
&lt;p&gt;For example, suppose the mode specifies as="xs:boolean". Regardless of the value of &lt;code&gt;xsl:on-no-match&lt;/code&gt;, none of the built-in template rules is going to deliver a boolean. You're expecting a boolean result from xsl:apply-templates, and if none of the template rules match, you're going to get something other than a boolean.&lt;/p&gt;
&lt;p&gt;I think the answer is to say that you get a type error if the built-in template rule for the mode returns a value that's not of the required type.&lt;/p&gt;
&lt;p&gt;I don't think this error should ever be reported statically, because the compiler has no way of knowing whether the set of explicit template rules is sufficient to cover all cases that will actually arise in source documents.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #571 closed</title>
   <pubDate>Sun, 15 Oct 2023 22:29:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/571</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-571</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: xsl:for-each-group/@break-when&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #749 created</title>
   <pubDate>Sun, 15 Oct 2023 20:24:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/749</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-749</guid>
   <description>&lt;div&gt;&lt;p&gt;653: Add string literals E".." and L".." to control entity expansion&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Allows for expressions interoperable between XPath and XQuery. Fix #653.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #748 created</title>
   <pubDate>Sun, 15 Oct 2023 17:40:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/748</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-748</guid>
   <description>&lt;div&gt;&lt;p&gt;Parse functions: consistency&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Updated (31-01-2025):&lt;/strong&gt; Aligned with latest XQFO spec.&lt;/p&gt;
&lt;p&gt;The functions for parsing input have been defined by different people, and the current state is quite inconsistent:&lt;/p&gt;
&lt;p&gt;Function | Parameters
--- | ---
&lt;code&gt;fn:parse-xml&lt;/code&gt; | &lt;code&gt;$value as xs:string?, $options as map(*)?&lt;/code&gt;
&lt;code&gt;fn:doc&lt;/code&gt; | &lt;code&gt;$source as xs:string?&lt;/code&gt;
&lt;code&gt;fn:parse-json&lt;/code&gt; | &lt;code&gt;$value as xs:string?, $options as map(*)?&lt;/code&gt;
&lt;code&gt;fn:json-doc&lt;/code&gt; | &lt;code&gt;$source as xs:string?, $options as map(*)?&lt;/code&gt;
&lt;code&gt;fn:parse-html&lt;/code&gt; | &lt;code&gt;$html as (xs:string \| xs:hexBinary \| xs:base64Binary)?, $options as map(*)?&lt;/code&gt;
&lt;code&gt;fn:parse-csv&lt;/code&gt; | &lt;code&gt;$csv as xs:string?, $options as map(*)?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I believe there’s some need to unify the functions. We should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add &lt;code&gt;fn:csv-doc($source, $options)&lt;/code&gt; and &lt;code&gt;fn:html-doc($source, $options)&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;rename the argument of all &lt;code&gt;fn:parse-...&lt;/code&gt; functions to &lt;code&gt;$value&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;enhance all &lt;code&gt;fn:parse-...&lt;/code&gt; functions to also accept binaries, and&lt;/li&gt;
&lt;li&gt;always return an empty sequence if the source/input argument is empty.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See #1021 for &lt;code&gt;fn:doc&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #747 created</title>
   <pubDate>Sun, 15 Oct 2023 09:27:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/747</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-747</guid>
   <description>&lt;div&gt;&lt;p&gt;QName literals&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's quite common to want to write a constant QName; I found myself doing this a lot, for example, in examples and test cases for the &lt;code&gt;elements-to-maps()&lt;/code&gt; function. It's clumsy having to call &lt;code&gt;xs:QName()&lt;/code&gt; or &lt;code&gt;fn:QName()&lt;/code&gt; or &lt;code&gt;parse-QName()&lt;/code&gt; for this purpose. It's particularly clumsy with map constructors where you want to write many QNames.&lt;/p&gt;
&lt;p&gt;I propose we introduce the syntax &lt;code&gt;Q"prefix:local"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The quotes can be either single or double; the prefix is optional. If there is no prefix, the result is a no-namespace QName.&lt;/p&gt;
&lt;p&gt;The prefix (if present) must be bound to a namespace in the static context.&lt;/p&gt;
&lt;p&gt;Character and entity references are not allowed.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;Q{uri}local&lt;/code&gt; is a NameTest, not a QName literal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #746 created</title>
   <pubDate>Sat, 14 Oct 2023 18:16:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/746</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-746</guid>
   <description>&lt;div&gt;&lt;p&gt;break-when -&amp;gt; split-when in fn:partition&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We decided to rename &lt;code&gt;xsl:for-each-group/@break-when&lt;/code&gt; as &lt;code&gt;@split-when&lt;/code&gt;. We should make the same change to the name of the second argument of &lt;code&gt;fn:partition&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #745 created</title>
   <pubDate>Thu, 12 Oct 2023 11:21:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/745</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-745</guid>
   <description>&lt;div&gt;&lt;p&gt;Support for inline (anonymous) xslt functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose adding support for inline xslt functions.&lt;/p&gt;
&lt;p&gt;Whilst XPath supports this, Xpath functions are limited in what they can do, and how "look" e.g. returning newly constructed elements isnt possible without parse-xml-fragment.&lt;/p&gt;
&lt;p&gt;I would suggest the syntax would be basically the same as for xsl:function except with the name omitted, e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;xsl:template name="apply-function" as="xs:integer"&amp;gt;
        &amp;lt;xsl:param name="input" as="xs:integer"/&amp;gt;
        &amp;lt;xsl:param name="function" as="function(xs:integer) as xs:integer"/&amp;gt;
        &amp;lt;xsl:sequence select="$function($input)"/&amp;gt;
    &amp;lt;/xsl:template&amp;gt;

`    &amp;lt;xsl:template ....&amp;gt;
        &amp;lt;xsl:call-template name="apply-function"&amp;gt;
            &amp;lt;xsl:with-param name="input" select="1"/&amp;gt;
            &amp;lt;xsl:with-param name="function"&amp;gt;
                &amp;lt;xsl:function as="xs:integer"&amp;gt;
                    &amp;lt;xsl:param name="value" as="xs:integer"/&amp;gt;
                    &amp;lt;result&amp;gt;
                        &amp;lt;xsl:sequence select="$value * 2"/&amp;gt;
                    &amp;lt;/result&amp;gt;
                &amp;lt;/xsl:function&amp;gt;
            &amp;lt;/xsl:with-param&amp;gt;
        &amp;lt;/xsl:call-template&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;benefits&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;less syntactic "noise" of named functions&lt;/li&gt;
&lt;li&gt;the ability to embed xslt functions inline inside maps (and other data types)&lt;/li&gt;
&lt;li&gt;functional parity with xpath (and more)&lt;/li&gt;
&lt;li&gt;natural generalisation to local function proposal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;alternatives&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use reference to explicitly named XSLT function&lt;/li&gt;
&lt;li&gt;use XPath (though problematic when constructing new nodes)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #744 created</title>
   <pubDate>Wed, 11 Oct 2023 11:48:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/744</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-744</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO Examples: minor fixes, formatting&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Editorial: Some XQuery equivalents were buggy, and the formatting was unified.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #743 created</title>
   <pubDate>Tue, 10 Oct 2023 23:33:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/743</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-743</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend enumeration types to allow values other than strings&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In reviewing and accepting the spec for enumeration types, it was suggested that it might be useful to allow values other than strings.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There's a difficulty in that not all atomic values can be represented by literals. We have the same problem with function annotations; perhaps we need to bite the bullet and define some kind of "constant atomic expression" construct.&lt;/li&gt;
&lt;li&gt;Aside from that, there don't seem to be any major obstacles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We change&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An EnumerationType has a value space consisting of a set of xs:string values. When matching strings against an enumeration type, strings are always compared using the Unicode codepoint collation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An EnumerationType has a value space consisting of a set of atomic values. When matching values against an enumeration type, values are always compared using the fn:atomic-compare() function (as used for comparing map keys).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The subtyping rules (newly defined in terms of unions of singleton enumeration sets) seem to work in their current form, without change. &lt;code&gt;enum("red", "green")&lt;/code&gt; is still a subtype of &lt;code&gt;xs:string&lt;/code&gt;, because all the enumerated values are instances of &lt;code&gt;xs:string&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 049 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 10 Oct 2023 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/10-10</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-10-10</guid>
</item><item>
   <title>Issue #742 created</title>
   <pubDate>Tue, 10 Oct 2023 16:30:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/742</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-742</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:function-library: keep, drop, or refine?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The draft XSLT 4.0 specification (§5.3.2) proposes a new declaration xsl:function-library as a solution to the problem of having to qualify all function names except those in the core namespace. We have not reviewed this proposal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #688 closed</title>
   <pubDate>Tue, 10 Oct 2023 16:08:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/688</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-688</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion rules for union types and enumeration types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #691 closed</title>
   <pubDate>Tue, 10 Oct 2023 16:08:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/691</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-691</guid>
   <description>&lt;div&gt;&lt;p&gt;688 Semantics of local union types, enumeration types, etc&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #372 closed</title>
   <pubDate>Tue, 10 Oct 2023 16:07:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/372</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-372</guid>
   <description>&lt;div&gt;&lt;p&gt;Separate default namespace for elements from the default namespace for types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #715 closed</title>
   <pubDate>Tue, 10 Oct 2023 16:07:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/715</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-715</guid>
   <description>&lt;div&gt;&lt;p&gt;372 Rollback the default namespace changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #725 closed</title>
   <pubDate>Tue, 10 Oct 2023 16:06:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/725</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-725</guid>
   <description>&lt;div&gt;&lt;p&gt;Clarification to load-xquery-module&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #727 closed</title>
   <pubDate>Tue, 10 Oct 2023 16:06:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/727</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-727</guid>
   <description>&lt;div&gt;&lt;p&gt;725 Add clarification note for load-xquery-module&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #52 closed</title>
   <pubDate>Tue, 10 Oct 2023 16:06:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/52</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-52</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow record(*) based RecordTests&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #728 closed</title>
   <pubDate>Tue, 10 Oct 2023 16:06:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/728</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-728</guid>
   <description>&lt;div&gt;&lt;p&gt;52 Allow record(*)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #731 closed</title>
   <pubDate>Tue, 10 Oct 2023 16:06:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/731</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-731</guid>
   <description>&lt;div&gt;&lt;p&gt;Capturing accumulators: a couple of minor errors/omissions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #732 closed</title>
   <pubDate>Tue, 10 Oct 2023 16:06:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/732</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-732</guid>
   <description>&lt;div&gt;&lt;p&gt;731 Capturing accumulators: Add error conditions, revise streaming rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #741 created</title>
   <pubDate>Tue, 10 Oct 2023 14:16:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/741</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-741</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-048-03: Fix copy and paste errors in describing type patterns&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fulfils Action QT4CG-048-03.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #740 created</title>
   <pubDate>Tue, 10 Oct 2023 12:00:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/740</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-740</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4CG-047-01: Rename break-when to split-when, plus minor editorial cleanup&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fulfils action QT4CG-047-01 : the CG decided to rename break-when as split-when. Also applies a few minor editorial corrections in the same general area.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #739 created</title>
   <pubDate>Tue, 10 Oct 2023 11:56:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/739</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-739</guid>
   <description>&lt;div&gt;&lt;p&gt;Apply review comment changes to the HTML DOM XDM mapping.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 049 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 9 Oct 2023 11:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/10-10</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-10-10</guid>
</item><item>
   <title>Issue #738 created</title>
   <pubDate>Sun, 8 Oct 2023 22:04:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/738</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-738</guid>
   <description>&lt;div&gt;&lt;p&gt;FO: Why is fn:op under section "17.3 Dynamic loading"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;FO: Why is &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-op"&gt;&lt;strong&gt;&lt;code&gt;fn:op&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; under section &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dynamic-loading"&gt;"&lt;strong&gt;17.3 Dynamic loading&lt;/strong&gt;"&lt;/a&gt; ?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Lexical substitution has little, if anything at all, to do with (dynamic) loading. Nothing is loaded from some external resource, as in the case of &lt;strong&gt;&lt;code&gt;fn: load-xquery-module&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;fn:transform&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is nothing dynamic about having a predefined function that has a predefined set of possible values. In fact this could be defined as a strictly/statically defined &lt;strong&gt;&lt;code&gt;map(xs:string, function(item()*, item()*) as item()*)&lt;/code&gt;&lt;/strong&gt; with all allowed possible keys and as their values - the corresponding functions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Taking this into account it is suggested to move &lt;code&gt;fn:op&lt;/code&gt; to a section where it truly belongs. Maybe have in this section also other features of the language that are merely lexical substitution, as for example, function(s) for the creation of type-aliases.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #737 created</title>
   <pubDate>Sat, 7 Oct 2023 22:21:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/737</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-737</guid>
   <description>&lt;div&gt;&lt;p&gt;295: Boost the capability of recursive record types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix issue #295&lt;/p&gt;
&lt;p&gt;The main changes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In place of the special self-reference syntax "..", we now allow recursive use of type aliases, allowing types to be mutually recursive&lt;/li&gt;
&lt;li&gt;We generalise the places that recursive references are allowed, for example the record type used by fn:random-number-generator is now legal&lt;/li&gt;
&lt;li&gt;Subtyping rules for recursive record types are now defined (this was previously a gap in the specification). Acknowledgements to a John Snelson blog post for pointing me in the right direction.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #736 created</title>
   <pubDate>Fri, 6 Oct 2023 21:33:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/736</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-736</guid>
   <description>&lt;div&gt;&lt;p&gt;730: Clarify (and correct) rules for maps as instances of function types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix issue #730&lt;/p&gt;
&lt;p&gt;Note: the issue led to a wide-ranging discussion about possible enhancements to the type system, for example adding types for empty maps and arrays. I have ignored most of this, and have focussed on fixing the issue as raised (arising originally on the test suite), namely the incorrect use of &lt;code&gt;V?&lt;/code&gt; to define a type that allows either an instance of the sequence type V or or an empty sequence.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 048 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Wed, 4 Oct 2023 14:50:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/10-03</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-10-03</guid>
</item><item>
   <title>Issue #735 created</title>
   <pubDate>Mon, 2 Oct 2023 09:21:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/735</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-735</guid>
   <description>&lt;div&gt;&lt;p&gt;Local functions in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that we should add local functions to XSLT: specifically, allowing an &lt;code&gt;xsl:function&lt;/code&gt; declaration to appear within a sequence constructor, declaring a named function that is available for use only within the sequence constructor.&lt;/p&gt;
&lt;p&gt;At present this can be achieved by declaring a local variable bound to an anonymous function, but it's clumsy to have to use completely different syntax for local and global functions, and functions defined in this way cannot be mutually recursive.&lt;/p&gt;
&lt;p&gt;I propose that such functions should shadow any global functions with the same name, in the same way as happens with local variable declarations. I have an open mind as to whether shadowing of functions in reserved namespaces should be allowed.&lt;/p&gt;
&lt;p&gt;The main difficulty is the scoping rules. We don't want the problems Javascript has with "hoisting". I propose that (a) all local function declarations must appear before any instructions (or local variable declarations, but not params) within the sequence constructor, and (b) these function declarations are in-scope throughout the sequence constructor including forwards references from the body of other functions declared earlier within the same sequence constructor.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #734 created</title>
   <pubDate>Sat, 30 Sep 2023 19:15:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/734</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-734</guid>
   <description>&lt;div&gt;&lt;p&gt;517: fn:chain&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Added fn:chain.&lt;/p&gt;
&lt;p&gt;Took much effort to ensure Unix-style line-endings are used.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #733 closed</title>
   <pubDate>Sat, 30 Sep 2023 19:13:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/733</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-733</guid>
   <description>&lt;div&gt;&lt;p&gt;517: fn:chain&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #733 created</title>
   <pubDate>Sat, 30 Sep 2023 02:08:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/733</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-733</guid>
   <description>&lt;div&gt;&lt;p&gt;517: fn:chain&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I added fn:chain, which has been discussed in https://github.com/qt4cg/qtspecs/issues/517&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #732 created</title>
   <pubDate>Fri, 29 Sep 2023 16:55:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/732</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-732</guid>
   <description>&lt;div&gt;&lt;p&gt;731 Capturing accumulators: Add error conditions, revise streaming rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Minor tweaks to the spec for capture=yes accumulator rules.&lt;/p&gt;
&lt;p&gt;Fix #731&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #731 created</title>
   <pubDate>Fri, 29 Sep 2023 15:57:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/731</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-731</guid>
   <description>&lt;div&gt;&lt;p&gt;Capturing accumulators: a couple of minor errors/omissions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Two little things in the spec for capturing accumulators that we agreed last week:&lt;/p&gt;
&lt;p&gt;(a) We should define an error code for use when the capture attribute is present but phase="start".&lt;/p&gt;
&lt;p&gt;(b) The streamability rules are too strict. They say that the select attribute must be motionless or consuming, but this is not necessary, because the select attribute is applied to a snapshot tree, which is instantiated in memory and therefore does not need to be streamable.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 048 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 29 Sep 2023 13:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/10-03</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-10-03</guid>
</item><item>
   <title>Issue #211 closed</title>
   <pubDate>Fri, 29 Sep 2023 12:55:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/211</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-211</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT streaming: capturing accumulators&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #717 closed</title>
   <pubDate>Fri, 29 Sep 2023 12:55:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/717</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-717</guid>
   <description>&lt;div&gt;&lt;p&gt;211: add capturing accumulators to XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #730 created</title>
   <pubDate>Thu, 28 Sep 2023 17:43:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/730</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-730</guid>
   <description>&lt;div&gt;&lt;p&gt;Equivalence of map and function types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It is stated in XPath §3.6.4.2, and probably elsewhere, that&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The function signature of a map matching type map(K, V), treated as a function, is function(xs:anyAtomicType) as V?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But V is a sequence type, not an item type, so you can't just tag a '?' onto the end of it. What is intended here by &lt;code&gt;V?&lt;/code&gt; is a sequence type that is the union of &lt;code&gt;V&lt;/code&gt; and &lt;code&gt;empty-sequence()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #729 created</title>
   <pubDate>Thu, 28 Sep 2023 11:50:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/729</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-729</guid>
   <description>&lt;div&gt;&lt;p&gt;xsi:schemaLocation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specifications (XQuery and XSLT) should say something about the effect of requesting validation on a document that contains &lt;code&gt;xsi:schemaLocation&lt;/code&gt; and/or &lt;code&gt;xsi:noNamespaceSchemaLocation&lt;/code&gt; attributes. At present XQuery says nothing, and XSLT says very little.&lt;/p&gt;
&lt;p&gt;XQuery 3.1 says: &lt;em&gt;A validate expression can be used to validate a document node or an element node with respect to the [in-scope schema definitions], using the schema validation process defined in [[XML Schema 1.0]] or [[XML Schema 1.1]].&lt;/em&gt; This doesn't really answer the question. The "with respect to" phrase could be read as implying that ONLY the in-scope schema definitions are used. Particular problems occur if xsi:schemaLocation refers to a schema document that attempts to override or redefine the schema components that have been statically imported.&lt;/p&gt;
&lt;p&gt;XSLT 3.0 says nothing of interest about what schema (=set of schema components) is used when validation is requested, though it does mention in passing that &lt;code&gt;xsi:schemaLocation&lt;/code&gt; attributes might be interpreted in some way by a schema processor.&lt;/p&gt;
&lt;p&gt;If we look to the behaviour of Saxon as a reference implementation, then we'll quickly find fault. There's a configuration option to control whether &lt;code&gt;xsi:schemaLocation&lt;/code&gt; attributes are considered or ignored; if they are considered, then the schema components referenced are added to a global pool of schema components which are used not only to validate the document in question, but to validate any subsequent documents. We're in the process of redesigning this to do something that makes more sense.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #728 created</title>
   <pubDate>Thu, 28 Sep 2023 11:24:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/728</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-728</guid>
   <description>&lt;div&gt;&lt;p&gt;52 Allow record(*)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #52.
Implements decision made at meeting 046.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #727 created</title>
   <pubDate>Wed, 27 Sep 2023 17:38:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/727</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-727</guid>
   <description>&lt;div&gt;&lt;p&gt;725 Add clarification note for load-xquery-module&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add a note to clarify the behaviour of load-xquery-module.&lt;/p&gt;
&lt;p&gt;Fix #725&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #724 closed</title>
   <pubDate>Wed, 27 Sep 2023 16:13:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/724</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-724</guid>
   <description>&lt;div&gt;&lt;p&gt;PR 717 with merge conflicts resolved&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #723 closed</title>
   <pubDate>Wed, 27 Sep 2023 15:30:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/723</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-723</guid>
   <description>&lt;div&gt;&lt;p&gt;Updated PR for capturing accumulators&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #726 closed</title>
   <pubDate>Wed, 27 Sep 2023 09:41:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/726</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-726</guid>
   <description>&lt;div&gt;&lt;p&gt;PR 723 with merge conflicts resolved&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #726 created</title>
   <pubDate>Wed, 27 Sep 2023 09:22:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/726</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-726</guid>
   <description>&lt;div&gt;&lt;p&gt;PR 723 with merge conflicts resolved&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #725 created</title>
   <pubDate>Wed, 27 Sep 2023 09:14:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/725</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-725</guid>
   <description>&lt;div&gt;&lt;p&gt;Clarification to load-xquery-module&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add a clarification note to load-xquery-module, to correct a misunderstanding by a (very knowledgeable) user: see https://saxonica.plan.io/issues/6209&lt;/p&gt;
&lt;p&gt;The function load-query-module does not modify the static or dynamic context in any way. In particular, the variables and functions that are loaded from the query module are not added to the static or dynamic context of the calling code. They are accessible only via the map that is returned from the function call.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #724 created</title>
   <pubDate>Wed, 27 Sep 2023 08:50:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/724</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-724</guid>
   <description>&lt;div&gt;&lt;p&gt;PR 717 with merge conflicts resolved&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 047 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 26 Sep 2023 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/09-26</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-09-26</guid>
</item><item>
   <title>Issue #722 closed</title>
   <pubDate>Tue, 26 Sep 2023 17:06:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/722</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-722</guid>
   <description>&lt;div&gt;&lt;p&gt;This is a test. This is only a test.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #723 created</title>
   <pubDate>Tue, 26 Sep 2023 16:56:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/723</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-723</guid>
   <description>&lt;div&gt;&lt;p&gt;Updated PR for capturing accumulators&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Updated to take account of comments&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #722 created</title>
   <pubDate>Tue, 26 Sep 2023 16:50:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/722</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-722</guid>
   <description>&lt;div&gt;&lt;p&gt;This is a test. This is only a test.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Had this been a real emergency, we would have fled in terror and you would not have been informed.&lt;/p&gt;
&lt;p&gt;DO NOT MERGE THIS! :-)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #721 closed</title>
   <pubDate>Tue, 26 Sep 2023 16:49:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/721</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-721</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to fix the problem with PRE elements in autodiffs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #721 created</title>
   <pubDate>Tue, 26 Sep 2023 16:48:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/721</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-721</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to fix the problem with PRE elements in autodiffs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Maybe I'm more cleverer today than I was last time I looked into this.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #663 closed</title>
   <pubDate>Tue, 26 Sep 2023 16:13:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/663</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-663</guid>
   <description>&lt;div&gt;&lt;p&gt;Calling xsl:original() with keywords&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #674 closed</title>
   <pubDate>Tue, 26 Sep 2023 16:13:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/674</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-674</guid>
   <description>&lt;div&gt;&lt;p&gt;663: Describe how calls to xsl:original with keywords work&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #570 closed</title>
   <pubDate>Tue, 26 Sep 2023 16:12:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/570</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-570</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: Built-in template rules for maps and arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #718 closed</title>
   <pubDate>Tue, 26 Sep 2023 16:12:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/718</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-718</guid>
   <description>&lt;div&gt;&lt;p&gt;Add on-no-match="shallow-copy-all"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 047 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 25 Sep 2023 10:55:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/09-26</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-09-26</guid>
</item><item>
   <title>Issue #720 created</title>
   <pubDate>Mon, 25 Sep 2023 09:47:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/720</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-720</guid>
   <description>&lt;div&gt;&lt;p&gt;From Records to Objects&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It has become idiomatic to use maps, and record type definitions, to declare a collection of functions; so for example the random-number-generator object offers a "method" &lt;code&gt;next()&lt;/code&gt; that can be called using the syntax &lt;code&gt;$rng?next()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The problem is that it's not possible, within the XPath/XQuery language, to implement such a function with implicit access to the object on which it is invoked. The implementation of the function does not have access to any kind of &lt;code&gt;$this&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;This issue considers how we can move forwards from supporting simple records to introduce object capabilities, in an incremental and compatible way.&lt;/p&gt;
&lt;p&gt;Here are three steps in that direction:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Where a named record type is declared, also create a corresponding constructor function. So if you declare&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;declare item type my:loc as record(longitude as xs:double, latitude as xs:double)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;you also get a constructor function allowing my:loc(180, 180), allowing both positional or keyword arguments corresponding to the field names,&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;p&gt;Allow default values to be defined in the record type, which act as default values for the parameters in the constructor function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow functions that are defined as part of a record type access to a variable $this. The constructor function provides an implicit binding of this variable to the record/map/object that is being instantiated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow self-reference to a named record type (and its constructor function) within the record definition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So you can now do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare type my:counter as record (
   value as xs:integer,
   increment := fn() as my:counter {my:counter($this?value + 1)}
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $x := my:counter(0)
return $x?increment()?value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which returns 1.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #719 created</title>
   <pubDate>Thu, 21 Sep 2023 20:21:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/719</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-719</guid>
   <description>&lt;div&gt;&lt;p&gt;413: Spec for CSV-related functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR contains error fixes (typos, examples that contradicted the spec text), some (hopefully) improved language and one breaking change.&lt;/p&gt;
&lt;p&gt;The current draft uses the type &lt;code&gt;map(xs:integer, xs:string)&lt;/code&gt; for the &lt;code&gt;column-names&lt;/code&gt; option to &lt;code&gt;fn:csv-to-xdm&lt;/code&gt; and &lt;code&gt;fn:csv-to-xml&lt;/code&gt;. This PR flips that to &lt;code&gt;map(xs:string, xs:integer)&lt;/code&gt;. It turns out that the examples were already using this, and it seems to me that having the &lt;code&gt;names&lt;/code&gt; entry in the &lt;code&gt;csv-columns-record&lt;/code&gt; record type be the transposed version of the &lt;code&gt;column-names&lt;/code&gt; option that creates it, rather than be the same thing, is counterproductive.&lt;/p&gt;
&lt;p&gt;I can think of some examples (a CSV split into several chunks, with only the first containing the headers) where being able to feed the &lt;code&gt;names&lt;/code&gt; entry right back into another invocation of &lt;code&gt;fn:csv-to-xdm&lt;/code&gt; would be useful. If nothing else it's confusing and not obvious, or I wouldn't have messed up the examples, and somebody would have noticed during the review process...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #718 created</title>
   <pubDate>Thu, 21 Sep 2023 16:39:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/718</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-718</guid>
   <description>&lt;div&gt;&lt;p&gt;Add on-no-match="shallow-copy-all"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Enable recursive descent transformation with template rules for maps and arrays.&lt;/p&gt;
&lt;p&gt;Fix #570&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #717 created</title>
   <pubDate>Thu, 21 Sep 2023 10:36:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/717</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-717</guid>
   <description>&lt;div&gt;&lt;p&gt;211: add capturing accumulators to XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds the attribute capture="yes" to xsl:accumulator-rule. This has been available as a Saxon extension for some time and makes many accumulators much easier to implement.&lt;/p&gt;
&lt;p&gt;Fix #211&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #716 created</title>
   <pubDate>Wed, 20 Sep 2023 02:34:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/716</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-716</guid>
   <description>&lt;div&gt;&lt;p&gt;Generators in XPath&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;What is a generator?&lt;/h1&gt;
&lt;p&gt;Generators are well known and provided out of the box in many programming languages. Per Wikipedia:&lt;/p&gt;
&lt;p&gt;“In &lt;a href="https://en.wikipedia.org/wiki/Computer_science"&gt;computer science&lt;/a&gt;,  a &lt;strong&gt;generator&lt;/strong&gt; is a &lt;a href="https://en.wikipedia.org/wiki/Subroutine"&gt;routine&lt;/a&gt; that can be used to control the &lt;a href="https://en.wikipedia.org/wiki/Iteration"&gt;iteration&lt;/a&gt; behaviour of a &lt;a href="https://en.wikipedia.org/wiki/Control_flow#Loops"&gt;loop&lt;/a&gt;. All generators are also &lt;a href="https://en.wikipedia.org/wiki/Iterator"&gt;iterators&lt;/a&gt;.&lt;a href="https://en.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-1"&gt;[1]&lt;/a&gt; A generator is very similar to a function that returns an array, in that a generator has parameters, can be called, and generates a sequence of values.
However, instead of building an array containing all the values and returning them all at once, a generator yields the values one at a time, which requires less memory and allows the caller to get started processing the first few values immediately. In short, a generator &lt;em&gt;looks like&lt;/em&gt; a function but &lt;em&gt;behaves like&lt;/em&gt; an &lt;a href="https://en.wikipedia.org/wiki/Iterator"&gt;iterator&lt;/a&gt;.”&lt;/p&gt;
&lt;hr/&gt;
&lt;h1&gt;The goal of this proposal (major use-cases)&lt;/h1&gt;
&lt;p&gt;A generator in XPath should be a tool to easily implement the solutions to the following use-cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Processing a huge collection whose members may not all be needed.&lt;br/&gt;
A generator will produce only the next member of the collection and only on demand basis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handling a collection containing unknown or infinite number of members.
When requested the next member of the collection the generator will always produce it, if the collection still contains any members. It is the responsibility of the caller to issue only the necessary number of requests for the really needed next members.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What is achieved in both cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A (next) member is produced only on request. No time is spent on producing all members of the collection.&lt;/li&gt;
&lt;li&gt;A (next) member is produced only on request. No memory is consumed to store all members of the collection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good problem that is based on these use-cases is to generate a collection of the first N members that have some wanted properties,  and are generated from other collection(s), when it is not known what the size of the original input collections would be in order for the desired number of N members to be discovered.&lt;/p&gt;
&lt;p&gt;For example: &lt;strong&gt;&lt;em&gt;Produce the first 1 000 000 (1M) prime numbers&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Sometimes we may not even know if N such wanted members actually exist, for example: &lt;strong&gt;&lt;em&gt;Produce the first 2 sequences of 28 prime numbers where &lt;a href="https://en.wikipedia.org/wiki/Primes_in_arithmetic_progression#Largest_known_primes_in_AP"&gt;the primes in each of the sequences form an arithmetic progression&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1&gt;The Proposal&lt;/h1&gt;
&lt;p&gt;A generator is defined as (and synonym for):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $generator as record
                   (initialized as xs:boolean,
                    endReached as xs:boolean,
                    getCurrent as function(..) as item()*,
                    moveNext as function(..) as .. ,
                    *  ) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A generator is an extensible &lt;a href="https://qt4cg.org/pr/715/xquery-40/xpath-40.html#id-record-test"&gt;&lt;strong&gt;&lt;em&gt;record&lt;/em&gt;&lt;/strong&gt; &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It has four fixed-named keys, and any other map-keys, as required to hold the internal state of that specific generator.&lt;/p&gt;
&lt;p&gt;Here is the meaning of  the four fixed/named keys:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;initialized&lt;/em&gt;&lt;/strong&gt; is a boolean. When a generator &lt;code&gt;$gen&lt;/code&gt;  is initially instantiated, &lt;code&gt;$gen?initialized&lt;/code&gt; is &lt;code&gt;false()&lt;/code&gt;. Any call to &lt;code&gt;$gen?getCurrent()&lt;/code&gt; raises an error. In order to get the first value of the represented collection, the caller must call &lt;code&gt;$gen?moveNext()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;endReached&lt;/em&gt;&lt;/strong&gt; is a boolean. If after a call to &lt;code&gt;moveNext()&lt;/code&gt; the value of the returned generator's &lt;code&gt;endReached&lt;/code&gt; key is &lt;code&gt;true()&lt;/code&gt; then calling &lt;code&gt;moveNext()&lt;/code&gt; and/or &lt;code&gt;getCurrent()&lt;/code&gt; on this generator raises an error.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;getCurrent&lt;/em&gt;&lt;/strong&gt; is a function of zero arguments. It must only be called if the values of &lt;code&gt;initialized&lt;/code&gt; is &lt;code&gt;true()&lt;/code&gt; and the value of &lt;code&gt;endReached&lt;/code&gt; is &lt;code&gt;false()&lt;/code&gt;, otherwise an error must be raised. This function produces the current member of the collection after the last call to &lt;code&gt;moveNext&lt;/code&gt;, if this call didn't return a generator whose &lt;code&gt;endReached&lt;/code&gt; value was &lt;code&gt;true()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;moveNext&lt;/em&gt;&lt;/strong&gt;  is a function of zero arguments. When called on a generator whose &lt;code&gt;endReached&lt;/code&gt; value is &lt;code&gt;false()&lt;/code&gt; then it produces the next (state of the) generator. including a possibly &lt;code&gt;true()&lt;/code&gt; value of &lt;code&gt;endReached&lt;/code&gt; and if this value is still &lt;code&gt;false()&lt;/code&gt;, then calling &lt;code&gt;getCurrent()&lt;/code&gt; produces the value of the next member of the collection.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Examples of operations on generators&lt;/h1&gt;
&lt;p&gt;The following examples are written in pseudo-code as at the time of writing there was no available implementation of records. And also, the code for recursion in pure XPath makes any such example longer than necessary for grasping its meaning.&lt;/p&gt;
&lt;h2&gt;The Empty Generator&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;emptyGenerator() {
             map{
                 initialized : true(),
                 endReached: true(),
                 getCurrent: function($this as map(*)) {error()},
                 moveNext: function($this as map(*)) {error()}
                }
              }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Take the first N members of the collection&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;take($gen as generator, $n as xs:integer) as generator
{
  let $gen := if(not($gen?initialized)) then $gen?moveNext()
                      else $gen,
      return
         if( $gen?endReached or $n eq 0) then emptyGenerator()
            else map:put($gen, "moveNext", take($gen?moveNext($gen) ), $n -1  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Skip the first N members from the collection&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;skip($gen as generator, $n as xs:integer) as generator
{
  if($n eq 0) then $gen
     else
     {
         let $gen := if(not($gen?initialized)) then $gen?moveNext()
                       else $gen
           return
             if(not($gen?endReached) then skip($gen?moveNext(), $n -1)
               else $gen
     }             
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Subrange of size N starting at the M-th member&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;subrange($gen as generator, $m as xs:integer, $n as xs:integer) as generator
{
  take(skip($gen, $m -1), $n)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Head of a generator&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;head($gen as generator)
{
  take($gen, 1)?getCurrent()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Tail of a generator&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;tail($gen as generator)
{
  skip($gen, 1)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;At index N&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;at($ind as xs:integer)
{
  subrange($ind, 1)?getCurrent()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;For Each&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;for-each($gen as generator, $fun as function(*))
{
   map:put($gen, "getCurrent", function() { $fun($gen?getCurrent()) }  )                              
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;For Each Pair&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;for-each-pair($gen1 as generator, $gen2 as generator, $fun as function(*))
{
   let $gen1 := if(not($gen1?initialized)) then $gen1?moveNext()
                  else $gen1,
       $gen2 := if(not($gen2?initialized)) then $gen2?moveNext()
                  else $gen2,
    return
      if($gen1?endReached or $gen2?endReached) then map:put($gen1, "endReached", true())
        else map:put(map:put($gen1, "getCurrent", function() { $fun($gen1?getCurrent(), $gen2?getCurrent()) } ) ,
                     "moveNext", function() { for-each-pair(skip($gen1, 1), skip($gen2, 1), $fun)}
                    )                             
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Filter&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;filter($gen as generator, $pred as function(item()*) as xs:boolean)
{
     let $getNextGoodValue := function($gen as map(*), $pred as function(item()*) as xs:boolean)
         {
            let $mapResult := iterate-while(
                                            $gen,
                                            function($gen) { not($pred($gen?getCurrent($gen))) },
                                            function($gen) { $gen?moveNext($gen) }
                                            )   
            return $mapResult?getCurrent($mapResult)                     
         },
       $gen := if($gen?initialized) then $gen 
                      else $gen?moveNext($gen)
        return
          map {
               "initialized": true(),
               "endReached":  $gen?endReached,
               "getCurrent": function($this as map(*)) { $getNextGoodValue($this?inputGen, $pred) },
               "moveNext":   function($this as map(*))
                             {    let $nextGoodValue := $getNextGoodValue($this?inputGen?moveNext($this?inputGen), $pred),
                                      $nextGen := iterate-while(
                                                                $this?inputGen?moveNext($this?inputGen),
                                                                function($gen) { not($pred($gen?getCurrent($gen))) },
                                                                function($gen) { $gen?moveNext($gen) }
                                                                )
                                    return
                                      map {
                                            "initialized": $nextGen?initialized,
                                            "endReached":  $nextGen?endReached,
                                            "getCurrent" : function($x) {$nextGoodValue},
                                            "moveNext" :   $this?moveNext,
                                            "inputGen" :   $nextGen
                                           }
                             },
               "inputGen" : $gen
              }
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Here are some other useful functions on generators -- with just their signature and summary&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;concat($gen1 as generator , $gen2 as generator )&lt;/strong&gt; - produces a generator that behaves as &lt;code&gt;$gen1&lt;/code&gt; until &lt;code&gt;$gen1.endReached&lt;/code&gt; becomes &lt;code&gt;true()&lt;/code&gt;,  and then behaves as &lt;code&gt;$gen2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;append($gen as generator, $value as item()*)&lt;/strong&gt; - produces a generator that behaves as &lt;code&gt;$gen&lt;/code&gt; until &lt;code&gt;$gen.endReached&lt;/code&gt; becomes &lt;code&gt;true()&lt;/code&gt;,  and then as a generator that has only the single value &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;prepend($gen as generator, $value as item()*)&lt;/strong&gt; - produces a generator whose first value is &lt;code&gt;value&lt;/code&gt; and then behaves as &lt;code&gt;$gen&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;some($gen as generator) as xs:boolean&lt;/strong&gt; - Produces &lt;code&gt;true()&lt;/code&gt; if &lt;code&gt;$gen&lt;/code&gt; has at least one value, and &lt;code&gt;false()&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;some($gen as generator, $pred as function(item()*) as xs:boolean) as xs:boolean&lt;/strong&gt; - Produces &lt;code&gt;true()&lt;/code&gt; if &lt;code&gt;$gen&lt;/code&gt; has at least one value for which $pred($thisValue) is true(), and &lt;code&gt;false()&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ofType($gen as generator, $type as type)&lt;/strong&gt;  - Produces a new generator from &lt;code&gt;$gen&lt;/code&gt; that contains all values from &lt;code&gt;$gen&lt;/code&gt; of type &lt;code&gt;type&lt;/code&gt; -- for this we need to have added to the language the &lt;strong&gt;type&lt;/strong&gt; object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;skipWhile($gen as generator, $pred as function(item()*) as xs:boolean)&lt;/strong&gt;  - Produces a new generator from &lt;code&gt;$gen&lt;/code&gt; by skipping all starting values for which &lt;code&gt;$pred($theValue)&lt;/code&gt; is &lt;code&gt;true()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;takeWhile($gen as generator, $pred as function(item()*) as xs:boolean)&lt;/strong&gt;  - Produces a new generator from &lt;code&gt;$gen&lt;/code&gt; which contains all starting values of &lt;code&gt;$gen&lt;/code&gt; for which &lt;code&gt;$pred($theValue)&lt;/code&gt; is &lt;code&gt;true()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;toArray($gen as generator)&lt;/strong&gt; - Produces an array that contains all values that are contained in &lt;code&gt;$gen&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;toSequence($gen as generator)&lt;/strong&gt; - Produces a sequence that contains all values that are contained in &lt;code&gt;$gen&lt;/code&gt;. Values of &lt;code&gt;$gen&lt;/code&gt; that are sequences themselves are flattened.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;toMap($gen as generator)&lt;/strong&gt; - If the values in $gen are all key-value pairs, produces a map that contains exactly all the key-value pairs from &lt;code&gt;$gen&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;These and many other useful functions on generators can and should be added to every generator upon construction.&lt;/p&gt;
&lt;p&gt;Thus, it would be good to have an explicit constructor function for a generator:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;     construct-generator($record as 
                               record( initialized as xs:boolean,
                                       endReached as xs:boolean,
                                       getCurrent as function(..) as item()*,
                                       moveNext as function(..) as .. ,
                                      )
                         ) as generator
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #715 created</title>
   <pubDate>Tue, 19 Sep 2023 23:12:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/715</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-715</guid>
   <description>&lt;div&gt;&lt;p&gt;372 Rollback the default namespace changes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Implements the CG decision to roll back the changes that introduced two separate default namespaces for elements and types.&lt;/p&gt;
&lt;p&gt;Fix #372&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #714 created</title>
   <pubDate>Tue, 19 Sep 2023 21:19:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/714</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-714</guid>
   <description>&lt;div&gt;&lt;p&gt;Function annotations in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that the following attributes on an &lt;code&gt;xsl:function&lt;/code&gt; should be accessible as annotations, for example in a call on function-annotations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;visibility&lt;/li&gt;
&lt;li&gt;streamability&lt;/li&gt;
&lt;li&gt;new-each-time&lt;/li&gt;
&lt;li&gt;cache&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;plus any extension attribute in a user-defined namespace, for example &lt;code&gt;&amp;lt;xsl:function saxon:debug="yes"/&amp;gt;&lt;/code&gt; should have the annotation &lt;code&gt;%saxon:debug("yes")&lt;/code&gt;. The value is always a single string, the actual attribute value as written.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #703 closed</title>
   <pubDate>Tue, 19 Sep 2023 16:26:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/703</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-703</guid>
   <description>&lt;div&gt;&lt;p&gt;129 (1): XPath and XQuery changes for introduction of context value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #701 closed</title>
   <pubDate>Tue, 19 Sep 2023 16:26:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/701</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-701</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:concat: Support for 0 or more arguments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #702 closed</title>
   <pubDate>Tue, 19 Sep 2023 16:25:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/702</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-702</guid>
   <description>&lt;div&gt;&lt;p&gt;701: fn:concat: Support for 0 or more arguments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #696 closed</title>
   <pubDate>Tue, 19 Sep 2023 16:25:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/696</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-696</guid>
   <description>&lt;div&gt;&lt;p&gt;566: Rework query parameters on build-uri/parse-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #694 closed</title>
   <pubDate>Tue, 19 Sep 2023 16:23:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/694</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-694</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO minor edits, with new examples and notes, 2 through 4.6&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #687 closed</title>
   <pubDate>Tue, 19 Sep 2023 16:23:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/687</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-687</guid>
   <description>&lt;div&gt;&lt;p&gt;Constructor functions for user-defined types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #690 closed</title>
   <pubDate>Tue, 19 Sep 2023 16:23:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/690</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-690</guid>
   <description>&lt;div&gt;&lt;p&gt;687 Clarify constructor functions for user-defined types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #668 closed</title>
   <pubDate>Tue, 19 Sep 2023 16:23:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/668</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-668</guid>
   <description>&lt;div&gt;&lt;p&gt;Definition of HTML case-insensitive collation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #680 closed</title>
   <pubDate>Tue, 19 Sep 2023 16:23:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/680</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-680</guid>
   <description>&lt;div&gt;&lt;p&gt;668 define case insensitive collation normatively&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #713 created</title>
   <pubDate>Tue, 19 Sep 2023 16:22:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/713</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-713</guid>
   <description>&lt;div&gt;&lt;p&gt;Annotations: Editorial notes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Copied from https://github.com/qt4cg/qtspecs/pull/710#pullrequestreview-1630129066:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For avoidance of doubt, we should say in XQuery 4.6.2.4 (Named Function References) that the function created by a named function reference has its annotations taken from the function definition. There are other places where we are not explicit about the annotations of a function item, for example with partial function application. We should add a note that in XPath and XSLT, it is not possible to define function annotations, so this function will always return an empty result. (However, we should consider giving user-defined functions in XSLT annotations based on their attributes, e.g. visibility and streamability).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…and my complementary note in the PR thread:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I decided to merge the PR without changes, and not add the reference to XPath and XSLT, because the function may also return results for XQuery functions imported via fn:load-xquery-module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Additional notes from today’s meeting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For annotations without values, we could assign &lt;code&gt;true()&lt;/code&gt; as a default value.&lt;/li&gt;
&lt;li&gt;Examples could be added to &lt;code&gt;fn:function-annotations&lt;/code&gt; to demonstrate how to check for annotations without values (or with values whose EBV is &lt;code&gt;false()&lt;/code&gt;: &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;""&lt;/code&gt;, etc.).&lt;/li&gt;
&lt;li&gt;Dimitre suggested restructuring the spec for features that are not available in XPath.&lt;/li&gt;
&lt;li&gt;Maybe annotations would also be helpful in XPath.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free everyone to add more comments.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #36 closed</title>
   <pubDate>Tue, 19 Sep 2023 16:12:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/36</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-36</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:function-annotations (Allow support for user-defined annotations)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #710 closed</title>
   <pubDate>Tue, 19 Sep 2023 16:12:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/710</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-710</guid>
   <description>&lt;div&gt;&lt;p&gt;36: fn:function-annotations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #712 created</title>
   <pubDate>Tue, 19 Sep 2023 13:50:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/712</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-712</guid>
   <description>&lt;div&gt;&lt;p&gt;array:sort: to be aligned with fn:sort&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Related: #623. And an editorial note:&lt;/p&gt;
&lt;p&gt;https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-sort&lt;/p&gt;
&lt;p&gt;I think the type for the 3rd argument of &lt;code&gt;fn:sort&lt;/code&gt;…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$key  as (function(item()) as xs:anyAtomicType*)+  := fn:data#1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…should be changed to zero-or-more:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$key  as (function(item()) as xs:anyAtomicType*)*  := fn:data#1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While it will be rare to encounter queries with &lt;code&gt;key := ()&lt;/code&gt;, there seems to be no urgent reason to enforce at least one sort key. The change would also be in alignment with the corresponding rule (with the current signature, &lt;code&gt;$key&lt;/code&gt; cannot be empty), which says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The number of sort key definitions is determined by the number of function items supplied in the &lt;code&gt;$key&lt;/code&gt; argument. If the argument is absent or empty, the default is a single sort key definition using the function &lt;code&gt;data#1&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #711 created</title>
   <pubDate>Tue, 19 Sep 2023 09:22:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/711</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-711</guid>
   <description>&lt;div&gt;&lt;p&gt;Using annotations for navigation of JSON trees&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue develops ideas presented in issue #596, which itself is a continuation of ideas raised in issue #341, issue #350, and elsewhere. It's related to the requirements presented in issue #262 and issue #297.&lt;/p&gt;
&lt;p&gt;Firstly, I propose a change to the data model so that annotations can be attached to any item [or perhaps any value?], not only to a function. The annotations are a map of type &lt;code&gt;map{xs:QName, item()*}&lt;/code&gt;. Some general principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Annotations on an item do not affect the result of any operation on that item unless otherwise specified.&lt;/li&gt;
&lt;li&gt;Operations that are described as returning a result that contains items that are present in one of the operation's operands retain the annotations of those items, unless otherwise specified. (So for example $a[C] returns a sequence of items from $a in which the annotations are preserved).&lt;/li&gt;
&lt;li&gt;Operations that construct "new" items (for example $a + $b) return an item with no annotations, unless otherwise specified.&lt;/li&gt;
&lt;li&gt;The function &lt;code&gt;annotations($x)&lt;/code&gt; (replacing &lt;code&gt;function-annotations($x)&lt;/code&gt;) returns the annotations of an item.&lt;/li&gt;
&lt;li&gt;The function annotate($x, key, value) returns a "clone" of $x with an additional annotation. (A clone of an item differs from the original only in having different annotations. All operations other than annotation-sensitive operations produce exactly the same result on the clone and the original - including tests for node identity.)&lt;/li&gt;
&lt;li&gt;To avoid confusion, the term "type annotation" is replaced by "type label".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Secondly, we use annotations to aid navigation of JTrees (a term I use to describe trees of arrays and maps such as might be produced by parsing JSON).&lt;/p&gt;
&lt;p&gt;We introduce a component of the static context &lt;code&gt;tracked=true|false&lt;/code&gt;, defaulting to false. The construct &lt;code&gt;tracked{expression}&lt;/code&gt; evaluates an expression and its subexpressions in tracked mode. In tracked mode any operator or function that performs selection within an array or map (for example the lookup operator, the &lt;code&gt;map:get&lt;/code&gt; and &lt;code&gt;array:get&lt;/code&gt; function, using the map/array as a function item, or the &lt;code&gt;array:head()&lt;/code&gt; and &lt;code&gt;array:foot()&lt;/code&gt; and &lt;code&gt;map:find()&lt;/code&gt; functions) annotates the items in its result with two properties: "container" whose value is the map or array from which the item was selected, and "key" which is the key or array index of the selected value within that container. The effect is that if an item was found in a JTree using a tracked expression, the annotations on the resulting item can be used in effect to navigate upwards within the tree that was searched.&lt;/p&gt;
&lt;p&gt;Note that this is not a new idea: in effect, the result of a tracked selection is a &lt;strong&gt;zipper&lt;/strong&gt; data structure, as described in https://en.wikipedia.org/wiki/Zipper_(data_structure).&lt;/p&gt;
&lt;p&gt;A further exploitation of the idea allows us to introduce deep update of JTree structures. For example, &lt;code&gt;modify(root:=$a, selection:=fn{?x?y?z,} change:=fn{.+1})&lt;/code&gt; can evaluate the &lt;code&gt;selection&lt;/code&gt; argument in tracked mode, apply the &lt;code&gt;change&lt;/code&gt; function to the resulting items, and then navigate back using the &lt;code&gt;container&lt;/code&gt; annotation to create modified versions of all traversed containing JTrees, eventually returning a modified version of the &lt;code&gt;root&lt;/code&gt; tree.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 046 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 18 Sep 2023 14:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/09-19</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-09-19</guid>
</item><item>
   <title>Issue #673 closed</title>
   <pubDate>Mon, 18 Sep 2023 13:49:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/673</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-673</guid>
   <description>&lt;div&gt;&lt;p&gt;HTML namespace changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #710 created</title>
   <pubDate>Sun, 17 Sep 2023 21:08:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/710</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-710</guid>
   <description>&lt;div&gt;&lt;p&gt;36: fn:function-annotations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@michaelhkay Again, some hints might need to be added for XPath (?).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #709 created</title>
   <pubDate>Sun, 17 Sep 2023 18:24:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/709</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-709</guid>
   <description>&lt;div&gt;&lt;p&gt;(Un)Checked Evaluation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Based on https://github.com/qt4cg/qtspecs/issues/707#issuecomment-1721596055 and the comments following in that thread:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I've been thinking recently about adding &lt;code&gt;checked{}&lt;/code&gt; and &lt;code&gt;unchecked{}&lt;/code&gt; modes. For example&lt;/p&gt;
&lt;p&gt;&amp;lt;xsl:apply-templates select="checked{.//item}"/&amp;gt;&lt;/p&gt;
&lt;p&gt;would throw an error if there are no items. The mode of execution would propagate downwards, so &lt;code&gt;checked{a/b/c/d}&lt;/code&gt; would be able to tell you that a &lt;code&gt;b&lt;/code&gt; was found, but it had no &lt;code&gt;c&lt;/code&gt; children.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;checked{item[22]}&lt;/code&gt; would have the effect of making sequences behave more like arrays, with bound checking; conversely &lt;code&gt;unchecked{item?22}&lt;/code&gt; would return an empty sequence instead of throwing an error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #708 created</title>
   <pubDate>Sun, 17 Sep 2023 08:56:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/708</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-708</guid>
   <description>&lt;div&gt;&lt;p&gt;Toward a design for generators&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;The motivations for this are to explore the creation of sequences where the next item in the sequence is determined by evaluating a function on the current state of a system. These sequence generators have an initial starting value and state. They can also stop when some condition is met.&lt;/p&gt;
&lt;p&gt;The motivating example here is the &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-random-number-generator"&gt;fn:random-number-generator&lt;/a&gt; function, where:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;let $rnd := fn:random-number-generator()&lt;/code&gt; initializes a new random number sequence with the default seed as its state;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let $value := $rnd?number&lt;/code&gt; returns the current value of the sequence;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let $rnd := $rnd?next()&lt;/code&gt; returns the state and value of the next item in the sequence.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This has all the properties needed for a forward (left-to-right) generating sequence. To make it a generalized generator sequence, the &lt;code&gt;number&lt;/code&gt; field should be renamed &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;NOTE: The &lt;code&gt;fn:random-number-generator&lt;/code&gt; function defines an infinite sequence as it has no termination/end of sequence condition.&lt;/p&gt;
&lt;h2&gt;Sequence Generators as Record Types&lt;/h2&gt;
&lt;p&gt;Therefore, a forward generator sequence could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare item-type sequence-generator as record(
    value as item(),
    next as function() as record(value, next, *)?,
    *
);

declare function generated-sequence() as sequence-generator?;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If calling &lt;code&gt;?next()&lt;/code&gt; on a sequence above returns the empty sequence then there are no more values in that sequence.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;generated-sequence()&lt;/code&gt; returns the empty sequence then there are no items in the sequence.&lt;/p&gt;
&lt;p&gt;NOTE: This does not currently define reversible sequence support. A &lt;code&gt;reversed&lt;/code&gt; property could be provided that returns a &lt;code&gt;sequence-generator&lt;/code&gt; that operates on the sequence from right to left. I haven't figured out exactly how this should look, but reversed generator sequences may be better investigated as a separate issue.&lt;/p&gt;
&lt;p&gt;NOTE: An implementation can process this sequence iteratively if needed.&lt;/p&gt;
&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;p&gt;While this allows generator sequence types to be created, they are -- like &lt;code&gt;fn:random-number-generator()&lt;/code&gt; cumbersome to use. This does have the advantage of being backward compatible with &lt;code&gt;fn:random-number-generator()&lt;/code&gt;, though.&lt;/p&gt;
&lt;p&gt;The problem comes when trying to make these work like sequences. The subtype and function coercion rules should be doable. The other sequence operations like filtering are more complicated to define properly.&lt;/p&gt;
&lt;p&gt;However, this has the same issues that allowing &lt;code&gt;array()&lt;/code&gt; in &lt;code&gt;fn:*&lt;/code&gt; functions has -- how do you differentiate the use cases where the user is working on a sequence of generators, or the generated sequences?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: You can't extend the functions to take a &lt;code&gt;(sequence-type | item()*)&lt;/code&gt; parameter as a &lt;code&gt;sequence-type&lt;/code&gt; is a subtype of &lt;code&gt;item()&lt;/code&gt; which matches &lt;code&gt;item()*&lt;/code&gt;. If the functions were to be extended to handle these, then &lt;code&gt;fn:head(fn:random-number-generator())&lt;/code&gt; would return a number instead of a map.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Sequence Generator Function&lt;/h2&gt;
&lt;p&gt;The Kotlin language has a &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/generate-sequence.html"&gt;generateSequence&lt;/a&gt; function that takes a next function, an optional seed value or construction function, and returns a lazy sequence over that. -- Internally, it is building a Java iterator that produces values from calling the next function. The sequence will terminate when the next value is null.&lt;/p&gt;
&lt;p&gt;I propose that -- in addition to the &lt;code&gt;sequence-generator&lt;/code&gt; type above -- XPath defines the following function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare function fn:sequence($generator as sequence-generator) as item()*;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This solves the issues in the &lt;em&gt;Analysis&lt;/em&gt; section above, and is analogous to &lt;code&gt;array:values&lt;/code&gt;. It is implementation defined how the sequence is constructed. -- This allows an implementer to appropriately map the generator to their internal sequence implementation in order to provide lazy evaluation and other operations.&lt;/p&gt;
&lt;p&gt;There should also be the following helper function for random numbers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare function fn:random-numbers(
    $seed as xs:anyAtomicType? := ()
) as xs:double* {
    fn:random-number-generator() =&amp;gt; fn:sequence()
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The user-defined sequences then become e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $generator as sequence-generator := map {
    value : 1,
    next : function () { () }
}
return fn:sequence($generator)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #299 closed</title>
   <pubDate>Sun, 17 Sep 2023 00:02:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/299</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-299</guid>
   <description>&lt;div&gt;&lt;p&gt;Short-circuiting functions, function-arity guards and lazy hints&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #707 created</title>
   <pubDate>Fri, 15 Sep 2023 16:59:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/707</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-707</guid>
   <description>&lt;div&gt;&lt;p&gt;Dynamic Function Calls: Processing Empty Sequences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A fundamental – and brilliant – property of XPath is that many operations tolerate empty sequences: Instead of throwing an error, the empty result is passed on unchanged to the next operation. While this is unrewardingly confusing for binary operations (&lt;code&gt;() + 1&lt;/code&gt;, &lt;code&gt;() eq 5&lt;/code&gt;), it’s wonderful for pipelines:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: paths :)
$nodes / a / b / c
(: lookups :)
$data ? 1 ? 2 ? 3
(: simple map operators :)
$data ! do(.) ! something(.)
(: arrow operator works differently, but the syntax is similar:  :)
$data =&amp;gt; do() =&amp;gt; something()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As far as I can judge, it would be a very simple and user-friendly addition if we extended dynamic function calls to return an empty sequence (instead of raising an error) if the base expression is an empty sequence. This way, the following expressions would all run through:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $map := map { 'giovanni': map { 'city': 'roma' } }
return $map('andrea')('city'),
let $data := ()
return $data(1)(2)(3),
()(123),
()()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Many people use parentheses instead of the lookup operator for accessing maps &amp;amp; arrays, and the proposed change would make the syntax more interchangeable. I believe it would also be useful for function items in general.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #706 created</title>
   <pubDate>Fri, 15 Sep 2023 14:45:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/706</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-706</guid>
   <description>&lt;div&gt;&lt;p&gt;FLWOR: for member $m1 in $a1, member $m2 in $a2&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently, the &lt;code&gt;member&lt;/code&gt; keyword must always be placed directly after the &lt;code&gt;for&lt;/code&gt; clause:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: valid :)
for $a in 1 to 10
for $m member $m in $array

(: invalid :)
for $a in 1 to 10, member $m in $array
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition, the keyword applies to all other bindings in the same &lt;code&gt;for&lt;/code&gt; clause:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for member $m1 in $array1, $m2 in $array2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My feeling is that this syntax is a bit odd, as other keywords (&lt;code&gt;allowing empty&lt;/code&gt;, &lt;code&gt;at&lt;/code&gt;) only refer to the currently bound variable. Next, the &lt;code&gt;member&lt;/code&gt; syntax would differ from the semantics of XQuery Full Text: The &lt;code&gt;score&lt;/code&gt; keyword is placed before the variable name, and can be used more than once (or omitted):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let score $s1 := $data1, score $s2 := $data2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think we should change this. It would also simplify the grammar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;InitialClause     ::=  ForClause | LetClause | WindowClause
ForClause         ::=  "for" ForBinding ("," ForBinding)*
ForBinding        ::=  (SimpleForBinding | ForMemberBinding) PositionalVar? "in" ExprSingle
SimpleForBinding  ::=  VarBinding AllowingEmpty?
ForMemberBinding  ::=  "member" VarBinding
AllowingEmpty     ::=  "allowing" "empty"
PositionalVar     ::=  "at" "$" VarName
VarBinding        ::=  "$" VarName TypeDeclaration?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And one more motivation for changing is that map bindings will be easier to define (see &lt;a href="https://github.com/qt4cg/qtspecs/issues/31#issuecomment-1721400625"&gt;#31&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #705 created</title>
   <pubDate>Fri, 15 Sep 2023 07:08:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/705</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-705</guid>
   <description>&lt;div&gt;&lt;p&gt;Function Coercion: Function Arities&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-function-coercion"&gt;4.6.4 Function Coercion&lt;/a&gt;, a rule was added to support functions with an arity lower than the expected one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If F has lower arity than the expected type, then F is wrapped in a new function that declares and ignores the additional argument; the following steps are then applied to this new function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I got it right, this is the resulting 4.0 behavior:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spoiler:&lt;/strong&gt; I probably got it wrong, see the next comment.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function local:function($a) { };
declare variable $function := function($a) { };

(: now legal :)
filter    (1984, true#0)
$function (1984, 'ignored')
fn { }    (1984, 'ignored')
map { }   (1984, 'ignored')
true#0    ('ignored')
sum(?, ())(1984, 'ignored')

(: still illegal :)
local:function(1984, 'ignored')

(: still legal: RHS items will be supplied one by one :)
map { }(1984, 'processed')     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe some more examples should be added in the corresponding sections that refer to function coercion.&lt;/p&gt;
&lt;p&gt;The new rule is powerful and allows for greater flexibility (see #516 and other issues), but the behavior may also be unexpected. We should probably document that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It may go unnoticed that a passed on argument will be ignored. In other words, we reduce type safety by allowing users to supply more arguments than will be processed.&lt;/li&gt;
&lt;li&gt;It makes a difference whether the invoked function is static or dynamic (dynamic functions will now provide less type safety than static functions).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #704 created</title>
   <pubDate>Thu, 14 Sep 2023 12:26:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/704</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-704</guid>
   <description>&lt;div&gt;&lt;p&gt;Context Value Expression → Context Value Reference&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specification defines Variable References for accessing values bound to a variable, and we should rename the equivalent operation for accessing the context from “Context Value Expression” to “Context Value Reference” (even more so if we should decide to introduce a Context Value Declaration later on, as discussed in #755).&lt;/p&gt;
&lt;p&gt;Related: https://github.com/qt4cg/qtspecs/pull/703#issuecomment-1719345430&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #703 created</title>
   <pubDate>Thu, 14 Sep 2023 11:43:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/703</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-703</guid>
   <description>&lt;div&gt;&lt;p&gt;129 (1): XPath and XQuery changes for introduction of context value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #129 This replaces the previous attempt from several months ago, which had too many conflicts to be salvageable.&lt;/p&gt;
&lt;p&gt;This is a wide-ranging and pervasive change, and I would like the changes to be applied promptly and incrementally to reduce the risk of conflicts, even if further work is needed later. This first PR addresses the XQuery and XPath language specifications. Further changes (in subsequent PRs) are needed for F+O and for XSLT. There are also a couple of minor changes affecting Serialization (but none affecting the data model).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #368 closed</title>
   <pubDate>Thu, 14 Sep 2023 11:38:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/368</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-368</guid>
   <description>&lt;div&gt;&lt;p&gt;129: Context item generalized to context value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #702 created</title>
   <pubDate>Thu, 14 Sep 2023 09:29:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/702</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-702</guid>
   <description>&lt;div&gt;&lt;p&gt;701: fn:concat: Support for 0 or more arguments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Closes #701&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #701 created</title>
   <pubDate>Thu, 14 Sep 2023 09:08:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/701</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-701</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:concat: Support for 0 or more arguments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With #161, we plan to introduce support for variadic functions.&lt;/p&gt;
&lt;p&gt;The scope of this issue is much smaller and can be seen as a preparatory one; it’s about allowing the first two arguments of the function optional. I’ll create a little PR for it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #700 created</title>
   <pubDate>Thu, 14 Sep 2023 09:06:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/700</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-700</guid>
   <description>&lt;div&gt;&lt;p&gt;Operators for array mapping and filtering&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With issue #129 generalising the context item to a context value, we have the opportunity to define context-based mapping and filtering operators for arrays that work in the same way as the &lt;code&gt;A!B&lt;/code&gt; and &lt;code&gt;A[B]&lt;/code&gt; operators for sequences.&lt;/p&gt;
&lt;p&gt;I propose &lt;code&gt;A!!B&lt;/code&gt; as a mapping operator for arrays. Unlike &lt;code&gt;!&lt;/code&gt;, this does not flatten the result. The result is an array whose members correspond one-to-one with the members of &lt;code&gt;A&lt;/code&gt;, each member of the result array being formed by evaluating &lt;code&gt;B&lt;/code&gt; with the corresponding member of &lt;code&gt;A&lt;/code&gt; as the context value.&lt;/p&gt;
&lt;p&gt;For an array whose members are singletons, the expression &lt;code&gt;A!!B&lt;/code&gt; has a similar effect to &lt;code&gt;A?*!B&lt;/code&gt;, but (a) it is clearer, (b) it returns an array rather than a sequence, and (c) it performs no flattening. For the more general case, it can be used in place of the higher-order function call &lt;code&gt;A =&amp;gt; array:for-each(fn{B})&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I propose &lt;code&gt;A?[B]&lt;/code&gt; as a filter operator for arrays. Unlike &lt;code&gt;A[B]&lt;/code&gt;, this is not overloaded to perform index-based selection. The result is an array containing those members of &lt;code&gt;A&lt;/code&gt; for which &lt;code&gt;B&lt;/code&gt; has an effective boolean value of true, when evaluated with the corresponding member of &lt;code&gt;A&lt;/code&gt; as the context value. The expression &lt;code&gt;$A?[B]&lt;/code&gt; is equivalent to &lt;code&gt;$A =&amp;gt; array:filter(fn{B})&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;$A?[exists(.)]&lt;/code&gt; filters the array &lt;code&gt;$A&lt;/code&gt; to retain only those members that are non-empty.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #645 closed</title>
   <pubDate>Thu, 14 Sep 2023 08:49:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/645</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-645</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: Use `\n` instead of `\r\n` in XML documents&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #697 closed</title>
   <pubDate>Thu, 14 Sep 2023 08:49:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/697</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-697</guid>
   <description>&lt;div&gt;&lt;p&gt;645: Use \n instead of \r\n in XML documents&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #699 created</title>
   <pubDate>Thu, 14 Sep 2023 08:44:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/699</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-699</guid>
   <description>&lt;div&gt;&lt;p&gt;GitHub: Signing&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@ndw Sorry to keep you busy. I think we should disable the enforced signing of commits. We know the persons who send PRs, and currently we only have three persons (you, Reece, me) who sign their commits.&lt;/p&gt;
&lt;p&gt;If signing is disabled, for example, also non-admins will be able to merge those PRs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #698 created</title>
   <pubDate>Thu, 14 Sep 2023 08:40:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/698</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-698</guid>
   <description>&lt;div&gt;&lt;p&gt;GitHub: Line Endings&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@ndw I’ve copied your suggestion from https://github.com/qt4cg/qtspecs/issues/645#issuecomment-1657056816 to a new issue:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;we can tell git to fix the line endings in comments. I'll see about getting that setup.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In addition, it would be great if line endings were not changed when editing files in place.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/196589/ef3b9ccf-04a0-4c57-a696-62ed8522f824" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;Due to my changes in #645, all relevant files should now use Unix-style line endings, so this would be a sane default (e.g. if the modification of files leads to a mixture of \n and \r\n).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #697 created</title>
   <pubDate>Thu, 14 Sep 2023 08:35:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/697</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-697</guid>
   <description>&lt;div&gt;&lt;p&gt;645: Use \n instead of \r\n in XML documents&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;#645 (editorial)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #696 created</title>
   <pubDate>Wed, 13 Sep 2023 15:17:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/696</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-696</guid>
   <description>&lt;div&gt;&lt;p&gt;566: Rework query parameters on build-uri/parse-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Completes action QT4CG-042-02.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rework the query segments so that they're a simple map of key/value pairs.&lt;/li&gt;
&lt;li&gt;Rename &lt;code&gt;query-segments&lt;/code&gt; to &lt;code&gt;query-parameters&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #692 closed</title>
   <pubDate>Wed, 13 Sep 2023 14:30:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/692</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-692</guid>
   <description>&lt;div&gt;&lt;p&gt;Use sequences instead of arrays in fn:parse-uri output&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #695 created</title>
   <pubDate>Tue, 12 Sep 2023 22:08:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/695</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-695</guid>
   <description>&lt;div&gt;&lt;p&gt;Step in RangeExpression&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the XPath specs, it seems that a simple modification from...&lt;/p&gt;
&lt;p&gt;[34] | RangeExpr | ::= | AdditiveExpr ( "to" AdditiveExpr )?
-- | -- | -- | --&lt;/p&gt;
&lt;p&gt;...to...&lt;/p&gt;
&lt;p&gt;[34] | RangeExpr | ::= | AdditiveExpr ( "to" AdditiveExpr ("step" AdditiveExpr)? )?
-- | -- | -- | --&lt;/p&gt;
&lt;p&gt;...would be nonintrusive, and bring some nice benefits customary in other PLs, allowing expressions such as &lt;code&gt;1 to 9 step 2&lt;/code&gt; and &lt;code&gt;100 to -100 step -4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #694 created</title>
   <pubDate>Tue, 12 Sep 2023 21:57:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/694</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-694</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO minor edits, with new examples and notes, 2 through 4.6&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Minor edits here are motivated by clarity or localized consistency. In one case, the change of &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt; appears to address an important typo.&lt;/p&gt;
&lt;p&gt;I have introduced select examples, to illustrate points in the corresponding rules.&lt;/p&gt;
&lt;p&gt;The notes I have introduced need some context. Option 9 for the primary format token is somewhat vague, and the attached note of clarification stokes the imagination. I have trimmed that note for clarity (without substantive changes) but introduced a set of notes later, to help caution developers on unexpected behaviors with option 9, and secondarily to caution processor implementers on the challenges inherent in supporting this option. If  I had my druthers, I would advocate deprecating option 9. It is--to use a technical term--squishy.&lt;/p&gt;
&lt;p&gt;Spec editors: I am happy to pull back on any of this.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 045 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 12 Sep 2023 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/09-12</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-09-12</guid>
</item><item>
   <title>Issue #160 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:13:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/160</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-160</guid>
   <description>&lt;div&gt;&lt;p&gt;Support named arguments on dynamic function calls&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #672 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:12:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/672</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-672</guid>
   <description>&lt;div&gt;&lt;p&gt;XFO minor edits, chap. 1&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #671 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:12:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/671</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-671</guid>
   <description>&lt;div&gt;&lt;p&gt;Switch expression without operand (analogous to XSLT choose)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #678 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:12:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/678</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-678</guid>
   <description>&lt;div&gt;&lt;p&gt;671 switch sans operand&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #669 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:12:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/669</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-669</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo in XSLT §26.4 - "appearing appearing"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #679 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:12:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/679</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-679</guid>
   <description>&lt;div&gt;&lt;p&gt;669 - fix typo "appearing appearing"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #665 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:11:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/665</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-665</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo in fn:items-before and fn:items-ending-where&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #681 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:11:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/681</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-681</guid>
   <description>&lt;div&gt;&lt;p&gt;665: Fix typos in fn:items-XX functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #637 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:11:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/637</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-637</guid>
   <description>&lt;div&gt;&lt;p&gt;Annotation Values: Booleans&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #682 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:11:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/682</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-682</guid>
   <description>&lt;div&gt;&lt;p&gt;637: allow true() and false() as function annotation values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #90 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:11:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/90</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-90</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplified simplified stylesheets&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #599 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:11:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/599</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-599</guid>
   <description>&lt;div&gt;&lt;p&gt;90: Simplified stylesheets with no xsl:version&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #93 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:10:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/93</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-93</guid>
   <description>&lt;div&gt;&lt;p&gt;Support order by ascending/descending from a string value.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #623 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:10:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/623</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-623</guid>
   <description>&lt;div&gt;&lt;p&gt;93: sort descending&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #600 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:10:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/600</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-600</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:decode-from-uri: counterpart of fn-encode-to-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #631 closed</title>
   <pubDate>Tue, 12 Sep 2023 16:10:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/631</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-631</guid>
   <description>&lt;div&gt;&lt;p&gt;600: fn:decode-from-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #693 created</title>
   <pubDate>Tue, 12 Sep 2023 14:30:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/693</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-693</guid>
   <description>&lt;div&gt;&lt;p&gt;QT4 Tests without counterpart in the specs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The following functions are not defined in the current spec:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:unparcel&lt;/code&gt;, &lt;code&gt;fn:parcel&lt;/code&gt; → dropped&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:xdm-to-json&lt;/code&gt; → #576&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:concat()&lt;/code&gt; → see #701&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:parts&lt;/code&gt; → see #463&lt;/li&gt;
&lt;li&gt;&lt;code&gt;codepoints-to-string()&lt;/code&gt;, etc. (sequence-values arguments)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #692 created</title>
   <pubDate>Tue, 12 Sep 2023 14:21:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/692</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-692</guid>
   <description>&lt;div&gt;&lt;p&gt;Use sequences instead of arrays in fn:parse-uri output&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Completes action QT4CG-042-01 on NW.&lt;/p&gt;
&lt;p&gt;There is a corresponding PR against the test suite.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 045 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 11 Sep 2023 11:15:05 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/09-12</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-09-12</guid>
</item><item>
   <title>Pull request #691 created</title>
   <pubDate>Fri, 8 Sep 2023 19:40:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/691</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-691</guid>
   <description>&lt;div&gt;&lt;p&gt;688 Semantics of local union types, enumeration types, etc&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #688.&lt;/p&gt;
&lt;p&gt;This PR fleshes out the detailed semantics of local union types, enumeration types, and type aliases. It fills a number of gaps in the current specification but doesn't aim to change the overall intent.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #690 created</title>
   <pubDate>Fri, 8 Sep 2023 11:29:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/690</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-690</guid>
   <description>&lt;div&gt;&lt;p&gt;687 Clarify constructor functions for user-defined types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Clarifies the rules for constructor functions, especially for list and union types, and for types defined by means of type aliases rather than in an imported schema. Fix #687.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #689 created</title>
   <pubDate>Fri, 8 Sep 2023 08:36:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/689</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-689</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:stack-trace: replace with $err:stack-trace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current specification contains a diagnostic function called &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-stack-trace"&gt;&lt;code&gt;fn:stack-trace&lt;/code&gt;&lt;/a&gt;. Many other languages provide a similar function: The returned output can possibly help to understand which function calls led to an error during the evaluation of a code.&lt;/p&gt;
&lt;p&gt;Still, I have strong doubts that it is a good decision to include this function in the standard:&lt;/p&gt;
&lt;p&gt;The specification gives you a vast amount of freedom how to implement and optimize things. As a result, it’s completely feasible and reasonable to rewrite the following code…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function local:double($f) {
  $f * 2
};
(1 to 6) ! local:double(.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…to &lt;code&gt;(1 to 6) ! (. * 2)&lt;/code&gt; at compile time. If a user adds a &lt;code&gt;fn:stack-overflow&lt;/code&gt; call in the function body, s·he would expect to find the function invocation of the original code representation in the output. As always, there are technical solutions to achieve this (store additional information in the evaluation tree on the original query; suppress optimizations when &lt;code&gt;fn:stack-trace&lt;/code&gt; is found), but all of them can affect the runtime behavior and lead to different evaluation trees, hiding possible bugs in the implementation (which can be a reason to call &lt;code&gt;fn:stack-trace&lt;/code&gt; at all).&lt;/p&gt;
&lt;p&gt;A standard should provide a minimum amount of assurance that a function behaves similarly across different implementations. At this time, I don’t believe we can’t give that guarantee.&lt;/p&gt;
&lt;p&gt;Related: #55, #686&lt;/p&gt;
&lt;p&gt;– As an alternative, a stack trace could optionally be created by an implementation when an error is triggered.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #688 created</title>
   <pubDate>Thu, 7 Sep 2023 17:33:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/688</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-688</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion rules for union types and enumeration types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The coercion rules for enumeration types have not been defined (there is a TODO in the spec).&lt;/p&gt;
&lt;p&gt;For union types (including both schema-defined and locally-defined union types), the rules appear to need some further work. Given types &lt;code&gt;R1&lt;/code&gt; and &lt;code&gt;R2&lt;/code&gt; that are defined by restriction from &lt;code&gt;B1&lt;/code&gt; and &lt;code&gt;B2&lt;/code&gt;, if an atomic value &lt;code&gt;V&lt;/code&gt; is an instance of &lt;code&gt;B1&lt;/code&gt; that conforms to the rules of &lt;code&gt;R1&lt;/code&gt;, then the relabelling coercion means it V will now be acceptable where the required type is &lt;code&gt;R1&lt;/code&gt;. But if the required type is &lt;code&gt;union(R1, R2)&lt;/code&gt;, the relabelling coercion is not invoked. This feels inconsistent, since &lt;code&gt;union(R1, R2)&lt;/code&gt; might be expected to accept anything that &lt;code&gt;R1&lt;/code&gt; accepts.&lt;/p&gt;
&lt;p&gt;Test case FunctionCall-056 (currently failing) illlustrates the problem.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #687 created</title>
   <pubDate>Thu, 7 Sep 2023 15:21:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/687</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-687</guid>
   <description>&lt;div&gt;&lt;p&gt;Constructor functions for user-defined types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a deficiency in the 3.1 F+O specification.&lt;/p&gt;
&lt;p&gt;Constructor functions for user-defined types are very poorly described:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It's unclear how anonymous types are handled. The spec says there is a constructor function for every simple type in the static context. That would include anonymous types. But constructor functions for anonymous types, if they exist, are essentially useless, because their names are not known.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The semantics of constructor functions for user-defined list and union types are described very vaguely, by analogy with built-in types; and the analogy points to the section on built-in atomic types which doesn't cover union and list types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a union type &lt;code&gt;U&lt;/code&gt;, it says that the return type of the constructor U(x) is defined as &lt;code&gt;xs:anyAtomicType&lt;/code&gt;. Why not define it as &lt;code&gt;U&lt;/code&gt;? Perhaps this predates the ability to use union types as return types.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #686 created</title>
   <pubDate>Wed, 6 Sep 2023 21:28:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/686</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-686</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO presentation of diagnostic functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;From an informal discussion on Slack, I feel that clarity is needed in the &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#diagnostics"&gt;Diagnostic tracing&lt;/a&gt; section. The problem is that &lt;code&gt;fn:trace()&lt;/code&gt; and &lt;code&gt;fn:log()&lt;/code&gt; introduce the terms "trace output" with no definition or explanation, and this is easily confused with the primary output defined by the function signatures, and affects how readers think about the determinism of the functions. "The serialization of the trace output..." implies that the processor will necessarily serialize something, but I doubt that can or should be presumed. More needs to be said about the responsibilities of the processor in the contract for these functions.&lt;/p&gt;
&lt;p&gt;In my opinion, this section would benefit from a brief preamble, providing context to set the stage for the rules. Some draft text for us to discuss:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Diagnostic tracing functions provide a transfer of information, either from the processor to the dynamic context, or vice versa.&lt;/p&gt;
&lt;p&gt;The function that transfers information from the processor to the dynamic context, &lt;code&gt;fn:stack-trace()&lt;/code&gt;, returns a string that can be further processed and used in the XPath expression and elsewhere in a host language.&lt;/p&gt;
&lt;p&gt;The functions that transfer information from the dynamic context to the processor, &lt;code&gt;fn:trace()&lt;/code&gt; and &lt;code&gt;fn:log()&lt;/code&gt;, each have two effects. The first effect, the output, pertains to the returned values, defined by the function signature and essential to the XPath expression. Such output is always deterministic. The second effect, processor behavior, concerns the way the processor handles the values bound to the parameters, supplied for diagnostic tracing. Processor behavior is always directed toward the user or environment that invoked the processor. Actions may include sending messages, serializing the values and writing them to a log file or database, or something else. Unlike the output (the first effect), the results of processor behavior are implementation-defined and nondeterministic with respect to order of the parameter values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The draft above attempts to avoid "output" to describe the processor-side diagnostics, so as to avoid potential confusion when dealing with the return-type defined in the signature. Where "trace output" appears in each of the rules, "processor behavior" can be used instead.&lt;/p&gt;
&lt;p&gt;Questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any objections, corrections, or suggestions?&lt;/li&gt;
&lt;li&gt;Any other examples of how a processor might use trace diagnostics?&lt;/li&gt;
&lt;li&gt;Should a paragraph be added to explain briefly how &lt;code&gt;trace()&lt;/code&gt; and &lt;code&gt;log()&lt;/code&gt; differ from &lt;code&gt;xsl:message&lt;/code&gt;? (E.g., a serialized tree should not be presumed.)&lt;/li&gt;
&lt;li&gt;In the informal Balisage birds-of-a-feather discussion this summer, reservations were expressed by participants about the name &lt;code&gt;log()&lt;/code&gt;. Is it possible to drop the function and simply extend the arity of &lt;code&gt;trace()&lt;/code&gt; with a parameter &lt;code&gt;$return-input as xs:boolean? := true()&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #685 closed</title>
   <pubDate>Wed, 6 Sep 2023 09:59:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/685</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-685</guid>
   <description>&lt;div&gt;&lt;p&gt;Style fixes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #685 created</title>
   <pubDate>Wed, 6 Sep 2023 09:49:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/685</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-685</guid>
   <description>&lt;div&gt;&lt;p&gt;Style fixes&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Put the XSLT processor version comment at the end of the file instead of the beginning. Putting it before the &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; forces browsers into quirks mode.&lt;/li&gt;
&lt;li&gt;Improve the XPath Functions stylesheets so that they don't put &lt;code&gt;div&lt;/code&gt; elements inside &lt;code&gt;p&lt;/code&gt; elements when outputting examples.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #684 closed</title>
   <pubDate>Wed, 6 Sep 2023 09:17:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/684</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-684</guid>
   <description>&lt;div&gt;&lt;p&gt;Ignore this PR&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #683 closed</title>
   <pubDate>Wed, 6 Sep 2023 09:14:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/683</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-683</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO context/focus in/dependent functions clarification note&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #684 created</title>
   <pubDate>Wed, 6 Sep 2023 08:37:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/684</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-684</guid>
   <description>&lt;div&gt;&lt;p&gt;Ignore this PR&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is just norm hacking about&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #683 created</title>
   <pubDate>Wed, 6 Sep 2023 02:16:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/683</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-683</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO context/focus in/dependent functions clarification note&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Added note clarifying the relationship between context and focus, for the purpose of illustrating the relationships between focus/context in/dependent functions. Wrapped with companion &lt;code&gt;&amp;lt;note&amp;gt;&lt;/code&gt;s in a parent &lt;code&gt;&amp;lt;notes&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #682 created</title>
   <pubDate>Tue, 5 Sep 2023 20:12:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/682</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-682</guid>
   <description>&lt;div&gt;&lt;p&gt;637: allow true() and false() as function annotation values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #637&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #658 closed</title>
   <pubDate>Tue, 5 Sep 2023 19:34:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/658</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-658</guid>
   <description>&lt;div&gt;&lt;p&gt;Constructor Function: Parameter Name, Zero-Arity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #681 created</title>
   <pubDate>Tue, 5 Sep 2023 19:30:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/681</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-681</guid>
   <description>&lt;div&gt;&lt;p&gt;665: Fix typos in fn:items-XX functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #665&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #680 created</title>
   <pubDate>Tue, 5 Sep 2023 17:52:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/680</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-680</guid>
   <description>&lt;div&gt;&lt;p&gt;668 define case insensitive collation normatively&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #668&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 044 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 5 Sep 2023 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/09-05</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-09-05</guid>
</item><item>
   <title>Pull request #679 created</title>
   <pubDate>Tue, 5 Sep 2023 16:53:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/679</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-679</guid>
   <description>&lt;div&gt;&lt;p&gt;669 - fix typo "appearing appearing"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #669&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #678 created</title>
   <pubDate>Tue, 5 Sep 2023 16:43:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/678</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-678</guid>
   <description>&lt;div&gt;&lt;p&gt;671 switch sans operand&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #671&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #619 closed</title>
   <pubDate>Tue, 5 Sep 2023 16:04:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/619</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-619</guid>
   <description>&lt;div&gt;&lt;p&gt;XDM ch. 6 minor edits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #633 closed</title>
   <pubDate>Tue, 5 Sep 2023 16:04:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/633</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-633</guid>
   <description>&lt;div&gt;&lt;p&gt;Edits ch. 4.1 through 4.15&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #601 closed</title>
   <pubDate>Tue, 5 Sep 2023 15:15:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/601</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-601</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:all → fn:every?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #640 closed</title>
   <pubDate>Tue, 5 Sep 2023 15:15:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/640</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-640</guid>
   <description>&lt;div&gt;&lt;p&gt;601: fn:all → fn:every?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #675 created</title>
   <pubDate>Tue, 5 Sep 2023 14:55:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/675</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-675</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT streaming rules for new constructs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XSLT spec has rules for the streamability of all system functions and XPath language constructs. These need updating for new 4.0 constructs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #664 closed</title>
   <pubDate>Tue, 5 Sep 2023 14:08:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/664</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-664</guid>
   <description>&lt;div&gt;&lt;p&gt;663 xsl:original keywords&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #674 created</title>
   <pubDate>Tue, 5 Sep 2023 14:07:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/674</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-674</guid>
   <description>&lt;div&gt;&lt;p&gt;663: Describe how calls to xsl:original with keywords work&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Rework PR 664 (fix for 663) on new baseline&lt;/p&gt;
&lt;p&gt;Fix #663.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #673 created</title>
   <pubDate>Tue, 5 Sep 2023 13:53:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/673</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-673</guid>
   <description>&lt;div&gt;&lt;p&gt;HTML namespace changes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR applies my action items for updating the HTML XDM mapping around namespaces and local names.&lt;/p&gt;
&lt;p&gt;Note: this currently makes &lt;code&gt;dm:namespace-nodes&lt;/code&gt; return an empty sequence. I'm not currently sure what the best approach is here.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #672 created</title>
   <pubDate>Mon, 4 Sep 2023 20:05:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/672</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-672</guid>
   <description>&lt;div&gt;&lt;p&gt;XFO minor edits, chap. 1&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Most substantive change is the trimming of prose held over from before the revision of the diagrams.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #671 created</title>
   <pubDate>Sat, 2 Sep 2023 19:37:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/671</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-671</guid>
   <description>&lt;div&gt;&lt;p&gt;Switch expression without operand (analogous to XSLT choose)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;By syntax analogy with &lt;code&gt;switch&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;choose
   test ($a &amp;lt; $b) return "lesser"
   test ($a &amp;gt; $b) return "greater"
   test ($a eq $b) return "equal"
   default return "Getting the default is hard to explain"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Something like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ChooseExpr ::= "choose" ChooseTestClause+ "default" "return" ExprSingle
ChooseTestClause ::= "test" "(" Expr ")" "return" ExprSingle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know I can do this by stringing if-then-else together, but would greatly appreciate the cleaner and more manageable syntax for those times when many tests are inescapable.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #670 created</title>
   <pubDate>Sat, 2 Sep 2023 05:45:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/670</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-670</guid>
   <description>&lt;div&gt;&lt;p&gt;The trouble with XPath’s fn:fold-right. A fix and Proposal for fn:fold-lazy&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;&lt;strong&gt;The trouble with XPath‘s fn:fold-right.&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;Laziness in XPath.&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;This article discusses the standard XPath 3.1 function &lt;strong&gt;fn:fold-right,&lt;/strong&gt; its definition in the official Spec, its lack of apparent use-cases and its utter failure to reproduce the (lazy) behavior of Haskell’s &lt;strong&gt;foldr&lt;/strong&gt; , which is presumed to be the motivation behind &lt;strong&gt;fn:fold-right&lt;/strong&gt;.&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;The 2nd part of the article introduces the implementation of short-circuiting and generators, which together unprecedentedly provide laziness in XPath. Based on these, a new XPath function: &lt;strong&gt;fn:fold-lazy&lt;/strong&gt;    is implemented, that utilizes laziness, similar to Haskell’s &lt;strong&gt;foldr&lt;/strong&gt;. This behavior is demonstrated in specific examples&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Higher order functions were introduced into XPath starting with &lt;a href="https://www.w3.org/TR/xpath-functions-30/#basic-hofs"&gt;version 3.0&lt;/a&gt; in 2014 and later in &lt;a href="https://www.w3.org/TR/xpath-functions-31/#higher-order-functions"&gt;version 3.1&lt;/a&gt; in 2017.&lt;br/&gt;
The definition of the standard function &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-fold-right"&gt;fn:fold-right&lt;/a&gt; closely mimics that of Haskell’s &lt;a href="https://hackage.haskell.org/package/base-4.18.0.0/docs/Prelude.html#g:11"&gt;foldr&lt;/a&gt;, and anyone acquainted with &lt;strong&gt;foldr&lt;/strong&gt; can be left with the impression that &lt;strong&gt;fn:fold-right&lt;/strong&gt; would have identical behavior (and hence use-cases) as Haskell’s &lt;strong&gt;foldr&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, there is a critical difference between the definitions of these two functions. Whereas the definition of &lt;strong&gt;foldr&lt;/strong&gt; explicitly defines its behavior when provided with a function, lazy in its 1st argument – from &lt;a href="https://hackage.haskell.org/package/base-4.18.0.0/docs/Prelude.html#g:11"&gt;Haskell’s definition of
foldr&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;“… &lt;em&gt;Note that since the head of the resulting expression is produced by an application of the operator to the first element of the list, given an operator lazy in its right argument, foldr can produce a terminating expression from an unbounded list.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The XPath definition of &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-fold-right"&gt;fn:fold-right&lt;/a&gt; does not mention any laziness.&lt;/p&gt;
&lt;p&gt;There is no official concept of “laziness” in XPath, thus &lt;strong&gt;fn:fold-right&lt;/strong&gt; doesn’t cover some of the most important use-cases of Haskell’s &lt;strong&gt;foldr&lt;/strong&gt; , which can successfully produce a result when passed an infinite (or having unlimited length) list.&lt;/p&gt;
&lt;p&gt;This in fact makes &lt;strong&gt;fn:fold-right&lt;/strong&gt; almost useless, and explains why even some  of the members of the XPath 3.1 WG have stated on occasions that they do not see why the function was introduced.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;fn:fold-right gone wrong – example&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This Haskell code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-hs"&gt;foldr (\x y -&amp;gt; (if x == 0 then 0 else x*y)) 1 (map (\x -&amp;gt; x - 15) [1 ..1000000])

foldr (\x y -&amp;gt; (if x == 0 then 0 else x*y)) 1 (map (\x -&amp;gt; x - 15) [1 ..10000000])

foldr (\x y -&amp;gt; (if x == 0 then 0 else x*y)) 1 (map (\x -&amp;gt; x - 15) [1 ..])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces the product of all numbers in the following list, respectively:&lt;/p&gt;
&lt;p&gt;[-14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, &lt;strong&gt;0&lt;/strong&gt;, 1, 2, 3, …, 999985]&lt;/p&gt;
&lt;p&gt;[-14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, &lt;strong&gt;0&lt;/strong&gt;, 1, 2, 3, …, 9999985]&lt;/p&gt;
&lt;p&gt;[-14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, &lt;strong&gt;0&lt;/strong&gt;, 1, 2, 3, …, ] -- up to infinity.&lt;/p&gt;
&lt;p&gt;Because all these &lt;code&gt;3&lt;/code&gt; lists contain a zero as their 15th item, the expected result is &lt;strong&gt;&lt;code&gt;0&lt;/code&gt;&lt;/strong&gt; when evaluating any of these &lt;code&gt;3&lt;/code&gt; expressions – even in the last case where the provided as argument list is infinite. And this is indeed what happens:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/4e7cbbc7-543f-433a-bdb6-e25aa59d1172" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;Not only Haskell produces the correct result in all cases, but &lt;em&gt;regardless of the list’s length, the result is produced instantaneously&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Now, let us evaluate this equivalent XPath expression with BaseX:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $product := function($input as array(xs:integer)) as xs:integer
                         { 
                           array:fold-right($input, 1, function($x as xs:integer, $y as xs:integer) as  xs:integer 
                                                               {if($x eq 0) then 0 else $x * $y}) 
                         },
    $ar := array { (1 to 36) ! function($x as xs:integer) as xs:integer {$x -15}(.)}
  return
     $product($ar)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we are passing a list containing just 36 integers. The result is quite unexpected and spectacular:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/83a86918-deb3-4f4a-9b2f-38bab85d863f" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;Here is what happens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Even though when processing the 15th integer in the array the result is 0, the XPath processor continues to evaluate the RHS (right-hand side) until the last member of the array (&lt;code&gt;36&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On “its way back” the XPath processor multiplies: &lt;code&gt;(36*35*34*33*32* …*6*5*4)*3&lt;/code&gt;, and the result of the right-most multiplication is bigger than the maximum integer (or decimal) that this XPath processor supports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C r r r a s s h&lt;/strong&gt; … As seen in the screenshot above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The root cause for this unfortunate behavior is that the XPath processor doesn’t support short-circuiting and laziness. And thus, &lt;strong&gt;fn:fold-right&lt;/strong&gt; is useless even in the normal/trivial case of a collection (array) with only 36 members. Not to speak of collections containing millions of members, or even infinite ones…&lt;/p&gt;
&lt;p&gt;Let us see what happens when evaluating similar expressions with another XPath processor: Saxon.&lt;/p&gt;
&lt;p&gt;Saxon seems to produce the correct result, however it takes exponentially longer times when the length of the passed array is increased, leading to this one:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/e0b9e34e-b58e-4100-a22a-48581be84072" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;It took 261 seconds for the evaluation to be done, but accessing the &lt;code&gt;15&lt;/code&gt;th member of the array and short-circuiting to &lt;code&gt;0&lt;/code&gt; should be almost instantaneous…&lt;br/&gt;
So what happens in this case? The difference between BaseX and Saxon is that Saxon implements a “Big Integer” and thus can multiply almost &lt;code&gt;1 000 000&lt;/code&gt; integers without getting a value that cannot be handled… But doing almost &lt;code&gt;1&lt;/code&gt;M multiplications of big integers obviously takes time …&lt;/p&gt;
&lt;p&gt;What is common in these two examples? Obviously, neither BaseX nor Saxon detects and performs short-circuiting. Why is this? What is the reason for this?&lt;/p&gt;
&lt;p&gt;I asked a developer of BaseX if I could submit a bug about this behavior. His answer was shockingly unexpected: “&lt;em&gt;This is not a bug, because no requirement in the Specification has been violated&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;Thus, the main cause of the common behavior of both XPath processors to handle the evaluation of these examples, is the specification of the function, which blatantly allows such crap to happen.&lt;/p&gt;
&lt;p&gt;Now that we see this, let us try to provide the wanted, useful behavior writing our own function.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The fix: Step 1 – fn:fold-right in pure XPath&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Before going in depth with our pure XPath solution, we need as a base a pure-XPath implementation of &lt;strong&gt;fn:fold-right&lt;/strong&gt; .&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt; let $fold-right-inner := function ($seq as item()*,
                                    $zero as item()*,
                                    $f as function(item(), item()*) as item()* ,
                                    $self as function(*)
                                   ) as item()*
{
  if(empty($seq)) then $zero
    else
      $f(head($seq), $self(tail($seq), $zero, $f, $self))
},

    $fold-right := function ($seq as item()*,
                             $zero as item()*,
                             $f as function(item(), item()*) as item()* 
                            ) as item()*
{
  $fold-right-inner($seq, $zero, $f, $fold-right-inner)
},
               
   $fAdd := function($x, $y)  {$x + $y},
   $fMult  := function($x, $y)  {$x * $y}
   
   return
     $fold-right((1 to 6) ! function($x){$x - 3}(.), 1, $fMult)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we evaluate the above with any of the two XPath processors, the correct result is produced:&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;And we certainly do have exactly the same problems as the provided built-in &lt;strong&gt;fn:fold-right&lt;/strong&gt; with a similar example:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/b65e72b1-a5a6-4f73-b485-c316a05f3cc4" alt="image"/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The fix: Step 2 – &lt;code&gt;$fold-right-sc&lt;/code&gt; detecting and performing short-circuiting&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now that we have &lt;strong&gt;&lt;code&gt;$fold-right&lt;/code&gt;&lt;/strong&gt; as a base, let us add code to it so that it  will detect and perform short-circuiting. We will implement a function similar to &lt;strong&gt;&lt;code&gt;$fold-right&lt;/code&gt;&lt;/strong&gt; but having this signature:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;    $fold-right-sc := function ($seq as item()*,
                                $zero as item()*,
                                $f as function(item(), item()*) as item()*,
                                $fGetPartial as function(*)
                               ) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last of the function’s parameters &lt;code&gt;$fGetPartial&lt;/code&gt; returns a new function that is the partial application of &lt;code&gt;$f&lt;/code&gt;, when its 1st argument is set to the current member of the input sequence &lt;code&gt;$seq&lt;/code&gt;. The idea is that whenever short-circuiting is possible, &lt;code&gt;$fGetPartial&lt;/code&gt; returns not a function having one argument (arity &lt;code&gt;1&lt;/code&gt;), but a constant – a function with &lt;code&gt;0&lt;/code&gt; arguments (arity &lt;code&gt;0&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If the arity of the so produced partial application is &lt;code&gt;0&lt;/code&gt;, then our code will immediately return with the value &lt;code&gt;$f($currentItem)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the complete code of &lt;code&gt;$fold-right-sc&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt; let $fold-right-sc-inner := function ($seq as item()*,
                                       $zero as item()*,
                                       $f as function(item(), item()*) as item()*,
                                       $fGetPartial as function(*),
                                       $self as function(*)
                                      ) as item()*
{
  if(empty($seq)) then $zero
    else
      if(function-arity($fGetPartial(head($seq), $zero)) eq 0)
        then $fGetPartial(head($seq), $zero) ()
        else $f(head($seq), $self(tail($seq), $zero, $f, $fGetPartial, $self))
},

    $fold-right-sc := function ($seq as item()*,
                                $zero as item()*,
                                $f as function(item(), item()*) as item()*,
                                $fGetPartial as function(*)
                               ) as item()*
{
  $fold-right-sc-inner($seq, $zero, $f, $fGetPartial, $fold-right-sc-inner)
},
               
   $fAdd := function($x, $y)  {$x + $y},
   $fMult  := function($x, $y)  {if($x eq 0) then 0 else $x * $y},
   $fMultGetPartial := function($x, $y)
   {
     if($x eq 0)
       then function() {0}
       else function($z) {$x * $z}
   }
   
   return
     $fold-right-sc((1 to 1000000) ! function($x){$x - 3}(.), 1, $fMult, $fMultGetPartial)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Do note&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If the current item (the head of the sequence) is &lt;code&gt;0&lt;/code&gt;, then &lt;code&gt;$fMultGetPartial&lt;/code&gt; returns a function with &lt;code&gt;0&lt;/code&gt; arguments (constant) that produces &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$fold-right-sc&lt;/code&gt; (inner) treats differently a partial application of arity &lt;code&gt;0&lt;/code&gt; from a partial application with arity &lt;code&gt;1&lt;/code&gt;. In the former case it simply produces the expected constant value without recursing further. Here is the relevant code fragment&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;  if(empty($seq)) then $zero
    else
      if(function-arity($fGetPartial(head($seq), $zero)) eq 0)
        then $fGetPartial(head($seq), $zero) ()
        else $f(head($seq), $self(tail($seq), $zero, $f, $fGetPartial, $self))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now BaseX has no problems with the evaluation, even though the input sequence is of size 1M. The complete evaluation takes just a fraction of a millisecond (0.04 ms):&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/3eec8eba-95e9-4ef4-bc4f-a1c5b9a3f0fc" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;With Saxon things are not so good. Even though Saxon produces the correct result, evaluating the expression with an input sequence of size 1M takes 0.5 seconds (half a second), and evaluating the expression with an input sequence of 10M takes 5 seconds (10 times as long):&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/087c279c-86b9-4b51-a086-eb7c3f85f802" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="media/92f636bb9993afbd2fc75157f3024f75.png" alt=""/&gt;&lt;/p&gt;
&lt;p&gt;What is happening?&lt;/p&gt;
&lt;p&gt;Even though Saxon performs much faster than the previous 261 seconds, due to  detecting the short-circuiting possibility and performing the short-circuit, Saxon still processes all 10M items when evaluating this subexpression (which obviously the more optimized BaseX doesn’t do in advance):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(1 to 10000000) ! function($x){$x - 3}(.)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Therefore, we have one remaining problem: How to prevent long sequences (or arrays) from being fully materialized before starting the evaluation of &lt;code&gt;$fold-right-sc&lt;/code&gt; ?&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The fix: Step 3 – replacing collections with generators&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Generators are well known and provided out of the box in many programming languages. Per Wikipedia:&lt;/p&gt;
&lt;p&gt;“In &lt;a href="https://en.wikipedia.org/wiki/Computer_science"&gt;computer science&lt;/a&gt;,  a &lt;strong&gt;generator&lt;/strong&gt; is a &lt;a href="https://en.wikipedia.org/wiki/Subroutine"&gt;routine&lt;/a&gt; that can be used to control the &lt;a href="https://en.wikipedia.org/wiki/Iteration"&gt;iteration&lt;/a&gt; behaviour of a &lt;a href="https://en.wikipedia.org/wiki/Control_flow#Loops"&gt;loop&lt;/a&gt;. All generators are also &lt;a href="https://en.wikipedia.org/wiki/Iterator"&gt;iterators&lt;/a&gt;.&lt;a href="https://en.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-1"&gt;[1]&lt;/a&gt; A generator is very similar to a function that returns an array, in that a generator has parameters, can be called, and generates a sequence of values.
However, instead of building an array containing all the values and returning them all at once, a generator yields the values one at a time, which requires less memory and allows the caller to get started processing the first few values immediately. In short, a generator &lt;em&gt;looks like&lt;/em&gt; a function but &lt;em&gt;behaves like&lt;/em&gt; an &lt;a href="https://en.wikipedia.org/wiki/Iterator"&gt;iterator&lt;/a&gt;.”&lt;/p&gt;
&lt;p&gt;A full-fledged generator (such as implemented in C#) is an instance of a &lt;a href="https://en.wikipedia.org/wiki/Finite-state_machine"&gt;Finite State Machine(FSM)&lt;/a&gt;, and implementing it in full generality goes beyond the topic and goals of this article. Expect another article soon that will provide this.&lt;/p&gt;
&lt;p&gt;Here we will implement a simple kind of generator, that when passed an integer index &lt;code&gt;$N&lt;/code&gt;, produces the &lt;code&gt;$N&lt;/code&gt;th item of a specific sequence. Although this is probably the simplest form of a generator, it can be useful in many cases and is a good illustrative solution to our current problem. The whole approach of replacing “something” with a function that must be called to produce this “something” is known as &lt;a href="https://wiki.haskell.org/Lifting"&gt;“lifting”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, we will add to our &lt;code&gt;$fold-right&lt;/code&gt; just the use of generators, without the detection and performing of short-circuiting:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fold-right-lifted-inner := function ($seqGen as function(xs:integer) as array(*),
                                    $index as xs:integer,
                                    $zero as item()*,
                                    $f as function(item(), item()*) as item()* ,
                                    $self as function(*)
                                   ) as item()*
                                {
                                  let $nextSeqResult := $seqGen($index),
                                      $isEndOfSeq :=  $nextSeqResult(1),
                                      $seqItem := $nextSeqResult(2)
                                    return
                                      if($isEndOfSeq) then $zero
                                        else
                                          $f($seqItem, $self($seqGen, $index+1, $zero, $f, $self))
                                },

    $fold-right-lifted := function ($seqGen as function(xs:integer) as array(*),
                                    $zero as item()*,
                                    $f as function(item(), item()*) as item()* 
                                  ) as item()*
                                  {
                                    $fold-right-lifted-inner($seqGen, 1, $zero, $f, $fold-right-lifted-inner)
                                  },
                                  
   $NaN := xs:double('NaN'),
   
   $fSeq1ToN := function($ind as xs:integer, $indStart as xs:integer, $indEnd as xs:integer) as array(*)
                {
                  if($ind lt  $indStart or $ind gt $indEnd)
                    then  array{true(), $NaN}
                    else array{false(), $ind}
                },
   $fSeq-1-6 := $fSeq1ToN(?, 1, 6),
               
   $fAdd := function($x, $y)  {$x + $y},
   $fMult  := function($x, $y)  {$x * $y}
   
   return
     $fold-right-lifted($fSeq-1-6, 1, $fMult) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we see an example of a simple generator – the function &lt;strong&gt;&lt;code&gt;$fSeq1ToN&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This function returns an array with two members: a Boolean, which if &lt;code&gt;true()&lt;/code&gt; indicates the end of the sequence, and the 2nd member is the current head of the simulated sequence.&lt;br/&gt;
The generator has two other parameters which are the values (inclusive) for the start-index and the end-index. Whenever the passed value of &lt;code&gt;$ind&lt;/code&gt; is outside of this specified range, &lt;strong&gt;&lt;code&gt;$fSeq1ToN&lt;/code&gt;&lt;/strong&gt; returns a result array with its first member set to &lt;code&gt;true()&lt;/code&gt; (the 2nd member of the result must be ignored in this case), which indicates end-of sequence.&lt;br/&gt;
Otherwise it returns &lt;code&gt;array{false(), $ind}&lt;/code&gt; . It is the responsibility of the caller to stop calling the generator:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;   $fSeq1ToN := function($ind as xs:integer, $indStart as xs:integer, $indEnd as xs:integer) as array(*)
                {
                  if($ind lt  $indStart or $ind gt $indEnd)
                    then  array{true(), $NaN}
                    else array{false(), $ind}
                }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evaluating the complete XPath expression above produces the correct result both in BaseX and in Saxon: the product of the integers &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;6&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/adcee4dc-ddec-4f4c-9e29-1c754315e3d3" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;Now that we have successfully implemented the last missing piece of our complete  solution, let us put everything together:&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The fix: Step 4 – putting it all together&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Finally we can replace the input sequence in $fold-right-sc with a generator:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fold-right-sc-lifted-inner := function ($seqGen as function(xs:integer) as array(*),
                                    $index as xs:integer,
                                    $zero as item()*,
                                    $f as function(item(), item()*) as item()* ,
                                    $fGetPartial as function(*),
                                    $self as function(*)
                                   ) as item()*
                                {
                                  let $nextSeqResult := $seqGen($index),
                                      $isEndOfSeq :=  $nextSeqResult(1),
                                      $seqItem := $nextSeqResult(2)
                                    return
                                      if($isEndOfSeq) then $zero
                                        else
                                          if(function-arity($fGetPartial($seqItem, $zero)) eq 0)
                                            then $fGetPartial($seqItem, $zero) ()
                                            else $f($seqItem, $self($seqGen, $index+1, $zero, $f, $fGetPartial, $self))
                                },

    $fold-right-sc-lifted := function ($seqGen as function(xs:integer) as array(*),
                                       $zero as item()*,
                                       $f as function(item(), item()*) as item()*,
                                       $fGetPartial as function(*) 
                                      ) as item()*
                                      {
                                         $fold-right-sc-lifted-inner($seqGen, 1, $zero, $f, $fGetPartial, $fold-right-sc-lifted-inner)
                                      },
                                  
   $NaN := xs:double('NaN'),
   
   $fSeq1ToN := function($ind as xs:integer, $indStart as xs:integer, $indEnd as xs:integer) as array(*)
                {
                  if($ind lt  $indStart or $ind gt $indEnd)
                    then  array{true(), $NaN}
                    else array{false(), $ind}
                },
   $fSeq-1-6 := $fSeq1ToN(?, 1, 6),
   $fSeq-1-1M := $fSeq1ToN(?, 1, 1000000),
   $fSeq-1-1M-minus-3 := function($n as xs:integer)
   {
     array{$fSeq-1-1M($n)(1), $fSeq-1-1M($n)(2) -3}
   },
               
   $fAdd := function($x, $y)  {$x + $y},
   $fMult  := function($x, $y)  {$x * $y},
   $fMultGetPartial := function($x, $y)
   {
     if($x eq 0)
       then function() {0}
       else function($z) {$x * $z}
   }
   
   return
     $fold-right-sc-lifted($fSeq-1-1M-minus-3, 1, $fMult, $fMultGetPartial) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this expression (and even one involving a sequence of 10M items take &lt;code&gt;0&lt;/code&gt; seconds to be evaluated in both BaseX and Saxon, producing the correct result &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/e00a1c4c-ee3a-473e-8386-c6fbf10b6d04" alt="image"/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;br/&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This article demonstrated the problems inherent to the standard XPath &lt;strong&gt;fn:fold-right&lt;/strong&gt; and correctly determined the root causes for these problems: no short-circuiting and no collection generators.&lt;/p&gt;
&lt;p&gt;Then a step-by-step solution was built that shows how to implement lazy evaluation in XPath based on short-circuiting and collection generators. This fixed the error raised by BaseX and dramatically reduced the evaluation time of
Saxon from &lt;code&gt;261&lt;/code&gt; seconds to &lt;code&gt;0&lt;/code&gt; seconds.&lt;/p&gt;
&lt;p&gt;The new function produced can be called &lt;strong&gt;&lt;code&gt;$fold-lazy&lt;/code&gt;&lt;/strong&gt; and is a good candidate for inclusion in the XPath 4.0 standard functions.&lt;/p&gt;
&lt;p&gt;A complete design and implementation of a general collection-generator will be published in a separate article.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #667 closed</title>
   <pubDate>Tue, 29 Aug 2023 14:49:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/667</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-667</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath minor edits, 4.16 through end&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #642 closed</title>
   <pubDate>Tue, 29 Aug 2023 13:09:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/642</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-642</guid>
   <description>&lt;div&gt;&lt;p&gt;561: Editorial (abbreviation fn=function, drop lambda syntax)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #646 closed</title>
   <pubDate>Tue, 29 Aug 2023 12:39:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/646</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-646</guid>
   <description>&lt;div&gt;&lt;p&gt;508: Editorial, examples revised (array:split, array:slice, others)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #627 closed</title>
   <pubDate>Tue, 29 Aug 2023 12:38:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/627</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-627</guid>
   <description>&lt;div&gt;&lt;p&gt;624: Adjusted function category descriptions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #662 closed</title>
   <pubDate>Tue, 29 Aug 2023 12:36:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/662</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-662</guid>
   <description>&lt;div&gt;&lt;p&gt;658b: changes to constructor functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #656 closed</title>
   <pubDate>Tue, 29 Aug 2023 12:36:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/656</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-656</guid>
   <description>&lt;div&gt;&lt;p&gt;Better return type for map pair&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #654 closed</title>
   <pubDate>Tue, 29 Aug 2023 12:36:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/654</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-654</guid>
   <description>&lt;div&gt;&lt;p&gt;Add covers-40 attribute to generated tests&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #644 closed</title>
   <pubDate>Tue, 29 Aug 2023 12:35:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/644</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-644</guid>
   <description>&lt;div&gt;&lt;p&gt;Adjusted CSS to target classes, not element + classes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #643 closed</title>
   <pubDate>Tue, 29 Aug 2023 12:35:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/643</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-643</guid>
   <description>&lt;div&gt;&lt;p&gt;414, 546: Adjusted XDM description of xs:string, added coding&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #669 created</title>
   <pubDate>Sun, 20 Aug 2023 22:20:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/669</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-669</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo in XSLT §26.4 - "appearing appearing"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The word "appearing" is doubled.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #668 created</title>
   <pubDate>Fri, 18 Aug 2023 17:42:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/668</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-668</guid>
   <description>&lt;div&gt;&lt;p&gt;Definition of HTML case-insensitive collation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The semantics of the collation URI http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive are described (in F&amp;amp;O section 5.3.4) are described by reference to the HTML5 "living spec". The cross-reference to a changing spec is inevitably fragile and I suggest we make it non-normative. I also suggest that we define the ordering implied by this collation rather than leaving it implementation defined.&lt;/p&gt;
&lt;p&gt;A sufficient definition is: the comparison of two strings A and B under this collation delivers the same result as the comparison of ascii-lower-case(A) to ascii-lower-case(B) under the Unicode codepoint collation, where ascii-lower-case($S) function is translate($S, "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcedfghijklmnopqrstuvwxyz").&lt;/p&gt;
&lt;p&gt;Perhaps we should also consider defining a collation URI that is unicode-case-blind, with the same definition except that ascii-lower-case(X) is replaced by fn:lower-case(X).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #667 created</title>
   <pubDate>Fri, 18 Aug 2023 01:54:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/667</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-667</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath minor edits, 4.16 through end&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Various small edits. I added two simple examples to help readers quickly understand the difference between &lt;code&gt;=&amp;gt;&lt;/code&gt; and &lt;code&gt;=!&amp;gt;&lt;/code&gt; before going to more complex examples.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #666 created</title>
   <pubDate>Thu, 17 Aug 2023 10:02:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/666</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-666</guid>
   <description>&lt;div&gt;&lt;p&gt;Polyfill function implementations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;For transition purposes, it may be useful to provide or enable "polyfill" implementations of functions that are specified in QT40, but not yet available in all implementations. Currently this is not possible because the relevant namespaces are reserved.&lt;/p&gt;
&lt;p&gt;I propose that we relax the rule on reserved function namespaces:&lt;/p&gt;
&lt;p&gt;(a) in XQuery, if the function has an annotation along the lines `%polyfill('http://www.w3.org/2005/xpath-functions'), where the parameter indicates that the function should be injected into the specified namespace instead of the namespace of the containing module.&lt;/p&gt;
&lt;p&gt;(b) in XSLT, if the attribute &lt;code&gt;xsl:function/@override-extension-function="no"&lt;/code&gt; is present. A function is allowed to be in a reserved namespace if this attribute is present.&lt;/p&gt;
&lt;p&gt;I've chosen syntax here that's already available in 3.0/3.1, to minimise the impact on existing processors. Of course, we can't retrospectively change the 3.0/3.1 specs to authorise older processors to make this work as intended. But we can suggest that they bend the rules.&lt;/p&gt;
&lt;p&gt;In both cases, (a) if the annotation is present then the rules on reserved namespaces don't apply, and (b) the function declaration is ignored if the processor provides its own internal implementation of the function.&lt;/p&gt;
&lt;p&gt;I'm proposing to publish polyfill implementations of many of the new functions (not the complex ones like parse-html!). But I don't intend to make this a QT4 deliverable, I'm thinking of doing it as an open source project in GitHub/Saxonica space.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #665 created</title>
   <pubDate>Thu, 17 Aug 2023 08:51:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/665</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-665</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo in fn:items-before and fn:items-ending-where&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specifications refer to $seq in place of $input.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #664 created</title>
   <pubDate>Wed, 16 Aug 2023 20:19:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/664</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-664</guid>
   <description>&lt;div&gt;&lt;p&gt;663 xsl:original keywords&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #663.&lt;/p&gt;
&lt;p&gt;A simple fix, just specify that if xsl:original is called with keywords, the keywords used are those of the overridden function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #663 created</title>
   <pubDate>Tue, 15 Aug 2023 22:17:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/663</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-663</guid>
   <description>&lt;div&gt;&lt;p&gt;Calling xsl:original() with keywords&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We need to define what happens if xsl:original() is called with keyword arguments.&lt;/p&gt;
&lt;p&gt;The answer isn't trivial, because (for 3.0 compatibility reasons) an overriding function isn't required to use the same parameter keywords as the function it overrides.&lt;/p&gt;
&lt;p&gt;Perhaps we should recognize that there are functions that do not support argument keywords. This might be the case, for example, with Java or C# extension functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #662 created</title>
   <pubDate>Tue, 15 Aug 2023 16:34:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/662</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-662</guid>
   <description>&lt;div&gt;&lt;p&gt;658b: changes to constructor functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes argument name to "value", makes argument default to context item.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #661 closed</title>
   <pubDate>Tue, 15 Aug 2023 16:32:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/661</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-661</guid>
   <description>&lt;div&gt;&lt;p&gt;658: constructor functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #661 created</title>
   <pubDate>Tue, 15 Aug 2023 16:16:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/661</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-661</guid>
   <description>&lt;div&gt;&lt;p&gt;658: constructor functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes argument name of constructor functions to &lt;code&gt;value&lt;/code&gt;, makes the argument optional, revises the way the &lt;code&gt;proto&lt;/code&gt; markup is used to indicate emptyOk arguments.&lt;/p&gt;
&lt;p&gt;Fix #658&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #638 closed</title>
   <pubDate>Tue, 15 Aug 2023 11:59:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/638</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-638</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: Avoid e.g.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #660 created</title>
   <pubDate>Tue, 15 Aug 2023 10:03:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/660</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-660</guid>
   <description>&lt;div&gt;&lt;p&gt;Static functions, default parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the current XQuery draft in &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-function-parameters"&gt;5.18.3 Function Parameters&lt;/a&gt;, it’ stated that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a parameter is optional, then all subsequent parameters in the list must also be optional. In other words, the parameter list includes zero or more required parameters followed by zero or more optional parameters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I would suggest raising &lt;code&gt;XPST0017&lt;/code&gt; if that’s not the case.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #659 created</title>
   <pubDate>Mon, 14 Aug 2023 18:03:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/659</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-659</guid>
   <description>&lt;div&gt;&lt;p&gt;647: schema location hints&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #647&lt;/p&gt;
&lt;p&gt;Note: Need to check that this builds successfully. In my working copy, the new text for "import schema" found its way into the "xquery-assembled.xml" file but not into the final HTML. I can't see any reason for this.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #658 created</title>
   <pubDate>Mon, 14 Aug 2023 09:11:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/658</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-658</guid>
   <description>&lt;div&gt;&lt;p&gt;Constructor Function: Parameter Name, Zero-Arity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The parameter name for constructor functions is &lt;code&gt;$arg&lt;/code&gt;: https://qt4cg.org/specifications/xpath-functions-40/Overview.html#constructor-functions&lt;/p&gt;
&lt;p&gt;We should change it to &lt;code&gt;$value&lt;/code&gt;, in alignment with the XQFO functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:string(value := 123),
xs:string(value := 123)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #657 created</title>
   <pubDate>Thu, 10 Aug 2023 12:14:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/657</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-657</guid>
   <description>&lt;div&gt;&lt;p&gt;User-defined functions in main modules without `local` prefix&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I wonder where this has been discussed before (but I can’t find it):&lt;/p&gt;
&lt;p&gt;For simple scripts and main modules, the necessity to prefix all functions with a &lt;code&gt;local&lt;/code&gt; prefix is cumbersome. Next, it’s counterintuitive as the prefix is not required for variable declarations:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function local:f() { 1 };
declare variable $x := 1;
$x + local:f()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s possible to use &lt;code&gt;declare default function namespace '...';&lt;/code&gt;, but that’s doesn’t feel much easier:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare default function namespace 'x';
declare function f() { 1 };
f()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wonder if we can do one of the following things?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Allow functions without namespace (&lt;code&gt;declare function x() {}&lt;/code&gt;, &lt;code&gt;declare function Q{}x() {}&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Assign functions without namespace to the default function namespace.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #656 created</title>
   <pubDate>Wed, 9 Aug 2023 09:29:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/656</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-656</guid>
   <description>&lt;div&gt;&lt;p&gt;Better return type for map pair&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Uses a record type (record(key, value)) for the return type of map:pair, to give more precision and to align with map:pairs() and map:of-pairs()&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #655 created</title>
   <pubDate>Wed, 9 Aug 2023 07:30:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/655</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-655</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:sort-with: Comparators&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See https://github.com/qt4cg/qtspecs/issues/93#issuecomment-1017937220:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One solution to more powerful sorting would a variant of fn:sort that uses a comparator function. We've resisted this in the past because we can't trust a user-supplied comparator function to be well behaved (e.g. transitive). I wonder how serious an obstacle this is?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We should try to trust; there are much more hidden pitfalls in the existing language.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:sort&lt;/code&gt; could be extended with a &lt;code&gt;comparator&lt;/code&gt; parameter with two arguments and returning &lt;code&gt;xs:boolean&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: returns John, Joe, Jim, Jack :)
sort(('Jack', 'Joe', 'Jim', 'John'), comparator := op('&amp;gt;'))

(: returns -1, 2, -3 :)
sort((-3, -1, 2), comparator := fn($a, $b) { abs($a) &amp;lt; abs($b) })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, if a comparator is supplied, other parameters (&lt;code&gt;collation(s)&lt;/code&gt;, &lt;code&gt;key(s)&lt;/code&gt;, &lt;code&gt;ascending&lt;/code&gt;, see #623) must not be specified in parallel.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #654 created</title>
   <pubDate>Wed, 9 Aug 2023 06:37:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/654</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-654</guid>
   <description>&lt;div&gt;&lt;p&gt;Add covers-40 attribute to generated tests&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add covers-40 attribute to the generated test set for function keywords, to avoid failures in app-CatalogCheck test Catalog014&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #653 created</title>
   <pubDate>Mon, 7 Aug 2023 17:18:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/653</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-653</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery - option to suppress entity expansion&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As an enabler for #652 (and for other reasons) I propose that XQuery should have an option to suppress recognition of entity references. This is appropriate for any context in which XQuery expressions are embedded in XML (including our own test suite), where entity expansion will have already been done before the XQuery text is parsed. With this change, any XPath expression becomes a valid and equivalent XQuery expression.&lt;/p&gt;
&lt;p&gt;This could be done using a new prolog declaration such as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;declare entity-expansion on|off;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If set to "off", &lt;code&gt;&amp;amp;&lt;/code&gt; is treated as a normal character in contexts such as string literals and direct element constructors, rather than signalling an entity reference. The default remains "on".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #652 created</title>
   <pubDate>Mon, 7 Aug 2023 17:04:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/652</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-652</guid>
   <description>&lt;div&gt;&lt;p&gt;Defining a common function library for XPath, XSLT, and XQuery applications&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue is motivated by Mary Holstege's talk at Balisage 2023: Adventures in Single-Sourcing XSLT and XQuery&lt;/p&gt;
&lt;p&gt;https://www.balisage.net/Proceedings/vol28/html/Holstege01/BalisageVol28-Holstege01.html&lt;/p&gt;
&lt;p&gt;It is also motivated by other issues that have been raised here proposing improved capabilities for writing applications in pure XPath.&lt;/p&gt;
&lt;p&gt;I propose that we define a syntax for creating a module containing a set of function definitions that can be used to define a function library available to both XQuery and XSLT applications, and potentially also by pure XPath applications. A file should contain all the functions in one namespace. The format should be suitable for translation into other formats such as XSLT and XQuery, which means it should be in XML (though we could also consider JSON). We should provide XSLT stylesheets that convert libraries in this format into XSLT stylesheet modules or XQuery library modules.&lt;/p&gt;
&lt;p&gt;Function signatures should be expressed in an XML syntax similar to &lt;code&gt;xsl:function&lt;/code&gt; in XSLT.&lt;/p&gt;
&lt;p&gt;Function bodies should generally be written in the form of a single XPath expression, though there should be fallback mechanisms to allow XSLT and XQuery implementations to be supplied in cases where XPath lacks sufficient expressive power.&lt;/p&gt;
&lt;p&gt;There should be mechanisms to define the more important components of the static context, such as namespace bindings and dependencies on other function libraries.&lt;/p&gt;
&lt;p&gt;We could consider using this format to publish "polyfill" implementations of many of the new XPath 4.0 functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #651 created</title>
   <pubDate>Mon, 7 Aug 2023 16:48:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/651</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-651</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:log → fn:message&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think we've made a mistake in the choice of name for this function. Without the namespace prefix, it looks far too much like a function that computes logarithms. Also, it would be nice in the future to find some way of allowing the math functions to be called without a namespace prefix, and this choice scuppers that possibility.&lt;/p&gt;
&lt;p&gt;I think my choice would be fn:message.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #650 created</title>
   <pubDate>Sun, 6 Aug 2023 06:05:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/650</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-650</guid>
   <description>&lt;div&gt;&lt;p&gt;649: fix an xsl:fallback problem&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Ensures that an xsl:fallback instruction is not processed in forwards compatibility mode, so that errors in the instruction are reported rather than being silently ignored; informally encourages adoption of the same rule in 3.0 and earlier processors where possible.&lt;/p&gt;
&lt;p&gt;Fix #649&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #649 created</title>
   <pubDate>Sat, 5 Aug 2023 19:06:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/649</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-649</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:fallback&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I made the mistake of writing a test that said:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;xsl:array version="4.0"&amp;gt;
      &amp;lt;xsl:fallback select="array{1 to 10}"/&amp;gt;
      &amp;lt;xsl:sequence select="1 to 10"/&amp;gt;
    &amp;lt;/xsl:array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, the &lt;code&gt;xsl:fallback&lt;/code&gt; instruction doesn't allow an &lt;code&gt;@select&lt;/code&gt; attribute; and there's not much point in adding one, because xsl:fallback is only there for a processor implementing XSLT 1.0, 2.0, or 3.0, and such processors will ignore anything the XSLT 4.0 specification says.&lt;/p&gt;
&lt;p&gt;However, we could supply some clarification of what such a processor is expected to do when it finds an &lt;code&gt;xsl:fallback&lt;/code&gt; element with an unexpected &lt;code&gt;@select&lt;/code&gt; attribute. At present, it seems that because we don't say anything else, the &lt;code&gt;xsl:fallback&lt;/code&gt; element is itself evaluated in forwards compatibility mode, which means that the select attribute is ignored. Since the whole purpose of xsl:fallback is to provide code that an earlier XSLT processor can handle, I think it would make much more sense to say: "the effective version for an xsl:fallback element and its descendants, unless overridden with an explicit [xsl:]version attribute, is the version of the processor in use", so a 3.0 processor executing an &lt;code&gt;xsl:fallback&lt;/code&gt; instruction in a 4.0 stylesheet reports a static error if it finds a construct like the above.&lt;/p&gt;
&lt;p&gt;Although the 4.0 spec cannot dictate what a 3.0 processor does, we could add a non-normative note encouraging this interpretation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #648 created</title>
   <pubDate>Thu, 3 Aug 2023 09:23:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/648</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-648</guid>
   <description>&lt;div&gt;&lt;p&gt;Schema for FN namespace should block extension and substitution&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Weird things can happen if the user defines a schema that imports the schema for the FN namespace and then adds members to its substutition groups or extends its complex types. We can prevent this happening by blocking substitution and extension. We should also specify that when we validate the input to fn:xml-to-json, xsi:schemaLocation must be disabled.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #647 created</title>
   <pubDate>Tue, 1 Aug 2023 13:29:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/647</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-647</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery: import schema with multiple location hints&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XQuery 3.1 clarified what is intended when an "import module" declaration provides multiple location hints - there's now a clear indication that the processor should expect to load multiple modules all with the same module namespace.&lt;/p&gt;
&lt;p&gt;For "import schema" it's still completely vague what is intended, and there's no analogy in XSD or XSLT which only ever allow a single location URI to be supplied. Currently we say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The URILiterals that follow the at keyword are optional location hints, and can be interpreted or disregarded in an implementation-dependent way. Multiple location hints might be used to indicate more than one possible place to look for the schema or multiple physical resources to be assembled to form the schema.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I propose changing this to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The URILiterals that follow the at keyword are optional location hints, intended to allow a processor to locate schema documents containing definitions of the required schema components in the target namespace. Processors may interpret or disregard these hints in an implementation-dependent way. The &lt;em&gt;recommended&lt;/em&gt; default strategy is as follows (but this may be varied through user options):&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;All the location hints are dereferenced, treating them as relative URIs&lt;/li&gt;
&lt;li&gt;If any location hint cannot be dereferenced, or fails to resolve to a valid schema document with the required target namespace, then that location hint is disregarded (optionally with a warning); but if none of the location hints can be resolved to a valid schema document with the required target namespace, then a static error is reported.&lt;/li&gt;
&lt;li&gt;If multiple location hints are dereferenced, yielding multiple schema documents A, B, and C, then they should be treated as if there were a single schema document containing &lt;code&gt;xs:include&lt;/code&gt; declarations referencing A, B, and C. This implies that the schema documents must together comprise a valid schema, for example there cannot be two different type definitions with the same name.&lt;/li&gt;
&lt;li&gt;Notwithstanding the previous rule, if a processor is able to establish that two or more location hints refer to identical or equivalent schema documents, then the duplicates should be ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This text gives users and implementors alike a much better sense of what is intended, while still retaining flexibility for implementations to do something different.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #646 created</title>
   <pubDate>Wed, 26 Jul 2023 11:12:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/646</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-646</guid>
   <description>&lt;div&gt;&lt;p&gt;508: Editorial, examples revised (array:split, array:slice, others)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@ndw @michaelhkay I wonder what we should do with minor edits like this (which fixes an example)?
Should we merge them by ourselves, or wait for someone to approve and merge it?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #645 created</title>
   <pubDate>Wed, 26 Jul 2023 07:09:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/645</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-645</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: Use `\n` instead of `\r\n` in XML documents&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If we use a consistent newline encoding in all XML documents, it will be easier to perform cleanups and to edit documents in the GitHub frontend. Most documents already use Unix-style newlines. If I am correct, only three documents need to be updated:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;specifications/xslt-xquery-serialization-40/src/errors.xml
specifications/xslt-xquery-serialization-40/src/ns-xslt-xquery-serialization.xml
specifications/xslt-xquery-serialization-40/src/xslt-xquery-serialization.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #644 created</title>
   <pubDate>Wed, 26 Jul 2023 03:02:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/644</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-644</guid>
   <description>&lt;div&gt;&lt;p&gt;Adjusted CSS to target classes, not element + classes&lt;/p&gt;…failed to parse issue text…&lt;/div&gt;</description>
</item><item>
   <title>Pull request #643 created</title>
   <pubDate>Wed, 26 Jul 2023 02:22:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/643</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-643</guid>
   <description>&lt;div&gt;&lt;p&gt;414, 546: Adjusted XDM description of xs:string, added coding&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Per meeting today, made good on my comment in #546&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #642 created</title>
   <pubDate>Tue, 25 Jul 2023 18:29:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/642</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-642</guid>
   <description>&lt;div&gt;&lt;p&gt;561: Editorial (abbreviation fn=function, drop lambda syntax)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Old &lt;code&gt;-&amp;gt;&lt;/code&gt; lambda syntax removed from various examples; minor unifications.&lt;/p&gt;
&lt;p&gt;I believe it’s ready to merge; please jump in otherwise.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #634 closed</title>
   <pubDate>Tue, 25 Jul 2023 18:12:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/634</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-634</guid>
   <description>&lt;div&gt;&lt;p&gt;471: Quotes (missing cases)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 043 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 25 Jul 2023 16:50:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/07-25</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-07-25</guid>
</item><item>
   <title>Issue #641 created</title>
   <pubDate>Tue, 25 Jul 2023 16:04:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/641</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-641</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization fallback&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that we drop some serialization errors in favour of producing a fallback representation of the supplied value.&lt;/p&gt;
&lt;p&gt;The rationale is that (a) serialization is often used in contexts like xsl:message where the primary purpose is diagnostic, and the last thing you want when producing diagnostics is a secondary error; and (b) seeing a fallback representation of an inappropriate value often shows you much more clearly what you have done wrong than any error message can do.&lt;/p&gt;
&lt;p&gt;Compare with the &lt;code&gt;.toString()&lt;/code&gt; method in Java and similar languages, which always outputs something even if it's not quite what you wanted.&lt;/p&gt;
&lt;p&gt;I'm not proposing to change the principle that the output should always be syntactically valid (e.g. well formed XML or JSON).&lt;/p&gt;
&lt;p&gt;I think some of the specific error conditions we might drop are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In sequence normalization rule 7, instead of raising an error when an attribute, namespace, or function (including a map or array) is encountered, serialize that item using the adaptive output method, treat the result as a text node, and insert the text node into sequence S6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the JSON output method: when a sequence of two or more items is encountered, instead of raising SERE0023, treat it as an array containing those items.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Closely related, and perhaps best considered together: should the &lt;code&gt;fn:string()&lt;/code&gt; function accept anything as input, and never raise an error?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #632 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:58:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/632</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-632</guid>
   <description>&lt;div&gt;&lt;p&gt;SENR0001: Error description updated&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #630 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:58:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/630</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-630</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath spec ch. 3 minor edits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #574 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:58:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/574</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-574</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:log: Trace and discard results&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #629 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:58:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/629</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-629</guid>
   <description>&lt;div&gt;&lt;p&gt;574: fn:log: Trace and discard results&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #508 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:57:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/508</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-508</guid>
   <description>&lt;div&gt;&lt;p&gt;New Map &amp;amp; Array Functions: Inconsistencies&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #609 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:57:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/609</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-609</guid>
   <description>&lt;div&gt;&lt;p&gt;508: New Map &amp;amp; Array Functions: Inconsistencies&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #23 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:57:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/23</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-23</guid>
   <description>&lt;div&gt;&lt;p&gt;Extending element and attribute tests to NameTest unions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #606 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:57:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/606</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-606</guid>
   <description>&lt;div&gt;&lt;p&gt;23 Allow element(A|B) and attribute(A|B)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #602 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:57:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/602</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-602</guid>
   <description>&lt;div&gt;&lt;p&gt;Semi-strict static typing: reporting implausible expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #603 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:57:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/603</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-603</guid>
   <description>&lt;div&gt;&lt;p&gt;602 Implausible Expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #561 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:56:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/561</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-561</guid>
   <description>&lt;div&gt;&lt;p&gt;Alias for `function` keyword; drop thin arrow syntax?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #589 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:56:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/589</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-589</guid>
   <description>&lt;div&gt;&lt;p&gt;561: abbreviation fn=function, drop lambda syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #575 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:55:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/575</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-575</guid>
   <description>&lt;div&gt;&lt;p&gt;359: fn:void: Absorb result of evaluated argument&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #414 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:55:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/414</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-414</guid>
   <description>&lt;div&gt;&lt;p&gt;Lift character set restriction of xs:string&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #546 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:55:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/546</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-546</guid>
   <description>&lt;div&gt;&lt;p&gt;414: Attempt to implement expanding the allowed character repertoire&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #533 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:54:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/533</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-533</guid>
   <description>&lt;div&gt;&lt;p&gt;413: Spec for CSV parsing with fn:parse-csv()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #640 created</title>
   <pubDate>Tue, 25 Jul 2023 15:38:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/640</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-640</guid>
   <description>&lt;div&gt;&lt;p&gt;601: fn:all → fn:every?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@ndw Should be ready to be merged&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #514 closed</title>
   <pubDate>Tue, 25 Jul 2023 15:30:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/514</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-514</guid>
   <description>&lt;div&gt;&lt;p&gt;Lambda expression: Annotations&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #639 created</title>
   <pubDate>Tue, 25 Jul 2023 15:26:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/639</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-639</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:void: Naming, Arguments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A new function &lt;code&gt;fn:void&lt;/code&gt; was added to the spec (see #359 for details).&lt;/p&gt;
&lt;p&gt;This issue can be used to discuss alternative names for the function, as was suggested by @dnovatchev.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #638 created</title>
   <pubDate>Tue, 25 Jul 2023 14:35:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/638</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-638</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: Avoid e.g.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Occurrences of &lt;code&gt;e.g.&lt;/code&gt; should be replaced with alternatives, such as &lt;code&gt;(for example)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See https://github.com/qt4cg/qtspecs/pull/629#issuecomment-1649952964&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #637 created</title>
   <pubDate>Tue, 25 Jul 2023 13:35:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/637</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-637</guid>
   <description>&lt;div&gt;&lt;p&gt;Annotation Values: Booleans&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Functions annotations in XQuery have become a popular feature to attach vendor-specific information (for unit testing, locking, RESTXQ, etc.) to functions.&lt;/p&gt;
&lt;p&gt;Annotation values are limited to literals, though. It would often be helpful to supply boolean values, but we don’t have literals for that in the language.&lt;/p&gt;
&lt;p&gt;I suggest enhancing the existing grammar…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Annotation  ::=  "%" EQName ("(" Literal ("," Literal)* ")")?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and allowing the strings &lt;code&gt;false()&lt;/code&gt; and &lt;code&gt;true()&lt;/code&gt; as values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Annotation  ::=  "%" EQName ("(" AnnotationValue ("," AnnotationValue)* ")")?
AnnotationValue  :=  Literal | "false()" | "true()"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The suggestion is upward compatible if we should decide later on that we want to allow arbitrary expressions for annotation values.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #636 closed</title>
   <pubDate>Tue, 25 Jul 2023 07:25:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/636</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-636</guid>
   <description>&lt;div&gt;&lt;p&gt;Ternary operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #636 created</title>
   <pubDate>Tue, 25 Jul 2023 03:53:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/636</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-636</guid>
   <description>&lt;div&gt;&lt;p&gt;Ternary operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Per #171 the WG decided to allow the ternary operator. I'm looking at &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40-diff.html#id-conditionals"&gt;4.16 of the current version of XPath 4.0&lt;/a&gt; and the ternary operator is presented as illustrative, but the operator does not appear to have been properly introduced and defined in the specs. The terms "ternary", "??", and "!!" appear only twice each, and in contexts that could be confused as being illustrative.&lt;/p&gt;
&lt;p&gt;By my reading, the definition of &lt;code&gt;[11] ExprSingle&lt;/code&gt; should be expanded to allow a new option, call it &lt;code&gt;TernaryOption&lt;/code&gt;, and to the grammar should be new entry &lt;code&gt;TernaryOption ::= Expr "??" ExprSingle "!!" ExprSingle&lt;/code&gt;. Does such a definition allow any ambiguous constructs?&lt;/p&gt;
&lt;p&gt;I propose that 4.16 be subdivided into two subsections, the first one briefly introducing the ternary operator and the second handling if/then statements. Slight aside: the latter should also include a note pointing out how to avoid a then branch (and an example), a courtesy to developers who are overly accustomed to the unbraced approach as to not give the braced approach much thought.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #635 created</title>
   <pubDate>Mon, 24 Jul 2023 16:28:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/635</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-635</guid>
   <description>&lt;div&gt;&lt;p&gt;451: Schema compatibility&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR addresses part (not all) of issue 451.&lt;/p&gt;
&lt;p&gt;It recognises that an application may use more than one schema; for example in a pipeline using multiple stylesheets, it must be possible for the first stylesheet to produce valid output that is valid input to the second, without requiring that the two stylesheet have absolutely identical schema imports. It recognises that there are cases (for example involving substitution groups) where two schemas X and Y may both include the same type T, but produce different results when an element is validated against T. So it defines a concept of schema compatibility and defines its limitations, especially on the semantics of item types such as &lt;code&gt;element(*,T)&lt;/code&gt; and &lt;code&gt;schema-element(E)&lt;/code&gt;. The rules for schema compatibility between different modules of a query and between different packages in a stylesheet are tightened up and brought into line with each other.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #634 created</title>
   <pubDate>Mon, 24 Jul 2023 13:54:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/634</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-634</guid>
   <description>&lt;div&gt;&lt;p&gt;471: Quotes (missing cases)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See Matt’s comment in https://github.com/qt4cg/qtspecs/pull/533#issuecomment-1647945368&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #389 closed</title>
   <pubDate>Sat, 22 Jul 2023 15:38:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/389</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-389</guid>
   <description>&lt;div&gt;&lt;p&gt;The fn:build-uri function needs to perform URI encoding for path and query segments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #556 closed</title>
   <pubDate>Sat, 22 Jul 2023 15:35:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/556</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-556</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization phase 5 note unclear&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #621 closed</title>
   <pubDate>Sat, 22 Jul 2023 13:41:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/621</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-621</guid>
   <description>&lt;div&gt;&lt;p&gt;Removed chapter 4 from XDM&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #626 closed</title>
   <pubDate>Sat, 22 Jul 2023 13:41:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/626</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-626</guid>
   <description>&lt;div&gt;&lt;p&gt;Adjusted serialization step 5 note&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #625 closed</title>
   <pubDate>Sat, 22 Jul 2023 13:40:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/625</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-625</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath minor edits, chh. 1-2&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #633 created</title>
   <pubDate>Sat, 22 Jul 2023 03:35:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/633</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-633</guid>
   <description>&lt;div&gt;&lt;p&gt;Edits ch. 4.1 through 4.15&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Note, this batch of edits includes a shift from "built-in" to "system" when describing functions, per edits made in XDM.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #632 created</title>
   <pubDate>Fri, 21 Jul 2023 21:18:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/632</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-632</guid>
   <description>&lt;div&gt;&lt;p&gt;SENR0001: Error description updated&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Observed by @line-o:
https://xmlcom.slack.com/archives/C01GVC3JLHE/p1689946671105499&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #631 created</title>
   <pubDate>Fri, 21 Jul 2023 17:46:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/631</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-631</guid>
   <description>&lt;div&gt;&lt;p&gt;600: fn:decode-from-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I did my best to define rules for a counterpart of the &lt;code&gt;fn:encode-for-uri&lt;/code&gt; function, including various edge cases.&lt;/p&gt;
&lt;p&gt;I’m convinced that the function has been requested often enough to justify its inclusion in the spec. I’m also aware that users may have different expectations regarding the details of the conversion rules. On the other hand, this discussion can be observed for other languages as well, and that’s mostly due to the… heterogeneous history of URIs, not the actual implementations. For example, &lt;code&gt;URLDecode.decode&lt;/code&gt; in Java converts the plus character to a space, and JavaScript’s &lt;code&gt;decodeURI&lt;/code&gt; adopts it unchanged. I decided to convert it as well, as &lt;code&gt;fn:encode-for-uri&lt;/code&gt; encodes the plus sign to &lt;code&gt;%2B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;@ndw My rules have largely been inspired by your decoding rules for &lt;code&gt;fn:parse-uri&lt;/code&gt;. I hope these rules can be dropped and replaced with a reference to this new function (analogous to &lt;code&gt;fn:build-uri&lt;/code&gt;, which references &lt;code&gt;fn:encode-for-uri&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 043 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 21 Jul 2023 08:30:05 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/07-25</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-07-25</guid>
</item><item>
   <title>Pull request #630 created</title>
   <pubDate>Fri, 21 Jul 2023 02:53:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/630</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-630</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath spec ch. 3 minor edits&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Minor edits to ch. 3 of XPath spec. Note, this PR includes an adjustment to the XDM spec, in the form of a cross-reference, because the terms "string value" and "typed value" are heavily used in XDM but defined only in XPath.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #629 created</title>
   <pubDate>Thu, 20 Jul 2023 16:36:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/629</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-629</guid>
   <description>&lt;div&gt;&lt;p&gt;574: fn:log: Trace and discard results&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;New function &lt;code&gt;fn:log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rules of &lt;code&gt;fn:trace&lt;/code&gt; revised&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #620 closed</title>
   <pubDate>Thu, 20 Jul 2023 07:25:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/620</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-620</guid>
   <description>&lt;div&gt;&lt;p&gt;[616] Converted X Node to x node&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #622 closed</title>
   <pubDate>Thu, 20 Jul 2023 07:24:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/622</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-622</guid>
   <description>&lt;div&gt;&lt;p&gt;XDM minor edits, back material&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #628 created</title>
   <pubDate>Thu, 20 Jul 2023 07:07:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/628</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-628</guid>
   <description>&lt;div&gt;&lt;p&gt;distinct-values and duplicate-values: order of results&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've noticed that a few tests have appeared in QT4tests distinct-values() that assume the order of results is "order of first appearance" (search for &lt;code&gt;assert-deep-eq&lt;/code&gt;). We should either change the tests, or change the spec to require order of first appearance.&lt;/p&gt;
&lt;p&gt;Since no implementors have objected to these tests, it seems likely that implementations are delivering results in "order of first appearance", and if that is the case, then I think it would be a convenience to users to guarantee this in the spec.&lt;/p&gt;
&lt;p&gt;To allow for parallel implementations, we could say that the order is undefined if ordering mode is unordered.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #627 created</title>
   <pubDate>Thu, 20 Jul 2023 02:39:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/627</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-627</guid>
   <description>&lt;div&gt;&lt;p&gt;624: Adjusted function category descriptions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Attempted revision in light of #624. Perhaps not everything is exactly right, but it should be a step in the right direction.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #626 created</title>
   <pubDate>Thu, 20 Jul 2023 01:47:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/626</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-626</guid>
   <description>&lt;div&gt;&lt;p&gt;Adjusted serialization step 5 note&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This brief edit addresses issue #556, which I've chosen to handle apophatically.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #625 created</title>
   <pubDate>Thu, 20 Jul 2023 01:09:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/625</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-625</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath minor edits, chh. 1-2&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;All minor edits. Some edits are motivated by an attempt to address broken parallelism or some other form of localized inconsistency. Does not include questions about function descriptions, raised at #624.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #624 created</title>
   <pubDate>Wed, 19 Jul 2023 22:56:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/624</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-624</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath function definition clarification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the XPath specs, 2.2, &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40-diff.html#dt-function-definition"&gt;function definitions&lt;/a&gt;, the reader is informed that every (statically known) function definition takes one of three mutually exclusive categories: application, system, or external.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: Application functions are function definitions written in a host language such as XQuery or XSLT whose semantics are defined in this family of specifications. Their behavior (including the rules determining the static and dynamic context) follows the rules for such functions in the relevant host language specification.]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first sentence appears to point to user-written functions in the host languages, and the second sentence appears to point to functions defined by the host language specifications. I assume that this category is meant to include both, and I propose the language be tightened up to make that clear. If my assumption is incorrect, then some other type of revision is needed.&lt;/p&gt;
&lt;p&gt;Later on, when the term “built-in function” is introduced, it is not as clearly stated as it should be how that term maps onto the three-way division. It seems that “built-in function” encompasses all system functions and only those application functions that are defined by the specifications, and not user-written functions. Whatever the case, and whatever the best path of revision, this paragraph would be most effective if moved up with the tripartite category discussion.&lt;/p&gt;
&lt;p&gt;The term "external function" is introduced here in the static context, with language that is highly suggestive of a definition. But the definition proper is reserved for the dynamic context, and in shorter, different prose that I think loses some of the considerations provided in the static context. I propose that the two passages be consolidated and located in the static context, where the two other types of functions are defined, with an xref in the dynamic context to the meaning of external function.&lt;/p&gt;
&lt;p&gt;Down in the dynamic context:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The dynamically known function definitions may include external functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This sentence is a bit puzzling, because of course they are allowed to include all three types of functions -- none are forbidden, since, after all, the dynamically known functions are a superset of statically known ones. Perhaps the point is to drawn the reader's attention to those functions that are known dynamically but not statically? Perhaps this revision?: "Many of the function definitions known dynamically but not statically will be external functions, but they may include user-written application functions written in a host language, known only dynamically, e.g., through &lt;code&gt;fn:transform&lt;/code&gt;."&lt;/p&gt;
&lt;p&gt;Cumulatively the above points could go beyond mere minor touch-up, so comments are welcome before I attempt any edits.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #623 created</title>
   <pubDate>Wed, 19 Jul 2023 16:51:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/623</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-623</guid>
   <description>&lt;div&gt;&lt;p&gt;93: sort descending&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Enhances fn:sort to allow multiple major-to-minor sort keys each of which can independently specify a collation and an ascending/descending option.&lt;/p&gt;
&lt;p&gt;Also includes infrastructure changes to allow occurrence indicators on function arguments or results that reference a named record type.&lt;/p&gt;
&lt;p&gt;Similar changes will be needed for array:sort; to reduce the risk of rework I propose to make those changes after this PR has been reviewed and accepted.&lt;/p&gt;
&lt;p&gt;Fix #93&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #622 created</title>
   <pubDate>Wed, 19 Jul 2023 00:51:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/622</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-622</guid>
   <description>&lt;div&gt;&lt;p&gt;XDM minor edits, back material&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Note, the example was invalid because of a failure to access the included xsd file.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #621 created</title>
   <pubDate>Tue, 18 Jul 2023 22:52:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/621</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-621</guid>
   <description>&lt;div&gt;&lt;p&gt;Removed chapter 4 from XDM&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As noted in Slack, chapter 4 of the XDM specs is out of place. In this PR I have moved the very general material in chapter 4 to the preamble of chapter 6 (now 5), which provided the opportunity to orient the reader to the structure of that chapter.&lt;/p&gt;
&lt;p&gt;Cross-references to chapter 4 have been search for and dealt with. The CSS deletion comes from my observation that there is no such class &lt;code&gt;infoset-mapping&lt;/code&gt; in the resultant HTML file; section 4's &lt;code&gt;infoset-mapping&lt;/code&gt; is an id.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #620 created</title>
   <pubDate>Tue, 18 Jul 2023 22:29:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/620</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-620</guid>
   <description>&lt;div&gt;&lt;p&gt;[616] Converted X Node to x node&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Per #616 names of nodes have been set lowercase. This PR does not address the good suggestion that xrefs and styling be selectively applied. That is reserved for a future pass.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #619 created</title>
   <pubDate>Tue, 18 Jul 2023 21:28:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/619</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-619</guid>
   <description>&lt;div&gt;&lt;p&gt;XDM ch. 6 minor edits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #615 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:17:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/615</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-615</guid>
   <description>&lt;div&gt;&lt;p&gt;Xdm minor edits, chh. 3-5&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #128 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:17:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/128</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-128</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:replace: Tweaks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #612 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:17:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/612</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-612</guid>
   <description>&lt;div&gt;&lt;p&gt;128: fn:replace: Tweaks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #329 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:17:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/329</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-329</guid>
   <description>&lt;div&gt;&lt;p&gt;Keyword parameters: Error codes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #611 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:16:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/611</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-611</guid>
   <description>&lt;div&gt;&lt;p&gt;329: Keyword parameters: Error codes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #506 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:16:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/506</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-506</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:error: parameter names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #610 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:16:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/610</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-610</guid>
   <description>&lt;div&gt;&lt;p&gt;506: fn:error: parameter names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #607 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:16:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/607</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-607</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO Examples: Fixes, Formatting&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #21 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:15:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/21</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-21</guid>
   <description>&lt;div&gt;&lt;p&gt;New reserved function names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #605 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:15:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/605</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-605</guid>
   <description>&lt;div&gt;&lt;p&gt;21: Revise appendix for reserved function names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #39 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:14:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/39</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-39</guid>
   <description>&lt;div&gt;&lt;p&gt;URILiteral is defined in the EBNF grammar but not used&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #604 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:14:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/604</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-604</guid>
   <description>&lt;div&gt;&lt;p&gt;[Editorial] Drop the unused symbol URILiteral from the XPath grammar appendix&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #123 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:14:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/123</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-123</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:duplicate-values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #614 closed</title>
   <pubDate>Tue, 18 Jul 2023 16:14:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/614</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-614</guid>
   <description>&lt;div&gt;&lt;p&gt;123: fn:duplicate-values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #618 created</title>
   <pubDate>Tue, 18 Jul 2023 14:07:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/618</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-618</guid>
   <description>&lt;div&gt;&lt;p&gt;Symmetry: fn:html-doc, fn:csv-doc&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If we keep &lt;code&gt;fn:html-parse&lt;/code&gt; and if we add &lt;code&gt;fn:csv-parse&lt;/code&gt;, we should also add &lt;code&gt;fn:html-doc&lt;/code&gt; and &lt;code&gt;fn:csv-doc&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #617 created</title>
   <pubDate>Tue, 18 Jul 2023 07:42:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/617</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-617</guid>
   <description>&lt;div&gt;&lt;p&gt;Implicit constructor functions for record types and union types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See also Issue #397 and Issue #322, which this proposal may partially supersede.&lt;/p&gt;
&lt;p&gt;I propose that when declaring a named record type in the static context, this should automatically create a constructor function definition for records of that type.&lt;/p&gt;
&lt;p&gt;So in XQuery if you write&lt;/p&gt;
&lt;p&gt;&lt;code&gt;declare item type my:location as record(longitude: xs:double, latitude: xs:double);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then the static context acquires both a type (&lt;code&gt;let $loc as my:location := ....&lt;/code&gt;) and a function which you can call with either positional or keyword arguments (&lt;code&gt;let $loc := my:position(-2.03, 50.95)&lt;/code&gt; or &lt;code&gt;:= my:position(longitude := -2.03, latitude := 50.95)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The semantics of the function are roughly &lt;code&gt;map{longitude: -2.03, latitude: 50.95} treat as my:position&lt;/code&gt;, except that the function arguments are first coerced to the required types (in this case the decimals are coerced to double).&lt;/p&gt;
&lt;p&gt;If the record type is extensible, the constructor function does not provide any capability to set values for extension fields. I'm not sure yet whether it will be possible to distinguish fields set to an empty sequence from fields that are absent.&lt;/p&gt;
&lt;p&gt;This is consistent with user-defined atomic types where you automatically get a constructor function.&lt;/p&gt;
&lt;p&gt;Similarly for named union types. If you declare&lt;/p&gt;
&lt;p&gt;&lt;code&gt;declare item type my:binary as union(xs:hexBinary, xs:base64Binary)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then you should automatically get an arity-1 constructor function &lt;code&gt;my:binary($value)&lt;/code&gt; with the same semantics as if &lt;code&gt;my:binary&lt;/code&gt; were an XSD-defined union type (that is, the same semantics as &lt;code&gt;cast $value as union(xs:hexBinary, xs:base64Binary)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #616 created</title>
   <pubDate>Tue, 18 Jul 2023 02:26:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/616</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-616</guid>
   <description>&lt;div&gt;&lt;p&gt;XDM: X Node vs. x node&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;At the risk of being branded a pedant....&lt;/p&gt;
&lt;p&gt;Currently the XDM specs have a predilection for Attribute Node, Element Node, Comment Node, Document Node, Text Node, Processing Instruction Node, Namespace Node. But in a healthy minority of cases in the XDM specs, they are rendered lowercase.&lt;/p&gt;
&lt;p&gt;To complicate matters further, the other specs, which rely upon the XDM specs for the definition of the terms, universally prefer the lowercase form, and they use the terms preponderantly more. A healthy sample of four of the terms across five of the specifications ("elective" excludes instances where that particular case is required, e.g., capitalization in headers):&lt;/p&gt;
&lt;p&gt;Term | Spec | Capitalized | Electively Capitalized | Electively Noncapitalized
-- | -- | -- | -- | --
Attribute node | XDM | 71 | 41 | 18
Element node | XDM | 79 | 71 | 23
Comment node | XDM | 44 | 39 | 0
Document node | XDM | 55 | 48 | 10
Attribute node | Serialization | 0 | 0 | 15
Element node | Serialization | 0 | 0 | 39
Comment node | Serialization | 0 | 0 | 2
Document node | Serialization | 0 | 0 | 15
Attribute node | XQuery | 1 | 0 | 82
Element node | XQuery | 0 | 0 | 141
Comment node | XQuery | 0 | 0 | 9
Document node | XQuery | 2 | 0 | 50
Attribute node | XFO | 1 | 0 | 28
Element node | XFO | 1 | 0 | 67
Comment node | XFO | 1 | 0 | 4
Document node | XFO | 1 | 0 | 57
Attribute node | XSLT | 8 | 0 | 100
Element node | XSLT | 16 | 0 | 77
Comment node | XSLT | 1 | 0 | 6
Document node | XSLT | 12 | 0 | 144&lt;/p&gt;
&lt;p&gt;Options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do nothing.&lt;/li&gt;
&lt;li&gt;Change all specs to capitalize these terms universally.&lt;/li&gt;
&lt;li&gt;Change only XDM to capitalize these terms universally.&lt;/li&gt;
&lt;li&gt;Determine a principle that would differentiate the contexts in which the term should be capitalized or not within XDM only.&lt;/li&gt;
&lt;li&gt;Change all specs to uncapitalize these terms universally.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My personal preference is no. 5. I do not see any passages in XDM where the reader would be confused by the term being uncapitalized (the minority cases being witnesses). Lowercase would bring XDM into conformity with the other specifications, and with how the term is commonly used outside the specs. Further, the XDM specs do not capitalize other terms it specially defines, e.g., accessor. And in all the specs, including XDM, the clear preference is to use the lowercase for the names in the raw (i.e., without "node"): element, attribute, namespace, etc.&lt;/p&gt;
&lt;p&gt;I wanted to bring this to the group before doing any edits. I am happy to do the work, but do not want to do it if it is unwelcome, or if there is a clear preference for another option.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #615 created</title>
   <pubDate>Mon, 17 Jul 2023 21:52:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/615</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-615</guid>
   <description>&lt;div&gt;&lt;p&gt;Xdm minor edits, chh. 3-5&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 042 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 17 Jul 2023 13:00:05 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/07-18</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-07-18</guid>
</item><item>
   <title>Issue #491 closed</title>
   <pubDate>Mon, 17 Jul 2023 11:40:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/491</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-491</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix more examples in the FO 4.0 spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #614 created</title>
   <pubDate>Mon, 17 Jul 2023 11:38:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/614</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-614</guid>
   <description>&lt;div&gt;&lt;p&gt;123: fn:duplicate-values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I decided to create a PR for the initial proposal of this function, as I came across at least two other use cases for it since the issue was created.&lt;/p&gt;
&lt;p&gt;I believe that the &lt;code&gt;group by&lt;/code&gt; clause is the best choice for more complex operations, such as advanced comparisons or creating histograms.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #613 created</title>
   <pubDate>Mon, 17 Jul 2023 08:02:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/613</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-613</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow "union" as synonym for "|" everywhere&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It seems silly to allow "union" as a synonym for "|" in some places and not others. For example it's not allowed in a "case" clause of a typeswitch, nor in a catch clause of try/catch.&lt;/p&gt;
&lt;p&gt;We've introduced the ability to write &lt;code&gt;child::(a|b)&lt;/code&gt; as a synonym for &lt;code&gt;child::a | child::b&lt;/code&gt;, but we don't allow &lt;code&gt;child::(a union b)&lt;/code&gt; as a synonym for &lt;code&gt;child::a union child::b&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #612 created</title>
   <pubDate>Sun, 16 Jul 2023 14:39:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/612</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-612</guid>
   <description>&lt;div&gt;&lt;p&gt;128: fn:replace: Tweaks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #611 created</title>
   <pubDate>Sun, 16 Jul 2023 14:04:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/611</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-611</guid>
   <description>&lt;div&gt;&lt;p&gt;329: Keyword parameters: Error codes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #610 created</title>
   <pubDate>Sun, 16 Jul 2023 13:51:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/610</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-610</guid>
   <description>&lt;div&gt;&lt;p&gt;506: fn:error: parameter names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #609 created</title>
   <pubDate>Sun, 16 Jul 2023 13:36:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/609</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-609</guid>
   <description>&lt;div&gt;&lt;p&gt;508: New Map &amp;amp; Array Functions: Inconsistencies&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;map:of&lt;/code&gt; renamed to &lt;code&gt;map:of-pairs&lt;/code&gt; (as a hint that the input must match a specific format)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array:of&lt;/code&gt; renamed to &lt;code&gt;array:of-members&lt;/code&gt; (as a hint…)&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;map:pair&lt;/code&gt; for creating a single pair&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;array:split&lt;/code&gt; for decomposing arrays to singleton arrays&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #608 created</title>
   <pubDate>Sat, 15 Jul 2023 14:25:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/608</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-608</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting Monospace (II)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Bugging you again, @ndw …&lt;/p&gt;
&lt;p&gt;My feedback has been triggered by #607. I’ve moved various code examples into &lt;code&gt;eg&lt;/code&gt; blocks. In principle, the result is promising, but it produces cases such as the following one (see https://qt4cg.org/pr/607/xpath-functions-40/Overview.html):&lt;/p&gt;
&lt;img src="https://github.com/qt4cg/qtspecs/assets/196589/d64fd37a-2918-487c-967c-08570208d6c8" width="500"/&gt;
&lt;p&gt;Maybe the result is better to read if single-line and multi-line monospace is formatted identically (i.e., without lines at the top and bottom, and with a transparent background)?&lt;/p&gt;
&lt;p&gt;Next, it would be fine if we could get rid of the scrollbars. Often, it’s not apparent from the rendering that the presentation includes results at all:&lt;/p&gt;
&lt;img src="https://github.com/qt4cg/qtspecs/assets/196589/b86d688b-fbdc-4a54-bd22-fa47e027dec2" width="500"/&gt;
&lt;p&gt;We could possibly fix it by wrapping even more examples manually. That can be challenging, though, for example if long strings are used (such as &lt;code&gt;"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Finally, the formatting on mobile devices (here: an Android tablet with a Chrome renderer) differs from the desktop view: code blocks are rendered much smaller than the rest. – That’s just to mention it; I’d probably be annoyed if I was tasked with fixing that.&lt;/p&gt;
&lt;img src="https://github.com/qt4cg/qtspecs/assets/196589/b2dd898a-cd20-4ba2-a3d6-cc87c9e4e835" width="400"/&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #607 created</title>
   <pubDate>Sat, 15 Jul 2023 11:57:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/607</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-607</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO Examples: Fixes, Formatting&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR contains lots of fixes in the XQFO examples and improves the formatting of examples with nested arguments and multiline expressions.&lt;/p&gt;
&lt;p&gt;It’s probably helpful to merge it as soon as possible to avoid conflicts with other PRs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #606 created</title>
   <pubDate>Fri, 14 Jul 2023 17:15:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/606</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-606</guid>
   <description>&lt;div&gt;&lt;p&gt;23 Allow element(A|B) and attribute(A|B)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #23&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #605 created</title>
   <pubDate>Fri, 14 Jul 2023 15:12:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/605</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-605</guid>
   <description>&lt;div&gt;&lt;p&gt;21: Revise appendix for reserved function names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #21&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #604 created</title>
   <pubDate>Fri, 14 Jul 2023 14:23:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/604</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-604</guid>
   <description>&lt;div&gt;&lt;p&gt;[Editorial] Drop the unused symbol URILiteral from the XPath grammar appendix&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #39&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #603 created</title>
   <pubDate>Thu, 13 Jul 2023 11:08:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/603</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-603</guid>
   <description>&lt;div&gt;&lt;p&gt;602 Implausible Expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #602&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #602 created</title>
   <pubDate>Thu, 13 Jul 2023 06:55:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/602</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-602</guid>
   <description>&lt;div&gt;&lt;p&gt;Semi-strict static typing: reporting implausible expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Strict &lt;em&gt;static typing&lt;/em&gt;, as originally defined for XQuery 1.0, was not a success, because it prohibits too many constructs that are perfectly reasonable to write. However, the alternative, pure &lt;em&gt;dynamic typing&lt;/em&gt;, prevents a processor reporting many obvious errors at compile time. A compromise is &lt;em&gt;optimistic static typing&lt;/em&gt;, where the processor is allowed to report a type error statically in the cases where it can be shown that evaluation of an expression is bound to fail at run-time.&lt;/p&gt;
&lt;p&gt;Optimistic static typing has proved a reasonably successful compromise, but there are a number of cases where things that are obviously user mistakes cannot be reported as static errors.  I propose that a processor should be allowed (not required) to treat some of these conditions as static errors.&lt;/p&gt;
&lt;p&gt;The first of these conditions is exemplified by passing an argument whose static type is &lt;code&gt;xs:integer*&lt;/code&gt; to a function where the declared parameter type is &lt;code&gt;xs:string*&lt;/code&gt;. Under optimistic static typing this cannot be reported as a static error, because it is not bound to fail; if the actual value at run-time turns out to be an empty sequence, the call will succeed. So the proposal is that where the inferred supplied type and the required sequence types are both emptiable (that is, occurrence indicator is "?" or "*"), but their respective item types are disjoint, the processor should be allowed to report a static error.&lt;/p&gt;
&lt;p&gt;The second condition is what I call a &lt;em&gt;void path expression&lt;/em&gt;. Specifically, if we know statically that the result of &lt;code&gt;$A/B&lt;/code&gt;, or &lt;code&gt;$A!B&lt;/code&gt;, or &lt;code&gt;$A?B&lt;/code&gt; will be an empty sequence for any possible value of $A (given its inferred type), this almost certainly means the user has made a mistake, and we should be allowed to report a static error. This extends to the unary or implicit forms of these operators, based on the inferred type of the context item. This is most likely to occur with schema-aware code, where it should be possible to report a path such as A/B/C/D as incorrect if the schema does not allow such a path. But it also arises for example for &lt;code&gt;$A?B&lt;/code&gt; if the inferred type of $A is a non-extensible record type and B is not one of its known fields; and it arises for inappropriate combinations of axes such as &lt;code&gt;@code/text()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that I'm not proposing (as XQuery 1.0 static typing did) that &lt;em&gt;any&lt;/em&gt; expression whose result is bound to be empty is a static error; the rule is confined to a few specific operators.&lt;/p&gt;
&lt;p&gt;Perhaps, for backwards compatibility and interoperability, we should require processors to provide an option to switch this kind of static error detection off. (For example, XSLT 1.0 code sometimes deliberately uses &lt;code&gt;/..&lt;/code&gt; to represent an empty sequence, and this construct would be flagged under these rules.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #601 created</title>
   <pubDate>Thu, 13 Jul 2023 06:46:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/601</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-601</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:all → fn:every?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Feedback we got (translated):&lt;/p&gt;
&lt;p&gt;There are the &lt;code&gt;every&lt;/code&gt; and &lt;code&gt;some&lt;/code&gt; keywords, and there are the new functions &lt;code&gt;fn:some&lt;/code&gt; and &lt;code&gt;fn:all&lt;/code&gt;. They appear to be more or less similar, so it would be consistent if &lt;code&gt;fn:all&lt;/code&gt; was renamed to &lt;code&gt;fn:every&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;fn:all&lt;/code&gt; is called this way because there’s also &lt;code&gt;fn:all-different&lt;/code&gt; and &lt;code&gt;fn:all-equal&lt;/code&gt;, we should also have &lt;code&gt;fn:some-different&lt;/code&gt; and &lt;code&gt;fn:some-equal&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #585 closed</title>
   <pubDate>Wed, 12 Jul 2023 08:23:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/585</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-585</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: dynamic function calls&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #597 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:39:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/597</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-597</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial fixes from #566&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #588 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:39:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/588</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-588</guid>
   <description>&lt;div&gt;&lt;p&gt;Incompleteness of xsl:sort specification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #595 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:39:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/595</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-595</guid>
   <description>&lt;div&gt;&lt;p&gt;588: (Editorial, XSLT) minor clarifications regarding xsl:sort&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #592 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:39:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/592</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-592</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT §5.6 xsl:decimal-format - no explanation of exponent-separator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #594 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:39:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/594</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-594</guid>
   <description>&lt;div&gt;&lt;p&gt;592: (XSLT, Editorial) Add missing description of exponent-separator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #591 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:38:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/591</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-591</guid>
   <description>&lt;div&gt;&lt;p&gt;Show defaults in XSLT element templates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #593 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:38:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/593</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-593</guid>
   <description>&lt;div&gt;&lt;p&gt;591: [XSLT, editorial] Add defaults to XSLT element syntax summaries&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #343 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:38:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/343</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-343</guid>
   <description>&lt;div&gt;&lt;p&gt;$collation argument: Unification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #590 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:38:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/590</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-590</guid>
   <description>&lt;div&gt;&lt;p&gt;343: make $collation uniformly optional&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #365 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:38:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/365</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-365</guid>
   <description>&lt;div&gt;&lt;p&gt;switch, typeswitch: Optional braces&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #587 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:38:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/587</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-587</guid>
   <description>&lt;div&gt;&lt;p&gt;365: Allow braces in switch and typeswitch expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #586 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:37:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/586</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-586</guid>
   <description>&lt;div&gt;&lt;p&gt;585: [Editorial] Rearrange text (and grammar) for dynamic function calls&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #584 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:37:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/584</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-584</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: Correction to map:filter examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #317 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:37:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/317</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-317</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-integer: $lang → $language ?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #578 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:37:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/578</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-578</guid>
   <description>&lt;div&gt;&lt;p&gt;317: fn:format-integer: $lang → $language&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #577 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:37:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/577</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-577</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: improve generator for keyword tests&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #555 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:36:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/555</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-555</guid>
   <description>&lt;div&gt;&lt;p&gt;464: Revised narrative of normalization steps for serialization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #547 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:35:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/547</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-547</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-036-02: Further elaboration of the rules for function identity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #539 closed</title>
   <pubDate>Tue, 11 Jul 2023 16:34:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/539</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-539</guid>
   <description>&lt;div&gt;&lt;p&gt;FLOWR where clause with a "do when false" option&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #600 created</title>
   <pubDate>Mon, 10 Jul 2023 07:49:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/600</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-600</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:decode-from-uri: counterpart of fn-encode-to-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adopted from https://github.com/qt4cg/qtspecs/issues/566#issuecomment-1607397586:&lt;/p&gt;
&lt;p&gt;The initial suggestion in #72 was to provide a function for decoding a URI. Maybe we should still think about adding a &lt;code&gt;fn:decode-uri&lt;/code&gt; or &lt;code&gt;fn:decode-from-uri&lt;/code&gt; function, in which we could tackle the open issues that need to be solved for &lt;code&gt;fn:parse-uri&lt;/code&gt;. The current URI decoding rules could then be replaced with a reference to this new function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #599 created</title>
   <pubDate>Sun, 9 Jul 2023 23:25:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/599</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-599</guid>
   <description>&lt;div&gt;&lt;p&gt;90: Simplified stylesheets with no xsl:version&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #90&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #598 closed</title>
   <pubDate>Sun, 9 Jul 2023 23:24:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/598</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-598</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue90 XSLT: simplified stylesheets with no xsl:version&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #598 created</title>
   <pubDate>Sun, 9 Jul 2023 23:05:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/598</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-598</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue90 XSLT: simplified stylesheets with no xsl:version&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #90. Allow simplified stylesheets with no xsl:version attribute (and therefore no XSL namespace declaration)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 041 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 7 Jul 2023 13:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/07-11</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-07-11</guid>
</item><item>
   <title>Pull request #597 created</title>
   <pubDate>Fri, 7 Jul 2023 12:30:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/597</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-597</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial fixes from #566&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR addresses some minor comments from issue #566. There are more substantive comments but I think they warrant discussion first.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #596 created</title>
   <pubDate>Wed, 5 Jul 2023 07:45:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/596</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-596</guid>
   <description>&lt;div&gt;&lt;p&gt;Pinned values: Transforming Trees&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;Pinned Values: Transforming JTrees&lt;/h1&gt;
&lt;p&gt;This is a continuation of ideas raised in issue #341, issue #350, and elsewhere. It's related to the requirements presented in issue #262 and issue #297.&lt;/p&gt;
&lt;p&gt;I have also presented ideas on transforming JSON trees at XML Prague and at Balisage, and I have tried out ideas over the years in Saxon extension functions. The proposal here owes a lot to those ideas, but consolidates them in a slightly different way.&lt;/p&gt;
&lt;p&gt;I'll use the term JTree to refer to a tree structure of maps and arrays. The key difference between a JTree and a node tree (let's call it an XTree) is that the nodes in a JTree have no identity and no parent pointers.&lt;/p&gt;
&lt;p&gt;As a result, some operations are remarkably difficult. Let's take one example:&lt;/p&gt;
&lt;p&gt;Consider the JSON structure&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ "cities": [
    {  "name" : "Paris",
       "size" : 300
    },
    {  "name" : "Berlin",
       "size" : 300
    }
]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and suppose we want to return a modified version of this in which the size of Berlin is changed to 400. It would be nice to be able to write something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;modify($input, $input?cities[?name="Berlin"]?size, 400)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But of course, we can't do this. The result of the second argument is simply a number, 300, and we don't want to change all instances of the number 300 to 400, we only want to change one specific instance. Without value identity, the concept of "one specific instance" has no meaning.&lt;/p&gt;
&lt;p&gt;I'll leave it as an exercise to the reader to work out how to do this transformation using our current XSLT and XQuery capabilities. It's far more difficult than it should be. In addition, the tree-walking approach in XSLT of applying template rules recursively is inefficient, because its cost typically depends on the size of the tree, not on the size of the modification. With immutable/persistent data structures underpinning XDM maps and arrays, it should be possible to perform this modification in constant time, regardless of the size of the tree.&lt;/p&gt;
&lt;p&gt;My solution to this is that the expression in the second argument should return a &lt;em&gt;pinned value&lt;/em&gt;. The pinned value behaves just like a plain integer 300 when used in operations such as arithmetic, but being pinned means that its location in the original JTree is retained, meaning that it becomes possible to replace it in the JTree with a different value.&lt;/p&gt;
&lt;h2&gt;Data Model&lt;/h2&gt;
&lt;p&gt;We need a change to the data model. Any value (any item or sequence) can have the property of being &lt;em&gt;pinned&lt;/em&gt;. If a value is pinned, then it has a property called its &lt;em&gt;locus&lt;/em&gt; which identifies its position within a JTree.&lt;/p&gt;
&lt;p&gt;With a small number of exceptions, specifically noted below, the fact that a value is pinned and has a locus does not change the effect of any operations on the value. For example, the fact that an integer with value 300 is pinned does not change the result of any arithmetic or comparison operations on the number.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;locus&lt;/em&gt; may identify a value as being the root of a JTree, or it may identify its position within a JTree. In the latter case it has two basic properties called its &lt;em&gt;container&lt;/em&gt; and its &lt;em&gt;slot&lt;/em&gt;. The container is a pinned sequence, array, or map, and the slot identifies the value's position within the container: if the container is a sequence or an array, then the slot is an integer position; if the container is a map, then the slot is a key value.&lt;/p&gt;
&lt;h2&gt;Operations on Pinned Values&lt;/h2&gt;
&lt;p&gt;A value (any value) can be pinned as the root of a JTree using the function &lt;code&gt;fn:pin(value)&lt;/code&gt;. This returns a value that is in every way identical to the original (including node identity, if it is a node or contains nodes) except for being pinned.&lt;/p&gt;
&lt;p&gt;Some selected operations have their definition changed so that if the input is a pinned value, then the result is a pinned value. These are of two kinds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operations that return an existing value unchanged generally retain the pinned property and the locus. For example if a value is bound to a variable, then the result of a variable reference will retain these properties.&lt;/li&gt;
&lt;li&gt;Operations that select a value within a sequence, array, or map, when that sequence, array, or map is pinned, return a pinned value whose locus identifies the container and the value's slot within that container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So in the above example, if &lt;code&gt;$input&lt;/code&gt; is pinned, the expression &lt;code&gt;$input?cities[?name="Berlin"]?size&lt;/code&gt; returns an integer (300) whose locus is &lt;code&gt;(C, "size")&lt;/code&gt;, where C is the map having name="Berlin". C in turn has a locus (A, 2) where A is the array of cities, and A has a locus (R, "cities") where R is the root of the JTree (the original &lt;code&gt;$input&lt;/code&gt; value).&lt;/p&gt;
&lt;p&gt;It now becomes possible to define the &lt;code&gt;modify&lt;/code&gt; function as follows: The first argument is a value which must be pinned. The second argument must return a pinned value which must be within the tree identified by the first argument (that is, recursively finding the container must lead to this root). The result of the &lt;code&gt;modify()&lt;/code&gt; function is formed by recursively replacing each container, all the way up to the root, with a new container in which the contents of the relevant slot are replaced.&lt;/p&gt;
&lt;h2&gt;Feasibility&lt;/h2&gt;
&lt;p&gt;Let's pause to ask ourselves two questions: is this reasonably feasible to implement, and is it realistically possible to expect users to understand what's going on?&lt;/p&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;p&gt;I've had an implementation of something rather similar in Saxon for years, and I don't think it's especially difficult. In effect we have a Java class &lt;code&gt;PinnedValue&lt;/code&gt; which extends &lt;code&gt;Value&lt;/code&gt; and which delegates nearly all operations (including "instance of") to a contained &lt;code&gt;Value&lt;/code&gt;. The one thing you need to be careful of is assuming (for example) that if a value represents an XDM array, then it will be an instance of a Java class such as &lt;code&gt;XdmArray&lt;/code&gt;. (The terminology in the current Saxon implementation is quite different, so don't expect to find this in the current code).&lt;/p&gt;
&lt;h3&gt;Usability&lt;/h3&gt;
&lt;p&gt;I think that basic features like the &lt;code&gt;modify()&lt;/code&gt; function won't be too difficult to explain. We just have to explain that (a) you can only modify a JTree if the root is first pinned, and (b) the expression used in the second argument must use a restricted set of operations: basically, those that do downward selection of values within a container.&lt;/p&gt;
&lt;h2&gt;Further Operations&lt;/h2&gt;
&lt;p&gt;I've illustrated the benefits with one particular operation, a modify() function, but the feature opens up many other possibilities as well. Here are a few:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For pinned values we can expose the container and slot properties through functions (or through custom syntax such as axes). For example this means that in XSLT, if you are doing a recursive traversal of a JTree, a template rule for processing a particular value has access to its ancestors in the same way as is possible for XTrees.&lt;/li&gt;
&lt;li&gt;In addition derived properties of a pinned value can be exposed, for example the preceding and following "siblings" within an array (or indeed, within a sequence).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll explore some additional use cases in further posts.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #595 created</title>
   <pubDate>Tue, 4 Jul 2023 21:31:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/595</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-595</guid>
   <description>&lt;div&gt;&lt;p&gt;588: (Editorial, XSLT) minor clarifications regarding xsl:sort&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The main issue turned out to be spurious; there is in fact an explanation of the order attribute in the right place. But I made a couple of other minor editorial changes, including dropping the default for @data-type in the (non-normative) schema for XSLT 4.0 - the default of &lt;code&gt;data-type="text"&lt;/code&gt; is inappropriate because it forces conversion, e.g. of dates to strings, and the default should be no conversion.&lt;/p&gt;
&lt;p&gt;Fix #588.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #594 created</title>
   <pubDate>Tue, 4 Jul 2023 21:05:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/594</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-594</guid>
   <description>&lt;div&gt;&lt;p&gt;592: (XSLT, Editorial) Add missing description of exponent-separator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #592&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #593 created</title>
   <pubDate>Tue, 4 Jul 2023 15:40:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/593</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-593</guid>
   <description>&lt;div&gt;&lt;p&gt;591: [XSLT, editorial] Add defaults to XSLT element syntax summaries&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #591. Add default values to e:attribute entries in the XSLT syntax summaries; change the DTD to allow these; change the stylesheet to render them; add a paragraph to the Notation section to explain the conventions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #592 created</title>
   <pubDate>Tue, 4 Jul 2023 15:38:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/592</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-592</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT §5.6 xsl:decimal-format - no explanation of exponent-separator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This problem is inherited from XSLT 3.0&lt;/p&gt;
&lt;p&gt;Section 5.6 gives a brief description of the purpose of every attribute of &lt;code&gt;xsl:decimal-format&lt;/code&gt;, with the exception of &lt;code&gt;exponent-separator&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #591 created</title>
   <pubDate>Tue, 4 Jul 2023 14:06:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/591</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-591</guid>
   <description>&lt;div&gt;&lt;p&gt;Show defaults in XSLT element templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This came out of issue #588, but is separable.&lt;/p&gt;
&lt;p&gt;It would be useful in the element templates in the XSLT specification to show default values for attributes.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #590 created</title>
   <pubDate>Tue, 4 Jul 2023 10:14:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/590</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-590</guid>
   <description>&lt;div&gt;&lt;p&gt;343: make $collation uniformly optional&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #343&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #589 created</title>
   <pubDate>Tue, 4 Jul 2023 09:04:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/589</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-589</guid>
   <description>&lt;div&gt;&lt;p&gt;561: abbreviation fn=function, drop lambda syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Allows "fn" as an abbreviation for "function", and drops the "thin-arrow" lambda function syntax. Fix #561.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #588 created</title>
   <pubDate>Mon, 3 Jul 2023 15:14:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/588</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-588</guid>
   <description>&lt;div&gt;&lt;p&gt;Incompleteness of xsl:sort specification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;These are problems inherited from XSLT 3.0.&lt;/p&gt;
&lt;p&gt;The effect of the attribute &lt;code&gt;xsl:sort/@order&lt;/code&gt; is never explained in the text; it is assumed that the meaning is obvious.&lt;/p&gt;
&lt;p&gt;The only explicit statement that the default is "ascending" is in the schema-for-xslt40, which is non-normative.&lt;/p&gt;
&lt;p&gt;The schema also gives a default of "text" for the data-type attribute, which is incorrect: when data-type is set to text, values will be cast to string before comparison, which is not what happens if the actual sort key values are numeric.&lt;/p&gt;
&lt;p&gt;We have added prose to define what we mean by "effective value". This clarifies that the effective value of the order attribute, if omitted, is the default value. But we don't have a systematic and formal way of saying what the default value is. This affects the result of test merge-021, which depends on deciding whether the two xsl:merge-source elements have the same effective value for "order", when one is omitted and the other is set to "ascending".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #587 created</title>
   <pubDate>Sun, 2 Jul 2023 22:04:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/587</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-587</guid>
   <description>&lt;div&gt;&lt;p&gt;365: Allow braces in switch and typeswitch expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #365&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #586 created</title>
   <pubDate>Sun, 2 Jul 2023 21:32:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/586</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-586</guid>
   <description>&lt;div&gt;&lt;p&gt;585: [Editorial] Rearrange text (and grammar) for dynamic function calls&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is purely editorial. It addresses the problems described in issue #585, in particular, the syntax of dynamic function calls is now described before the semantics.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #159 closed</title>
   <pubDate>Sun, 2 Jul 2023 18:16:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/159</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-159</guid>
   <description>&lt;div&gt;&lt;p&gt;Support named arguments on static function calls&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #585 created</title>
   <pubDate>Fri, 30 Jun 2023 15:18:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/585</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-585</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: dynamic function calls&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Secion 4.4.2.1 describes the semantics of a dynamic function call, but there is no explanation of the syntax.&lt;/p&gt;
&lt;p&gt;The syntax is defined in section 4.5.2.&lt;/p&gt;
&lt;p&gt;It's rather odd for the syntax and semantics to be separated in this way, and in particular for the semantics to be explained first.&lt;/p&gt;
&lt;p&gt;It's also rather odd that both sections claim to have definitions of the term "dynamic function call", and the definitions are different.&lt;/p&gt;
&lt;p&gt;Furthermore the grammar productions in 4.5.2 reference, but don't include, PositionalArgumentList; instead they include ArgumentList which is not referenced. PositionalArgumentList is included under 4.23 Arrow Expressions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #584 created</title>
   <pubDate>Thu, 29 Jun 2023 16:42:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/584</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-584</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: Correction to map:filter examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Corrects the syntax of the lambda functions in these two examples. Also improves the formatting.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #583 created</title>
   <pubDate>Thu, 29 Jun 2023 14:44:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/583</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-583</guid>
   <description>&lt;div&gt;&lt;p&gt;(array|map):replace → *:substitute or *:change&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Some observations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;array:replace would be more versatile if multiple positions could be specified, rather than just a single position.&lt;/li&gt;
&lt;li&gt;if all positions are selected, the function becomes identical to array:for-each. So perhaps we should scrap array:replace and instead add an optional parameter &lt;code&gt;$positions as xs:integer*&lt;/code&gt; to array:for-each. However, that could be confusing: people might imagine that the items at positions not present in the list are discarded, rather than being returned unchanged in the result. So I propose we don't do that.&lt;/li&gt;
&lt;li&gt;if the function is useful on arrays, then it's also useful on sequences. But &lt;code&gt;fn:replace&lt;/code&gt; does something completely different.&lt;/li&gt;
&lt;li&gt;We have a similar function on maps called &lt;code&gt;map:substitute&lt;/code&gt; (but it's not quite the same, because it processes every entry in the map).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the interests of alignment, I propose we have three functions:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:substitute($input as item()*, $positions as xs:positiveInteger*, $action as function(item()) as item())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;equivalent to &lt;code&gt;for $it at $pos in $item return if ($pos = $positions) then $action($it) else $it&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:substitute($array as array(*), $positions as xs:positiveInteger*, $action as function(item()*) as item()*)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;equivalent to &lt;code&gt;array{for member $it at $pos in $item return if ($pos = $positions) then $action($it) else $it}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:substitute($map as map(*), $keys as xs:anyAtomicValue*, $action as function(anyAtomicValue, item()*) as item()*)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For the first two functions, we don't really need to allow the second argument to be omitted, because it would then be equivalent to the corresponding for-each() function. Unfortunately that's not quite true of map:for-each(), because it doesn't return a map. However if you want to do a functional replacement of every entry in a map, it can be done easily enough with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:build(map:key-value-pairs($map), function{?key}, function{$action(?value)})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;so we're not really losing anything.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #582 closed</title>
   <pubDate>Thu, 29 Jun 2023 13:16:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/582</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-582</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix examples to be consistent with spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #582 created</title>
   <pubDate>Thu, 29 Jun 2023 13:04:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/582</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-582</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix examples to be consistent with spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I know there are open comments on the actual spec, but in the short term, let's at least make the examples correct.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #581 closed</title>
   <pubDate>Thu, 29 Jun 2023 12:44:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/581</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-581</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix schema error&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #581 created</title>
   <pubDate>Thu, 29 Jun 2023 12:44:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/581</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-581</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix schema error&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I can't explain why this didn't turn up initially in my local testing. :-(&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #580 closed</title>
   <pubDate>Thu, 29 Jun 2023 12:34:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/580</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-580</guid>
   <description>&lt;div&gt;&lt;p&gt;Automatically generate app/fo-spec-examples on build&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #580 created</title>
   <pubDate>Thu, 29 Jun 2023 12:26:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/580</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-580</guid>
   <description>&lt;div&gt;&lt;p&gt;Automatically generate app/fo-spec-examples on build&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR should update the build so that the test-suite &lt;code&gt;app/fo-spec-examples.xml&lt;/code&gt; file is automatically build when the spec is published. The PR test won't tell us anything, so we'll have to merge it and see what happens...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #579 closed</title>
   <pubDate>Thu, 29 Jun 2023 10:49:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/579</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-579</guid>
   <description>&lt;div&gt;&lt;p&gt;Support role=wide on fos:examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #579 created</title>
   <pubDate>Thu, 29 Jun 2023 10:37:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/579</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-579</guid>
   <description>&lt;div&gt;&lt;p&gt;Support role=wide on fos:examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a purely style related change. It supports role=wide on fos:example elements. If an example is identified as "wide" then the presentaiton is in sequential rows of the table rather than adjacent columns. See, for example, &lt;code&gt;parse-uri()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #578 created</title>
   <pubDate>Wed, 28 Jun 2023 15:03:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/578</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-578</guid>
   <description>&lt;div&gt;&lt;p&gt;317: fn:format-integer: $lang → $language&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Parameter name aligned with other functions (&lt;code&gt;fn:format-dateTime&lt;/code&gt;, &lt;code&gt;fn:lang&lt;/code&gt;, others).
Closes #317.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #577 created</title>
   <pubDate>Wed, 28 Jun 2023 14:50:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/577</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-577</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: improve generator for keyword tests&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Improves the stylesheet that generates the BuiltInKeywords.xml test set, using example values for arguments where appropriate, taking these from the function catalog.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #576 created</title>
   <pubDate>Tue, 27 Jun 2023 20:03:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/576</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-576</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON serialization: INF/NaN, function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As far as possible, the JSON serialization method should be aligned with the new fn:items-to-json() (aka xdm-to-json) function.&lt;/p&gt;
&lt;p&gt;Firstly, the results should be the same when the input consists entirely of atomic values, or sequences, maps, and arrays consisting entirely of atomic values. This only requires one change: serializing a sequence of length &amp;gt;1 should output the sequence as if it were an array, rather than raising an error. This is a compatible change.&lt;/p&gt;
&lt;p&gt;Secondly, the new fn:items-to-json() function should have an option to output elements (for example elements appearing within maps or arrays) in the same way as the JSON serialization method does, by serializing the nodes to lexical XML or HTML contained within a JSON character string.&lt;/p&gt;
&lt;p&gt;Finally, we should align the rules on how to output a function item (other than a map or array). We could either adopt the serialization approach (raise an error), or the items-to-json() approach (output some kind of placeholder saying "here be dragons") but they should be aligned.&lt;/p&gt;
&lt;p&gt;Note that the two operations are still very different. items-to-json() is primarily about converting XML to JSON, while JSON serialization is primarily about turning maps and arrays into their JSON lexical form.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #361 closed</title>
   <pubDate>Tue, 27 Jun 2023 16:10:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/361</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-361</guid>
   <description>&lt;div&gt;&lt;p&gt;Named arguments: $input vs. $value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #562 closed</title>
   <pubDate>Tue, 27 Jun 2023 16:10:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/562</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-562</guid>
   <description>&lt;div&gt;&lt;p&gt;361: Named arguments: $input vs. $value&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #567 closed</title>
   <pubDate>Tue, 27 Jun 2023 16:09:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/567</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-567</guid>
   <description>&lt;div&gt;&lt;p&gt;Errors in schema for XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #568 closed</title>
   <pubDate>Tue, 27 Jun 2023 16:09:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/568</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-568</guid>
   <description>&lt;div&gt;&lt;p&gt;567: schema for xslt40&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #569 closed</title>
   <pubDate>Tue, 27 Jun 2023 16:09:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/569</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-569</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor editorial corrections, XDM chh. 1, 2&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #175 closed</title>
   <pubDate>Tue, 27 Jun 2023 16:08:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/175</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-175</guid>
   <description>&lt;div&gt;&lt;p&gt;In XQuery, allow a semicolon at the end of the module&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #457 closed</title>
   <pubDate>Tue, 27 Jun 2023 16:07:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/457</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-457</guid>
   <description>&lt;div&gt;&lt;p&gt;Support parsing numeric, alphabetic, and additive number systems.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #575 created</title>
   <pubDate>Tue, 27 Jun 2023 14:05:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/575</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-575</guid>
   <description>&lt;div&gt;&lt;p&gt;359: fn:void: Absorb result of evaluated argument&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;#359: fn:void: Absorb result of evaluated argument&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #574 created</title>
   <pubDate>Tue, 27 Jun 2023 14:02:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/574</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-574</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:log: Trace and discard results&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See https://github.com/qt4cg/qtspecs/issues/359#issuecomment-1465971781&lt;/p&gt;
&lt;h2&gt;fn:dump&lt;/h2&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Outputs trace information and discards the result.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;fn:dump(
  $value  as item()*,	
  $label  as xs:string?  := ()
) as empty-sequence()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Properties&lt;/h3&gt;
&lt;p&gt;This function is ·deterministic·, ·context-independent·, and ·focus-independent·.&lt;/p&gt;
&lt;h3&gt;Rules&lt;/h3&gt;
&lt;p&gt;Similar to &lt;code&gt;fn:trace:&lt;/code&gt;, the values of &lt;code&gt;$value&lt;/code&gt;, converted to an &lt;code&gt;xs:string&lt;/code&gt;, and &lt;code&gt;$label&lt;/code&gt; (if supplied and non-empty) may be directed to a trace data set. The destination of the trace output is ·implementation-defined·. The format of the trace output is ·implementation-dependent·, as is the ordering of the output.&lt;/p&gt;
&lt;p&gt;In contrast to &lt;code&gt;fn:trace&lt;/code&gt;, the function returns an empty sequence.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #573 created</title>
   <pubDate>Mon, 26 Jun 2023 16:53:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/573</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-573</guid>
   <description>&lt;div&gt;&lt;p&gt;Node construction functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose introducing a set of functions that allow node construction in XPath. The basic functions are&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new-document($children as node()*)
new-element($name as QName, $content as node()*)
new-attribute($name as QName, $value as xs:string)
new-namespace($prefix as xs:string, $uri as xs:string)
new-comment($content as xs:string)
new-processing-instruction($name as xs:string, $content as xs:string)
new-text($content as xs:string)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The semantics would be essentially identical to the current node constructors in XQuery and/or the corresponding instructions in XSLT (there are very few differences: a few minor ones, like if there are multiple attributes with the same name, XSLT takes the last, while XQuery throws an error).&lt;/p&gt;
&lt;p&gt;As always, it's difficult to know where to draw the line in functionality between XPath and XQuery. One of the guidelines I use is that if an addition to XPath is likely to be useful to XSLT users, then it's worth including. Clearly these functions are not strictly necessary in XSLT (they could easily be user-supplied as wrappers around XSLT instructions). But to take advantage of some of the other capabilities we're introducing in XPath, node construction functions are increasingly handy. Consider for example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:copy-of select="interleave(para, new-element(xs:QName(xhtml:br)))"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That's a one-liner that replaces&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each select="para"&amp;gt;
  &amp;lt;xsl:if test="position() ne 1"&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/xsl:if&amp;gt;
  &amp;lt;xsl:copy-of select="."/&amp;gt;
&amp;lt;/xsl:for-each&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The new functions are also useful in XQuery because although they duplicate existing syntax, the fact that they are functions rather than custom syntax makes them more versatile.&lt;/p&gt;
&lt;p&gt;As with existing constructs in XQuery and XSLT, a naive implementation that follows the semantics literally (which involves copying a subtree when adding an element to a new parent) would be rather inefficient. However, I think that the same established optimizations are equally applicable, for example lazy tree construction and/or push-mode evaluation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #572 created</title>
   <pubDate>Mon, 26 Jun 2023 16:36:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/572</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-572</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:evaluate-xpath() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XSLT 3.0 introduced an instruction, xsl:evaluate, for dynamic evaluation of XPath expressions. But there is no way of doing this in XQuery.&lt;/p&gt;
&lt;p&gt;It was done as an instruction in XSLT because functions at the time were not flexible enough to cope with a range of optional parameters. This situation has changed.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;fn:evaluate()&lt;/code&gt; function might operate successfully with the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xpath - the XPath expression as a string.&lt;/li&gt;
&lt;li&gt;namespaces - the namespace bindings as a map from prefix to URI, defaulting to the namespace bindings in the static context of the caller&lt;/li&gt;
&lt;li&gt;parameters - parameter values as a map from QName to value, defaulting to an empty map&lt;/li&gt;
&lt;li&gt;context-item - the context item for evaluation, defaulting to the context item of the caller&lt;/li&gt;
&lt;li&gt;options:
&lt;ul&gt;
&lt;li&gt;default collation&lt;/li&gt;
&lt;li&gt;base URI&lt;/li&gt;
&lt;li&gt;schema-aware = true/false&lt;/li&gt;
&lt;li&gt;allow-external-access = true/false&lt;/li&gt;
&lt;li&gt;cache = true/false (whether to cache compiled expressions for reuse)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before &lt;code&gt;xsl:evaluate&lt;/code&gt; as introduced, there was some concern in the WG about security and the risk of injection attacks. I think that the allow-external-access switch is sufficient for this: if you don't trust the expression, set it to false, and all dangerous things like access to external documents and other resources, use of extension functions, etc, is disabled.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 040 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 23 Jun 2023 10:55:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/06-27</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-06-27</guid>
</item><item>
   <title>Issue #571 created</title>
   <pubDate>Fri, 23 Jun 2023 09:05:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/571</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-571</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: xsl:for-each-group/@break-when&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The new &lt;code&gt;@break-when&lt;/code&gt; attribute on &lt;code&gt;xsl:for-each-group&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(a) has not been reviewed by the CG&lt;/p&gt;
&lt;p&gt;(b) is not mentioned in the changes appendix&lt;/p&gt;
&lt;p&gt;(c) is not included in the schema-for-XSLT40&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #570 created</title>
   <pubDate>Fri, 23 Jun 2023 07:59:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/570</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-570</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: Built-in template rules for maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current built-in template rules for maps and arrays do not work well for a recursive-descent traversal of a JSON-like tree of maps and arrays. The effect of on-no-match="shallow-copy" is to do a deep copy, and the effect of on-no-match="shallow-skip" is to do a deep skip. I therefore propose two new values for on-no-match, provisionally "shallow-copy-all" and "shallow-skip-all".&lt;/p&gt;
&lt;p&gt;For more details see my Balisage 2022 paper: https://balisage.net/Proceedings/vol27/html/Kay01/BalisageVol27-Kay01.html&lt;/p&gt;
&lt;p&gt;We do in fact have some test cases that use this syntax, see &lt;code&gt;attr/mode-4001&lt;/code&gt; &lt;em&gt;et seq&lt;/em&gt;, but it has never found its way into the spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #569 created</title>
   <pubDate>Fri, 23 Jun 2023 03:40:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/569</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-569</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor editorial corrections, XDM chh. 1, 2&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Minor corrections to XDM chapters 1, 2.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expanded-QName&lt;/code&gt; versus &lt;code&gt;expanded QName&lt;/code&gt;. The latter outnumbered the former ca. 3:2, and is better, so I with with it.&lt;/li&gt;
&lt;li&gt;some language pointing to tables &amp;amp; lines, language rendered obsolete by @ndw 's nice new graphs, excised&lt;/li&gt;
&lt;li&gt;other minor edits for clarity, consistency&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #568 created</title>
   <pubDate>Thu, 22 Jun 2023 20:15:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/568</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-568</guid>
   <description>&lt;div&gt;&lt;p&gt;567: schema for xslt40&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR applies the errata to the XSLT 3.0 version of the schema, and extends the schema to support new syntax that has been introduced in XSLT 4.0.&lt;/p&gt;
&lt;p&gt;Fix #567.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #567 created</title>
   <pubDate>Thu, 22 Jun 2023 17:24:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/567</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-567</guid>
   <description>&lt;div&gt;&lt;p&gt;Errors in schema for XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Erratum E10 for XSLT 3.0 notes a number of errors in the schema for XSLT 3.0. The errata can be found in the repository at https://github.com/w3c/qtspecs/blob/master/errata/xslt-30/errata.xml but they are not published or linked from the spec; they were produced by the XSL WG after publishing 3.0 and before the group disbanded.&lt;/p&gt;
&lt;p&gt;The version of the schema found in the 3.0 repository does not include these corrections; therefore, neither does the one in the 4.0 repository.&lt;/p&gt;
&lt;p&gt;There is another version of the schema in the xslt30test repository, and this one does include the corrections (as far as I can see).&lt;/p&gt;
&lt;p&gt;However, new additions for changes needed for 4.0 have been applied inconsistently to the two versions.&lt;/p&gt;
&lt;p&gt;There's therefore a pressing need to bring everything back into line. A good step would be to cut out the duplication: once we've got it clean, the build process should copy qtspecs/specifications/xslt-40/src/schema-for-xslt40.xsd to xslt40-test/tests/misc/catalog/schema-for-xslt40.xsd and we should only maintain the former.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #566 created</title>
   <pubDate>Thu, 22 Jun 2023 11:31:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/566</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-566</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parse-uri, fn:build-uri: Feedback&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Feedback on &lt;code&gt;fn:parse-uri&lt;/code&gt; (thanks, @ndw, for the comprehensible rules in the spec):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;With the current rules, the port is not detected in &lt;code&gt;http://x:80&lt;/code&gt;. Maybe &lt;code&gt;x:&lt;/code&gt; is misinterpreted as the beginning of a Windows path?&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;uri decoding&lt;/em&gt; should be revised. It’s currently possible to create strings with invalid Unicode characters: &lt;code&gt;parse-uri('%FF')&lt;/code&gt;. With the current rules, the following expression returns &lt;code&gt;df83&lt;/code&gt; and &lt;code&gt;dc00&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;parse-uri('%FF00')
=!&amp;gt; map:get('filepath')
=!&amp;gt; string-to-codepoints()
=!&amp;gt; format-integer('16^XX')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More to come (or not).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #560 closed</title>
   <pubDate>Thu, 22 Jun 2023 11:23:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/560</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-560</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting Monospace&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #565 closed</title>
   <pubDate>Thu, 22 Jun 2023 09:29:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/565</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-565</guid>
   <description>&lt;div&gt;&lt;p&gt;More typographic changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #565 created</title>
   <pubDate>Thu, 22 Jun 2023 09:21:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/565</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-565</guid>
   <description>&lt;div&gt;&lt;p&gt;More typographic changes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Further to #560, I'll just merge this if it passes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; font the same size as the other monospaced environments&lt;/li&gt;
&lt;li&gt;Tighten up the spacing in function signatures&lt;/li&gt;
&lt;li&gt;Make table-formatted examples use valign=top&lt;/li&gt;
&lt;li&gt;Add subtle shading to table-formatted examples so the rows are easier to distinguish.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #564 created</title>
   <pubDate>Thu, 22 Jun 2023 07:54:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/564</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-564</guid>
   <description>&lt;div&gt;&lt;p&gt;Sorted maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Based on a requirement from Michael Müller-Hillebrand on xsl-list.&lt;/p&gt;
&lt;p&gt;We could define a variant of map:build() that constructs a sorted map. If a map is sorted, then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map:is-sorted() returns true.&lt;/li&gt;
&lt;li&gt;map:keys() returns the keys in sorted order.&lt;/li&gt;
&lt;li&gt;map:range(map, min, max) returns a sorted sub-map whose keys lie within a particular range&lt;/li&gt;
&lt;li&gt;map:get-by-prefix() returns the values whose keys start with a given substring&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #563 closed</title>
   <pubDate>Wed, 21 Jun 2023 12:15:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/563</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-563</guid>
   <description>&lt;div&gt;&lt;p&gt;Style and other editorial fixes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #563 created</title>
   <pubDate>Wed, 21 Jun 2023 11:47:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/563</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-563</guid>
   <description>&lt;div&gt;&lt;p&gt;Style and other editorial fixes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR mostly attempts to fix #560 by making the formatting of code more consistent.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I removed the reference to the W3C CSS and made a local copy&lt;/li&gt;
&lt;li&gt;Added CSS variables for code parameters and tried to make use of them everywhere&lt;/li&gt;
&lt;li&gt;I removed the use of "font:small" in index tables, so they're a little easier to read&lt;/li&gt;
&lt;li&gt;I noticed and fixed two places where we had old-style type hierarchy diagrams&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These fixes aren't going to be visible in the PR build, so I'm just going to merge it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #562 created</title>
   <pubDate>Wed, 21 Jun 2023 09:03:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/562</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-562</guid>
   <description>&lt;div&gt;&lt;p&gt;361: Named arguments: $input vs. $value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;#361: Just an editorial one to get one more issue closed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 039 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 20 Jun 2023 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/06-20</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-06-20</guid>
</item><item>
   <title>Issue #526 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:49:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/526</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-526</guid>
   <description>&lt;div&gt;&lt;p&gt;load-xquery-module() needs changes to account for functions with an arity range&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #548 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:49:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/548</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-548</guid>
   <description>&lt;div&gt;&lt;p&gt;Space separation in lambda expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #561 created</title>
   <pubDate>Tue, 20 Jun 2023 16:44:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/561</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-561</guid>
   <description>&lt;div&gt;&lt;p&gt;Alias for `function` keyword; drop thin arrow syntax?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See https://github.com/qt4cg/qtspecs/issues/548#issuecomment-1591023928 and the subsequent comments:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[…] I would still be in favor to have &lt;code&gt;fn&lt;/code&gt; or &lt;code&gt;f&lt;/code&gt; as a plain alias for &lt;code&gt;function&lt;/code&gt; (and optionally drop the thin arrow syntax), simply because function items and declarations can get so frequent:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn($a) { $a + 1 }
fn { . + 1 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #552 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:41:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/552</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-552</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: Updates to back matter and status section of F+O spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #559 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:39:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/559</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-559</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor editorial edits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #558 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:38:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/558</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-558</guid>
   <description>&lt;div&gt;&lt;p&gt;Added fn:items-X cross-references&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #316 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:38:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/316</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-316</guid>
   <description>&lt;div&gt;&lt;p&gt;Function fn:differences&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #551 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:38:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/551</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-551</guid>
   <description>&lt;div&gt;&lt;p&gt;316: Drop the fn:differences function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #550 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:38:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/550</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-550</guid>
   <description>&lt;div&gt;&lt;p&gt;548: require parens around lambda arguments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #549 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:37:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/549</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-549</guid>
   <description>&lt;div&gt;&lt;p&gt;526 load xquery module&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #82 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:36:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/82</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-82</guid>
   <description>&lt;div&gt;&lt;p&gt;Should the mode attribute for apply-templates in templates of enclosed modes default to #current?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #112 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:36:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/112</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-112</guid>
   <description>&lt;div&gt;&lt;p&gt;Abbreviate `map:function($someMap)` to `$someMap?function()`&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #331 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:36:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/331</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-331</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend fn:path to support arrays and maps.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #376 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:35:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/376</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-376</guid>
   <description>&lt;div&gt;&lt;p&gt;add documentation prefix attribute to xsl:stylesheet&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #399 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:35:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/399</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-399</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: Using Multilevel Hierarchy and Abstraction when designing and specifying complex functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #425 closed</title>
   <pubDate>Tue, 20 Jun 2023 16:35:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/425</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-425</guid>
   <description>&lt;div&gt;&lt;p&gt;Structural proposal (ThinLayer:tm:) : Add a layer of thin spec between XPath and the XPath Derived Language&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #560 created</title>
   <pubDate>Tue, 20 Jun 2023 09:23:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/560</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-560</guid>
   <description>&lt;div&gt;&lt;p&gt;Formatting Monospace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It would be great if we could further tweak and unify the representation of monospaced text. On my machine, I see…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;monospace&lt;/code&gt; (13px) for the function signature (using &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;, with increased line heights)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monospace&lt;/code&gt; (11.7px) for &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Menlo, Consolas, "DejaVu Sans Mono", ...&lt;/code&gt; (13px) for &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Menlo, Consolas, "DejaVu Sans Mono", ...&lt;/code&gt; (14,4px) for &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; in examples&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…and I guess there are other cases. Would it be possible to use the same font style, size &amp;amp; line height for monospaced text? Maybe a friendlier light grey color for all &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; blocks, similar to the GitHub rendering.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/196589/7a3bdc02-b181-4370-b2ee-2a5ca2b05e04" alt="image"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #559 created</title>
   <pubDate>Mon, 19 Jun 2023 20:27:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/559</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-559</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor editorial edits&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The submitted edits are based upon a fresh reading of the serialization specs, and should all be relatively minor. Review would be appreciated, as small errors can have significant consequences.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #558 created</title>
   <pubDate>Mon, 19 Jun 2023 19:22:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/558</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-558</guid>
   <description>&lt;div&gt;&lt;p&gt;Added fn:items-X cross-references&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR provides cross-references in the form of notes between members of the pairs &lt;code&gt;items-before()&lt;/code&gt; &amp;amp; &lt;code&gt;items-ending-where()&lt;/code&gt; and &lt;code&gt;items-after()&lt;/code&gt; &amp;amp; &lt;code&gt;items-starting-where()&lt;/code&gt;. The goal is a light editorial intervention to enhance function discovery. (Anticipating a user who, at any one of these spec descriptions, wonders how they might exclude/include the first matching item.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 039 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 19 Jun 2023 10:55:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/06-20</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-06-20</guid>
</item><item>
   <title>Issue #512 closed</title>
   <pubDate>Mon, 19 Jun 2023 10:06:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/512</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-512</guid>
   <description>&lt;div&gt;&lt;p&gt;256: Context for default function parameter expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #3 closed</title>
   <pubDate>Mon, 19 Jun 2023 09:55:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/3</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-3</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow tokens in xsl:mode/@name&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #557 created</title>
   <pubDate>Sat, 17 Jun 2023 12:31:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/557</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-557</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:unparsed-binary: accessing and manipulating binary types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Dear All,
When working with binary types currently one has to fall back to string conversions and/or extensions.
A few ideas on nice to have functions that operate on binary types:
-accessing a single byte at a specific position
-splitting binary data at byte boundary (aka binary-subsequence)
-converting to/from a sequence of byte(s)
-joining binary data together
-(optionally) loading data directly as (base64)binary (some extensions are using unparsed-text with proprietary decoding 'x-binarytobase64' to retrieve a base64 castable string)
-standard bit-wise operators and, or, xor, not, rshift, lshift&lt;/p&gt;
&lt;p&gt;If considered, then each needs to be discussed in detail separately -ex. which type to support signed/unsigned, 8 bit etc.-, I merely intend as conversation starter in case others encountered similar issues/limitations.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;p.s.: Not sure if this is the right channel to raise this issue, so feel free to close/move/split accordingly.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #556 created</title>
   <pubDate>Fri, 16 Jun 2023 02:53:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/556</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-556</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization phase 5 note unclear&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;a href="https://qt4cg.org/specifications/xslt-xquery-serialization-40/Overview-diff.html#serphases"&gt;Section 4&lt;/a&gt; of the Serialization spects ends with this note:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Serialization is only defined in terms of encoding the result as a stream of octets. However, a &lt;a href="https://qt4cg.org/specifications/xslt-xquery-serialization-40/Overview-diff.html#serializer"&gt;serializer&lt;/a&gt; MAY provide an option that allows the encoding phase to be skipped, so that the result of serialization is a stream of Unicode characters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is a stream of Unicode characters? AFAIK, Unicode characters cannot be streamed &lt;em&gt;an sich&lt;/em&gt; but require some encoding. And how does would such a stream not consist of bytes/octets of one sort or another? A stream of what exactly?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #555 created</title>
   <pubDate>Fri, 16 Jun 2023 00:02:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/555</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-555</guid>
   <description>&lt;div&gt;&lt;p&gt;464: Revised narrative of normalization steps for serialization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR acts on #464 by revising the description of steps involved in normalizing a sequence that is input to serialization. I normally would wield a light editorial hand, but the issues raised in #464 as well as closer reading of the prose convinced me that a wholesale revision would be beneficial. For example, new sequences were described as if the reader already knew about them, but they are really only introduced as the last sentence in many steps.&lt;/p&gt;
&lt;p&gt;I have capitalized on the original version of step 1's appeal to &lt;code&gt;array:flatten&lt;/code&gt; to abbreviate the description for two of the steps.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #518 closed</title>
   <pubDate>Thu, 15 Jun 2023 02:10:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/518</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-518</guid>
   <description>&lt;div&gt;&lt;p&gt;transitive-closure() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #554 created</title>
   <pubDate>Thu, 15 Jun 2023 01:49:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/554</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-554</guid>
   <description>&lt;div&gt;&lt;p&gt;The Transitive Closure function produces an incomplete result, completeness/success and number of actual iterations must also be returned&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@michaelhkay and CG members,&lt;/p&gt;
&lt;p&gt;I initially reopened &lt;strong&gt;&lt;a href="https://github.com/qt4cg/qtspecs/issues/518"&gt;the original issue&lt;/a&gt;&lt;/strong&gt;, because there is some useful and needed functionality that the PR and the text of the FO specification do not provide, and we missed to discuss this at the June 13th meeting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I believe that typically a developer would need to know if the "whole" TC was completely produced, or not, and maybe how many iterations were needed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This can be provided if the result of the function was for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;map{ 
        "TC" : $thefinalTCNodeset,
        "WasTCComplete": $boolForTCCompletion,
        "NumberOfIterations: $someInteger
       }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One could argue that if &lt;strong&gt;&lt;em&gt;&lt;code&gt;$result? NumberOfIterations &amp;lt; max&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;, then we know that the complete TC was produced and thus we don't need the member "WasTCComplete".&lt;/p&gt;
&lt;p&gt;However, this is not the case when &lt;strong&gt;&lt;em&gt;&lt;code&gt;$result? NumberOfIterations eq max&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;. In this case both outcomes are possible: the complete TC was produced exactly in &lt;code&gt;max&lt;/code&gt; iterations (so the value of &lt;code&gt;"WasTCComplete"&lt;/code&gt;  must be &lt;code&gt;true()&lt;/code&gt; ), or &lt;code&gt;max&lt;/code&gt; iterations were performed and the &lt;code&gt;max + 1&lt;/code&gt;st iteration produced additional nodes -- in this case &lt;code&gt;"WasTCComplete"&lt;/code&gt; must be &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Failure to produce the complete TC in many cases will be regarded as error, and the developer needs to be sure that this was (or this wasn't) the case&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;thus, the current specification of this function needs additional work to accomodate the full needed functionality.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #553 created</title>
   <pubDate>Thu, 15 Jun 2023 00:09:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/553</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-553</guid>
   <description>&lt;div&gt;&lt;p&gt;New function fn:substitute()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The discussion on the parse-csv() use cases suggests there would be value in a function&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:substitute($value as item()*, $pos as xs:positiveInteger, $mangler as function(item()) as item()) as item()*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;whose effect is to return the input sequence &lt;code&gt;$value&lt;/code&gt; with the item at position &lt;code&gt;$pos&lt;/code&gt; replaced by the result of invoking &lt;code&gt;$mangler&lt;/code&gt; on that item.&lt;/p&gt;
&lt;p&gt;This should be aligned with similar functions for maps and arrays.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #552 created</title>
   <pubDate>Wed, 14 Jun 2023 21:32:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/552</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-552</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: Updates to back matter and status section of F+O spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Mainly updates to the changes appendix. Also improve the status section, and correct the bibref to the EXSLT specs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #256 closed</title>
   <pubDate>Wed, 14 Jun 2023 20:10:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/256</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-256</guid>
   <description>&lt;div&gt;&lt;p&gt;Function declarations: static and dynamic context for default parameter values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #275 closed</title>
   <pubDate>Wed, 14 Jun 2023 20:08:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/275</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-275</guid>
   <description>&lt;div&gt;&lt;p&gt;Problems with nt/xnt links to grammar terms&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #551 created</title>
   <pubDate>Wed, 14 Jun 2023 20:04:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/551</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-551</guid>
   <description>&lt;div&gt;&lt;p&gt;316: Drop the fn:differences function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #316&lt;/p&gt;
&lt;p&gt;The draft specification for fn:differences was added to the spec before we had a review process in place. The spec is complex and incomplete; issue #316 points out some of the difficulties. This PR removes it from the spec.&lt;/p&gt;
&lt;p&gt;Note that fn:deep-equal() now has a debug option which outputs diagnostic information in implementation-defined format; although not interoperable, this meets the main use case, which is to discover for diagnostic purposes why and in what way two values are not deep-equal to each other.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #550 created</title>
   <pubDate>Wed, 14 Jun 2023 08:47:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/550</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-550</guid>
   <description>&lt;div&gt;&lt;p&gt;548: require parens around lambda arguments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Require parentheses around the parameter list in a lambda expression, even when there is only one parameter, to avoid the problem of needing whitespace before the arrow. Resolves issue #548.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #327 closed</title>
   <pubDate>Wed, 14 Jun 2023 00:03:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/327</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-327</guid>
   <description>&lt;div&gt;&lt;p&gt;Tokenisation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #333 closed</title>
   <pubDate>Tue, 13 Jun 2023 23:55:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/333</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-333</guid>
   <description>&lt;div&gt;&lt;p&gt;Equality of function items&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #382 closed</title>
   <pubDate>Tue, 13 Jun 2023 23:49:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/382</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-382</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve whitespace handling in deep-equal&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #536 closed</title>
   <pubDate>Tue, 13 Jun 2023 23:49:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/536</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-536</guid>
   <description>&lt;div&gt;&lt;p&gt;Re: Mathematical Operator Symbols&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #513 closed</title>
   <pubDate>Tue, 13 Jun 2023 23:48:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/513</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-513</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrow operator: Inline functions without parens&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #549 created</title>
   <pubDate>Tue, 13 Jun 2023 23:46:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/549</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-549</guid>
   <description>&lt;div&gt;&lt;p&gt;526 load xquery module&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Updates the spec of fn:load-query-module to handle functions with optional parameters. Resolves issue #526&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 038 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 13 Jun 2023 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/06-13</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-06-13</guid>
</item><item>
   <title>Issue #521 closed</title>
   <pubDate>Tue, 13 Jun 2023 16:34:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/521</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-521</guid>
   <description>&lt;div&gt;&lt;p&gt;518: Add transitive-closure() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #545 closed</title>
   <pubDate>Tue, 13 Jun 2023 16:33:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/545</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-545</guid>
   <description>&lt;div&gt;&lt;p&gt;513: after arrow operator, inline function no longer needs parens&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #544 closed</title>
   <pubDate>Tue, 13 Jun 2023 16:33:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/544</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-544</guid>
   <description>&lt;div&gt;&lt;p&gt;536: disallow mixing of symbols in operator tokens&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #543 closed</title>
   <pubDate>Tue, 13 Jun 2023 16:32:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/543</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-543</guid>
   <description>&lt;div&gt;&lt;p&gt;382 simplify rules for whitespace in fn:deep-equal&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #542 closed</title>
   <pubDate>Tue, 13 Jun 2023 16:32:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/542</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-542</guid>
   <description>&lt;div&gt;&lt;p&gt;Fixes a simple error in the description of XSLT error XTSE4020&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #541 closed</title>
   <pubDate>Tue, 13 Jun 2023 16:32:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/541</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-541</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo in XPath §2.4.5 - E1 should be tagged as code not as var.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #548 created</title>
   <pubDate>Tue, 13 Jun 2023 07:55:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/548</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-548</guid>
   <description>&lt;div&gt;&lt;p&gt;Space separation in lambda expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently the expression &lt;code&gt;$a -&amp;gt; {$a+1}&lt;/code&gt; requires a space before the arrow, because the hyphen is otherwise tokenized as part of the variable name.&lt;/p&gt;
&lt;p&gt;Not only is this a very easy trap to fall into, it also tends to result in poor diagnostics because we're in lookahead territory where we are also considering an alternative parse along the lines &lt;code&gt;$a- &amp;gt; EXPR&lt;/code&gt; (where the variable name is &lt;code&gt;a-&lt;/code&gt;), and this parse only gets disqualified because an expression can't begin with &lt;code&gt;{&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we later introduce expressions that start with &lt;code&gt;{&lt;/code&gt;, writing &lt;code&gt;$a-&amp;gt;{3}&lt;/code&gt; with no space would no longer be an error, it would just mean something completely different from what you intended.&lt;/p&gt;
&lt;p&gt;One solution, not a very pretty one, is to require parentheses around the argument list even when there is only a single argument. Almost as inconvenient as requiring the space, but with better diagnostics if you forget.&lt;/p&gt;
&lt;p&gt;Another solution might be to restrict the parameter name so it can't contain a hyphen. The problem with that is that the tokenization becomes sensitive to the grammatical context, which is not totally unexplored territory, but complicates the fact that we're already in lookahead territory where we are looking at alternative parses. (The Saxon implementation already does the lookahead by retokenizing, so it's not impossible.)&lt;/p&gt;
&lt;p&gt;Would it be too horrendous to contemplate a backwards-incompatible change to say variable names cannot end in a hyphen, anywhere? Perhaps with a mode bit for compatibility? After all, all this complication is caused by the need to cater for something which no sane user ever does.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #547 created</title>
   <pubDate>Mon, 12 Jun 2023 15:24:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/547</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-547</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-036-02: Further elaboration of the rules for function identity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Following review and acceptance of the proposal introducing the concept of function identity (PR #525, Issue #520) this PR makes some refinements in response to comments raised during the review, especially in the following areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clarification as regards named function references to context-dependent functions&lt;/li&gt;
&lt;li&gt;relationship to (in)determinacy of a function&lt;/li&gt;
&lt;li&gt;avoiding the phrase "new function item"&lt;/li&gt;
&lt;li&gt;stating that the identity of a function item such as fn:count#1 applies even across execution scopes, e.g. calls to fn:transform.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #546 created</title>
   <pubDate>Mon, 12 Jun 2023 13:28:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/546</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-546</guid>
   <description>&lt;div&gt;&lt;p&gt;414: Attempt to implement expanding the allowed character repertoire&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #414&lt;/p&gt;
&lt;p&gt;This PR addresses ACTION QT4CG-036-01 on me.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 038 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sun, 11 Jun 2023 18:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/06-13</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-06-13</guid>
</item><item>
   <title>Pull request #545 created</title>
   <pubDate>Fri, 9 Jun 2023 20:52:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/545</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-545</guid>
   <description>&lt;div&gt;&lt;p&gt;513: after arrow operator, inline function no longer needs parens&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Resolves issue #513 by removing the requirement for an inline function expression on the RHS of an arrow operator to be enclosed in parentheses.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #544 created</title>
   <pubDate>Fri, 9 Jun 2023 16:51:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/544</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-544</guid>
   <description>&lt;div&gt;&lt;p&gt;536: disallow mixing of symbols in operator tokens&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As proposed in issue #536, this change disallows mixing of ordinary and full-width angle brackets in the same token.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #543 created</title>
   <pubDate>Fri, 9 Jun 2023 15:24:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/543</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-543</guid>
   <description>&lt;div&gt;&lt;p&gt;382 simplify rules for whitespace in fn:deep-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;My previous attempt to make a pull request for this change got lost somewhere in the process; here is a renewed attempt. The changes are in response to comments made during the review of the orginal deep-equal() proposal, recorded in issue #382&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #497 closed</title>
   <pubDate>Fri, 9 Jun 2023 11:44:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/497</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-497</guid>
   <description>&lt;div&gt;&lt;p&gt;https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-map-pairs has wrong function syntax order&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #542 created</title>
   <pubDate>Fri, 9 Jun 2023 11:36:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/542</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-542</guid>
   <description>&lt;div&gt;&lt;p&gt;Fixes a simple error in the description of XSLT error XTSE4020&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A comment to issue #82 identified this typo.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #541 created</title>
   <pubDate>Fri, 9 Jun 2023 11:34:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/541</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-541</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo in XPath §2.4.5 - E1 should be tagged as code not as var.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A trivial markup error that leads to the meta-variable E1 being wrongly rendered.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #66 closed</title>
   <pubDate>Fri, 9 Jun 2023 11:27:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/66</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-66</guid>
   <description>&lt;div&gt;&lt;p&gt;ThinArrowTarget should use FunctionBody&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #78 closed</title>
   <pubDate>Fri, 9 Jun 2023 11:26:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/78</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-78</guid>
   <description>&lt;div&gt;&lt;p&gt;Specify strict order of evaluation for a subexpression &lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #98 closed</title>
   <pubDate>Fri, 9 Jun 2023 10:22:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/98</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-98</guid>
   <description>&lt;div&gt;&lt;p&gt;Support ignoring whitespace/indentation differences in fn:deep-equal.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #125 closed</title>
   <pubDate>Fri, 9 Jun 2023 10:20:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/125</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-125</guid>
   <description>&lt;div&gt;&lt;p&gt;array:partition → fn:partition: empty results; examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #384 closed</title>
   <pubDate>Fri, 9 Jun 2023 09:20:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/384</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-384</guid>
   <description>&lt;div&gt;&lt;p&gt;Definition of "effective value" in XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #418 closed</title>
   <pubDate>Fri, 9 Jun 2023 09:18:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/418</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-418</guid>
   <description>&lt;div&gt;&lt;p&gt;array and map attribute in xsl:iterate and xsl:for-each-group&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #503 closed</title>
   <pubDate>Fri, 9 Jun 2023 09:14:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/503</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-503</guid>
   <description>&lt;div&gt;&lt;p&gt;Reinstate focus functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #381 closed</title>
   <pubDate>Fri, 9 Jun 2023 09:13:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/381</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-381</guid>
   <description>&lt;div&gt;&lt;p&gt;Deep-equal comparisons without errors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #520 closed</title>
   <pubDate>Fri, 9 Jun 2023 09:11:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/520</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-520</guid>
   <description>&lt;div&gt;&lt;p&gt;Function identity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #540 created</title>
   <pubDate>Thu, 8 Jun 2023 09:24:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/540</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-540</guid>
   <description>&lt;div&gt;&lt;p&gt;Add fn:system-property() to XQuery&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XSLT has specific additions to the XPath function library to facilitate identifying the running implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://www.w3.org/TR/xslt-30/#func-system-property&lt;/li&gt;
&lt;li&gt;https://www.w3.org/TR/xslt-30/#func-available-system-properties&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These would be useful for XQuery too. There should be something better than the fragile sadness of
https://github.com/AndrewSales/XQS/blob/461a90a8e2f49d9ef646ff6940c6962f18c0f43a/port.xqm#L3-L12&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #539 created</title>
   <pubDate>Tue, 6 Jun 2023 20:20:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/539</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-539</guid>
   <description>&lt;div&gt;&lt;p&gt;FLOWR where clause with a "do when false" option&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a request for an enhancement.&lt;/p&gt;
&lt;p&gt;Fairly often, I'll have a query arranged as&lt;/p&gt;
&lt;p&gt;let $step1 := &lt;em&gt;do some processing&lt;/em&gt;
where exists($step1)
let $step2 := &lt;em&gt;processing based on step1&lt;/em&gt;
where exists($step2)&lt;/p&gt;
&lt;p&gt;and so on.&lt;/p&gt;
&lt;p&gt;This is a convenient pattern until I want to emit some sort of message about where the process stops.&lt;/p&gt;
&lt;p&gt;It would be convenient to have&lt;/p&gt;
&lt;p&gt;where &lt;em&gt;expression&lt;/em&gt; else &lt;em&gt;expression&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;with the else as an optional extension of the where clause to allow emitting information about which where clause the FLOWR expression stopped on.&lt;/p&gt;
&lt;p&gt;It might be more congruent to the style of the language as&lt;/p&gt;
&lt;p&gt;where &lt;em&gt;expression&lt;/em&gt; return &lt;em&gt;expression&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;but then again having multiple return keywords isn't obviously a good thing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 037 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 6 Jun 2023 17:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/06-06</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-06-06</guid>
</item><item>
   <title>Issue #531 closed</title>
   <pubDate>Tue, 6 Jun 2023 16:06:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/531</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-531</guid>
   <description>&lt;div&gt;&lt;p&gt;grammar production LambdaParams has "(" and ")" incorrectly under the choice&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #532 closed</title>
   <pubDate>Tue, 6 Jun 2023 16:06:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/532</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-532</guid>
   <description>&lt;div&gt;&lt;p&gt;fix error in LambdaParams rule&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #534 closed</title>
   <pubDate>Tue, 6 Jun 2023 16:06:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/534</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-534</guid>
   <description>&lt;div&gt;&lt;p&gt;530: escape solidus in JSON&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #535 closed</title>
   <pubDate>Tue, 6 Jun 2023 16:06:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/535</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-535</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: add an entry to the changes appendix&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #538 created</title>
   <pubDate>Tue, 6 Jun 2023 13:25:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/538</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-538</guid>
   <description>&lt;div&gt;&lt;p&gt;480: Attempt to allow xs:string to be 'promoted to' xs:anyURI&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think it might be a little cheeky to call it "promotion" in both directions, but this really has more to do with a kind of conversion, so I'm willing to let it slide.&lt;/p&gt;
&lt;p&gt;If accepted, this PR resolves ACTION QT4CG-035-03.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #537 closed</title>
   <pubDate>Mon, 5 Jun 2023 16:27:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/537</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-537</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: present F&amp;amp;O examples as tables.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #537 created</title>
   <pubDate>Mon, 5 Jun 2023 14:28:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/537</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-537</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: present F&amp;amp;O examples as tables.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a purely editorial change to the stylesheet that formats examples in the F&amp;amp;O spec; it changes the presentation to be a two-column table containing expressions and results. The intention is to reduce clutter and to improve the readability where code samples (either expressions or results) need multi-line rendition.&lt;/p&gt;
&lt;p&gt;In the vast majority of cases the change is clearly (IMHO) an improvement, but further tweaking is possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There may be scope for tailoring the CSS (for example, I don't like the fact that table cells are centred vertically).&lt;/li&gt;
&lt;li&gt;Some of the tables (e.g. parse-uri examples) take too much horizontal space; the code should be edited to reduce the line length&lt;/li&gt;
&lt;li&gt;Examples are sometimes introduced with a free-standing paragraph tag rather than with fo:preamble, which separates the introduction from the code into a separate table row.&lt;/li&gt;
&lt;li&gt;Some of the examples that were designed for inline rendition could usefully take advantage of the opportunity to turn them into multi-line code samples.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 037 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 5 Jun 2023 09:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/06-06</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-06-06</guid>
</item><item>
   <title>Issue #536 created</title>
   <pubDate>Sat, 3 Jun 2023 15:41:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/536</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-536</guid>
   <description>&lt;div&gt;&lt;p&gt;Re: Mathematical Operator Symbols&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;#460&lt;/p&gt;
&lt;p&gt;&lt;code&gt;=!&amp;gt;&lt;/code&gt; is not mentioned in A 3.3&lt;/p&gt;
&lt;p&gt;Also, I do not think it makes sense to allow mixing both characters in one operator, like in &lt;code&gt;＜&amp;lt;&lt;/code&gt;. It combines the disadvantages of &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;＜＜&lt;/code&gt; without any advantages&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #535 created</title>
   <pubDate>Sat, 3 Jun 2023 14:22:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/535</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-535</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: add an entry to the changes appendix&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #534 created</title>
   <pubDate>Wed, 31 May 2023 17:27:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/534</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-534</guid>
   <description>&lt;div&gt;&lt;p&gt;530: escape solidus in JSON&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add &lt;code&gt;escape-solidus&lt;/code&gt; serialization parameter for the JSON output method.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #533 created</title>
   <pubDate>Wed, 31 May 2023 15:58:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/533</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-533</guid>
   <description>&lt;div&gt;&lt;p&gt;413: Spec for CSV parsing with fn:parse-csv()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a spec proposal for &lt;code&gt;fn:parse-csv()&lt;/code&gt; from #413.&lt;/p&gt;
&lt;p&gt;I've tried to cover off most of what was discussed in that issue, but I have avoided dealing with backlash escapes (per @ChristianGruen's early comment), sticking with the RFC 4180 quoting approach.&lt;/p&gt;
&lt;p&gt;There are some issues with the structure where I tried to follow the existing structure of chapter 15, but that leaves the function definition in 15.4 separated by a lot of text before the wider format discussion in 15.7. The split between function def and context affects the JSON and HTML parsing functions too, so I have avoided trying to fix that as well in this PR.&lt;/p&gt;
&lt;p&gt;If this meets with approval, I'll squash commits and rebase before merging.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #532 created</title>
   <pubDate>Wed, 31 May 2023 07:30:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/532</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-532</guid>
   <description>&lt;div&gt;&lt;p&gt;fix error in LambdaParams rule&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;fixes https://github.com/qt4cg/qtspecs/issues/531#issue-1733539612&lt;/p&gt;
&lt;p&gt;LambdaParam | "(" | (LambdaParam ("," LambdaParam)&lt;em&gt;)? | ")" should be:
LambdaParam | ( "(" (LambdaParam ("," LambdaParam)&lt;/em&gt;)? ")" )&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #531 created</title>
   <pubDate>Wed, 31 May 2023 07:14:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/531</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-531</guid>
   <description>&lt;div&gt;&lt;p&gt;grammar production LambdaParams has "(" and ")" incorrectly under the choice&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The grammar production
&lt;code&gt;LambdaParams ::= LambdaParam  |  "("  |  (LambdaParam  (","  LambdaParam)*)?  |  ")"&lt;/code&gt;
should be
&lt;code&gt;LambdaParams ::= LambdaParam  |  ("(" (LambdaParam  (","  LambdaParam)*)? ")")&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #530 created</title>
   <pubDate>Wed, 31 May 2023 06:00:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/530</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-530</guid>
   <description>&lt;div&gt;&lt;p&gt;Escaping of forward slash in JSON output method&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The fact that we escape forward slash in the JSON output method has proved unpopular with quite a few users.&lt;/p&gt;
&lt;p&gt;The rationale for doing it is discussed at https://stackoverflow.com/questions/1580647/json-why-are-forward-slashes-escaped&lt;/p&gt;
&lt;p&gt;The short summary is that it's only needed when JSON is inserted into an HTML &lt;code&gt;script&lt;/code&gt; element, and then only when immediately followed by &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There's a workaround using character maps but it's really clumsy.&lt;/p&gt;
&lt;p&gt;I don't want to escape forward slashes by default in the xdm-to-json() function because they appear so often in namespaces and it adds an awful lot of visual clutter. That means that our JSON formatter needs an option to suppress this escaping, which means we might as well provide user control over it as an output property...&lt;/p&gt;
&lt;p&gt;Adding a new output property just for this purpose is rather heavyweight both in the specs and in our implementation, but I can't think of a better solution. So I propose adding &lt;code&gt;escape-solidus&lt;/code&gt;, values yes/no, default (for compatibility) yes.&lt;/p&gt;
&lt;p&gt;Yes, someone will ask about the name. Surely no-one calls it a solidus? Well, Unicode does, and I think we should use the official name. And it avoids arguing about whether it should be slash or forwards-slash or forward-slash. At least I'm not proposing virgule.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #367 closed</title>
   <pubDate>Tue, 30 May 2023 22:19:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/367</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-367</guid>
   <description>&lt;div&gt;&lt;p&gt;Focus for RHS of thin arrow expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 036 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 30 May 2023 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/05-30</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-05-30</guid>
</item><item>
   <title>Issue #524 closed</title>
   <pubDate>Tue, 30 May 2023 16:17:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/524</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-524</guid>
   <description>&lt;div&gt;&lt;p&gt;503: reinstate focus functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #525 closed</title>
   <pubDate>Tue, 30 May 2023 16:17:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/525</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-525</guid>
   <description>&lt;div&gt;&lt;p&gt;520: add function identity and use it in deep-equal&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #519 closed</title>
   <pubDate>Tue, 30 May 2023 16:16:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/519</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-519</guid>
   <description>&lt;div&gt;&lt;p&gt;237: Revise tokenisation appendix&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #527 closed</title>
   <pubDate>Tue, 30 May 2023 16:16:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/527</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-527</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: more corrections to F+O examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #529 created</title>
   <pubDate>Mon, 29 May 2023 11:22:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/529</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-529</guid>
   <description>&lt;div&gt;&lt;p&gt;528 fn:elements-to-maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Revises the detail of the proposed json() function, including a name change to xdm-to-json().&lt;/p&gt;
&lt;p&gt;The proposed changes give us a starting point for implementation, but I would expect there might be further tweaks to the spec once we try applying the function to real examples.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 036 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 29 May 2023 07:53:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/05-30</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-05-30</guid>
</item><item>
   <title>Issue #528 created</title>
   <pubDate>Sun, 28 May 2023 20:08:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/528</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-528</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:elements-to-maps (before: Review of the fn:json() function)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've been writing tests for the fn:json function, whose spec I haven't read for quite a while, so it's an opportunity (a) to request WG review of the spec, and (b) for some minor comments.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I think a better name for the function might be &lt;code&gt;fn:to-json&lt;/code&gt;. Any other suggestions?&lt;/li&gt;
&lt;li&gt;Where we specify that a JSON object should be output with particular properties, I think we should be consistent about whether or not we prescribe the order. Writing tests is a lot easier if the order is always prescribed!&lt;/li&gt;
&lt;li&gt;Document nodes: it would be better to output both the document URI and the base URI where available.&lt;/li&gt;
&lt;li&gt;Under "The children of the element are processed as follows" there are four rules. In the case where an element has just one element node child, I think rule 4 should apply rather than rule 3.&lt;/li&gt;
&lt;li&gt;Under Processing-Instruction nodes: typo "A JSON object with a two properties".&lt;/li&gt;
&lt;li&gt;The section starting "Strings are escaped as follows" should be promoted up a level.&lt;/li&gt;
&lt;li&gt;Representing functions: I propose a different set of rules. (a) for a function that is a reference to a built-in or user-defined function definition, output "Q{uri}local#arity". (b) for an anonymous function, output "#anonymous-function". The rationale is that the JSON output here isn't going to be useful except as a placeholder to indicate that a function item is present.&lt;/li&gt;
&lt;li&gt;We might want to be more prescriptive about how numbers are formatted (or to provide user options)&lt;/li&gt;
&lt;li&gt;Like many XML-to-JSON libraries, there's the problem that two instances of the same element type might be output very differently depending on which children are present. For example the representation of a book with two authors might be very different from a book with one author. I would suggest that rather than the boolean &lt;code&gt;element-map&lt;/code&gt; option, we allow the options to include a list of element names for which &lt;code&gt;object&lt;/code&gt; representation rather than &lt;code&gt;array&lt;/code&gt; representation is to be used.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #527 created</title>
   <pubDate>Sun, 28 May 2023 10:24:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/527</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-527</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: more corrections to F+O examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fixes errors in the fn:replace examples, updates elsewhere to reflect changes to the syntax of lambda expressions and focus functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #526 created</title>
   <pubDate>Fri, 26 May 2023 21:22:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/526</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-526</guid>
   <description>&lt;div&gt;&lt;p&gt;load-xquery-module() needs changes to account for functions with an arity range&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The spec of &lt;code&gt;load-xquery-module()&lt;/code&gt; assumes that each function declaration in a query module has a single integer arity; this doesn't allow for default parameters which mean it now has an arity range.&lt;/p&gt;
&lt;p&gt;Because the returned map contains function items, which always have a fixed arity, I think it needs to contain one entry for each arity in the arity range. This involves evaluating the defaults for any parameters that have a default value defined; if the default value is context dependent, this is going to have to use the context of the &lt;code&gt;load-xquery-module()&lt;/code&gt; function call, which isn't very meaningful, but I can't see what else to do.&lt;/p&gt;
&lt;p&gt;An alternative is to only include one function item in the result, corresponding to the maximum arity.&lt;/p&gt;
&lt;p&gt;If we introduce sequence-variadic functions, the arity range becomes infinite, which makes both of these ideas problematic. But presumably sequence-variadic functions will be callable with all the values supplied in a single array?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #525 created</title>
   <pubDate>Fri, 26 May 2023 09:27:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/525</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-525</guid>
   <description>&lt;div&gt;&lt;p&gt;520: add function identity and use it in deep-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I believe this PR resolves issues&lt;/p&gt;
&lt;p&gt;issue #520 - function identity
issue #333 - equality of function items
issue #381 - deep-equal comparison without errors&lt;/p&gt;
&lt;p&gt;The PR introduces a concept of function identity in the data model, and for all expressions that create functions, explains what the identity of the returned function is.&lt;/p&gt;
&lt;p&gt;The concept of function identity is used initially in two places: in fn:deep-equal(), when the operands include function items; and in the F+O prose defining the concept of determinism, which in turn is relied on by the definition of memo functions in XSLT.&lt;/p&gt;
&lt;p&gt;I had hoped to go further and address issue #119, generalising what kinds of values are allowed as keys in maps, but as explained in a comment on that issue, I hit obstacles.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #524 created</title>
   <pubDate>Thu, 25 May 2023 10:09:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/524</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-524</guid>
   <description>&lt;div&gt;&lt;p&gt;503: reinstate focus functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR reinstates "focus functions", using the syntax &lt;code&gt;function{EXPR}&lt;/code&gt; rather than &lt;code&gt;-&amp;gt;{EXPR}&lt;/code&gt;. If accepted, this resolves issue #503.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #523 created</title>
   <pubDate>Wed, 24 May 2023 23:28:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/523</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-523</guid>
   <description>&lt;div&gt;&lt;p&gt;Dealing with component name conflicts with library packages&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;Override with visibility='hidden'&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;override&amp;gt;
   &amp;lt;template name='foo' visibility='hidden'/&amp;gt;
&amp;lt;/override&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This change allows the using package to override a component without running into a potential naming conflict with another component in the using package or in another used package. Because the visibility is hidden, the component is not invokable from the using package.&lt;/p&gt;
&lt;h2&gt;Accept with alias&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;accept component='template' names='foo' aliases='fu'/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This change allows the using package to accept components but with a different name.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #522 closed</title>
   <pubDate>Wed, 24 May 2023 07:48:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/522</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-522</guid>
   <description>&lt;div&gt;&lt;p&gt;function-catalog.xml: Original line endings reverted (modified by GitHub’s 'direct edit' feature)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #522 created</title>
   <pubDate>Wed, 24 May 2023 07:48:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/522</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-522</guid>
   <description>&lt;div&gt;&lt;p&gt;function-catalog.xml: Original line endings reverted (modified by GitHub’s 'direct edit' feature)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I learned it’s NOT advisable to use GitHub’s features to directly edit files in the browser. The newlines of &lt;code&gt;function-catalog.xml&lt;/code&gt; of the original file seem to be changed.&lt;/p&gt;
&lt;p&gt;This PR is restoring the original newlines.
Sorry for that.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #521 created</title>
   <pubDate>Tue, 23 May 2023 18:50:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/521</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-521</guid>
   <description>&lt;div&gt;&lt;p&gt;518: Add transitive-closure() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 035 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 23 May 2023 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/05-23</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-05-23</guid>
</item><item>
   <title>Issue #504 closed</title>
   <pubDate>Tue, 23 May 2023 16:18:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/504</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-504</guid>
   <description>&lt;div&gt;&lt;p&gt;Merge map:keys and map:keys-where&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #515 closed</title>
   <pubDate>Tue, 23 May 2023 16:18:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/515</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-515</guid>
   <description>&lt;div&gt;&lt;p&gt;504: Merge map:keys and map:keys-where&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #396 closed</title>
   <pubDate>Tue, 23 May 2023 16:15:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/396</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-396</guid>
   <description>&lt;div&gt;&lt;p&gt;333: Deep-equal, no failure when comparing functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #520 created</title>
   <pubDate>Tue, 23 May 2023 11:58:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/520</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-520</guid>
   <description>&lt;div&gt;&lt;p&gt;Function identity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;To make deep-equal error-free for all arguments (issue #333), and to support the introduction of sets (issue #34), we need to be able to test whether two functions are "the same function". This is a proposed pragmatic solution.&lt;/p&gt;
&lt;p&gt;We change the data model for functions so that functions, like nodes, have an identity that is acquired when the function is created; two functions are identical if and only if they have the same identity.&lt;/p&gt;
&lt;p&gt;In general any expression that returns a new function allocates it an identity that is different from all other existing functions (as with nodes). However:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repeated evaluation of a function reference such as count#1 returns the same function each time, provided that the target function is context-free.&lt;/li&gt;
&lt;li&gt;Optimizers are allowed to rewrite expressions (for example by loop-lifting, etc) so that expressions that would in principle return distinct functions actually return the same function, provided the optimizer can determine that the two functions are equivalent in all respects other than their identity. For example if the expression &lt;code&gt;contains(?, 'xxx')&lt;/code&gt; appears in a loop, the expression can be lifted out of the loop so there is no requirement that it returns different functions each time (as there is with nodes)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Benefits of this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;identical($x, $x) is always true (function identity survives binding to variables)&lt;/li&gt;
&lt;li&gt;functions obtained by repeated evaluation of the same expression in the same context are likely to return identical results in cases that are simple enough for an optimizer to analyse&lt;/li&gt;
&lt;li&gt;the results are likely to be reasonably intuitive&lt;/li&gt;
&lt;li&gt;optimisers aren't constrained by rules on identity to restrict the rewrites they can attempt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This does mean that expressions that return functions become a little impure - but only in the same way that expressions that create nodes are a little impure. The impurity is well understood and tolerated.&lt;/p&gt;
&lt;p&gt;Maps and arrays do not have identity as a property separate from their content.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #519 created</title>
   <pubDate>Tue, 23 May 2023 10:50:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/519</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-519</guid>
   <description>&lt;div&gt;&lt;p&gt;237: Revise tokenisation appendix&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is an extensive revision to the rules for tokenisation that corrects a number of errors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The problem mentioned in issue 237, namely the lack of clarity in the "longest token rule". This PR fixes this by clarifying what this rule means and where it applies. In particular it tackles the issue of "complex terminals" such as element constructor expressions and string templates where a symbol that is a single token at one level (in the sense that whitespace is constrained) also contains enclosed expressions.&lt;/li&gt;
&lt;li&gt;Some productions/tokens were misclassified or omitted from the relevant lists of tokens in the appendix. This has been fixed in part by using general rules in the grammar2spec stylesheet to generate lists of tokens, rather than relying on annotations in the grammar file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The PR includes changes to the grammar2spec stylesheet.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #518 created</title>
   <pubDate>Mon, 22 May 2023 16:45:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/518</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-518</guid>
   <description>&lt;div&gt;&lt;p&gt;transitive-closure() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've just found myself writing, yet again, a transitive closure function, and I feel we could add this to the spec.&lt;/p&gt;
&lt;p&gt;I'm afraid it's another case where we really need set operations and therefore a universal equality operator. For the moment I'll just define it over nodes, which shelves the problem.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:transitive-closure($start as node()*, $step as function($node as node()) as node()*) as node()*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;returns the set of all nodes reachable from a node in $start by zero or more applications of the $step function, in document order with duplicates removed.&lt;/p&gt;
&lt;p&gt;Can probably define it formally something like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $next-iteration := $start =!&amp;gt; $step()
return if (empty($next-iteration except $start))
           then $start
           else transitive-closure($start | $next-iteration, $step)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #517 created</title>
   <pubDate>Sun, 21 May 2023 01:43:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/517</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-517</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:chain (before: fn:multi-compose)&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;&lt;strong&gt;FO: fn:multi-compose : Evaluate a chain of functions&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;As per Wikipedia:&lt;/p&gt;
&lt;p&gt;" In &lt;a href="https://en.wikipedia.org/wiki/Mathematics"&gt;mathematics&lt;/a&gt;, &lt;strong&gt;function composition&lt;/strong&gt; is an operation  ∘  that takes two &lt;a href="https://en.wikipedia.org/wiki/Function_(mathematics)"&gt;functions&lt;/a&gt; &lt;em&gt;f&lt;/em&gt; and &lt;em&gt;g&lt;/em&gt;, and produces a function &lt;/p&gt;
&lt;p&gt;&lt;em&gt;h&lt;/em&gt; = &lt;em&gt;g&lt;/em&gt;  ∘  &lt;em&gt;f&lt;/em&gt; such that &lt;em&gt;h&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;) = &lt;em&gt;g&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)).&lt;/p&gt;
&lt;p&gt;In this operation, the function &lt;em&gt;g&lt;/em&gt; is &lt;a href="https://en.wikipedia.org/wiki/Function_application"&gt;applied&lt;/a&gt; to the result of applying the function &lt;em&gt;f&lt;/em&gt; to &lt;em&gt;x&lt;/em&gt;. That is, the functions &lt;/p&gt;
&lt;p&gt;&lt;em&gt;f&lt;/em&gt; : &lt;em&gt;X&lt;/em&gt; → &lt;em&gt;Y&lt;/em&gt; and &lt;em&gt;g&lt;/em&gt; : &lt;em&gt;Y&lt;/em&gt; → &lt;em&gt;Z&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;are &lt;strong&gt;composed&lt;/strong&gt; to yield a function that maps &lt;em&gt;x&lt;/em&gt; in &lt;a href="https://en.wikipedia.org/wiki/Domain_of_a_function"&gt;domain&lt;/a&gt; &lt;em&gt;X&lt;/em&gt; to &lt;em&gt;g&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)) in &lt;a href="https://en.wikipedia.org/wiki/Codomain"&gt;codomain&lt;/a&gt; &lt;em&gt;Z&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Intuitively, if &lt;em&gt;z&lt;/em&gt; is a function of &lt;em&gt;y&lt;/em&gt;, and &lt;em&gt;y&lt;/em&gt; is a function of &lt;em&gt;x&lt;/em&gt;, then &lt;em&gt;z&lt;/em&gt; is a function of &lt;em&gt;x&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The resulting &lt;em&gt;composite&lt;/em&gt; function is denoted &lt;em&gt;g&lt;/em&gt; ∘ &lt;em&gt;f&lt;/em&gt; : &lt;em&gt;X&lt;/em&gt; → &lt;em&gt;Z&lt;/em&gt;, defined by:&lt;/p&gt;
&lt;p&gt; (&lt;em&gt;g&lt;/em&gt; ∘ &lt;em&gt;f&lt;/em&gt; )(&lt;em&gt;x&lt;/em&gt;) = &lt;em&gt;g&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)) for all &lt;em&gt;x&lt;/em&gt; in &lt;em&gt;X&lt;/em&gt;
"&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;In this Proposal we generalize function composition to the case when a sequence of functions are composed together, so that the last one is applied on an argument $x, then  the last-but-one is applied on the result of this application, and so on … until finally the first function in the sequence is applied on the result produced so far.&lt;/p&gt;
&lt;p&gt;This is an effective way of chaining a sequence of functions together, and we don’t need to invent or use any special operators or syntax, but we just pass this sequence of functions as argument to &lt;strong&gt;&lt;em&gt;fn:multi-compose&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fn:multi-compose := function($funs as function(*)*, $x)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here is an XPath 3.0 implementation of fn:multi-compose&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $apply := function($f, $x) {fn:apply($f, [$x])},
    $multi-compose := function($funs as function(*)*, $x)
                  {
                    fold-right($funs, $x, $apply)
                  },
    (: The functions $incr and $times are needed just to show this example :) 
    $incr := function($x) {op("+")(?, $x)},
    $times := function($y) {op("*")(?, $y)}                 
                  
 return
   $multi-compose(($times(5), $incr(1)), 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As wanted, the result of evaluating this is&lt;/p&gt;
&lt;p&gt;15: (2 +1) * 5&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In this implementation the type of the 2nd (last) argument of &lt;strong&gt;&lt;em&gt;$multi-compose&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;$apply&lt;/em&gt;&lt;/strong&gt; is &lt;code&gt;item()*&lt;/code&gt; (any) and as such it is omitted. In case the function to be applied first, needs  more than one argument, all of its arguments must be presented in the function call as a single sequence , and are passed (in order) as the members of a single array, as already implemented by the standard &lt;strong&gt;&lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-apply"&gt;fn:apply&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is a dynamic error if any of the function applications produces a result which does not belong to the Domain of the function immediately preceding it in the function sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #181 closed</title>
   <pubDate>Sat, 20 May 2023 18:32:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/181</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-181</guid>
   <description>&lt;div&gt;&lt;p&gt;HOF Sequence Functions with Positional Arguments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #516 created</title>
   <pubDate>Sat, 20 May 2023 18:12:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/516</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-516</guid>
   <description>&lt;div&gt;&lt;p&gt;Add position argument to HOF callbacks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The coercion rules now allow a supplied function item to have lower arity than the signature of the declared type; the effect is that the information supplied in the additional arguments is ignored.&lt;/p&gt;
&lt;p&gt;One of the intended use cases for this was to allow existing higher-order functions to be extended while retaining backwards compatibility. For example, in &lt;code&gt;fn:filter&lt;/code&gt;, we can change the required type of the predicate function from &lt;code&gt;function(item()) as xs:boolean&lt;/code&gt; to &lt;code&gt;function(item(), xs:positiveInteger) as xs:boolean&lt;/code&gt;, with the second argument supplying the position of the item being tested. A function that isn't interested in the position can just ignore it, so existing calls will continue to work.&lt;/p&gt;
&lt;p&gt;I propose that we add a position argument to the callbacks for:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:filter
fn:for-each
fn:for-each-pair
fn:partition
fn:items-after
fn:items-before
fn:items-starting-where
fn:items-ending-where
array:filter
array:for-each
array:for-each-pair
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other candidates include&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:all
fn:some
fn:index-where
array:index-where
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but I suggest we leave these unless someone can think of a use case.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 035 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sat, 20 May 2023 10:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/05-23</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-05-23</guid>
</item><item>
   <title>Issue #471 closed</title>
   <pubDate>Sat, 20 May 2023 10:04:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/471</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-471</guid>
   <description>&lt;div&gt;&lt;p&gt;Unify formatting (function calls, code blocks, quotes) in the specification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #511 closed</title>
   <pubDate>Sat, 20 May 2023 10:04:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/511</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-511</guid>
   <description>&lt;div&gt;&lt;p&gt;471: &amp;lt;code&amp;gt; elements, simple/typographic quotes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #515 created</title>
   <pubDate>Sat, 20 May 2023 09:57:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/515</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-515</guid>
   <description>&lt;div&gt;&lt;p&gt;504: Merge map:keys and map:keys-where&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #514 created</title>
   <pubDate>Sat, 20 May 2023 08:44:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/514</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-514</guid>
   <description>&lt;div&gt;&lt;p&gt;Lambda expression: Annotations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Edit 2023-05-21:&lt;/strong&gt; Feedback was incorporated.&lt;/p&gt;
&lt;p&gt;In the current grammar rules, there are subtle differences in the &lt;code&gt;InlineFunctionExpr&lt;/code&gt; and &lt;code&gt;LambdaExpr&lt;/code&gt; rules that we should dissolve.&lt;/p&gt;
&lt;p&gt;Annotations are not supported in lambda expressions, which I believe is an unnecessary restriction:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: currently legal :)
let $delete-texts := %updating function($nodes) { delete nodes $nodes//text() }
return $delete-texts(//city)

(: currently illegal :)
let $delete-texts := %updating ($nodes) -&amp;gt; { delete nodes $nodes//text() }
return $delete-texts(//city)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should suffice to extend one rule in the grammar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(: old :)
LambdaExpr  ::=  LambdaParams "-&amp;gt;" EnclosedExpr
(: new :)
LambdaExpr  ::=  Annotation* LambdaParams "-&amp;gt;" EnclosedExpr
&lt;/code&gt;&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;We could also type declarations (as @michaelhkay has indicated below, though, this might not be as simple to realize as I hoped):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: currently legal :)
let $find-john := function($node as node()) as xs:boolean { contains($node, 'john') }
return $find-john($node)

(: currently illegal :)
let $find-john := ($node as node()) as xs:boolean -&amp;gt; { contains($node, 'john') }
return $find-john($node)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The type declarations cannot be allowed if parentheses are omitted (unless we make them mandatory):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: without parens :)
$i -&amp;gt; { ... }

(: parens :)
($i as xs:int) as xs:int -&amp;gt; { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are the current grammar rules:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FunctionItemExpr    ::=  NamedFunctionRef | InlineFunctionExpr | LambdaExpr
InlineFunctionExpr  ::=  Annotation* "function" FunctionSignature FunctionBody
FunctionSignature   ::=  "(" ParamList? ")" TypeDeclaration?
ParamList           ::=  Param ("," Param)*
Param               ::=  "$" EQName TypeDeclaration?
FunctionBody        ::=  EnclosedExpr
LambdaExpr          ::=  LambdaParams "-&amp;gt;" EnclosedExpr
LambdaParams        ::=  LambdaParam | "(" | (LambdaParam ("," LambdaParam)*)? | ")"
LambdaParam         ::=  "$" VarName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the &lt;code&gt;InlineFunctionExpr&lt;/code&gt; and &lt;code&gt;LambdaExpr&lt;/code&gt; both generate anonymous functions, we shouldn’t make a difference, and this is what I would recommend:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FunctionItemExpr    ::=  NamedFunctionRef | InlineFunctionExpr
InlineFunctionExpr  ::=  Annotation* (InlineFunction | LambdaFunction) FunctionBody
InlineFunction      ::=  "function" FunctionSignature
LambdaFunction      ::=  (Param | FunctionSignature)) "-&amp;gt;"
FunctionSignature   ::=  "(" ParamList? ")" TypeDeclaration?
ParamList           ::=  TypedParam ("," TypedParam)*
TypedParam          ::=  Param TypeDeclaration?
Param               ::=  "$" VarName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Disclaimer: I could have raised this earlier, but I didn’t want to prolong the ongoing discussion on the open pull requests.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #513 created</title>
   <pubDate>Sat, 20 May 2023 08:00:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/513</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-513</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrow operator: Inline functions without parens&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See also https://github.com/qt4cg/qtspecs/issues/435#issuecomment-1508228624: If an inline function expression is used as the right-hand operand of the arrow operators, parentheses must be used:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: now :)
$seq =&amp;gt; (function($x) { ... })()
(: desirable :)
$seq =&amp;gt; function($x) { ... }()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This could be changed by adding the &lt;code&gt;InlineFunctionExpr&lt;/code&gt; to the &lt;code&gt;ArrowDynamicFunction&lt;/code&gt; rule:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[115]  SequenceArrowTarget  ::=  "=&amp;gt;" ((ArrowStaticFunction ArgumentList) | (ArrowDynamicFunction PositionalArgumentList))
[151]  ArrowStaticFunction  ::=  EQName
[152]  ArrowDynamicFunction  ::=  VarRef | ParenthesizedExpr | &lt;code&gt;InlineFunctionExpr&lt;/code&gt;
[142]  ArgumentList  ::=  "(" ((PositionalArguments ("," KeywordArguments)?) | KeywordArguments)? ")"
[143]  PositionalArgumentList  ::=  "(" PositionalArguments? ")"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It will be best to tackle this after we’ve resolved #503, and we’ll have to check if the simplification doesn’t cause ambiguities.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #53 closed</title>
   <pubDate>Fri, 19 May 2023 20:01:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/53</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-53</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow function keyword inline functions without parameters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #436 closed</title>
   <pubDate>Fri, 19 May 2023 20:00:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/436</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-436</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow inline function expressions in arrow operator call chains&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #435 closed</title>
   <pubDate>Fri, 19 May 2023 20:00:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/435</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-435</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove the inlined function expression variant of the thin arrow operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #512 created</title>
   <pubDate>Fri, 19 May 2023 14:47:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/512</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-512</guid>
   <description>&lt;div&gt;&lt;p&gt;256: Context for default function parameter expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a renewed attempt to tackle issue 256, which concerns how to define the static and dynamic context for default value expressions for optional function parameters in XQuery and XSLT. The resolution is to define the static and dynamic context for these expressions in detail.&lt;/p&gt;
&lt;p&gt;To make this work, some refinement of the static and dynamic context definitions is needed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default collation is moved from the static context to the dynamic context, with a note that it is always known statically except in the case when defining the default for a function parameter.&lt;/li&gt;
&lt;li&gt;static base URI (in the static context) and executable base URI (in the dynamic context) are now formally separated; previously we fudged this by saying they could be different, but without recognizing separate context components&lt;/li&gt;
&lt;li&gt;the base URI for resolving relative collation URIs is now implementation defined. This allows implementors to use either the compile-time or run-time base URI, or some other URI defined using a processor API.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #511 created</title>
   <pubDate>Fri, 19 May 2023 13:10:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/511</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-511</guid>
   <description>&lt;div&gt;&lt;p&gt;471: &amp;lt;code&amp;gt; elements, simple/typographic quotes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;That was a work-intensive one, as expected, but I’m optimistic that the PR improves the overall situation.
I’ll be happy to see subsequent PRs if I missed something (e.g., I didn’t touch &lt;code&gt;ebnf.xml&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Closes #471&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #509 closed</title>
   <pubDate>Fri, 19 May 2023 09:08:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/509</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-509</guid>
   <description>&lt;div&gt;&lt;p&gt;471 (2): Remove more fn: prefixes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #510 closed</title>
   <pubDate>Fri, 19 May 2023 09:08:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/510</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-510</guid>
   <description>&lt;div&gt;&lt;p&gt;471 (3): Render false/true/NaN/INF/-INF/+INF as code&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #375 closed</title>
   <pubDate>Fri, 19 May 2023 08:48:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/375</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-375</guid>
   <description>&lt;div&gt;&lt;p&gt;256: Context for default parameter values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #507 closed</title>
   <pubDate>Fri, 19 May 2023 08:06:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/507</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-507</guid>
   <description>&lt;div&gt;&lt;p&gt;125: Rename array:partition as fn:partition&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #505 closed</title>
   <pubDate>Thu, 18 May 2023 17:25:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/505</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-505</guid>
   <description>&lt;div&gt;&lt;p&gt;418: Correct and expand an XSLT example&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #447 closed</title>
   <pubDate>Thu, 18 May 2023 17:24:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/447</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-447</guid>
   <description>&lt;div&gt;&lt;p&gt;435, 53, 436: lambda expressions, thin arrows&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #410 closed</title>
   <pubDate>Thu, 18 May 2023 16:57:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/410</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-410</guid>
   <description>&lt;div&gt;&lt;p&gt;Converting doubles to decimals, fractional digits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #455 closed</title>
   <pubDate>Thu, 18 May 2023 16:57:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/455</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-455</guid>
   <description>&lt;div&gt;&lt;p&gt;410: Converting doubles to decimals, fractional digits&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #483 closed</title>
   <pubDate>Thu, 18 May 2023 16:53:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/483</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-483</guid>
   <description>&lt;div&gt;&lt;p&gt;452: window: make 'start' and 'when' optional&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #510 created</title>
   <pubDate>Thu, 18 May 2023 16:14:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/510</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-510</guid>
   <description>&lt;div&gt;&lt;p&gt;471 (3): Render false/true/NaN/INF/-INF/+INF as code&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;INF&lt;/code&gt;, &lt;code&gt;-INF&lt;/code&gt; and &lt;code&gt;+INF&lt;/code&gt; was easy, boolean values were trickier:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I used &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; for “The result/value/option/property is true/false”, “is set to true/false” and similar.&lt;/li&gt;
&lt;li&gt;I didn’t tag “This is true/false”, “The condition is true/false”  and similar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope there won’t be too many conflicts if this is directly merged after #509.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #509 created</title>
   <pubDate>Thu, 18 May 2023 12:38:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/509</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-509</guid>
   <description>&lt;div&gt;&lt;p&gt;471 (2): Remove more fn: prefixes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I’ve removed additional &lt;code&gt;fn:&lt;/code&gt; prefixes from examples and &lt;code&gt;eg&lt;/code&gt; code blocks. I have kept prefixes in the rules and formal code snippets untouched.&lt;/p&gt;
&lt;p&gt;In the initial comment of #471, I have listed the remaining cleanups for which I want to prepare PRs.
I’ll wait until this and possibly some other PRs have been merged.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #508 created</title>
   <pubDate>Wed, 17 May 2023 12:53:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/508</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-508</guid>
   <description>&lt;div&gt;&lt;p&gt;New Map &amp;amp; Array Functions: Inconsistencies&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;XQFO 3.1&lt;/h3&gt;
&lt;p&gt;…provides the following functions/constructs for creating and accessing maps &amp;amp; arrays:&lt;/p&gt;
&lt;p&gt;Maps | Singleton Maps
:--- | :---
Decompose | –
Compose | &lt;code&gt;map:merge($maps)&lt;/code&gt;
Create single | &lt;code&gt;map:entry($key, $value)&lt;/code&gt;&lt;br/&gt;&lt;code&gt;map { $key: $value }&lt;/code&gt;
Extract keys | &lt;code&gt;map:keys($map)&lt;/code&gt;
Extract values (flat) | &lt;code&gt;$map?*&lt;/code&gt;
&lt;strong&gt;Arrays&lt;/strong&gt; | &lt;strong&gt;Singleton Arrays&lt;/strong&gt;
Decompose | –
Compose | &lt;code&gt;array:join($arrays)&lt;/code&gt;
Create single | &lt;code&gt;[ $value ]&lt;/code&gt;
Extract values (flat) | –&lt;/p&gt;
&lt;h3&gt;XQFO 4.0 Draft&lt;/h3&gt;
&lt;p&gt;…provides new functions for singletons and map representations:&lt;/p&gt;
&lt;p&gt;Maps | Singleton Maps | Pairs (Key-Value Pair Maps)
:--- | :--- | :---
Decompose | &lt;strong&gt;&lt;code&gt;map:entries($map)&lt;/code&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;code&gt;map:pairs($map)&lt;/code&gt;&lt;/strong&gt;
Compose | &lt;code&gt;map:merge($maps)&lt;/code&gt; | &lt;strong&gt;&lt;code&gt;map:of($pairs)&lt;/code&gt;&lt;/strong&gt;
Create single | &lt;code&gt;map:entry($key, $value)&lt;/code&gt;&lt;br/&gt;&lt;code&gt;map { $key: $value }&lt;/code&gt; | –&lt;br/&gt;&lt;strong&gt;&lt;code&gt;map { 'key': $key, 'value': $value }&lt;/code&gt;&lt;/strong&gt;
Extract keys | &lt;code&gt;map:keys($map)&lt;/code&gt; | &lt;strong&gt;&lt;code&gt;$pairs?key&lt;/code&gt;&lt;/strong&gt;
Extract values (flat) | &lt;strong&gt;&lt;code&gt;map:values($map)&lt;/code&gt;&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;$map?*&lt;/code&gt; | &lt;strong&gt;&lt;code&gt;$pairs?value&lt;/code&gt;&lt;/strong&gt;
&lt;strong&gt;Arrays&lt;/strong&gt; | &lt;strong&gt;Singleton Arrays&lt;/strong&gt; | &lt;strong&gt;Members (Value Maps)&lt;/strong&gt;
Decompose | – | &lt;strong&gt;&lt;code&gt;array:members($array)&lt;/code&gt;&lt;/strong&gt;
Compose | &lt;code&gt;array:join($arrays)&lt;/code&gt; | &lt;strong&gt;&lt;code&gt;array:of($members)&lt;/code&gt;&lt;/strong&gt;
Create single | &lt;code&gt;[ $value ]&lt;/code&gt; | &lt;strong&gt;&lt;code&gt;array { 'value': $value }&lt;/code&gt;&lt;/strong&gt;
Extract values (flat) | &lt;strong&gt;&lt;code&gt;array:values($array)&lt;/code&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;code&gt;$members?value&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following terminology can be derived from the function names:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A key-value pair map with a single map pair is called a &lt;strong&gt;Pair&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A value map with a single array member is called a &lt;strong&gt;Member&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A singleton map is called an &lt;strong&gt;Entry&lt;/strong&gt; (due to &lt;code&gt;map:entry&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;We have no name for a singleton array.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Complete the Picture&lt;/h3&gt;
&lt;p&gt;I believe we should:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;rename &lt;code&gt;map:of&lt;/code&gt; to &lt;code&gt;map:of-pairs&lt;/code&gt; or &lt;code&gt;map:merge-pairs&lt;/code&gt; (as a hint that singletons are not the expected input)&lt;/li&gt;
&lt;li&gt;rename &lt;code&gt;array:of&lt;/code&gt; to &lt;code&gt;array:of-members&lt;/code&gt; or &lt;code&gt;array:join-members&lt;/code&gt; (as a hint…)&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;map:pair&lt;/code&gt; for creating a single pair&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;array:split&lt;/code&gt; (&lt;code&gt;array:tokenize&lt;/code&gt;, …?) for decomposing arrays to singleton arrays&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’m not sure if we should add array functions for creating singletons or value maps; we also have &lt;code&gt;array:build&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #507 created</title>
   <pubDate>Wed, 17 May 2023 11:38:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/507</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-507</guid>
   <description>&lt;div&gt;&lt;p&gt;125: Rename array:partition as fn:partition&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Reworked this PR to deal with merge conflicts. Technical change was already accepted. Made a correction to the "equivalent expression" published in the spec, which has now been tested (and was found wanting...)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #454 closed</title>
   <pubDate>Wed, 17 May 2023 09:23:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/454</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-454</guid>
   <description>&lt;div&gt;&lt;p&gt;125: array:partition&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #506 created</title>
   <pubDate>Wed, 17 May 2023 09:08:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/506</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-506</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:error: parameter names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We should rename the &lt;code&gt;$error-object&lt;/code&gt; parameter to &lt;code&gt;$value&lt;/code&gt;, as it will be bound to &lt;code&gt;$err:value&lt;/code&gt; later on:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;try {
  error(value := 123)
} catch * {
  $err:value
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, “object” is rarely used in the specs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #467 closed</title>
   <pubDate>Wed, 17 May 2023 08:20:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/467</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-467</guid>
   <description>&lt;div&gt;&lt;p&gt;map:keys-where: Return Keys That Match a Predicate&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #505 created</title>
   <pubDate>Wed, 17 May 2023 08:14:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/505</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-505</guid>
   <description>&lt;div&gt;&lt;p&gt;418: Correct and expand an XSLT example&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Makes a further correction to an example identified in issue #418, and adds to the example giving an alternative solution&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #504 created</title>
   <pubDate>Wed, 17 May 2023 07:46:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/504</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-504</guid>
   <description>&lt;div&gt;&lt;p&gt;Merge map:keys and map:keys-where&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that we merge &lt;code&gt;map:keys&lt;/code&gt; and &lt;code&gt;map:keys-where&lt;/code&gt; into a single function, with &lt;code&gt;map:keys#1&lt;/code&gt; behaving like it does now, and &lt;code&gt;map:keys#2&lt;/code&gt; taking over from &lt;code&gt;map:keys-where#2&lt;/code&gt;. Effectively the default for the second argument becomes &lt;code&gt;true#0&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #30 closed</title>
   <pubDate>Wed, 17 May 2023 06:16:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/30</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-30</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve the discoverability and parseability of the mathematical operator symbols&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #204 closed</title>
   <pubDate>Wed, 17 May 2023 06:16:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/204</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-204</guid>
   <description>&lt;div&gt;&lt;p&gt;Non-ascii alternative operator symbols&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #460 closed</title>
   <pubDate>Wed, 17 May 2023 06:15:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/460</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-460</guid>
   <description>&lt;div&gt;&lt;p&gt;Mathematical Operator Symbols&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #443 closed</title>
   <pubDate>Wed, 17 May 2023 06:12:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/443</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-443</guid>
   <description>&lt;div&gt;&lt;p&gt;@select on xsl:matching-substring and xsl:non-matching-substring&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #32 closed</title>
   <pubDate>Wed, 17 May 2023 06:12:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/32</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-32</guid>
   <description>&lt;div&gt;&lt;p&gt;try/catch: New variable for all error information&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #452 closed</title>
   <pubDate>Wed, 17 May 2023 06:11:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/452</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-452</guid>
   <description>&lt;div&gt;&lt;p&gt;window: make 'start' and 'when' optional&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #503 created</title>
   <pubDate>Tue, 16 May 2023 23:09:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/503</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-503</guid>
   <description>&lt;div&gt;&lt;p&gt;Reinstate focus functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As a result of accepting PR #447, we have lost the ability to write simple "focus functions" that take the context item as an implicit argument, for example &lt;code&gt;sort(//emp, (), -&amp;gt;{@salary})&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The new status quo is that people have to write &lt;code&gt;sort(//emp, (), $e-&amp;gt;{$e/@salary})&lt;/code&gt; which feels clumsy in comparison.&lt;/p&gt;
&lt;p&gt;This issue examines options for reinstating such a capability, and perhaps making it more powerful.&lt;/p&gt;
&lt;p&gt;A reason for dropping the syntax was that it didn't play well with the "thin arrow" operator in pipelines, but we have now changed the symbol for that to &lt;code&gt;=!&amp;gt;&lt;/code&gt; so the objection no longer applies so strongly.&lt;/p&gt;
&lt;p&gt;Ideally we want something that not only replaces focus functions (arity one arguments accepting an argument of type item()), but also meets some or all of the following additional requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Works well on the RHS of the &lt;code&gt;=&amp;gt;&lt;/code&gt; and &lt;code&gt;=!&amp;gt;&lt;/code&gt; operators, in a construct that we might write as &lt;code&gt;$list =!&amp;gt; {.+1}()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also allows arity-one functions whose argument is a sequence (&lt;code&gt;item()*&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This becomes a lot easier if we can solve issue #129 which generalises the context item to a context value. Let's assume we do that, and keep an open mind for the moment as to whether the generalized context value is referenced as &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;. I'll use &lt;code&gt;~&lt;/code&gt; for now. So we want a compact notation for functions of arity one in which the function body refers to the argument value as &lt;code&gt;~&lt;/code&gt;. For aesthetic reasons, because it's going to be used on the RHS of an arrow operator, we really don't want to introduce it with a leading arrow like the previous syntax &lt;code&gt;-&amp;gt;{.+1}&lt;/code&gt;. Use of "bare braces" (simply &lt;code&gt;{~+1}&lt;/code&gt;) is very tempting, but I think there is a good argument for leaving that part of the syntactic space unused, for extensibility and for diagnostics. I think my preference is for &lt;code&gt;fn{~+1}&lt;/code&gt;. Using a keyword (such as map, array, validate) before a braced expression is a uniform device and keeps the grammar coherent.&lt;/p&gt;
&lt;p&gt;So in a callback such as fn:sort, we can write &lt;code&gt;sort(//emp, (), fn{@salary})&lt;/code&gt;, and in a pipeline we can write &lt;code&gt;$list =!&amp;gt; fn{.+1}()&lt;/code&gt;. (To allow this, all we need to do is to generalise what's allowed as an &lt;code&gt;ArrowDynamicFunction&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;A separate question is whether we can (and should) allow the empty argument list to be omitted. I think I'm persuaded by the arguments that it's better to keep it, as a visual signal that the function is being applied, not just returned.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 034 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 16 May 2023 17:33:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/05-16</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-05-16</guid>
</item><item>
   <title>Issue #478 closed</title>
   <pubDate>Tue, 16 May 2023 16:17:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/478</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-478</guid>
   <description>&lt;div&gt;&lt;p&gt;467: map:keys-where&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #481 closed</title>
   <pubDate>Tue, 16 May 2023 16:15:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/481</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-481</guid>
   <description>&lt;div&gt;&lt;p&gt;When we have array:build and map:build, then why do we also need array:of and map:of ?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #466 closed</title>
   <pubDate>Tue, 16 May 2023 16:12:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/466</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-466</guid>
   <description>&lt;div&gt;&lt;p&gt;460: Fix math symbols&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #487 closed</title>
   <pubDate>Tue, 16 May 2023 16:12:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/487</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-487</guid>
   <description>&lt;div&gt;&lt;p&gt;485: Predeclare the prefixes math, map, array, and err&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #489 closed</title>
   <pubDate>Tue, 16 May 2023 16:12:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/489</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-489</guid>
   <description>&lt;div&gt;&lt;p&gt;443: Allow select attribute on xsl:[non-]matching-substring&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #492 closed</title>
   <pubDate>Tue, 16 May 2023 16:12:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/492</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-492</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix examples, change filepath definition slightly&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #493 closed</title>
   <pubDate>Tue, 16 May 2023 16:11:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/493</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-493</guid>
   <description>&lt;div&gt;&lt;p&gt;32: try/catch: New variable for all error information&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #500 closed</title>
   <pubDate>Tue, 16 May 2023 09:15:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/500</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-500</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix errant typographic quotes in XPath Data Model&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #502 closed</title>
   <pubDate>Tue, 16 May 2023 09:15:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/502</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-502</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typographic quotes in XPath Data Model&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #502 created</title>
   <pubDate>Tue, 16 May 2023 08:22:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/502</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-502</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typographic quotes in XPath Data Model&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #500&lt;/p&gt;
&lt;p&gt;On closer inspection, there were only a few places where typographic quotes &lt;em&gt;were not&lt;/em&gt; used in prose. I've fixed those. I think the DM spec could probably use an editorial pass to add &lt;code&gt;code&lt;/code&gt; around some literals, but I'm not doing that in this PR.&lt;/p&gt;
&lt;p&gt;I've left typographic quotes around code and literals because I don't think straight quotes would be an improvement: the literal &lt;code&gt;“&amp;lt;code&amp;gt;3&amp;lt;/code&amp;gt;”&lt;/code&gt; doesn't need straight quotes because the quotes are not part of the literal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #501 created</title>
   <pubDate>Mon, 15 May 2023 09:05:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/501</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-501</guid>
   <description>&lt;div&gt;&lt;p&gt;Error handling: try/finally&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Finally clause&lt;/h3&gt;
&lt;p&gt;It can be helpful to have a code block that is always executed, even if errors occur:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $tmp := file:create-temp-file()
return try {
  (: I/O stuff :)
} finally {
  file:delete($tmp)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For re-throwing errors, see #1912.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #500 created</title>
   <pubDate>Mon, 15 May 2023 08:46:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/500</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-500</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix errant typographic quotes in XPath Data Model&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In a comment on #471, @ChristianGruen observes that there are some errant typographic quotes in code examples in the XPath Data Model specification. I assume these are errors, mostly likely on my part, and should be corrected.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #499 closed</title>
   <pubDate>Mon, 15 May 2023 08:21:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/499</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-499</guid>
   <description>&lt;div&gt;&lt;p&gt;Use natural language sort order for glossary&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #499 created</title>
   <pubDate>Sun, 14 May 2023 18:50:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/499</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-499</guid>
   <description>&lt;div&gt;&lt;p&gt;Use natural language sort order for glossary&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a small stylesheet change which has the effect that the glossary in the XQuery specification (and elsewhere) now uses natural language sort order, so upper-case terms like &lt;code&gt;Gregorian&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt; now appear in their proper alphabetic sequence.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 034 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 12 May 2023 17:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/05-12</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-05-12</guid>
</item><item>
   <title>Issue #48 closed</title>
   <pubDate>Fri, 12 May 2023 12:20:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/48</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-48</guid>
   <description>&lt;div&gt;&lt;p&gt;Create a schema-for-xslt40.xsd file for the current draft spec.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #494 closed</title>
   <pubDate>Fri, 12 May 2023 09:39:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/494</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-494</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove legacy materials from the working master branch&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #495 closed</title>
   <pubDate>Fri, 12 May 2023 09:07:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/495</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-495</guid>
   <description>&lt;div&gt;&lt;p&gt;separator example in https://qt4cg.org/specifications/xslt-40/Overview-diff.html#for-each-separator has xsl:sequence-of instead of xsl:sequence element&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #498 closed</title>
   <pubDate>Fri, 12 May 2023 09:07:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/498</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-498</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo, replace sequence-of with sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #498 created</title>
   <pubDate>Fri, 12 May 2023 08:07:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/498</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-498</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo, replace sequence-of with sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #495&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #497 created</title>
   <pubDate>Fri, 12 May 2023 08:03:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/497</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-497</guid>
   <description>&lt;div&gt;&lt;p&gt;https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-map-pairs has wrong function syntax order&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-map-pairs the explanation of the new function &lt;code&gt;map:pairs&lt;/code&gt; is given as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map:for-each($map, ($k, $v) -&amp;gt; {map{"key":$k, "value":$v}})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think the right syntax would be &lt;code&gt;map:for-each($map, -&amp;gt; ($k, $v) {map{"key":$k, "value":$v}})&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #496 closed</title>
   <pubDate>Fri, 12 May 2023 08:01:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/496</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-496</guid>
   <description>&lt;div&gt;&lt;p&gt;Ignore legacy directories entirely&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #496 created</title>
   <pubDate>Fri, 12 May 2023 08:00:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/496</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-496</guid>
   <description>&lt;div&gt;&lt;p&gt;Ignore legacy directories entirely&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is supposed to fix the action that builds PRs so that it ignores directories we never edit.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #495 created</title>
   <pubDate>Fri, 12 May 2023 07:37:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/495</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-495</guid>
   <description>&lt;div&gt;&lt;p&gt;separator example in https://qt4cg.org/specifications/xslt-40/Overview-diff.html#for-each-separator has xsl:sequence-of instead of xsl:sequence element&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;While looking through the XSLT 4 draft spec, I have found the following example in https://qt4cg.org/specifications/xslt-40/Overview-diff.html#for-each-separator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each select="6, 3, 9" separator="|"&amp;gt;
   &amp;lt;xsl:sort select="."/&amp;gt;
   &amp;lt;xsl:sequence-of select="., .+1"/&amp;gt;
&amp;lt;/xsl:for-each&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;xsl:sequence-of&lt;/code&gt; should be &lt;code&gt;xsl:sequence&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #494 created</title>
   <pubDate>Thu, 11 May 2023 17:41:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/494</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-494</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove legacy materials from the working master branch&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is &lt;em&gt;intended to be&lt;/em&gt; an entirely uninteresting change. This PR removes a whole bunch of historical artifacts from the &lt;code&gt;master&lt;/code&gt; branch, things like the requirements and use-cases documents that we aren't maintaining for QT4, the errata which don't apply to QT4, etc.&lt;/p&gt;
&lt;p&gt;I will push a separate branch, &lt;code&gt;legacy-documentation&lt;/code&gt;, to the repository that contains all of the the files removed by this PR so that the aren't lost and can easily be recovered. (I won't do that as a PR, I'll just push it to the repository.)&lt;/p&gt;
&lt;p&gt;In the meantime, I think this trimmed down master branch works just fine and it's a lot simpler and easier to explain.&lt;/p&gt;
&lt;p&gt;This PR &lt;em&gt;does&lt;/em&gt; remove support for the legacy ant builds, but I doubt they've worked for a while now.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #493 created</title>
   <pubDate>Thu, 11 May 2023 13:24:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/493</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-493</guid>
   <description>&lt;div&gt;&lt;p&gt;32: try/catch: New variable for all error information&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #492 created</title>
   <pubDate>Thu, 11 May 2023 12:09:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/492</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-492</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix examples, change filepath definition slightly&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR fixes the examples in the &lt;code&gt;parse-uri()&lt;/code&gt; function. It also makes a small change to the &lt;code&gt;filepath&lt;/code&gt; property, eliding it when the scheme is known not to be file.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #491 created</title>
   <pubDate>Thu, 11 May 2023 11:37:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/491</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-491</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix more examples in the FO 4.0 spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Further corrections to example code in the F+O specification, found by testing (app-spec-examples in the test suite).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #490 created</title>
   <pubDate>Wed, 10 May 2023 22:03:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/490</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-490</guid>
   <description>&lt;div&gt;&lt;p&gt;Control over schema validation in parse-xml(), doc(), etc.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm struggling with a problem with the stylesheet that generates QT4 tests from the examples in the function catalog, and I think it's an example of a more general problem in schema-aware processing.&lt;/p&gt;
&lt;p&gt;The spec gives this example (for json-to-xml):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The expression json-to-xml('{"x": "\\", "y": "\u0025"}', map{'escape': true()}) returns 
(with whitespace added for legibility):

&amp;lt;map xmlns="http://www.w3.org/2005/xpath-functions"&amp;gt;
  &amp;lt;string escaped="true" key="x"&amp;gt;\\&amp;lt;/string&amp;gt;
  &amp;lt;string key="y"&amp;gt;%&amp;lt;/string&amp;gt;
&amp;lt;/map&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But the test we actually generate expects the result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;map xmlns="http://www.w3.org/2005/xpath-functions"&amp;gt;
    &amp;lt;string escaped="true" key="x" escaped-key="false"&amp;gt;\\&amp;lt;/string&amp;gt;
    &amp;lt;string key="y" escaped="false" escaped-key="false"&amp;gt;%&amp;lt;/string&amp;gt;
&amp;lt;/map&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the test is failing because the result produced by Saxon correctly excludes the &lt;code&gt;escaped-key="false"&lt;/code&gt; attributes which the test is expecting. How did the attributes get there?&lt;/p&gt;
&lt;p&gt;The answer is that the stylesheet is doing &lt;code&gt;parse-xml()&lt;/code&gt; followed by some transformation to normalise whitespace, followed by &lt;code&gt;serialize()&lt;/code&gt;. The &lt;code&gt;parse-xml()&lt;/code&gt; call is invoking schema validation, which adds default attributes.&lt;/p&gt;
&lt;p&gt;We probably don't want schema validation here; if we do want it, we probably don't want default attribute values to be expanded. But parse-xml() doesn't give us the choice. It says it's implementation-defined and it gives no options for the user to control it. Saxon provides configuration-level options but they aren't fine-grained enough to use here.&lt;/p&gt;
&lt;p&gt;Without being able to control this, the only option seems to be for the stylesheet to transform the result to take out the defaulted attributes that the schema processor has added.&lt;/p&gt;
&lt;p&gt;We need options on functions like &lt;code&gt;doc()&lt;/code&gt; and &lt;code&gt;parse-xml()&lt;/code&gt; to control whether and how schema validation is performed.&lt;/p&gt;
&lt;p&gt;One of the options we need whenever we do validation is probably "validate+strip" - validate the input, report errors if it's invalid, but return the untyped data that was supplied to the validator, not the type-annotated data with expanded defaults.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #489 created</title>
   <pubDate>Wed, 10 May 2023 10:50:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/489</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-489</guid>
   <description>&lt;div&gt;&lt;p&gt;443: Allow select attribute on xsl:[non-]matching-substring&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #488 closed</title>
   <pubDate>Wed, 10 May 2023 10:46:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/488</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-488</guid>
   <description>&lt;div&gt;&lt;p&gt;433: Allow select attribute on xsl:[non-]matching-substring&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #488 created</title>
   <pubDate>Wed, 10 May 2023 09:26:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/488</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-488</guid>
   <description>&lt;div&gt;&lt;p&gt;433: Allow select attribute on xsl:[non-]matching-substring&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Allow a &lt;code&gt;select&lt;/code&gt; attribute on &lt;code&gt;xsl:[non-]matching-substring&lt;/code&gt; in place of the contained sequence constructor.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #484 closed</title>
   <pubDate>Wed, 10 May 2023 08:01:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/484</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-484</guid>
   <description>&lt;div&gt;&lt;p&gt;Update FO test generation stylesheet&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #486 closed</title>
   <pubDate>Wed, 10 May 2023 08:00:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/486</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-486</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix some errors in examples, as revealed by testing&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #487 created</title>
   <pubDate>Wed, 10 May 2023 07:59:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/487</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-487</guid>
   <description>&lt;div&gt;&lt;p&gt;485: Predeclare the prefixes math, map, array, and err&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In 3.1 XQuery processors were allowed to predeclare these prefixes; in 4.0 they are now required to do so.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #486 created</title>
   <pubDate>Tue, 9 May 2023 23:22:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/486</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-486</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix some errors in examples, as revealed by testing&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Corrects errors in examples; changes other examples to make them testable. Further test failures remain to be investigated (some may be bugs in the Saxon implementation; others require improvements to the test generation mechanism).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #485 created</title>
   <pubDate>Tue, 9 May 2023 20:30:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/485</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-485</guid>
   <description>&lt;div&gt;&lt;p&gt;Predeclared namespaces in XQuery&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XQuery defines that the prefixes xml, xs, xsi, fn, and local are predeclared, and states:&lt;/p&gt;
&lt;p&gt;Additional predeclared namespace prefixes may be added to the [statically known namespaces]) by an implementation.&lt;/p&gt;
&lt;p&gt;I propose that we add map, array, and math to this list, so that these can be used interoperably without pre-declaring them. It is already permitted for an implementation to do this, but it is not required. The change is backwards compatible, because user-defined namespace declarations override predeclared declarations.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #484 created</title>
   <pubDate>Tue, 9 May 2023 19:56:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/484</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-484</guid>
   <description>&lt;div&gt;&lt;p&gt;Update FO test generation stylesheet&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Updates the stylesheet that generates tests from examples in the FO spec; plus supply a missing record definition in the function catalog so that it becomes ID/IDREF valid.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #63 closed</title>
   <pubDate>Tue, 9 May 2023 18:31:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/63</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-63</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:slice, array:slice: Signatures, Examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #477 closed</title>
   <pubDate>Tue, 9 May 2023 18:31:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/477</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-477</guid>
   <description>&lt;div&gt;&lt;p&gt;63: array:slice (editorial)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #29 closed</title>
   <pubDate>Tue, 9 May 2023 18:31:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/29</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-29</guid>
   <description>&lt;div&gt;&lt;p&gt;array:values (resolved: map:values, map:entries)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #473 closed</title>
   <pubDate>Tue, 9 May 2023 18:27:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/473</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-473</guid>
   <description>&lt;div&gt;&lt;p&gt;NaN ne NaN&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #321 closed</title>
   <pubDate>Tue, 9 May 2023 18:26:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/321</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-321</guid>
   <description>&lt;div&gt;&lt;p&gt;relax $input in fn:serialize&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #325 closed</title>
   <pubDate>Tue, 9 May 2023 18:25:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/325</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-325</guid>
   <description>&lt;div&gt;&lt;p&gt;Operator precedence table needs updating&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #482 closed</title>
   <pubDate>Tue, 9 May 2023 18:24:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/482</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-482</guid>
   <description>&lt;div&gt;&lt;p&gt;473: NaN Comparisons (bug fix)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #476 closed</title>
   <pubDate>Tue, 9 May 2023 18:24:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/476</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-476</guid>
   <description>&lt;div&gt;&lt;p&gt;29: array:values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #475 closed</title>
   <pubDate>Tue, 9 May 2023 18:23:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/475</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-475</guid>
   <description>&lt;div&gt;&lt;p&gt;471: fn: prefix removed from function calls in the examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #472 closed</title>
   <pubDate>Tue, 9 May 2023 18:23:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/472</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-472</guid>
   <description>&lt;div&gt;&lt;p&gt;321: Add new note and examples demonstrating adaptive serialization method&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #468 closed</title>
   <pubDate>Tue, 9 May 2023 18:23:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/468</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-468</guid>
   <description>&lt;div&gt;&lt;p&gt;325 Update operator precedence table&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #462 closed</title>
   <pubDate>Tue, 9 May 2023 18:22:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/462</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-462</guid>
   <description>&lt;div&gt;&lt;p&gt;434: Added examples for parse-integer()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #483 created</title>
   <pubDate>Mon, 8 May 2023 09:05:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/483</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-483</guid>
   <description>&lt;div&gt;&lt;p&gt;452: window: make 'start' and 'when' optional&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #482 created</title>
   <pubDate>Sun, 7 May 2023 20:05:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/482</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-482</guid>
   <description>&lt;div&gt;&lt;p&gt;473: NaN Comparisons (bug fix)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Drops the incorrect statement suggesting that NaN xx NaN is always false, for all six operators xx. In fact NaN ne NaN is true, as statements elsewhere in the spec make clear. Specifically, the operator mapping appendix of the XPath/XQuery language spec makes clear that &lt;code&gt;X ne Y&lt;/code&gt; maps to &lt;code&gt;not(op:numeric-equal(X, Y))&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #481 created</title>
   <pubDate>Sun, 7 May 2023 18:43:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/481</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-481</guid>
   <description>&lt;div&gt;&lt;p&gt;When we have array:build and map:build, then why do we also need array:of and map:of ?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Looking at the current specification of the pairs of functions: (&lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-array-build"&gt;array:build&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-array-of"&gt;array:of&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;) and (&lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-map-build"&gt;map:build&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-map-of"&gt;map:of&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;), it is impossible not to notice that the second function in each of these pairs is a weak duplicate of the first.&lt;/p&gt;
&lt;p&gt;Also, the examples provided for &lt;strong&gt;&lt;em&gt;array:build&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;array:of&lt;/em&gt;&lt;/strong&gt;, seem to have a good deal of common content / duplication / overlap.&lt;/p&gt;
&lt;p&gt;Another issue is that &lt;strong&gt;&lt;em&gt;array:of&lt;/em&gt;&lt;/strong&gt; requires as input a sequence of  &lt;strong&gt;value records&lt;/strong&gt;, whose definition is challenging to understand (and whose meaning seems to be solely to represent a sequence of sequences), and what is also really challenging is how to construct this argument to &lt;strong&gt;&lt;em&gt;array:of&lt;/em&gt;&lt;/strong&gt;. If this is unnatural and challenging, one would probably prefer to use just &lt;strong&gt;&lt;em&gt;array:build&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Is there an example where it is possible to construct an array (or a map) with &lt;strong&gt;&lt;em&gt;array:of&lt;/em&gt;&lt;/strong&gt; (or with &lt;strong&gt;&lt;em&gt;map:of&lt;/em&gt;&lt;/strong&gt;) but it is impossible (or significantly more difficult) to construct the same array/map with the function &lt;strong&gt;&lt;em&gt;array:build&lt;/em&gt;&lt;/strong&gt; (or with &lt;strong&gt;&lt;em&gt;map:build&lt;/em&gt;&lt;/strong&gt;)?&lt;/p&gt;
&lt;p&gt;If there are no such significant and convincing examples, then why do we need the &lt;strong&gt;&lt;em&gt;xxx:of&lt;/em&gt;&lt;/strong&gt; functions?&lt;/p&gt;
&lt;p&gt;Thus the question naturally arises:  "&lt;strong&gt;&lt;em&gt;Why is the function &lt;code&gt;xxx:of&lt;/code&gt; necessary at all?&lt;/em&gt;&lt;/strong&gt;"&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #480 created</title>
   <pubDate>Sun, 7 May 2023 18:22:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/480</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-480</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow type promotion of xs:string to xs:anyURI&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If it hasn't already been considered and ruled out, I'd like to propose adding a type promotion rule to XPath 4 that would allow &lt;code&gt;xs:string&lt;/code&gt; to be type-promoted to &lt;code&gt;xs:anyURI&lt;/code&gt;, so that functions with parameters whose types are declared as &lt;code&gt;xs:anyURI&lt;/code&gt; can directly take &lt;code&gt;xs:string&lt;/code&gt; values, without having to first cast these to &lt;code&gt;xs:anyURI&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This would empower function authors to select &lt;code&gt;xs:anyURI&lt;/code&gt; as a type - signaling that they’re expecting a URI - without forcing users of the function into explicitly casting their string-typed URIs.&lt;/p&gt;
&lt;p&gt;The motivation behind this proposal is that many eXist users are frustrated when using the eXist extension functions that properly declare parameters as &lt;code&gt;xs:anyURI&lt;/code&gt;. If this proposal isn’t adopted, that’s ok; we’ll just eliminate the use of &lt;code&gt;xs:anyURI&lt;/code&gt; in our functions, as proposed in https://github.com/eXist-db/exist/issues/4632. But this would a bit unfortunate for authors of functions who see the use of &lt;code&gt;xs:anyURI&lt;/code&gt; as a proper expression of intent in their functions.&lt;/p&gt;
&lt;p&gt;The change would be to https://www.w3.org/TR/xpath-31/#promotion - and I guess would be a 3rd item, called "String type promotion", saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A value of type &lt;code&gt;xs:string&lt;/code&gt; can be promoted to the type &lt;code&gt;xs:anyURI&lt;/code&gt;. The result of this promotion is created by casting the original value to the type &lt;code&gt;xs:anyURI&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #479 created</title>
   <pubDate>Sun, 7 May 2023 11:33:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/479</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-479</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: Input order&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;#383 is about the specific order of children of element nodes.&lt;/p&gt;
&lt;p&gt;I think we should also provide an option to ignore the top-level order of the input items:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: returns true: both input arguments contain the same items, but in a different order :)
deep-equal(
  (1 to 10),
  reverse(1 to 10),
  map { 'unordered': true() }
)

(: returns false: the compared elements are different :)
deep-equal(
  &amp;lt;a&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;c/&amp;gt;&amp;lt;/a&amp;gt;,
  &amp;lt;a&amp;gt;&amp;lt;c/&amp;gt;&amp;lt;b/&amp;gt;&amp;lt;/a&amp;gt;,
  map { 'unordered': true() }
)

(: returns false: the second sequence contains duplicates :)
deep-equal(
  (1, 2),
  (2, 1, 1),
  map { 'unordered': true() }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #478 created</title>
   <pubDate>Sun, 7 May 2023 10:53:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/478</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-478</guid>
   <description>&lt;div&gt;&lt;p&gt;467: map:keys-where&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #477 created</title>
   <pubDate>Sun, 7 May 2023 10:04:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/477</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-477</guid>
   <description>&lt;div&gt;&lt;p&gt;63: array:slice (editorial)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #476 created</title>
   <pubDate>Sun, 7 May 2023 09:59:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/476</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-476</guid>
   <description>&lt;div&gt;&lt;p&gt;29: array:values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #423 closed</title>
   <pubDate>Fri, 5 May 2023 17:49:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/423</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-423</guid>
   <description>&lt;div&gt;&lt;p&gt;[XSLT 4.0] 2.2 Notation is incomplete&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #475 created</title>
   <pubDate>Fri, 5 May 2023 16:02:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/475</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-475</guid>
   <description>&lt;div&gt;&lt;p&gt;471: fn: prefix removed from function calls in the examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;#471: I’ve removed the &lt;code&gt;fn:&lt;/code&gt; prefixes from the function calls in the examples.&lt;/p&gt;
&lt;p&gt;I have left pretty much all &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; strings untouched, since I’m not sure what would be the most consistent approach to clean them up. It will be better anyway to create a separate PR for that.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #474 closed</title>
   <pubDate>Fri, 5 May 2023 13:14:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/474</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-474</guid>
   <description>&lt;div&gt;&lt;p&gt;Per comments on #465, improve presentation of multi-line expressions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #465 closed</title>
   <pubDate>Fri, 5 May 2023 12:16:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/465</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-465</guid>
   <description>&lt;div&gt;&lt;p&gt;80: fn:iterate-while: Examples revised&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #474 created</title>
   <pubDate>Fri, 5 May 2023 11:52:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/474</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-474</guid>
   <description>&lt;div&gt;&lt;p&gt;Per comments on #465, improve presentation of multi-line expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR addresses points raised in the comments on #465.&lt;/p&gt;
&lt;p&gt;If an &lt;code&gt;fos:expression&lt;/code&gt; element is a code block, nest an &lt;code&gt;eg&lt;/code&gt; inside it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;               &amp;lt;fos:expression&amp;gt;&amp;lt;eg&amp;gt;&amp;lt;![CDATA[let $input := 3936256
return fn:iterate-while(
  $input,
  function($result) { abs($result * $result - $input) &amp;gt;= 0.0000000001 },
  function($guess) { ($guess + $input div $guess) div 2 }
)]]&amp;gt;&amp;lt;/eg&amp;gt;&amp;lt;/fos:expression&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I found four examples where an &lt;code&gt;fos:expression&lt;/code&gt; contained more than one newline and I added &lt;code&gt;eg&lt;/code&gt; wrappers in those cases.&lt;/p&gt;
&lt;p&gt;There are many more &lt;code&gt;fos:expression&lt;/code&gt; elements that contain a single newline, but automatically formatting them as code blocks was often unsuccessful. Many of those cases seem to be just newlines entered for authoring convenience.&lt;/p&gt;
&lt;p&gt;I also fixed the CSS for code blocks and attempte to remove trailing newlines from code blocks.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #473 created</title>
   <pubDate>Thu, 4 May 2023 17:18:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/473</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-473</guid>
   <description>&lt;div&gt;&lt;p&gt;NaN ne NaN&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It seems that ever since 2.0, the section in Functions and Operators "Comparison Operators on Numeric Values" (currently §4.3) has stated "If either, or both, operands are NaN, false is returned."&lt;/p&gt;
&lt;p&gt;This is incorrect. If the operator is &lt;code&gt;ne&lt;/code&gt;, then the correct result is true.&lt;/p&gt;
&lt;p&gt;(And editorially, the first two commas in this sentence should be dropped).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #472 created</title>
   <pubDate>Thu, 4 May 2023 15:21:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/472</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-472</guid>
   <description>&lt;div&gt;&lt;p&gt;321: Add new note and examples demonstrating adaptive serialization method&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Per &lt;a href="https://github.com/qt4cg/qtspecs/issues/321"&gt;Issue 321&lt;/a&gt;, I've added a new note and two additional simple examples noting the adaptive serialization method to draw attention to this feature in the existing specs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #471 created</title>
   <pubDate>Thu, 4 May 2023 13:03:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/471</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-471</guid>
   <description>&lt;div&gt;&lt;p&gt;Unify formatting (function calls, code blocks, quotes) in the specification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Todos (2023-05-18)&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] Initial cleanup of &lt;code&gt;fn:&lt;/code&gt; prefixes → &lt;a href="https://github.com/qt4cg/qtspecs/pull/475"&gt;#475&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[x] Remove more &lt;code&gt;fn:&lt;/code&gt; prefixes → &lt;a href="https://github.com/qt4cg/qtspecs/pull/509"&gt;#509&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:&lt;/code&gt; prefixes in examples that raise an error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:&lt;/code&gt; prefixes in &lt;code&gt;eg&lt;/code&gt; code blocks&lt;/li&gt;
&lt;li&gt;other documents: &lt;code&gt;expressions.xml&lt;/code&gt;, &lt;code&gt;query-examples.xml&lt;/code&gt;, …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[x] Render &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;INF&lt;/code&gt;, &lt;code&gt;+INF&lt;/code&gt; as code → &lt;a href="https://github.com/qt4cg/qtspecs/pull/510"&gt;#510&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[x] Render string values as code and use quotes: &lt;code&gt;"yes"&lt;/code&gt;, &lt;code&gt;"true"&lt;/code&gt;, &lt;code&gt;"0"&lt;/code&gt; → &lt;a href="https://github.com/qt4cg/qtspecs/pull/511"&gt;#511&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[x] Omit quotes for single characters: &lt;code&gt;\b&lt;/code&gt;, &lt;code&gt;\f&lt;/code&gt;, … → &lt;a href="https://github.com/qt4cg/qtspecs/pull/511"&gt;#511&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[x] Rewrite simple to typographic quotes → &lt;a href="https://github.com/qt4cg/qtspecs/pull/511"&gt;#511&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;Inspired by https://github.com/qt4cg/qtspecs/pull/454#issuecomment-1534633089 ff.&lt;/p&gt;
&lt;p&gt;The syntax of the examples in the XQFO specification is inconsistent. Sometimes, functions in the standard function namespace have an &lt;code&gt;fn&lt;/code&gt; prefix…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:fold-right(1 to 5, "", fn:concat(?, ".", ?))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:substring("motor car", 6)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…sometimes they don’t…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data(123)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concat("http://www.example.com/", encode-for-uri("~bébé"))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…sometimes it’s both:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:fold-right(1 to 5, "$zero", concat("$f(", ?, ", ", ?, ")"))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:concat(01, 02, 03, 04, true())&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:tokenize(fn:unparsed-text($href), '\r\n|\r|\n')[not(position()=last() and .='')]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Should we drop or keep the prefix – or doesn’t it really matter? If there’s interest, I can create a PR (I’d tend to drop the prefixes).&lt;/p&gt;
&lt;p&gt;In addition, there doesn’t seem to be a consistent rule for representing booleans. We have:&lt;/p&gt;
&lt;p&gt;Syntax | Comment
--- | ---
…returns false | mostly used in the rules (seems appropriate to me)
…returns &lt;code&gt;false&lt;/code&gt; | used in the rules; maybe we should use replace it with the first syntax?
…the result is &lt;code&gt;fn:false()&lt;/code&gt; | used in the rules; maybe we should use replace it with the first syntax?
…returns &lt;code&gt;false()&lt;/code&gt; | mostly used in the examples (seems appropriate to me)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #470 created</title>
   <pubDate>Thu, 4 May 2023 11:34:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/470</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-470</guid>
   <description>&lt;div&gt;&lt;p&gt;369: add fixed-prefixes attribute in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A solution to some of the problems identified in issue #369. This proposal affects XSLT only.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #469 created</title>
   <pubDate>Thu, 4 May 2023 07:09:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/469</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-469</guid>
   <description>&lt;div&gt;&lt;p&gt;array:of-members, map:of-pairs: Signatures, Examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Just trivia:&lt;/p&gt;
&lt;p&gt;a) The parameter name of &lt;code&gt;array:of-members&lt;/code&gt; is &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-array-of"&gt;&lt;code&gt;$input&lt;/code&gt;&lt;/a&gt;.
    &lt;code&gt;$members&lt;/code&gt; may be a better choice (or we should change &lt;code&gt;map:of-pairs($pairs)&lt;/code&gt; to &lt;code&gt;map:of-pairs($input)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;b) The type of &lt;code&gt;$pairs&lt;/code&gt; is &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-map-of"&gt;&lt;code&gt;record(key as xs:anyAtomicType, value as item()*, *)*&lt;/code&gt;&lt;/a&gt;.
    Shouldn’t it be &lt;code&gt;record(key as xs:anyAtomicType, value as item()*)*&lt;/code&gt; (without the trailing &lt;code&gt;, *&lt;/code&gt;)?
    If the current syntax is correct, an explanatory comment could be helpful.&lt;/p&gt;
&lt;p&gt;c) ~One &lt;code&gt;map:of&lt;/code&gt; example needs to be fixed: &lt;code&gt;map:of((map:entry(0, "no"), map:entry(1, "yes")))&lt;/code&gt;.~ See #607&lt;/p&gt;
&lt;p&gt;See #508 for the proposal to rename &lt;code&gt;map:of&lt;/code&gt; to &lt;code&gt;map:of-pairs&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #468 created</title>
   <pubDate>Wed, 3 May 2023 21:59:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/468</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-468</guid>
   <description>&lt;div&gt;&lt;p&gt;325 Update operator precedence table&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add "otherwise" and thin arrow to the table. Editorial.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #467 created</title>
   <pubDate>Wed, 3 May 2023 11:09:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/467</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-467</guid>
   <description>&lt;div&gt;&lt;p&gt;map:keys-where: Return Keys That Match a Predicate&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Edit, 23/05/17:&lt;/strong&gt; Reopened to discuss &lt;code&gt;map:keys($map, $predicate)&lt;/code&gt; as an alternative.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3&gt;Motivation&lt;/h3&gt;
&lt;p&gt;We have &lt;code&gt;fn:index-where&lt;/code&gt; and &lt;code&gt;array:index-where&lt;/code&gt; to locate items/members in a sequence/an array that match a specific predicate, and we could introduce an equivalent function for maps. A recent use case can be found in https://github.com/qt4cg/qtspecs/issues/413#issuecomment-1531288167d.&lt;/p&gt;
&lt;h3&gt;Proposal&lt;/h3&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;Returns keys of map entries for which the value matches a supplied predicate.&lt;/p&gt;
&lt;h4&gt;Signature&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:keys-where(
  $map        as map(*),
  $predicate  as function(item()*) as xs:boolean
) as xs:anyAtomicValue*
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Properties&lt;/h4&gt;
&lt;p&gt;This function is ·deterministic·, ·context-independent·, and ·focus-independent·.&lt;/p&gt;
&lt;h4&gt;Rules&lt;/h4&gt;
&lt;p&gt;The function takes any ·map· as its &lt;code&gt;$map&lt;/code&gt; argument and applies the supplied function to the value of each map entry. The function supplied as &lt;code&gt;$predicate&lt;/code&gt; takes the value of the corresponding map entry as an argument, and the result is a sequence containing the keys of those entries for which the function returns true.&lt;/p&gt;
&lt;p&gt;More formally, the function returns the result of the expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:for-each(
  $map,
  function($key, $value) {
    if($predicate($value)) then $key else ()
  }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Examples&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $numbers := map { 0: 'zero', 1: 'one', 2: 'two', 3: 'three' }
return map:keys-where($numbers, function($string) { $string = 'two' })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Comments&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Edit (2023-05-04):&lt;/strong&gt; Renamed from &lt;code&gt;map:key-where&lt;/code&gt; to &lt;code&gt;map:keys-where&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Similar functions (&lt;code&gt;index-of&lt;/code&gt;, &lt;code&gt;index-where&lt;/code&gt;) use the singular form.&lt;/li&gt;
&lt;li&gt;An alternative would be to add an optional &lt;code&gt;$predicate&lt;/code&gt; function argument to &lt;code&gt;map:keys&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If we decide to introduce a shorter syntax (see &lt;a href="https://github.com/qt4cg/qtspecs/issues/129"&gt;#129&lt;/a&gt; and &lt;a href="https://github.com/qt4cg/qtspecs/issues/129"&gt;#436&lt;/a&gt;), we could have:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:keys-where($numbers, { . = 'two ' })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #466 created</title>
   <pubDate>Tue, 2 May 2023 23:36:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/466</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-466</guid>
   <description>&lt;div&gt;&lt;p&gt;460: Fix math symbols&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;(1) drops the mathematical operator symbols appendix, which allowed an extensive range of non-ASCII characters as synonyms for language keywords, (2) retains × and ÷ as synonyms for multiplication and division, (3) allows full-width &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; in operator symbols in place of the usual ASCII characters, to avoid the need for XML escaping.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 033 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 2 May 2023 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/05-02</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-05-02</guid>
</item><item>
   <title>Issue #449 closed</title>
   <pubDate>Tue, 2 May 2023 16:27:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/449</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-449</guid>
   <description>&lt;div&gt;&lt;p&gt;Actions from review of PR #420&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #456 closed</title>
   <pubDate>Tue, 2 May 2023 16:26:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/456</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-456</guid>
   <description>&lt;div&gt;&lt;p&gt;Revises numeric literal syntax&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #458 closed</title>
   <pubDate>Tue, 2 May 2023 16:26:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/458</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-458</guid>
   <description>&lt;div&gt;&lt;p&gt;Update parse-integer and format-integer following review&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #224 closed</title>
   <pubDate>Tue, 2 May 2023 16:25:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/224</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-224</guid>
   <description>&lt;div&gt;&lt;p&gt;Infrastructure changes/improvements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #461 closed</title>
   <pubDate>Tue, 2 May 2023 16:25:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/461</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-461</guid>
   <description>&lt;div&gt;&lt;p&gt;Make code more visually distinct&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #465 created</title>
   <pubDate>Tue, 2 May 2023 12:37:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/465</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-465</guid>
   <description>&lt;div&gt;&lt;p&gt;80: fn:iterate-while: Examples revised&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is editorial. I’ve reformatted the examples for &lt;code&gt;fn:iterate-while&lt;/code&gt;…&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/196589/235667578-896f8ef3-8d11-49fb-81b5-352d522a99a3.png" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;…to make them better readable.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 033 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 1 May 2023 17:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/05-02</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-05-02</guid>
</item><item>
   <title>Issue #464 created</title>
   <pubDate>Sat, 29 Apr 2023 21:01:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/464</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-464</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization sequence normalization step 3 needs clarification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specifications currently read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the item-separator serialization parameter is absent, then for each subsequence of adjacent strings in S2, copy a single string to the new sequence equal to the values of the strings in the subsequence concatenated in order, each separated by a single space. Copy all other items to the new sequence. Otherwise, copy each item in S2 to the new sequence, inserting between each pair of items a string whose value is equal to the value of the item-separator parameter. The new sequence is S3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As written ("If...then.... Otherwise...."), this implies that the process whereby a block of adjacent strings are joined into a single string is performed only when the item separator parameter is absent. I.e., if the item-separator parameter is not absent, it will not be used to string-join adjacent groups of strings. Perhaps that is as intended, but I want to make sure.&lt;/p&gt;
&lt;p&gt;Also, as written, this implies that when the parameter is absent, the sequence begins by finding all subsequences of adjacent strings, performing concatenation. Then all non-strings are added to the sequence. That seems wrong, because it appears to advise the processor to rearrange the sequence of input items.&lt;/p&gt;
&lt;p&gt;I propose a revision along these lines:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Copy each item in S2 to a new sequence. If a given pair of adjacent items are both strings, then separate them with a string whose value is equal to the value of the item-separator parameter or is a single space if the item-separator parameter is absent. If a given pair of adjacent items are not both strings, insert between each pair of items a string whose value is equal to the value of the item-separator parameter. Once this is finished, take each adjacent group of strings and concatenate them into a single string. The new sequence is S3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My revision is based upon what I imagine happens, but implementers will know better than I.&lt;/p&gt;
&lt;p&gt;I am working on some editorial touch-ups of the Serialization specifications, and can incorporate comments/suggestions made in this thread in that larger enterprise.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #463 created</title>
   <pubDate>Fri, 28 Apr 2023 20:09:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/463</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-463</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:parts() - extract the parts of a (not-really) atomic value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have a whole raft of functions to extract the parts of date, time, and duration values: month-from-dateTime(), etc etc.&lt;/p&gt;
&lt;p&gt;These aren't particularly convenient to use, for example getting multiple components of a duration is clumsy; and there are gaps, for example there are no functions to extract the parts of a &lt;code&gt;gMonthDay&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I propose a general-purpose function &lt;code&gt;fn:parts()&lt;/code&gt; which turns any of these composite atomic values into a map, enabling you to replace a call on &lt;code&gt;get-month-from-dateTime($value)&lt;/code&gt; with &lt;code&gt;parts($value)?month&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So far this dupllicates existing functionality perhaps with a bit of added convenience. However, the mechanism is much more extensible and flexible than what we have now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we can apply it to atomic types that currently have no decomposition operators, such as gMonthDay&lt;/li&gt;
&lt;li&gt;we can easily add additional components such as &lt;code&gt;day-of-week&lt;/code&gt; or &lt;code&gt;quarter&lt;/code&gt; or &lt;code&gt;day-of-year&lt;/code&gt; or &lt;code&gt;julian-day&lt;/code&gt; that are currently not available, or only available clumsily using format-dateTime().&lt;/li&gt;
&lt;li&gt;the parts() function is polymorphic, so the same code can be used to get the year (say) from a date, a dateTime, or a gYearMonth.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #462 created</title>
   <pubDate>Thu, 27 Apr 2023 23:19:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/462</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-462</guid>
   <description>&lt;div&gt;&lt;p&gt;434: Added examples for parse-integer()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Supplemental examples related to pr #434 .&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #461 created</title>
   <pubDate>Thu, 27 Apr 2023 11:56:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/461</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-461</guid>
   <description>&lt;div&gt;&lt;p&gt;Make code more visually distinct&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #224&lt;/p&gt;
&lt;p&gt;Thanks @ChristianGruen for the reminder that this was still open!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #460 created</title>
   <pubDate>Thu, 27 Apr 2023 10:57:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/460</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-460</guid>
   <description>&lt;div&gt;&lt;p&gt;Mathematical Operator Symbols&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Appendix B.3 of the specification proposes a set of non-ASCII symbols that can be used in place of language keywords, for example "∃" for "some" and "∀" for "every".&lt;/p&gt;
&lt;p&gt;I haven't detected a great deal of enthusiasm for this idea, and I can see it causing some confusion, partly because Unicode offers such a wide choice of symbols some of which are visually very similar.&lt;/p&gt;
&lt;p&gt;I propose retaining a much smaller set of these symbols:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;"÷" (xF7) for "div" because the symbol is widely recognised and "div" here is pretty ugly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"≺" (x227A) and "≻" (x227B) as alternatives to "&amp;lt;" and "&amp;gt;" in all operator symbols (other than XML markup contexts) that use these characters: for readability in contexts, especially XSLT, where the "&amp;lt;" and "&amp;gt;" characters need to be escaped&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #4 closed</title>
   <pubDate>Thu, 27 Apr 2023 10:32:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/4</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-4</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Better names for ThinArrowTarget and FatArrowTarget&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #59 closed</title>
   <pubDate>Thu, 27 Apr 2023 10:27:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/59</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-59</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:replace no longer has the 3 an 4 argument variants&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #459 created</title>
   <pubDate>Thu, 27 Apr 2023 07:29:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/459</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-459</guid>
   <description>&lt;div&gt;&lt;p&gt;Eager and lazy evaluation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In #359, different approaches were discussed for eager and lazy evaluation. This issue could be used to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;clarify if we have the same notion of eagerness and laziness, and&lt;/li&gt;
&lt;li&gt;define language constructs for how eager/lazy evaluation.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #458 created</title>
   <pubDate>Wed, 26 Apr 2023 17:35:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/458</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-458</guid>
   <description>&lt;div&gt;&lt;p&gt;Update parse-integer and format-integer following review&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Following review and acceptance of the parse-integer and format-integer functions, make changes suggested during the review. See actions QT4G-032-03 to -06.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #457 created</title>
   <pubDate>Wed, 26 Apr 2023 06:32:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/457</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-457</guid>
   <description>&lt;div&gt;&lt;p&gt;Support parsing numeric, alphabetic, and additive number systems.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal is based on the work done in https://www.w3.org/TR/css-counter-styles-3/ when defining CSS rules for formatting the numbers in list items.&lt;/p&gt;
&lt;p&gt;The idea is to define 3 parsing strategies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;numeric&lt;/code&gt; -- number-like systems such as decimal;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alphabetic&lt;/code&gt; -- alphabetical-like systems such as spreadsheet columns (A, B, ..., Z, AA, AB, ...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;additive&lt;/code&gt; -- systems like roman and hebrew where the symbol represents a fixed value that is added together&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Parsing these, we have 3 properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;system as enum("numeric", "alphabetic", "additive") := "numeric"&lt;/code&gt; -- which of the parsing strategies (number systems) to use;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;symbols as xs:string := "0123456789"&lt;/code&gt; -- the list of characters used to represent a digit;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;additive-symbols as map(xs:integer, xs:string) := map {}&lt;/code&gt; -- a map of the symbols in an additive system with the corresponding value of that symbol.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Consideration 1 -- Should these also allow any whitespace and optional "+"/"-" symbols like the radix-based parse-integer?&lt;/p&gt;
&lt;p&gt;Consideration 2 -- Should we define decimal format options for these, so the decimal format name can format/represent other number systems (binary, hex, hebrew, tamil, roman numerals, etc.). -- Note: this would make &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;symbols&lt;/code&gt;, and &lt;code&gt;additive-symbols&lt;/code&gt; properties of the decimal format object with the above defaults. The formatting would work in the same way as it is defined in the CSS Counter Styles specification.&lt;/p&gt;
&lt;h2&gt;Design 1 -- Separate functions&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;fn:parse-numeric-integer($value as xs:string,
                         $symbols as xs:string := "0123456789") as xs:integer

fn:parse-alphabetic-integer($value as xs:string,
                            $symbols as xs:string := "ABCDEFGHIJKLMNOPQRSTUVWXYZ") as xs:integer

fn:parse-additive-integer($value as xs:string,
                          $additive-symbols as map(xs:integer, xs:string)) as xs:integer
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Design 2 -- Combined functions&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;fn:parse-integer($value as xs:string,
                 $system as xs:string := "numeric",
                 $symbols as xs:string := "0123456789",
                 $additive-symbols as map(xs:integer, xs:string) := map {}) as xs:integer

fn:parse-integer($value as xs:string,
                 $radix as xs:integer) as xs:integer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #456 created</title>
   <pubDate>Tue, 25 Apr 2023 18:55:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/456</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-456</guid>
   <description>&lt;div&gt;&lt;p&gt;Revises numeric literal syntax&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Following actions from review on 25 Apri 2023 (QT4CG-032-02), revises the new syntax of numeric literals to disallow trailing underscores. Also adds more notes and examples.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 032 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 25 Apr 2023 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/04-25</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-04-25</guid>
</item><item>
   <title>Issue #429 closed</title>
   <pubDate>Tue, 25 Apr 2023 16:32:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/429</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-429</guid>
   <description>&lt;div&gt;&lt;p&gt;Hexadecimal and binary literals&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #241 closed</title>
   <pubDate>Tue, 25 Apr 2023 16:32:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/241</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-241</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions integer-to-string and string-to-integer with radix&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #434 closed</title>
   <pubDate>Tue, 25 Apr 2023 16:31:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/434</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-434</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions to parse and format hex integers&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #433 closed</title>
   <pubDate>Tue, 25 Apr 2023 16:31:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/433</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-433</guid>
   <description>&lt;div&gt;&lt;p&gt;429 Add hex and binary literals and allow underscores&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #455 created</title>
   <pubDate>Tue, 25 Apr 2023 13:40:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/455</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-455</guid>
   <description>&lt;div&gt;&lt;p&gt;410: Converting doubles to decimals, fractional digits&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@michaelhkay In this PR, I tried to undo the changes that were introduced to make comparisons transitive. I haven’t made any changes to &lt;code&gt;distinct-values&lt;/code&gt; and &lt;code&gt;group by&lt;/code&gt;, because I am uncertain if I have spotted all the relevant parts of the specification. Maybe/hopefully we can address them in a next step.&lt;/p&gt;
&lt;p&gt;Any feedback is welcome.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #293 closed</title>
   <pubDate>Mon, 24 Apr 2023 12:48:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/293</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-293</guid>
   <description>&lt;div&gt;&lt;p&gt;Error in fn:doc-available specification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #430 closed</title>
   <pubDate>Mon, 24 Apr 2023 12:48:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/430</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-430</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:doc et al, error handling: inconsistencies. Closes #293&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #454 created</title>
   <pubDate>Mon, 24 Apr 2023 12:42:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/454</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-454</guid>
   <description>&lt;div&gt;&lt;p&gt;125: array:partition&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR revisits array:partition, with extra editorial clarification of the spec; including but not confined to fixing issue #125.&lt;/p&gt;
&lt;p&gt;I suggest we schedule this PR for discussion since we have not previously discussed it.&lt;/p&gt;
&lt;p&gt;One question for the group is what the name of the function should be (including the choice of namespace).&lt;/p&gt;
&lt;p&gt;Another is whether the polarity of the callback function should be changed (from &lt;code&gt;break-when&lt;/code&gt; to &lt;code&gt;continue-when&lt;/code&gt; or similar).&lt;/p&gt;
&lt;p&gt;We could also consider returning an array of sequences rather than a sequence of arrays. (But in my view sequences of arrays are rather easier to manage at the moment.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #453 closed</title>
   <pubDate>Mon, 24 Apr 2023 11:17:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/453</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-453</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #86 (incorrect default timezone format)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #453 created</title>
   <pubDate>Mon, 24 Apr 2023 11:00:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/453</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-453</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #86 (incorrect default timezone format)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Trivial bug fix.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #89 closed</title>
   <pubDate>Mon, 24 Apr 2023 10:49:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/89</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-89</guid>
   <description>&lt;div&gt;&lt;p&gt;[XQuery] DirPIConstructor permits ':' in the PI name.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 032 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 24 Apr 2023 09:10:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/04-25</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-04-25</guid>
</item><item>
   <title>Issue #452 created</title>
   <pubDate>Fri, 21 Apr 2023 23:09:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/452</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-452</guid>
   <description>&lt;div&gt;&lt;p&gt;window: make 'start' and 'when' optional&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Every time I use &lt;code&gt;tumbling window&lt;/code&gt;, I write &lt;code&gt;start when true()&lt;/code&gt;.    If start would be optional, default to true, that would be easier&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #450 closed</title>
   <pubDate>Thu, 20 Apr 2023 13:50:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/450</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-450</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #418 (editorial corrections)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #438 closed</title>
   <pubDate>Thu, 20 Apr 2023 13:49:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/438</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-438</guid>
   <description>&lt;div&gt;&lt;p&gt;What are the "non-whitespace control characters"?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #442 closed</title>
   <pubDate>Thu, 20 Apr 2023 13:49:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/442</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-442</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to clearify XML serialization of control characters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #451 created</title>
   <pubDate>Thu, 20 Apr 2023 06:51:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/451</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-451</guid>
   <description>&lt;div&gt;&lt;p&gt;Multiple Schemas&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There are many situations in which a single transformation wants to deal with multiple schemas: for example when transforming from v1 of some industry standard to v2 of the same standard, or when processing a collection of input documents each of which references its own schema using &lt;code&gt;xsi:schemaLocation&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is currently possible only if the schemas are compatible (that is, if the union of the schemas is itself a valid schema). And even where it is possible, validation against the union of S1 and S2 may produce a different outcome from validation against S2, for example because a strict wildcard allows content that S2 would not allow. Substitution groups are a particular problem: if v1 and v2 have elements with different substitution group membership, then validating against the union of v1 and v2 allows the union of the substitution groups, which means that you haven't actually verified that the result document is valid against v2.&lt;/p&gt;
&lt;p&gt;The problem is confounded by considerations that are outside the scope of the spec. What happens when you run two different stylesheets against the same source document? If the source document has been validated against S1, this means that both stylesheets must use schemas that are supersets of S1. The way this requirement is managed in Saxon is to introduce the concept of a Configuration in which transformations run; a Configuration has a single schema, and all source documents and stylesheets within the Configuration must use compatible subsets of this schema. A source document validated using one Configuration cannot be used in a different Configuration, because the type annotations would be meaningless against a different schema.&lt;/p&gt;
&lt;p&gt;My proposal is to introduce the idea of a named schema (that is, a named collection of schema components). When we do &lt;code&gt;xsl:import-schema&lt;/code&gt;, we can give the imported schema a name, and there is no requirement that the components in this schema should be compatible with the components in any other schema. When we refer to a schema type (for example in &lt;code&gt;$s cast as QName&lt;/code&gt;) we should be able to qualify the type name with a schema name (we can postpone discussions of syntax, let's say &lt;code&gt;cast as my:part-number§v1&lt;/code&gt; for now). When we request validation, we should be able to nominate the schema to be used for validation, for example &lt;code&gt;&amp;lt;xsl:element name="e" validation="strict" schema="v2"&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The trickiest part is handling source documents, mainly because validation of source documents (especially those read using doc() or collection()) is at present almost entirely implementation-defined. I believe that we need explicit options to request validation of source documents against a specific schema. There should also be an option to validate a document against the schema identified in its own &lt;code&gt;xsi:schemaLocation&lt;/code&gt;, in which case there should be no requirement that that schema is compatible with any schema known statically to the stylesheet.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #49 closed</title>
   <pubDate>Wed, 19 Apr 2023 15:09:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/49</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-49</guid>
   <description>&lt;div&gt;&lt;p&gt;[XQuery] The 'member' keyword is still present on ForMemberBinding&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #74 closed</title>
   <pubDate>Wed, 19 Apr 2023 15:06:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/74</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-74</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Support parsing HTML&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #87 closed</title>
   <pubDate>Wed, 19 Apr 2023 15:04:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/87</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-87</guid>
   <description>&lt;div&gt;&lt;p&gt;[XSL] Support for "master files"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #109 closed</title>
   <pubDate>Wed, 19 Apr 2023 15:02:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/109</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-109</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt4] xsl:note for structured documentation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #113 closed</title>
   <pubDate>Wed, 19 Apr 2023 14:59:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/113</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-113</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt] Constructing arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #239 closed</title>
   <pubDate>Wed, 19 Apr 2023 14:55:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/239</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-239</guid>
   <description>&lt;div&gt;&lt;p&gt;Terminology concerning function items and their access to static and dynamic context&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #373 closed</title>
   <pubDate>Wed, 19 Apr 2023 14:52:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/373</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-373</guid>
   <description>&lt;div&gt;&lt;p&gt;apparent copy/paste error in annotation documentation of simple type yes-or-no-or-maybe&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #450 created</title>
   <pubDate>Wed, 19 Apr 2023 14:50:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/450</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-450</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #418 (editorial corrections)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #449 created</title>
   <pubDate>Wed, 19 Apr 2023 13:52:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/449</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-449</guid>
   <description>&lt;div&gt;&lt;p&gt;Actions from review of PR #420&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Actions from review of PR #420 (QT4CG-031-01, -02); new functions &lt;code&gt;map:entries()&lt;/code&gt; and &lt;code&gt;map:values()&lt;/code&gt; from issue #29&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #445 closed</title>
   <pubDate>Wed, 19 Apr 2023 07:59:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/445</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-445</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial updates to XSLT spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #448 created</title>
   <pubDate>Wed, 19 Apr 2023 05:43:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/448</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-448</guid>
   <description>&lt;div&gt;&lt;p&gt;Support extended dateTime formats of ISO-8601:2019?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The ISO 8601:2019 &lt;a href="https://www.iso.org/obp/ui#iso:std:iso:8601:-2:ed-1:v1:en:term:3.1.1.4"&gt;standard&lt;/a&gt; supports extended dateTime formats including support for uncertain or approximate times and new quantifiers. Apparently, the extension are documented in &lt;a href="https://www.loc.gov/standards/datetime/"&gt;Extended Date/Time Format (EDTF) Specification&lt;/a&gt; from the US LoC.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #447 created</title>
   <pubDate>Tue, 18 Apr 2023 23:24:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/447</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-447</guid>
   <description>&lt;div&gt;&lt;p&gt;435, 53, 436: lambda expressions, thin arrows&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Addresses issue 436 by introducing syntax similar to Java, C#, and JS for anonymous inline functions (lamda expressions). This involves finding a new symbol for the existing "thin arrow" operator; it also gives an opportunity to show how lambda expressions can be used in pipelines.&lt;/p&gt;
&lt;p&gt;Some points for WG consideration:&lt;/p&gt;
&lt;p&gt;(a) Do we really want the curly braces around the function body to be mandatory?&lt;/p&gt;
&lt;p&gt;(b) What symbol should we use for the mapping arrow? I've used &lt;code&gt;=!&amp;gt;&lt;/code&gt; as it suggests to me the combination of function application and sequence mapping.&lt;/p&gt;
&lt;p&gt;(c) Should we reinstate the special syntax for arity-one "focus functions" (&lt;code&gt;-&amp;gt;{@salary})&lt;/code&gt; ) which is dropped in this proposal&lt;/p&gt;
&lt;p&gt;(d) I haven't necessarily worked through all the changes to examples needed, e.g.. in the XSLT and F+O specs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #437 closed</title>
   <pubDate>Tue, 18 Apr 2023 19:33:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/437</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-437</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:where-populated and table with header&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 031 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 18 Apr 2023 18:03:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/04-18</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-04-18</guid>
</item><item>
   <title>Issue #357 closed</title>
   <pubDate>Tue, 18 Apr 2023 17:10:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/357</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-357</guid>
   <description>&lt;div&gt;&lt;p&gt;Representing key-value pairs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #420 closed</title>
   <pubDate>Tue, 18 Apr 2023 17:10:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/420</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-420</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 357 Map composition and decomposition&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #446 closed</title>
   <pubDate>Tue, 18 Apr 2023 17:10:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/446</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-446</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix merge conflicts in PR #420&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #446 created</title>
   <pubDate>Tue, 18 Apr 2023 17:01:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/446</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-446</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix merge conflicts in PR #420&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #420
Close #357&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #445 created</title>
   <pubDate>Tue, 18 Apr 2023 16:54:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/445</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-445</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial updates to XSLT spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR fixes editorial issues in the XSLT 4.0 spec: issue #373, issue #384, issue #423. It also updates the XSD schema for XSLT 4.0 to incorporate most of the syntax changes that have been made to date (though further checking is needed), and updates some 3.0/3.1 references to 4.0 references.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #444 closed</title>
   <pubDate>Tue, 18 Apr 2023 16:31:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/444</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-444</guid>
   <description>&lt;div&gt;&lt;p&gt;Resolve merge conflict for PR 420&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #444 created</title>
   <pubDate>Tue, 18 Apr 2023 16:29:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/444</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-444</guid>
   <description>&lt;div&gt;&lt;p&gt;Resolve merge conflict for PR 420&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #420
Close #357&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #443 created</title>
   <pubDate>Tue, 18 Apr 2023 15:40:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/443</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-443</guid>
   <description>&lt;div&gt;&lt;p&gt;@select on xsl:matching-substring and xsl:non-matching-substring&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the spirit of making &lt;code&gt;@select&lt;/code&gt; or&lt;code&gt; &amp;lt;sequence constructor&amp;gt;&lt;/code&gt; the norm, I think the children of &lt;code&gt;xsl:analyze-string&lt;/code&gt; have perhaps been overlooked.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #442 created</title>
   <pubDate>Tue, 18 Apr 2023 12:42:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/442</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-442</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to clearify XML serialization of control characters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #438&lt;/p&gt;
&lt;p&gt;Clarify that the control characters #x1 through X1f and #x7f through #x9f must be output as character references except for the whitespace characters #x9, #xA, #xD, and #85.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #439 closed</title>
   <pubDate>Tue, 18 Apr 2023 10:45:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/439</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-439</guid>
   <description>&lt;div&gt;&lt;p&gt;ExprSingle no longer allows OrExpr&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #440 closed</title>
   <pubDate>Tue, 18 Apr 2023 10:45:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/440</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-440</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix bug #439 - grammar for ExprSingle&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #441 closed</title>
   <pubDate>Tue, 18 Apr 2023 10:45:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/441</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-441</guid>
   <description>&lt;div&gt;&lt;p&gt;Make XSLT function formatting consistent with F&amp;amp;O formatting&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #441 created</title>
   <pubDate>Tue, 18 Apr 2023 10:44:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/441</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-441</guid>
   <description>&lt;div&gt;&lt;p&gt;Make XSLT function formatting consistent with F&amp;amp;O formatting&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Resolves action QT4CG-023-01, I believe. This is a minimal sort of fix, not an attempt to refactor everything.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #440 created</title>
   <pubDate>Tue, 18 Apr 2023 10:13:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/440</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-440</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix bug #439 - grammar for ExprSingle&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Simple bug fix, shouldn't need any meeting time.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #439 created</title>
   <pubDate>Tue, 18 Apr 2023 09:03:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/439</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-439</guid>
   <description>&lt;div&gt;&lt;p&gt;ExprSingle no longer allows OrExpr&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The grammar for ExprSingle seems to have been accidentally changed so it no longer allows an OrExpr as one of the alternatives.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #438 created</title>
   <pubDate>Sat, 15 Apr 2023 08:56:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/438</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-438</guid>
   <description>&lt;div&gt;&lt;p&gt;What are the "non-whitespace control characters"?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In Section 5, XML Serialization, we find:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A consequence of this rule is that certain characters MUST be output as character references, to ensure that they survive the round trip through serialization and parsing. Specifically, CR, NEL and LINE SEPARATOR characters in text nodes MUST be output respectively as "&amp;amp;#xD;", "&amp;amp;#x85;", and "&amp;amp;#x2028;", or their equivalents; while CR, NL, TAB, NEL and LINE SEPARATOR characters in attribute nodes MUST be output respectively as "&amp;amp;#xD;", "&amp;amp;#xA;", "&amp;amp;#x9;", "&amp;amp;#x85;", and "&amp;amp;#x2028;", or their equivalents. In addition, the non-whitespace control characters #x1 through #x1F and #x7F through #x9F in text nodes and attribute nodes MUST be output as character references.
(The reference to "non-whitespace control characters" appears in a few other places as well, but for basically the same purpose.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But what &lt;strong&gt;are&lt;/strong&gt; the "non-whitespace control characters"? The spec doesn't say. I think it means &lt;em&gt;all&lt;/em&gt; of the C0 and C1 control characters except CR, NL, TAB, and NEL. The fact that vertical tab and line feed might be considered "white space" doesn't really matter anyway since none of the other C0 control characters are allowed in XML 1.0 anyway (encoded or otherwise).&lt;/p&gt;
&lt;p&gt;XML 1.0 doesn't actually care about the C1 control characters. There's no reason to encode them, but it does no harm, I suppose. You'd have to encode the C0 and C1 control characters for an XML 1.1 parser, but none of those exist.&lt;/p&gt;
&lt;p&gt;I wonder if it might be a little clearer to say&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A consequence of this rule is that certain characters MUST be output as character references, to ensure that they survive the round trip through serialization and parsing. Specifically, CR, NEL and LINE SEPARATOR characters in text nodes MUST be output respectively as "&amp;amp;#xD;", "&amp;amp;#x85;", and "&amp;amp;#x2028;", or their equivalents; while CR, NL, TAB, NEL and LINE SEPARATOR characters in attribute nodes MUST be output respectively as "&amp;amp;#xD;", "&amp;amp;#xA;", "&amp;amp;#x9;", "&amp;amp;#x85;", and "&amp;amp;#x2028;", or their equivalents. In addition, the other control characters #x1 through #x1F (except  #x9, #xA, and #xD) and #x7F through #x9F (except #x85) in text nodes and attribute nodes MUST be output as character references.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 031 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 14 Apr 2023 10:50:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/04-18</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-04-18</guid>
</item><item>
   <title>Issue #437 created</title>
   <pubDate>Thu, 13 Apr 2023 14:26:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/437</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-437</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:where-populated and table with header&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Dear all,&lt;/p&gt;
&lt;p&gt;I just discover the use of xsl:where-populated but was surprised it cover only a narrow use case of single level of wrapping&lt;/p&gt;
&lt;p&gt;My use case is about table and I have to wrap thing into a table with header&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;table ... bunch of attributes'
    &amp;lt;thead ....&amp;gt;
    &amp;lt;xsl:for-each ... &amp;gt;
       &amp;lt;tr&amp;gt;  
          &amp;lt;xsl:for-each ... &amp;gt;
              &amp;lt;td&amp;gt;...&amp;lt;/td&amp;gt;
         &amp;lt;/xsl:for-each&amp;gt;
     &amp;lt;/tr&amp;gt;
   &amp;lt;/xsl:for-each&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How can I do that with  xsl:where-populated ?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #436 created</title>
   <pubDate>Tue, 11 Apr 2023 17:19:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/436</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-436</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow inline function expressions in arrow operator call chains&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It can be useful to create inline functions for simple operations (e.g. adding 1 to a number) to be used in arrow operator call chains.&lt;/p&gt;
&lt;p&gt;The current proposal uses &lt;code&gt;-&amp;gt; { ... }&lt;/code&gt; for just the thin arrow operator.&lt;/p&gt;
&lt;p&gt;This proposal is split into two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;restructure the grammar to make the function call usage simpler to follow;&lt;/li&gt;
&lt;li&gt;introduce the ability to use inline functions in thin/fat arrow contexts.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Part 1 -- Simplify the Grammar&lt;/h2&gt;
&lt;p&gt;I suggest changing the grammar to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FatArrowTarget           ::= "=&amp;gt;" ( ArrowFunctionCall | ArrowDynamicFunctionCall )
ThinArrowTarget          ::= "-&amp;gt;" ( ArrowFunctionCall | ArrowDynamicFunctionCall )
ArrowFunctionCall        ::= EQName ArgumentList
ArrowDynamicFunctionCall ::= ( VarRef | ParenthesizedExpr ) PositionalArgumentList
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is, I've grouped the function name/reference with the argument list.&lt;/p&gt;
&lt;h2&gt;Part 2 -- Allow Inline Functions&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;FatArrowTarget          ::= "=&amp;gt;" ( ArrowFunctionCall | ArrowDynamicFunctionCall | ArrowInlineFunctionCall )
ThinArrowTarget         ::= "-&amp;gt;" ( ArrowFunctionCall | ArrowDynamicFunctionCall | ArrowInlineFunctionCall )
ArrowInlineFunctionCall ::= ( "function" | "fun" ) EnclosedExpr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: here, &lt;code&gt;"fun"&lt;/code&gt; is a placeholder for whichever name/symbol we choose in https://github.com/qt4cg/qtspecs/issues/53.&lt;/p&gt;
&lt;p&gt;This then allows expressions like &lt;code&gt;(1, 2, 3) -&amp;gt; function { . + 1 }&lt;/code&gt; and &lt;code&gt;(1, 2, 3) =&amp;gt; fun { ~ = 1 }&lt;/code&gt; (see also https://github.com/qt4cg/qtspecs/issues/129) without overloading the meaning of &lt;code&gt;-&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 030 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 11 Apr 2023 17:17:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/04-11</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-04-11</guid>
</item><item>
   <title>Issue #435 created</title>
   <pubDate>Tue, 11 Apr 2023 16:33:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/435</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-435</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove the inlined function expression variant of the thin arrow operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal is to remove the third bullet/variant from the thin arrow operator so that the new inline function syntax (&lt;code&gt;-&amp;gt; { ... }&lt;/code&gt;) cannot be used within the arrow expressions.&lt;/p&gt;
&lt;p&gt;This makes the thin/fat arrows consistent in behaviour with each other, with the exception of how they pass the value to the expressions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;thin arrow operators pass the values in the sequence one at a time to the associated function;&lt;/li&gt;
&lt;li&gt;fat arrow operators pass all the values in the sequence to the associated function in a single call.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Changes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Update the syntax:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;[46] FatArrowTarget  ::= "=&amp;gt;" ((ArrowStaticFunction ArgumentList) | (ArrowDynamicFunction PositionalArgumentList)) 	
[47] ThinArrowTarget ::= "-&amp;gt;" ((ArrowStaticFunction ArgumentList) | (ArrowDynamicFunction PositionalArgumentList))
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Remove the text for the inline function variant:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;If the arrow is followed by an &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#doc-xpath40-EnclosedExpr"&gt;EnclosedExpr&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Given a &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#doc-xpath40-UnaryExpr"&gt;UnaryExpr&lt;/a&gt; U, and an &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#doc-xpath40-EnclosedExpr"&gt;EnclosedExpr&lt;/a&gt; {E}, the expression U -&amp;gt; {E} is equivalent to the expression (U) ! (E).&lt;/p&gt;
&lt;p&gt;For example, the expression $x -&amp;gt; {.+1} is equivalent to ($x)!(.+1).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Remove/update the associated examples, e.g. to use &lt;code&gt;let $f := function ($x) { $x + 1 } return $x -&amp;gt; f() -&amp;gt; $f()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #390 closed</title>
   <pubDate>Tue, 11 Apr 2023 16:16:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/390</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-390</guid>
   <description>&lt;div&gt;&lt;p&gt;Should parsing and building URIs attempt to special case Windows URIs for UNC names?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #415 closed</title>
   <pubDate>Tue, 11 Apr 2023 16:16:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/415</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-415</guid>
   <description>&lt;div&gt;&lt;p&gt;Revise parse/build URI functions for UNC names&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 030 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sun, 9 Apr 2023 19:35:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/04-11</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-04-11</guid>
</item><item>
   <title>Pull request #434 created</title>
   <pubDate>Fri, 7 Apr 2023 11:57:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/434</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-434</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions to parse and format hex integers&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Addresses issue #241 by providing functions to parse and format integers in any number base from 2 to 36.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #433 created</title>
   <pubDate>Fri, 7 Apr 2023 09:56:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/433</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-433</guid>
   <description>&lt;div&gt;&lt;p&gt;429 Add hex and binary literals and allow underscores&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Addresses issue #429. The grammar is extended to allow hex and binary integer literals, and all numeric literals may contain underscores for readability.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #432 closed</title>
   <pubDate>Fri, 7 Apr 2023 07:43:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/432</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-432</guid>
   <description>&lt;div&gt;&lt;p&gt;fix attribute name : it is diff instead of role&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #432 created</title>
   <pubDate>Thu, 6 Apr 2023 20:01:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/432</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-432</guid>
   <description>&lt;div&gt;&lt;p&gt;fix attribute name : it is diff instead of role&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #417 closed</title>
   <pubDate>Thu, 6 Apr 2023 15:51:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/417</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-417</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix residual reference to op:A2S which is no longer defined&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #315 closed</title>
   <pubDate>Thu, 6 Apr 2023 15:51:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/315</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-315</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:transform inconsistency: initial-mode&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #427 closed</title>
   <pubDate>Thu, 6 Apr 2023 15:51:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/427</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-427</guid>
   <description>&lt;div&gt;&lt;p&gt;Change fn:transform to use the stylesheet's default mode&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #280 closed</title>
   <pubDate>Thu, 6 Apr 2023 15:50:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/280</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-280</guid>
   <description>&lt;div&gt;&lt;p&gt;Why is resolve-uri forbidden from resolving against a URI that contains a fragment identifier?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #426 closed</title>
   <pubDate>Thu, 6 Apr 2023 15:50:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/426</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-426</guid>
   <description>&lt;div&gt;&lt;p&gt;Resolve #280 by allowing a fragid&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #428 closed</title>
   <pubDate>Thu, 6 Apr 2023 12:05:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/428</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-428</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix problem in rendering empty &amp;lt;xnt&amp;gt; elements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #431 closed</title>
   <pubDate>Thu, 6 Apr 2023 12:05:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/431</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-431</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix problem rendering xnt elements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #431 created</title>
   <pubDate>Thu, 6 Apr 2023 12:05:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/431</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-431</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix problem rendering xnt elements&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #428&lt;/p&gt;
&lt;p&gt;Hi @michaelhkay . I took a slightly different approach. For unknown reasons long since lost in the mists of time the 'etc' files that act as databases for cross-spec references stored &lt;code&gt;nt&lt;/code&gt; elements. That's weird because the &lt;code&gt;nt&lt;/code&gt; elements are supposed to point to &lt;code&gt;prod&lt;/code&gt; elements. I expect someone (let's be candid, probably me) got confused by the fact that &lt;code&gt;nt&lt;/code&gt; elements have a &lt;code&gt;def&lt;/code&gt; attribute and thought they were definitions. They're not. I've changed things so that the &lt;code&gt;prod&lt;/code&gt; elements are now stored in the database. There's only going to ever be one of those.&lt;/p&gt;
&lt;p&gt;I had to tidy up a few things to make that work, and we can't abandon support for &lt;code&gt;nt&lt;/code&gt; files in 'etc' documents because we have existing files that don't get regenerated.&lt;/p&gt;
&lt;p&gt;I also cleaned up the cross-reference error to &lt;code&gt;StringLiteral&lt;/code&gt; in the XSLT spec and patched over a problem with a few link in the XQuery specifications.&lt;/p&gt;
&lt;p&gt;There's no useful information from PR formatting of PRs that change the stylesheets, so I'm just going to cross my fingers and merge this. Please pull the latest and let me know if you see any problems!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #430 created</title>
   <pubDate>Thu, 6 Apr 2023 09:32:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/430</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-430</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:doc et al, error handling: inconsistencies. Closes #293&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Resolves action item QT4CG-029-04.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #429 created</title>
   <pubDate>Wed, 5 Apr 2023 17:04:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/429</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-429</guid>
   <description>&lt;div&gt;&lt;p&gt;Hexadecimal and binary literals&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Without wanting to challenge our weekly burn-down chart too much, I wonder whether it would be a big deal to support hexadecimal and binary literals in XPath? Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: decimal :)     1, 255,
(: hexadecimal :) 0x1, 0X00Ff,
(: binary :)      0b1, 0B11111111, 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main question is probably if it conflicts with the existing grammar?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #428 created</title>
   <pubDate>Wed, 5 Apr 2023 16:21:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/428</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-428</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix problem in rendering empty &amp;lt;xnt&amp;gt; elements&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the F&amp;amp;O spec, function &lt;code&gt;parse-QName&lt;/code&gt;,  there is a link to &lt;code&gt;BracedURILiteral&lt;/code&gt; repeated 6 times. This happens when an &lt;code&gt;&amp;lt;xnt&amp;gt;&lt;/code&gt; element is written with empty content. There are 6 entries in the /etc/ XP40 file for the relevant grammar symbol, and each of them is output. I haven't tried to eliminate the redundancy in the /etc/XP40 file, I have simply changed the code for processing &lt;code&gt;&amp;lt;xnt&amp;gt;&lt;/code&gt; so it only considers the first one.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #411 closed</title>
   <pubDate>Wed, 5 Apr 2023 14:19:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/411</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-411</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove the note from the parse-html unparsed-entity sections.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #427 created</title>
   <pubDate>Wed, 5 Apr 2023 14:17:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/427</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-427</guid>
   <description>&lt;div&gt;&lt;p&gt;Change fn:transform to use the stylesheet's default mode&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #315&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #426 created</title>
   <pubDate>Tue, 4 Apr 2023 21:01:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/426</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-426</guid>
   <description>&lt;div&gt;&lt;p&gt;Resolve #280 by allowing a fragid&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #280&lt;/p&gt;
&lt;p&gt;(Based off the right branch this time. I hope.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #424 closed</title>
   <pubDate>Tue, 4 Apr 2023 21:01:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/424</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-424</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow fn:resolve-uri to resolve against a base URI that includes a fragment identifier&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #425 created</title>
   <pubDate>Tue, 4 Apr 2023 20:09:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/425</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-425</guid>
   <description>&lt;div&gt;&lt;p&gt;Structural proposal (ThinLayer:tm:) : Add a layer of thin spec between XPath and the XPath Derived Language&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XPath is ubiquitous and is used even in places where we have no idea
On the other hand XPath is very useful to us as the centerpiece of XSLT, XQuery&lt;/p&gt;
&lt;p&gt;In order to allow people to have a more expanded use of XPath without to have to get the whole XSLT, XQuery story, it is perhaps the time to consider adding a thin layer of spec in order to have&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;XPath&lt;/li&gt;
&lt;li&gt;Some typing definition mechanism&lt;/li&gt;
&lt;li&gt;Some function definition mechanism&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The idea is also to better integrate this with all Validation technologies (XSD, Relax NG, NVDL, JSONSchema, etc.) and allow EXPath, EXQuery and other to have a standard way to use all this around&lt;/p&gt;
&lt;p&gt;We also want people that want to use only XPath (for example in LinQ or inside SQL) to have a broader capacity to interact with XML (instead of being limited to XPath 1.0 with namespaces)&lt;/p&gt;
&lt;p&gt;I will try to add more and more precision to this proposal along the line, but I feel it is good enough to be a first stone to break and allow people to help drive this initiative&lt;/p&gt;
&lt;p&gt;For the moment the name of this new beast is &lt;strong&gt;XPathWithCustomizableTypesAndFunctions&lt;/strong&gt; in our proposal call XPath Next https://github.com/XPath-Next/XPath-Next/blob/first-draft/spec.md&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 029 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 4 Apr 2023 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/04-04</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-04-04</guid>
</item><item>
   <title>Pull request #424 created</title>
   <pubDate>Tue, 4 Apr 2023 17:12:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/424</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-424</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow fn:resolve-uri to resolve against a base URI that includes a fragment identifier&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #280&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #423 created</title>
   <pubDate>Tue, 4 Apr 2023 14:24:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/423</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-423</guid>
   <description>&lt;div&gt;&lt;p&gt;[XSLT 4.0] 2.2 Notation is incomplete&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;"language" and "prefixes" are used in the definition of element but not defined here&lt;/p&gt;
&lt;p&gt;On the other hand,  "nmtokens" is defined but not used&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #22 closed</title>
   <pubDate>Tue, 4 Apr 2023 11:32:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/22</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-22</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Allowing multiple let clauses in LetExpr and for clauses in ForExpr&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #416 closed</title>
   <pubDate>Tue, 4 Apr 2023 10:23:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/416</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-416</guid>
   <description>&lt;div&gt;&lt;p&gt;NCName is usually lowercase in attribute  type for the rest of the spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #422 closed</title>
   <pubDate>Tue, 4 Apr 2023 10:22:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/422</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-422</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix syntax in examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #422 created</title>
   <pubDate>Tue, 4 Apr 2023 09:58:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/422</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-422</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix syntax in examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;attribute namespace-uri corrected to namespace
xsl:sequence-of corrected to xsl:sequence&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #419 closed</title>
   <pubDate>Tue, 4 Apr 2023 09:37:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/419</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-419</guid>
   <description>&lt;div&gt;&lt;p&gt;fix few syntax issues in the XSLT 4.0 examples &lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #421 created</title>
   <pubDate>Tue, 4 Apr 2023 09:36:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/421</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-421</guid>
   <description>&lt;div&gt;&lt;p&gt;Make sure the build system syntax checks the syntax of examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Apparently the code is lying around somewhere...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #420 created</title>
   <pubDate>Tue, 4 Apr 2023 09:26:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/420</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-420</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 357 Map composition and decomposition&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR addresses the issues concerned with map composition and decomposition in issue #357. It adds a function to decompose a map into key-value pairs (map:key-value-pairs), and its inverse (map:of). It adds explanatory material to F+O to explain how these functions relate to each other, and it adds examples to the XSLT spec to show how the interwork with the xsl:array, xsl:map, and xsl:for-each instructions. Note: the map functions have been sorted alphabetically, so the changes will appear more extensive than they are.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #419 created</title>
   <pubDate>Tue, 4 Apr 2023 08:29:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/419</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-419</guid>
   <description>&lt;div&gt;&lt;p&gt;fix few syntax issues in the XSLT 4.0 examples &lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #418 created</title>
   <pubDate>Tue, 4 Apr 2023 08:22:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/418</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-418</guid>
   <description>&lt;div&gt;&lt;p&gt;array and map attribute in xsl:iterate and xsl:for-each-group&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It seems there is still some places where we can still spot some remnant peices of attribute array and attribute map in the spec&lt;/p&gt;
&lt;p&gt;You can find this sentence at two places&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;, or constructed from the expressions in the array or map attributes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also there is some examples&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: Grouping entries in a Map&lt;/li&gt;
&lt;li&gt;Example: Processing an array using xsl:iterate&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #417 created</title>
   <pubDate>Mon, 3 Apr 2023 21:56:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/417</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-417</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix residual reference to op:A2S which is no longer defined&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The changes made to redefine array functions in terms of &lt;code&gt;array:members&lt;/code&gt; and &lt;code&gt;array:of&lt;/code&gt; rather than &lt;code&gt;op:A2S&lt;/code&gt; and &lt;code&gt;op:S2A&lt;/code&gt; weren't applied to array:get because that was the subject of a separate PR to add the &lt;code&gt;fallback&lt;/code&gt; option. This PR corrects the omission.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #403 closed</title>
   <pubDate>Mon, 3 Apr 2023 21:25:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/403</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-403</guid>
   <description>&lt;div&gt;&lt;p&gt;Michaelhkay actions 2023 02 01&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #416 created</title>
   <pubDate>Mon, 3 Apr 2023 17:48:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/416</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-416</guid>
   <description>&lt;div&gt;&lt;p&gt;NCName is usually lowercase in attribute  type for the rest of the spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #415 created</title>
   <pubDate>Mon, 3 Apr 2023 16:39:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/415</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-415</guid>
   <description>&lt;div&gt;&lt;p&gt;Revise parse/build URI functions for UNC names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #398
Fix #390&lt;/p&gt;
&lt;p&gt;This PR attempts to address the questions raised in issues 389 and 390:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It adds a &lt;code&gt;unc-path&lt;/code&gt; option that is used to guide the parsing and construction of URIs that represent Windows UNC paths&lt;/li&gt;
&lt;li&gt;It adds a &lt;code&gt;filepath&lt;/code&gt; property to the result of &lt;code&gt;parse-uri&lt;/code&gt;. This property represents the local path part of the URI. For file: URIs, this is the local path.&lt;/li&gt;
&lt;li&gt;It addresses the use of "&lt;code&gt;|&lt;/code&gt;" in URIs to represent the ":" in Windows filenames&lt;/li&gt;
&lt;li&gt;It clarifies that percent-decoding a path also involves intepreting the result as a UTF-8 sequence&lt;/li&gt;
&lt;li&gt;It clarifies that percend-decoding and encoding apply to the query parts of a URI as well.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #300 closed</title>
   <pubDate>Sun, 2 Apr 2023 12:58:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/300</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-300</guid>
   <description>&lt;div&gt;&lt;p&gt;[F+O] Ambiguity regarding Unicode normalization (editorial)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 029 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 31 Mar 2023 16:35:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/04-04</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-04-04</guid>
</item><item>
   <title>Issue #414 created</title>
   <pubDate>Fri, 31 Mar 2023 08:04:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/414</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-414</guid>
   <description>&lt;div&gt;&lt;p&gt;Lift character set restriction of xs:string&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adopted from https://github.com/qt4cg/qtspecs/issues/413#issuecomment-1491469514&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I guess that raises the question of whether it is still appropriate to restrict the character set of xs:string to that of XML 1.0. Are there any benefits in doing so?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I believe that would simplify things a lot, in particular when working with input/output functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 028 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Thu, 30 Mar 2023 16:50:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/03-28</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-03-28</guid>
</item><item>
   <title>Issue #404 closed</title>
   <pubDate>Thu, 30 Mar 2023 15:52:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/404</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-404</guid>
   <description>&lt;div&gt;&lt;p&gt;Rework changes from action-qt4cg-019-01 to resolve persistent conflicts.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #398 closed</title>
   <pubDate>Thu, 30 Mar 2023 15:52:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/398</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-398</guid>
   <description>&lt;div&gt;&lt;p&gt;User-defined functions clashing with constructor functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #406 closed</title>
   <pubDate>Thu, 30 Mar 2023 15:51:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/406</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-406</guid>
   <description>&lt;div&gt;&lt;p&gt;Revise xsl:array instruction and examples&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #408 closed</title>
   <pubDate>Thu, 30 Mar 2023 15:51:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/408</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-408</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #398 (clash with constructor functions)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #413 created</title>
   <pubDate>Thu, 30 Mar 2023 14:08:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/413</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-413</guid>
   <description>&lt;div&gt;&lt;p&gt;New function: parse-csv()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose a new function parse-csv() that accepts a CSV string (such as might be read from a CSV file using unparsed-text()). CSV is as defined in RFC 4180; implementations may be liberal in what they accept, and may define additional options.&lt;/p&gt;
&lt;p&gt;An options parameter includes the option header=true|false to indicate whether the first line should be taken as containing column headings.&lt;/p&gt;
&lt;p&gt;The result of the function is a sequence of maps, one map per row of the CSV file (excluding the header). Each map contains one entry per column, the key being taken from the column header if present, or an integer 1...n if not.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #412 created</title>
   <pubDate>Tue, 28 Mar 2023 22:12:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/412</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-412</guid>
   <description>&lt;div&gt;&lt;p&gt;409, QT4CG-027-01: xsl:next-match&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Clarifies the rules for xsl:next-match, especially for 4.0 type patterns, but also clarifying the exposition of rules unchanged since 3.0 or 2.0 (see issue 409)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #411 created</title>
   <pubDate>Tue, 28 Mar 2023 11:51:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/411</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-411</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove the note from the parse-html unparsed-entity sections.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This applies the review action:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RD to remove the note in 15.5.15 of functions and operators.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 028 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 27 Mar 2023 13:00:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/03-28</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-03-28</guid>
</item><item>
   <title>Issue #410 created</title>
   <pubDate>Mon, 27 Mar 2023 10:37:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/410</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-410</guid>
   <description>&lt;div&gt;&lt;p&gt;Converting doubles to decimals, fractional digits&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adopted from a previous discussion on Slack: The result of the following computation…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;x&amp;gt;2&amp;lt;/x&amp;gt; + .1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…is serialized as &lt;code&gt;2.1&lt;/code&gt;. If the result is cast to a decimal via &lt;code&gt;xs:decimal(&amp;lt;x&amp;gt;2&amp;lt;/x&amp;gt; + .1)&lt;/code&gt;, &lt;code&gt;2.100000000000000088817841970012523233890533447265625&lt;/code&gt; is returned, which feels counterintuitive.&lt;/p&gt;
&lt;p&gt;Can we possibly change the conversion rules without compromising backward-compatibility?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #409 created</title>
   <pubDate>Sun, 26 Mar 2023 11:13:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/409</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-409</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT: xsl:next-match and xsl:apply-imports interaction with on-multiple-match&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;(This is an oversight in the XSLT 3.0 specification.)&lt;/p&gt;
&lt;p&gt;It is possible for &lt;code&gt;xsl:next-match&lt;/code&gt; or &lt;code&gt;xsl:apply-imports&lt;/code&gt; to encounter a conflict - two template rules with the same precedence and priority. In this situation it should do exactly what &lt;code&gt;xsl:apply-templates&lt;/code&gt; does when it encounters a conflict, for example it should follow the rules of &lt;code&gt;xsl:mode/@on-multiple-match&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is all fairly obvious, but it should be stated explicitly (and tested). The spec is written as if conflicts can only occur when finding the first matching rule, and not when finding next-match rules.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #392 closed</title>
   <pubDate>Fri, 24 Mar 2023 11:00:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/392</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-392</guid>
   <description>&lt;div&gt;&lt;p&gt;Partial function application: Placeholders with keywords&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #408 created</title>
   <pubDate>Fri, 24 Mar 2023 10:29:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/408</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-408</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #398 (clash with constructor functions)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add clarification to XSLT and XQuery specs to say that a used-defined function must not clash with a constructor function for an imported atomic type.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #407 created</title>
   <pubDate>Thu, 23 Mar 2023 11:39:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/407</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-407</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT-specific context properties used in function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I just stumbled across the fact that current-group#0 doesn't work: see the note in 14.2.1 that says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Like other XSLT extensions to the dynamic evaluation context, the [current group] is not retained as part of the closure of a function value. This means that the expression current-group#0 is valid and returns a function value, but any invocation of this function will fail with a dynamic error [see [ERR XTDE1061].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This restriction is unnecessary and we should remove it. As people become more accustomed to using function items, they don't want to hit restrictions like this, and there's really no good implementation reason for it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #406 created</title>
   <pubDate>Wed, 22 Mar 2023 18:03:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/406</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-406</guid>
   <description>&lt;div&gt;&lt;p&gt;Revise xsl:array instruction and examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR revises the design of the xsl:array instruction to align it with the recently agreed specs for the functions &lt;code&gt;array:members&lt;/code&gt; and &lt;code&gt;array:of&lt;/code&gt;. The &lt;code&gt;composite&lt;/code&gt; attribute and the &lt;code&gt;xsl:array-member&lt;/code&gt; instruction are dropped; instead the instruction takes a &lt;code&gt;use&lt;/code&gt; attribute which is an expression used to compute each array member value from the corresponding item in the value of the select expression or sequence constructor.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #360 closed</title>
   <pubDate>Tue, 21 Mar 2023 18:12:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/360</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-360</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 314 array composition and decomposition&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #405 closed</title>
   <pubDate>Tue, 21 Mar 2023 18:12:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/405</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-405</guid>
   <description>&lt;div&gt;&lt;p&gt;MK PR #360 with merge conflicts resolved (array compositionand decomposition)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #405 created</title>
   <pubDate>Tue, 21 Mar 2023 18:01:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/405</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-405</guid>
   <description>&lt;div&gt;&lt;p&gt;MK PR #360 with merge conflicts resolved (array compositionand decomposition)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #360&lt;/p&gt;
&lt;p&gt;This PR is the same as 360 but fixes merge conflicts.&lt;/p&gt;
&lt;p&gt;Accepted at &lt;a href="https://qt4cg.org/meeting/minutes/2023/03-21.html#pr-360"&gt;meeting 027&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Close https://github.com/qt4cg/qtspecs/issues/314&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #400 closed</title>
   <pubDate>Tue, 21 Mar 2023 17:19:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/400</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-400</guid>
   <description>&lt;div&gt;&lt;p&gt;Priorities for type-based patterns&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #401 closed</title>
   <pubDate>Tue, 21 Mar 2023 17:18:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/401</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-401</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 400: ranking of type patterns&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #395 closed</title>
   <pubDate>Tue, 21 Mar 2023 17:17:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/395</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-395</guid>
   <description>&lt;div&gt;&lt;p&gt;Make the (non-)hierarchical nature of URIs explicit&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #394 closed</title>
   <pubDate>Tue, 21 Mar 2023 17:17:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/394</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-394</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor correction to fn:parse-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #393 closed</title>
   <pubDate>Tue, 21 Mar 2023 17:16:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/393</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-393</guid>
   <description>&lt;div&gt;&lt;p&gt;Clarify explanations of functions/function items&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #391 closed</title>
   <pubDate>Tue, 21 Mar 2023 17:16:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/391</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-391</guid>
   <description>&lt;div&gt;&lt;p&gt;addressed typographical errors; adjusted Unicode character discussion…&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 027 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Tue, 21 Mar 2023 10:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/03-21</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-03-21</guid>
</item><item>
   <title>Issue #336 closed</title>
   <pubDate>Mon, 20 Mar 2023 16:00:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/336</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-336</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-019-01 (type of $pattern in fn:tokenize())&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #404 created</title>
   <pubDate>Mon, 20 Mar 2023 15:59:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/404</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-404</guid>
   <description>&lt;div&gt;&lt;p&gt;Rework changes from action-qt4cg-019-01 to resolve persistent conflicts.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I reworked these (purely editorial) changes based on the current master to try and resolve the conflicts once and for all.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #403 created</title>
   <pubDate>Mon, 20 Mar 2023 15:26:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/403</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-403</guid>
   <description>&lt;div&gt;&lt;p&gt;Michaelhkay actions 2023 02 01&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #402 created</title>
   <pubDate>Mon, 20 Mar 2023 00:31:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/402</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-402</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT patterns: intersect and except&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I would like to propose making an incompatible change to the semantics of XSLT patterns using the "except" and "intersect" operators, so that they have their intuitive meaning.&lt;/p&gt;
&lt;p&gt;Consider the pattern &lt;code&gt;p except appendix//p&lt;/code&gt;. Anyone writing this probably imagines that this will match any &lt;code&gt;p&lt;/code&gt; element that does not have an &lt;code&gt;appendix&lt;/code&gt; as an ancestor. The intuitive meaning of &lt;code&gt;A except B&lt;/code&gt; is to match anything that matches&lt;code&gt;A&lt;/code&gt; unless it also matches &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The actual meaning in the XSLT 3.1 specification is that it matches any node &lt;code&gt;$N&lt;/code&gt; that has an ancestor &lt;code&gt;$A&lt;/code&gt; such that the result of the XPath expression &lt;code&gt;$A//(p except appendix//p)&lt;/code&gt; includes &lt;code&gt;$N&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Consider the XML&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;appendix&amp;gt;
  &amp;lt;div&amp;gt;
     &amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/appendix&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element here has an ancestor (the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element) where the result of &lt;code&gt;$A//(p except appendix//p)&lt;/code&gt; includes the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element. So despite having an ancestor &lt;code&gt;appendix&lt;/code&gt; this element matches the pattern &lt;code&gt;p except appendix//p&lt;/code&gt;. This is not only a counter-intuitive result, it also makes such patterns useless in practice.&lt;/p&gt;
&lt;p&gt;Patterns using &lt;code&gt;intersect&lt;/code&gt; suffer the same problem, though it is much harder to construct a plausible example.&lt;/p&gt;
&lt;p&gt;Patterns that only use the child or attribute axis, for example &lt;code&gt;@* except @code&lt;/code&gt;, or &lt;code&gt;* except note&lt;/code&gt;, don't suffer from this problem and will retain the same meaning as in 3.1.&lt;/p&gt;
&lt;p&gt;The required effect can be achieved by writing &lt;code&gt;p except p[ancestor::appendix]&lt;/code&gt;. Because the pattern &lt;code&gt;p[ancestor::appendix]&lt;/code&gt; is equivalent to &lt;code&gt;appendix//p&lt;/code&gt;, people are very likely to imagine that &lt;code&gt;p except p[ancestor::appendix]&lt;/code&gt; is equivalent to &lt;code&gt;p except appendix//p&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Making any incompatible change to the language semantics should be done only with a very strong justification, but I believe that it is justified in this instance. The existing semantics are not only counter-intuitive, they are also sufficiently useless that it is extremely unlikely anyone has existing working code, other than artificial test cases, that relies on the current semantics.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #387 closed</title>
   <pubDate>Sun, 19 Mar 2023 11:10:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/387</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-387</guid>
   <description>&lt;div&gt;&lt;p&gt;Add compatibility notes for fn:namespace-uri-for-prefix&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #385 closed</title>
   <pubDate>Sun, 19 Mar 2023 11:09:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/385</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-385</guid>
   <description>&lt;div&gt;&lt;p&gt;Actions QT4CG-025-07 / -08&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #378 closed</title>
   <pubDate>Sun, 19 Mar 2023 11:06:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/378</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-378</guid>
   <description>&lt;div&gt;&lt;p&gt;Update the localName and unparsed entity reference notes for parse-html&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #401 created</title>
   <pubDate>Wed, 15 Mar 2023 22:02:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/401</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-401</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 400: ranking of type patterns&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Proposes how to handle type-based match patterns (record tests, in particular) in the absence of explicit priorities, basing the decision on the type hierarchy. Note: user-defined priorities are always considered before any inferred selectivity rules. Also fixes some grammar problems with type patterns. See Issue #400.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #400 created</title>
   <pubDate>Wed, 15 Mar 2023 08:13:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/400</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-400</guid>
   <description>&lt;div&gt;&lt;p&gt;Priorities for type-based patterns&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XSLT §6.6 currently has a big TODO:&lt;/p&gt;
&lt;p&gt;TODO: define default priorities for type patterns, as suggested in https://www.saxonica.com/papers/xmlprague-2020mhk.pdf section 6.5.1&lt;/p&gt;
&lt;p&gt;We need to plug this gap. [Note: it's worth reading that cited section as it points out some of the difficulties].&lt;/p&gt;
&lt;p&gt;I'm going to suggest an alternative approach. Rather than allocating a numeric priority to patterns such as &lt;code&gt;record(lat, long)&lt;/code&gt;, we allocate them a relative priority -- called their &lt;code&gt;selectivity&lt;/code&gt; -- based on the subtype relationship among types. This is a partial ordering. So we extend the rule that currently orders patterns by (1) import precedence, (2) priority, (3) declaration order, to become instead (1) import precedence, (2) selectivity, (3) priority, (4) declaration order.&lt;/p&gt;
&lt;p&gt;Type-based patterns (such as &lt;code&gt;type(xs:integer)&lt;/code&gt;, &lt;code&gt;record(lat, long)&lt;/code&gt;) are defined to have higher selectivity than any non-type-based pattern; all the latter (that is, all XSLT 3.1 patterns) are defined to have equal selectivity, which means the rules for discriminating among 3.1 patterns are unchanged.&lt;/p&gt;
&lt;p&gt;For type-based patterns, we define that a pattern based on type T has higher selectivity than a pattern based on type U if T is a subtype of U. If neither is a subtype of the other, then they have equal selectivity.&lt;/p&gt;
&lt;p&gt;The type pattern &lt;code&gt;type(T)&lt;/code&gt; followed by one or more predicates is deemed to have higher selectivity than type(T) with no predicates, but apart from this, the predicates are ignored. Explicit numeric priorities can be used to define an ordering among type patterns that have the same selectivity.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #399 created</title>
   <pubDate>Wed, 15 Mar 2023 03:31:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/399</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-399</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: Using Multilevel Hierarchy and Abstraction when designing and specifying complex functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Whenever a function is too-complex, its precise and clear specification becomes problematic and the complexity results in huge volume of text that is difficult to fathom, understand and the correctness of whose meaning becomes less and less obvious.&lt;/p&gt;
&lt;p&gt;Solving this problem would benefit all groups of readers, be they future implementors or just curious XPath enthusiasts.&lt;/p&gt;
&lt;p&gt;Here I present one well-known and successfully tried in practice solution, which the Romans summarized in the phrase: "&lt;strong&gt;&lt;em&gt;Divide et Impera&lt;/em&gt;&lt;/strong&gt;" ("Divide and conquer")&lt;/p&gt;
&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Philip-ii-of-macedon.jpg/330px-Philip-ii-of-macedon.jpg"/&gt;
&lt;p&gt;Below is one possible splitting of the functionality of &lt;strong&gt;&lt;a href="https://qt4cg.org/pr/395/xpath-functions-40/autodiff.html#func-deep-equal"&gt;fn:deep-equal&lt;/a&gt;&lt;/strong&gt; into different smaller and simpler functions on 5 levels, each level possibly dispatching to a function on  another level. The intermediate-level functions each have their own value and could be used independently of &lt;strong&gt;fn:deep-equal&lt;/strong&gt; and of each other. Even though there is the possibility of recursion, we can still get a simple picture and immediate understanding of this functionality, just playing with the following collapsible/expandable representation (click on the corresponding arrow), which fits on a single screen:&lt;/p&gt;
&lt;h2&gt;(writing the full specification from this animated picture is left as an exercise for the reader 😂&lt;/h2&gt;
&lt;details&gt;
    &lt;summary&gt;deep-equal-sequence&lt;/summary&gt;
	  &lt;blockquote&gt;
          &lt;details&gt;
				 &lt;summary&gt;deep-equal-item&lt;/summary&gt;
					  &lt;blockquote&gt;
	  					  &lt;p&gt;deep-equal-atomic&lt;/p&gt;
						  &lt;details&gt;
								&lt;summary&gt;deep-equal-map&lt;/summary&gt;
								  &lt;blockquote&gt;
										  &lt;p&gt;deep-equal-atomic&lt;/p&gt;
										  &lt;p&gt;deep-equal-sequence&lt;/p&gt;
								  &lt;/blockquote&gt;
						  &lt;/details&gt;
						  &lt;details&gt;
							  &lt;summary&gt;deep-equal-array&lt;/summary&gt;
								  &lt;blockquote&gt;
										  &lt;p&gt;deep-equal-sequence&lt;/p&gt;
								  &lt;/blockquote&gt;
						  &lt;/details&gt;
						  &lt;details&gt;
							  &lt;summary&gt;deep-equal-node&lt;/summary&gt;
								  &lt;blockquote&gt;
										  &lt;p&gt;deep-equal-document&lt;/p&gt;
										  &lt;details&gt;										  
											  &lt;summary&gt;deep-equal-element&lt;/summary&gt;
												  &lt;blockquote&gt;
													  &lt;p&gt;deep-equal-attribute&lt;/p&gt;
													  &lt;p&gt;deep-equal-NS&lt;/p&gt;
													  &lt;p&gt;deep-equal-PI&lt;/p&gt;
													  &lt;p&gt;deep-equal-comment&lt;/p&gt;
													  &lt;p&gt;deep-equal-text-node&lt;/p&gt;
												  &lt;/blockquote&gt;
										  &lt;/details&gt;										  
										  &lt;p&gt;deep-equal-attribute&lt;/p&gt;
										  &lt;p&gt;deep-equal-NS&lt;/p&gt;
										  &lt;p&gt;deep-equal-PI&lt;/p&gt;
										  &lt;p&gt;deep-equal-comment&lt;/p&gt;
										  &lt;p&gt;deep-equal-text-node&lt;/p&gt;
								  &lt;/blockquote&gt;
						  &lt;/details&gt;
					  &lt;/blockquote&gt;
		  &lt;/details&gt;
	  &lt;/blockquote&gt;
  &lt;/details&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #398 created</title>
   <pubDate>Tue, 14 Mar 2023 23:39:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/398</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-398</guid>
   <description>&lt;div&gt;&lt;p&gt;User-defined functions clashing with constructor functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There is no explicit rule in either XQuery or XSLT that a user-defined function must not clash (in name and arity) with a constructor function for an imported atomic type. It's implicit in the rule that you can't have two conflicting functions in the static context, but it would be helpful to say so explicitly and define an error code.&lt;/p&gt;
&lt;p&gt;I have added tests to the XSLT3 and XQuery3 test suites.&lt;/p&gt;
&lt;p&gt;See also Saxon bug 5921 - https://saxonica.plan.io/issues/5921&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #397 created</title>
   <pubDate>Tue, 14 Mar 2023 21:46:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/397</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-397</guid>
   <description>&lt;div&gt;&lt;p&gt;Type names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The draft specifications propose the introduction of item type declarations that can associate a name with an item type. The feature probably still needs some work, which this issue aims to explore.&lt;/p&gt;
&lt;p&gt;The main purpose of introducing named item types is that the ItemType for a record structure or a function signature can become quite complex and lengthy, and you don't want to have to repeat them every time they are used because it means you have to make the same change everywhere when a change occurs. Another motivation is to allow type definitions (for example, of records or functions) to be recursive.&lt;/p&gt;
&lt;p&gt;I considered allowing named sequence types rather than just item types, but the rules for where you can and can't have an occurrence indicator get complicated, so I pulled back from that.&lt;/p&gt;
&lt;p&gt;It seems natural to say:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Item type names are QNames&lt;/li&gt;
&lt;li&gt;In XPath, type names (and their mapping to item types) appear in the static context&lt;/li&gt;
&lt;li&gt;In XQuery, type names follow the conventions for global variables and function declarations. That suggests they can appear either in the main module or a library module; in a library module they must be in the namespace of the module; they can be annotated as %public or %private; an &lt;code&gt;import module&lt;/code&gt; declaration makes the name visible in the importing module.&lt;/li&gt;
&lt;li&gt;In XSLT, a name declared in a module is automatically available throughout the stylesheet package, and can be exposed to other packages using the same visibility mechanisms as other stylesheet components. However, I don't think it makes sense to allow a type name to be overridden, either using import precedence or using xsl:override.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The question then arises, should item type names be in the same "symbol space" as named atomic and union types? There seem to be several options here:&lt;/p&gt;
&lt;p&gt;(a) Item type names are in a different symbol space from atomic types; the are no rules barring the same name being used for a named item type and an atomic type, and they are disambiguated by requiring item type names to be distinguished using some kind of marker syntax such as &lt;code&gt;type(name)&lt;/code&gt;, rather than just a bare name.
(b) Item type names are in the same symbol space as atomic types, which means there must be a rule that an item type name must not be the same as an atomic type name that is visible in the same place. We could try and define this rule for individual names, or at the level of namespaces (if there are any atomic/union types in a particular namespace in the static context of any module, then there must be no declared type names in that namespace in that module, either declared in that module or imported from another module).
(c) Atomic type names "shadow" item type names, or vice versa: if the same name is used for both, then one of them takes precedence. Probably not a good idea.&lt;/p&gt;
&lt;p&gt;I'm inclined to go for (b). Note that a simple rule that item type names can't be in a reserved namespace will prevent conflict for all non-schema-aware applications, since those applications only access atomic types in the &lt;code&gt;xs&lt;/code&gt; namespace.&lt;/p&gt;
&lt;p&gt;Now, what about circular definitions?&lt;/p&gt;
&lt;p&gt;There are legitimate circular definitions, like &lt;code&gt;declare item type LIST = record(payload as item()*, next? as LIST)&lt;/code&gt;, and there are "impossible" definitions, like &lt;code&gt;declare item type THING = THING&lt;/code&gt;. Do we have to define the rules needed to ban "impossible" definitions, or can we just leave it that the determination of whether something is an instance of THING is non-terminating? I think we probably need to define the rules, which will require careful thought.&lt;/p&gt;
&lt;p&gt;Where can item type names be used? The simple answer is: anywhere an ItemType is allowed. But what about contexts that only allow some ItemTypes and not others? For example, (a) "cast as", (b) as arguments of a LocalUnionType, (c) as the key type in a map type. (The solution in the current draft is that the syntax allows any ItemType to be used in these contexts, and there are semantic rules to constrain what kind of item types are allowed).&lt;/p&gt;
&lt;p&gt;If we allow &lt;code&gt;$v cast as my:X&lt;/code&gt; where &lt;code&gt;my:X&lt;/code&gt; is a declared item type name, should we also allow the constructor function  &lt;code&gt;my:X($v)&lt;/code&gt;? That would presumably also mean that item type names and function names cannot overlap.&lt;/p&gt;
&lt;p&gt;Should we define any "built-in" item type names? We've been defining built-in functions (such as build-uri and parse-uri) whose signatures use record type definitions. Should we define built-in names for these record definitions?&lt;/p&gt;
&lt;p&gt;An editorial issue: I think it's becoming increasingly difficult to get away with overloading the word &lt;code&gt;ItemType&lt;/code&gt; to mean both the abstract concept of an item type, and the specific BNF construct used to define it. Same for &lt;code&gt;SequenceType&lt;/code&gt;. I think we should probably move to having a defined term "item type" and a BNF construct such as &lt;code&gt;ItemTypeDesignator&lt;/code&gt; to represent the two separate meanings.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 026 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 14 Mar 2023 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/03-14</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-03-14</guid>
</item><item>
   <title>Pull request #396 created</title>
   <pubDate>Mon, 13 Mar 2023 18:04:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/396</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-396</guid>
   <description>&lt;div&gt;&lt;p&gt;333: Deep-equal, no failure when comparing functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Refines the spec of fn:deep-equal so it no longer fails when comparing function items, rather it returns a result which in general is implementation-dependent, though it must be false unless the functions are provably equivalent.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #395 created</title>
   <pubDate>Mon, 13 Mar 2023 11:50:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/395</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-395</guid>
   <description>&lt;div&gt;&lt;p&gt;Make the (non-)hierarchical nature of URIs explicit&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;fn:parse-uri&lt;/code&gt; function will parse hierarchical or non-hierarchical URIs, however, the parse cannot be reversed if the &lt;code&gt;fn:build-uri&lt;/code&gt; function doesn't know whether the scheme is hierarchical. Consider &lt;code&gt;fn:parse-uri("querty:abc")&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map {
  "path":"abc",
  "scheme":"querty",
  "path-segments":["abc"],
  "uri":"querty:abc"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When &lt;code&gt;fn:build-uri&lt;/code&gt; parses that map, it produces: &lt;code&gt;querty://abc&lt;/code&gt; because the scheme is not known to be non-hierarchical.&lt;/p&gt;
&lt;p&gt;This PR changes &lt;code&gt;fn:parse-uri&lt;/code&gt; so that it records whether or not the URI was hierarchical and &lt;code&gt;fn:build-uri&lt;/code&gt; to use that information.&lt;/p&gt;
&lt;p&gt;It's possible that we could finesse this by setting the &lt;code&gt;authority&lt;/code&gt; to the empty string for hierarchical URIs, but it seems clearer to be explicit.&lt;/p&gt;
&lt;p&gt;This PR also fixes a bug. Previously, if the &lt;code&gt;scheme&lt;/code&gt; was not present when building a URI, the URI began with &lt;code&gt;//&lt;/code&gt;. That's an error. If the scheme isn't present, there should be no &lt;em&gt;scheme separator&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #320 closed</title>
   <pubDate>Mon, 13 Mar 2023 11:07:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/320</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-320</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 98 - add options parameter to fn:deep-equal&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #394 created</title>
   <pubDate>Mon, 13 Mar 2023 10:08:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/394</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-394</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor correction to fn:parse-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;fn:parse-uri()&lt;/code&gt; function recognizes "URIs" of the form &lt;code&gt;c:/path/to/thing&lt;/code&gt; as implicitly being &lt;code&gt;file:&lt;/code&gt; URIs. This small change adds a leading "/" to make the fact that it is a path explicit.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #25 closed</title>
   <pubDate>Mon, 13 Mar 2023 09:54:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/25</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-25</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] `%variadic("sequence")` does not allow specifying some argument values in the variadic sequence, and in one case even not the variadic sequence itself&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #26 closed</title>
   <pubDate>Mon, 13 Mar 2023 09:52:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/26</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-26</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath]A value in the last row (for "sequence-variadic" functions) of the table "Number of Arguments allowed in a Function Call" is incorrect&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #54 closed</title>
   <pubDate>Mon, 13 Mar 2023 09:51:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/54</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-54</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Keyword arguments don't work with all parameters/keys in static functions.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #47 closed</title>
   <pubDate>Mon, 13 Mar 2023 09:48:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/47</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-47</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Allow argument placeholders on keyword arguments&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 026 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 13 Mar 2023 08:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/03-14</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-03-14</guid>
</item><item>
   <title>Issue #386 closed</title>
   <pubDate>Mon, 13 Mar 2023 09:26:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/386</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-386</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-025-05 (markup typo)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #393 created</title>
   <pubDate>Sun, 12 Mar 2023 22:07:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/393</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-393</guid>
   <description>&lt;div&gt;&lt;p&gt;Clarify explanations of functions/function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is purely editorial in the sense that it does not attempt to make any changes that would affect an implementation. It's intended to clear up ambiguity and lack of clarity in the description of operations on functions, in particular the way that a function item captures static and dynamic context. It addresses issues #239 and issue #392.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #392 created</title>
   <pubDate>Sun, 12 Mar 2023 18:56:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/392</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-392</guid>
   <description>&lt;div&gt;&lt;p&gt;Partial function application: Placeholders with keywords&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's clear that the following is allowed:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format-date(current-date(), '[Y]-[M]-[D]', place:=?, language:=?, calendar:="AD")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The resulting function item takes two arguments (place and language) but in what order? Is it the order of parameters in the original function definition, or the order in which they appear in the partial function application?&lt;/p&gt;
&lt;p&gt;I think it should be the latter, but this needs to be made explicit in the spec.&lt;/p&gt;
&lt;p&gt;Note that this doesn't only apply to optional parameters as in the above example, it applies equally, for example to&lt;/p&gt;
&lt;p&gt;&lt;code&gt;starts-with(substring=?, value=?)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;While we're on the subject, we should also ask whether&lt;/p&gt;
&lt;p&gt;&lt;code&gt;concat(value83 := ?)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is legal, and if so, what it means.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #391 created</title>
   <pubDate>Sat, 11 Mar 2023 05:25:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/391</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-391</guid>
   <description>&lt;div&gt;&lt;p&gt;addressed typographical errors; adjusted Unicode character discussion…&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;… for internal local consistency, clarity&lt;/p&gt;
&lt;p&gt;This being my first PR, I opted to include beyond the typos I noted in #289 another small block of hopefully uncontroversial edits as a test balloon.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #278 closed</title>
   <pubDate>Fri, 10 Mar 2023 18:04:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/278</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-278</guid>
   <description>&lt;div&gt;&lt;p&gt;array bound checking&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #289 closed</title>
   <pubDate>Fri, 10 Mar 2023 18:03:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/289</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-289</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal to add fallback behaviour to map:get and array:get&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #390 created</title>
   <pubDate>Fri, 10 Mar 2023 17:59:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/390</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-390</guid>
   <description>&lt;div&gt;&lt;p&gt;Should parsing and building URIs attempt to special case Windows URIs for UNC names?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Depending on the platform and language APIs involved, we see &lt;code&gt;file:&lt;/code&gt; URIs encoded in a variety of different ways. It doesn't help that there's no official RFC for &lt;code&gt;file:&lt;/code&gt; URIs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file:/path/part&lt;/code&gt; is a &lt;code&gt;file:&lt;/code&gt; URI with no host and a path of &lt;code&gt;/path/part&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file:///path.part&lt;/code&gt; is a &lt;code&gt;file:&lt;/code&gt; URI with an explicitly empty host and a path of &lt;code&gt;/path/part&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file://path/part&lt;/code&gt; is a &lt;code&gt;file:&lt;/code&gt; URI with an authority of &lt;code&gt;path&lt;/code&gt; and a path of &lt;code&gt;/part&lt;/code&gt;. I think one common way to interpret this is as if it was &lt;code&gt;file:/part&lt;/code&gt;. That is, in &lt;code&gt;file:&lt;/code&gt; URIs, although a different host is possible, it's often just ignored.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c:\path\part&lt;/code&gt; is most usefully interpreted as &lt;code&gt;file:/c:/path/part&lt;/code&gt;, a &lt;code&gt;file:&lt;/code&gt; URI with no host and a path of &lt;code&gt;/c:/path/part&lt;/code&gt;. These are only going to be useful on a Windows system, so it isn't a problem to treat them the same way on all platforms. (Aside: I don't actually know if the path part should be &lt;code&gt;c:/path/part&lt;/code&gt; instead, but it's currently got the leading slash in &lt;code&gt;fn:parse-uri()&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then there's this: &lt;code&gt;file:////name/path/part&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One interpretation is, "look, we accept &lt;code&gt;file:/&lt;/code&gt; and &lt;code&gt;file:///&lt;/code&gt; so let's just accept &lt;code&gt;file://&lt;/code&gt; and &lt;code&gt;file://///////&lt;/code&gt;, etc. as the same." And I think that's generally right, with the single special exception of &lt;code&gt;file:////&lt;/code&gt;. The problem is that on Windows, this is a very common way to encode the URI for a UNC path, that is: &lt;code&gt;\\name\path\part&lt;/code&gt; which is a Windows UNC path for &lt;code&gt;\path\part&lt;/code&gt; on a host named &lt;code&gt;name&lt;/code&gt; (via whatever networking protocol backs UNC).&lt;/p&gt;
&lt;p&gt;You'd think that this should be &lt;code&gt;file://name/path/part&lt;/code&gt;, but I think because browsers and maybe other tools just discard the authority part of a &lt;code&gt;file:&lt;/code&gt; URI (or maybe because these are &lt;em&gt;paths&lt;/em&gt; in some Windows sense?), that's not how they're encoded.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aside: Yes, I'm sure you also see &lt;code&gt;file:\\\\name\path\part&lt;/code&gt; and &lt;code&gt;file:c:\path\part&lt;/code&gt; and other forms as well. Those are out of scope, they're simply, flatly, completely wrong. You can't use &lt;code&gt;\&lt;/code&gt; as a delimiter in a URI. RFC 3986 is authoritative on this point. Step one of dealing with random strings we think should be URIs is replacing all &lt;code&gt;\&lt;/code&gt; with &lt;code&gt;/&lt;/code&gt; because RFC 3986.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's problematic to deal with &lt;code&gt;file:////&lt;/code&gt; as a special case, but it's also problematic to leave out support for a common pattern on a widely deployed operating system.&lt;/p&gt;
&lt;p&gt;Recognizing four slashes after &lt;code&gt;file:&lt;/code&gt; and treating that specially isn't hard. The hard part is how do we encode this in the map that &lt;code&gt;fn:parse-uri&lt;/code&gt; produces bearing in mind that the result should round-trip if you push it back through &lt;code&gt;fn:build-uri&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Consider &lt;code&gt;file:////uncname/path/part&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Today, that is parsed as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map {
  "uri": "file:////uncname/path/part",
  "scheme": "file",
  "authority": "uncname",
  "host": "uncname",
  "path": "/path/to/file",
  "path-segments": array { "", "path", "to", "file" }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and that doesn’t round trip. If you feed that to &lt;code&gt;fn:build-uri&lt;/code&gt;, you get &lt;code&gt;file://uncname/path/part&lt;/code&gt; and that absolutely doesn’t mean the same thing on a Windows machine.&lt;/p&gt;
&lt;p&gt;We could encode the slashes in the &lt;code&gt;authority&lt;/code&gt; in which case we also have to encode them in the &lt;code&gt;host&lt;/code&gt; because in the presence of &lt;code&gt;host&lt;/code&gt;, the &lt;code&gt;authority&lt;/code&gt; isn’t used to by &lt;code&gt;fn:build-uri()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map {
  "uri": "file:////uncname/path/part",
  "scheme": "file",
  "authority": "////uncname",
  "host": "////uncname",
  "path": "/path/to/file",
  "path-segments": array { "", "path", "to", "file" }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It kind of works, but it’s really ugly and it means we have a host value that is a complete kludge. It doesn’t match the RFC rules for hostnames at all.&lt;/p&gt;
&lt;p&gt;The other option that occurs to me is to add a “unc-path” property to the map:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map {
  "unc-path": true(),
  "uri": "file:////uncname/path/part",
  "scheme": "file",
  "authority": "uncname",
  "host": "uncname",
  "path": "/path/to/file",
  "path-segments": array { "", "path", "to", "file" }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That works but it introduces all sorts of possibilities for incoherent data, such as an &lt;code&gt;https:&lt;/code&gt; URI with a &lt;code&gt;unc-path&lt;/code&gt; flag set to &lt;code&gt;true()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What’s the right answer?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ignore the UNC path special case, it’s the users problem to deal with them.&lt;/li&gt;
&lt;li&gt;Recognize them, encode the details in the &lt;code&gt;authority&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Recognize them, use a special property like &lt;code&gt;unc-path&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Recognize them, and do this other much better idea I have: ________________&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #389 created</title>
   <pubDate>Thu, 9 Mar 2023 09:31:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/389</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-389</guid>
   <description>&lt;div&gt;&lt;p&gt;The fn:build-uri function needs to perform URI encoding for path and query segments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;fn:parse-uri&lt;/code&gt; function describes decoding, but the &lt;code&gt;fn:build-uri&lt;/code&gt; function fails to encode.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #388 closed</title>
   <pubDate>Wed, 8 Mar 2023 16:35:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/388</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-388</guid>
   <description>&lt;div&gt;&lt;p&gt;Update the example background color in serialization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #388 created</title>
   <pubDate>Wed, 8 Mar 2023 16:25:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/388</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-388</guid>
   <description>&lt;div&gt;&lt;p&gt;Update the example background color in serialization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR completes my action to fix the dark blue background in examples in the serialization spec. I've made them the same as the examples in the XSLT spec which seem to have been satisfactory.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #328 closed</title>
   <pubDate>Tue, 7 Mar 2023 21:08:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/328</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-328</guid>
   <description>&lt;div&gt;&lt;p&gt;Switch Cases: Lift single-item restriction on operands&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #28 closed</title>
   <pubDate>Tue, 7 Mar 2023 21:05:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/28</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-28</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Support multiple clauses in ForExpr and LetExpr.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #387 created</title>
   <pubDate>Tue, 7 Mar 2023 21:03:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/387</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-387</guid>
   <description>&lt;div&gt;&lt;p&gt;Add compatibility notes for fn:namespace-uri-for-prefix&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Action QT4CG-024-01&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #386 created</title>
   <pubDate>Tue, 7 Mar 2023 20:32:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/386</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-386</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-025-05 (markup typo)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #385 created</title>
   <pubDate>Tue, 7 Mar 2023 20:15:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/385</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-385</guid>
   <description>&lt;div&gt;&lt;p&gt;Actions QT4CG-025-07 / -08&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Improves termdef markup; adds error code; updates change history appendix.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #344 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:22:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/344</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-344</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 22: allow "for"/"let" keyword to be repeated in XPath&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #307 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:20:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/307</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-307</guid>
   <description>&lt;div&gt;&lt;p&gt;Parsing and building URIs comments and queries&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #347 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:20:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/347</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-347</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to clarify fn:parse-uri and fn:build-uri&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #355 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:19:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/355</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-355</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-022-02 - add to imp-def-feature appendix&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #370 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:19:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/370</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-370</guid>
   <description>&lt;div&gt;&lt;p&gt;Bump XSLT version&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #345 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:18:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/345</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-345</guid>
   <description>&lt;div&gt;&lt;p&gt;Missing rule for matching atomic values against atomic types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #363 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:18:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/363</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-363</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #345 - missing rules for type matching&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #364 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:18:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/364</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-364</guid>
   <description>&lt;div&gt;&lt;p&gt;328 Generalize switch expressions in XQuery&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #371 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:17:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/371</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-371</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 370: forwards and backwards compatibility for 4.0&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 025 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 7 Mar 2023 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/03-07</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-03-07</guid>
</item><item>
   <title>Issue #147 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:13:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/147</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-147</guid>
   <description>&lt;div&gt;&lt;p&gt;Terse syntax for map entries&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #60 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:13:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/60</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-60</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:namespace-uri-for-prefix no longer supports passing a prefix by string&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #45 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:13:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/45</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-45</guid>
   <description>&lt;div&gt;&lt;p&gt;Second parameter of fn:sum must be neutral element for +&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #384 created</title>
   <pubDate>Mon, 6 Mar 2023 16:24:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/384</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-384</guid>
   <description>&lt;div&gt;&lt;p&gt;Definition of "effective value" in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The term "effective value" is defined in XSLT with a rather narrow definition in the context of attribute value templates. The term is used throughout the spec (sometimes hyperlinked, sometimes not) in a much more general sense, for example the "effective value" of an attribute is the explicit value given to the attribute, or the value after basic normalization such as whitespace stripping, or the default value if the attribute is not present.&lt;/p&gt;
&lt;p&gt;This affects the determination of the correct result for test merge-021, where it is a little ambiguous whether two &lt;code&gt;xsl:merge-source/@order&lt;/code&gt; attribute have the same "effective value" given that one is defaulted.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 025 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sun, 5 Mar 2023 11:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/03-07</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-03-07</guid>
</item><item>
   <title>Issue #383 created</title>
   <pubDate>Tue, 28 Feb 2023 17:21:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/383</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-383</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-equal: Order of child elements (unordered-elements)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;At &lt;a href="https://qt4cg.org/meeting/minutes/2023/02-28.html"&gt;meeting 024&lt;/a&gt; where PR https://github.com/qt4cg/qtspecs/pull/320 was accepted, there remained an open question of how best to specify that in some circumstances the comparisons should be made without regard to the order of (some) children.&lt;/p&gt;
&lt;p&gt;Can the name of the option be improved?&lt;/p&gt;
&lt;p&gt;Should the option support wildcard names?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #382 created</title>
   <pubDate>Tue, 28 Feb 2023 17:19:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/382</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-382</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve whitespace handling in deep-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;At &lt;a href="https://qt4cg.org/meeting/minutes/2023/02-28.html"&gt;meeting 024&lt;/a&gt; where PR https://github.com/qt4cg/qtspecs/pull/320 was accepted, there remained an open question of how to deal with whitespace.&lt;/p&gt;
&lt;p&gt;The current options can be seen as having somewhat overlapping domains. Can this be improved?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #381 created</title>
   <pubDate>Tue, 28 Feb 2023 17:18:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/381</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-381</guid>
   <description>&lt;div&gt;&lt;p&gt;Deep-equal comparisons without errors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;At &lt;a href="https://qt4cg.org/meeting/minutes/2023/02-28.html"&gt;meeting 024&lt;/a&gt; where PR #320 was accepted, there remained an open question of how to deal with errors.&lt;/p&gt;
&lt;p&gt;On the one hand, in order for &lt;code&gt;fn:deep-equal&lt;/code&gt; to be most easily used as a comparison function in the many contexts where a comparison function is required, it would be best if it simply returned &lt;code&gt;false()&lt;/code&gt; rather than raising an error when incomparably items are encountered.&lt;/p&gt;
&lt;p&gt;On the other hand, making "return false()" the default will mean that it is possible to construct items that are not equal to themselves, which will certainly violate the expectations of some users.&lt;/p&gt;
&lt;p&gt;This conflict needs to be resolved somehow.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 024 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 28 Feb 2023 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/02-28</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-02-28</guid>
</item><item>
   <title>Issue #377 closed</title>
   <pubDate>Tue, 28 Feb 2023 14:49:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/377</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-377</guid>
   <description>&lt;div&gt;&lt;p&gt;Published XQuery 4.0 spec renders XML predefined entities instead of literal characters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #380 closed</title>
   <pubDate>Tue, 28 Feb 2023 14:49:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/380</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-380</guid>
   <description>&lt;div&gt;&lt;p&gt;Removed CDATA sections around markup&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #380 created</title>
   <pubDate>Tue, 28 Feb 2023 14:23:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/380</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-380</guid>
   <description>&lt;div&gt;&lt;p&gt;Removed CDATA sections around markup&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #377&lt;/p&gt;
&lt;p&gt;I took a minimal approach here. I've removed CDATA sections where the section contained an &lt;code&gt;&amp;amp;&lt;/code&gt; but not a &lt;code&gt;&amp;lt;&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the section contains &lt;code&gt;&amp;lt;&lt;/code&gt;, then it's  (presumably) necessary to escape the markup&lt;/li&gt;
&lt;li&gt;If the section &lt;em&gt;does not&lt;/em&gt; contain an &lt;code&gt;&amp;amp;&lt;/code&gt;, then it's irrelevant. But not removing it limits the number of places changed by the script&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #379 created</title>
   <pubDate>Tue, 28 Feb 2023 12:09:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/379</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-379</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespace handling in parse-html&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The HTML5/"Living Standard" specification has two modes when it comes to handling namespaces:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For XHTML content the document is parsed as XML with full namespace support.&lt;/li&gt;
&lt;li&gt;For HTML content, it has pseudo-namespace support.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, the HTML parsing algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;places html, svg, and mathml elements in their corresponding namespaces.&lt;/li&gt;
&lt;li&gt;allows certain element/attribute tag names (e.g. &lt;code&gt;xlink:href&lt;/code&gt;) to be parsed as QNames.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From the XSLT/XQuery perspective, this affects the data model. Specifically, how to model and specify the node-names and the set of namespaces associated with a given element node.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #378 created</title>
   <pubDate>Tue, 28 Feb 2023 08:55:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/378</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-378</guid>
   <description>&lt;div&gt;&lt;p&gt;Update the localName and unparsed entity reference notes for parse-html&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR applies the following changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] QT4CG-021-03: RD to change must to will in DOM notes about lowercase&lt;/li&gt;
&lt;li&gt;[x] QT4CG-021-04: RD to revise and move the note about unrecognized entities&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #377 created</title>
   <pubDate>Tue, 28 Feb 2023 07:22:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/377</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-377</guid>
   <description>&lt;div&gt;&lt;p&gt;Published XQuery 4.0 spec renders XML predefined entities instead of literal characters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When rendered in the browser, XML examples in the &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html"&gt;XQuery 4.0 specification&lt;/a&gt; show, for example, '&lt;code&gt;&amp;amp;lt;&lt;/code&gt;' instead of '&lt;code&gt;&amp;lt;&lt;/code&gt;':&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/2734234/221782371-1d119a80-72b3-4ede-b9c9-0b2b464533c0.png" alt="Screenshot 2023-02-28 at 07 21 49"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #376 created</title>
   <pubDate>Mon, 27 Feb 2023 17:16:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/376</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-376</guid>
   <description>&lt;div&gt;&lt;p&gt;add documentation prefix attribute to xsl:stylesheet&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Although the addition of xsl:note is very welcome, i had been hoping for something like the xsl:stylesheet attribute extension-element-prefixes, e.g. ignored-element-prefixes.&lt;/p&gt;
&lt;p&gt;The specification would be something like,
Elements and attributes associated with an ignored element prefix are not treated as direct constructors, and are removed when the stylesheet is compiled. For such an element, this is equivalent to having an xsl:use-when attribute with value false on the element; for attributes, they are simply discarded along with their value.&lt;/p&gt;
&lt;p&gt;It is not an error for a prefix to be listed both as an ignored element prefix and as an extension element prefix; the result is implementation dependent in this case, but MUST not result in neither an extension being invoked nor the element or attribute being ignored.&lt;/p&gt;
&lt;p&gt;Ignored elements may appear anywhere in the input tree, and ignored attributes may appear on any element.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="city/park" css:module="main"&amp;gt;
  &amp;lt;css:rule&amp;gt;
    color: green;
    trees: tall;
  &amp;lt;/xsl:rule&amp;gt;
  &amp;lt;div class="park"&amp;gt;
    &amp;lt;xsl:apply-templates /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #375 created</title>
   <pubDate>Mon, 27 Feb 2023 17:03:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/375</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-375</guid>
   <description>&lt;div&gt;&lt;p&gt;256: Context for default parameter values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is an attempt to resolve issue #256 by providing details of the static and dynamic context for evaluating default parameter values, including providing a mechanism for accessing parts of the static and dynamic context of the caller.&lt;/p&gt;
&lt;p&gt;If this PR is accepted we will need to follow up with (a) similar changes to XSLT, and (b) use of the new notation in the signatures of standard functions and operators that have context-dependent default values for parameters.&lt;/p&gt;
&lt;p&gt;Note that the PR also breaks up the rather unwieldy sections for Function Declarations and Variable Declarations into more manageable subsections, which has involved some re-ordering; some of the change marking may therefore be spurious.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #374 created</title>
   <pubDate>Mon, 27 Feb 2023 10:11:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/374</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-374</guid>
   <description>&lt;div&gt;&lt;p&gt;Can't view the XSD for XSLT in the browser&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If you attempt to open &lt;code&gt;https://qt4cg.org/specifications/xslt-40/schema-for-xslt40.xsd&lt;/code&gt; in the browser (in Firefox), you'll get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error loading stylesheet: An unknown error has occurred (805303f4)
http://www.w3.org/2008/09/xsd.xsl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a Chrome-derived browser I get a blank screen on which even the context menu doesn't work. Digging about in the inspect window leads me to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unsafe attempt to load URL http://www.w3.org/2008/09/xsd.xsl from frame with URL
https://qt4cg.org/specifications/xslt-40/schema-for-xslt40.xsd. Domains, protocols and ports must match.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I conclude that the problem is trying to load the XSL for XSD from a different domain. Boo. I guess we should copy those stylesheets to &lt;code&gt;qt4cg.org&lt;/code&gt;, or remove the stylesheet PI, or ignore the whole thing on the assumption that we'll eventually publish these specifications in some W3C location and the probem will go away. Maybe.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #373 created</title>
   <pubDate>Mon, 27 Feb 2023 09:29:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/373</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-373</guid>
   <description>&lt;div&gt;&lt;p&gt;apparent copy/paste error in annotation documentation of simple type yes-or-no-or-maybe&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XSD 1.1 schema for XSLT 3 and the one for XSLT 4 (at https://qt4cg.org/specifications/xslt-40/schema-for-xslt40.xsd) has an error in the annotation/documentation section of the simple type &lt;code&gt;yes-or-no-or-maybe&lt;/code&gt; as it there says &lt;code&gt;One of the values "yes" or "no" or "omit".&lt;/code&gt;. I think that should be &lt;code&gt;One of the values "yes" or "no" or "maybe"&lt;/code&gt;, the error probably exists as someone copied the text from the &lt;code&gt;yes-or-no-or-omit&lt;/code&gt; type declaration and forgot to adapt the description.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #372 created</title>
   <pubDate>Sun, 26 Feb 2023 23:06:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/372</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-372</guid>
   <description>&lt;div&gt;&lt;p&gt;Separate default namespace for elements from the default namespace for types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently the static context provides a "default namespace for elements and types". It's not at all clear why these should be the same. For types, the vast majority of QNames representing types are in the XML Schema namespace, which is never used for elements.&lt;/p&gt;
&lt;p&gt;In the current 4.0 drafts the two default namespaces are separated; but this has not been reviewed or agreed by the CG. This issue is raised for discussion of the change, and I will also review the design to see whether it still make sense.&lt;/p&gt;
&lt;p&gt;Some observations on the current text for XQuery:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In section 2.2.1 (static context) it would be good to give a bit more detail (if only as a forwards reference) about the circumstances in which the default element namespace and the default type namespace are used.&lt;/li&gt;
&lt;li&gt;In 3.4 Sequence Types the sentence "[Lexical QNames]appearing in a [sequence type] have their prefixes expanded to namespace URIs by means of the [statically known namespaces] and (where applicable) the [default element namespace] or [default type namespace]" is rather inelegantly worded. If there is a prefix, then the statically known namespaces are used; if there is none, then the relevant default namespace is used, and it would be nice to explain more clearly which one applies.&lt;/li&gt;
&lt;li&gt;In 3.6 Item Types, we need to be clearer about references to named/declared item types, and about how the names are resolved. Do we really want these names to be in the same symbol space as atomic types? Perhaps we should have a rule that Item Types (like functions) must be in a namespace and this must not be the same as an imported schema namespace.&lt;/li&gt;
&lt;li&gt;In 5.14, Default namespace declaration, there seems to be duplication between the two paragraphs starting "for backwards compatibility reasons"&lt;/li&gt;
&lt;li&gt;Appendix C.1 (much though I dislike it) should say something about the initialisation of the default namespaces for elements and for types.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that issue #65 talks of the need for different default namespaces for input and output elements. I think that's a separate issue.&lt;/p&gt;
&lt;p&gt;Observations on the current text for XSLT:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In 5.1.2.1 the paragraph "The [xsl:]xpath-default-namespace attribute must be in the [XSLT namespace] if and only if its parent element is not in the XSLT namespace needs to be generalised to [xsl:]default-element-namespace. In fact, this rule should move to the parent section 5.1.2, which needs an introduction.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #371 created</title>
   <pubDate>Fri, 24 Feb 2023 16:59:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/371</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-371</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 370: forwards and backwards compatibility for 4.0&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is essentially editorial; it updates the XSLT rules for forwards and backwards compatible processing to acknowledge the fact that the current version is now 4.0.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #370 created</title>
   <pubDate>Fri, 24 Feb 2023 16:18:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/370</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-370</guid>
   <description>&lt;div&gt;&lt;p&gt;Bump XSLT version&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There are various places where the XSLT spec refers to XSLT 3.0 where it should now refer to 4.0.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 024 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 24 Feb 2023 08:25:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/02-28</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-02-28</guid>
</item><item>
   <title>Issue #19 closed</title>
   <pubDate>Wed, 22 Feb 2023 21:34:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/19</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-19</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt] annotation-prefixes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #84 closed</title>
   <pubDate>Wed, 22 Feb 2023 21:32:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/84</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-84</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal : allow ignorable &amp;lt;xsl:div&amp;gt; wrapper for documentation or organize the code&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #189 closed</title>
   <pubDate>Wed, 22 Feb 2023 21:29:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/189</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-189</guid>
   <description>&lt;div&gt;&lt;p&gt;Adopt the coercion rules for variables in XQuery&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #352 closed</title>
   <pubDate>Wed, 22 Feb 2023 21:24:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/352</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-352</guid>
   <description>&lt;div&gt;&lt;p&gt;The @array attribute of xsl:for-each-group is no more&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #354 closed</title>
   <pubDate>Wed, 22 Feb 2023 10:08:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/354</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-354</guid>
   <description>&lt;div&gt;&lt;p&gt;Combine multiple signatures of XSLT functions to use defaults&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #353 closed</title>
   <pubDate>Wed, 22 Feb 2023 10:07:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/353</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-353</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue109 xsl note&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #362 closed</title>
   <pubDate>Wed, 22 Feb 2023 10:06:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/362</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-362</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop obsolete note in XSLT regarding for-each-group/@array&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 023 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Wed, 22 Feb 2023 09:53:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/02-21</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-02-21</guid>
</item><item>
   <title>Issue #369 created</title>
   <pubDate>Tue, 21 Feb 2023 17:44:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/369</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-369</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespaces for Functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;What problem are we trying to solve? Essentially, I think "namespace clutter".&lt;/p&gt;
&lt;p&gt;Namespace clutter manifests itself in several different ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firstly, declaration clutter in source code. Here's the start of a module in an XSLT Stylesheet of medium complexity:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:stylesheet 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    exclude-result-prefixes="#all"
    version="3.0" 
    xmlns="http://ns.saxonica.com/xslt/export" 
    xmlns:doc="http://www.saxonica.com/ns/documentation"
    xmlns:map="http://www.w3.org/2005/xpath-functions/map" 
    xmlns:ex="http://ns.saxonica.com/xslt/export" 
    xmlns:f="MyFunctions" 
    xmlns:t="MyTypes"
    expand-text="true"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eight namespace declarations here, of which 3 are concerned with functions; and  Wit can get a lot worse than that.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Secondly, namespace clutter in the static and dynamic context. The namespace bindings shown above don't disappear when the code is compiled; even with exclude-result-prefixes="yes", they have to hang around at run-time just in case someone tries to resolve a QName dynamically. Preserving the namespace context in the expression tree through optimization rewrites is a significant cost that has no user benefit; very rarely are they actually going to use the namespace context at run time.&lt;/li&gt;
&lt;li&gt;Thirdly, prefix clutter in the executable code. Writing &lt;code&gt;math:cos(math:cos($x))&lt;/code&gt; is just so clumsy compared with &lt;code&gt;cos(cos($x))&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think there are a number of things we can do to reduce this.&lt;/p&gt;
&lt;p&gt;First, separate out the namespace context for static resolution of function names as a separate part of the static context, used only for this purpose. Ensure that there is no functionality that depends on knowing this part of the static context at run time, so it can be discarded by the compiler as soon as function names are resolved. Then provide source syntax for binding function prefixes to function namespaces in XSLT and XQuery to populate this part of the static context; there is no reason this has to be done using XML namespace declarations. There is also no reason for having different bindings in force in different parts of a single module. And once we've separated these declarations from XML namespace declarations, there's no reason why we can't provide default bindings. We could also allow bindings to have cross-module scope to reduce duplicated code. Note: the xsl:function-library proposal in the current XSLT 4.0 draft tries to achieve some of these things.&lt;/p&gt;
&lt;p&gt;Second, allow functions to be referenced by local name alone where the reference is unambiguous; and perhaps provide some aliasing mechanisms to make more existing names unambiguous.&lt;/p&gt;
&lt;p&gt;We've explored a third idea, which is to introduce some kind of polymorphism where function names have local scope and are distinguished by the types of objects to which they are applied. I think that given our type system, this is very hard to achieve and I haven't seen any very satisfactory proposals. We also need to remember that there are considerable costs if we start resolving function names dynamically at run time. I wouldn't rule out making progress in this direction, but I'm not optimistic of coming up with a workable solution. There might be some simple things we could do, like having a single function &lt;code&gt;size()&lt;/code&gt; that performs the work of both &lt;code&gt;map:size()&lt;/code&gt; and &lt;code&gt;array:size()&lt;/code&gt; depending on the argument.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #318 closed</title>
   <pubDate>Tue, 21 Feb 2023 17:02:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/318</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-318</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization HTML/XHTML output methods: meta elements and the charset attribute&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #368 created</title>
   <pubDate>Tue, 21 Feb 2023 10:34:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/368</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-368</guid>
   <description>&lt;div&gt;&lt;p&gt;129: Context item generalized to context value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a first cut proposal to generalize the context item to a context value, allowing (for example) array predicates.&lt;/p&gt;
&lt;p&gt;The proposal covers XPath and XQuery only at this stage; it doesn't address the consequences for XSLT.&lt;/p&gt;
&lt;p&gt;Careful review requested!&lt;/p&gt;
&lt;p&gt;Addresses issue #129 and issue #367.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #367 created</title>
   <pubDate>Tue, 21 Feb 2023 00:06:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/367</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-367</guid>
   <description>&lt;div&gt;&lt;p&gt;Focus for RHS of thin arrow expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We define &lt;code&gt;A -&amp;gt; F(B, C)&lt;/code&gt; as being equivalent to &lt;code&gt;A ! F(., B, C)&lt;/code&gt; which means that B and C are evaluated with a focus based on the current item in A, not with the outer focus. This is different from the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator. For example if the $E is an element E, with several children called F, then&lt;/p&gt;
&lt;p&gt;&lt;code&gt;namespace-uri(.) -&amp;gt; fn:QName(name())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;has a different effect from&lt;/p&gt;
&lt;p&gt;&lt;code&gt;namespace-uri(.) =&amp;gt; fn:QName(name())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;whereas it might reasonably be expected that in the case where the LHS produces a single value, the two operators are equivalent. We can't change the meaning of &lt;code&gt;=&amp;gt;&lt;/code&gt; because it's defined in 3.1. So should we change the meaning of &lt;code&gt;-&amp;gt;&lt;/code&gt; to fall into line?&lt;/p&gt;
&lt;p&gt;We could do this easily enough by defining &lt;code&gt;A -&amp;gt; F(B, C)&lt;/code&gt; as equivalent to &lt;code&gt;for $a in A return F($a, B, C)&lt;/code&gt;.  I think that as well as being more consistent with &lt;code&gt;=&amp;gt;&lt;/code&gt;, the result is probably more intuitive. (We could also define it as equivalent to &lt;code&gt;let $f := F(?, B, C) return A ! $f(.)&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;For the expression &lt;code&gt;A -&amp;gt; {B}&lt;/code&gt;, and for the proposed &lt;code&gt;A =&amp;gt; {B}&lt;/code&gt;, I don't think we have any choice other than evaluating B with an inner focus based on A. But at least we can do it consistently for both operators.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #366 created</title>
   <pubDate>Mon, 20 Feb 2023 18:43:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/366</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-366</guid>
   <description>&lt;div&gt;&lt;p&gt;Support xsl:use-package with xsl:package-location&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Unless I am misreading the specs (which I do commonly enough), there is currently no way for an XSLT writer using &lt;code&gt;xsl:use-package&lt;/code&gt; to indicate where the package is to be found, except outside the XSLT environment. I propose to allow &lt;code&gt;xsl:use-package&lt;/code&gt; to contain zero or more &lt;code&gt;xsl:package-location&lt;/code&gt; children. I propose the addition of an element and not an attribute, because a package may be in multiple locations, and need nuance, as noted below.&lt;/p&gt;
&lt;p&gt;Attributes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@href&lt;/code&gt;, on the model of &lt;code&gt;xsl:import&lt;/code&gt; and &lt;code&gt;xsl:include&lt;/code&gt;, would specify by relative or absolute URI where the package is.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@priority&lt;/code&gt; (default 0) would provide a mechanism to indicate whether the specified &lt;code&gt;xsl:package-location&lt;/code&gt; should override (value greater than 0), or simply provide a fallback for (less than or equal to 0), the preconfigured place the package should be retrieved from.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@use-when&lt;/code&gt; would allow a developer to manage different versions of a package for different cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other attributes given to &lt;code&gt;xsl:package-location&lt;/code&gt; would need discussion.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #365 created</title>
   <pubDate>Mon, 20 Feb 2023 16:41:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/365</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-365</guid>
   <description>&lt;div&gt;&lt;p&gt;switch, typeswitch: Optional braces&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The indentation of switch expressions is often a mess. Now that we allow curly braces for &lt;code&gt;if&lt;/code&gt;, it would be nice to also allow optional braces for &lt;code&gt;switch&lt;/code&gt; and &lt;code&gt;typeswitch&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;typeswitch($item) {
  case xs:numeric return 'number'
  default return '...'
},
switch($item) {
  case 0 to 9 return 'single digit'
  default return '...'
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The current syntax is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;typeswitch($item)
  case xs:numeric return 'number'
  default return '...',

switch($item)
  case 0 to 9 return 'single digit'
  default return '...'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #364 created</title>
   <pubDate>Mon, 20 Feb 2023 15:43:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/364</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-364</guid>
   <description>&lt;div&gt;&lt;p&gt;328 Generalize switch expressions in XQuery&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #337 closed</title>
   <pubDate>Mon, 20 Feb 2023 14:38:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/337</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-337</guid>
   <description>&lt;div&gt;&lt;p&gt;Local union and enum types: and the definition of generalised atomic types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #363 created</title>
   <pubDate>Mon, 20 Feb 2023 13:07:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/363</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-363</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #345 - missing rules for type matching&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #362 created</title>
   <pubDate>Mon, 20 Feb 2023 12:12:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/362</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-362</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop obsolete note in XSLT regarding for-each-group/@array&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fixes issue #352&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #361 created</title>
   <pubDate>Mon, 20 Feb 2023 11:38:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/361</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-361</guid>
   <description>&lt;div&gt;&lt;p&gt;Named arguments: $input vs. $value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Great effort has been made in unifying the parameter names of the XQFO standard; thanks for that!&lt;/p&gt;
&lt;p&gt;I believe to remember that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$value&lt;/code&gt;, &lt;code&gt;$values&lt;/code&gt;, &lt;code&gt;$value1&lt;/code&gt;, etc. is used for atomic/atomized arguments, whereas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$input&lt;/code&gt;, &lt;code&gt;$input1&lt;/code&gt;, etc. is used for input, mostly of type &lt;code&gt;item()&lt;/code&gt;, that is processed unchanged.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$uri&lt;/code&gt; is used for arguments that could have been defined as items of type &lt;code&gt;xs:anyURI&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I believe the following argument names need to be double-checked (if not, It may be that I haven’t fully grasped how the naming rules are supposed to work):&lt;/p&gt;
&lt;p&gt;Function | Currently | Presumably | Justification
--- | --- | --- | ---
&lt;code&gt;array:slice&lt;/code&gt; | &lt;code&gt;$input&lt;/code&gt; | &lt;code&gt;$array&lt;/code&gt; | Alignment with &lt;code&gt;array:size&lt;/code&gt; et al.
&lt;code&gt;trace&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | &lt;code&gt;$input&lt;/code&gt; | Argument is not atomized
&lt;code&gt;json&lt;/code&gt; | &lt;code&gt;$input&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Argument is atomized
&lt;code&gt;string&lt;/code&gt; | &lt;code&gt;$item&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt;  | &lt;code&gt;$item&lt;/code&gt; is used nowhere else
&lt;code&gt;expanded-QName&lt;/code&gt; | &lt;code&gt;$qname&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;prefix-from-QName&lt;/code&gt; et al.
&lt;code&gt;resolve-QName&lt;/code&gt; | &lt;code&gt;$qname&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;prefix-from-QName&lt;/code&gt; et al.
&lt;code&gt;parse-QName&lt;/code&gt; | &lt;code&gt;$eqname&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;parse-xml&lt;/code&gt; et al.
&lt;code&gt;parse-json&lt;/code&gt; | &lt;code&gt;$json&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;parse-xml&lt;/code&gt; et al.
&lt;code&gt;json-to-xml&lt;/code&gt; | &lt;code&gt;$json&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;parse-xml&lt;/code&gt; et al.
&lt;code&gt;char&lt;/code&gt; | &lt;code&gt;$name&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Input may also be codepoint values, etc.
&lt;code&gt;namespace-uri-for-prefix&lt;/code&gt; | &lt;code&gt;$prefix&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | &lt;code&gt;$prefix&lt;/code&gt; is used nowhere else
&lt;code&gt;resolve-uri&lt;/code&gt; | &lt;code&gt;$relative&lt;/code&gt; | &lt;code&gt;$uri&lt;/code&gt; | Absolute URIs are legal as well
&lt;code&gt;array:append&lt;/code&gt; | &lt;code&gt;$add&lt;/code&gt; | &lt;code&gt;$member&lt;/code&gt; | Alignment with &lt;code&gt;array:put&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we should probably pay particular attention to the naming conventions when adding new functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #360 created</title>
   <pubDate>Mon, 20 Feb 2023 11:24:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/360</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-360</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 314 array composition and decomposition&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR addresses parts of issue 29, issue 113, and issue 314 relating to the composition and decomposition of arrays.&lt;/p&gt;
&lt;p&gt;It introduces two functions &lt;code&gt;array:of&lt;/code&gt; for array composition, and &lt;code&gt;array:members&lt;/code&gt; for decomposition, and defines all other array functions in terms of these two primitives (replacing the internal functions &lt;code&gt;op:A2S&lt;/code&gt; and &lt;code&gt;op:S2A&lt;/code&gt;). The items in the decomposed form of an array are called "value records", singleton maps of the form &lt;code&gt;map{'value': $value}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;array:from-sequence&lt;/code&gt; is renamed &lt;code&gt;array:build&lt;/code&gt; to reflect its symmetry with &lt;code&gt;map:build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Question for the group: should we have a new function for constructing a "value record", or is the syntax &lt;code&gt;map{'value': $value}&lt;/code&gt; adequate for the purpose?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #359 created</title>
   <pubDate>Mon, 20 Feb 2023 09:53:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/359</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-359</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:void: Absorb result of evaluated argument&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Absorb the result of the evaluated argument.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:void(
  $input as item()*
) as empty-sequence()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Motivation&lt;/h3&gt;
&lt;p&gt;Developers tend to get creative if they want to suppress the result of an expression. The reason is that there is no simply solution to do this properly. Some constructs I have seen in practice:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $unused := EXPRESSION
return 'ok'

EXPRESSION[position() = 10000], 'ok'

let $result := 'ok'
return if(exists(EXPRESSION)) then $result else $result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cases like this are frequent in nondeterministic code. Think e.g. of side-effecting functions of the EXPath HTTP-Client and File Modules: The function results are not always relevant for the invoking application, or already known.&lt;/p&gt;
&lt;p&gt;The function is also helpful during development and for testing code. &lt;code&gt;fn:void#1&lt;/code&gt; and &lt;code&gt;fn:identity#1&lt;/code&gt; can both be passed on to functions to either return or ignore the result of their arguments. The function can potentially be used to measure the runtime performance of an expression (but an implementation should not be prevented from discarding the function call if the argument expression is deterministic).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #358 created</title>
   <pubDate>Sun, 19 Feb 2023 23:55:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/358</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-358</guid>
   <description>&lt;div&gt;&lt;p&gt;serialization indent whitespace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There could be an option to control whether the serialization indents with space or tabs, and how many of them (e.g.  2 or 4 spaces )&lt;/p&gt;
&lt;p&gt;Related: https://github.com/qt4cg/qtspecs/issues/101&lt;/p&gt;
&lt;p&gt;A user request: https://github.com/benibela/xidel/issues/100&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #357 created</title>
   <pubDate>Sat, 18 Feb 2023 16:07:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/357</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-357</guid>
   <description>&lt;div&gt;&lt;p&gt;Representing key-value pairs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A map can be decomposed into, or composed from, a sequence of key-value pairs (KVPs).&lt;/p&gt;
&lt;p&gt;There are two natural representations of a key-value pair (K, V): it can be represented as a singleton map (&lt;code&gt;map{ K: V }&lt;/code&gt;) or as a "doubleton" map (&lt;code&gt;map{ 'key': K, 'value': V}&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This issue examines how well either of these representations is currently supported, which of them is preferable, and how this support should be improved.&lt;/p&gt;
&lt;p&gt;I'll consider the following basic operations: constructing a KVP from a key and a value, assembling a map from a set of KVPs, decomposing a map into a sequence of KVPs, extracting the key from a KVP, and extracting the value from a KVP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Singleton Representation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Constructing a KVP from a key and a value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map{ $key : $value }
map:entry($key, $value)
&amp;lt;xsl:map:entry key="$key" select="$value"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assembling a map from a set of KVPs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map:merge($kvps)
&amp;lt;xsl:map&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Decomposing a map into a sequence of KVPs:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:for-each($map, map:entry#2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Extracting the key from a KVP:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:keys($kvp)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Extracting the value from a KVP:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$kvp?*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Doubleton Representation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Constructing a KVP from a key and a value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map{ 'key': $key, 'value': $value }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assembling a map from a set of KVPs&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:build($kvps, -&amp;gt;{?key}, -&amp;gt;{?value})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Decomposing a map into a sequence of KVPs:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:for-each($map, -&amp;gt;($K, $V){map{ 'key': $key, 'value': $value })&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Extracting the key from a KVP:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$kvp?key&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Extracting the value from a KVP:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$kvp?value&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The singleton representation is better supported at present, and it makes sense therefore to fill in the gaps that currently make it awkward. The main attraction of the doubleton representation is the ease of extracting the key and the value using &lt;code&gt;$kvp?key&lt;/code&gt; and &lt;code&gt;$kvp?value&lt;/code&gt;. The equivalents for the singleton representation (&lt;code&gt;map:keys($kvp)&lt;/code&gt; and &lt;code&gt;$kvp?*&lt;/code&gt;) feel clumsy and unintuitive; however, it's not at all obvious what would be better, short of introducing new custom syntax, which seems over-the-top. The best idea I can come up with is to have two functions &lt;code&gt;map:key($kvp)&lt;/code&gt; and &lt;code&gt;map:value($kvp)&lt;/code&gt; which require $kvp to be a singleton map. But I hate the namespace prefixes...&lt;/p&gt;
&lt;p&gt;The other thing needed to "fill the gaps" is a function &lt;code&gt;map:entries($map)&lt;/code&gt; equivalent to &lt;code&gt;map:for-each($map, map:entry#2)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What if we chose to go the other way, and improve support for the doubleton representation?&lt;/p&gt;
&lt;p&gt;We could add &lt;code&gt;map:key-value-pair($key, $value)&lt;/code&gt; to create  KVP, and &lt;code&gt;map:of($kvps)&lt;/code&gt; to build a map from a set of KVPs, and &lt;code&gt;map:key-value-pairs($map)&lt;/code&gt; to decompose a map. The trickiest problem is what to do about XSLT, where the 3.0 instructions &lt;code&gt;&amp;lt;xsl:map&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;xsl:map-entry&amp;gt;&lt;/code&gt; use the singleton representation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #356 created</title>
   <pubDate>Sat, 18 Feb 2023 00:21:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/356</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-356</guid>
   <description>&lt;div&gt;&lt;p&gt;array:leaves&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;1. Issues&lt;/h1&gt;
&lt;p&gt;There are at least two issues with the definition of the function &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-flatten"&gt;&lt;strong&gt;&lt;code&gt;array:flatten&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlike most other functions on arrays (such as &lt;strong&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-put"&gt;array:put&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-replace"&gt;array:replace&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-append"&gt;array:append&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-slice"&gt;array:slice&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-subarray"&gt;array:subarray&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-remove"&gt;array:remove&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-insert-before"&gt;array:insert-before&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-tail"&gt;array:tail&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-trunk"&gt;array:trunk&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-reverse"&gt;array:reverse&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-join"&gt;array:join&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-for-each"&gt;array:for-each&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-filter"&gt;array:filter&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-for-each-pair"&gt;array:for-each-pair&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-sort"&gt;array:sort&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-partition"&gt;array:partition&lt;/a&gt;&lt;/strong&gt;) , which produce an array as their result, &lt;strong&gt;this function produces only a sequence&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;This function is not lossless&lt;/strong&gt; -- any members that are the empty sequence or the empty array are not represented in the returned result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;2. Suggested solution(s)&lt;/h1&gt;
&lt;p&gt;We want to have a function that is similar to the wrongly defined one, but produces its contents as an array, and is lossless. There are two obvious ways to do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Correct the specification of   &lt;strong&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-flatten"&gt;&lt;code&gt;array:flatten&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; so that its result is an array and it represents the empty sequences and empty arrays as the same members of its result.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add to the Specification a new function: &lt;strong&gt;&lt;code&gt;array:leaves&lt;/code&gt;&lt;/strong&gt; that produces an array as its result and that is lossless.
&lt;strong&gt;array:leaves&lt;/strong&gt; returns an array whose members are exactly all the leaves of the input array, by the order of their appearance. By definition leaves are all, and at any depth, members that are not an array except when they are the empty array. Thus () (the empty sequence) and [] (the empty array) are leaves by definition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Solution 2. will not cause any compatibility issues&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;3. Examples&lt;/h1&gt;
&lt;p&gt;The expression &lt;strong&gt;&lt;code&gt;array:leaves([1, (), [4, 6], 5, 3])&lt;/code&gt;&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;[1, (),  4, 6, 5, 3]&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;strong&gt;&lt;code&gt;array:leaves([1, 2, 5], [[10, 11], 12], [], 13)&lt;/code&gt;&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;[1, 2, 5, 10, 11, 12, [], 13]&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 023 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 17 Feb 2023 17:49:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/02-21</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-02-21</guid>
</item><item>
   <title>Pull request #355 created</title>
   <pubDate>Thu, 16 Feb 2023 21:41:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/355</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-355</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-022-02 - add to imp-def-feature appendix&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds entries to the implementation-defined-features appendix of the serialization spec, corresponding to the option to generate &lt;code&gt;&amp;lt;meta charset="XXX"&amp;gt;&lt;/code&gt; for HTML5.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #354 created</title>
   <pubDate>Thu, 16 Feb 2023 18:30:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/354</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-354</guid>
   <description>&lt;div&gt;&lt;p&gt;Combine multiple signatures of XSLT functions to use defaults&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR addresses issue 69, by modifying those XSLT built-in functions that currently have multiple signatures, to use a single signature with parameter defaults instead.&lt;/p&gt;
&lt;p&gt;The changes however don't currently render correctly. The XSLT processing pipeline needs to be changed to pick up the changes that were made to the F+O stylesheets to render parameter defaults correctly. I haven't yet managed to work out where this is done.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #353 created</title>
   <pubDate>Thu, 16 Feb 2023 17:22:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/353</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-353</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue109 xsl note&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Addresses issue #109 and issue #87. Unfortunately the PR also includes the unrelated commits for issue 22.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #352 created</title>
   <pubDate>Thu, 16 Feb 2023 14:58:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/352</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-352</guid>
   <description>&lt;div&gt;&lt;p&gt;The @array attribute of xsl:for-each-group is no more&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There is a note in XSLT §14.2 concerning the @array attribute of xsl:for-each-group, but this attribute has been dropped.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #351 closed</title>
   <pubDate>Thu, 16 Feb 2023 08:48:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/351</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-351</guid>
   <description>&lt;div&gt;&lt;p&gt;Another attempt to build off the merge-base branch&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #351 created</title>
   <pubDate>Thu, 16 Feb 2023 08:48:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/351</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-351</guid>
   <description>&lt;div&gt;&lt;p&gt;Another attempt to build off the merge-base branch&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #341 closed</title>
   <pubDate>Thu, 16 Feb 2023 00:17:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/341</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-341</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Error-free selection operator for maps or arrays, or finite-domain functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #350 created</title>
   <pubDate>Thu, 16 Feb 2023 00:11:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/350</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-350</guid>
   <description>&lt;div&gt;&lt;p&gt;CompPath (Composite-objects path) Expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;CompPath (Composite-objects path) Expressions&lt;/h1&gt;
&lt;p&gt;As initially discussed in issue #341, we were exploring different ways to provide an XPath-like language to traverse in depth composite objects such as maps and arrays and select their members at any depth.
While working on this, the idea of an XPath-like language for composite items started to emerge and here we present this idea in a more or less crystalized form.&lt;/p&gt;
&lt;h2&gt;1. Root Component&lt;/h2&gt;
&lt;p&gt;Any CompPath expression must start off a composite item (of type map or array, or of other future composite item type (maybe set? )  ).
This can be a literal composite item or a reference to a variable whose value is a composite item.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;
(: Literal composite items: :)
[1, 2, 3]

[1, [2,  3]]?2

{"x":1, "y" : map{ "z": 2}}

{"x":1, "y" : map{ "z": 2}} ?y

(: Variables containing composite items: :)
let $comp1 := [1, [2, 3]],
 $comp2 :=$comp1 ?2,
 $comp3 := {"x":1, "y" : map{ "z": 2}},
 $comp4 := $comp3 ?y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above examples all literal expressions and all variables (&lt;strong&gt;&lt;code&gt;$comp1, $comp2, $comp3, $comp4&lt;/code&gt;&lt;/strong&gt;) may serve as the root component for a CompPath expression.&lt;/p&gt;
&lt;h2&gt;2. The component-path operator (\)&lt;/h2&gt;
&lt;p&gt;The component-path operator "\" is used to build expressions for locating members at any depth within component trees. Its left-hand side expression must return a result that is a composite item or else this result is represented as such by wrapping it into an array.&lt;/p&gt;
&lt;p&gt;The operator returns an array, the values of whose members are composite items themselves or any such value may be a non-composite "leaf" in the root-component tree).&lt;/p&gt;
&lt;p&gt;Each operation E1\E2 is evaluated as follows: Expression E1 is evaluated, and the result is wrapped in an array A1. If any member of A1 is not a composite item, a type error is raised.
Each member of A1 serves in turn  to provide an inner "composite-focus" (the member as the "composite-context-item" or &lt;strong&gt;&lt;code&gt;.&lt;/code&gt;&lt;/strong&gt;, its index in A1 as the "composite-context-position" or &lt;strong&gt;&lt;code&gt;index()&lt;/code&gt;&lt;/strong&gt;, the set of keys of the composite-context-item as the "composite-keyset" or &lt;strong&gt;&lt;code&gt;keys()&lt;/code&gt;&lt;/strong&gt; and the size of this member as the "composite-context-size" (specified as one of: &lt;strong&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/strong&gt;, or &lt;strong&gt;&lt;code&gt;array-size()&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;key-size()&lt;/code&gt;&lt;/strong&gt;) ) for the evaluation of E2. The result of each evaluation of  E2, if it isn't a single composite item, is wrapped in a single array. The arrays resulting from all the evaluations of E2 are wrapped  in a single array and this single array is the result of the evaluation.&lt;/p&gt;
&lt;p&gt;E2 is typically a function over the &lt;em&gt;context-focus&lt;/em&gt;  and its results will be the set of the next step composite-context-items (used as the left-hand-side of the next in chain composite-step-expression (see below)), or these results would be the final results of evaluation if this is the last-in chain composite-step-expression.&lt;/p&gt;
&lt;h2&gt;3. Composite-Steps&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;composite-step&lt;/strong&gt; is a part of a composite-path-expression that generates an array and filters its members by zero or more predicates. A &lt;strong&gt;composite-step-expression&lt;/strong&gt; is either a &lt;em&gt;CompositeAxisStep&lt;/em&gt; or a &lt;em&gt;CompositePostfixExpression&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;4. Composite-Axes&lt;/h2&gt;
&lt;p&gt;The following axes are defined for traversing a composite-item tree:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt; axis contains the members of the composite-context-item.&lt;/li&gt;
&lt;li&gt;The  &lt;strong&gt;&lt;code&gt;value-member::&lt;/code&gt;&lt;/strong&gt;  axis contains the members of the composite-context-item that are not composite themselves.&lt;/li&gt;
&lt;li&gt;The  &lt;strong&gt;&lt;code&gt;node-member::&lt;/code&gt;&lt;/strong&gt;  axis contains the members of the composite-context-item that are nodes.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;descendant-member::&lt;/code&gt;&lt;/strong&gt; axis is defined as the transitive closure of the &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt; axis; it contains the descendent-members of the composite-context-item (the child members of the composite-context-item, and their child-members, ... and so on).&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;self::&lt;/code&gt;&lt;/strong&gt; axis contains just the composite-context-item.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;descendant-member-or-self::&lt;/code&gt;&lt;/strong&gt; contains the composite-context-item and all of its descendent-members.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;following-sibling-member::&lt;/code&gt;&lt;/strong&gt; axis contains the members of the immediate container of the composite-context-item that follow it. For any two members &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; of a composite item &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt;, by definition &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; follows &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt; if and only if &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is an array and the index of &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; in &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is greater than that of &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt;, or if &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is a map, then the key of &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; is greater than that of &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;preceding-sibling-member::&lt;/code&gt;&lt;/strong&gt; axis contains the members of the immediate container of the composite-context-item that precede it. For any two members &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; of a composite item &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt;, by definition &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt; precedes &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; if and only if &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is an array and the index of &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; in &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is greater than that of &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt;, or if &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is a map, then the key of &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; is greater than that of &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, &lt;strong&gt;&lt;code&gt;following-sibling-member::5&lt;/code&gt;&lt;/strong&gt; means all members of the composite-context-item with index &amp;gt; 5,
and &lt;strong&gt;&lt;code&gt;preceding-sibling-member::5&lt;/code&gt;&lt;/strong&gt; means all members of the composite-context-item with index &amp;lt; 5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the immediate container of the composite-context-item is a map whose key-values cannot be ordered, then specifying either of the &lt;strong&gt;&lt;code&gt;following-sibling-member::&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;preceding-sibling-member::&lt;/code&gt;&lt;/strong&gt; axes on this composite-context-item must raise a type error. (Obviously, these two axes are meaningful only for composite items, whose members are ordered, such as the array).&lt;/p&gt;
&lt;p&gt;If the composite-axis name is omitted from a composite-axis step, the default axis is &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;5. Composite Axis Steps&lt;/h2&gt;
&lt;p&gt;A composite axis step completely resembles the ordinary axis step in XPath. It consists of three parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The composite axis  (&lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;descendant-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;value-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;node-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;following-sibling-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;preceding-sibling-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;self::&lt;/code&gt;&lt;/strong&gt;, or the &lt;strong&gt;&lt;code&gt;descendant-member-or-self::&lt;/code&gt;&lt;/strong&gt; axis)&lt;/li&gt;
&lt;li&gt;The member test&lt;/li&gt;
&lt;li&gt;The composite-predicates&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;6. Member Tests&lt;/h2&gt;
&lt;p&gt;A member test is a condition on the key-name, index, or kind (&lt;em&gt;composite&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;array&lt;/em&gt; or &lt;em&gt;value&lt;/em&gt;, &lt;em&gt;node&lt;/em&gt;, or (any) &lt;em&gt;member&lt;/em&gt;). A member test determines which members contained by a copmosite-axis are selected by a composite-step.&lt;/p&gt;
&lt;p&gt;As such, a member test is either an &lt;em&gt;identifier-test&lt;/em&gt; (key-name or index) or a &lt;em&gt;kind-test&lt;/em&gt; (&lt;em&gt;composite&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;array&lt;/em&gt;,  &lt;em&gt;value&lt;/em&gt;, or &lt;em&gt;member&lt;/em&gt;)).&lt;/p&gt;
&lt;p&gt;Examples of member identifiers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A string specifies a name of a key, whose value will be selected. For example: &lt;strong&gt;&lt;code&gt;\child-member::X&lt;/code&gt;&lt;/strong&gt; selects from the composite-context-item the value corresponding to its key which has the name "X".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\child-member::3&lt;/code&gt;&lt;/strong&gt; selects from the composite-context-item the value of its 3rd member, if it is an array or the value corresponding to its key &lt;strong&gt;&lt;code&gt;3&lt;/code&gt;&lt;/strong&gt;, if it is a map.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;following-sibling-member::3&lt;/code&gt;&lt;/strong&gt; selects from the composite-content-item (which is most-likely an array) all of its members having index greater than 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;preceding-sibling-member::3&lt;/code&gt;&lt;/strong&gt; selects from the composite-content-item (which is most-likely an array) all of its members having index less than 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\descendant-member-or-self::X&lt;/code&gt;&lt;/strong&gt; selects from the composite-context-item (that must be a map) and from all its descendant-members, the values corresponding to their key named "X", if these descendents have a key named "X".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarly &lt;strong&gt;&lt;code&gt;\5&lt;/code&gt;&lt;/strong&gt; is equivalent to &lt;strong&gt;&lt;code&gt;\child-member::5&lt;/code&gt;&lt;/strong&gt; and selects from the composite-context-item that is an array the value of its 5th member. This will also select the value corresponding to the key &lt;strong&gt;&lt;code&gt;5&lt;/code&gt;&lt;/strong&gt; from the composite-context-item if it is a map, because on the &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt; axis both maps and arrays may be selected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\X&lt;/code&gt;&lt;/strong&gt; is equivalent to &lt;strong&gt;&lt;code&gt;\child-member::X&lt;/code&gt;&lt;/strong&gt; and selects from the composite-context-item (that must be a map), the value corresponding to its key which has the name "X".&lt;/p&gt;
&lt;p&gt;There is also the pseudo-operator &lt;code&gt;\\&lt;/code&gt; . This is an abbreviation for:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\descendant-member-or-self::member()\&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thus, &lt;strong&gt;&lt;code&gt;\\X&lt;/code&gt;&lt;/strong&gt; means: "(Deep) Select all members of the root-component that are the corresponding values of keys equal to 'X' "&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We may use a &lt;strong&gt;&lt;em&gt;kind test&lt;/em&gt;&lt;/strong&gt; as part of the previous example, if we want to select only a specific kind of members of the composite-context-item.
&lt;strong&gt;&lt;code&gt;\array()&lt;/code&gt;&lt;/strong&gt;  In this example, although we are on the &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt; axis, we want to select only members of the composite-context-item that are arrays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\map()&lt;/code&gt;&lt;/strong&gt;  In this example, although we are on the &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt; axis, we want to select only members of the composite-context-item that are maps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\value()&lt;/code&gt;&lt;/strong&gt;  In this example we want to select only members of the composite-context-item that are not composite items themselves.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\node()&lt;/code&gt;&lt;/strong&gt;  In this example we want to select only members of the composite-context-item that are nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\member()&lt;/code&gt;&lt;/strong&gt;  In this example we want to select all members of the composite-context-item, regardless whether they are maps, arrays, or values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;6.1 Wildcards&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;*&lt;/code&gt;&lt;/strong&gt; wildcard can be used instead of a member identifier. Its meaning is to select all existing members of the composite-context-item, that is possibly selected by a specific axis and limited by a specific member kind-test.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\*&lt;/code&gt;&lt;/strong&gt;  (: (Shallow) Selects all members of the composite-context-item :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\map()\*&lt;/code&gt;&lt;/strong&gt;  (: Selects from the composite-context-item all values that correspond to a key of any map-member of the composite-context item :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\array()\*&lt;/code&gt;&lt;/strong&gt;  (: Selects from the composite-context-item all members of all its members that are arrays :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\\*&lt;/code&gt;&lt;/strong&gt;  (: (Deep) Select all members of the composite tree rooted by the root-component :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;7. Predicates&lt;/h2&gt;
&lt;p&gt;As defined above, a &lt;strong&gt;composite-step&lt;/strong&gt; has three parts: &lt;em&gt;composite-axis&lt;/em&gt; (can be omitted and then a default axis is used), &lt;em&gt;member test&lt;/em&gt;, and an optional &lt;em&gt;list of composite-predicates&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;&lt;em&gt;composite-predicate&lt;/em&gt;&lt;/strong&gt; in a composite-step is an expression used as a &lt;em&gt;filter&lt;/em&gt; applied on the members of the composite-context-item that are already selected by the axis and member tests of the axis step, and not filtered out by any preceding composite-predicates in the &lt;em&gt;composite-predicates-list&lt;/em&gt;. The composite-predicate may be any XPath expression and is written within double square brackets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\*[[3]]&lt;/code&gt;&lt;/strong&gt;  (: Selects any member of the composite-context-item, that is an array and has a 3rd member or any member of the composite-context-item, that is a map and has a key &lt;strong&gt;3&lt;/strong&gt; :)
This is a shorthand for: &lt;strong&gt;&lt;code&gt;\*[[array-size() ge 3 or 3 = keys()]]&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\array()[[3]]&lt;/code&gt;&lt;/strong&gt; (: Selects those array members of the composite-context-item that have a 3rd member :)
This is a shorthand for: &lt;strong&gt;&lt;code&gt;\*[[size() ge 3]]&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\*[[size() eq 7]]&lt;/code&gt;&lt;/strong&gt;  (: Selects those members whose array-size() or key-size() is exactly 7:)
This is a shorthand for: &lt;strong&gt;&lt;code&gt;\composite::*[[self::map() and key-size() eq 7 or self::array() and array-size() eq 7]]&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\*[[X]]&lt;/code&gt;&lt;/strong&gt;  (: Selects any member of the composite-context-item, that is a map and has a key &lt;strong&gt;X&lt;/strong&gt;  :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\map()[[X]]&lt;/code&gt;&lt;/strong&gt; (: Selects any map member of the composite-context-item, that has a key &lt;strong&gt;X&lt;/strong&gt;  :)
The above two expressions are a shorthand for: &lt;strong&gt;&lt;code&gt;\*[['X' = keys()]]&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\value()[[. gt 0]]&lt;/code&gt;&lt;/strong&gt; (: Selects any value (non-composite member) of the composite-context-item, that is a positive number :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;8. Mixing CompPath and XPath expressions&lt;/h2&gt;
&lt;p&gt;CompPath and XPath expressions can be used as parts of a single expression:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A CompPath expression may be appended at the end of any XPath expression that produces a composite-object .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An XPath expression may be appended at the end of any CompPath expression. When doing this,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CompPathExpr / XPathExpr&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CompPathExpr\node::* / XPathExpr&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CompPathExpr ! XPathExpr&lt;/code&gt;&lt;/strong&gt;  (:  Note: also causes ordering and deduplication of the nodes! :)&lt;/p&gt;
&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CompPathExpr\value::* !  XPathExpr&lt;/code&gt;&lt;/strong&gt;  (: Note: No ordering or deduplication, can be applied on any item, not just on nodes :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A CompPath expression may be substituted for the expected argument of any XPath expression, for example:
&lt;strong&gt;&lt;code&gt;count(MyCompPathExpr)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any XPath expression that produces a composite item can be used as the composite-root for any CompPath expression&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $myBooks := 
&amp;lt;books&amp;gt;
 &amp;lt;book name="Tom Sawyer"&amp;gt;
   &amp;lt;author&amp;gt;Mark Twain&amp;lt;/author&amp;gt;
 &amp;lt;/book&amp;gt;
 &amp;lt;book name="Wuthering Heights"&amp;gt;
   &amp;lt;author&amp;gt;Emily Brontë&amp;lt;/author&amp;gt;
 &amp;lt;/book&amp;gt;
 &amp;lt;book name="Jane Eyre"&amp;gt;
   &amp;lt;author&amp;gt;Charlotte Brontë&amp;lt;/author&amp;gt;
 &amp;lt;/book&amp;gt;
 &amp;lt;book name="Adventures of Huckleberry Finn"&amp;gt;
   &amp;lt;author&amp;gt;Mark Twain&amp;lt;/author&amp;gt;
 &amp;lt;/book&amp;gt;
&amp;lt;/books&amp;gt;,
$map1 := map {"science-works": map{"Einstein": "Special Theory of relativity",
                                  "Darwin" : "On the Origin of Species"
                                 },
             "literature" : map{"19the Century": $myBooks}
            }
return
  $map1\literature\\*/book[author eq 'Mark Twain']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evaluating this mixed CompPath and XPath expression produces the correct result:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;&amp;lt;book name="Tom Sawyer"&amp;gt;
  &amp;lt;author&amp;gt;Mark Twain&amp;lt;/author&amp;gt;
&amp;lt;/book&amp;gt;
&amp;lt;book name="Adventures of Huckleberry Finn"&amp;gt;
  &amp;lt;author&amp;gt;Mark Twain&amp;lt;/author&amp;gt;
&amp;lt;/book&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #349 closed</title>
   <pubDate>Wed, 15 Feb 2023 18:04:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/349</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-349</guid>
   <description>&lt;div&gt;&lt;p&gt;Revert PR change; it doesn't work in this context&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #349 created</title>
   <pubDate>Wed, 15 Feb 2023 18:04:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/349</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-349</guid>
   <description>&lt;div&gt;&lt;p&gt;Revert PR change; it doesn't work in this context&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #348 closed</title>
   <pubDate>Wed, 15 Feb 2023 17:46:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/348</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-348</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to build PR with merge-base version of master&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #348 created</title>
   <pubDate>Wed, 15 Feb 2023 17:46:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/348</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-348</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to build PR with merge-base version of master&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR changes the CI &lt;code&gt;build-pr.yml&lt;/code&gt; script so that it checks out the version of master that the branch started from, rather than the current version of master, for building the specifications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pro: we won't get build failures when the current master can't build the old version (for example, when images have been removed)&lt;/li&gt;
&lt;li&gt;Con: we won't get any features from the current master, such as stylesheet updates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since failing builds are more troublesome than formatting issues, I'm going to say the pros outweigh the cons.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #347 created</title>
   <pubDate>Wed, 15 Feb 2023 14:06:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/347</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-347</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to clarify fn:parse-uri and fn:build-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #307&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #346 closed</title>
   <pubDate>Wed, 15 Feb 2023 10:11:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/346</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-346</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove dagger from record cross-references&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #346 created</title>
   <pubDate>Wed, 15 Feb 2023 10:10:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/346</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-346</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove dagger from record cross-references&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Record types are better supported by the stylesheets so the dagger is simply a distraction.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #345 created</title>
   <pubDate>Tue, 14 Feb 2023 22:52:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/345</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-345</guid>
   <description>&lt;div&gt;&lt;p&gt;Missing rule for matching atomic values against atomic types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XPath §3.6.2 we have forgotten to state the obvious rule:&lt;/p&gt;
&lt;p&gt;"An Atomic Value AV matches a generalized atomic type GAT if the type annotation of AV (call it T) satisfies the condition derives-from(T, GAT)."&lt;/p&gt;
&lt;p&gt;At the same time it would a good idea to clarify whether locally-declared union and enum types fall within the definition of "schema types" (I think they should do so.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #342 closed</title>
   <pubDate>Tue, 14 Feb 2023 17:24:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/342</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-342</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue318 meta elements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 022 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 14 Feb 2023 17:12:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/02-14</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-02-14</guid>
</item><item>
   <title>Issue #338 closed</title>
   <pubDate>Thu, 9 Feb 2023 17:30:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/338</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-338</guid>
   <description>&lt;div&gt;&lt;p&gt;Add ednote per action QT4CG-016-02&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #344 created</title>
   <pubDate>Thu, 9 Feb 2023 17:06:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/344</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-344</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 22: allow "for"/"let" keyword to be repeated in XPath&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Addresses the proposal in issue 22 to allow repetition of the "let" or "for" keyword in a ForExpr or LetExpr. (It does not, however, allow "for" and "let" to be mixed).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #343 created</title>
   <pubDate>Thu, 9 Feb 2023 12:47:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/343</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-343</guid>
   <description>&lt;div&gt;&lt;p&gt;$collation argument: Unification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the function set of the XQFO current specification, the type of the &lt;code&gt;$collation&lt;/code&gt; parameter is sometimes &lt;code&gt;xs:string&lt;/code&gt; and sometimes &lt;code&gt;xs:string?&lt;/code&gt;, depending on the position of the parameter. Examples:&lt;/p&gt;
&lt;h4&gt;Mandatory&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:distinct-values($values as xs:anyAtomicType*, $collation as fn:default-collation()) as xs:anyAtomicType*
fn:index-of($input | as xs:anyAtomicType*, $search | as xs:anyAtomicType, $collation as xs:string) as xs:integer*
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Optional&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:sort($input as item()*, $collation as xs:string?, $key as function(item()) as xs:anyAtomicType*
fn:lowest($input as item()*, $collation as xs:string?, $key as function(item()) as xs:anyAtomicType*) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think we should always allow an empty sequence.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #342 created</title>
   <pubDate>Thu, 9 Feb 2023 12:27:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/342</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-342</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue318 meta elements&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Revises the rules for serializing meta elements to take account of new HTML5 syntax.&lt;/p&gt;
&lt;p&gt;Resolves issue #318&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #18 closed</title>
   <pubDate>Thu, 9 Feb 2023 11:01:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/18</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-18</guid>
   <description>&lt;div&gt;&lt;p&gt;[DM31] Function types do not form a hierarchy&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #58 closed</title>
   <pubDate>Wed, 8 Feb 2023 16:20:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/58</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-58</guid>
   <description>&lt;div&gt;&lt;p&gt;[XQuery] String Value Templates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #107 closed</title>
   <pubDate>Wed, 8 Feb 2023 16:11:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/107</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-107</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow self::(a|b|c)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #234 closed</title>
   <pubDate>Wed, 8 Feb 2023 11:45:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/234</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-234</guid>
   <description>&lt;div&gt;&lt;p&gt;If Without Else&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #330 closed</title>
   <pubDate>Wed, 8 Feb 2023 08:35:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/330</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-330</guid>
   <description>&lt;div&gt;&lt;p&gt;Update fn:parse-html to apply review feedback.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #341 created</title>
   <pubDate>Wed, 8 Feb 2023 01:50:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/341</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-341</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Error-free selection operator for maps or arrays, or finite-domain functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In March 2021 Jarno Elovirta raised on the &lt;strong&gt;&lt;em&gt;#general channel&lt;/em&gt;&lt;/strong&gt; of the XML.com Slack the problem that the existing map or array lookup operator "&lt;strong&gt;?&lt;/strong&gt;" prevents a free traversal of a nested mapp/array object. For example, this expression results in error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;[
  map {"k0": 1}, 
  map{"k0": [1, 2, 3]}
]  ?* ?("k0")  ?*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;[XPTY0004] Input of lookup operator must be map or array: 1.&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;There are three possible types of reaction to this problem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do nothing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Relax the semantics of the map/array lookup operator "&lt;strong&gt;?&lt;/strong&gt;" so that it can be applied on items of non-map/non-array type and in such case produce the empty sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Introduce a similar operator to "&lt;strong&gt;?&lt;/strong&gt;" that will behave as it, but instead of producing an error when applied on items of non-map/non-array type it produces the empty sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously, we are not advocating the 1st choice above, or otherwise we wouldn't be raising any issue 😄&lt;/p&gt;
&lt;p&gt;Choice 2 could be implemented, but this would have a few drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it would bring a certain degree of backwards incompatibility&lt;/li&gt;
&lt;li&gt;"silently returning nothing" is really difficult to debug or even notice unexpected results, as pointed out by @michaelhkay&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;This proposal is to choose alternative 3. above&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why is it better than the 2nd one?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No incompatibility can be introduced, as this is a new operator.&lt;/li&gt;
&lt;li&gt;The user has intentionally chosen this operator over the "?" operator, and this means that the user is well aware of the new, sometimes tricky to observe/explain/debug behavior, but the user doesn't mind these effects and is ready to deal with them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;By definition the operator &lt;strong&gt;"-&amp;gt;"&lt;/strong&gt; with left-hand-side any expression &lt;strong&gt;&lt;em&gt;E&lt;/em&gt;&lt;/strong&gt; and right-hand-side a literal string  &lt;strong&gt;&lt;em&gt;X&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;&lt;code&gt;E -&amp;gt; X&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;is lexically expanded to:&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;&lt;code&gt;E[. instance of map(*) or . instance of array(*)]?X &lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;With the original expression provided by Jarno Elovirta, but now using the &lt;strong&gt;"-&amp;gt;"&lt;/strong&gt; operator:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;[
  map {"k0": 1}, 
  map{"k0": [1, 2, 3]}
]  -&amp;gt;* -&amp;gt;("k0")  -&amp;gt;*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;its evaluation produces the expected result (all the values within just one of the leaves of the tree), and no error:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;1, 2, 3&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That is, &lt;strong&gt;&lt;code&gt;1 -&amp;gt;*&lt;/code&gt;&lt;/strong&gt;  produces the empty sequence and no error.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Of course, the above example can be rewritten to this equivalent XPath 3.0 expression and will get the wanted result, but literally no one, myself included, will ever write this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;[
 map {"k0": 1}, 
 map{"k0": [1, 2, 3]}
] [. instance of map(*) or . instance of array(*)]      ?*
           [. instance of map(*) or . instance of array(*)]      ?k0
                                [. instance of map(*) or . instance of array(*)]   ?*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/217432167-5f7fbff0-3d8d-48a3-a27d-5f62cb77c3dc.png" alt="image"/&gt;&lt;/p&gt;
&lt;h2&gt;Thus &lt;strong&gt;&lt;em&gt;&lt;code&gt;this is all about making it possible/feasible and empowering our users!&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #340 created</title>
   <pubDate>Tue, 7 Feb 2023 22:02:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/340</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-340</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-number: Specifying decimal format&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It would be nice if the decimal format for &lt;code&gt;fn:format-number&lt;/code&gt; could also be supplied via an additional argument. The current syntax is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: result: 12.345,67 :)
declare decimal-format de decimal-separator = ',' grouping-separator = '.';

format-number(
  value := 12345.67,
  picture := '#.##0,00',
  decimal-format-name := 'de'
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The syntax could be enhanced as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;format-number(
  value := 12345.67,
  picture := '#.##0,00',
  format := map { 'decimal-separator': ',', 'grouping-separator': '.' }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If both &lt;code&gt;decimal-format-name&lt;/code&gt; and &lt;code&gt;format&lt;/code&gt; are supplied, an error should be raised.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit 2023-05-02, adopted from a comment further below:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next, language-specific default settings would be sensible. The existing syntax could be used:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;format-number(12345.67, '#.##0,00', 'de')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As known from the other functions for formatting numbers and dates, it could be up to the implementation to decide which languages are supported. The defaults could be overwritten by custom decimal-format declarations in the prolog to ensure that a setting is applied, even if an implementation does not support it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 021 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 7 Feb 2023 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/02-07</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-02-07</guid>
</item><item>
   <title>Issue #339 created</title>
   <pubDate>Tue, 7 Feb 2023 13:46:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/339</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-339</guid>
   <description>&lt;div&gt;&lt;p&gt;The constraints on document-uri are too...constraining&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XPath data model imposes the following constraints on the document-uri property:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the &lt;code&gt;document-uri&lt;/code&gt; is not the empty sequence, then the following constraint must hold: the node returned by evaluating &lt;code&gt;fn:doc()&lt;/code&gt; with the document-uri as its argument must return the document node that provided the value of the &lt;code&gt;document-uri&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;In other words, for any Document Node &lt;code&gt;$arg&lt;/code&gt;, either &lt;code&gt;fn:document-uri($arg)&lt;/code&gt; must return the empty sequence or &lt;code&gt;fn:doc(fn:document-uri($arg))&lt;/code&gt; must return &lt;code&gt;$arg&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This contraint turns out to be inconvenient whenever the larger environment doesn’t enforce a 1:1 mapping between URIs and documents.&lt;/p&gt;
&lt;p&gt;For example, in a browser context, a JavaScript function that returns different versions of the same document over time cannot identify those documents with the same document-uri.&lt;/p&gt;
&lt;p&gt;In XProc, a &lt;code&gt;p:add-attribute&lt;/code&gt; step that returns a copy of its input document with one additional attribute, cannot identify the output document with the same document-uri as the input document.&lt;/p&gt;
&lt;p&gt;Given that the document URI is often necessary to evaluate relative URI references within a document, the constraints imposed in the data model are too strict.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #338 created</title>
   <pubDate>Tue, 7 Feb 2023 13:33:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/338</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-338</guid>
   <description>&lt;div&gt;&lt;p&gt;Add ednote per action QT4CG-016-02&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a purely editorial change. Unless someone objects over the next few days, I'm just going to merge it in.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 021 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sat, 4 Feb 2023 15:09:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/02-07</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-02-07</guid>
</item><item>
   <title>Issue #337 created</title>
   <pubDate>Thu, 2 Feb 2023 00:52:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/337</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-337</guid>
   <description>&lt;div&gt;&lt;p&gt;Local union and enum types: and the definition of generalised atomic types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We need to review the proposed specs for local union and enum types, and decide whether or not to proceed with them.&lt;/p&gt;
&lt;p&gt;I note that the definitions of &lt;strong&gt;generalized atomic type&lt;/strong&gt; and &lt;strong&gt;pure union type&lt;/strong&gt; say they must be "schema-defined", which appears to exclude locally-defined union and enum types.&lt;/p&gt;
&lt;p&gt;I wonder if the definition of local enum types should be aligned more closely with an XSD type derived from xs:string by restricting with an enum facet. Now that we allow down-casting in the coercion rules, the objections to this seem to disappear.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cast&lt;/code&gt; and &lt;code&gt;castable&lt;/code&gt; should also probably pay more attention to these types.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #336 created</title>
   <pubDate>Wed, 1 Feb 2023 12:48:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/336</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-336</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-019-01 (type of $pattern in fn:tokenize())&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Also, update the fos:history record for a number of functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #308 closed</title>
   <pubDate>Wed, 1 Feb 2023 12:13:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/308</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-308</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve the legends in the diagrams&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #335 closed</title>
   <pubDate>Wed, 1 Feb 2023 12:13:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/335</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-335</guid>
   <description>&lt;div&gt;&lt;p&gt;Rework type hierarchy diagrams as styled lists&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #335 created</title>
   <pubDate>Wed, 1 Feb 2023 12:13:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/335</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-335</guid>
   <description>&lt;div&gt;&lt;p&gt;Rework type hierarchy diagrams as styled lists&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #308&lt;/p&gt;
&lt;p&gt;This proposal was accepted at meeting 020 on 31 January 2023.&lt;/p&gt;
&lt;p&gt;The PR won't format correctly because there are style changes, so I'm just going to merge this. I have fixed the diagrams in both the data model specification and f&amp;amp;o.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #205 closed</title>
   <pubDate>Wed, 1 Feb 2023 10:18:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/205</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-205</guid>
   <description>&lt;div&gt;&lt;p&gt;Make higher-order-function support mandatory&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #221 closed</title>
   <pubDate>Wed, 1 Feb 2023 10:18:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/221</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-221</guid>
   <description>&lt;div&gt;&lt;p&gt;Expose op:same-key() as a user-visible function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #324 closed</title>
   <pubDate>Wed, 1 Feb 2023 10:17:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/324</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-324</guid>
   <description>&lt;div&gt;&lt;p&gt;58 Proposed syntax and semantics for string templates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #326 closed</title>
   <pubDate>Wed, 1 Feb 2023 10:17:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/326</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-326</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 205: make support for higher-order functions mandatory&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #319 closed</title>
   <pubDate>Wed, 1 Feb 2023 10:17:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/319</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-319</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 221: op:same-key becomes fn:atomic-equal&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #334 created</title>
   <pubDate>Wed, 1 Feb 2023 09:17:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/334</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-334</guid>
   <description>&lt;div&gt;&lt;p&gt;Transient properties: a new approach to deep selection and update in maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;After exploring many alternatives, I have come to the conclusion that we can't solve the problem of deep navigation and transformation of JSON structures without a data model change.&lt;/p&gt;
&lt;p&gt;Most of the problems boil down to this: JSON trees do not have parent pointers, therefore after navigating down to a leaf node of the tree, we cannot get any information from higher up the tree. The solution to this (the "zipper" model) is to retain transient information about how a particular node in the tree was reached, so that we can retrace our steps and revisit nodes that were passed en route.&lt;/p&gt;
&lt;p&gt;The change I propose is quite minor, but powerful: Any XDM value can be augmented with a set of transient properties represented as a set of key-value pairs. These properties are ignored (and typically dropped) by all operations on a value, except where otherwise specified. For the purpose of exposition, I'll use the syntax &lt;code&gt;$value¶name&lt;/code&gt; to refer to the transient &lt;code&gt;name&lt;/code&gt; property of &lt;code&gt;$value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We'll change the semantics of &lt;code&gt;map:get()&lt;/code&gt; and &lt;code&gt;array:get()&lt;/code&gt;, and the associated lookup operators, so that the resulting values have transient properties indicating how they were selected. For example, given&lt;/p&gt;
&lt;p&gt;&lt;code&gt;let $name := $person?firstName&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;the resulting value (perhaps the string "Michael") will be augmented with transient properties&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;¶parent - the map from which the value was selected (retaining its own transient properties if any)&lt;/li&gt;
&lt;li&gt;¶key - the key used to make the selection, here "firstName"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and derived properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;¶ancestors - the transitive closure of ¶parent&lt;/li&gt;
&lt;li&gt;¶root - the last ¶ancestor&lt;/li&gt;
&lt;li&gt;¶path - a string representation of the path used to select the value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can also define other "downward selection" operations such as &lt;code&gt;map:find&lt;/code&gt;, and &lt;code&gt;array:foot&lt;/code&gt; to retain these transient properties. So for example &lt;code&gt;map:find($json, 'firstname')[.='Michael']¶parent?surname&lt;/code&gt; now finds the surnames of anyone named 'Michael', at any depth of the tree.&lt;/p&gt;
&lt;p&gt;If we turn back to the use cases in my 2016 paper on transforming JSON&lt;/p&gt;
&lt;p&gt;https://www.saxonica.com/papers/xmlprague-2016mhk.pdf&lt;/p&gt;
&lt;p&gt;The first use case (bulk update) relied on matching items expressed in XML as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match="map[array[@key='tags']/string='ice']/number[@key='price']/text()"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which couldn't be done in JSON because of the inability to match based on ancestor context. With the new transient properties we can match this as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match="type(xs:integer)[¶key = 'price'][¶parent?tags?* = 'ice']"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the second use case (hierarchic inversion), we can again get properties of parent or ancestor maps&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$students ! map:put("course", ¶parent?name)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I think we can also use this to define deep update operations. But I'll leave that investigation until later.&lt;/p&gt;
&lt;p&gt;Note: transient properties potentially have many other applications, for example we might use them to solve our problems with &lt;code&gt;document-uri()&lt;/code&gt;. But exploring that would be a distraction here. The nice thing about transient properties is that they give a lot of potential for augmenting existing functionality with full backwards compatibility, because we can define existing operations to return results with additional transient properties that all existing operations will ignore. If we were so minded, for example, we could have different functions/operators return "quiet NaN" and "signalling NaN" by adding a transient property to the NaN value returned.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #333 created</title>
   <pubDate>Wed, 1 Feb 2023 00:34:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/333</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-333</guid>
   <description>&lt;div&gt;&lt;p&gt;Equality of function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The question of equality of function items arises in the discussion of determinism of functions and memo functions in XSLT - see F&amp;amp;O 3.1 section 1.7.4, and came up again today in the context of fn:deep-equal.&lt;/p&gt;
&lt;p&gt;1.7.4 makes a brave attempt to describe situations under which two functions are "identical", though leaving implementations room for flexibility. I think we can build on this and improve it, by describing more situations in which the result is predictable.&lt;/p&gt;
&lt;p&gt;The data model describes the properties of a function item, and we can say that two function items are equivalent if all their properties are the same.&lt;/p&gt;
&lt;p&gt;The properties that cause problems are the "implementation" and the "closure", and in both cases I think we can find ways of doing a comparison.&lt;/p&gt;
&lt;p&gt;For the implementation, we can define this by reference to the way in which the implementation property is set. For function items constructed by reference to static functions (e.g. &lt;code&gt;my:func#3&lt;/code&gt; or &lt;code&gt;function-lookup(my:func, 3)&lt;/code&gt;) then they have the same implementation if and only if they are constructed by reference to the same static function. Similarly for function items constructed by evaluating an inline function expression. Other ways of constructing a function item, such as partial application, essentially create a new function with the same implementation as an existing function and a different closure.&lt;/p&gt;
&lt;p&gt;For the closure (ignoring for the moment functions that include parts of the dynamic context in their closure), this is essentially just a set of variable bindings and it's not too difficult to say that functions are identical if these sets of variable bindings are identical.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #332 created</title>
   <pubDate>Tue, 31 Jan 2023 18:51:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/332</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-332</guid>
   <description>&lt;div&gt;&lt;p&gt;Add a namespace uris option to fn:path&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The output of &lt;code&gt;fn;path&lt;/code&gt; using namespaces is very verbose as it is specified to use the &lt;code&gt;Q{uri}name&lt;/code&gt; syntax. It would be useful if it was extended to take a namespace prefix to uri map.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a second &lt;code&gt;$namespaces&lt;/code&gt; parameter that has the type &lt;code&gt;map(union(xs:NCName, enum('')), xs:anyURI)&lt;/code&gt; (the same as fn:in-scope-namespaces) -- this will have a default value of &lt;code&gt;map{}&lt;/code&gt; to preserve the existing behaviour.&lt;/li&gt;
&lt;li&gt;If the namespace uri is in the map, use the given prefix. If that prefix is "" then just use the local name.&lt;/li&gt;
&lt;li&gt;If the namespace uri is not in the map, use the &lt;code&gt;Q{uri}name&lt;/code&gt; syntax.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This allows for things like &lt;code&gt;fn:path($e, namespaces := fn:in-scope-namespaces())&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #331 created</title>
   <pubDate>Tue, 31 Jan 2023 18:43:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/331</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-331</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend fn:path to support arrays and maps.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently, &lt;code&gt;fn:path&lt;/code&gt; is defined for nodes. This means it is not possible to use it with arrays or maps (e.g. to determine the path to a JSON item when a comparison fails).&lt;/p&gt;
&lt;p&gt;As such, I recommend:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;changing the type to &lt;code&gt;item()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the value is a node use the current logic.&lt;/li&gt;
&lt;li&gt;If the value is in an array, use &lt;code&gt;?n&lt;/code&gt; where n is the nth item of the array where the item is located.&lt;/li&gt;
&lt;li&gt;If the value is in a map, use &lt;code&gt;?name&lt;/code&gt; or &lt;code&gt;?"name"&lt;/code&gt; where name is the key name of the map where the item is located.&lt;/li&gt;
&lt;li&gt;If the value is an atomic item, or the root of a map/array structure, use &lt;code&gt;.&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example: &lt;code&gt;.?4?user?name&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 020 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 31 Jan 2023 17:12:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/01-31</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-01-31</guid>
</item><item>
   <title>Pull request #330 created</title>
   <pubDate>Tue, 31 Jan 2023 12:56:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/330</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-330</guid>
   <description>&lt;div&gt;&lt;p&gt;Update fn:parse-html to apply review feedback.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR applies the following review comments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] QT4CG-016-03: RD to add a note clarifying “known character encoding”&lt;/li&gt;
&lt;li&gt;[x] QT4CG-016-04: RD to add a note clarifying the “&lt;em&gt;”/”&lt;/em&gt;” html/version combination&lt;/li&gt;
&lt;li&gt;[x] QT4CG-016-05: RD to add a “todo” noting the dependency on keyword arguments&lt;/li&gt;
&lt;li&gt;[x] QT4CG-016-06: RD to reword the introduction to mapping to clarify who’s doing the mapping&lt;/li&gt;
&lt;li&gt;[ ] QT4CG-016-08: RD to clarify how namespace comparisons are performed.&lt;/li&gt;
&lt;li&gt;[x] QT4CG-016-09: RD to add a note stating that the local name should always be lowercase&lt;/li&gt;
&lt;li&gt;[x] QT4CG-016-10: RD to consider how to clarify parsed entity parsing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #329 created</title>
   <pubDate>Mon, 30 Jan 2023 11:45:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/329</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-329</guid>
   <description>&lt;div&gt;&lt;p&gt;Keyword parameters: Error codes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I’ve read the current specification twice, and I have checked the existing qt4 tests, but I’m still confused by the exact meaning of the new error codes for keyword arguments, &lt;code&gt;XPST0141&lt;/code&gt; and &lt;code&gt;XPST0142&lt;/code&gt;. Things are getting particularly tricky if we consider partial function applications.&lt;/p&gt;
&lt;p&gt;My proposal would be to stick with the existing error code &lt;code&gt;XPST0017&lt;/code&gt; for functions that cannot be matched.&lt;/p&gt;
&lt;p&gt;Initial suggestion (obsolete):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;use the existing error code &lt;code&gt;XPST0017&lt;/code&gt; for all cases in which a function cannot be chosen as the available arguments (both positional and keyword-based) don’t match the function definition, and&lt;/li&gt;
&lt;li&gt;only raise a new error code (&lt;code&gt;XPST0141&lt;/code&gt;, possibly) if a keyword argument has been specified more than once (as this can be done without checking the function definitions).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #328 created</title>
   <pubDate>Mon, 30 Jan 2023 10:05:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/328</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-328</guid>
   <description>&lt;div&gt;&lt;p&gt;Switch Cases: Lift single-item restriction on operands&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.w3.org/TR/xquery-31/#id-switch"&gt;XQuery switch cases&lt;/a&gt; have a peculiar restriction: The operand of a single case must yield an empty sequence or a single item. There seem to be no (obvious) reasons why this restriction exists, so I believe we should lift it and allow arbitrary sequences.&lt;/p&gt;
&lt;p&gt;A similar extension is planned for Java 12 (&lt;a href="http://openjdk.java.net/jeps/325"&gt;JEP 325: Switch Expressions&lt;/a&gt;). The required changes in XQuery are simpler, though, as the 3.1 grammar already supports arbitrary expressions as operands.&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;switch($value)
  case 1
  case 2
  case 3
  case 4
  case 5
    return 'small'
  default
    return 'big'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Proposed syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;switch($value)
  case 1 to 5
    return 'small'
  default
    return 'big'
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Required Changes&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://www.w3.org/TR/xquery-31/#id-switch"&gt;current matching rules&lt;/a&gt; could be rephrased as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The SwitchCaseOperand is evaluated.&lt;/li&gt;
&lt;li&gt;The resulting value is atomized.&lt;/li&gt;
&lt;li&gt;The case matches if the value is empty and if the value of the switch expression is empty as well.&lt;/li&gt;
&lt;li&gt;Otherwise, the atomized value of the switch operand expression is compared with each item of the atomized value of the SwitchCaseOperand using &lt;code&gt;fn:deep-equal&lt;/code&gt;, with the default collation from the static context.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Original Proposal: https://github.com/expath/xpath-ng/pull/12&lt;/li&gt;
&lt;li&gt;Discussion on Slack: https://xmlcom.slack.com/archives/C011NLXE4DU/p1675006336963479&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 020 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 30 Jan 2023 08:47:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/01-31</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-01-31</guid>
</item><item>
   <title>Issue #327 created</title>
   <pubDate>Mon, 30 Jan 2023 08:42:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/327</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-327</guid>
   <description>&lt;div&gt;&lt;p&gt;Tokenisation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The rule in A.2&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When tokenizing, the longest possible match that is consistent with the EBNF is used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;needs clarifying. It could be read as suggesting that if taking the longest match turns out to lead to a syntax error, the tokenisation should be re-attempted using a shorter match. I don't think that has ever been intended. So what exactly does the qualifier "that is consistent with the EBNF" actually mean?&lt;/p&gt;
&lt;p&gt;Possibly related, A.2.2 Terminal Delimitation states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Terminal symbols that are not used exclusively in [/* ws: explicit */] productions are of two kinds: delimiting and non-delimiting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But (at least in the XQuery version) the list of delimiting tokens includes a number that are indeed used exclusively in ws:explicit productions, for example a number of tokens containing back-ticks, and &lt;code&gt;]]&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I think we need to be clearer that tokens used in ws:explicit productions are recognised only when parsing the production that uses them. For example given the expression &lt;code&gt;A[B[C]]&amp;gt;3&lt;/code&gt;, we should not recognise &lt;code&gt;]]&amp;gt;&lt;/code&gt; as a token under the longest-token rule. I think that's probably what the "consistent with the EBNF" rule is intended to convey.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #326 created</title>
   <pubDate>Sun, 29 Jan 2023 22:45:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/326</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-326</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 205: make support for higher-order functions mandatory&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #325 created</title>
   <pubDate>Sun, 29 Jan 2023 22:03:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/325</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-325</guid>
   <description>&lt;div&gt;&lt;p&gt;Operator precedence table needs updating&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;otherwise&lt;/code&gt; and &lt;code&gt;-&amp;gt;&lt;/code&gt; operators (and maybe others) are missing from the non-normative precedence table in Appendix A.4.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #324 created</title>
   <pubDate>Sun, 29 Jan 2023 18:23:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/324</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-324</guid>
   <description>&lt;div&gt;&lt;p&gt;58 Proposed syntax and semantics for string templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See issue #58.&lt;/p&gt;
&lt;p&gt;I would recommend reviewing the XQuery version of the spec first, since it contains additional notes contrasting string templates and the existing string constructors. The section on string constructors has moved, but is unchanged except for the addition of this note.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #323 created</title>
   <pubDate>Fri, 27 Jan 2023 21:56:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/323</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-323</guid>
   <description>&lt;div&gt;&lt;p&gt;add select attribute to xsl:text&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Although xsl:text select="socks" would be the same as xsl:value-of select="socks" in implementation terms, users of XSLT 2 and later, even people who have been using XSLT 2 or 3 for some time, are often surprised to learn that xsl:value-of makes a text node, and that they need to use xsl:sequence to return something else.&lt;/p&gt;
&lt;p&gt;So it'd be great to have them use xsl:text instead of xsl:value-of, where text nodes are wanted, because then introducing xsl:sequence is a small step.&lt;/p&gt;
&lt;p&gt;Of course, beginners also often use value-of where they should be using apply-templates, e.g. to handle mixed content! But again, using xsl:text reduces that temptation.&lt;/p&gt;
&lt;p&gt;We do have value templates now, &lt;a href="xsl:text"&gt;xsl:text&lt;/a&gt;{ .... }&amp;lt;/xsl:text&amp;gt;, which mitigates the need slightly, but i think only slightly, because the select= analogy is very compelling.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #322 created</title>
   <pubDate>Thu, 26 Jan 2023 10:10:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/322</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-322</guid>
   <description>&lt;div&gt;&lt;p&gt;Map construction in XSLT: xsl:record instruction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Constructing maps in XSLT often involves code rather like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:map&amp;gt;
               &amp;lt;xsl:map-entry key="'author'" select="string(AUTHOR)"/&amp;gt;
               &amp;lt;xsl:map-entry key="'title'" select="string(TITLE)"/&amp;gt;
               &amp;lt;xsl:map-entry key="'price'" select="xs:decimal(PRICE)"/&amp;gt;
               &amp;lt;xsl:map-entry key="'publisher'" select="string(../@name)"/&amp;gt;
           &amp;lt;/xsl:map&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The alternative using XPath is also rather ugly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:sequence select="map{'author': string(AUTHOR),
                                                 'title':string(TITLE), 
                                                 'price': xs:decimal(PRICE), 
                                                 'publisher':string(../@name)}"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(the fact  that it is creating a map doesn't stand out; the &lt;code&gt;xsl:sequence&lt;/code&gt; is a distraction because there's no sequence involved; and many users dislike long multi-line XPath expressions because of formatting problems in their editing tools)&lt;/p&gt;
&lt;p&gt;I propose a new instruction xsl:record which allows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:record author="string(AUTHOR)"
                                title="string(TITLE)" 
                                price="xs:decimal(PRICE)" 
                                publisher="string(../@name)"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is rather like literal result elements in that the attributes are user-defined rather than system-defined. Unlike LREs, the values are general expressions rather than AVTs, because the values are not necessarily strings. The instruction can only be used where the keys (field names) take the form of NCNames.&lt;/p&gt;
&lt;p&gt;If variable entries are required, or entries whose keys are not NCNames, they can appear as child instructions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:record author="string(AUTHOR)"
                                title="string(TITLE)" 
                                price="xs:decimal(PRICE)" 
                                publisher="string(../@name)"&amp;gt;
              &amp;lt;xsl:if test="@private"&amp;gt;
                  &amp;lt;xsl:map-entry name="'private entry'" select="true()"/&amp;gt;
              &amp;lt;/xsl:if&amp;gt;
          &amp;lt;/xsl:record&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Follow the tradition of LREs, duplicates are resolved as "last one wins".&lt;/p&gt;
&lt;p&gt;If "standard attributes" such as &lt;code&gt;[xsl:]version&lt;/code&gt; are required, they must be in the XSLT namespace, as with LREs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #321 created</title>
   <pubDate>Thu, 26 Jan 2023 04:12:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/321</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-321</guid>
   <description>&lt;div&gt;&lt;p&gt;relax $input in fn:serialize&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Relevant specifications:
https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-serialize&lt;/p&gt;
&lt;p&gt;Would it be possible to relax the strictures on &lt;code&gt;$input&lt;/code&gt; (first parameter) of &lt;code&gt;fn:serialize()&lt;/code&gt;?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The specifications do not explicitly forbid &lt;code&gt;map(*)&lt;/code&gt; or &lt;code&gt;array(*)&lt;/code&gt; as input, but in practice, when these are supplied, Saxon rejects them. Developers (or at least this one) who work with arrays and maps often need to render them in string output or messages, if only for diagnostics. If there is something really prohibitively wrong with those two items as input to &lt;code&gt;fn:serialize()&lt;/code&gt;, then the specifications should say so.&lt;/li&gt;
&lt;li&gt;Attributes are forbidden, but it is unclear why. They get serialized fine in the context of a parent, why not alone?&lt;/li&gt;
&lt;li&gt;Namespace nodes are forbidden; see previous point.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(No doubt there must have been discussion on points 2-3, but the rationale is not clear from the specs.)&lt;/p&gt;
&lt;p&gt;Perhaps the question is that the details of what the serialization should look like is contestable. I think the answer there is simply, pick one. I think we'll happily live with whatever is chosen.&lt;/p&gt;
&lt;p&gt;For the serialization of maps and arrays, I'll point as one possible model my &lt;a href="https://github.com/textalign/TAN-2021/blob/9d2215e36da1f64bddad9daddfc5aa2242e17c81/functions/maps/TAN-fn-maps-extended.xsl#L58"&gt;tan:map-to-xml()&lt;/a&gt; and &lt;a href="https://github.com/textalign/TAN-2021/blob/9d2215e36da1f64bddad9daddfc5aa2242e17c81/functions/arrays/TAN-fn-arrays-extended.xsl#L66"&gt;tan:array-to-xml()&lt;/a&gt;, which have been indispensable for daily troubleshooting.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #320 created</title>
   <pubDate>Wed, 25 Jan 2023 18:58:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/320</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-320</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 98 - add options parameter to fn:deep-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal adds an options parameter to fn:deep-equal, giving much more detailed control over how the comparison is performed (while remaining backwards compatible by default).&lt;/p&gt;
&lt;p&gt;This proposal is a first draft and I would request careful review, it's not one to pass through "on the nod".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #319 created</title>
   <pubDate>Wed, 25 Jan 2023 16:20:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/319</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-319</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 221: op:same-key becomes fn:atomic-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The proposal renames op:same-key as fn:atomic-equal, thus making it directly available to applications.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #294 closed</title>
   <pubDate>Wed, 25 Jan 2023 14:56:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/294</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-294</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:remove removing multiple items&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #318 created</title>
   <pubDate>Wed, 25 Jan 2023 11:36:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/318</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-318</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization HTML/XHTML output methods: meta elements and the charset attribute&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;HTML5 introduces the ability to write&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;meta charset="utf-8"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;in place of&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The serialization spec (for HTML and XHTML output methods) ignores this.&lt;/p&gt;
&lt;p&gt;(a) it requires the serializer to add a &lt;code&gt;meta&lt;/code&gt; element in the second form rather than the first.&lt;/p&gt;
&lt;p&gt;(b) when removing existing &lt;code&gt;meta&lt;/code&gt; elements, it requires the second form to be deleted, but not the first. This may result in invalid (X)HTML in which both elements are present.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #309 closed</title>
   <pubDate>Tue, 24 Jan 2023 17:20:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/309</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-309</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop ternary conditionals, as agreed on 2023-01-17&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #310 closed</title>
   <pubDate>Tue, 24 Jan 2023 17:20:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/310</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-310</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix outstanding issues from PR 304&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #312 closed</title>
   <pubDate>Tue, 24 Jan 2023 17:20:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/312</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-312</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor editorial improvements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #313 closed</title>
   <pubDate>Tue, 24 Jan 2023 17:19:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/313</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-313</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 294: fn:remove()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #317 created</title>
   <pubDate>Tue, 24 Jan 2023 17:16:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/317</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-317</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-integer: $lang → $language ?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A minor inconsistency in the XQFO specification: The third parameter of &lt;code&gt;fn:format-integer&lt;/code&gt; is named &lt;code&gt;$lang&lt;/code&gt;…&lt;/p&gt;
&lt;p&gt;https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-format-integer&lt;/p&gt;
&lt;p&gt;…whereas all other language parameters are named &lt;code&gt;$language&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 019 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 24 Jan 2023 17:11:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/01-24</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-01-24</guid>
</item><item>
   <title>Issue #316 created</title>
   <pubDate>Mon, 23 Jan 2023 16:23:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/316</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-316</guid>
   <description>&lt;div&gt;&lt;p&gt;Function fn:differences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I didn't see any issues thread devoted &lt;code&gt;fn:differences()&lt;/code&gt;, so am opening this one. Please respond with xrefs to anything relevant.&lt;/p&gt;
&lt;p&gt;Draft here:
https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-differences&lt;/p&gt;
&lt;p&gt;IMO, this function seems overly complicated for both users and implementors. The specs provide difficult reading. But it is the first function to try to address the desideratum for differencing. Something like it is needed methinks.&lt;/p&gt;
&lt;p&gt;My suggestion would be to simplify the function as a straightforward string comparison, i.e., change the signature to something like &lt;code&gt;fn:differences($input1 as xs:string, $input2 as xs:string) as OUTPUT&lt;/code&gt; where &lt;code&gt;OUTPUT&lt;/code&gt; is either a tree structure (like the output of &lt;code&gt;fn:analyze-string()&lt;/code&gt;) or a sequence of records (e.g., &lt;code&gt;(is-in-1 as xs:boolean, is-in-2 as xs:boolean, fragment as xs:string)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Such a change would make the function more tractable for both users and implementers. The user, would need to cast each sequence to a string, and in so doing will be able to (be compelled to) make fine-grained decisions on things such as normalization. Processor implementers have far simpler input, and they can choose the difference algorithm that makes best sense at the moment.&lt;/p&gt;
&lt;p&gt;One counterargument might be that the resultant output would be difficult to correlate to the original sequences. Ostensibly, one wants to do things such as decide whether to drop certain items in sequence 1 or sequence 2. My response is that the current draft results in output that suffers from the same problem. Navigating the map to correlate it to the original sequence sounds daunting. With my suggestion, there are ways around this, through auxiliary functions or arity expansions that normalize the output.&lt;/p&gt;
&lt;p&gt;But I don't want to get postprocessing output here, which would be tangential to the main question, i.e., how &lt;code&gt;fn:differences()&lt;/code&gt; should be constructed in a way conducive to both users and implementers.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #311 closed</title>
   <pubDate>Mon, 23 Jan 2023 11:46:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/311</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-311</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet fix to mark optional fields in record definitions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #62 closed</title>
   <pubDate>Sat, 21 Jan 2023 00:16:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/62</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-62</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] The parameter types for fn:unique and array:partition are incorrectly specified.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #71 closed</title>
   <pubDate>Sat, 21 Jan 2023 00:14:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/71</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-71</guid>
   <description>&lt;div&gt;&lt;p&gt;[XSLT] Use of multiple predicates: order of evaluation&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #171 closed</title>
   <pubDate>Fri, 20 Jan 2023 23:44:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/171</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-171</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath ternary conditional operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #315 created</title>
   <pubDate>Wed, 18 Jan 2023 14:58:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/315</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-315</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:transform inconsistency: initial-mode&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;fn:transform&lt;/code&gt; specification in F+O says that if no initial-mode is supplied, the unnamed mode is used.&lt;/p&gt;
&lt;p&gt;The XSLT 3.0 specification says that if no initial mode is supplied, then the default mode is used if one has been specified, or the unnamed mode is used if not.&lt;/p&gt;
&lt;p&gt;I think the XSLT 3.0 spec should win here: it makes more sense if a default has been declared that it should actually be used.&lt;/p&gt;
&lt;p&gt;(Thanks to Amanda Galtman for pointing this out.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #314 created</title>
   <pubDate>Wed, 18 Jan 2023 09:24:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/314</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-314</guid>
   <description>&lt;div&gt;&lt;p&gt;Basic Operations on Maps and Arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;Manipulating Arrays and Maps&lt;/h1&gt;
&lt;p&gt;This is an outline of proposed new facilities designed to make processing of maps and arrays easier. The basic facilities needed for transformation of maps and arrays are the ability to decompose them into their parts, manipulate the parts, and the compose new arrays and maps from these parts.&lt;/p&gt;
&lt;p&gt;Further background is in my 2022 Balisage paper, https://balisage.net/Proceedings/vol27/html/Kay01/BalisageVol27-Kay01.html&lt;/p&gt;
&lt;p&gt;This proposal considers only the "shallow" operations on maps and arrays. Further proposals for deep search and update of nested structures are to be expected.&lt;/p&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;A map entry is an item used to represent a key-value pair in a map; it is an item of type &lt;code&gt;record(key as xs:anyAtomicType, value as item()*)&lt;/code&gt;, aliased in this proposal as &lt;code&gt;type(map-entry)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note: &lt;em&gt;an alternative representation for key-value pairs is as a singleton map, and that's the representation used by the existing map:entry() function and by the xsl:map-entry instruction. A representation as &lt;code&gt;record(key, value)&lt;/code&gt; is rather more convenient to enable extraction of the key and value, but does create some compatibility issues...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An array entry is an item used to represent a member of an array; it is an item of type &lt;code&gt;record(value as item()*)&lt;/code&gt;, aliased in this proposal as &lt;code&gt;type(array-entry)&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Decomposing Maps and Arrays&lt;/h2&gt;
&lt;p&gt;The function &lt;code&gt;map:entries($map)&lt;/code&gt; returns a sequence of map entries, in unpredictable order, representing the contents of the supplied map. It is equivalent to &lt;code&gt;map:for-each($map, -&amp;gt;($k, $v){map:entry($k, $v)})&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;array:entries($array)&lt;/code&gt; returns a sequence of array entries, in array order, representing the members of the supplied array. It is equivalent to &lt;code&gt;array:for-each($array, -&amp;gt;($v){array:entry($v)})&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Constructing Maps and Arrays&lt;/h2&gt;
&lt;p&gt;The function &lt;code&gt;map:of($entries as type(map-entry)*) as map(*)&lt;/code&gt; constructs a map from a sequence of map entries. A second parameter, &lt;code&gt;$options&lt;/code&gt;, is available to control handling of duplicates, as with &lt;code&gt;map:merge()&lt;/code&gt;. The function is equivalent to &lt;code&gt;map:merge($entries!map{'key':?key, 'value':?value})&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;array:of($entries as type(array-entry)*) as array(*)&lt;/code&gt; constructs an array from a sequence of array entries. It is equivalent to &lt;code&gt;array:fold-left($entries, [], array:append#2)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;map:entry($key, $value) as type(map-entry)&lt;/code&gt; is equivalent to &lt;code&gt;map{'key':$key, 'value':$value}&lt;/code&gt;. &lt;em&gt;Problem: we already have a function map:entry() in 3.1 that does something different. Need to change the terminology...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;array:entry($value) as type(array-entry)&lt;/code&gt; is equivalent to &lt;code&gt;map{'value':$value}&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Filtering Maps and Arrays&lt;/h2&gt;
&lt;p&gt;The construct &lt;code&gt;$map?[PREDICATE]&lt;/code&gt; is equivalent to &lt;code&gt;map:of(map:entries($map)[PREDICATE])&lt;/code&gt;. For example, given a map in which the keys are dates, &lt;code&gt;$map?[year-from-date(?key)=2023]&lt;/code&gt; returns a map containing those entries in which the key is a date in 2023.&lt;/p&gt;
&lt;p&gt;The construct &lt;code&gt;$array?[PREDICATE]&lt;/code&gt; is equivalent to &lt;code&gt;array:of(array:entries($array)[PREDICATE])&lt;/code&gt;. For example, &lt;code&gt;$array?[1]&lt;/code&gt; selects the first item in the array (as a single-member array), while &lt;code&gt;$array?[exists(?value)]&lt;/code&gt; returns an array containing all those entries in the input array that are not empty. If &lt;code&gt;$array&lt;/code&gt; is an array of maps, then &lt;code&gt;$array?[?value?name='John']&lt;/code&gt; selects those members of the array that are maps having &lt;code&gt;?name='John'&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Mapping Maps and Arrays&lt;/h2&gt;
&lt;p&gt;The construct &lt;code&gt;$map!!EXPR&lt;/code&gt; evaluates &lt;code&gt;EXPR&lt;/code&gt; once for each entry in &lt;code&gt;$map&lt;/code&gt; and returns the result as a flattened sequence. For example &lt;code&gt;map:of($map!!map:entry(?key, ?value+1))&lt;/code&gt; returns a map in which each value has been incremented by one.&lt;/p&gt;
&lt;p&gt;The construct &lt;code&gt;$array!!EXPR&lt;/code&gt; evaluates &lt;code&gt;EXPR&lt;/code&gt; once for each entry in &lt;code&gt;$array&lt;/code&gt;, and returns the result as a flattened sequence. For example, &lt;code&gt;array:of($array!!array:entry(?value+1))&lt;/code&gt; returns an array in which every value has been incremented by one.&lt;/p&gt;
&lt;h2&gt;FLWOR Expressions&lt;/h2&gt;
&lt;p&gt;The for-member clause &lt;code&gt;for member $m in $array&lt;/code&gt; is equivalent to &lt;code&gt;for $sys:var in array:entries($array) let $m := $sys:var?value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The for-entry clause &lt;code&gt;for entry ($k, $v) in $map&lt;/code&gt; is equivalent to &lt;code&gt;for $sys:var in map:entries($map) let $k := $sys:var?key, $v := $sys:var?value&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;XSLT&lt;/h2&gt;
&lt;p&gt;Iteration over maps and arrays is achieved using &lt;code&gt;&amp;lt;xsl:for-each select="array:entries()"&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;xsl:for-each select="map:entries()"&amp;gt;&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;Construction of maps uses the existing instructions &lt;code&gt;&amp;lt;xsl:map&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;xsl:map-entry&amp;gt;&lt;/code&gt;. There is an inconvenience here in that the &lt;code&gt;&amp;lt;xsl:map-entry&amp;gt;&lt;/code&gt; instruction returns a singleton map (&lt;code&gt;map{key:value}&lt;/code&gt;) rather than a map entry as defined in this proposal (&lt;code&gt;map{'key':key, 'value':value}&lt;/code&gt;)..&lt;/p&gt;
&lt;p&gt;Construction of arrays uses the new instructions &lt;code&gt;&amp;lt;xsl:array&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;xsl:array-entry&amp;gt;&lt;/code&gt;. The &lt;code&gt;xsl:array-entry&lt;/code&gt; instruction is defined to construct an array entry as defined in this proposal.&lt;/p&gt;
&lt;h2&gt;Use Cases&lt;/h2&gt;
&lt;p&gt;To be supplied.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #313 created</title>
   <pubDate>Tue, 17 Jan 2023 22:53:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/313</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-313</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 294: fn:remove()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Allow remove() to remove several items, aligning it with array:remove() and map:remove()&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #312 created</title>
   <pubDate>Tue, 17 Jan 2023 22:25:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/312</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-312</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor editorial improvements&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;Issue 300 (clarification about results being normalized)&lt;/li&gt;
&lt;li&gt;Action QT4CG-018-02 (explaining signature notation)&lt;/li&gt;
&lt;li&gt;Action QT4CG-018-04 (explaining numeric predicates on ancestor unions)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #311 created</title>
   <pubDate>Tue, 17 Jan 2023 21:39:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/311</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-311</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet fix to mark optional fields in record definitions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #310 created</title>
   <pubDate>Tue, 17 Jan 2023 21:27:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/310</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-310</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix outstanding issues from PR 304&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See https://github.com/qt4cg/qtsp…ecs/pull/304#issuecomment-1378532583 - but excluding item 3 because that's a stylesheet change.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #309 created</title>
   <pubDate>Tue, 17 Jan 2023 19:20:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/309</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-309</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop ternary conditionals, as agreed on 2023-01-17&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We agreed today to drop ternary conditional expressions from the proposal; this PR implements that change.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 018 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 17 Jan 2023 16:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/01-17</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-01-17</guid>
</item><item>
   <title>Issue #286 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:14:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/286</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-286</guid>
   <description>&lt;div&gt;&lt;p&gt;Spec changes to allow child::(a|b|c) - Issue 107&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #290 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:14:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/290</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-290</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #18 (function type hierarchy)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #35 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:13:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/35</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-35</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO]The `union ( | )`, `itersect`, `except`  and `combine (,)` operators are not mentioned in the F &amp;amp; O. Have not the best categorization in the XPath spec.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #288 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:13:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/288</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-288</guid>
   <description>&lt;div&gt;&lt;p&gt;Error in fn:path specification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #257 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:13:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/257</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-257</guid>
   <description>&lt;div&gt;&lt;p&gt;Improving the styling/presentation/prepresentation of the record types in the F&amp;amp;O spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #70 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:13:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/70</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-70</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Built-in function changes to support default values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #291 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:13:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/291</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-291</guid>
   <description>&lt;div&gt;&lt;p&gt;DTD validity of F&amp;amp;O spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #304 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:13:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/304</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-304</guid>
   <description>&lt;div&gt;&lt;p&gt;Mike's content changes from PR 292&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #284 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:12:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/284</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-284</guid>
   <description>&lt;div&gt;&lt;p&gt;Add grammar for "if (test) then {expr}" with no else&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #308 created</title>
   <pubDate>Sun, 15 Jan 2023 17:05:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/308</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-308</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve the legends in the diagrams&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR completes my action QT4CG-015-03: NW to make sure the direction of the arrow is in the legends&lt;/p&gt;
&lt;p&gt;I also made sure the legends aren't too wide. I still have more work to do for the other actions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #259 closed</title>
   <pubDate>Sun, 15 Jan 2023 16:46:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/259</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-259</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue #74 - add the fn:parse-html function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 018 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sun, 15 Jan 2023 15:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/01-17</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-01-17</guid>
</item><item>
   <title>Issue #306 closed</title>
   <pubDate>Sun, 15 Jan 2023 16:17:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/306</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-306</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:char - editors actions from 2023-01-10&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #307 created</title>
   <pubDate>Sun, 15 Jan 2023 15:42:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/307</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-307</guid>
   <description>&lt;div&gt;&lt;p&gt;Parsing and building URIs comments and queries&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;fn:build-uri states:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;If the scheme key is present in the map, the URI begins with the value of that key concatenated with //, otherwise it begins //.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;a. Shouldn't the concatenation be &lt;code&gt;://&lt;/code&gt; so e.g. &lt;code&gt;http&lt;/code&gt; becomes &lt;code&gt;http://&lt;/code&gt;?
b. How are non-heirarchical schemes handled like &lt;code&gt;urn&lt;/code&gt;, and &lt;code&gt;mailto&lt;/code&gt;?&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;RFC 3986 allows IPv6 and IPvFuture addresses that contain &lt;code&gt;:&lt;/code&gt; characters, e.g. &lt;code&gt;http://[::1]:80&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My understanding of fn:parse-uri is that this will fail to parse.&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;RFC 3986 states that for userinfo, the &lt;code&gt;user:password&lt;/code&gt; form is deprecated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Browsers will reject this due to the security risk, and the RFC suggests that applications should not render the password (the part after the &lt;code&gt;:&lt;/code&gt;) in clear text. -- Should fn:build-uri follow suite, or (along with fn:parse-uri) have an option to control the behaviour (keep, remove, invalid), where if the option is invalid, it will throw an fn:error?&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;RFC 3986 suggests that the port should be omitted if it matches the default for the scheme&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Should fn:build-uri have this behaviour?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #306 created</title>
   <pubDate>Tue, 10 Jan 2023 21:23:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/306</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-306</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:char - editors actions from 2023-01-10&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes to the new fn:char function (issue #121) as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Action QT4CG-017-01 clarifies the definition of formats #nnn and #xnnn.&lt;/li&gt;
&lt;li&gt;Action QT4CG-017-02 changes the order of the rules&lt;/li&gt;
&lt;li&gt;In discussion it was asked whether any HTML5 entity names refer to strings comprising more than one character. On investigation it appears that they do, and the spec has been revised to allow for this.&lt;/li&gt;
&lt;li&gt;added history/status information&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #121 closed</title>
   <pubDate>Tue, 10 Jan 2023 17:20:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/121</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-121</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:nl, fn:tab, fn:cr&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 017 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 10 Jan 2023 16:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/01-10</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-01-10</guid>
</item><item>
   <title>Issue #261 closed</title>
   <pubDate>Tue, 10 Jan 2023 17:19:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/261</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-261</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposed fn:char function - see issue 121&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #305 created</title>
   <pubDate>Mon, 9 Jan 2023 17:50:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/305</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-305</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-xml() and whitespace stripping&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There seems to be nothing in either the XSLT spec or in F+O that says explicitly whether stylesheet-defined space stripping rules (xsl:strip-space and xsl:preserve-space) apply to documents loaded using &lt;code&gt;fn:parse-xml&lt;/code&gt; (or, by extension, &lt;code&gt;parse-html&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The spec says that these rules apply to "source trees" defined as "any tree provided as input to the transformation. This includes the document containing the [global context item] if any, documents containing nodes present in the [initial match selection], documents containing nodes supplied as the values of [stylesheet parameters], documents obtained from the results of functions such as [document], [doc], and [collection]...".&lt;/p&gt;
&lt;p&gt;I guess one reasonable interpretation is that the "such as" includes &lt;code&gt;parse-xml()&lt;/code&gt;. But it goes rather against the grain that the behaviour of parse-xml() should be affected by the containing stylesheet declarations, when there is no mention of such a context-dependency in the function specification; in this, parse-xml() is rather different from doc() which deliberately says very little about how the XDM instance returned relates to the URI supplied as input.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #292 closed</title>
   <pubDate>Mon, 9 Jan 2023 09:43:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/292</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-292</guid>
   <description>&lt;div&gt;&lt;p&gt;Merge signatures with optional params&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #304 created</title>
   <pubDate>Mon, 9 Jan 2023 09:32:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/304</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-304</guid>
   <description>&lt;div&gt;&lt;p&gt;Mike's content changes from PR 292&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I teased apart some of the omnibus PR #292. I've commited the schema and stylesheet changes. This PR covers the remaining prose changes.&lt;/p&gt;
&lt;p&gt;Mike writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I regret that this has turned into a bit of an omnibus PR. The main changes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fix validity issues with the function catalog and its schema (Issue 291)&lt;/li&gt;
&lt;li&gt;Convert all functions to use a single signature with optional parameters (Issue 70)&lt;/li&gt;
&lt;li&gt;Extend the function catalog to handle record definitions (Issue 257)&lt;/li&gt;
&lt;li&gt;Fix the (trivial) bug with properties of fn:path (Issue 288)&lt;/li&gt;
&lt;li&gt;Add introductory text concerning the handling of operators (Issue 35)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fix #291
Fix #70
Fix #257
Fix #288
Fix #35&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #303 closed</title>
   <pubDate>Mon, 9 Jan 2023 07:38:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/303</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-303</guid>
   <description>&lt;div&gt;&lt;p&gt;Mike's proposed schema and stylesheet changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #303 created</title>
   <pubDate>Mon, 9 Jan 2023 07:32:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/303</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-303</guid>
   <description>&lt;div&gt;&lt;p&gt;Mike's proposed schema and stylesheet changes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;These are the schema and stylesheet changes from PR #292. They don't break the build and on casual inspection they seem fine, so I'm just going to accept them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 017 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 6 Jan 2023 16:02:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/01-10</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-01-10</guid>
</item><item>
   <title>Issue #300 created</title>
   <pubDate>Fri, 6 Jan 2023 16:19:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/300</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-300</guid>
   <description>&lt;div&gt;&lt;p&gt;[F+O] Ambiguity regarding Unicode normalization (editorial)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In §1.7.1 the paragraph&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unless explicitly stated, the xs:string values returned by the
functions in this document are not normalized in the sense of
[Character Model for the World Wide Web 1.0: Fundamentals].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;is a little bit ambiguous for my taste. By "are not normalized" it means "no action is taken to normalize the strings", it doesn't mean "the strings will not be in normalized form".&lt;/p&gt;
&lt;p&gt;I suggest: "Unless explicitly stated, the functions in this document operate on strings as sequences of codepoints and do not attempt to convert input strings, or produce output strings, in Unicode normalized form. Unicode normalization occurs only when explicitly requested, for example by use of the &lt;code&gt;fn:normalize-unicode&lt;/code&gt; function."&lt;/p&gt;
&lt;p&gt;At the same time we might update the reference to point to "Character Model for the World Wide Web: String Matching", revised in 2021, though it is still only a Working Group Note. See https://www.w3.org/TR/charmod-norm/#unicodeNormalization&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #281 closed</title>
   <pubDate>Mon, 2 Jan 2023 18:12:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/281</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-281</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath: Short-circuiting Functions and Lazy Evaluation Hints&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #299 created</title>
   <pubDate>Mon, 2 Jan 2023 18:08:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/299</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-299</guid>
   <description>&lt;div&gt;&lt;p&gt;Short-circuiting functions, function-arity guards and lazy hints&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;&lt;strong&gt;I. Shortcutting and lazy hints&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Let us have this expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $f := function($arg1 as item()*, $arg2 as item()*) as function(item()*) as item()*
             {  (: Some code here :) }
  return
    $f($x) ($y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evaluating &lt;strong&gt;&lt;code&gt;$f($x)&lt;/code&gt;&lt;/strong&gt; produces a function. The &lt;strong&gt;actual arity&lt;/strong&gt; of this resulting function can be any number &lt;strong&gt;&lt;code&gt;N &amp;gt;= 0&lt;/code&gt;&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If &lt;strong&gt;&lt;code&gt;N &amp;gt; 1&lt;/code&gt;&lt;/strong&gt; there would be arity mismatch error, as only one argument &lt;code&gt;$y&lt;/code&gt; is provided in the expression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;strong&gt;&lt;code&gt;N = 1&lt;/code&gt;&lt;/strong&gt; the final function call can be evaluated, and the argument &lt;code&gt;$y&lt;/code&gt;   must be evaluated,  or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If &lt;code&gt;N = 0&lt;/code&gt;, then  &lt;code&gt;$y&lt;/code&gt; is unneeded and can safely be ignored&lt;/strong&gt; according to the updated &lt;strong&gt;“&lt;a href="https://qt4cg.org/pr/279/xquery-40/xpath-40.html#id-coercion-rules"&gt;Coercion Rules / Function Coercion&lt;/a&gt;”&lt;/strong&gt; in Xpath 4.0.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Because a possibility exists to be able to ignore the evaluation of &lt;code&gt;$y&lt;/code&gt;, it is logical to delay the evaluation of &lt;code&gt;$y&lt;/code&gt; until the actual arity of &lt;code&gt;$f($x)&lt;/code&gt; is known&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The current XPath 4.0 evaluation rules do not require an implementation to base its decision whether or not to evaluate &lt;code&gt;$y&lt;/code&gt; on the actual arity of the function produced by &lt;code&gt;$f($x)&lt;/code&gt;, thus at present an implementation could decide to evaluate &lt;code&gt;$y&lt;/code&gt; regardless of the actual arity of the function produced by &lt;code&gt;$f($x)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is where a &lt;em&gt;lazy&lt;/em&gt; hint comes&lt;/strong&gt;: it indicates to the XPath processor that &lt;em&gt;&lt;strong&gt;it is logical to make the decision about evaluation of &lt;code&gt;$y&lt;/code&gt; based on the actual arity of the function returned by &lt;code&gt;$f($x)&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A rewrite of the above expression using a &lt;strong&gt;&lt;em&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/em&gt;&lt;/strong&gt; hint looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $f := function($arg1 as item()*, $arg2 as item()*) as function(item()*) as item()*
             {  (: Some code here :) }  
  return
    $f($x) (lazy $y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is one example of a function with short-cutting and calling it with a &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; hint:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, $y as xs:boolean) as xs:boolean
             {
                let $partial := function($x as xs:boolean) as function(xs:boolean) as  xs:boolean
                                {
                                  if(not($x)) then -&amp;gt;(){false()}
                                              else -&amp;gt;($t) {$t}
                                }
                 return $partial($x)($y)
             }
  return
     $fAnd($x (: possibly false() :), lazy $SomeVeryComplexAndSlowComputedExpression)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Without the &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; hint in the above example, it is perfectly possible that an XPath implementation, unrestricted by the current rules, would evaluate &lt;em&gt;&lt;code&gt;$SomeVeryComplexAndSlowComputedExpression&lt;/code&gt;&lt;/em&gt; - something that is unneeded and could be avoided completely&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Formal syntax and semantics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword should immediately precede any argument in a function call. If specified, it means that &lt;strong&gt;&lt;em&gt;it is logical to make the decision about evaluation of this argument based on the actual arity of the function in this function call&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Based on this definition, it follows that &lt;strong&gt;&lt;em&gt;&lt;code&gt;lazy $argK&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; implies &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; for all arguments following &lt;code&gt;$argK&lt;/code&gt; in the function call. Thus specifying more than one &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; hint within a given function call is redundant and an implementation may report this redundancy to the user.&lt;/p&gt;
&lt;p&gt;The scope of a &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword specified on an argument is this and all following arguments of (only) the current function call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to specify a &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword that is in force for the respective argument(s) of all function calls of the given function. To do this, the &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword must  be  specified immediately preceding a parameter name in the function definition of that function.&lt;/p&gt;
&lt;p&gt;For example, if the function &lt;strong&gt;&lt;code&gt;$f&lt;/code&gt;&lt;/strong&gt; is specified as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $f := function($arg1 as item()*, lazy $arg2 as item()*, $arg3 as item()*, $arg4 as item()* ) 
          { (: some code here:) }
  return
     $someExpression
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then any call of &lt;strong&gt;&lt;code&gt;$f&lt;/code&gt;&lt;/strong&gt; in its definition scope that has the form:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;$f($x, $y, $z, $t)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;$f($x, lazy $y, $z, $t)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to specify the &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword immediately preceding a function definition. This instructs the XPath processor that any call of this function is only necessary to be evaluated if the function is actually called during the evaluation of the expression that contains this function call.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $complexComputation := lazy function($x, $y) {$x + $y}, (: Make it as complex as you want ... :)
     $someCondition := function()
        {
            let $date := current-date()
              return
                  month-from-date($date) eq 2
                and 
                 day-from-date($date) eq 29 
       }
  return if($someCondition()) 
           then $complexComputation(2, 3)
           else 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifying the &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword in the function definition for &lt;code&gt;$complexComputation&lt;/code&gt; can save significant computing resources, because the programmer knows that &lt;code&gt;$someCondition()&lt;/code&gt; is true during only a single day in any 4-years period.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;&lt;strong&gt;II.fn:lazy&lt;/strong&gt;&lt;/h1&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Applied on a single argument that can be any &lt;em&gt;expression&lt;/em&gt;. Lazily returns its argument &lt;em&gt;expression&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Signature&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;lazy fn:lazy( 
        $expression as item()*
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Properties&lt;/h2&gt;
&lt;p&gt;This function is &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-deterministic"&gt;deterministic&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-context-independent"&gt;context-independent&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-focus-independent"&gt;focus-independent&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Rules&lt;/h2&gt;
&lt;p&gt;The semantics of the function is strictly defined below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $lazyFunction := lazy fn:identity#1
   return
      (: AnyExpression here :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any expression &lt;strong&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/strong&gt; of the form:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;Q(E1, lazy(E2))&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;where &lt;strong&gt;&lt;code&gt;E1&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;E2&lt;/code&gt;&lt;/strong&gt; are subexpressions of &lt;strong&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/strong&gt;, must be evaluated by the Processor in two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Substitute the expression&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;Q(E1, lazy(E2))&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;Q(E1, ?) (lazy E2)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evaluate the latter according to the rules for a &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; argument&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;We can use almost the same example as above, but here &lt;code&gt;$complexComputation&lt;/code&gt; is defined without the &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword and thus is not a &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; function. To have &lt;code&gt;$complexComputation&lt;/code&gt; evaluated lazily, we call the &lt;code&gt;lazy()&lt;/code&gt; function, passing &lt;code&gt;$complexComputation&lt;/code&gt;  to it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $complexComputation := (: no lazy here :) function($x, $y) {$x + $y}, (: Make it as complex as you want ... :)
     $someCondition := function()
        {
            let $date := current-date()
              return
                  month-from-date($date) eq 2
                and 
                 day-from-date($date) eq 29 
       }
  return 
        $someCondition() and lazy( $complexComputation(2, 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the expression &lt;strong&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/strong&gt; is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;$someCondition() and lazy( $complexComputation(2, 3))&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This  is the same as:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:op("and")($someCondition(), lazy( $complexComputation(2, 3))&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;According to the Rules above, the processor converts this to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:op("and")($someCondition(), ?) (lazy( $complexComputation(2, 3)) )&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$someCondition()&lt;/code&gt; is evaluated and if its value is &lt;code&gt;false()&lt;/code&gt;,   then the expression to be evaluated is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:op("and")(false(), ?) (lazy( $complexComputation(2, 3)) )&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:op("and")(false(), ?)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; by definition is &lt;strong&gt;&lt;em&gt;&lt;code&gt;function() {false()}&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;. then the final result &lt;strong&gt;&lt;code&gt;false()&lt;/code&gt;&lt;/strong&gt; is produced and the unnecessary argument &lt;strong&gt;&lt;em&gt;&lt;code&gt;$complexComputation(2, 3)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; is not evaluated at all.&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;III. A function's arity is a guard for its arguments&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Let us have a  function &lt;strong&gt;&lt;code&gt;$f&lt;/code&gt;&lt;/strong&gt; defined as below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $f := function($arg1 as item()*, $arg2 as item()*, …, $argN as item()*)
   as function(item()*, item()*, …, item()*) as item()*
     {
       if($cond0($arg1))       then -&amp;gt; () { 123 }
        else if($cond1($arg1)) then -&amp;gt; ($Z1 as item()*) {$Z1}
        else if($cond2($arg1)) then -&amp;gt; ($Z1 as item()*, $Z2 as item()*) {$Z1 + $Z2}
        (:    .        .        .        .         .        .        .         .  :)
        else if($condK($arg1)) then -&amp;gt; ($Z1 as item()*, $Z2 as item()*, …, $Zk as item()*)
                                       {$Z1 + $Z2 + … + $Zk}
        else ()
     }
  return
     $f($y1, $y2, …, $yN) ($z1, $z2, …, $zk)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A call to &lt;strong&gt;&lt;code&gt;$f&lt;/code&gt;&lt;/strong&gt; returns a function whose arity may be any of the numbers: 0, 1, …, K.&lt;/p&gt;
&lt;p&gt;Depending on the arity of the returned function (0, 1, …, K), the last (K, K-1,  K-2, …, 2, 1, 0) arguments of the function call:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;$f($y1, $y2,  .  .  . , $yN) ($z1, $z2, .  .  . , $zk)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;are unneeded and it is logical that they would not need to be evaluated&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, the actual arity of the result of calling &lt;strong&gt;&lt;code&gt;$f&lt;/code&gt;&lt;/strong&gt; is a guard for the arguments of a call to this function-result&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Thus, one more bullet needs to be added to [2.4.5 Guarded Expressions] https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-guarded-expressions), specifying an additional guard-type:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In an expression of the type &lt;code&gt;E(A1, A2, ..., AN)&lt;/code&gt; any of the arguments &lt;code&gt;A&lt;/code&gt;&lt;sub&gt;K&lt;/sub&gt; is guarded by the condition
&lt;code&gt;actual-arity(E) ge K&lt;/code&gt;. This rule has the consequence that if the actual arity of &lt;code&gt;E()&lt;/code&gt; is less than &lt;code&gt;K&lt;/code&gt; then if any argument &lt;code&gt;Am&lt;/code&gt; (where &lt;code&gt;m &amp;gt;= K&lt;/code&gt;) is evaluated, this must not raise a dynamic error. An implementation may base on the actual arity of &lt;code&gt;E()&lt;/code&gt; its decision for the evaluation of the arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #298 created</title>
   <pubDate>Mon, 2 Jan 2023 15:36:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/298</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-298</guid>
   <description>&lt;div&gt;&lt;p&gt;Abstract supertype for map and array&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've been wondering whether there would be any mileage in introducing an abstract super type for map() and array(), perhaps called lookup(). This would basically treat an array as a map with integer keys.&lt;/p&gt;
&lt;p&gt;This would allow a cleaner type signature for map:find() and any future functions such as xx:search() that work both on maps and arrays. It might simplify the description of the lookup operator "?". For functions that already exist in both the map and array namespaces, such as get(), we could introduce a unified function in the fn namespace with the cosmetic benefit of reducing the need for namespace prefixes and namespace declarations.&lt;/p&gt;
&lt;p&gt;I'm still keen to find a better way of doing iteration, filtering, mapping, and construction of maps and arrays, and I think this might be a useful stepping stone.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #297 created</title>
   <pubDate>Wed, 28 Dec 2022 23:51:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/297</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-297</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup in deeply nested JSON, an abbreviated syntax for map:find&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XML, you can select all X nodes with an abbreviated syntax //X&lt;/p&gt;
&lt;p&gt;There is no abbreviated syntax for JSON&lt;/p&gt;
&lt;p&gt;I propose to add a ?? syntax. Like / is doubled for //, it doubles the ? lookup operator.&lt;/p&gt;
&lt;p&gt;The syntax is basically the same as for ?:&lt;/p&gt;
&lt;p&gt;[200]  UnaryLookupRecursion  ::=  "??"  KeySpecifier
[143]  LookupRecursion ::=  "??"  KeySpecifier
[144]  KeySpecifier |::=  NCName  |  IntegerLiteral  |  StringLiteral  |  VarRef  |  ParenthesizedExpr  |  "*"&lt;/p&gt;
&lt;p&gt;For the semantic it can call map:find, except for * and varref:&lt;/p&gt;
&lt;p&gt;Unary variant:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;??"string"    becomes map:find(. , "string")
??NCName      becomes map:find( ., "NCName")
??123         becomes map:find(., 123)

??*           Recursively every member/value of every array/map underneath .
              E.g. for `[{"a": {"x": 123}}, 456]`: `{"a": {"x": 123}}, {"x": 123}, 123, 456`

??$varref     calls ?$varref on every nested array/map.
              Like (.,??*)?$varref   (except for type errors)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Postfix variant:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;E??S&lt;/code&gt;   would be &lt;code&gt;E!??S&lt;/code&gt; if it is atomic, or &lt;code&gt;let $s := data(S) return E!??$s&lt;/code&gt; if S is parenthesized&lt;/p&gt;
&lt;p&gt;This probably conflicts with #171&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #296 created</title>
   <pubDate>Thu, 22 Dec 2022 10:44:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/296</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-296</guid>
   <description>&lt;div&gt;&lt;p&gt;Default namespace for elements; especially in the context of HTML&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There can be little doubt that the fact that an unprefixed name in XPath fails to select an unprefixed element in the source document is one of the major gotcha's, causing massive bewilderment to all newbie users.&lt;/p&gt;
&lt;p&gt;The XPath 2.0 solution of using a default element namespace in the static context is a partial solution; its main drawback is that it doesn't help the newbies who didn't know about the problem or its solution.&lt;/p&gt;
&lt;p&gt;The HTML "living standard" introduces a "wilful violation" of the XPath 1.0 spec to address the issue. Given that most elements in an HTML DOM will be in the XHTML namespace, it states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the QName has no prefix and the principal node type of the axis is element, then the default element namespace is used. Otherwise if the QName has no prefix, the namespace URI is null. The default element namespace is a member of the context for the XPath expression. The value of the default element namespace when executing an XPath expression through the DOM3 XPath API is determined in the following way:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If the context node is from an HTML DOM, the default element namespace is "http://www.w3.org/1999/xhtml".
Otherwise, the default element namespace URI is null.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It then adds a note which is blatantly untrue:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is equivalent to adding the default element namespace feature of XPath 2.0 to XPath 1.0, and using the HTML namespace as the default element namespace for HTML documents. It is motivated by the desire to have implementations be compatible with legacy HTML content while still supporting the changes that this specification introduces to HTML regarding the namespace used for HTML elements, and by the desire to use XPath 1.0 rather than XPath 2.0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since the XPath 2.0 facility picks up the default namespace from the static context, while the HTML "wilful violation" picks it up dynamically from a property of the context node (namely "being from an HTML DOM") there is no way these can be considered equivalent.&lt;/p&gt;
&lt;p&gt;(Note also, there's a significant ambiguity in the "wilful violation" rules: what exactly is the "context node" that determines this behaviour? I think they're suggesting it is the context node at the point of XPath API invocation, not the context node for the specific axis step. This makes it rather unclear how the rule is supposed to apply to XSLT. And: if an XSLT stylesheet creates a temporary tree with nodes in the XHTML namespaces, do we consider those nodes as being "from an HTML DOM"?)&lt;/p&gt;
&lt;p&gt;Nevertheless, the intent of the "violation" is worthy, and it would be nice if we can find a solution to this problem that works both for HTML and for other vocabularies.&lt;/p&gt;
&lt;p&gt;Our current proposal for fn:parse-html is that HTML elements should go in the XHTML namespace and this means that users familiar with XPath 1.0 implementations in the browser will trip over this problem. A lot.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #170 closed</title>
   <pubDate>Wed, 21 Dec 2022 00:03:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/170</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-170</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath "otherwise" operator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #191 closed</title>
   <pubDate>Wed, 21 Dec 2022 00:01:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/191</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-191</guid>
   <description>&lt;div&gt;&lt;p&gt;Definition of "dynamic type"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #213 closed</title>
   <pubDate>Tue, 20 Dec 2022 23:57:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/213</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-213</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup/Indexing operator for sequences (supersedes #50)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #295 created</title>
   <pubDate>Tue, 20 Dec 2022 23:43:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/295</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-295</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend support for self-reference in record types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We currently allow a field in a record to have type "..", that is, the same type as the containing record definition.&lt;/p&gt;
&lt;p&gt;This isn't good enough for the fn:random-number-generator, where we need something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;random-number-generator-record:
record(
   number as xs:double,
   next as function() as #random-number-generator-record,
   permute as function(item()*) as item()*,
   *,
)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two ways we could tackle this. We could extend the syntax to allow ".." here, so it becomes
&lt;code&gt;next as function() as ..&lt;/code&gt; Or we could allow named item types to refer to themselves:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:item-type name="random-number-generator-record"
   as="record(
   number as xs:double,
   next as function() as type(random-number-generator-record),
   permute as function(item()*) as item()*,
   *,
)"&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We haven't really reviewed the proposal for named item types. It's easy enough to declare them in XQuery and XSLT (and not really very difficult to define the rules under which self-referential definitions are allowed). Free-standing XPath is a bit more of a problem.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 016 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 20 Dec 2022 17:26:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/12-20</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-12-20</guid>
</item><item>
   <title>Issue #294 created</title>
   <pubDate>Tue, 20 Dec 2022 15:48:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/294</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-294</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:remove removing multiple items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;map:remove&lt;/code&gt; and &lt;code&gt;array:remove&lt;/code&gt; take a list of keys/positions to be removed; fn:remove only accepts one. I propose changing &lt;code&gt;fn:remove&lt;/code&gt; to bring it into line.&lt;/p&gt;
&lt;p&gt;Without this, removing multiple items is tricky because removing one item changes the positions of the others.&lt;/p&gt;
&lt;p&gt;Example use case:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $p := index-where($persons -&amp;gt;{@status='retired'))
return $persons =&amp;gt; remove($p)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Of course, this could always be done with a filter. But removing a small number of items from a large sequence might be more efficient than a filter)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #293 created</title>
   <pubDate>Mon, 19 Dec 2022 20:14:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/293</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-293</guid>
   <description>&lt;div&gt;&lt;p&gt;Error in fn:doc-available specification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Observed on the XML.com slack (Oct 6 2022):&lt;/p&gt;
&lt;p&gt;A rule in the XQFO 3.1 specification seems to be inconsistent. In the error summary, it’s stated that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;err:FODC0005&lt;/code&gt;, Invalid argument to fn:doc or fn:doc-available. Raised (optionally) by &lt;code&gt;fn:doc&lt;/code&gt; and &lt;code&gt;fn:doc-available&lt;/code&gt; if the argument is not a valid URI reference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The rules for &lt;code&gt;fn:doc-available&lt;/code&gt; say: “[…] In all other cases this function returns false. This includes the case where an invalid URI is supplied, and also the case where a valid relative URI reference is supplied, and cannot be resolved, for example because the static base URI is absent.”&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #292 created</title>
   <pubDate>Mon, 19 Dec 2022 18:43:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/292</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-292</guid>
   <description>&lt;div&gt;&lt;p&gt;Merge signatures with optional params&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This addresses issue #291, concerned with the validity of function-catalog.xml against its XSD schema, and the validity of the intermediate file xpath-functions-40.xml against the xmlspec DTD (as amended for QT).&lt;/p&gt;
&lt;p&gt;It also fixes the trivial error raised in issue #288, and addresses issue #70 by making each function have a single prototype with default values where appropriate. (This is not purely an editorial change, it enables you for example to supply () as the $length argument of fn:substring).&lt;/p&gt;
&lt;p&gt;There's more work on issue #257 (editorial improvements to handling of named record types).&lt;/p&gt;
&lt;p&gt;This commit is mainly for technical review by NDW. It combines changes to the stylesheets, schema, and content, and may therefore require picking apart before it can be applied.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #291 created</title>
   <pubDate>Mon, 19 Dec 2022 11:31:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/291</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-291</guid>
   <description>&lt;div&gt;&lt;p&gt;DTD validity of F&amp;amp;O spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Despite PR #228, I'm still seeing a lot of validation errors when (using Oxygen) I apply DTD validation to build/expanded/xpath-functions-40/xpath-functions-40.xml&lt;/p&gt;
&lt;p&gt;Many of these relate to style attributes not being allowed on table, td, and code elements.&lt;/p&gt;
&lt;p&gt;The merge-function-specs.xsl explicitly creates elements with these attributes:&lt;/p&gt;
&lt;p&gt;See&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;xsl:template match="fos:options"&amp;gt;&lt;/code&gt; line 382&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;xsl:template match="fos:option"&amp;gt;&lt;/code&gt; line 408&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;xsl:template match="processing-instruction('local-function-index')"&amp;gt;&lt;/code&gt; line 347&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It all works because xmlspec-2016.xsl handles these attributes even though the DTD doesn't allow them: see &lt;code&gt;&amp;lt;xsl:template name="style-attributes"&amp;gt;&lt;/code&gt; at line 2096.&lt;/p&gt;
&lt;p&gt;There seem to be three possible options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extend the DTD to allow these attributes&lt;/li&gt;
&lt;li&gt;Change merge-function-specs.xsl to not generate these attributes, instead perhaps generating a role attribute which gets picked up in the final styling&lt;/li&gt;
&lt;li&gt;Sweep the issue under the carpet; avoid validating the intermediate file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main problem with the third approach is that it allows other errors to go unnoticed, for example putting text directly within an &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; without a containing &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #290 created</title>
   <pubDate>Sat, 17 Dec 2022 19:21:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/290</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-290</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #18 (function type hierarchy)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Editorial change to fix a technical error in the data model spec (issue #18). Does not change the specification.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #289 created</title>
   <pubDate>Sat, 17 Dec 2022 18:45:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/289</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-289</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal to add fallback behaviour to map:get and array:get&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Note: I got a build failure trying to build this, it's doing DTD validation but there are invalidities, unrelated to the changes I made.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #100 closed</title>
   <pubDate>Sat, 17 Dec 2022 18:35:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/100</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-100</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Typo in §17.5.3&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #88 closed</title>
   <pubDate>Sat, 17 Dec 2022 17:53:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/88</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-88</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPATH] breaking ancestor or descendant axes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #124 closed</title>
   <pubDate>Sat, 17 Dec 2022 17:41:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/124</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-124</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Incorrect subtype-itemtype rules for pure and local union types&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #242 closed</title>
   <pubDate>Fri, 16 Dec 2022 13:44:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/242</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-242</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion rules used to convert function result to expected type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 016 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 16 Dec 2022 09:41:30 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/12-20</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-12-20</guid>
</item><item>
   <title>Issue #288 created</title>
   <pubDate>Thu, 15 Dec 2022 14:49:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/288</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-288</guid>
   <description>&lt;div&gt;&lt;p&gt;Error in fn:path specification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;On the XML.com slack, Phil Fearon observes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The XPath 3.1 specification has an error in the &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-path"&gt;definition of fn:path&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The properties section states:&lt;/p&gt;
&lt;p&gt;The one-argument form of this function is &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-deterministic"&gt;·deterministic·&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-context-dependent"&gt;·context-dependent·&lt;/a&gt;, and [·focus-dependent·] (https://www.w3.org/TR/xpath-functions-31/#dt-focus-dependent).
The two-argument form of this function is &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-deterministic"&gt;·deterministic·&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-context-independent"&gt;·context-independent·&lt;/a&gt;, and &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-focus-independent"&gt;·focus-independent·&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The term one-argument form should be zero-argument form and consequently, two-argument form should be one-argument form&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #277 closed</title>
   <pubDate>Wed, 14 Dec 2022 14:13:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/277</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-277</guid>
   <description>&lt;div&gt;&lt;p&gt;Overriding functions using xsl:import&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #279 closed</title>
   <pubDate>Wed, 14 Dec 2022 14:13:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/279</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-279</guid>
   <description>&lt;div&gt;&lt;p&gt;Rewrite XSLT §10.3.4 (function overriding) for clarity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #287 closed</title>
   <pubDate>Wed, 14 Dec 2022 14:13:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/287</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-287</guid>
   <description>&lt;div&gt;&lt;p&gt;PR #279 with merge conflicts resolved&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #287 created</title>
   <pubDate>Wed, 14 Dec 2022 13:57:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/287</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-287</guid>
   <description>&lt;div&gt;&lt;p&gt;PR #279 with merge conflicts resolved&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #279
Close #277&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #225 closed</title>
   <pubDate>Wed, 14 Dec 2022 12:27:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/225</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-225</guid>
   <description>&lt;div&gt;&lt;p&gt;[XDM] Terminology around "Atomic value" and "Type Annotation"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #286 created</title>
   <pubDate>Tue, 13 Dec 2022 21:06:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/286</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-286</guid>
   <description>&lt;div&gt;&lt;p&gt;Spec changes to allow child::(a|b|c) - Issue 107&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #114 closed</title>
   <pubDate>Tue, 13 Dec 2022 20:09:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/114</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-114</guid>
   <description>&lt;div&gt;&lt;p&gt;[fo] array:index-where&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #258 closed</title>
   <pubDate>Tue, 13 Dec 2022 20:08:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/258</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-258</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue #114 - add array:index-where() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #265 closed</title>
   <pubDate>Tue, 13 Dec 2022 17:58:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/265</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-265</guid>
   <description>&lt;div&gt;&lt;p&gt;Type hierarchy tables/diagrams&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #268 closed</title>
   <pubDate>Tue, 13 Dec 2022 17:58:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/268</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-268</guid>
   <description>&lt;div&gt;&lt;p&gt;New type-hierarchy images / descriptions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 015 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 13 Dec 2022 17:23:01 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/12-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-12-13</guid>
</item><item>
   <title>QT4 CG meeting 015 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 9 Dec 2022 07:44:30 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/12-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-12-13</guid>
</item><item>
   <title>Issue #285 created</title>
   <pubDate>Thu, 8 Dec 2022 11:34:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/285</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-285</guid>
   <description>&lt;div&gt;&lt;p&gt;Stability of collections&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specification for fn:collection says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, this function is [·deterministic·]. This means that repeated calls on the function with the same argument will return the same result. However, for performance reasons, implementations may provide a user option to evaluate the function without a guarantee of determinism. The manner in which any such option is provided is [·implementation-defined·]. If the user has not selected such an option, a call to this function must either return a deterministic result or must raise a dynamic error [[err:FODC0003].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think this is unrealistic. The cost of making fn:collection deterministic is disproportionate to the benefits. It's very rare in practice for a query or stylesheet to process the same collection more than once, and retaining the information needed to deliver the identical results on these rare occasions is expensive (typically it means holding a long-term lock on the data, or keeping a copy of the entire collection in memory). It also inhibits techniques such as multi-threaded evaluation.&lt;/p&gt;
&lt;p&gt;I would like to relax this requirement.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1 closed</title>
   <pubDate>Wed, 7 Dec 2022 13:00:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-1</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Conversion between xs:QName and Q{uri}local format&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #229 closed</title>
   <pubDate>Wed, 7 Dec 2022 12:36:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/229</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-229</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal: Add the missing functions for arrays: array:exists() and array:empty()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #284 created</title>
   <pubDate>Wed, 7 Dec 2022 11:55:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/284</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-284</guid>
   <description>&lt;div&gt;&lt;p&gt;Add grammar for "if (test) then {expr}" with no else&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As discussed in issue #234. In reviewing this PR, I suggest we consider it together with the existing proposals for ternary conditionals (x ?? y !! z) and the "otherwise" operator.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #97 closed</title>
   <pubDate>Wed, 7 Dec 2022 10:05:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/97</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-97</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Functions symmetric to `head()` and `tail()` for sequences and arrays&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #250 closed</title>
   <pubDate>Wed, 7 Dec 2022 10:04:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/250</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-250</guid>
   <description>&lt;div&gt;&lt;p&gt;97 New functions fn:foot, fn:trunk, array:foot, array:trunk&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 014 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 6 Dec 2022 17:21:01 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/12-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-12-06</guid>
</item><item>
   <title>Issue #283 created</title>
   <pubDate>Mon, 5 Dec 2022 11:23:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/283</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-283</guid>
   <description>&lt;div&gt;&lt;p&gt;Enumeration types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The draft specification includes a proposal to provide enumeration types. The proposal is incomplete, for example it does not include all the rules for conversions and casting. This issue is raised in order to outline where we are, what needs to be done, and to elicit consensus on whether we want to proceed with this.&lt;/p&gt;
&lt;p&gt;What's the motivation? Primarily, making function signatures more expressive.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q0: do we really need this?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The essence of the proposal is an ItemType that matches an enumerated set of xs:string values:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[131] | EnumerationType | ::= | "enum" "("  StringLiteral (","  StringLiteral)* ")"  &lt;/code&gt;
For example, the type enum("red", "green", "blue") matches the string "green".&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q1: why restrict it to strings? I think my main reason was that the syntax gets complicated if we try to do it for data types that have no literal representation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Subtyping is based on the value space. An enumeration type E is a subtype of another enumeration type F if the set of strings in E is a subset of those in F. All enumeration types are subtypes of xs:string.&lt;/p&gt;
&lt;p&gt;Strings are not "labelled" as belonging to an enumeration type, matching is purely based on the value ("datum"). This doesn't provide very strong typing. If "violet" and "pink" are allowed by both the enumeration types &lt;code&gt;colour&lt;/code&gt; and &lt;code&gt;flower&lt;/code&gt;, then it's not intrinsically an error to use a variable of type &lt;code&gt;flower&lt;/code&gt; where a &lt;code&gt;colour&lt;/code&gt; is expected. Equally, a variable of type &lt;code&gt;xs:string&lt;/code&gt; can be used where a &lt;code&gt;colour&lt;/code&gt; is expected.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q2: should enumerations be more strongly typed?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I would expect that an enumeration type can be used as the target of "cast" or "castable", but this is not currently in the spec.&lt;/p&gt;
&lt;p&gt;The coercion rules as currently written say that if the expected type is an enumeration type, then the rules are largely the same as for any other subtype of &lt;code&gt;xs:string&lt;/code&gt;:  casting from &lt;code&gt;xs:untypedAtomic&lt;/code&gt; applies, promotion from &lt;code&gt;xs:anyURI&lt;/code&gt; does not apply, 1.0 compatibility mode rules do not apply.&lt;/p&gt;
&lt;p&gt;Operators and functions on enumeration types are the same as for &lt;code&gt;xs:string&lt;/code&gt;. This means, for example, that there are no special rules for comparison: values are ordered as strings and are compared using the default collation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #271 closed</title>
   <pubDate>Mon, 5 Dec 2022 10:26:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/271</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-271</guid>
   <description>&lt;div&gt;&lt;p&gt;Amendments to data model spec as per minutes of 2022-11-22&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 014 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 5 Dec 2022 10:20:13 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/12-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-12-06</guid>
</item><item>
   <title>Issue #40 closed</title>
   <pubDate>Mon, 5 Dec 2022 10:16:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/40</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-40</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] The modified SingleType EBNF symbol is redundant.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #167 closed</title>
   <pubDate>Mon, 5 Dec 2022 10:08:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/167</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-167</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT Conditional Instructions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #247 closed</title>
   <pubDate>Mon, 5 Dec 2022 09:51:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/247</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-247</guid>
   <description>&lt;div&gt;&lt;p&gt;Actions QT4CG-011-01 and QT4CG-011-03. &lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #282 closed</title>
   <pubDate>Mon, 5 Dec 2022 09:51:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/282</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-282</guid>
   <description>&lt;div&gt;&lt;p&gt;Copy of MK actions-2022-11-15 branch by NW&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #249 closed</title>
   <pubDate>Mon, 5 Dec 2022 09:49:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/249</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-249</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 213: new function fn:items-at&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #282 created</title>
   <pubDate>Mon, 5 Dec 2022 09:46:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/282</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-282</guid>
   <description>&lt;div&gt;&lt;p&gt;Copy of MK actions-2022-11-15 branch by NW&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Resolves merge conflicts in #247&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #155 closed</title>
   <pubDate>Sun, 4 Dec 2022 00:17:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/155</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-155</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal to support optional parameter values on static functions.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #157 closed</title>
   <pubDate>Sun, 4 Dec 2022 00:16:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/157</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-157</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal to support optional parameters that bind to the context item.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #281 created</title>
   <pubDate>Sat, 3 Dec 2022 22:12:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/281</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-281</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath: Short-circuiting Functions and Lazy Evaluation Hints&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;Short-circuiting Functions and Lazy Evaluation Hints&lt;/h1&gt;
&lt;h1&gt;&lt;br/&gt;1. Introduction&lt;/h1&gt;
&lt;p&gt;As shown in &lt;a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation#Support_in_common_programming_and_scripting_languages"&gt;Wikipedia&lt;/a&gt;, most contemporary programming languages offer reasonable support for &lt;a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation#Definition"&gt;short-circuit evaluation&lt;/a&gt;
(also known as &lt;em&gt;minimal&lt;/em&gt; or &lt;em&gt;McCarthy evaluation&lt;/em&gt;), including several standard language short-circuit operators.&lt;/p&gt;
&lt;p&gt;Short-circuiting, as we will call the above in this document, is commonly used to achieve:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Avoiding undesired side effects of evaluating the second argument&lt;/em&gt;, such as
excessive evaluation time or throwing an error&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Usual example, using a &lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)"&gt;C-based&lt;/a&gt; language:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;   int denom = 0;
   if (denom != 0 &amp;amp;&amp;amp; num / denom)
   {
   ...//ensures that calculating num/denom never results in divide-by-zero error
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;   int a = 0;
   if (a != 0 &amp;amp;&amp;amp; myfunc(b))
   {
     do_something();
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, short-circuit evaluation guarantees that &lt;code&gt;myfunc(b)&lt;/code&gt; is never called. This is because &lt;code&gt;a != 0&lt;/code&gt; evaluates to &lt;em&gt;&lt;code&gt;false&lt;/code&gt;&lt;/em&gt;. This feature permits two useful programming constructs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If the first sub-expression checks whether an expensive computation is needed and the check evaluates to &lt;em&gt;false&lt;/em&gt;, one can eliminate expensive computation in the second argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It permits a construct where the first expression guarantees a condition without which the second expression may cause a &lt;a href="https://en.wikipedia.org/wiki/Run-time_error"&gt;run-time error&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Idiomatic conditional construct&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Perl"&gt;Perl&lt;/a&gt; idioms:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   some_condition or die; # Abort execution if some_condition is false

   some_condition and die; # Abort execution if some_condition is true
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;br/&gt;2. Short-circuiting in XPath&lt;/h1&gt;
&lt;p&gt;In short (pun intended) there is no such thing mentioned in any officially-published W3C version (&amp;lt;= 3.1) of XPath.&lt;/p&gt;
&lt;p&gt;This topic was briefly mentioned in the discussion of &lt;a href="https://github.com/qt4cg/qtspecs/issues/78"&gt;another proposal&lt;/a&gt;: that of providing the capability to specify strictly the order of evaluation.&lt;/p&gt;
&lt;p&gt;Aspects of incorporating hints for &lt;a href="https://en.wikipedia.org/wiki/Lazy_evaluation"&gt;lazy evaluation&lt;/a&gt; (a topic related to short-cutting) were discussed also in the thread to &lt;a href="https://app.slack.com/client/T011VK9115Z/C01GVC3JLHE/thread/C01GVC3JLHE-1665542903.180989"&gt;this question&lt;/a&gt; on the Xml.com Slack.&lt;/p&gt;
&lt;p&gt;The situation at present is that the XPath processor that is being used decides whether or not to perform shortcutting, even in obvious cases. Thus, varying from one XPath processor to another, the differences in performance evaluation could be dramatic. For example, the following XPath expression is evaluated on BaseX (ver. &amp;gt;= 10.3) for 0 seconds, and the same expression is evaluated by Saxon ver. 11 for about 100 seconds.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;
let $fnAnd := function($x)
   {
     function($y)
     {
      if(not($x)) then false()
                  else $y
     }
   }
   return
      $fnAnd(false())(some $b in ( ((1 to 1000000000000000000) !true()) )  satisfies not($b)   )
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;br/&gt;3. Analysis&lt;/h2&gt;
&lt;p&gt;We can define the term “&lt;em&gt;function with shortcutting&lt;/em&gt;” (just for a 2-argument function, but this can be extended for &lt;code&gt;N&lt;/code&gt;-argument function where &lt;code&gt;N &amp;gt;= 2&lt;/code&gt;) in the  following way:&lt;/p&gt;
&lt;p&gt;Given a function &lt;code&gt;$f($x, $y)&lt;/code&gt;, we denote in XPath its partial application for a given value of $x (say &lt;code&gt;let $x := $t&lt;/code&gt;) as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$f($t, ?)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The above is a function of one argument. By definition:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$f($x, $y)&lt;/code&gt; is equivalent to &lt;code&gt;$f($x, ?) ($y)&lt;/code&gt;, for every pair &lt;code&gt;$x&lt;/code&gt; and &lt;code&gt;$y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That is, the partial application of the 2-argument function &lt;code&gt;$f&lt;/code&gt; with fixed 1st argument is another function &lt;code&gt;$g&lt;/code&gt; which when applied on the 2nd argument (&lt;code&gt;$y&lt;/code&gt;) of &lt;code&gt;$f($x, $y)&lt;/code&gt; produces the same value as &lt;code&gt;$f($x, $y)&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;$g&lt;/code&gt; is defined as &lt;code&gt;$f($x, ?)&lt;/code&gt;, then &lt;code&gt;$g($y)&lt;/code&gt; produces the same value as &lt;code&gt;$f($x, $y)&lt;/code&gt; for every pair &lt;code&gt;$x&lt;/code&gt; and &lt;code&gt;$y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let us take a specific function:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, $y as xs:boolean) as xs:boolean
                     { $x and $y}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then one equivalent way of defining &lt;code&gt;$fAnd&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, $y as xs:boolean) as xs:boolean
                     {
                       let $partial := function($x as xs:boolean) as function(xs:boolean) as xs:boolean
                                               {
                                                  if(not($x)) then -&amp;gt;(){false()}
                                                              else -&amp;gt;($t) {$t}
                                               }
                         return $partial($x)($y)
                    }
   return
       $fAnd(false(), true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;&lt;code&gt;$partial&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; function is the result of the partial application &lt;code&gt;$fAnd($x, ?)&lt;/code&gt; and by definition this is a function of arity 1, which when applied on the 2nd argument of &lt;code&gt;$fAnd&lt;/code&gt;, produces the same result as &lt;code&gt;$fAnd($x, $y)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From the code above we see that actually there exists a value of &lt;code&gt;$x&lt;/code&gt; (the value &lt;code&gt;false()&lt;/code&gt; ) for which &lt;code&gt;$fAnd($x, ?)&lt;/code&gt; is not a function of one argument, but a constant function (of &lt;strong&gt;0&lt;/strong&gt; arguments) – that produces the value &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;We say that a function &lt;code&gt;f(x, y)&lt;/code&gt; &lt;em&gt;&lt;strong&gt;allows shortcutting&lt;/strong&gt;&lt;/em&gt; if there exists at least one value &lt;code&gt;t&lt;/code&gt; such that&lt;/p&gt;
&lt;p&gt;&lt;code&gt;f(t, ?)&lt;/code&gt; is a constant.&lt;/p&gt;
&lt;h1&gt;&lt;br/&gt;4. Solution&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;How can an XPath processor treat a function with shortcutting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Obviously, if the XPath processor knows that &lt;code&gt;f(x, y)&lt;/code&gt; allows shortcutting, then it becomes possible to delay the evaluation of the 2nd argument &lt;code&gt;y&lt;/code&gt; and only perform this evaluation if the arity of the function returned by &lt;code&gt;f(t, ?)&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, and not &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can an XPath processor know that a given function allows shortcutting?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One way to obtain this knowledge is to evaluate &lt;code&gt;f(t, ?)&lt;/code&gt; and get the arity of the resulting function. XPath 3.1 allows getting the arity of any function item with the function &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-function-arity"&gt;fn:function-arity()&lt;/a&gt;.      However, doing this on every function call could be expensive and deteriorate performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another way of informing the XPath processor that a given function &lt;code&gt;f(x, y)&lt;/code&gt; allows shortcutting is if the language provides &lt;em&gt;&lt;strong&gt;hints for lazy evaluation&lt;/strong&gt;&lt;/em&gt;:
&lt;br/&gt;let $fAnd := function($x as xs:boolean, &lt;em&gt;&lt;strong&gt;lazy&lt;/strong&gt;&lt;/em&gt; $y as xs:boolean) as xs:boolean&lt;br/&gt;
&lt;br/&gt;Only in the case when there is a &lt;em&gt;&lt;strong&gt;lazy&lt;/strong&gt;&lt;/em&gt; hint specified the XPath processor will check the arity of &lt;code&gt;f(x, ?)&lt;/code&gt; and will not need to evaluate the &lt;code&gt;y&lt;/code&gt; argument if this arity is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us return to the original example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, $y as xs:boolean) as xs:boolean
                     {
                       let $partial := function($x as xs:boolean) as function(xs:boolean) as xs:boolean
                                               {
                                                  if(not($x)) then -&amp;gt;(){false()}
                                                              else -&amp;gt;($t) {$t}
                                               }
                         return $partial($x)($y)
                    }
   return
       $fAnd(false(), true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing this with an Xpath 3.1 processor, an error is raised: “&lt;em&gt;1 argument supplied, 0 expected: function() as xs:boolean { false() }.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/205463393-3b4558ac-66d9-453f-81fc-f83ec0499425.png" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;But according to the updated “&lt;a href="https://qt4cg.org/pr/279/xquery-40/xpath-40.html#id-coercion-rules"&gt;Coercion Rules / Function Coercion&lt;/a&gt;” in Xpath 4.0, no error will occur:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;em&gt;If &lt;em&gt;F&lt;/em&gt; has lower arity than the expected type, then &lt;em&gt;F&lt;/em&gt; is wrapped in a new function that declares and ignores the additional argument; the following steps are then applied to this new function.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For example, if the expected type is &lt;code&gt;function(node(), xs:boolean) as  xs:string&lt;/code&gt;, and the supplied function is &lt;code&gt;fn:name#1&lt;/code&gt;, then the supplied function is effectively replaced by &lt;code&gt;function($n as node(), $b as xs:boolean) as xs:string {fn:name($n)}&lt;/code&gt;&lt;/em&gt;”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is exactly the place where the XPath processor will call the lower-arity function without providing to it the ignored, and not needed to be evaluated, additional argument.&lt;/p&gt;
&lt;p&gt;Thus, according to this rule, an XPath 4.0 processor will successfully evaluate the above expression and will not issue the error shown above.&lt;/p&gt;
&lt;p&gt;Finally, we can put the &lt;em&gt;lazy&lt;/em&gt; hint on a function declaration or on a function call, or on both places:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, lazy $y as xs:boolean) as  xs:boolean
   {
     let $partial := function($x as xs:boolean) as function(lazy xs:boolean) as xs:boolean
                           {
                              if(not($x)) then -&amp;gt;(){false()}
                                          else -&amp;gt;($t) {$t}
                           }
      return $partial($x)( lazy $y)
   }
   return
       $fAnd(false(), lazy true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How to write short-circuiting functions?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The code above is a good example how one can write a short-circuiting function evaluating which the XPath processor would be aware that a short-circuit is happening but instead of signaling arity error as an XPath 3.1 processor does, will logically ignore the unneeded 2nd argument.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #280 created</title>
   <pubDate>Thu, 1 Dec 2022 15:14:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/280</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-280</guid>
   <description>&lt;div&gt;&lt;p&gt;Why is resolve-uri forbidden from resolving against a URI that contains a fragment identifier?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The 3.1 F&amp;amp;O spec says, of &lt;code&gt;fn:resolve-uri()&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A dynamic error is raised [&lt;a href="https://www.w3.org/XML/Group/qtspecs/specifications/xpath-functions-31/html/Overview.html#ERRFORG0002"&gt;err:FORG0002&lt;/a&gt;] if $base is not a valid IRI according to the rules of RFC3987, extended with an implementation-defined subset of the extensions permitted in LEIRI, or if it is not a suitable IRI to use as input to the chosen resolution algorithm (for example, if it is a relative IRI reference, if it is a non-hierarchic URI, or &lt;strong&gt;if it contains a fragment identifier&lt;/strong&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(emphasis added by me)&lt;/p&gt;
&lt;p&gt;What in the name of all things is that about? I've never noticed that before, and I haven't seen any other API (the URL API in Node and the browser for example) that cares.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;resolve-uri('test.xml', 'http://example.com/path/file.xml#foo')&lt;/code&gt; === &lt;code&gt;http://example.com/path/test.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I don't see why the presence of a fragment identifier should matter in the least.&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; let url = new URL("http://example.com/path/file.xml#foo")
&amp;gt;&amp;gt; console.log(url.href)
http://example.com/path/file.xml#foo
&amp;gt;&amp;gt; let resolved = new URL("test.xml", url);
&amp;gt;&amp;gt; console.log(resolved.href)
http://example.com/path/test.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #270 closed</title>
   <pubDate>Wed, 30 Nov 2022 10:57:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/270</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-270</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect statement about named modes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #273 closed</title>
   <pubDate>Wed, 30 Nov 2022 10:56:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/273</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-273</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue270 xslt mode visibility&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #279 created</title>
   <pubDate>Tue, 29 Nov 2022 21:59:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/279</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-279</guid>
   <description>&lt;div&gt;&lt;p&gt;Rewrite XSLT §10.3.4 (function overriding) for clarity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Essentially editorial - clarifies the existing rules, as described in issue #277&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #254 closed</title>
   <pubDate>Tue, 29 Nov 2022 17:29:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/254</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-254</guid>
   <description>&lt;div&gt;&lt;p&gt;Improvements/fixes for the coercion rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #278 created</title>
   <pubDate>Tue, 29 Nov 2022 17:16:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/278</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-278</guid>
   <description>&lt;div&gt;&lt;p&gt;array bound checking&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Similar functions on arrays and sequences have different behaviour as regards bound checking. For example, fn:head() returns an empty sequence if the input is empty, while array:head() throws an error.&lt;/p&gt;
&lt;p&gt;Sometimes we want the error, sometimes we don't, but this should be orthogonal to whether we are using sequences or arrays.&lt;/p&gt;
&lt;p&gt;Is there a way we can adapt the sequence functions to throw an error, or adapt the array functions so they don't?&lt;/p&gt;
&lt;p&gt;Various ideas have been put forward, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add extra optional parameters to functions to select the behaviour&lt;/li&gt;
&lt;li&gt;mirror the relevant functions (e.g. into a different namespace) to create an alternative version with different behaviour&lt;/li&gt;
&lt;li&gt;add options to the static context (array-bound-checking=yes|no, sequence-bound-checking=yes|no) to switch the behaviour (with appropriate mechanisms in XQuery and XSLT -- and perhaps XPath -- to set these options)&lt;/li&gt;
&lt;li&gt;do nothing, let users solve the problem for themselves by writing user-defined functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note 1: the difference in behaviour affects operators as well as functions: contrast &lt;code&gt;$seq[0]&lt;/code&gt; (which returns ()) with &lt;code&gt;$array(0)&lt;/code&gt; (throws error). Making &lt;code&gt;$seq[0]&lt;/code&gt; throw an error would mean we have to define it in a different way, since the formulation &lt;code&gt;$seq[position()=$N]&lt;/code&gt; is intrinsically error-free.&lt;/p&gt;
&lt;p&gt;Note 2: if &lt;code&gt;$array(0)&lt;/code&gt; doesn't throw an error, it's not immediately obvious what it should do. Returning an empty sequence isn't ideal because the empty sequence is a valid entry in an array. For maps we have the same problem, which is why we have two functions &lt;code&gt;map:get()&lt;/code&gt; and &lt;code&gt;map:contains()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #277 created</title>
   <pubDate>Tue, 29 Nov 2022 12:50:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/277</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-277</guid>
   <description>&lt;div&gt;&lt;p&gt;Overriding functions using xsl:import&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XSLT 3.0, you can have a module M that contains an xsl:function F#2, and in another module you can import M, and declare another xsl:function F#3.&lt;/p&gt;
&lt;p&gt;In the 4.0 spec we appear to disallow this with the paragraph (in §10.3.4):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A stylesheet function may be overridden by another stylesheet function with the same name that has higher [import precedence]. This is only allowed, however, if the [arity range] of the overriding function includes the totality of the arity range of the overridden function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In fact, the error conditions we go on to define (XTSE0769 and XTSE0770) are more carefully worded and do not make the above situation an error. XTSE0769 says that if F has higher import precedence than G, then either the arity ranges of F and G must be disjoint, or the arity range of F must include the totality of G. XTSE0770 says that if F and G have the same import precedence, then their arity ranges must be disjoint.&lt;/p&gt;
&lt;p&gt;The paragraph cited should be replaced with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A stylesheet function may be overridden by another stylesheet function with the same name that has higher [import precedence]. This is only allowed, however, if either (a) the [arity range] of the overriding function includes the totality of the arity range of the overridden function, or (b) the two arity ranges are non-overlapping.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is also scope for editorial improvement to §10.3.4. It describes three separate scenarios:&lt;/p&gt;
&lt;p&gt;(a) overriding functions using xsl:import and import precedence&lt;/p&gt;
&lt;p&gt;(b) overriding functions using xsl:use-package and xsl:override&lt;/p&gt;
&lt;p&gt;(c) overriding extension/external functions using xsl:function (or vice versa)&lt;/p&gt;
&lt;p&gt;and it would be much easier to read the section if these were clearly distinguished.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #276 closed</title>
   <pubDate>Sun, 27 Nov 2022 17:42:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/276</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-276</guid>
   <description>&lt;div&gt;&lt;p&gt;Make './gradlew publish' work on Windows #255&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #255 closed</title>
   <pubDate>Sun, 27 Nov 2022 17:42:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/255</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-255</guid>
   <description>&lt;div&gt;&lt;p&gt;Build error running gradlew publish on Windows&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #276 created</title>
   <pubDate>Sun, 27 Nov 2022 17:37:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/276</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-276</guid>
   <description>&lt;div&gt;&lt;p&gt;Make './gradlew publish' work on Windows #255&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #255&lt;/p&gt;
&lt;p&gt;Repeat after me, "filenames are not URIs." Not on some platforms, anyway.&lt;/p&gt;
&lt;p&gt;I still get a warning about "correctness" because of the interaction between a couple of tasks. That doesn't happen on a *nix platform so I don't know if it's related to the difference between forward and backward slashes or if it's a consequence of the build changes I made to support the new SVG (that might be) in data model. They seem harmless for the moment.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #275 created</title>
   <pubDate>Sat, 26 Nov 2022 22:57:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/275</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-275</guid>
   <description>&lt;div&gt;&lt;p&gt;Problems with nt/xnt links to grammar terms&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm trying to work out why we're getting linking errors during the build when linking to grammatical terms.&lt;/p&gt;
&lt;p&gt;In etc/XT40.xml (after changing extract.xsl to produce tidier namespace declarations, I'm seeing entries like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   &amp;lt;nt def="doc-xpath40-SequenceType" xlink:type="simple"&amp;gt;SequenceType&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-ItemType" xlink:type="simple"&amp;gt;ItemType&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-OccurrenceIndicator" xlink:type="simple"&amp;gt;OccurrenceIndicator&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="prod-xpath40-AnyItemTest" xlink:type="simple"&amp;gt;AnyItemTest&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-TypeName" xlink:type="simple"&amp;gt;TypeName&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-KindTest" xlink:type="simple"&amp;gt;KindTest&amp;lt;/nt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the problem entries seem to be the ones prefixed "prod-" rather than "doc-".&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;extract.xsl&lt;/code&gt; stylesheet simply copies what it finds in &lt;code&gt;xpath-assembled.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The decision seems to be made in &lt;code&gt;grammar2spec.xsl&lt;/code&gt;, for example line 523 reads&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:param name="result_id_docprod_part"/&amp;gt; &amp;lt;!-- 'doc-' or 'prod-' --&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The parameter is set to "prod-" in &lt;code&gt;add-non-terminals&lt;/code&gt; (line 473) and in &lt;code&gt;add-terminals&lt;/code&gt; (line 488), and is set to "doc-" in &lt;code&gt;show-prod&lt;/code&gt; (line 513).&lt;/p&gt;
&lt;p&gt;Looking more carefully, all productions listed in XT40.xml have a "prod-" entry (at least one...) and most of them also have a "doc-" entry. The problem cases are those that do not have a "doc-" entry. Which suggests that &lt;code&gt;show-prod&lt;/code&gt; is not selecting them.&lt;/p&gt;
&lt;p&gt;In a small number of cases, when processing the XSLT specification, the show-prod template is outputting the message&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WARNING!! production with name="MapTest" not found&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is produced for MapTest, ArrayTest, EnumerationType, and NamedItemType. The problem here appears to be that the production is referenced in the XSLT spec but in the grammar file it is not shown with &lt;code&gt;if="xslt40-patterns"&lt;/code&gt;, so it is not present in the pattern grammar.&lt;/p&gt;
&lt;p&gt;For productions like AnyItemTest, the problem is different. It looks to me as if &lt;code&gt;show-prod&lt;/code&gt; is not being called for these terms.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show-prod&lt;/code&gt; is called from one place only: &lt;code&gt;assemble-spec.xsl&lt;/code&gt; line 208. This is in a template rule with &lt;code&gt;match="prodrecap"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sure enough, &lt;code&gt;AnyItemTest&lt;/code&gt; does not appear to have a &lt;code&gt;prodrecap&lt;/code&gt; in the XPath spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #274 created</title>
   <pubDate>Sat, 26 Nov 2022 10:47:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/274</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-274</guid>
   <description>&lt;div&gt;&lt;p&gt;What would it take/would it be possible to build a module repository for QT?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have an ever growing list of proposed convienence functions. I am not opposed, in principle, to adding convenience functions, but we don’t have any principled criteria (AFAICT) for which ones to add and which ones to reject. That’s not surprising, and I’m also not opposed to that. But I’m sure there are hundreds, perhaps thousands, of such functions. At some point, we’re going to start to resist adding more simply because we’ve added so many. Some of us may already be nearing that point.&lt;/p&gt;
&lt;p&gt;It seems to me that the alternative is to do what TeX, Perl, Python, Node, etc. do: make it easy for users to download, install, and use libraries. (I’m carefully using the term “library” here where I might prefer to use “package” or “module” because we already have “package” and “module” which mean other things.)&lt;/p&gt;
&lt;p&gt;What would it take to make that possible?&lt;/p&gt;
&lt;p&gt;One problem we have is that there are two (perhaps three, or more, depending on how you count) different QT languages and they aren’t all mutually interoperable. My XSLT implementation of &lt;code&gt;fn:parse-uri&lt;/code&gt; for example, isn’t directly usable by an XQuery product that doesn’t implement XSLT or some other product that only uses XPath.&lt;/p&gt;
&lt;p&gt;Suppose we added an &lt;code&gt;import library&lt;/code&gt; declaration to XPath, similar to the &lt;code&gt;import module&lt;/code&gt; declaration in XQuery&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LibraryImport := "import" "library"
                   ("namespace" NCName "=")?
                   "at" URILiteral
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a corresponding &lt;code&gt;&amp;lt;xsl:library&amp;gt;&lt;/code&gt; instruction to XSLT.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:library
  namespace = uri
  href = uri /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The semantics of each is that it searches an implementation-defined set of locations for a module that matches the URI. If it finds one, it loads the functions declared in that library. If a namespace is given, it loads only the functions in the namespace provided.&lt;/p&gt;
&lt;p&gt;We’d expect all implementations to be able to load libraries that only used XPath constructions. An XSLT processor might also be able to load XSLT constructions. An XQuery processor might also be able to load XQuery constructions.&lt;/p&gt;
&lt;p&gt;We could define a library file format that allowed an implementor to provide several different implementations of a function, where the processor could choose the best one (in some implementation-dependent way). This would also give us a place to hang version numbers and other relevant metadata.&lt;/p&gt;
&lt;p&gt;With that much in place, would it be more practical to use XPath extension modules?&lt;/p&gt;
&lt;p&gt;Consider the following scenario. I want to use a URI relativization function (as requested in #269). Dimitre provided a pure XPath implementation, so we don’t actually &lt;em&gt;have&lt;/em&gt; to implement it as a native function, we just have to make it easy to use. Imagine that EXPath.org (for example) provided a machine readable list of of libraries.&lt;/p&gt;
&lt;p&gt;I run a hypothetical “expath” command to search the machine readlabe directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ expath search relative
xpath uri-relativize -- returns the relative location between two URIs
xslt  doc-relative -- convenience functions for accessing “uncles”, “aunts”, etc.
xpath relative-rank -- funtions to score XML documents
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It found three libraries that matched “relative”. That first one sounds promising.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ expath show uri-relativize
The uri-relativize library provides uri-relativize(), an XPath
function that resolves one absolute URI relative to another.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That sounds like what I want, so I install it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ expath install uri-relativize
Downloading uri-relativize … installing … done.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in my stylesheet I simply add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:library href="uri-relativize"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or in a language that only uses XPath, I add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import library at "uri-relativize"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and I can use the &lt;code&gt;uri-relativize()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;I think the important parts are that the implementation searches for libraries so that I don’t have to identify precisly where they were installed and that we somehow make it practical to use them without, though it pains me to say this, explicit namespace bindings.&lt;/p&gt;
&lt;p&gt;Perhaps we could allow libraries to “inject” functions into the default function namespace, or we could have a function namespace search list and maybe libraries could extend that.&lt;/p&gt;
&lt;p&gt;The format of the library might be something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;library xmlns="xpath-library" name="uri-relativize" version="1.0.3"
         namespace="http://example.com/my/namespace"&amp;gt;
&amp;lt;provides&amp;gt;
function uri-relativize($path1 as xs:anyURI, $path2 as xs:anyURI) as xs:anyURI
&amp;lt;/provides&amp;gt;
&amp;lt;xpath version="3.0"&amp;gt;
…xpath implementation…
&amp;lt;/xpath&amp;gt;
&amp;lt;xslt version="4.0"&amp;gt;
…xslt 4.0 implementation…
&amp;lt;/xslt&amp;gt;
&amp;lt;xslt version="3.0"&amp;gt;
…xslt 3.0 implementation…
&amp;lt;/xslt&amp;gt;
&amp;lt;library&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I’m sure if we looked closely at the metadata provided in other system’s packages, we’d see I’ve left a bunch of stuff out. You’d probably, for example, want some way of saying one package depends on another and having the processor load those automatically.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #273 created</title>
   <pubDate>Fri, 25 Nov 2022 18:09:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/273</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-273</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue270 xslt mode visibility&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR fixes issue #270 concerning the visibility of XSLT modes.&lt;/p&gt;
&lt;p&gt;It also deals with a lot of editorial issues, some highlighted in issue #275.&lt;/p&gt;
&lt;p&gt;It changes the manual change markup in the XSLT spec to use &lt;code&gt;at-"date"&lt;/code&gt; format rather than &lt;code&gt;at="draft-number"&lt;/code&gt; (dates are more useful for the incremental development process we are following). And it fixes some cross-spec-reference issues, and some violations of hyphenation diktats.&lt;/p&gt;
&lt;p&gt;Also bundled with this bug fix are other editorial changes to fix cross-spec linking errors; for details see the individual commit messages.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 013 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 25 Nov 2022 14:32:27 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-29</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-29</guid>
</item><item>
   <title>Issue #253 closed</title>
   <pubDate>Fri, 25 Nov 2022 12:19:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/253</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-253</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix xnt references&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #237 closed</title>
   <pubDate>Fri, 25 Nov 2022 11:53:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/237</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-237</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue167 xsl conditionals&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #272 created</title>
   <pubDate>Fri, 25 Nov 2022 10:14:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/272</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-272</guid>
   <description>&lt;div&gt;&lt;p&gt;Setting parameter values in xsl:use-package&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's possible for two different components of an application to use the same library package (via &lt;code&gt;xsl:use-package&lt;/code&gt;) and in principle each of them should be able to configure that package (by setting its global parameters) in different ways. Currently though it's not at all clear how the global parameters of a used package should be set (and there are some inconsistencies in the spec concerning how the &lt;code&gt;visibility&lt;/code&gt; attribute on such parameters is supposed to work).&lt;/p&gt;
&lt;p&gt;I think that it's fairly straightforward to plug this gap by allowing xsl:use-package to have xsl:with-param children, naming the stylesheet parameters in the used package and assigning them values. For static parameters the values must be assigned using static expressions; for non-static parameters any expression can be used: because of the scoping rules and the syntactic constraints on &lt;code&gt;xsl:use-package&lt;/code&gt;, the value of the expression can only depend on global variable and parameters in the using stylesheet package.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #271 created</title>
   <pubDate>Thu, 24 Nov 2022 16:10:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/271</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-271</guid>
   <description>&lt;div&gt;&lt;p&gt;Amendments to data model spec as per minutes of 2022-11-22&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes to data model spec, see actions QT4CG-012-01, -02, -03, -04, -06.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #270 created</title>
   <pubDate>Thu, 24 Nov 2022 13:56:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/270</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-270</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect statement about named modes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;On the description of the 'visibility' attribute &lt;a href="https://qt4cg.org/specifications/xslt-40/Overview-diff.html#declaring-modes"&gt;here&lt;/a&gt; it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A named mode is not eligible to be used as the &lt;a href="https://qt4cg.org/specifications/xslt-40/Overview-diff.html#dt-initial-mode"&gt;initial mode&lt;/a&gt; if its visibility is private.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But, if the mode is designated as default mode of the implicit or explicit &lt;code&gt;xsl:package&lt;/code&gt; then it's eligible as an initial mode. Having a private visibility does not affect it's initial status. Furthermore, the unnamed mode is always private, and always initial.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #269 created</title>
   <pubDate>Thu, 24 Nov 2022 13:20:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/269</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-269</guid>
   <description>&lt;div&gt;&lt;p&gt;Function for URI relativization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Signature:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;relativize($uri as xs:anyURI, $base as xs:anyURI) as xs:anyURI
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example: &lt;a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/net/URI.html#relativize(java.net.URI)"&gt;URI::relativize&lt;/a&gt; in Java&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #268 created</title>
   <pubDate>Thu, 24 Nov 2022 10:28:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/268</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-268</guid>
   <description>&lt;div&gt;&lt;p&gt;New type-hierarchy images / descriptions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #265&lt;/p&gt;
&lt;p&gt;This is my attempt to improve the type-hierarchy images.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There &lt;em&gt;were&lt;/em&gt; graphics already, but they were accidentally not being copied into the right place.&lt;/li&gt;
&lt;li&gt;But, they're for 3.1 and they're in some format I don't recognize, so&lt;/li&gt;
&lt;li&gt;I created new SVG ones anyway, that folks may or may not like&lt;/li&gt;
&lt;li&gt;I replaced the big, ugly yellow tables with prose. I concluded that accessibility was the only reason they were present.&lt;/li&gt;
&lt;li&gt;The colors are a little different, and a little "off", but they're explicitly chosen from a pallet that offers unambiguously differenty colors for the three most common forms of color-blindness.&lt;/li&gt;
&lt;li&gt;One of the SVG images is too wide, I'm not sure what to do about that&lt;/li&gt;
&lt;li&gt;The labels are text, so you can search for them, and xs:anyAtomicType is a link. We could make more links.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #267 closed</title>
   <pubDate>Thu, 24 Nov 2022 10:16:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/267</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-267</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet updates for inline-SVG in the data model&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #267 created</title>
   <pubDate>Thu, 24 Nov 2022 10:08:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/267</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-267</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet updates for inline-SVG in the data model&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I need to commit this first, and separately, so that the build will be correct.&lt;/p&gt;
&lt;p&gt;Also fixed an obvious CSS typo.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #266 created</title>
   <pubDate>Wed, 23 Nov 2022 18:49:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/266</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-266</guid>
   <description>&lt;div&gt;&lt;p&gt;Add an option on xsl:copy-of to copy a subtree with a change of namespace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's a common requirement to copy a subtree with a change of namespace.&lt;/p&gt;
&lt;p&gt;It can be done easily enough in XSLT with apply-templates in a custom mode, but an option on xsl:copy-of could make it a lot easier. It could also potentially be a lot more efficient.&lt;/p&gt;
&lt;p&gt;Alternatively, this could be provided as a function, or an option on the copy-of function.&lt;/p&gt;
&lt;p&gt;Or it could be a new higher order function &lt;code&gt;copy-renaming($node, function($name){ xs:QName('new uri', local-name-from-QName($name) })&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There's a danger of course of packing in too much functionality and making it just as complex/inefficient as using a custom mode.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #265 created</title>
   <pubDate>Wed, 23 Nov 2022 12:46:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/265</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-265</guid>
   <description>&lt;div&gt;&lt;p&gt;Type hierarchy tables/diagrams&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;On 22 November, we mentioned in passing that the type hierarchy tables in the Data Model spec are hard to read. They're a garish yellow for no obvious reason and the font size is very small. Would replacing them with diagrams like this be an improvement?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/36793/203549753-a970038e-4b8b-44cb-97cb-8d52d2fc736f.png" alt="out"/&gt;&lt;/p&gt;
&lt;p&gt;(This is the largest and most difficult to represent, I think. I've grouped some of the atomic types together to make the drawing more aesthetically pleasing. I don't think that interferes with comprehension, though might need to be explained.)&lt;/p&gt;
&lt;p&gt;There's no particular rhyme or reason to the order of the items in the "second column" except to leave room for the longer hierarchies further to the right.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #232 closed</title>
   <pubDate>Wed, 23 Nov 2022 09:52:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/232</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-232</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 225 - Data model clarifications&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #264 closed</title>
   <pubDate>Wed, 23 Nov 2022 09:36:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/264</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-264</guid>
   <description>&lt;div&gt;&lt;p&gt;THIS IS JUST A TEST IGNORE THIS&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #264 created</title>
   <pubDate>Wed, 23 Nov 2022 09:29:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/264</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-264</guid>
   <description>&lt;div&gt;&lt;p&gt;THIS IS JUST A TEST IGNORE THIS&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 012 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 22 Nov 2022 17:33:38 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-22</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-22</guid>
</item><item>
   <title>Issue #263 closed</title>
   <pubDate>Tue, 22 Nov 2022 12:29:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/263</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-263</guid>
   <description>&lt;div&gt;&lt;p&gt;Exclude spec XSL from PRs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #263 created</title>
   <pubDate>Tue, 22 Nov 2022 12:22:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/263</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-263</guid>
   <description>&lt;div&gt;&lt;p&gt;Exclude spec XSL from PRs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Letting the specification-specific XSL through means you can get a mismatch with the common XSL. So don't do that.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 012 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 21 Nov 2022 11:34:37 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-22</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-22</guid>
</item><item>
   <title>Issue #251 closed</title>
   <pubDate>Mon, 21 Nov 2022 10:02:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/251</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-251</guid>
   <description>&lt;div&gt;&lt;p&gt;Use external CSS for styling&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #248 closed</title>
   <pubDate>Mon, 21 Nov 2022 09:49:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/248</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-248</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: update change logs and status&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #262 created</title>
   <pubDate>Sun, 20 Nov 2022 23:10:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/262</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-262</guid>
   <description>&lt;div&gt;&lt;p&gt;Navigation in deep-structured arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;At present there is no convenient way to navigate down a deep-structured array (whose members are themselves arrays and maybe even (recursively) deep-structured arrays themselves).&lt;/p&gt;
&lt;p&gt;For example, given the array:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt; [1, [2, 3], [4, [5, 6]], (7, 8, 9) ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we cannot navigate to &lt;code&gt;6&lt;/code&gt; with a single function call, nor do we have a convenient search mechanism that will give us all index(es)-paths that navigate to &lt;code&gt;6&lt;/code&gt;, in this case just the single index-path (3, 2, 2).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This proposal is to extend the &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/pr/258/xpath-functions-40/autodiff.html#func-array-get"&gt;&lt;code&gt;array:get()&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; function and the &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40-diff.html#id-array-lookup"&gt;&lt;strong&gt;&lt;em&gt;array lookup using function call syntax&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; to accept as their last argument not just a single integer position, but a sequence of integers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sequence of integer position is called &lt;strong&gt;"item-navigation-path"&lt;/strong&gt;, or simply: &lt;strong&gt;"navigation-path"&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For the array defined above, the navigation path to the contained item &lt;code&gt;6&lt;/code&gt; is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;(3, 2, 2)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;XPath implementation&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $ar := [1, [2, 3], [4, [5, 6]], (7, 8, 9) ],
    $get := -&amp;gt; ($input as array(*), $indices as xs:integer*)
            {
              let $getHelper := -&amp;gt; ($input as array(*), $indices as xs:integer*, $self as function(*))
              {
                let $headIndex := head($indices), $restindices := tail($indices)
                  return
                    if(exists($restindices))
                      then $self($input($headIndex),$restindices, $self)
                      else if(exists($headIndex))
                             then $input($headIndex)
                             else $input
               }
              return $getHelper($input, $indices, $getHelper)
            }
  return
    $ar =&amp;gt; $get((3, 2, 2))
     (: (: Or alternatively : :) $get($ar, (3, 2, 2)) :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the above expression is evaluated, the expected, correct result is produced:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To allow a simple and intuitive deep-indexing navigation with a single function call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To allow for sophisticated deep-searching functionality (like the current &lt;code&gt;array:index-where()&lt;/code&gt; and &lt;code&gt;array:index-of()&lt;/code&gt;, but not just scratching the surface) to return the navigation paths to wanted items of interest, which then could be stored, passed to other functions and easily retrieved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Other examples&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $ar := [1, [2, 3], [4, [5, 6]], (7, 8, 9) ],
    $get := -&amp;gt; ($input as array(*), $indices as xs:integer*)
            {
              let $getHelper := -&amp;gt; ($input as array(*), $indices as xs:integer*, $self as function(*))
              {
                let $headIndex := head($indices), $restindices := tail($indices)
                  return
                    if(exists($restindices))
                      then $self($input($headIndex),$restindices, $self)
                      else if(exists($headIndex))
                             then $input($headIndex)
                             else $input
               }
              return $getHelper($input, $indices, $getHelper)
            }
  return
     ( $get($ar, (3, 2, 2)), $get($ar, 2), $get($ar, (3,1)),   $get($ar, (3,2)), $get($ar, ())  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the above expression is evaluated, all the expected, correct results are produced:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;6
[2,3]
4
[5,6]
[1,[2,3],[4,[5,6]],(7,8,9)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/202931815-9fd429f4-55e1-4a79-bd0a-fc6c98990393.png" alt="image"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #261 created</title>
   <pubDate>Sun, 20 Nov 2022 09:48:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/261</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-261</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposed fn:char function - see issue 121&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Although discussion on issue #121 did not converge on a consensus, this PR proposes a new function which I believe meets the requirements expressed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #260 created</title>
   <pubDate>Sat, 19 Nov 2022 23:54:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/260</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-260</guid>
   <description>&lt;div&gt;&lt;p&gt;array:index-of&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Seems we are missing the corresponding array function to the standard (on sequences) &lt;strong&gt;&lt;em&gt;fn:index-of(&lt;/em&gt;&lt;/strong&gt;).&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Returns a sequence of positive integers giving the positions within the array &lt;code&gt;$input&lt;/code&gt; of items that are equal to the &lt;code&gt;$search-member&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;array:index-of(
               $input  as array(*),	
               $searched-member as item()*,
               $compare($x as item()*, $y as item()*) as xs:boolean := fn:deep-equal#2
                 ) as xs:integer*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Properties&lt;/h3&gt;
&lt;p&gt;This function is deterministic, context-independent, and focus-independent&lt;/p&gt;
&lt;h3&gt;Rules&lt;/h3&gt;
&lt;p&gt;The result of the function is a sequence of integers, in monotonic ascending order, representing the &lt;code&gt;1&lt;/code&gt;-based positions in the input array of those members &lt;code&gt;$mem&lt;/code&gt; for whom &lt;code&gt;$compare($mem, $searched-member)&lt;/code&gt; is &lt;code&gt;true()&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;More formally, the function returns the result of the XPath expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;  (1 to array:size($input)) ! (-&amp;gt; {  .[$compare($input(.), $searched-member)] }) (.)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/202876246-0256f0e7-c736-48b5-b862-7ebbe142d9ce.png" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;And also this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/202876368-9dd18c8c-888f-41e2-991d-b0779bc6dcd9.png" alt="image"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #259 created</title>
   <pubDate>Fri, 18 Nov 2022 23:24:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/259</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-259</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue #74 - add the fn:parse-html function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR makes the following changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add an &lt;code&gt;.editorconfig&lt;/code&gt; file to allow editors and IDEs to indent the XML source documents consistently.&lt;/li&gt;
&lt;li&gt;Group the XML and JSON parsing and serialization functions into a common top-level section.&lt;/li&gt;
&lt;li&gt;Update the html5 bibref to the WHATWG specification -- the old HTML5 link redirects there.&lt;/li&gt;
&lt;li&gt;Add a new fn:parse-html function specification.&lt;/li&gt;
&lt;li&gt;Define a mapping between the HTML DOM and the XDM nodes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The function specification itself is complete. The HTML DOM to XDM node mapping currently only contains the overview. I'm going to write that for this PR, this is just to start the ball rolling in specifying this function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #258 created</title>
   <pubDate>Fri, 18 Nov 2022 19:25:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/258</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-258</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue #114 - add array:index-where() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The function is symmetric with fn:index-where.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #257 created</title>
   <pubDate>Fri, 18 Nov 2022 18:02:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/257</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-257</guid>
   <description>&lt;div&gt;&lt;p&gt;Improving the styling/presentation/prepresentation of the record types in the F&amp;amp;O spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm not keen on the † symbol being used to indicate and link record types. This is not used elsewhere, and when a record type is used as a type, there is a link to the record type definition. I think that that link is sufficient.&lt;/p&gt;
&lt;p&gt;The presentation of the record type definition has the following format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;†type-name:
record(
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The record part is fine, but I find the &lt;code&gt;†type-name:&lt;/code&gt; part clunky. For functions, omiting the &lt;code&gt;declare function&lt;/code&gt; part from the XQuery syntax makes sense as the function signature is readable without that.&lt;/p&gt;
&lt;p&gt;The XQuery 4.0 draft spec has the following (as of yet unapproved) syntax for defining type aliases: https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-item-type-declaration. I would suggest using something similar, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type-name as record(
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is in line with the way function declarations are specified and looks more readable to me.&lt;/p&gt;
&lt;p&gt;Finally, ommitting the id from the &lt;code&gt;record&lt;/code&gt; element results in &lt;code&gt;†:&lt;/code&gt; before the record. -- It would be nice if instead of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div3 id="html-parser-options"&amp;gt;
           &amp;lt;head&amp;gt;HTML parser options&amp;lt;/head&amp;gt;
           &amp;lt;example role="record"&amp;gt;
              &amp;lt;record id="parse-html-options"&amp;gt;
                 &amp;lt;arg name="method" type="union(enum(&amp;amp;quot;html5&amp;amp;quot;), xs:string)"/&amp;gt;
                 &amp;lt;arg name="*"/&amp;gt;
              &amp;lt;/record&amp;gt;
           &amp;lt;/example&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you could write something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div3 id="parse-html-options"&amp;gt;
           &amp;lt;head&amp;gt;HTML parser options&amp;lt;/head&amp;gt;
           &amp;lt;example role="record"&amp;gt;
              &amp;lt;record type-name="parse-html-options"&amp;gt;
                 &amp;lt;arg name="method" type="union(enum(&amp;amp;quot;html5&amp;amp;quot;), xs:string)"/&amp;gt;
                 &amp;lt;arg name="*"/&amp;gt;
              &amp;lt;/record&amp;gt;
           &amp;lt;/example&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #256 created</title>
   <pubDate>Fri, 18 Nov 2022 16:52:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/256</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-256</guid>
   <description>&lt;div&gt;&lt;p&gt;Function declarations: static and dynamic context for default parameter values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the new text for default values on parameters in XQuery function declarations, we don't say clearly what the static context for the default value expression is. In particular we don't say that it excludes the other parameters of the function. The XSLT spec has similar (though slightly different) shortcomings.&lt;/p&gt;
&lt;p&gt;There's a slight complication in that we say the dynamic context for the default value expression is the dynamic context of the function call. But what if the default value is a variable reference &lt;code&gt;$x&lt;/code&gt;? Statically, this will be (presumably, though we don't currently say) be bound to a global variable &lt;code&gt;$x&lt;/code&gt;. Now, we say (under "dynamic context") that the dynamic "variable values" contains the same [expanded QNames] as the [in-scope variables] in the [static context] for the expression. But, the static context for the default value expression and the static context for the function call have different in-scope variables and they must therefore have different variable values in the dynamic context, so it's wrong to say that the dynamic context for the default value expression is the same as that of the function call.&lt;/p&gt;
&lt;p&gt;My first instinct would be to restrict the default value to being what XSLT calls a "static expression" (this isn't defined in XQuery, but it could be defined easily enough). However, that would disallow using "." as the default value expression, which is something we wanted to permit.&lt;/p&gt;
&lt;p&gt;The next option would be to say that the dynamic context for a default value expression is the same as the dynamic context of the function call except that "variable values" contains bindings for global variables only. This feels rather kludgey, but it's workable in principle. (It's worth noting, and might be worth noting in the spec, that in XQuery all components of the dynamic context except the focus and the variable values are typically immutable within an execution scope. The same isn't true in XSLT, where we have additional dynamic context components like regex-group() and current-output-uri() to worry about.).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #41 closed</title>
   <pubDate>Fri, 18 Nov 2022 16:44:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/41</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-41</guid>
   <description>&lt;div&gt;&lt;p&gt;[XQuery] The TypeswitchExpr and CaseClause symbols have repeated VarNames&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #5 closed</title>
   <pubDate>Fri, 18 Nov 2022 16:41:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/5</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-5</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] The math:atan2 notes incorrectly defines its behaviour.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #255 created</title>
   <pubDate>Fri, 18 Nov 2022 12:01:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/255</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-255</guid>
   <description>&lt;div&gt;&lt;p&gt;Build error running gradlew publish on Windows&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When running &lt;code&gt;./gradlew publish&lt;/code&gt; in Windows (via Git Bash) or running the publish gradle task in an IntelliJ Run/Debug configuration, I get the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Task :xquery_assemble_xpath
Transforming specifications/xquery-40/src/xpath.xml...
Error at char 9 in expression in xsl:variable/@select on line 168 column 60 of assemble-spec.xsl:
  FODC0005  Invalid URI
  file:/D:/Projects/xquery-xslt/qtspecs/build/xquery-40/src/xpath-preprocessed.xml/../D:\Projects\xquery-xslt\qtspecs\build/xquery-40/temp-xpath-grammar.xml. Caused by java.net.URISyntaxException: Illegal character in opaque part at index 2: D:\Projects\xquery-xslt\qtspecs\build/xquery-40/temp-xpath-grammar.xml
  In template rule with match="prodrecap" on line 152 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/specifications/xquery-40/style/assemble-xquery.xsl#26
  In template rule with match="/" on line 13 of assemble-xquery.xsl
Invalid URI file:/D:/Projects/xquery-xslt/qtspecs/build/xquery-40/src/xpath-preprocessed.xml/../D:\Projects\xquery-xslt\qtspecs\build/xquery-40/temp-xpath-grammar.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I've tracked this down to the &lt;code&gt;grammar-file&lt;/code&gt; option passed to the XSLT in the &lt;code&gt;build.gradle&lt;/code&gt; file, but I'm not currently sure what the fix should be.&lt;/p&gt;
&lt;p&gt;Note: running this within Linux via WSL works, so the issue looks like it is due to handling Windows paths as file URIs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #254 created</title>
   <pubDate>Thu, 17 Nov 2022 23:35:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/254</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-254</guid>
   <description>&lt;div&gt;&lt;p&gt;Improvements/fixes for the coercion rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is concerned with the coercion rules (formerly known as function conversion rules).&lt;/p&gt;
&lt;p&gt;It fixes issue #242, a minor omission where we failed to say that coercion rules are used to convert the result of a static function call to the required return type.&lt;/p&gt;
&lt;p&gt;It implements the proposal in issue #189, to apply the coercion rules to variable declarations/bindings as well as to function arguments and results. This brings XQuery into line with XSLT, and thus paves the way to allowing type declarations on "let" clauses in XPath.&lt;/p&gt;
&lt;p&gt;It does some further editorial tidying up of the rules, such as improvng the definition of the term "coercion rules", adding clarifying notes, etc.&lt;/p&gt;
&lt;p&gt;In approving this PR, I am requesting approval of the change (which was already in the draft, but has not been discussed) to introduce "down-casting" or "relabelling". This allows a function to declare a parameter with required type &lt;code&gt;xs:positiveInteger&lt;/code&gt;, and for a caller to supply the value 42 without explicitly casting it to &lt;code&gt;xs:positiveInteger&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #149 closed</title>
   <pubDate>Thu, 17 Nov 2022 11:12:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/149</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-149</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions for splitting a sequence (or array) based on predicate matching &lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #253 created</title>
   <pubDate>Thu, 17 Nov 2022 10:07:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/253</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-253</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix xnt references&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR doesn't make any technical changes[*]. It fixes some bugs in how cross-spec references are resolved. I failed to delete some out-of-date index files when I updated the code to generate them automatically. That lead to weird URIs. And I failed to update the stylesheets to correct for a change from &lt;code&gt;doc-xpath-&lt;/code&gt; to &lt;code&gt;doc-xpath40&lt;/code&gt; in the targets. Thanks to @michaelhkay for a detailed bug report.&lt;/p&gt;
&lt;p&gt;[*] That's not 100% true, I did change to &lt;code&gt;&amp;lt;xterm&amp;gt;&lt;/code&gt; references to &lt;code&gt;BracedURILiteral&lt;/code&gt; into &lt;code&gt;&amp;lt;xnt&amp;gt;&lt;/code&gt; references in &lt;code&gt;function-catalog.xml&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #252 closed</title>
   <pubDate>Thu, 17 Nov 2022 09:45:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/252</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-252</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo in CODEOWNERS&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #252 created</title>
   <pubDate>Thu, 17 Nov 2022 09:38:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/252</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-252</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo in CODEOWNERS&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #251 created</title>
   <pubDate>Thu, 17 Nov 2022 09:37:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/251</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-251</guid>
   <description>&lt;div&gt;&lt;p&gt;Use external CSS for styling&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR doesn't change anything technically, it moves around some big inline-blobs of CSS into external files so that we can have more consistency more easily. Every spec includes &lt;code&gt;qtspecs.css&lt;/code&gt; and another spec-specific CSS if it needs one. The diff markup is also in a separate CSS that's included in the diff versions.&lt;/p&gt;
&lt;p&gt;I don't think I've broken the styling anywhere, but if you look around and find something that looks odd, please let me know.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #250 created</title>
   <pubDate>Wed, 16 Nov 2022 23:07:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/250</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-250</guid>
   <description>&lt;div&gt;&lt;p&gt;97 New functions fn:foot, fn:trunk, array:foot, array:trunk&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;New functions fn:foot, fn:truncate, array:foot, array:truncate, as proposed in issue #97. Note that not everyone was happy with the name "truncate".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #249 created</title>
   <pubDate>Wed, 16 Nov 2022 22:26:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/249</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-249</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 213: new function fn:items-at&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add new function fn:items-at in response to issue 213&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #248 created</title>
   <pubDate>Wed, 16 Nov 2022 18:43:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/248</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-248</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial: update change logs and status&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is purely editorial: it updates change logs and status information to reflect the current state of play. In particular, the change logs in appendices now attempt to distinguish changes approved by the WG from changes that were in the baseline draft prepared by the editor, but which have not yet been reviewed or approved.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #247 created</title>
   <pubDate>Wed, 16 Nov 2022 17:06:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/247</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-247</guid>
   <description>&lt;div&gt;&lt;p&gt;Actions QT4CG-011-01 and QT4CG-011-03. &lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Actions QT4CG-011-01 and QT4CG-011-03. (Note, there are still some infrastructure problems with xnt references)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #246 closed</title>
   <pubDate>Wed, 16 Nov 2022 17:02:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/246</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-246</guid>
   <description>&lt;div&gt;&lt;p&gt;Give ednote a distinctive appearance&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #246 created</title>
   <pubDate>Wed, 16 Nov 2022 16:52:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/246</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-246</guid>
   <description>&lt;div&gt;&lt;p&gt;Give ednote a distinctive appearance&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Next, move all the CSS into a common location&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #245 closed</title>
   <pubDate>Wed, 16 Nov 2022 16:49:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/245</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-245</guid>
   <description>&lt;div&gt;&lt;p&gt;Updates to parse-uri and build-uri functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #245 created</title>
   <pubDate>Wed, 16 Nov 2022 16:29:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/245</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-245</guid>
   <description>&lt;div&gt;&lt;p&gt;Updates to parse-uri and build-uri functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Complete &lt;a href="https://qt4cg.org/meeting/minutes/2022/11-15.html#new-actions"&gt;actions&lt;/a&gt; QT4CG-011-04 and QT4CG-011-05.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #222 closed</title>
   <pubDate>Wed, 16 Nov 2022 11:52:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/222</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-222</guid>
   <description>&lt;div&gt;&lt;p&gt;Sequence comparison (starts, ends, contains) - issues 94, 96&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #244 closed</title>
   <pubDate>Wed, 16 Nov 2022 11:52:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/244</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-244</guid>
   <description>&lt;div&gt;&lt;p&gt;Sequence comparison (starts, ends, contains) - issues 94, 96 (fix 222)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #80 closed</title>
   <pubDate>Wed, 16 Nov 2022 11:50:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/80</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-80</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:while (before: fn:until)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #244 created</title>
   <pubDate>Wed, 16 Nov 2022 11:35:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/244</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-244</guid>
   <description>&lt;div&gt;&lt;p&gt;Sequence comparison (starts, ends, contains) - issues 94, 96 (fix 222)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is another attempt to fix the merge conflicts in #222&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #243 closed</title>
   <pubDate>Wed, 16 Nov 2022 11:29:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/243</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-243</guid>
   <description>&lt;div&gt;&lt;p&gt;Sequence comparison (starts, ends, contains) - issues 94, 96 with merge conflicts resolved&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #243 created</title>
   <pubDate>Wed, 16 Nov 2022 11:12:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/243</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-243</guid>
   <description>&lt;div&gt;&lt;p&gt;Sequence comparison (starts, ends, contains) - issues 94, 96 with merge conflicts resolved&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I believe this is PR #222 with merge conflicts against the current master branch resolved.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #228 closed</title>
   <pubDate>Wed, 16 Nov 2022 10:56:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/228</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-228</guid>
   <description>&lt;div&gt;&lt;p&gt;Updates to make FO valid&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #202 closed</title>
   <pubDate>Wed, 16 Nov 2022 10:02:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/202</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-202</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: subtyping (196)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #242 created</title>
   <pubDate>Wed, 16 Nov 2022 00:57:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/242</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-242</guid>
   <description>&lt;div&gt;&lt;p&gt;Coercion rules used to convert function result to expected type&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have separated the rules for static and dynamic function calls, which was necessary because static calls can now use keywords, whereas dynamic calls can't.&lt;/p&gt;
&lt;p&gt;The new rules say that the coercion rules are used to convert the result to the expected result type in a dynamic call, but they fail to say that this also happens on a static call.&lt;/p&gt;
&lt;p&gt;It would be nicer (and less error prone) if we could combine the rules. Ideally we should define that a static function call &lt;code&gt;F(A, B, C)&lt;/code&gt; is equivalent to the dynamic call &lt;code&gt;F#3(A, B, C)&lt;/code&gt;. This in turn would be easier if we can find a way to extend function items to have optional parameters and to permit keyword arguments.&lt;/p&gt;
&lt;p&gt;Note also that the definition of the term "coercion rules" is deficient. It doesn't say what the rules are, it just gives an example of one situation where they are used.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #153 closed</title>
   <pubDate>Tue, 15 Nov 2022 20:48:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/153</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-153</guid>
   <description>&lt;div&gt;&lt;p&gt;Explicitly mention subtypes for arrays and maps&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 011 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 15 Nov 2022 18:00:42 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-15</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-15</guid>
</item><item>
   <title>Issue #230 closed</title>
   <pubDate>Tue, 15 Nov 2022 17:52:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/230</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-230</guid>
   <description>&lt;div&gt;&lt;p&gt;New proposed text resolving issue 71 (Guarded expressions)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #72 closed</title>
   <pubDate>Tue, 15 Nov 2022 17:52:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/72</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-72</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Provide better support for URI processing within an expression&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #215 closed</title>
   <pubDate>Tue, 15 Nov 2022 17:52:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/215</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-215</guid>
   <description>&lt;div&gt;&lt;p&gt;First attempt at parse-uri and build-uri functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #207 closed</title>
   <pubDate>Tue, 15 Nov 2022 17:50:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/207</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-207</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 1. New expanded-QName function; new fn:QName#1 variant&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #210 closed</title>
   <pubDate>Tue, 15 Nov 2022 17:30:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/210</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-210</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 80: fn:iterate-while (before: fn:while)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #197 closed</title>
   <pubDate>Tue, 15 Nov 2022 17:29:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/197</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-197</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: Variadicity (166)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #241 created</title>
   <pubDate>Tue, 15 Nov 2022 11:23:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/241</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-241</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions integer-to-string and string-to-integer with radix&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose (in response to a suggestion from Joel Kalvesmaki on the XML Slack) two functions&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:integer-to-string($value as xs:integer, $radix as xs:integer := 10) as xs:string

fn:string-to-integer($value as xs:string, $radix as xs:integer := 10) as xs:integer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;that produce/accept string representations of signed integers in a base other than 10. Proposed range for $radix is 2 to 32.&lt;/p&gt;
&lt;p&gt;Note:  I considered extending &lt;code&gt;fn:format-integer()&lt;/code&gt;, but the result looked clumsy.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #240 closed</title>
   <pubDate>Mon, 14 Nov 2022 10:17:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/240</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-240</guid>
   <description>&lt;div&gt;&lt;p&gt;Subtyping&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #240 created</title>
   <pubDate>Sun, 13 Nov 2022 22:41:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/240</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-240</guid>
   <description>&lt;div&gt;&lt;p&gt;Subtyping&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #239 created</title>
   <pubDate>Sun, 13 Nov 2022 11:50:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/239</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-239</guid>
   <description>&lt;div&gt;&lt;p&gt;Terminology concerning function items and their access to static and dynamic context&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See this StackOverflow question: https://stackoverflow.com/questions/74408887&lt;/p&gt;
&lt;p&gt;The language describing how the static and dynamic context are bound in function items delivered by expressions such as &lt;code&gt;xs:QName#1&lt;/code&gt; or &lt;code&gt;xs:QName(?)&lt;/code&gt; is pretty impenetrable, and I don't think it is very accurate. For example, for the latter case, the relevant rule asks "If [the implementation of F] is not an XPath 3.1 expression..." which seems to suggest that the behaviour varies depending on whether the implementation of &lt;code&gt;xs:QName()&lt;/code&gt; is written in XPath or in some other language, which cannot be right.&lt;/p&gt;
&lt;p&gt;For named function references, the spec talks of " if the function is context dependent, then the returned function is associated with the static context of the named function reference and the dynamic context in which it is evaluated. " but what exactly does it mean for the function to be context dependent?&lt;/p&gt;
&lt;p&gt;The behaviour of partial function application is said to depend on whether "F's implementation is already associated with contexts", and if F was the result of a named function reference, then this seems to depend on whether the [static] function that's the target of the reference is context dependent, but how is that determined?&lt;/p&gt;
&lt;p&gt;This issue is raised essentially to take note that there's a lot of flakiness in the specification in this area. It's not obvious what the solution is, but there is surely scope for making things much clearer than they are currently.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #238 created</title>
   <pubDate>Sat, 12 Nov 2022 08:30:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/238</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-238</guid>
   <description>&lt;div&gt;&lt;p&gt;Support Invisible XML&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that we support Invisible XML by means of a function&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:invisible-xml($grammar as xs:string) as (function($string) as document-node())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The function takes as input a string defining an invisible XML grammar in ixml format, and returns as output a function that can be used to parse strings conforming to that grammar, converting them into XDM document nodes.&lt;/p&gt;
&lt;p&gt;As a "dog-food" use case, we could use this for rendering function signatures in the F&amp;amp;O specification. Rather than using manual markup to define the signature of each function, we could define an IXML grammar for function signatures, and use this as the basis for formatting the representation in the spec. This would be particularly beneficial as we start to introduce more complex signatures involving record types.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #237 created</title>
   <pubDate>Fri, 11 Nov 2022 22:28:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/237</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-237</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue167 xsl conditionals&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Update following CG review on 8 November; improvements to notes and examples, no substantive change.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #236 created</title>
   <pubDate>Fri, 11 Nov 2022 12:37:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/236</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-236</guid>
   <description>&lt;div&gt;&lt;p&gt;map:build: sequence of keys&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In resolving PR #203 to address issue #151, the group decided not to immediately address all of the concerns raised by Martin Honnen in &lt;a href="https://lists.w3.org/Archives/Public/public-xslt-40/2022Oct/0035.html"&gt;an email discussion&lt;/a&gt; where he wrote:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;When map:group-by was introduced I found the restriction of a single key
instead of a sequence of keys unnecessarily restrictive (some people on
Slack agreed), the same appears in my view to be the case for the new
map:build, I think it could be easily adapted to handle a sequence of
keys by using e.g.

  fold-left($input, map{}, -&amp;gt;($map, $next) {

   fold-left($key($next), $map, -&amp;gt;($map, $key) {
    let $nextValue := $value($next) return
    if (map:contains($map, $key))
    then map:put($map, $key, $combine($map($key), $nextValue))
    else map:put($map, $key, $nextValue)})
  }
)

as the implementation body/definition of the result of

map:build(
$input    as item()*,
$key    as function(item()) as xs:anyAtomicType*    := fn:identity#1,
$value    as function(item()) as item()*    := fn:identity#1,
$combine    as function(item()*, item()*) as item()*    := fn:op(',')
) as map(*)


Use case in my view is the classical example of the XSLT 3 spec where in
e.g.

&amp;lt;titles&amp;gt;
     &amp;lt;title&amp;gt;A Beginner's Guide to &amp;lt;ix&amp;gt;Java&amp;lt;/ix&amp;gt;&amp;lt;/title&amp;gt;
     &amp;lt;title&amp;gt;Learning &amp;lt;ix&amp;gt;XML&amp;lt;/ix&amp;gt;&amp;lt;/title&amp;gt;
     &amp;lt;title&amp;gt;Using &amp;lt;ix&amp;gt;XML&amp;lt;/ix&amp;gt; with &amp;lt;ix&amp;gt;Java&amp;lt;/ix&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/titles&amp;gt;

you want to group the "title" elements by the "ix" child elements, with
the proposed change above that would give e.g.

map {
   "Java": (&amp;lt;title&amp;gt;A Beginner's Guide to &amp;lt;ix&amp;gt;Java&amp;lt;/ix&amp;gt;
&amp;lt;/title&amp;gt;, &amp;lt;title&amp;gt;Using &amp;lt;ix&amp;gt;XML&amp;lt;/ix&amp;gt; with &amp;lt;ix&amp;gt;Java&amp;lt;/ix&amp;gt;
&amp;lt;/title&amp;gt;),
   "XML": (&amp;lt;title&amp;gt;Learning &amp;lt;ix&amp;gt;XML&amp;lt;/ix&amp;gt;
&amp;lt;/title&amp;gt;, &amp;lt;title&amp;gt;Using &amp;lt;ix&amp;gt;XML&amp;lt;/ix&amp;gt; with &amp;lt;ix&amp;gt;Java&amp;lt;/ix&amp;gt;
&amp;lt;/title&amp;gt;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We'll come back to this later.&lt;/p&gt;
&lt;p&gt;Creating this issue satisfies &lt;a href="https://qt4cg.org/meeting/minutes/2022/10-18.html#pr-map-build"&gt;action QT4CG-008-05 on NW&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 011 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 11 Nov 2022 12:30:12 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-15</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-15</guid>
</item><item>
   <title>Issue #177 closed</title>
   <pubDate>Fri, 11 Nov 2022 12:00:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/177</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-177</guid>
   <description>&lt;div&gt;&lt;p&gt;Items before etc&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #166 closed</title>
   <pubDate>Fri, 11 Nov 2022 11:56:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/166</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-166</guid>
   <description>&lt;div&gt;&lt;p&gt;Variadicity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #196 closed</title>
   <pubDate>Fri, 11 Nov 2022 11:55:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/196</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-196</guid>
   <description>&lt;div&gt;&lt;p&gt;Subtyping&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #199 closed</title>
   <pubDate>Fri, 11 Nov 2022 10:03:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/199</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-199</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: Items before, etc. (177)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #96 closed</title>
   <pubDate>Thu, 10 Nov 2022 21:41:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/96</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-96</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Functions that determine if a given sequence starts with another sequence or ends with another sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 010 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Thu, 10 Nov 2022 17:37:37 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-08</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-08</guid>
</item><item>
   <title>Issue #235 created</title>
   <pubDate>Thu, 10 Nov 2022 09:36:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/235</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-235</guid>
   <description>&lt;div&gt;&lt;p&gt;Add multiple=true() option to fn:parse-json and fn:json-doc&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It is common practice (though not, I believe, covered by any standard) to have files that contain multiple JSON objects. Often these will be arranged one per line, as in our own qt3tests use case R31 at https://github.com/w3c/qt3tests/blob/master/app/UseCaseR31/sales.json . In that example, the file can be parsed using &lt;code&gt;unparsed-text-lines()!parse-json()&lt;/code&gt;. But in the more general case, where each object may itself be multi-line, there's no easy way of handling this.&lt;/p&gt;
&lt;p&gt;I propose an option multiple=true() on &lt;code&gt;fn:parse-json&lt;/code&gt; and &lt;code&gt;fn:json-doc&lt;/code&gt; that enables parsing of an input containing multiple (zero or more) concatenated JSON texts. When this option is present, the result will always be delivered as an array, containing one member for each JSON text in the input. The wrapper array will be present even if the number of JSON texts in the input is zero or one.&lt;/p&gt;
&lt;p&gt;If a JSON text ends with a letter or digit and the next JSON text starts with a letter or digit then they must be separated by whitespace.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #182 closed</title>
   <pubDate>Wed, 9 Nov 2022 18:20:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/182</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-182</guid>
   <description>&lt;div&gt;&lt;p&gt;Should we allow vendor-defined optional parameters on built-in functions?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #234 created</title>
   <pubDate>Tue, 8 Nov 2022 20:56:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/234</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-234</guid>
   <description>&lt;div&gt;&lt;p&gt;If Without Else&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is based on the discussions in today's QT4CG meeting, as suggested by @dnovatchev.&lt;/p&gt;
&lt;h2&gt;Use Case&lt;/h2&gt;
&lt;p&gt;It is common to have an if condition where the &lt;code&gt;else&lt;/code&gt; branch does nothing (i.e. yields the empty sequence). In BaseX, this requirement has lead to them making the else branch optional.&lt;/p&gt;
&lt;p&gt;It can also be conceivable to want to elide the &lt;code&gt;then&lt;/code&gt; branch as a way of not negating the if condition expression.&lt;/p&gt;
&lt;p&gt;In the XSLT 4.0 draft, both of these are possible in the changes to support optional &lt;code&gt;@then&lt;/code&gt; (or possibly &lt;code&gt;@select&lt;/code&gt;) and &lt;code&gt;@else&lt;/code&gt; attributes. Part of this is due to requiring backward compatibility with XSLT 3.0 that only allows the then branch within child elements. It would be nice to be able to support this in XPath and XQuery for parity between the languages.&lt;/p&gt;
&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;The rationale for not allowing an optional &lt;code&gt;else&lt;/code&gt; is to avoid the dangling else problem from C and other languages that have optional else statements. That is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($c) then
    if ($d)
    then 1
    else 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is ambiguous as the else could be part of the &lt;code&gt;$d&lt;/code&gt; if statement or the &lt;code&gt;$c&lt;/code&gt; if statement. This would require parenthesis around the if statement to resolve the ambiguity, but the syntax should not require that. -- That is, it should be clear to the reader what the if statement will do.&lt;/p&gt;
&lt;p&gt;As such, I propose the following variants:&lt;/p&gt;
&lt;p&gt;(1) An if statement with a then and else expression -- currently supported:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($c) then 1 else 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(2) An if statement with an else expression, but not a then expression -- new, should be unambiguous:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($c) else 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(3) An if statement with a then expression, but not an else expression -- to resolve the dangling else, I propose to use &lt;code&gt;return&lt;/code&gt; instead of &lt;code&gt;then&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($c) return 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works analogously to the existing FLWOR, switch, typeswitch and other expressions that use &lt;code&gt;return&lt;/code&gt; to denote the return/result expression.&lt;/p&gt;
&lt;p&gt;For the dangling else, both cases are clear:&lt;/p&gt;
&lt;p&gt;(a) when the &lt;code&gt;$c&lt;/code&gt; (outer) if has the elided else expression:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($c) return
    if ($d)
    then 1
    else 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(b) when the &lt;code&gt;$d&lt;/code&gt; (inner) if has the elided else expression:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($c)
then if ($d) return 1
else 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Replace:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IfExpr ::= "if"  "("  Expr  ")"  "then"  ExprSingle  "else"  ExprSingle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IfExpr ::= IfClause (( ThenClause? ElseCause ) | ReturnClause)
IfClause ::= "if"  "("  Expr  ")"
ThenClause ::= "then"  ExprSingle
ElseClause ::= "else"  ExprSingle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Design note:&lt;/em&gt; There is a &lt;code&gt;ReturnClause&lt;/code&gt; symbol that is defined as &lt;code&gt;"return"  ExprSingle&lt;/code&gt;. Because of this, and to indicate that the &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; parts are not expressions, I've opted for the term clause. -- This matches the use in FLWORExpr, SwitchExpr, TypeswitchExpr, etc. that all use the term clause. I've also separated them out to make the &lt;code&gt;IfExpr&lt;/code&gt; more readable now that it has optional parts.&lt;/p&gt;
&lt;h2&gt;Semantics&lt;/h2&gt;
&lt;p&gt;Replace:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The expression following the if keyword is called the test expression, and the expressions following the then and else keywords are called the then-expression and else-expression, respectively.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The expression between the parenthesis after the &lt;code&gt;if&lt;/code&gt; keyword is called the &lt;em&gt;test expression&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The expression after the &lt;code&gt;then&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt; keyword is called the &lt;em&gt;then-expression&lt;/em&gt;. If this is missing, it defaults to the empty sequence.&lt;/p&gt;
&lt;p&gt;The expression after the &lt;code&gt;else&lt;/code&gt; keyword is called the &lt;em&gt;else-expression&lt;/em&gt;. If this is missing, it defaults to the empty sequence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Those should be the only required changes.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #233 created</title>
   <pubDate>Tue, 8 Nov 2022 14:25:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/233</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-233</guid>
   <description>&lt;div&gt;&lt;p&gt;Declare the result type of a mode, via @as&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Initial message to support discussion on the proposal for the introduction of &lt;code&gt;@as&lt;/code&gt; in &lt;code&gt;&amp;lt;xsl:mode&amp;gt;&lt;/code&gt; to define the output of a particular mode. Current: https://qt4cg.org/specifications/xslt-40/Overview-diff.html#mode-result-type&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 010 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 7 Nov 2022 17:20:10 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-08</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-08</guid>
</item><item>
   <title>Pull request #232 created</title>
   <pubDate>Sat, 5 Nov 2022 19:29:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/232</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-232</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 225 - Data model clarifications&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR attempts to clean up some of the definitions of concepts in the data model spec, including fixing some minor errors.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #231 created</title>
   <pubDate>Sat, 5 Nov 2022 18:42:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/231</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-231</guid>
   <description>&lt;div&gt;&lt;p&gt;for expression: "at" keyword&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In a the &lt;strong&gt;&lt;em&gt;&lt;a href="https://github.com/qt4cg/qtspecs/issues/181#issuecomment-1304604772"&gt;comment thread&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; to #181 it was noticed that to be in line with that proposal, we also need to be able to access the index of any member variable within a &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/pr/230/xquery-40/xpath-40-autodiff.html#id-for-expressions"&gt;"for expression"&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This can be done in various ways, such as with an &lt;strong&gt;&lt;em&gt;&lt;code&gt;index()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; function, as in the code example below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;for $x in (1,  3, 5, 7, 9, 11),
    $y in (1,  3, 5, 7, 9, 11)
 return
     if(index($x) le index($y)) then [$x, $y]
       else ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But fortunately, in XQuery there is already the &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/pr/230/xquery-40/xpath-40-autodiff.html#id-for-expressions"&gt;"at"&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; keyword serving exactly the same purpose. Thus the above expression can be written as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;for $x at $ind-x in (1,  3, 5, 7, 9, 11),
    $y at $ind-y in (1,  3, 5, 7, 9, 11)
 return
     if($ind-x le $ind-y) then [$x, $y]
       else ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus, I am proposing just to allow the &lt;strong&gt;"at"&lt;/strong&gt; keyword in XPath &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/pr/230/xquery-40/xpath-40-autodiff.html#id-for-expressions"&gt;for-expressions&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #230 created</title>
   <pubDate>Thu, 3 Nov 2022 11:33:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/230</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-230</guid>
   <description>&lt;div&gt;&lt;p&gt;New proposed text resolving issue 71 (Guarded expressions)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The discussion on issue 71 was very wide-ranging and went off into a number of tangents. This PR attempts to resolve the issue initially raised (order of evaluation of predicates) in a general way by introducing the notion of guarded expressions. This also provides a proposed solution to the question of "short-cutting" and/or expressions - essentially, an optimiser can change the order of evaluation, but doing so must not introduce dynamic errors that would not occur in a short-cutted evaluation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 009 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 1 Nov 2022 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-01</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-01</guid>
</item><item>
   <title>Issue #214 closed</title>
   <pubDate>Tue, 1 Nov 2022 15:20:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/214</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-214</guid>
   <description>&lt;div&gt;&lt;p&gt;FLWOR without FL&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #229 created</title>
   <pubDate>Mon, 31 Oct 2022 19:02:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/229</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-229</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal: Add the missing functions for arrays: array:exists() and array:empty()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The functions over sequences: &lt;code&gt;fn:exists&lt;/code&gt; and &lt;code&gt;fn:empty&lt;/code&gt; are amongst the most useful and well-understood sequence functions.&lt;/p&gt;
&lt;p&gt;In case we need to know whether or not an array has at least one member, or none, these function cannot help us:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/199085022-c5466814-95e9-484e-8315-82159c8724dc.png" alt="image"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;To fill this gap, these two functions are proposed:&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;array:exists&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Signature&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;array:exists($arg as array(*)) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Properties&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This function is &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-deterministic"&gt;·deterministic·&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-context-independent"&gt;·context-independent·&lt;/a&gt;, and &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-focus-independent"&gt;·focus-independent·&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the value of &lt;code&gt;$arg&lt;/code&gt; is a non-empty array, the function returns &lt;code&gt;true()&lt;/code&gt;; otherwise, the function returns &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;array:exists(array:remove(["hello"], 1)&lt;/code&gt; returns &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;aray:exists(array:remove(["hello", "world"], 1)&lt;/code&gt; returns &lt;code&gt;true()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;aray:exists([])&lt;/code&gt; returns &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;aray:exists([ () ])&lt;/code&gt; returns &lt;code&gt;true()&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;array:empty&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Signature&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;
array:empty($arg as array(*)) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Properties&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This function is &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-deterministic"&gt;·deterministic·&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-context-independent"&gt;·context-independent·&lt;/a&gt;, and &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-focus-independent"&gt;·focus-independent·&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the value of &lt;code&gt;$arg&lt;/code&gt; is the empty array, the function returns &lt;code&gt;true()&lt;/code&gt;; otherwise, the function returns &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;array:empty(array:remove(["hello"], 1)&lt;/code&gt; returns &lt;code&gt;true()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;aray:empty(array:remove(["hello", "world"], 1)&lt;/code&gt; returns &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;aray:empty([])&lt;/code&gt; returns &lt;code&gt;true()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;aray:empty([ () ])&lt;/code&gt; returns &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #228 created</title>
   <pubDate>Mon, 31 Oct 2022 17:07:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/228</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-228</guid>
   <description>&lt;div&gt;&lt;p&gt;Updates to make FO valid&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR doesn't (intentionally) make any substantive changes, it simply fixes the FO spec and the tools that build it so that they produce valid markup. We have accidentally been running without validation and an unpleasantly large number of errors have crept in.&lt;/p&gt;
&lt;p&gt;I made some ad hoc changes to the DTDs (already committed to the&lt;code&gt;master branch&lt;/code&gt;) where it seemed like it would be better to allow the new markup (&lt;code&gt;var&lt;/code&gt; in &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt; in &lt;code&gt;td&lt;/code&gt;, etc.) than attempt to redraft the specification in some new way.&lt;/p&gt;
&lt;p&gt;But that left a bunch of places where &lt;code&gt;p&lt;/code&gt; or other wrappers were left out, a number of places where HTML markup instead of &lt;code&gt;xmlspec&lt;/code&gt; was inserted, some broken links, etc.&lt;/p&gt;
&lt;p&gt;Merging this into the repository while we have active PRs in flight for F&amp;amp;O is going to be &lt;em&gt;ugly&lt;/em&gt; so I'm not proposing to merge this right away.&lt;/p&gt;
&lt;p&gt;We should probably pause new PRs against FO until this has been sorted out.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #227 closed</title>
   <pubDate>Mon, 31 Oct 2022 16:22:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/227</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-227</guid>
   <description>&lt;div&gt;&lt;p&gt;Add the Data Model specification; rename Serialization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #227 created</title>
   <pubDate>Mon, 31 Oct 2022 16:16:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/227</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-227</guid>
   <description>&lt;div&gt;&lt;p&gt;Add the Data Model specification; rename Serialization&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Added the Data Model specification&lt;/li&gt;
&lt;li&gt;Renamed the Serialization specification from 3.1 to 4.0&lt;/li&gt;
&lt;li&gt;Reworked the way the cross reference index files (the /etc/ directory) are handled. The 4.0 versions are now generated every time, and should not be committed to the repository. (I haven't removed the old ones yet because this PR build will fail if I do. They're coming out next.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I expect that the old ant build scripts will no longer work. I'm probably going to pull all that infrastructure out Real Soon Now™ as we've been working successfully with the new system.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #226 closed</title>
   <pubDate>Mon, 31 Oct 2022 15:24:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/226</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-226</guid>
   <description>&lt;div&gt;&lt;p&gt;Add the Data Model specification; rename Serialization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #226 created</title>
   <pubDate>Mon, 31 Oct 2022 15:13:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/226</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-226</guid>
   <description>&lt;div&gt;&lt;p&gt;Add the Data Model specification; rename Serialization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;ATTENTION&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are a &lt;em&gt;whole&lt;/em&gt; bunch of markup errors in the F&amp;amp;O specification. The build system has not been validating it before publication 😞 😢 😭 . I have fixed them in this PR. I fixed the markup where it was clear how to do that. I hacked at the DTDs to allow some new markup patterns. It's kind of a mess and if you've got an open PR on the F&amp;amp;O spec, I'm afraid it's going to be painful.&lt;/p&gt;
&lt;p&gt;Aside from that horror show (hey, it's Halloween, maybe it's appropriate), I:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Added the Data Model specification&lt;/li&gt;
&lt;li&gt;Renamed the Serialization specification from 3.1 to 4.0&lt;/li&gt;
&lt;li&gt;Reworked the way the cross reference index files (the &lt;code&gt;/etc/&lt;/code&gt; directory) are handled. The 4.0 versions are now generated every time, and should not be committed to the repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I expect that the old ant build scripts will no longer work. I'm probably going to pull all that infrastructure out Real Soon Now™ as we've been working successfully with the new system.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #225 created</title>
   <pubDate>Sun, 30 Oct 2022 07:40:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/225</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-225</guid>
   <description>&lt;div&gt;&lt;p&gt;[XDM] Terminology around "Atomic value" and "Type Annotation"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In response to the comments (see https://github.com/qt4cg/qtspecs/pull/202) against issue 196, I propose that we tighten up the terminology associated with atomic values.&lt;/p&gt;
&lt;p&gt;In XDM, §2.7.5 says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An atomic value can be constructed from a lexical representation. Given a string and an atomic type, the atomic value is constructed in such a way as to be [consistent with schema validation]. If the string does not represent a valid value of the type, an error is raised. When xs:untypedAtomic is specified as the type, no validation takes place. The details of the construction are described in [Section 18 Constructor functions ] and the related [Section 19 Casting ] section of [[XQuery and XPath Functions and Operators 3.1]].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The actual definition of "atomic value" is found in 2.1 Terminology and reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: An atomic value is a value in the value space of an [atomic type] and is labeled with the name of that atomic type.]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Oddly, this isn't linked from 2.7.5)&lt;/p&gt;
&lt;p&gt;There's another little issue here, which is that an atomic value created by atomizing a schema-validated node may end up having an anonymous type, in which case its most specific type is inexpressible using XPath ItemType syntax. Is the type annotation in this case an atomic type, or is it the name of an atomic type. And should we avoid assuming that the concept of "item type" is something synonymous with the &lt;code&gt;ItemType&lt;/code&gt; construct in the XPath grammar? As a start, I would prefer to say that the type annotation is a type, rather than a name.&lt;/p&gt;
&lt;p&gt;In a non-normative note in §2.7, XDM also says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Values including element and attribute nodes, and atomic values, have a property called a type annotation whose value is a type: this is a reference to a type definition in the Schema Component Model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It goes on to say (normatively, but rather informally):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every [item] in the data model has both a value and a type. In addition to nodes, the data model can represent atomic values like the number 5 or the string “Hello World.” For each of these atomic values, the data model contains both the value of the item (such as 5 or “Hello World”) and its type. The property that holds the type is sometimes referred to as the type annotation: its value is a type definition component as defined in the Schema Component Model. This may be a built-in type (a type with a name such as xs:integer or xs:string), or a user-defined type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This statement is misleading in a number of ways. Firstly, some items such as empty maps and arrays conform to many types, but they do not have a single defining type that trumps all the others. Secondly, the way the term "type annotation" is introduced fails to make clear that the type annotation of a node is something quite different from the type annotation of an atomic value; if an element named N has a type annotation of &lt;code&gt;my:part-number&lt;/code&gt;, then its (most specific) type is &lt;code&gt;element(N, my:part-number)&lt;/code&gt;, while if an atomic value has a type annotation of &lt;code&gt;my:part-number&lt;/code&gt;, then its most specific type is &lt;code&gt;my:part-number&lt;/code&gt;. It also fails to make it clear that items like maps and arrays do not have a type annotation; their type is inferred from their content.&lt;/p&gt;
&lt;p&gt;The fuzziness of some of these definitions makes it very difficult to be sufficiently formal elsewhere in the language. For example in 4.0 we're proposing to allow "down-casting" (or "relabelling") of atomic values in the coercion rules, and it's very hard to describe this operation formally without a better model.&lt;/p&gt;
&lt;p&gt;I would like to start by changing the definition to&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An atomic item (also known as an atomic value) is a pair (T, D) where T (the "type annotation") is an atomic type, and D (the "datum") is a point in the value space of T.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;followed by references to atomic types and value spaces as concepts defined in XSD.&lt;/p&gt;
&lt;p&gt;I don't expect we will want to use the term "datum" very often, but it's useful to have a name for the concept when we need it. We currently tend to call it the "value" which is very confusing, because if the (T, D) pair is a value, then D can't also be a value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 009 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 28 Oct 2022 08:21:36 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-01</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-01</guid>
</item><item>
   <title>Issue #224 created</title>
   <pubDate>Fri, 28 Oct 2022 09:01:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/224</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-224</guid>
   <description>&lt;div&gt;&lt;p&gt;Infrastructure changes/improvements&lt;/p&gt;…failed to parse issue text…&lt;/div&gt;</description>
</item><item>
   <title>Issue #223 closed</title>
   <pubDate>Thu, 27 Oct 2022 16:04:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/223</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-223</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow eg in fos:expression and fos:result&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #223 created</title>
   <pubDate>Thu, 27 Oct 2022 15:59:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/223</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-223</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow eg in fos:expression and fos:result&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR formats &lt;code&gt;eg&lt;/code&gt; in &lt;code&gt;fos:expression&lt;/code&gt; and &lt;code&gt;fos:result&lt;/code&gt; as a block. I don't think this will have any detrimental effects as it's done during the "merging" process.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #217 closed</title>
   <pubDate>Wed, 26 Oct 2022 08:32:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/217</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-217</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue 41 (grammar bug in Typeswitch)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #222 created</title>
   <pubDate>Tue, 25 Oct 2022 21:56:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/222</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-222</guid>
   <description>&lt;div&gt;&lt;p&gt;Sequence comparison (starts, ends, contains) - issues 94, 96&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add 3 functions starts-with-sequence, ends-with-sequence, contains-sequence as per issues #96 and part of #94&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #221 created</title>
   <pubDate>Tue, 25 Oct 2022 20:35:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/221</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-221</guid>
   <description>&lt;div&gt;&lt;p&gt;Expose op:same-key() as a user-visible function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In issues #94, #96, and #99 a set of functions for comparing sequences are proposed; all of them are parameterized with a function for comparing items.&lt;/p&gt;
&lt;p&gt;A useful function for comparing items is op:same-key() (useful because it is error-free, context-free, and transitive). For this and other reason, it would be useful to expose op:same-key() as a user-visible function.&lt;/p&gt;
&lt;p&gt;The only tricky question is what to call it. I suggest "atomic-equal".&lt;/p&gt;
&lt;p&gt;Alternatively, we could overload the "is" operator to compare atomic values using &lt;code&gt;op:same-key()&lt;/code&gt;, and use op("is") as the argument to the sequence comparison functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 008 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 25 Oct 2022 16:47:40 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-25</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-25</guid>
</item><item>
   <title>Issue #219 closed</title>
   <pubDate>Tue, 25 Oct 2022 11:45:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/219</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-219</guid>
   <description>&lt;div&gt;&lt;p&gt;Options on fn:deep-equal&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #220 created</title>
   <pubDate>Tue, 25 Oct 2022 09:09:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/220</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-220</guid>
   <description>&lt;div&gt;&lt;p&gt;Encapsulation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Let's suppose that I want to provide a library to do complex number arithmetic, and I want to hide how complex numbers are actually implemented (it could be an array of two doubles, or a map containing two doubles, it could be in polar coordinates, etc).&lt;/p&gt;
&lt;p&gt;How might I go about doing this? One approach is like this (please be patient):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module namespace complex...;

declare %public type alias complex:number as function(*);

declare %private variable SECRET := &amp;lt;e/&amp;gt;;

declare $private function complex:wrap($content as record(re as xs:double, im as xs:double)) as complex:number {
    function($key as node()) {if ($key is $SECRET then $content else error());
};

declare $private function complex:unwrap($cx as complex:number) as record(re as xs:double, im as xs:double) {
   $cx($SECRET);
};

declare %public function complex:new($re as xs:double, $im as xs:double) as complex:number {
  complex:wrap(map{'re':$re, 'im':$im})
}

declare %public function complex:real($x as complex:number) as xs:double {
  complex:unwrap($x)?re
}

declare %public function complex:add($x as complex:number, $y as complex:number) {
  etc;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What's going on here? We're representing a complex number as an arity-1 function; the function "unlocks" the complex number to reveal its internal implementation, but it can only be called if you know the secret argument to pass, and this is encapsulated within the library module that implements the functionality. So we've successfully encapsulated the implementation, and we've done it without any data model changes. Within the provider module, the functions wrap() and unwrap() are available to convert from the internal representation to the external representation; these functions are not available to the caller.&lt;/p&gt;
&lt;p&gt;It works, but it's hardly elegant.&lt;/p&gt;
&lt;p&gt;From the point of view of the user of the library, it's quite usable: they just import the library and call the functions. They probably don't care that the type complex:number is actually a function, and if they do care, there's not much they can do with the knowledge.&lt;/p&gt;
&lt;p&gt;From the point of view of the author of the library, there's a lot of boilerplate. One thing we could do to improve matters would be to provide some syntactic sugar. Instead of a module declaration, use a class declaration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class complex:number wraps record(re as xs:double, im as xs:double);

declare %public function complex:real($x as complex:number) as xs:double {
  complex:unwrap($x)?re
}

declare %public function complex:add($x as complex:number, $y as complex:number) {
  etc;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The boilerplate, especially the wrap and unwrap functions, is now implicitly declared.&lt;/p&gt;
&lt;p&gt;And we could provide "import class" for the caller as an alternative to "import module".&lt;/p&gt;
&lt;p&gt;We could go further and give the magic function used to represent an encapsulated value some kind of special status in the data model. But do we need to?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #219 created</title>
   <pubDate>Mon, 24 Oct 2022 14:11:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/219</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-219</guid>
   <description>&lt;div&gt;&lt;p&gt;Options on fn:deep-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The function &lt;code&gt;fn:deep-equal&lt;/code&gt; makes some arbitrary decisions about how values are compared, and many applications need slightly different comparison semantics. This issue proposes adding an options parameter to customise the comparison rules.&lt;/p&gt;
&lt;p&gt;The following options are proposed (detailed syntax TBA):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For comparing atomic values, use op:same-key rather than eq. Note this implies ignoring the collation.&lt;/li&gt;
&lt;li&gt;When comparing children of a node, don't ignore comments&lt;/li&gt;
&lt;li&gt;When comparing children of a node, don't ignore processing instructions&lt;/li&gt;
&lt;li&gt;When comparing children of an element, ignore whitespace text nodes (except where the element node has a simple type)&lt;/li&gt;
&lt;li&gt;When ignoring comments and processing instructions, merge adjacent text nodes&lt;/li&gt;
&lt;li&gt;When comparing strings (etc), perform Unicode normalization&lt;/li&gt;
&lt;li&gt;When comparing strings (etc), perform whitespace normalization&lt;/li&gt;
&lt;li&gt;Compare as if untyped (ignore type annotations and typed value)&lt;/li&gt;
&lt;li&gt;Compare as typed (type annotation must match)&lt;/li&gt;
&lt;li&gt;Require the same in-scope namespace bindings on every element&lt;/li&gt;
&lt;li&gt;Require elements and attributes to have matching prefixes&lt;/li&gt;
&lt;li&gt;Compare the is-ID and is-IDREF properties on elements and attributes&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 008 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sat, 22 Oct 2022 09:49:46 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-25</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-25</guid>
</item><item>
   <title>Issue #218 created</title>
   <pubDate>Wed, 19 Oct 2022 09:11:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/218</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-218</guid>
   <description>&lt;div&gt;&lt;p&gt;Function library for maps with composite keys: and thoughts on encapsulation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose creating a function library that handles maps with composite keys. I'll start by defining a set of functions, then we'll consider how to package these, in particular issues of encapsulation and types. Even it we don't want to implement this particular feature, it might help to generate infrastructure that makes it easier to create such function libraries.&lt;/p&gt;
&lt;p&gt;For the sake of a name, I'll call the data structure we are manipulating an &lt;strong&gt;atlas&lt;/strong&gt;. (Like a map, but generalized.) An atlas is a mapping from sequences of atomic values to values. Two sequences of atomic values are equal if they are the same length and their constituent atoms are pairwise equal according to op:same-key(). Note that keys are variable length and it's permitted to have both ("a") and ("a, b") as entries in the atlas.&lt;/p&gt;
&lt;p&gt;We'll start by defining the API we want to offer. The semantics for these functions are essentially the same as the corresponding functions for maps. The type of $key is always xs:anyAtomicType*. We'll discuss the type of $atlas later.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;atlas:build($input, $keyFunction, $valueFunction, $onDuplicates) =&amp;gt; atlas&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;atlas:get($atlas, $key) =&amp;gt; value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;atlas:contains($atlas, $key) =&amp;gt; value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;atlas:put($atlas, $key, $value) =&amp;gt; atlas&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;atlas:keys($atlas) =&amp;gt; array(key)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;atlas:for-each($atlas, function(key, value)) =&amp;gt; value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;atlas:size($atlas) =&amp;gt; integer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;plus some more specific functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;atlas:get-branch($atlas, $partial-key) =&amp;gt; atlas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;returns an atlas containing all those entries in the supplied atlas whose keys start with the supplied partial-key; the returned atlas contains the remaining parts of the keys.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;atlas:put-branch($atlas, $partial-key, $atlas branch) =&amp;gt; atlas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similarly, grafts one atlas as a subtree into another.&lt;/p&gt;
&lt;p&gt;It's not too hard to come up with an implementation of this API that uses nested maps. For example: An atlas-node is a map from atomic-values to &lt;code&gt;record(leaf? as value, branch? as atlas-node)&lt;/code&gt;, where leaf contains the value if the atlas contains the relevant key in full, while branch contains a nested atlas if the atlas contains nodes starting with the relevant prefix; either or both may be present.&lt;/p&gt;
&lt;p&gt;Now the tricky part: how to handle encapsulation. There are two parts to this: (a) defining a type that can be used to represent an "atlas" in the API, and (b) preventing users subverting the API by accessing the implementation objects (atlas-nodes) directly.&lt;/p&gt;
&lt;p&gt;There are features we can build on: the proposal for named item type aliases, and the sketchy definition of "external objects" in XSLT.&lt;/p&gt;
&lt;p&gt;We could handle the first part by allowing the declaration of a named item type (or alias) to specify something like visibility=closed. So the function library comes with an item type whose name is atlas:atlas, and this type name is available for use by anyone who imports the function library, but they never get to know exactly what an atlas:atlas is other than the fact that it's an item, so they can never know what other functions they might be able to call on it.&lt;/p&gt;
&lt;p&gt;But that doesn't stop them guessing (or asking, using &lt;code&gt;if ($atlas instance of map(*)&lt;/code&gt; interrogatives).&lt;/p&gt;
&lt;p&gt;To deal with that, we could consider expanding the existing half-defined concept of an "external object". XSLT 3.0 §24.1.3 sketches out the idea:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An implementation may allow an extension function to return an object that does not have any natural representation in the XDM data model, whether as an atomic value, a node, or a function item. For example, an extension function sql:connect might return an object that represents a connection to a relational database; the resulting connection object might be passed as an argument to calls on other extension functions such as sql:insert and sql:select.&lt;/p&gt;
&lt;p&gt;The way in which such objects are represented in the type system is &lt;a href="https://www.w3.org/TR/xslt-30/#dt-implementation-defined"&gt;implementation-defined&lt;/a&gt;. They might be represented by a completely new datatype, or they might be mapped to existing datatypes such as integer, string, or anyURI.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So &lt;code&gt;atlas&lt;/code&gt; could be an external object type. The module that implements the function library could contain private methods that wrap a map as an atlas, or that unwrap an atlas to reveal the underlying map. I think the only additional support needed is a construct to wrap a value as an encapsulated object of a given type, and to unwrap an encapsulated object to return the original value.&lt;/p&gt;
&lt;p&gt;Note: I can imagine the same mechanism being useful to handle "parcels", and no doubt we will find many other applications for it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #217 created</title>
   <pubDate>Wed, 19 Oct 2022 00:00:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/217</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-217</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue 41 (grammar bug in Typeswitch)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fixes the broken typeswitch grammar pointed out in issue #41&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #83 closed</title>
   <pubDate>Tue, 18 Oct 2022 23:35:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/83</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-83</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath]Proposal: Notation for using an operator as a function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 007 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 18 Oct 2022 17:01:35 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-18</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-18</guid>
</item><item>
   <title>Issue #206 closed</title>
   <pubDate>Tue, 18 Oct 2022 17:10:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/206</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-206</guid>
   <description>&lt;div&gt;&lt;p&gt;Corrections to math:atan2 identified in issue 5.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #151 closed</title>
   <pubDate>Tue, 18 Oct 2022 17:09:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/151</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-151</guid>
   <description>&lt;div&gt;&lt;p&gt;map:build() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #203 closed</title>
   <pubDate>Tue, 18 Oct 2022 17:09:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/203</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-203</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 151: map:build&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #200 closed</title>
   <pubDate>Tue, 18 Oct 2022 17:06:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/200</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-200</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: Drop xsl:match instruction (185)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #185 closed</title>
   <pubDate>Tue, 18 Oct 2022 16:04:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/185</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-185</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue118 drop xsl match&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #165 closed</title>
   <pubDate>Tue, 18 Oct 2022 15:26:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/165</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-165</guid>
   <description>&lt;div&gt;&lt;p&gt;Keyword arguments: ":=" or ":"?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #212 closed</title>
   <pubDate>Tue, 18 Oct 2022 10:52:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/212</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-212</guid>
   <description>&lt;div&gt;&lt;p&gt;Loss of OS-specific line breaks&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #216 created</title>
   <pubDate>Tue, 18 Oct 2022 10:48:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/216</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-216</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:unparsed-text: End-of-line characters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;UPDATED PROPOSAL (2023-10-31):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Change the default behavior and normalize the input as known from XML (https://www.w3.org/TR/xml/#sec-line-ends). Even though backward-incompatible, the change should be noninvasive enough, and it allows us to dispense with adding options to this and other functions.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;ORIGINAL PROPOSAL:&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Motivation&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fn:unparsed-text&lt;/code&gt; can only be used if the input is valid. Next, the result may contain OS-specific newlines that may need to be normalized in a subsequent step. Two additional parameters might simplify things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;: normalizes line endings in the input, as done by &lt;code&gt;fn:doc&lt;/code&gt;, &lt;code&gt;fn:parse-xml&lt;/code&gt; and &lt;code&gt;fn:parse-xml-fragments&lt;/code&gt; and as defined in https://www.w3.org/TR/xml/#sec-line-ends (inspired by the discussion in #212).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fallback&lt;/code&gt;: Process characters that are not valid in the version of XML supported by the implementation (inspired by &lt;code&gt;fn:parse-json&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:unparsed-text(
  $href    as xs:string?,
  $options as map(*)
) as xs:string?
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Rules&lt;/h3&gt;
&lt;p&gt;The entries that may appear in the &lt;code&gt;$options&lt;/code&gt; map are as follows:&lt;/p&gt;
&lt;p&gt;Key | Meaning
-- | --
&lt;code&gt;encoding&lt;/code&gt; | The name of an encoding … (see existing rules)
&lt;code&gt;normalize-newlines&lt;/code&gt; |  &lt;code&gt;false&lt;/code&gt; by default. If set to &lt;code&gt;true&lt;/code&gt;, two-character sequences &lt;code&gt;#xD#xA&lt;/code&gt; and any &lt;code&gt;#xD&lt;/code&gt; that are not followed by &lt;code&gt;#xA&lt;/code&gt; are translated to single &lt;code&gt;#xA&lt;/code&gt; characters.
&lt;code&gt;fallback&lt;/code&gt; | A function which is called when the input contains an escape sequence that represents a character that is not valid […] (see &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-parse-json"&gt;&lt;code&gt;fn:parse-json&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #215 created</title>
   <pubDate>Mon, 17 Oct 2022 16:00:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/215</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-215</guid>
   <description>&lt;div&gt;&lt;p&gt;First attempt at parse-uri and build-uri functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #72&lt;/p&gt;
&lt;p&gt;This is a first attempt to resolve issue 72 by describing &lt;code&gt;parse-uri&lt;/code&gt; and &lt;code&gt;build-uri&lt;/code&gt; functions.&lt;/p&gt;
&lt;p&gt;I decided to try an approach that leverages the ABNF defined in RFC 3986. Attempting to redefine the rules just opens up the possibility that the rules we write will differ from the rules in RFC 3986 which would be wrong.&lt;/p&gt;
&lt;p&gt;I added an options map and specified a "details" option that will further parse the path and query components. This gives the caller easy access to the percent-decoded forms of those elements without making the parse function irreversable.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;More examples are needed&lt;/li&gt;
&lt;li&gt;I tried to use &lt;code&gt;eg&lt;/code&gt; in the results so that they'd be formatted nicely, but it didn't work. Is there any markup for verbatim text in examples?&lt;/li&gt;
&lt;li&gt;There's an open question about whether non-hierarchical URIs can have fragment identifiers or queries. I think not, but I need to review the RFC a little more carefully.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #50 closed</title>
   <pubDate>Mon, 17 Oct 2022 09:20:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/50</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-50</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Introduce the lookup operator for sequences&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #214 created</title>
   <pubDate>Sun, 16 Oct 2022 19:48:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/214</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-214</guid>
   <description>&lt;div&gt;&lt;p&gt;FLWOR without FL&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Resulting from thoughts in https://github.com/qt4cg/qtspecs/pull/210: Do we want to make &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; optional?&lt;/p&gt;
&lt;p&gt;From the query optimization perspective, this seems reasonable as especially &lt;code&gt;let&lt;/code&gt; clauses may become obsolete after inlining variables.&lt;/p&gt;
&lt;p&gt;From a user point of view, I’m not convinced that the resulting syntax would be intuitive:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;return 123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…could indicate that the &lt;code&gt;return&lt;/code&gt; keyword has some special meaning, or people might be confused that/why it's equivalent to &lt;code&gt;123&lt;/code&gt;, or night start using the keyword esp. in function bodies.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;where test()
return 'ok'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…could be used as alternative for an &lt;code&gt;if&lt;/code&gt; expression with any empty &lt;code&gt;else&lt;/code&gt; branch; but people might be confused why &lt;code&gt;if&lt;/code&gt; cannot be used without &lt;code&gt;else&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What do others think?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #213 created</title>
   <pubDate>Sun, 16 Oct 2022 18:50:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/213</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-213</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup/Indexing operator for sequences (supersedes #50)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal attempts to take over where issue #50 left off: that issue contains a lengthy discussion and many alternative suggestions, and seemed to end with a concrete proposal which I summarise here. I propose that issue #50 now be closed.&lt;/p&gt;
&lt;p&gt;The proposal is for an expression which I will call a subscript-expression, taking the form&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SubscriptExpression ::= ExprSingle "[#" Expr "]"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first operand evaluates to an arbitrary sequence. The second operand evaluates to a sequence of integers (or is coerced to a sequence of integers using the coercion rules). Both operands are evaluated in the context of the containing expression (despite the similarity to filter expressions, the predicate does not have its own focus).&lt;/p&gt;
&lt;p&gt;The result of the expression &lt;code&gt;A [# B]&lt;/code&gt; (assuming B is indeed a sequence of integers) is &lt;code&gt;for $i in B return A[$i]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$input[#1]&lt;/code&gt; - this is synonymous with &lt;code&gt;$input[1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$input[#1 to 5]&lt;/code&gt; - equivalent to &lt;code&gt;$input[position() = (1 to 5)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$input[#reverse(1 to 5)]&lt;/code&gt; - returns the first 5 items in reverse order&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The main differences from the existing A[B] syntax are:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(a) there is no overloading, the semantics do not depend on the dynamic type of B.&lt;/p&gt;
&lt;p&gt;(b) the value of the predicate can be a sequence of integers, not just a single integer&lt;/p&gt;
&lt;p&gt;(c) the focus for the predicate is the same as the outer focus, so expressions such as &lt;code&gt;*[#1 to count(*) idiv 2]&lt;/code&gt; make sense.&lt;/p&gt;
&lt;p&gt;Alternative 1: use the syntax &lt;code&gt;A #[ B ]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alternative 2: use a function &lt;code&gt;items-at(A, B)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #212 created</title>
   <pubDate>Sun, 16 Oct 2022 18:25:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/212</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-212</guid>
   <description>&lt;div&gt;&lt;p&gt;Loss of OS-specific line breaks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When an XML document is parsed, &lt;code&gt;CR&lt;/code&gt; is discarded and replaced by &lt;code&gt;LF&lt;/code&gt;. The serialized result won’t have &lt;code&gt;CR&lt;/code&gt; either:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $CR := '&amp;amp;#xd;', $LF := '&amp;amp;#xa;'
let $input := '&amp;lt;a&amp;gt;' || $CR || '&amp;lt;/a&amp;gt;'
let $xml := parse-xml($input)
let $output := serialize($xml)
return (
  contains($xml, $CR), contains($output, $CR),
  contains($xml, $LF), contains($output, $LF)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is no proposal, but something we should keep in mind when discussing #101 and #121: Do we want to pursue and motivate an asymmetric approach by focusing on the processed and output data (i.e. insertion of &lt;code&gt;CR&lt;/code&gt; characters in strings; new serialization parameter for custom newline strings), or should we rather strive for a solultion that also takes care of the input/import? Which could be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provide newline parameters for &lt;code&gt;fn:parse-xml&lt;/code&gt;, &lt;code&gt;fn:doc&lt;/code&gt;, &lt;code&gt;fn:collection&lt;/code&gt;, possibly others; or&lt;/li&gt;
&lt;li&gt;Use OS-specific newline strings&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Interestingly, &lt;code&gt;CR&lt;/code&gt; is preserved if &lt;code&gt;fn:unparsed-text&lt;/code&gt; is used.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 007 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 14 Oct 2022 16:44:32 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-18</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-18</guid>
</item><item>
   <title>Issue #209 closed</title>
   <pubDate>Fri, 14 Oct 2022 16:29:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/209</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-209</guid>
   <description>&lt;div&gt;&lt;p&gt;Modify test generator to reference a real source file&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #211 created</title>
   <pubDate>Fri, 14 Oct 2022 10:20:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/211</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-211</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT streaming: capturing accumulators&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A Saxon extension to XSLT streaming that has proved very convenient is the notion of a capturing accumulator, indicated by setting xsl:accumulator/@capture = yes.&lt;/p&gt;
&lt;p&gt;From the Saxon documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This attribute may be set on an xsl:accumulator-rule element. It has no effect unless the accumulator is declared streamable and the rule has phase="end". It is intended for use when the accumulator rule matches an element node. The value is a boolean with the default "no".&lt;/p&gt;
&lt;p&gt;The effect of setting this attribute is that the code for computing the new accumulator value when the element end tag is encountered now has access to a snapshot copy of the matched element (as if taken using the fn:snapshot function), and is no longer required to be motionless.&lt;/p&gt;
&lt;p&gt;This means that if you want access to the typed value or string value of an element, you can now get this directly with a rule that matches the element, rather than having to write rules that match the element's text node children.&lt;/p&gt;
&lt;p&gt;It also opens up additional possibilities. For example:&lt;/p&gt;
&lt;p&gt;If a large document has a short header section containing metadata, you can capture a copy of the header in an accumulator, and the header then becomes available throughout the rest of the document processing using the accumulator-after() function.
If you want to produce a sorted index of terms that are marked up using glossary elements scattered throughout the document, you can define an accumulator that retains snapshot copies of all the glossary entries (use select="($value, .)" in the accumulator rule). At the end of processing, you can sort and group these glossary entries, and because they are snapshot copies retaining all the attributes of ancestors, you can link them to the id anchors of the containing sections.
Note: the snapshot captured as a result of the use of saxon:capture differs from the result of the fn:snapshot() function in that accumulator values associated with the copied nodes are not retained in the snapshot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We could consider making this the default, since its effect is essentially to remove an unnecessary restriction.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #210 created</title>
   <pubDate>Thu, 13 Oct 2022 11:42:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/210</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-210</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 80: fn:iterate-while (before: fn:while)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #209 created</title>
   <pubDate>Thu, 13 Oct 2022 11:28:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/209</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-209</guid>
   <description>&lt;div&gt;&lt;p&gt;Modify test generator to reference a real source file&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Modify the generated test set to use a real source file. The source/content construct for inline documents works in the XSLT test suite but not in QT4.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #208 closed</title>
   <pubDate>Thu, 13 Oct 2022 09:41:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/208</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-208</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix the function finder&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #208 created</title>
   <pubDate>Thu, 13 Oct 2022 09:35:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/208</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-208</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix the function finder&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Per MK's request. :-)&lt;/p&gt;
&lt;p&gt;I also fixed the thing where the function names are too long and there was no space between the select elements!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #207 created</title>
   <pubDate>Wed, 12 Oct 2022 23:22:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/207</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-207</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 1. New expanded-QName function; new fn:QName#1 variant&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #206 created</title>
   <pubDate>Wed, 12 Oct 2022 22:04:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/206</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-206</guid>
   <description>&lt;div&gt;&lt;p&gt;Corrections to math:atan2 identified in issue 5.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #205 created</title>
   <pubDate>Wed, 12 Oct 2022 12:15:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/205</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-205</guid>
   <description>&lt;div&gt;&lt;p&gt;Make higher-order-function support mandatory&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think higher-order-functions are becoming a core part of XQuery and XSLT; we shouldn't encourage the mindset that they should be avoided because not all implementations will support them. I therefore propose dropping this as an optional feature; the relevant capabilities should become a core part of the language in 4.0, supported by all conformant implementations.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #126 closed</title>
   <pubDate>Wed, 12 Oct 2022 10:33:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/126</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-126</guid>
   <description>&lt;div&gt;&lt;p&gt;Mathematical Operator Unicode Symbols&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #204 created</title>
   <pubDate>Wed, 12 Oct 2022 10:07:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/204</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-204</guid>
   <description>&lt;div&gt;&lt;p&gt;Non-ascii alternative operator symbols&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Appendix B.3 of the draft specification proposes that we provide non-ASCII synonyms for many of the operator symbols:&lt;/p&gt;
&lt;p&gt;Operator | Symbol | Codepoint
-- | -- | --
and | ∧ | x2227
or | ∨ | x2228
eq | ≐ | x2250
ne | ≠ | x2260
lt | ⋖ | x22D6
gt | ⋗ | x22D7
le | ≤ | x2264
ge | ≥ | x2265
div | ÷ | xF7
mod |   |  
idiv | ⨸ | x2A38
union (|) | ∪ | x222A
intersect | ∩ | x2229
except | ∖ | x2216
is | ≡ | x2261
&amp;lt;&amp;lt; (precedes) | ≪ | x226A
 &amp;gt;&amp;gt; (follows) | ≫ | x226B
otherwise | ⊩ | x22A9
some | ∃ | x2203
every | ∀ | x2200
satisfies | ⧴ | x29F4&lt;/p&gt;
&lt;p&gt;This issue is raised to enable discussion of this proposal.&lt;/p&gt;
&lt;p&gt;I have to confess I'm going rather cool on the idea. Some of the proposed symbols are rather obscure, and they aren't always rendered very clearly on display; some can easily be confused with other symbols. It's going to take a lot of WG time to agree the details, and it will probably cause more usability problems than it solves.&lt;/p&gt;
&lt;p&gt;I've always felt that it was high time for programming to break loose from ASCII, but there are probably good reasons it hasn't done so.&lt;/p&gt;
&lt;p&gt;The fact that we have two sets of comparison operators (and that some of the symbols clash with XML reserved characters) doesn't help. Providing alternative ways of writing them can only add to the confusion.&lt;/p&gt;
&lt;p&gt;I'm going to propose dropping this unless someone else wants to champion it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #203 created</title>
   <pubDate>Wed, 12 Oct 2022 06:30:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/203</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-203</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 151: map:build&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Drops the proposed map:group-by function, replacing it with the more powerful map:build.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 006 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 11 Oct 2022 16:47:33 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-11</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-11</guid>
</item><item>
   <title>Issue #173 closed</title>
   <pubDate>Tue, 11 Oct 2022 16:56:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/173</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-173</guid>
   <description>&lt;div&gt;&lt;p&gt;Add specification for fn:op() (issue #83)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #188 closed</title>
   <pubDate>Tue, 11 Oct 2022 16:56:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/188</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-188</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #198 closed</title>
   <pubDate>Tue, 11 Oct 2022 16:40:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/198</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-198</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: fn:op (173)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #201 closed</title>
   <pubDate>Tue, 11 Oct 2022 16:31:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/201</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-201</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: editorial (188)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #202 created</title>
   <pubDate>Mon, 10 Oct 2022 09:11:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/202</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-202</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: subtyping (196)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;MK: improve pres of XPath §3.7 (subtyping) and clarify notion of dynamic type&lt;/p&gt;
&lt;p&gt;This PR is intended to be technically equivalent to #196.&lt;/p&gt;
&lt;p&gt;I've reworked a series of MK commits so that they are independent; I fear we would wind up with merge conflicts otherwise and cleaning up the merge conflicts, without accidentally making some other change, seemed riskier than just teasing them apart and making them independent before we accept and merge them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #201 created</title>
   <pubDate>Mon, 10 Oct 2022 09:09:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/201</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-201</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: editorial (188)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is intended to be technically equivalent to #188.&lt;/p&gt;
&lt;p&gt;I've reworked a series of MK commits so that they are independent; I fear we would wind up with merge conflicts otherwise and cleaning up the merge conflicts, without accidentally making some other change, seemed riskier than just teasing them apart and making them independent before we accept and merge them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #200 created</title>
   <pubDate>Mon, 10 Oct 2022 09:08:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/200</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-200</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: Drop xsl:match instruction (185)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is intended to be technically equivalent to #185.&lt;/p&gt;
&lt;p&gt;I've reworked a series of MK commits so that they are independent; I fear we would wind up with merge conflicts otherwise and cleaning up the merge conflicts, without accidentally making some other change, seemed riskier than just teasing them apart and making them independent before we accept and merge them.&lt;/p&gt;
&lt;p&gt;Close #119&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #199 created</title>
   <pubDate>Mon, 10 Oct 2022 09:07:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/199</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-199</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: Items before, etc. (177)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is intended to be technically equivalent to #177.&lt;/p&gt;
&lt;p&gt;I've reworked a series of MK commits so that they are independent; I fear we would wind up with merge conflicts otherwise and cleaning up the merge conflicts, without accidentally making some other change, seemed riskier than just teasing them apart and making them independent before we accept and merge them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #198 created</title>
   <pubDate>Mon, 10 Oct 2022 09:05:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/198</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-198</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: fn:op (173)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is intended to be technically equivalent to #173.&lt;/p&gt;
&lt;p&gt;I've reworked a series of MK commits so that they are independent; I fear we would wind up with merge conflicts otherwise and cleaning up the merge conflicts, without accidentally making some other change, seemed riskier than just teasing them apart and making them independent before we accept and merge them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #197 created</title>
   <pubDate>Mon, 10 Oct 2022 08:55:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/197</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-197</guid>
   <description>&lt;div&gt;&lt;p&gt;NW for MK: Variadicity (166)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is intended to be technically equivalent to #166.&lt;/p&gt;
&lt;p&gt;I've reworked a series of MK commits so that they are independent; I fear we would wind up with merge conflicts otherwise and cleaning up the merge conflicts, without accidentally making some other change, seemed riskier than just teasing them apart and making them independent before we accept and merge them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #196 created</title>
   <pubDate>Sun, 9 Oct 2022 19:08:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/196</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-196</guid>
   <description>&lt;div&gt;&lt;p&gt;Subtyping&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Editorial. Improve the presentation of XPath section §3.7 on subtype relationships, including supplying some rules that were previously marked TODO. To enable this, migrate some DTD and stylesheet extensions for &lt;code&gt;var&lt;/code&gt; elements previously used for the xslt spec only. Add some clarifications concerning dynamic type, see issue #191&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #195 closed</title>
   <pubDate>Sun, 9 Oct 2022 14:10:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/195</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-195</guid>
   <description>&lt;div&gt;&lt;p&gt;Added a CODEOWNERS file&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #195 created</title>
   <pubDate>Sun, 9 Oct 2022 12:36:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/195</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-195</guid>
   <description>&lt;div&gt;&lt;p&gt;Added a CODEOWNERS file&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This should have the effect that the Contributors team will automatically be added as reviewers to new PRs. Plus a few odds and ends where I should be notified (changes to build stuff).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #194 closed</title>
   <pubDate>Sun, 9 Oct 2022 09:50:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/194</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-194</guid>
   <description>&lt;div&gt;&lt;p&gt;More norm testing&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #194 created</title>
   <pubDate>Sun, 9 Oct 2022 09:18:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/194</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-194</guid>
   <description>&lt;div&gt;&lt;p&gt;More norm testing&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Ignore this too.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #193 closed</title>
   <pubDate>Sun, 9 Oct 2022 09:16:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/193</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-193</guid>
   <description>&lt;div&gt;&lt;p&gt;Moved these changes into the DeltaXML pipeline; just serialize to HTML 5&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #193 created</title>
   <pubDate>Sun, 9 Oct 2022 09:16:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/193</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-193</guid>
   <description>&lt;div&gt;&lt;p&gt;Moved these changes into the DeltaXML pipeline; just serialize to HTML 5&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #192 closed</title>
   <pubDate>Sat, 8 Oct 2022 18:07:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/192</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-192</guid>
   <description>&lt;div&gt;&lt;p&gt;This is a test. This is only a test.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #192 created</title>
   <pubDate>Sat, 8 Oct 2022 17:00:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/192</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-192</guid>
   <description>&lt;div&gt;&lt;p&gt;This is a test. This is only a test.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Had this been a real emergency, we would have fled in terror and you would not have been informed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #191 created</title>
   <pubDate>Sat, 8 Oct 2022 16:57:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/191</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-191</guid>
   <description>&lt;div&gt;&lt;p&gt;Definition of "dynamic type"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The term "dynamic type" is defined in §2.2.3.2 as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: A dynamic type is associated with each value as it is computed. The dynamic type of a value may be more specific than the [static type] of the expression that computed it (for example, the static type of an expression might be xs:integer*, denoting a sequence of zero or more integers, but at evaluation time its value may have the dynamic type xs:integer, denoting exactly one integer.)]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, for a start, this is a pretty poor definition. It gives some properties of a dynamic type, but it doesn't say what it actually is: for example, what range of values it can take. Is it always a SequenceType that is expressible using the SequenceType grammar? We should be told.&lt;/p&gt;
&lt;p&gt;It's also wrong. When you construct a sequence using the &lt;code&gt;","&lt;/code&gt; operator, or a map using the &lt;code&gt;map:put()&lt;/code&gt; function, there's nothing in the specification of those operations that tells you what the dynamic type of the result is. For example, there's nothing in the specification that says what the dynamic type of the sequence &lt;code&gt;(23, &amp;lt;e/&amp;gt;)&lt;/code&gt; is.&lt;/p&gt;
&lt;p&gt;In §4.4.2.1 the error is compounded where it says "the converted argument value retains its most specific &lt;strong&gt;dynamic type&lt;/strong&gt;". At least this recognizes that a value actually conforms to more than one type. But it's wrong in suggesting that one of those types is necessarily the "most specific" (presumably meaning that it's a subtype of all the others). For example, the empty map (&lt;code&gt;map{}&lt;/code&gt;) belongs to every map type, but there is no map type that is a subtype of all other map types (unless we conjecture that the dynamic type may be one that is inexpressible using SequenceType syntax).&lt;/p&gt;
&lt;p&gt;With the introduction of record tests the map &lt;code&gt;map{"a":12, "b":14, 1:19}&lt;/code&gt; conforms both to &lt;code&gt;record(a as xs:integer, b as xs:integer, *)&lt;/code&gt; and to &lt;code&gt;map{xs:anyAtomicType, xs:integer}&lt;/code&gt;, neither of which is more specific than the other, and there is no type expressible using the SequenceType grammar that is a subtype of both of these. So the introduction of record tests increases the importance of getting rid of this error.&lt;/p&gt;
&lt;p&gt;It's not easy to fix issues like this, but it's important we should try, because errors in the description of the fundamentals can easily turn into bugs in the specification of concrete language constructs. We certainly need to fix it if we're going to add features like that proposed in issue #148, or to make changes to the type system to allow variadic dynamic function calls.&lt;/p&gt;
&lt;p&gt;See also https://github.com/w3c/qtspecs/issues/14&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #190 closed</title>
   <pubDate>Sat, 8 Oct 2022 16:31:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/190</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-190</guid>
   <description>&lt;div&gt;&lt;p&gt;Make DeltaXML diffs if possible&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #190 created</title>
   <pubDate>Sat, 8 Oct 2022 16:25:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/190</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-190</guid>
   <description>&lt;div&gt;&lt;p&gt;Make DeltaXML diffs if possible&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR adds the ability to generate mechanical diffs with Delta XML.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #189 created</title>
   <pubDate>Fri, 7 Oct 2022 18:07:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/189</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-189</guid>
   <description>&lt;div&gt;&lt;p&gt;Adopt the coercion rules for variables in XQuery&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently XSLT applies the coercion rules (formerly the function conversion rules) both when supplying values to arguments of a function declaring a required type, and when binding values to variables declaring a required type. This is pretty much essential because it allows xsl:variable and xsl:param to have the same semantics.&lt;/p&gt;
&lt;p&gt;XQuery applies the coercion rules only for function arguments, and not for variable bindings. For variables, the supplied value must already be a value of the required type. For example, you can't write &lt;code&gt;let $x as xs:decimal := @version&lt;/code&gt;, you have to write &lt;code&gt;let $x as xs:decimal := xs:decimal(@version)&lt;/code&gt;. (Or if you find that annoying, you can write &lt;code&gt;let $x as xs:decimal := +@version&lt;/code&gt;, because unary plus invokes coercion).&lt;/p&gt;
&lt;p&gt;This is the main reason declared types are not allowed in XPath: the XSLT community felt that if they were allowed, the rules had to be the same as the rules for XSLT variable bindings. We could eliminate this objection if XQuery adopted the coercion rules for variable bindings.&lt;/p&gt;
&lt;p&gt;I have some hesitation in proposing this, because when I proposed it before, it was quite strongly opposed by some of the original XQuery designers, whose views I respect. But although they argued their case strongly, I confess I did not understand their position. I simply see no reason why assignments to function parameters and assignments to variables should be handled differently. It works in XSLT, and makes the language more usable, and I see no reason why it should not work in XQuery.&lt;/p&gt;
&lt;p&gt;It's not uncommon for languages to impose different rules for the two cases. Java, for example has a variety of invocation contexts (strict and loose), and variable assignment allows conversions such as narrowing of integer constants that are not allowed on method calls (interestingly, Java allows &lt;em&gt;more&lt;/em&gt; conversions on variable assignment than on method calling). In XQuery, however, I can see no rationale for the rules being different.&lt;/p&gt;
&lt;p&gt;We're proposing syntax for XQuery (function calls with keyword parameters) that make parameter assignment look more like variable assignment. I think we should match this by making them semantically more similar.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #188 created</title>
   <pubDate>Fri, 7 Oct 2022 16:41:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/188</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-188</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #187 created</title>
   <pubDate>Fri, 7 Oct 2022 11:34:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/187</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-187</guid>
   <description>&lt;div&gt;&lt;p&gt;Add a 'while' clause to FLWOR expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal adds a new clause, the &lt;strong&gt;while&lt;/strong&gt; clause, to FLWOR expressions. I'll start with the proposal, and then give some rationale.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proposal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We add a new WhileClause which can appear anywhere a WhereClause can appear. The semantics are deliberately almost identical to the WhereClause.&lt;/p&gt;
&lt;p&gt;3.12.x While Clause&lt;/p&gt;
&lt;p&gt;[60]   	WhileClause	   ::=   	"while" ExprSingle	
A while clause serves as a filter for the tuples in its input tuple stream. The expression in the while clause, called the while-expression, is evaluated once for each of these tuples. If the effective boolean value of the while-expression is true, the tuple is retained in the output tuple stream; otherwise the tuple &lt;strong&gt;and all subsequent tuples in the stream&lt;/strong&gt; are discarded.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;p&gt;This example illustrates the effect of a while clause on a tuple stream:
Input tuple stream:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;($a = 13, $b = 11)
($a = 91, $b = 42)
($a = 17, $b = 30)
($a = 85, $b = 63)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;while clause:
&lt;code&gt;while $a &amp;gt; $b&lt;/code&gt;
Output tuple stream:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;($a = 13, $b = 11)
($a = 91, $b = 42)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following query illustrates how a while clause might be used to extract all items in an input sequence before the first one that fails to satisfy some condition. In this case it selects the leading &lt;code&gt;para&lt;/code&gt; elements in the input sequence, stopping before the first element that is not a &lt;code&gt;para&lt;/code&gt; element.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $x in $section/*
while $x[self::para]
return $x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note:
Although the semantics are described in terms of discarding all the tuples following the first one that fails to match the condition, a practical implementation is likely to avoid evaluating those tuples, thus giving an "early exit" from the iteration performed by the FLWOR expression.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Justification&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FLWOR expressions remain the primary control construct in XQuery, despite the introduction of higher-order functions. The inability to process input selectively until some condition is true remains one of their biggest limitations. The window clause provides a workaround for some use cases, but it is very complex, and although it can partition an input sequence based on conditions found in the data, it has no direct way of stopping processing when a condition is found. Also, it only operates on input sequences, not on the tuple stream, so it isn't able to handle a composite condition involving multiple variables, for example &lt;code&gt;for $i at $p in //emp while ($i/location = 'x' and $p &amp;lt; 50) return $i&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That particular example could be written with a &lt;code&gt;where&lt;/code&gt; clause. But if a &lt;code&gt;where&lt;/code&gt; clause is used, both the human reader and the query optimiser need to do some thinking to work out that early exit is possible (once $p reaches 50, no further tuples are going to have values less than 50).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #186 closed</title>
   <pubDate>Fri, 7 Oct 2022 10:43:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/186</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-186</guid>
   <description>&lt;div&gt;&lt;p&gt;Update build automation to publish tests&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #186 created</title>
   <pubDate>Fri, 7 Oct 2022 10:36:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/186</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-186</guid>
   <description>&lt;div&gt;&lt;p&gt;Update build automation to publish tests&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Recent changes (#184) from MK have added a new automatically generated test to the F&amp;amp;O build.&lt;/p&gt;
&lt;p&gt;This PR automates the construction and publication of new test sets from the &lt;code&gt;qtspecs&lt;/code&gt; repository to the &lt;code&gt;qt4stests&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;N.B. The repository where tests are published (&lt;code&gt;qt4cg/qt4tests&lt;/code&gt; in this case) must be the value of the TEST_REPOSITORY secret. If you want to automate publication to your own fork, just set the value of that secret accordingly.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #185 created</title>
   <pubDate>Fri, 7 Oct 2022 10:20:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/185</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-185</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue118 drop xsl match&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Removes the proposed new feature xsl:match from the draft spec; the proposal has been withdrawn&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #118 closed</title>
   <pubDate>Fri, 7 Oct 2022 10:07:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/118</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-118</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:match - can we do better&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #183 closed</title>
   <pubDate>Fri, 7 Oct 2022 07:35:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/183</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-183</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #184 closed</title>
   <pubDate>Fri, 7 Oct 2022 07:34:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/184</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-184</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial changes from PR 183&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #184 created</title>
   <pubDate>Fri, 7 Oct 2022 07:28:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/184</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-184</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial changes from PR 183&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR contains the editorial changes from #183 without the commits that add &lt;code&gt;fn:op&lt;/code&gt; and other notes.&lt;/p&gt;
&lt;p&gt;I believe I can fairly commit this PR without CG approval.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #183 created</title>
   <pubDate>Thu, 6 Oct 2022 17:34:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/183</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-183</guid>
   <description>&lt;div&gt;&lt;p&gt;Editorial&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Branch for changes that are purely editorial in nature.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #182 created</title>
   <pubDate>Thu, 6 Oct 2022 11:13:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/182</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-182</guid>
   <description>&lt;div&gt;&lt;p&gt;Should we allow vendor-defined optional parameters on built-in functions?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Now that we allow optional parameters on functions, with invocation by keyword, we could permit vendors to extend the function signature with optional parameters in a vendor-defined namespace. It would be required (obviously) that such parameters are optional.&lt;/p&gt;
&lt;p&gt;A caveat is that under the current specification, (a) we can't stop the value of such a parameter being supplied positionally (perhaps unintentionally), and (b) the availability of such a parameter changes the arity range of the function, which potentially brings it into conflict with other like-named functions (for example functions introduced in the future).&lt;/p&gt;
&lt;p&gt;A possible way of resolving this conflict is to propose that parameters whose name is namespaced can ONLY be supplied by keyword, and don't contribute to the arity range of the function. However, for user-defined functions, this rule would not be backwards compatible.&lt;/p&gt;
&lt;p&gt;And a possible way around that is to say that the extensibility policy for a function is a property of its namespace; and to adopt different extensibility policies for built-in function namespaces and user-defined function namespaces.&lt;/p&gt;
&lt;p&gt;Perhaps this is over-elaborate, and we should just make sure that functions that vendors might wish to extend have an options parameter, even if no standardised options are defined.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #181 created</title>
   <pubDate>Wed, 5 Oct 2022 10:55:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/181</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-181</guid>
   <description>&lt;div&gt;&lt;p&gt;HOF Sequence Functions with Positional Arguments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Motivated by @michaelhkay’s question in https://github.com/qt4cg/qtspecs/issues/80#issuecomment-1253495999, I wondered if we should ~~add optional positional arguments to built-in sequence functions that take higher-order function arguments~~ (thanks, Dimitre:) extend the types of the functions that are themselves parameters to certain standard functions, by adding to their signature one more parameter, which is the index of the item that is also passed as an argument to this function.&lt;/p&gt;
&lt;p&gt;Some examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: fn:filter: Accept items that are identical to their predecessors :)
fn:filter(
  $sequence,
  fn($item, $pos) { $item = $sequence[$pos - 1] }
)

(: fn:for-each: Create enumerated strings for all items :)
for-each(
  $sequence,
  fn($item, $pos) { $pos || '. ' || $item }
)

(: fn:for-each-pair: Create enumerated strings for the maximum value of all item pairs :)
for-each-pair(
  $seq1, $seq2,
  fn($item1, $item2, $pos) { $pos || '. ' || max(($item1, $item2)) }
)

(: fn:fold-left: Return positions of the items matching a specific value :)
let $input := (11 to 21, 21 to 31)
let $search := 21
return fold-left($input, (), fn($seq, $curr, $pos) { $seq, $pos[$curr = $search] })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I was wrong with my claim that the filter function could be used to replace &lt;code&gt;index-where&lt;/code&gt;, and I have modified the example.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #180 closed</title>
   <pubDate>Wed, 5 Oct 2022 10:17:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/180</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-180</guid>
   <description>&lt;div&gt;&lt;p&gt;Implement function signatures as tables with default values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #180 created</title>
   <pubDate>Wed, 5 Oct 2022 10:10:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/180</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-180</guid>
   <description>&lt;div&gt;&lt;p&gt;Implement function signatures as tables with default values&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #179 closed</title>
   <pubDate>Wed, 5 Oct 2022 09:00:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/179</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-179</guid>
   <description>&lt;div&gt;&lt;p&gt;Link fixes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #179 created</title>
   <pubDate>Wed, 5 Oct 2022 08:28:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/179</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-179</guid>
   <description>&lt;div&gt;&lt;p&gt;Link fixes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR fixes some of the linking and cross-reference issues.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I fixed some actual links in a few places&lt;/li&gt;
&lt;li&gt;I added ID attributes to some new sections&lt;/li&gt;
&lt;li&gt;I investigated, and finally punted on, the question of why some production cross-references in the XSLT 4.0 spec came out wrong. I "fixed" it by making the stylesheet more dynamic. There are still some that don't work, so we'll need to find a better solution eventually. But at least this helps.&lt;/li&gt;
&lt;li&gt;I discarded an old draft that I don't believe was in use anywhere.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #178 closed</title>
   <pubDate>Wed, 5 Oct 2022 07:05:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/178</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-178</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix the function finder&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #178 created</title>
   <pubDate>Wed, 5 Oct 2022 07:00:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/178</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-178</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix the function finder&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Determine which functions cannot be resolved and disable them in the pull down&lt;/li&gt;
&lt;li&gt;Adjust the CSS so that the function finder doesn't scroll out-of-view&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 006 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Tue, 4 Oct 2022 16:56:16 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-11</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-11</guid>
</item><item>
   <title>QT4 CG meeting 005 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 4 Oct 2022 16:56:16 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-04</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-04</guid>
</item><item>
   <title>Pull request #177 created</title>
   <pubDate>Tue, 4 Oct 2022 17:15:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/177</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-177</guid>
   <description>&lt;div&gt;&lt;p&gt;Items before etc&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #163 closed</title>
   <pubDate>Tue, 4 Oct 2022 16:04:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/163</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-163</guid>
   <description>&lt;div&gt;&lt;p&gt;New intersperse function now accepted&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #176 closed</title>
   <pubDate>Mon, 3 Oct 2022 14:58:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/176</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-176</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-json() - option to return numbers as xs:decimal&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #176 created</title>
   <pubDate>Mon, 3 Oct 2022 14:43:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/176</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-176</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-json() - option to return numbers as xs:decimal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In response to a user request (https://saxonica.plan.io/issues/5708) I propose addition of an option to &lt;code&gt;fn:parse-json()&lt;/code&gt;, say &lt;code&gt;number-type=double|decimal|string&lt;/code&gt;, which causes numbers in JSON to be returned as &lt;code&gt;xs:decimal&lt;/code&gt; or &lt;code&gt;xs:string&lt;/code&gt; values rather than &lt;code&gt;xs:double&lt;/code&gt;. Use of values with more digits of precision than &lt;code&gt;xs:double&lt;/code&gt; supports is common in JSON practice, despite warnings in the RFC that it's not interoperable; and the fallback to &lt;code&gt;xs:string&lt;/code&gt; is handy for people who have the misfortune to be processing incoming JSON where leading zeroes are significant (for example, Belgian VAT numbers).&lt;/p&gt;
&lt;p&gt;The change also affects &lt;code&gt;fn:json-doc()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #174 closed</title>
   <pubDate>Mon, 3 Oct 2022 14:17:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/174</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-174</guid>
   <description>&lt;div&gt;&lt;p&gt;Should we allow f(x,,y) when calling a function where parameter 2 is optional?&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #175 created</title>
   <pubDate>Mon, 3 Oct 2022 10:33:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/175</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-175</guid>
   <description>&lt;div&gt;&lt;p&gt;In XQuery, allow a semicolon at the end of the module&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A trivial little enhancement to remove an irritant: allow a semicolon after the query body in a query. Specifically, change&lt;/p&gt;
&lt;p&gt;&lt;code&gt;QueryBody ::= Expr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;p&gt;&lt;code&gt;QueryBody ::= Expr Separator? &lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #174 created</title>
   <pubDate>Mon, 3 Oct 2022 10:08:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/174</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-174</guid>
   <description>&lt;div&gt;&lt;p&gt;Should we allow f(x,,y) when calling a function where parameter 2 is optional?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If the second and third parameters of a function are optional, should we allow the syntax&lt;/p&gt;
&lt;p&gt;&lt;code&gt;f(x,,y)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to call the function using the default value for the second parameter?&lt;/p&gt;
&lt;p&gt;I can see this being a handy convention for calling &lt;code&gt;fn:sort&lt;/code&gt;, for example, where defaulting the second parameter (the collation) is commonplace.&lt;/p&gt;
&lt;p&gt;The current proposal does not allow this, but I see no good reason not to.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #173 created</title>
   <pubDate>Sat, 1 Oct 2022 00:00:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/173</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-173</guid>
   <description>&lt;div&gt;&lt;p&gt;Add specification for fn:op() (issue #83)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 005 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 30 Sep 2022 16:50:29 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-04</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-04</guid>
</item><item>
   <title>Issue #2 closed</title>
   <pubDate>Fri, 30 Sep 2022 16:20:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-2</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:intersperse&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #24 closed</title>
   <pubDate>Fri, 30 Sep 2022 16:18:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/24</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-24</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] The unknown ArgumentPlaceHolder EBNF symbol is referred to in several places&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #27 closed</title>
   <pubDate>Fri, 30 Sep 2022 16:16:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/27</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-27</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix references to ArgumentPlaceholder in the specifications.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #172 created</title>
   <pubDate>Fri, 30 Sep 2022 08:09:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/172</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-172</guid>
   <description>&lt;div&gt;&lt;p&gt;Record Tests&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The draft XPath specification includes a proposal for Record Tests - see section 3.6.4.3. This issue seeks WG endorsement of this enhancement, and also for the use of Record Tests as match patterns in XSLT.&lt;/p&gt;
&lt;p&gt;The purpose of the feature is to provide more useful type checking for common use cases where maps are used to represent heterogeneous data. The feature enhances the type system but doesn't change the data model (that is, the new types represent a new way of placing constraints on the value space of maps, without introducing new kinds of values or new operations).&lt;/p&gt;
&lt;p&gt;The type subsumption rules for record tests proposed in §3.7.2 clauses (m) et seq include a couple of TODO entries that need completing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #171 created</title>
   <pubDate>Fri, 30 Sep 2022 07:59:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/171</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-171</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath ternary conditional operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The draft XPath specification proposes a ternary conditional operator&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C ?? X !! Y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with the same semantics as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if (C) then X else Y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This issue seeks WG endorsement of this enhancement.&lt;/p&gt;
&lt;p&gt;The choice of operator symbols is from Perl; no other obvious candidates are available.&lt;/p&gt;
&lt;p&gt;The proposal is free-standing, it has no dependencies or interactions.&lt;/p&gt;
&lt;p&gt;The proposal adds no new functionality, but in some contexts (especially in the middle of an expression that uses symbolic operators rather than keywords) it aids readability:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;//employee[@salary &amp;gt; (@currency == 'GBP' ?? 10000 !! 12000)]/@name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There is room for debate about the operator precedence.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #170 created</title>
   <pubDate>Fri, 30 Sep 2022 07:48:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/170</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-170</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath "otherwise" operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The draft specification proposes an "otherwise" operator. This issue seeks WG endorsement of this addition.&lt;/p&gt;
&lt;p&gt;See section 4.18 of the XPath draft specification.&lt;/p&gt;
&lt;p&gt;The semantics are that (X otherwise Y) returns X, except in the case where X evaluates to an empty sequence, in which case it returns Y. A typical usage would be &lt;code&gt;//employee ! (@location otherwise "Denver")&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are two questions the WG might choose to discuss:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How should the operator be spelled? The symbol "?:" has been proposed as an alternative to the keyword "otherwise".&lt;/li&gt;
&lt;li&gt;What should the operator precedence be?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I propose that once approved, we also add this operator to the list recognised by the fn:op function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #169 created</title>
   <pubDate>Fri, 30 Sep 2022 07:01:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/169</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-169</guid>
   <description>&lt;div&gt;&lt;p&gt;Handling of duplicate keys in xsl:map&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The draft specifications include proposals to enhance the handling of duplicate key values in xsl:map. This issue seeks WG endorsement of these changes.&lt;/p&gt;
&lt;p&gt;See XSLT section 21.2.1&lt;/p&gt;
&lt;p&gt;map:merge currently provides a set of fixed "policy" options for handling of duplicates; xsl:map always raises an error.&lt;/p&gt;
&lt;p&gt;Rather than adopt the fixed set of policies in map:merge, I propose that xsl:map should accept a callback function to process duplicates. For example, forming a sequence-concatenation of the values can be achieved using &lt;code&gt;on-duplicates="op(',')"&lt;/code&gt;. This approach allows all the options provided by map:merge, and more; for example the duplicate entries can be combined using string-join() if so desired.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #168 created</title>
   <pubDate>Fri, 30 Sep 2022 06:49:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/168</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-168</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT Extension Instructions invoking Named Templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This feature is already present in the draft specification; the issue is being raised to seek WG endorsement of the change.&lt;/p&gt;
&lt;p&gt;See section 10.1.3 of the draft.&lt;/p&gt;
&lt;p&gt;The change is self contained with no dependencies. It adds no new functionality, merely syntactic convenience.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #167 created</title>
   <pubDate>Fri, 30 Sep 2022 06:37:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/167</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-167</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT Conditional Instructions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;These changes are already present in the draft specification: this issue is being raised to seek WG endorsement of the changes.&lt;/p&gt;
&lt;p&gt;See section 8 of the specification.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;xsl:if&lt;/code&gt;, add optional &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; attributes&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;xsl:when&lt;/code&gt; and &lt;code&gt;xsl:otherwise&lt;/code&gt;, add an optional &lt;code&gt;select&lt;/code&gt; attribute which can be used in place of the sequence constructor&lt;/li&gt;
&lt;li&gt;Add a new &lt;code&gt;xsl:switch&lt;/code&gt; instruction&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Justification: these changes do not add any functional capability to the language, they simply provide a small improvement in usability. The changes are self-contained with no dependencies on other changes.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #154 closed</title>
   <pubDate>Thu, 29 Sep 2022 20:33:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/154</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-154</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespaces for Functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #166 created</title>
   <pubDate>Thu, 29 Sep 2022 20:28:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/166</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-166</guid>
   <description>&lt;div&gt;&lt;p&gt;Variadicity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Two main separate but related features: (a) allow function declarations in XQuery and XSLT to define optional parameters, (b) allow static function calls (including partial function application) to take keyword arguments.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #165 created</title>
   <pubDate>Thu, 29 Sep 2022 11:38:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/165</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-165</guid>
   <description>&lt;div&gt;&lt;p&gt;Keyword arguments: ":=" or ":"?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In function calls using keyword arguments, should we use the syntax &lt;code&gt;name := value&lt;/code&gt;, or &lt;code&gt;name : value&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Regarding &lt;code&gt;:=&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Function declarations in XQuery will presumably use the syntax &lt;code&gt;name := value&lt;/code&gt; to define the default value for a parameter,  by analogy with initial values in global variable declarations, so it seems consistent to use &lt;code&gt;name := value&lt;/code&gt; in function calls as well&lt;/li&gt;
&lt;li&gt;The syntax &lt;code&gt;name := value&lt;/code&gt; is also used in XPath &lt;code&gt;let&lt;/code&gt; expressions to bind a value to a variable name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding &lt;code&gt;:&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It matches the use in map constructors&lt;/li&gt;
&lt;li&gt;It's used this way in C#&lt;/li&gt;
&lt;li&gt;There is a need to use whitespace to prevent ambiguity, for example in a construct like &lt;code&gt;f:display(first: first, last: last)&lt;/code&gt;; moreover, if the space is omitted, there is a danger that the expression will still be valid but will have an unintended meaning.&lt;/li&gt;
&lt;li&gt;Map constructors also require the disambiguating whitespace, but with map constructors, use of a bare name on the LHS is unusual (more common is a string literal in quotes), and failure to include the whitespace is almost certain to lead to a syntax error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My feeling is that &lt;code&gt;:=&lt;/code&gt; is the better choice.&lt;/p&gt;
&lt;p&gt;Note: &lt;code&gt;=&lt;/code&gt; (as used in Python) is not an option, because a call like &lt;code&gt;not(x = y)&lt;/code&gt; already has a well-defined meaning.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #164 closed</title>
   <pubDate>Thu, 29 Sep 2022 10:37:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/164</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-164</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix error in input paths for XSLT&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #164 created</title>
   <pubDate>Thu, 29 Sep 2022 10:32:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/164</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-164</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix error in input paths for XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XSLT 4.0 spec didn't build correctly because the input paths in the build script were missing the /specification/ directory :-(&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #163 created</title>
   <pubDate>Tue, 27 Sep 2022 22:06:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/163</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-163</guid>
   <description>&lt;div&gt;&lt;p&gt;New intersperse function now accepted&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;and correct the fos.xsd schema for history/version information&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #162 created</title>
   <pubDate>Tue, 27 Sep 2022 19:20:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/162</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-162</guid>
   <description>&lt;div&gt;&lt;p&gt;Support unbounded variadic functions on map parameter keys&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Where a parameter is defined as a map, then named/keyword arguments bind to keys in that map if the named/keyword argument does not match a parameter name in that function. For example, &lt;code&gt;fn:serialize($data, method: "json")&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;There are several functions that take an option map in XQFO. It can be clunky to construct the map options when calling these functions.&lt;/p&gt;
&lt;p&gt;The option map is a common pattern in other implementations. Specifically, MarkLogic makes use of that pattern.&lt;/p&gt;
&lt;h1&gt;Note&lt;/h1&gt;
&lt;p&gt;If the argument name is an NCName, the xs:NCName value should be cast to the map's key type using the XQFO type/value casting rules.&lt;/p&gt;
&lt;p&gt;The argument name should support string literals, as map keys can contain spaces. In this case, the xs:string type is cast to the map's key type using the XQFO type/value casting rules.&lt;/p&gt;
&lt;p&gt;The #159 proposal allows QNames for the argument names in order to support parameters that are QNames. When binding to a map key an error (static or dynamic) should be raised.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #161 created</title>
   <pubDate>Tue, 27 Sep 2022 19:00:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/161</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-161</guid>
   <description>&lt;div&gt;&lt;p&gt;Support unbounded variadic functions on sequence parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Where a parameter is defined as a 0-or-more sequence (&lt;code&gt;T*&lt;/code&gt;) or a 1-or-more sequence (&lt;code&gt;T+&lt;/code&gt;) and that parameter is indicated as behaving variadically, then positional (non-keyword) arguments from that parameter onward are bound to that sequence.&lt;/p&gt;
&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;The XQFO specification supports the &lt;code&gt;fn:concat&lt;/code&gt; function which takes 2 or more arguments. The "or more" part is defined as "..." with a short sentence stating that this is the only function that supports two or more arguments. As such, the behaviour of this function is loosely defined.&lt;/p&gt;
&lt;p&gt;Other implementors and specifications (BaseX, EXQuery RESTXQ, MarkLogic) make use of these variadic sequence types in several functions.&lt;/p&gt;
&lt;p&gt;In all of these cases (and for user-defined variadic sequence parameters) the semantics of the functions should be well defined.&lt;/p&gt;
&lt;h1&gt;Note&lt;/h1&gt;
&lt;p&gt;In the case where the 0-or-more sequence is the last parameter (or the parameter receiving the unbounded argument values), that parameter would be an optional value as if it was defined as &lt;code&gt;$param as T* := ()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One possibility with the interaction with named arguments is to allow that to break up two sequence parameters that behave variadically. For example, given &lt;code&gt;f($a as xs:int*, $b as xs:string, $c as xs:int*)&lt;/code&gt; it may be possible to call it like &lt;code&gt;f(1, 2, 3, b: "4", 5, 6, 7)&lt;/code&gt; which would be equivalent to &lt;code&gt;f((1, 2, 3), "4", (5, 6, 7))&lt;/code&gt; currently.&lt;/p&gt;
&lt;p&gt;This should be defined such that calling the function with the same number of arguments as the function has parameters then none of the parameters behave variadically. This has the intention of not breaking existing code.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #160 created</title>
   <pubDate>Tue, 27 Sep 2022 18:35:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/160</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-160</guid>
   <description>&lt;div&gt;&lt;p&gt;Support named arguments on dynamic function calls&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal extends #159 to dynamic functions. For example, &lt;code&gt;let $x := fn:tokenize#3 return $x("abcbdCef", pattern: "c", flags: "i")&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;This is the same as the motivation for #159, but in the context of a) inline functions, and b) named function references. This is specifically useful for XPath expressions where defining the functions in XSLT is cumbersome and makes it harder to share the implementation between XSLT and XQuery.&lt;/p&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;If the resolved function (static or inline) from the dynamic expression does not have a parameter with the specified name, a suitable error should be raised.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #159 created</title>
   <pubDate>Tue, 27 Sep 2022 18:13:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/159</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-159</guid>
   <description>&lt;div&gt;&lt;p&gt;Support named arguments on static function calls&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal adds the ability to specify the names (referred to here as "keywords") of the parameters of a function at the point at which the function is called. This uses the form &lt;code&gt;name: value&lt;/code&gt; where name is a QName and value is a single expression, for example &lt;code&gt;fn:tokenize("abcbdCef", pattern: "c", flags: "i")&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;If a function takes several arguments of the same type (xs:boolean, xs:integer, xs:string, etc.) it can be easy to mix up the parameters. As such, it can be useful to specify these by name when calling the function, e.g. &lt;code&gt;f(a: true(), b: false(), c: true())&lt;/code&gt; to both aid readability and to prevent bugs when the values are specified in the wrong order to how they are declared (such as swapping the &lt;code&gt;$pattern&lt;/code&gt; and &lt;code&gt;$flags&lt;/code&gt; parameters in &lt;code&gt;fn:tokenize&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If a function takes several optional parameters and the caller only wants to override one of the later parameters (such as the &lt;code&gt;$collation&lt;/code&gt; in &lt;code&gt;fn:differences&lt;/code&gt;), specifying the name of the parameter avoids specifying a value for the other arguments. This makes it clearer what is happening (as the user does not need to think about the supplied default arguments), and reduces errors (such as specifying a wrong default value for the arguments the caller is not interested in).&lt;/p&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;Because function parameter names are EQNames, the keyword should also be an EQName. If the keyword is an NCName, then it should follow the same rules as parameter NCNames such that the namespace URI is empty.&lt;/p&gt;
&lt;p&gt;Like with maps, if the value starts with an element name (EQName) then there must be a space after the &lt;code&gt;:&lt;/code&gt;. This should use the same note as the one in the map constructor section.&lt;/p&gt;
&lt;p&gt;An alternative &lt;code&gt;name := value&lt;/code&gt; syntax has also been suggested. An informal consensus is in favour of using &lt;code&gt;name: value&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 004 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 27 Sep 2022 16:40:49 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-27</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-27</guid>
</item><item>
   <title>Issue #158 created</title>
   <pubDate>Tue, 27 Sep 2022 17:22:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/158</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-158</guid>
   <description>&lt;div&gt;&lt;p&gt;Support optional parameters on dynamic functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal extends #155 to dynamic functions.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Within XPath there isn't a defined mechanism for declaring static functions. It can be such that declaring a function outside of the XPath expression is more cumbersome (such as defining it within XSLT) and makes the resulting expression less portable between XSLT and XQuery.&lt;/p&gt;
&lt;p&gt;There are 2 cases where this applies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Defining inline functions -- These should work like declaring default values for static functions, with the rules for applying default values working at the dynamic call site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specifying named function references for functions with additional default arguments, such as &lt;code&gt;fn:tokenize#2("lorem ipsum")&lt;/code&gt; where the &lt;code&gt;fn:tokenize#2&lt;/code&gt; binds the &lt;code&gt;$flags&lt;/code&gt; default value and the dynamic call applies the default value for &lt;code&gt;$pattern&lt;/code&gt;. -- This is possible to define as creating an inline function such that any default parameters are preserved along with the parameter types at the corresponding parameter index.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;For FunctionTest (i.e. function types), I'm not sure of a use case where extending optional parameters to that would be useful, as any higher-order function would always call the input function with the correct number of arguments. If this is useful, then that should be moved to a separate proposal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #157 created</title>
   <pubDate>Tue, 27 Sep 2022 17:00:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/157</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-157</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal to support optional parameters that bind to the context item.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal formalizes the definition of the 0-arity versions of &lt;code&gt;fn:string&lt;/code&gt;, &lt;code&gt;fn:data&lt;/code&gt;, etc. that bind to the context item.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;This allows &lt;code&gt;fn:string&lt;/code&gt; to be defined and implemented in a single function of the form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare function fn:string($item as item()? := .) as xs:string { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;When the default value is specified, the function is ·context-independent·, and ·focus-independent· at this point.&lt;/p&gt;
&lt;p&gt;When the default value is &lt;em&gt;not&lt;/em&gt; specified, the function is ·context-dependent·, and ·focus-dependent· at this point.&lt;/p&gt;
&lt;p&gt;This allows users to define their own functions that can be used at the end of path expressions, e.g. &lt;code&gt;/color/hexcode/to-int(16)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once this proposal has been accepted, we should go through the XSLT and XQFO specifications and use defaults for all the relevant functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #156 closed</title>
   <pubDate>Tue, 27 Sep 2022 16:50:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/156</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-156</guid>
   <description>&lt;div&gt;&lt;p&gt;Changes agreed 2022-09-20, and add history info to the spec for each function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #156 created</title>
   <pubDate>Tue, 27 Sep 2022 16:45:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/156</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-156</guid>
   <description>&lt;div&gt;&lt;p&gt;Changes agreed 2022-09-20, and add history info to the spec for each function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Approved &lt;a href="https://qt4cg.org/meeting/minutes/2022/09-27.html"&gt;on 27 September&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #134 closed</title>
   <pubDate>Tue, 27 Sep 2022 16:43:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/134</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-134</guid>
   <description>&lt;div&gt;&lt;p&gt;Make agreed changes to fn:all and fn:some functions.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #152 closed</title>
   <pubDate>Tue, 27 Sep 2022 16:42:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/152</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-152</guid>
   <description>&lt;div&gt;&lt;p&gt;Mike's changes to fn:all and fn:some&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #155 created</title>
   <pubDate>Tue, 27 Sep 2022 16:36:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/155</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-155</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal to support optional parameter values on static functions.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal allows users to define optional parameters for a function. When calling the function statically (e.g. &lt;code&gt;f(1,2,3)&lt;/code&gt;), or creating a named function reference to it (e.g. &lt;code&gt;f#3&lt;/code&gt;), any optional parameters that are not specified take the default values.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Defining functions that can take one or more optional argument (such as in the Functions and Operators specification) adds a lot of boilerplate code. For example, `fn:tokenize could be written as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare function fn:tokenize($value as xs:string?) as xs:string* {
   fn:tokenize($value, "\s+")
};

declare function fn:tokenize($value as xs:string?, $pattern as xs:string) as xs:string* {
   fn:tokenize($value, $pattern, "")
};

declare function fn:tokenize($value as xs:string?, $pattern as xs:string, $flags as xs:string) as xs:string* {
   ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this proposal, the above can be written more simply and concisely as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare function fn:tokenize(
   $value as xs:string?,
   $pattern as xs:string := "\s+",
   $flags as xs:string := ""
) as xs:string* {
   ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of these definitions of &lt;code&gt;fn:tokenize&lt;/code&gt; are equivalent.&lt;/p&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;Once this proposal has been accepted, we should go through the XSLT and XQFO specifications and use defaults for all the relevant functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #154 created</title>
   <pubDate>Tue, 27 Sep 2022 08:16:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/154</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-154</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespaces for Functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current F+O function library is divided into four namespaces: fn, map, array, and math.&lt;/p&gt;
&lt;p&gt;The use of separate namespaces serves little purpose, because they are all controlled by the same naming authority.&lt;/p&gt;
&lt;p&gt;But it has some significant disadvantages:&lt;/p&gt;
&lt;p&gt;(a) The proliferation of namespace declarations and namespace prefixes in user programs causes visual clutter.&lt;/p&gt;
&lt;p&gt;(b) Putting additional namespaces into the static context causes semantic clutter: such namespaces become available for unwanted purposes, such as casting strings to QNames, which also means that the namespace bindings need to be retained at run time, which bloats compiled code.&lt;/p&gt;
&lt;p&gt;(c) It's not always obvious, either to the specification developers or to users, what namespace a new function belongs in.&lt;/p&gt;
&lt;p&gt;I've attempted various ways of solving this problem, such as having a "namespace search list" used to resolve unprefixed function names, in place of a single default namespace. This idea falls down because we already have duplication across the current namespaces, for example fn:remove and map:remove.&lt;/p&gt;
&lt;p&gt;Polymorphism (deciding which function to call based on the type of the first argument) also seems unpromising as a way forward; our type system is not classically object-oriented.&lt;/p&gt;
&lt;p&gt;I propose instead that all functions in F+O should have an alias/synonym in the fn namespace:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map:remove()&lt;/code&gt; becomes available as &lt;code&gt;m.remove()&lt;/code&gt;, etc&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array:size()&lt;/code&gt; becomes available as &lt;code&gt;a.size()&lt;/code&gt;, etc&lt;/li&gt;
&lt;li&gt;&lt;code&gt;math:tan()&lt;/code&gt; becomes available as &lt;code&gt;tan()&lt;/code&gt; etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also propose removing the rule that user-declared functions have to be in a namespace. Instead, a function declared with no prefix (at least in XSLT, not sure exactly how this works in XQuery) should be in no namespace; and the binding rule for unprefixed names in function calls is to search first for no-namespace names, then for names in the default (usually fn) namespace. Of course this creates a risk of binding to the "wrong" function, but users can defend against this in a number of ways: they can avoid use of the feature, they can use the fn: prefix for disambiguation when necessary, they can adopt a naming convention like calling their own functions my.sum(). We should treat users as adults, able to make their own decisions on such matters.&lt;/p&gt;
&lt;p&gt;We will still encourage third-party developers of function libraries to put their functions in their own namespace, and of course this applies to EXPath modules such as file and binary.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #153 created</title>
   <pubDate>Mon, 26 Sep 2022 12:14:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/153</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-153</guid>
   <description>&lt;div&gt;&lt;p&gt;Explicitly mention subtypes for arrays and maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Reword section 3.6.4 for map and array type tests to explicitly mention sub typing and link to the relevant section.&lt;/p&gt;
&lt;p&gt;I believe, it is important to add examples for subtypes of arrays and maps. Can someone advise how and where to add them?&lt;/p&gt;
&lt;p&gt;map subtype example (could be added to 3.7.2.4 d.):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;note&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;code&amp;gt;map(xs:integer, element(fruit))&amp;lt;/code&amp;gt; is a subtype of &amp;lt;code&amp;gt;map(xs:anyAtomic, node())&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/note&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;array subtype example (could be added to 3.7.2.4 i.):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;note&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;code&amp;gt;array(xs:positiveInteger)&amp;lt;/code&amp;gt; is a subtype of &amp;lt;code&amp;gt;array(xs:decimal)&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/note&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 004 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sun, 25 Sep 2022 17:48:07 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-27</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-27</guid>
</item><item>
   <title>Pull request #152 created</title>
   <pubDate>Thu, 22 Sep 2022 09:03:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/152</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-152</guid>
   <description>&lt;div&gt;&lt;p&gt;Mike's changes to fn:all and fn:some&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a re-application of Mike's PR onto the latest sources and build environment.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #110 closed</title>
   <pubDate>Wed, 21 Sep 2022 17:34:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/110</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-110</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON templates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #151 created</title>
   <pubDate>Wed, 21 Sep 2022 17:34:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/151</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-151</guid>
   <description>&lt;div&gt;&lt;p&gt;map:build() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal replaces https://github.com/qt4cg/qtspecs/issues/110&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map:build($input as item()*, 
                  $makeKey as function(item()) as xs:anyAtomicValue, 
                  $makeValue as function(item()) as item()*.
                  $duplicates as function(item()*, item()*) as item()*) as map(*)

The fourth argument is optional and defaults to fn:op(",").

The third argument is optional and defaults to fn:identity#1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:build(//employee, -&amp;gt;{@ssn}, identity#1, -&amp;gt;($x,$y){error()})&lt;/code&gt;
Constructs an index of employees with the atomised @ssn attribute as key, and the employee element as the associated value, failing if there are any duplicates&lt;/p&gt;
&lt;p&gt;This can be abbreviated to &lt;code&gt;map:build(//employee, -&amp;gt;{@ssn})&lt;/code&gt; if it is known that there are no duplicates, or if the default action on duplicates is acceptable.&lt;/p&gt;
&lt;p&gt;Example 2:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:build(//employee, -&amp;gt;{location/city}, -&amp;gt;{xs:decimal(salary)}, op(","))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Constructs a map whose keys are the locations of employees and whose associated values are the salaries of employees at that location. The effect of the $duplicates argument is that if there are several employees at the same location, their salaries are combined into a sequence (using the "," operator). If the last argument were &lt;code&gt;op("+")&lt;/code&gt;, the map would contain the sum of the salaries for each location.&lt;/p&gt;
&lt;p&gt;Rules&lt;/p&gt;
&lt;p&gt;The function creates a map.&lt;/p&gt;
&lt;p&gt;Informally, the function processes each item in the input sequence in turn in sequence order. It calls the $makeKey function on that item to obtain a key value, and the $makeValue function to obtain an associated value. If the key is not already present in the map, it creates a new key-value pair with that key and that value. If the key is already present, it combines the existing value for the key with the new value using the $duplicates function, and replaces the entry with this combined value.&lt;/p&gt;
&lt;p&gt;More formally, the result of the function is the result of the following expression:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fold-left($input, map{}, -&amp;gt;($old, $next){
    let $key := $makeKey($next)
    let $value := $makeValue($next)
    return 
       if (map:contains($old, $key))
       then map:put($old, $key, $duplicates($map:get($key), $value))
       else map:put($old, $key, $value)
   })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: although defined to process the input sequence in order, the implementation may be optimised (for example to work in parallel) if it is known that the $duplicates function is symmetric, that is, if $duplicates($a, $b) produces the same result as $duplicates($b, $a).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #150 created</title>
   <pubDate>Wed, 21 Sep 2022 03:10:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/150</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-150</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:ranks: Produce all ranks in applying a function on the items of a sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We all know the value and usefulness of functions such as &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-highest"&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:highest()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-lowest"&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;and fn:lowest()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sometimes, when we need to see all rankings of a particular sorting result, for example the rankings of a sport competition, we realize that highest and lowest are just the highest and lowest ranking-groups from all the rankings.&lt;/p&gt;
&lt;p&gt;We define these three overloads for &lt;strong&gt;&lt;code&gt;fn:ranks&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fn:ranks&lt;/strong&gt;($input as item()*) as array(item()*)*&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fn:ranks&lt;/strong&gt;($input as item()*, $collation as xs:string?) as array(item()*)*&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fn:ranks&lt;/strong&gt;($input	 as item()*, $collation	 as xs:string?, 	$key	 as function(item()) as xs:anyAtomicType*) as array(item()*)*&lt;/p&gt;
&lt;p&gt;The rules and semantics for the arguments are the same as those for &lt;strong&gt;fn:highest&lt;/strong&gt;, &lt;strong&gt;fn:lowest&lt;/strong&gt;, &lt;strong&gt;fn:sort&lt;/strong&gt;. What is different is just the result.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here is one possible XPath implementation and also a complete example&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $ranks := function(
                $input as item()*,
                $collation as xs:string?,
                $key as function(item()) as xs:anyAtomicType*) as array(item()*)*
 {
    for $v in sort(distinct-values($input ! $key(.)),  $collation)
     return [$input[$key(.) eq $v]]
 },
 
   $inp := (3, 2, 4),
   $keyfun := function($n) {$n mod 2},
   $theRanks :=  $ranks($inp, (), $keyfun),
   $theHighest := $theRanks[last()], 
   $theLowest := $theRanks[1]
 return
 
   ( "Ranks:", $theRanks,
     "=================",
     "Highest:",
     $theHighest,
     "=================",
     "Lowest:",
     $theLowest
   )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result, as intended is all the rankings (in this case they are just 2 groups of equally-ranked items), then the highest and lowest, extracted as the last and first of the rankings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ranks:
[(2, 4)]
[3]
=================
Highest:
[3]
=================
Lowest:
[(2, 4)]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #149 created</title>
   <pubDate>Tue, 20 Sep 2022 20:12:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/149</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-149</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions for splitting a sequence (or array) based on predicate matching &lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is concerned with use cases like "How do I select all the paragraphs before the first H2?" or "How do I select items between &lt;start-milestone/&gt; and &lt;end-milestone/&gt;?".&lt;/p&gt;
&lt;p&gt;Currently in the draft spec we have proposals for:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;range-from($input, $predicate)&lt;/code&gt;: Returns a sequence containing items from an input sequence, starting with the first item that matches a supplied predicate.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;range-to($input, $predicate)&lt;/code&gt;: Returns a sequence containing items from an input sequence, ending with the first item that matches a supplied predicate.&lt;/p&gt;
&lt;p&gt;These both include the matching item, on the theory that it's easier to drop it if it's not wanted, than to add it if its needed.&lt;/p&gt;
&lt;p&gt;I've also proposed (as an alternative) a family of four functions &lt;code&gt;items-before&lt;/code&gt;, &lt;code&gt;items-to&lt;/code&gt;, &lt;code&gt;items-from&lt;/code&gt;, &lt;code&gt;items-after&lt;/code&gt; giving four combinations of taking the subsequence before/after the first match of the predicate, and including or not including the matched item.&lt;/p&gt;
&lt;p&gt;It's worth pointing out that these can all be defined in terms of index-where. For example range-to (assuming at least one item matches the predicate) is subsequence($input, 1, index-where($input, $predicate).&lt;/p&gt;
&lt;p&gt;These functions all treat the first match of the predicate as special: they partition the sequence before or after the first item that matches the predicate. An alternative, inspilred by XSLT's for-each-group group-ending|starting-with, would be to partition the sequence breaking immediately before or after every item that matches the predicate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;group-breaking-after($input, $predicate)
group-breaking-before($input, $predicate)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But these logically return a sequence of sequences, which would typically be presented either as an array of sequences or a sequence of arrays, neither of which is ideal. (An alternative would be to return a sequence of arity-0 functions)&lt;/p&gt;
&lt;p&gt;Having reviewed the options, I think my preferance remains having a family of four functions which I have called  items-before, items-to, items-from, items-after. But I'm certainly open to other options. The logical names would probably be subsequence-before etc, but that's a bit of a mouthful.&lt;/p&gt;
&lt;p&gt;Whatever family of functions we decide upon, there's logically a requirement to offer the same for arrays.&lt;/p&gt;
&lt;p&gt;Michael Kay&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 003 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 20 Sep 2022 18:25:39 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-20</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-20</guid>
</item><item>
   <title>Issue #148 created</title>
   <pubDate>Tue, 20 Sep 2022 13:24:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/148</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-148</guid>
   <description>&lt;div&gt;&lt;p&gt;Get the type of a value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This could be a language construct like &lt;code&gt;type of $a&lt;/code&gt; similar to &lt;code&gt;$a instance of &amp;lt;type&amp;gt;&lt;/code&gt; or a function &lt;code&gt;fn:type-of(item()*)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It returns the string representation of the type of a value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For atomic values, return the local name of the most specific built-in (XSD) type of which the value is an instance of.&lt;/li&gt;
&lt;li&gt;For nodes, return node-kind(name) where node-kind is for example "element" or "attribute" and name (for nodes that have a name) is the node name in Q{uri}local notation.&lt;/li&gt;
&lt;li&gt;For other functions return a string representation of the function signature that (a) conforms to XPath SequenceType syntax, and (b) uses EQName notation for qualified names.&lt;/li&gt;
&lt;li&gt;For empty maps and arrays return &lt;code&gt;map(*)&lt;/code&gt; and &lt;code&gt;array(*)&lt;/code&gt; respectively&lt;/li&gt;
&lt;li&gt;For arrays and maps with members and entries the implementation &lt;em&gt;can&lt;/em&gt; attempt to find the most specific shared type like &lt;code&gt;array(xs:string)&lt;/code&gt;, &lt;code&gt;map(xs:integer, element(banana))&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;The inspection should stop as early as possible, when the first mismatching type is encountered.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;type of "", (: yields "xs:string" :)
type of [], (: yields "array(*)" :)
type of [map{"a": true(), "b": false()}, map{"c", false()}], (: yields "array(map(xs:string, xs:boolean))" :)
type of ([], map{}, function () {}]), (: yields "function(*)" :)
type of [map{"a": true(), "b": "false"}, map{"c", false()}] (: yields "array(map(xs:string, xs:anyAtomic))" or "array(map(xs:string, *))" :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wrote an implementation in XQuery as a PoC utilizing typeswitch:&lt;/p&gt;
&lt;p&gt;https://github.com/line-o/xbow/commit/ca6e593f869c15b1fb372d24653715abfbda5cf8&lt;/p&gt;
&lt;p&gt;There is an implementation in baseX &lt;a href="https://docs.basex.org/wiki/Inspection_Module#inspect:type"&gt;inspect:type&lt;/a&gt;.
&lt;code&gt;inspect:type#2&lt;/code&gt; allowing to set additional options which should be considered.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #147 created</title>
   <pubDate>Mon, 19 Sep 2022 10:50:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/147</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-147</guid>
   <description>&lt;div&gt;&lt;p&gt;Terse syntax for map entries&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Allow variables to be used to construct map entries with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the key being the variable name cast to xs:string and&lt;/li&gt;
&lt;li&gt;the value to be the value of the variable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The syntax would change to something along&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mapExpression ::= 'map' '{' ( expr ':' expr | variableReference ) [ ',' ( expr ':' expr | variableReference ) ]* '}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $my-var := &amp;lt;root /&amp;gt;
let $other := map { "a": [ 1, 2, 3 ] }
return map {
  $my-var,
  $other
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;evaluates to&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map {
  "my-var": &amp;lt;root /&amp;gt;
  "other": map { "a": [ 1, 2, 3 ] }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the inverse operation of destructuring a map as proposed in https://github.com/qt4cg/qtspecs/issues/37&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let ${my-var, other} := map {
  "my-var": &amp;lt;root /&amp;gt;
  "other": map { "a": [ 1, 2, 3 ] }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Slack discussion John Lumley and Liam Quinn raised concerns this construct might be error prone when both methods to construct an entry can be mixed&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;  map { $a : $b, $c }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:for-each($m, function ($k, $v as xs:anyAtomic) { map{ $v : $k } }),
map:for-each($m, function ($k, $v as xs:anyAtomic) { map{ $v, $k } })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #146 created</title>
   <pubDate>Sun, 18 Sep 2022 18:57:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/146</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-146</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:apply with last two arguments (array, map) for the positional and keyword args in a func-call&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The existing &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-apply"&gt;&lt;strong&gt;&lt;em&gt;fn:apply() in XPath 3.1&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; "Makes a dynamic call on a function with an argument list supplied in the form of an array."&lt;/p&gt;
&lt;p&gt;However in XPath 4.0 &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-function-calls"&gt;a function may have both (required) positional and variadic arguments, expressed as  keyword arguments if the function is map-variadic&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;. Thus there are cases when it is impossible to provide the arguments of the function just within an array.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For such cases, we need a new overload&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:apply($function as function(*), $array as array(*), $map as map(*)) as item()*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The result&lt;/strong&gt; of the function is obtained by creating and invoking the same dynamic call that would be the result of  a  function-call to &lt;code&gt;$function&lt;/code&gt; with positional arguments taken from the (ordered) members of the supplied array &lt;code&gt;$array&lt;/code&gt; and keyword arguments taken from the (unordered) entries (KVPs - keyword-value pairs) of  &lt;code&gt;$map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The effect of calling&lt;/strong&gt; &lt;code&gt;fn:apply($f, [$a, $b, $c, ...], map{"k1" : v1, "k2" : v2, ...})&lt;/code&gt; is the same as the effect of the dynamic function call resulting from &lt;code&gt;$function($a, $b, $c, ...., $k1 = v1, $k2 = v2, ...)&lt;/code&gt;. The function conversion rules are applied to the supplied arguments in the usual way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The new overload of &lt;code&gt;fn:apply()&lt;/code&gt; is needed &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-function-calls"&gt;if we have in XPath 4.0 function calls with both positional and keyword arguments&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;. In other words, this proposal supposes (depends on) the existence of this new XPath feature&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some newly proposed features, such as &lt;strong&gt;&lt;em&gt;&lt;a href="https://github.com/qt4cg/qtspecs/issues/106"&gt;Function Decorators&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, depend on the existence of this new overload of &lt;code&gt;fn:apply()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;The expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $data := &amp;lt;a b="3"/&amp;gt;
 return
    fn:apply(fn:serialize#2, [$data], map{"method":"xml", "omit-xml-declaration":true()})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;returns:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;'&amp;lt;a b="3"/&amp;gt;'&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #145 closed</title>
   <pubDate>Sat, 17 Sep 2022 13:28:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/145</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-145</guid>
   <description>&lt;div&gt;&lt;p&gt;Cleaned up infrastructure&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #145 created</title>
   <pubDate>Sat, 17 Sep 2022 13:27:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/145</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-145</guid>
   <description>&lt;div&gt;&lt;p&gt;Cleaned up infrastructure&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I couldn't leave well enough alone. This "finishes" the conversion to a more modern build system, fixes a number of small editorial issues (incorrect bibliographic links, etc.), and suppresses some warnings by default.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #144 closed</title>
   <pubDate>Fri, 16 Sep 2022 19:35:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/144</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-144</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix links&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #144 created</title>
   <pubDate>Fri, 16 Sep 2022 19:30:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/144</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-144</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix links&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;My bad. At some point, not too recently, I changed from using /branch/master to hold the current specifications to /specifications. The old links persisted in the index page for qt4cg.org and got (quite reasonably) copied into the README but I didn't notice.&lt;/p&gt;
&lt;p&gt;Yesterday, I think, I was cleaning up some things and deleted the stale /branch/master files.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 003 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 16 Sep 2022 15:59:58 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-20</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-20</guid>
</item><item>
   <title>Issue #17 closed</title>
   <pubDate>Thu, 15 Sep 2022 17:04:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/17</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-17</guid>
   <description>&lt;div&gt;&lt;p&gt;readme&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #138 closed</title>
   <pubDate>Thu, 15 Sep 2022 16:56:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/138</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-138</guid>
   <description>&lt;div&gt;&lt;p&gt;Update README.md&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #143 closed</title>
   <pubDate>Thu, 15 Sep 2022 16:53:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/143</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-143</guid>
   <description>&lt;div&gt;&lt;p&gt;Infrastructure updates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #143 created</title>
   <pubDate>Thu, 15 Sep 2022 16:51:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/143</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-143</guid>
   <description>&lt;div&gt;&lt;p&gt;Infrastructure updates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR doesn't make any technical changes (and it probably won't build correctly as a PR, so I'm just going to merge it).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I tinkered a little bit with the URIs on the specifications so that they point to more accurate URIs.&lt;/li&gt;
&lt;li&gt;I've tried to make a few of the XSLT files "less chatty". I'd like to make it easier to see what the errors and warnings are so that we can resolve them. It's the sort of thing that bugs me, so if no one else does it, I'll probably chip away at them as we go.&lt;/li&gt;
&lt;li&gt;I reworked the way that the XPath Functions and XSLT specifications are built. I've pulled the tasks out of the ant files and implemented them directly in Gradle. (The XPath and XQuery specifications are as yet unchanged, they're more complicated and this already took longer than I had anticipated.)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;specification/{specid}/build&lt;/code&gt; and &lt;code&gt;specification/{specid}/html&lt;/code&gt; directories are no longer used. All of the build and intermediate files are under &lt;code&gt;build&lt;/code&gt;. (For XPath Functions and XSLT.)&lt;/li&gt;
&lt;li&gt;I stopped trying to build all the namespace documents. Those aren't useful unless they're installed in the "real" URIs and I have no idea if/how we'll be able to update those. When we're closer to the end, I can get the namespace documents building again. For now, it's just faster not to.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's now easier to see what is happening and Gradle will do a better job of managing the dependencies. So if you are building it locally, it should do less work on each build.&lt;/p&gt;
&lt;p&gt;Everything should just build the same way it used to. Changes to the sources or the stylesheets should cause the right builds to run. It is, of course, possible that I've broken something. I tried to check everything, but there are a lot of moving pieces here. Comments, questions, and complaints most welcome.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #142 closed</title>
   <pubDate>Thu, 15 Sep 2022 11:26:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/142</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-142</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve workflows&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #142 created</title>
   <pubDate>Thu, 15 Sep 2022 11:26:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/142</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-142</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve workflows&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR updates the github workflows so that all branches are published and so that the PR path is exposed in the environment.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #140 closed</title>
   <pubDate>Wed, 14 Sep 2022 14:52:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/140</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-140</guid>
   <description>&lt;div&gt;&lt;p&gt;Make agreed changes to fn:all and fn:som functions (NW testing)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #141 closed</title>
   <pubDate>Wed, 14 Sep 2022 13:15:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/141</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-141</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix branch name&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #141 created</title>
   <pubDate>Wed, 14 Sep 2022 13:15:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/141</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-141</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix branch name&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #140 created</title>
   <pubDate>Wed, 14 Sep 2022 13:11:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/140</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-140</guid>
   <description>&lt;div&gt;&lt;p&gt;Make agreed changes to fn:all and fn:som functions (NW testing)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #137 closed</title>
   <pubDate>Wed, 14 Sep 2022 13:04:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/137</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-137</guid>
   <description>&lt;div&gt;&lt;p&gt;A copy of Mike's fn-all-some changes for testing&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #139 closed</title>
   <pubDate>Wed, 14 Sep 2022 13:02:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/139</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-139</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix markup error introduced yesterday&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #139 created</title>
   <pubDate>Wed, 14 Sep 2022 13:01:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/139</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-139</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix markup error introduced yesterday&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A commit yesterday introduced a markup error.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #138 created</title>
   <pubDate>Wed, 14 Sep 2022 12:43:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/138</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-138</guid>
   <description>&lt;div&gt;&lt;p&gt;Update README.md&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;First draft of revising readme.md. I would propose also adding instructions detailing the build process for local builds of the repo.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #137 created</title>
   <pubDate>Wed, 14 Sep 2022 12:05:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/137</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-137</guid>
   <description>&lt;div&gt;&lt;p&gt;A copy of Mike's fn-all-some changes for testing&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This should create a formatted PR!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #136 closed</title>
   <pubDate>Wed, 14 Sep 2022 12:02:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/136</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-136</guid>
   <description>&lt;div&gt;&lt;p&gt;Workflow changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #133 closed</title>
   <pubDate>Wed, 14 Sep 2022 12:01:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/133</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-133</guid>
   <description>&lt;div&gt;&lt;p&gt;Norm never plans to merge this, it's a test&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #136 created</title>
   <pubDate>Wed, 14 Sep 2022 12:00:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/136</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-136</guid>
   <description>&lt;div&gt;&lt;p&gt;Workflow changes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Add two workflows, update the build script to create an index page&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #135 created</title>
   <pubDate>Tue, 13 Sep 2022 18:21:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/135</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-135</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays' counterparts for functions on sequences, and vice versa&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When we have a proposal for a function &lt;code&gt;f1&lt;/code&gt; that has a sequence-argument, we need to also have (or propose if not-existent) a corresponding function &lt;code&gt;f2&lt;/code&gt; that has an array-argument in place of the &lt;code&gt;f1&lt;/code&gt;'s sequence argument.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;all($input as item()*, $predicate as function(item()) as xs:boolean)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;the above function accepts a sequence as its 1st argument. In this case there is no existing function &lt;code&gt;all&lt;/code&gt; for arrays, therefore we will define/propose it together with the above function:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:all($input as array(*), $predicate as function(item()*) as xs:boolean))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For consistency, clarity and to not confuse the reader of the Spec (for example trying to find why there is no corresponding 2nd function and abuse their imagination) we shall as a rule always provide a pair of such functions: one defined on sequence(s)  and one defined on array(s).&lt;/p&gt;
&lt;p&gt;Even if we were not going to propose a new function, but an "orphan" such function already exists, we will add its corresponding 2nd function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 002 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 13 Sep 2022 16:30:29 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-13</guid>
</item><item>
   <title>Pull request #134 created</title>
   <pubDate>Tue, 13 Sep 2022 17:27:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/134</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-134</guid>
   <description>&lt;div&gt;&lt;p&gt;Make agreed changes to fn:all and fn:some functions.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #133 created</title>
   <pubDate>Tue, 13 Sep 2022 16:43:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/133</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-133</guid>
   <description>&lt;div&gt;&lt;p&gt;Norm never plans to merge this, it's a test&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a test. This is only a test. Had this been a real emergency, we would have fled in terror and you would not have been informed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 002 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 12 Sep 2022 11:48:44 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-13</guid>
</item><item>
   <title>QT4 CG meeting 001 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 6 Sep 2022 16:38:31 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-06</guid>
</item><item>
   <title>Issue #132 created</title>
   <pubDate>Tue, 6 Sep 2022 08:46:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/132</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-132</guid>
   <description>&lt;div&gt;&lt;p&gt;Clarify if redirects should be followed&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If a user requests a document (using doc, document, unparsed-text, etc) with an HTTP(S) URI, and a redirect response is returned, what should the processor do?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 001 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 5 Sep 2022 14:45:39 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-06</guid>
</item><item>
   <title>Issue #131 created</title>
   <pubDate>Tue, 23 Aug 2022 12:49:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/131</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-131</guid>
   <description>&lt;div&gt;&lt;p&gt;Expression for binding the Context Value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;REVISED:&lt;/strong&gt; I’ve incorporated the feedback from the comments (thanks).&lt;/p&gt;
&lt;p&gt;We have no expression yet to bind a value to the context value. Such an expression would be useful, among other things, to extend the focus function to sequences (&lt;code&gt;fn { . }&lt;/code&gt;, see #129).&lt;/p&gt;
&lt;p&gt;Here are 3 possible constructs for that, ordered by my personal preference:&lt;/p&gt;
&lt;h3&gt;1. Value Map Expression&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;ValueExpr      ::=  ValidateExpr | ExtensionExpr | ValueMapExpr
ValueMapExpr   ::=  SimpleMapExpr ("~" SimpleMapExpr)*
SimpleMapExpr  ::=  PathExpr ("!" PathExpr)*

(: Example :)
//flower ~ (count(.) || ' flowers: ' || string-join(name, ', '))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expression would be similar to the simple map expression (which we could rename to item map expression). The following equivalents would then exist for simple FLWOR expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $i in (1 to 5) return string($i)  ≍  (1 to 5) ! string(.)
let $i := (1 to 5) return count($i)   ≍  (1 to 5) ~ count(.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fn { E }&lt;/code&gt; could be rewritten to &lt;code&gt;fn($c) { $c ~ E }&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;2. Context Value Declaration&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;ContextExpr  ::=  "context" "{" Expr "}" EnclosedExpr

(: Example :)
context { //flower } {
  count(.) || ' flowers: ' || string-join(name, ', ')
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of the first expression defines the context value, the second expression can reference the context.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn { E }&lt;/code&gt; could be rewritten to &lt;code&gt;fn($c) { context { $c } { E } }&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;3. Enhanced FLWOR expression (for the sake of completion)&lt;/h3&gt;
&lt;p&gt;Similar to variables, the dot could be used to bind and reference the context:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;LetBinding  ::=  ("." | ("$" VarName)) TypeDeclaration? ":=" ExprSingle
ForBinding  ::=  ("." | ("$" VarName)) TypeDeclaration? AllowingEmpty? PositionalVar? "in" ExprSingle

(: Example :)
let . := //flower
return count(.) || ' flowers: ' || string-join(name, ', ')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fn { E }&lt;/code&gt; could be rewritten to &lt;code&gt;fn($c) { let . := $c return E }&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Assessment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The first solution looks most appealing to me. I like the analogy with the existing syntax for single items.&lt;/li&gt;
&lt;li&gt;We could choose the second solution if we believe that the expression will be rarely used.&lt;/li&gt;
&lt;li&gt;I‘ve backed away from the third solution; I think it would be too pervasive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #130 created</title>
   <pubDate>Mon, 22 Aug 2022 12:23:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/130</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-130</guid>
   <description>&lt;div&gt;&lt;p&gt;New super/union type xs:binary?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I know we want to avoid in-depth changes in the type system. Still, now that we have &lt;code&gt;xs:numeric&lt;/code&gt;, is there an obvious reason why we have no super oder union type for &lt;code&gt;xs:base64Binary&lt;/code&gt; and &lt;code&gt;xs:hexBinary&lt;/code&gt;? It would simplify the definition of many extensions functions a lot (e.g. in the EXPath Binary or File Module).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #127 closed</title>
   <pubDate>Fri, 19 Aug 2022 09:50:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/127</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-127</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Function items: Align "function" and "-&amp;gt;" &lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #129 created</title>
   <pubDate>Thu, 18 Aug 2022 16:59:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/129</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-129</guid>
   <description>&lt;div&gt;&lt;p&gt;Context item → Context value?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This has already been discussed before at various places, I’d like to raise it again: What about generalizing the context item and allowing it to reference sequences? Are there definitive showstoppers?&lt;/p&gt;
&lt;h3&gt;The Context Item&lt;/h3&gt;
&lt;p&gt;As its name says, the context item is a container for a single item in the current context. A value that is bound to the context item is referenced with the &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-context-item-expression"&gt;Context Item Expression&lt;/a&gt;, the single dot: &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The context item shares many similarities with variables. The main difference is that it currently cannot be used for sequences. I propose to generalize the semantics and introduce a “context value”:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Items that have formerly been bound to the context item (via the Context Item Declaration, within predicates, the simple map operator, path expressions, the &lt;code&gt;transform with&lt;/code&gt; expression, etc.) are now bound to the context value.&lt;/li&gt;
&lt;li&gt;The revised Context Item Expression returns sequences instead of single items.&lt;/li&gt;
&lt;li&gt;We cannot drop context items completely – for example, we have a &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-context-item-declarations"&gt;Context Item Declaration&lt;/a&gt; in the prolog of XQuery expressions, which uses the &lt;code&gt;item&lt;/code&gt; keyword – but we can treat it as a secondary concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Context Value Declaration&lt;/h3&gt;
&lt;p&gt;It has become a common pattern to use &lt;code&gt;declare context item&lt;/code&gt; to bind a document to the context item and process queries on that item:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare context item := doc('flowers');
.//flower[name = 'Tigridia']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If data can be distributed across multiple documents (which is often, if not the standard case, in databases), this approach does not work. It would work if we could bind sequences:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare context value := collection('flowers');
.//flower[name = 'Tigridia']
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;External Bindings&lt;/h3&gt;
&lt;p&gt;Many processors allow users to bind external values to the context item. This approach is particularly restricting for databases, in which data is often distributed across multiple documents. With the generalized concept, it would get possible to bind sequences and collections to the context. Paths like the following one could be used, no matter if the contents are stored in a single document or in a collection:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;//flower[name = 'Iridaceae']
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Focus Functions&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-focus-functions"&gt;focus function&lt;/a&gt; provides a compact syntax for common arity-one functions. The single argument is bound it to the context item:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;sort($flowers, (), function { @petals })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the generalization to values, we could easily enhance focus functions to accept arbitrary sequences:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;array:sort($flower-species, (), function { count(.) })
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $flowers := array:join(
  for $flower in //flower
  group by $_ := $flower/name
  return [ $flower ]
)
(: some $p in petals satisfies $p gt 4 :)
return array:filter($flowers, function { petals &amp;gt; 4 })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Use Case: Arrow Expressions&lt;/h3&gt;
&lt;p&gt;The arrow expression provides an intuitive syntax for performing multiple subsequent operations on a given input. With the context value generalization, we could also process chained sequences:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;//flower[name = 'Psychotria']
=&amp;gt; function { count(.) || ' flower(s) found' }()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #128 created</title>
   <pubDate>Wed, 17 Aug 2022 10:29:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/128</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-128</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:replace: Tweaks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Some suggestions for &lt;code&gt;fn:replace&lt;/code&gt;:&lt;/p&gt;
&lt;h4&gt;A. Simplify/unify retrieval of the replacement value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;$action&lt;/code&gt; is present, call the function.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;$replacement&lt;/code&gt; is present, obtain its value.&lt;/li&gt;
&lt;li&gt;If no argument is present, use the empty sequence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See https://github.com/qt4cg/qtspecs/issues/104#issuecomment-1210506639 for similar replacements in maps and arrays.&lt;/p&gt;
&lt;h4&gt;B. Simplify actions by relaxing types:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Pass on matches as &lt;code&gt;xs:untypedAtomic&lt;/code&gt; items.&lt;/li&gt;
&lt;li&gt;Apply &lt;code&gt;fn:string&lt;/code&gt; to the result of the action (or even &lt;code&gt;fn:string-join&lt;/code&gt;, if we allow sequences as return values).&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;C. Always use &lt;code&gt;xs:string?&lt;/code&gt; for &lt;code&gt;$flags&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;…affects &lt;code&gt;fn:matches&lt;/code&gt;, &lt;code&gt;fn:tokenize&lt;/code&gt;, and &lt;code&gt;fn:analyze-string&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Resulting function signature&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:replace(
  $value        as xs:string?,
  $pattern      as xs:string,
  $replacement  as xs:string?                                                  := '',
  $flags        as xs:string?                                                  := '',
  $action       as (function(xs:untypedAtomic, xs:untypedAtomic*) as item()?)? := ()
) as xs:string
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Examples&lt;/h4&gt;
&lt;p&gt;…taken from the &lt;a href="https://qt4cg.org/branch/master/xpath-functions-40/Overview-diff.html#func-replace"&gt;specification draft&lt;/a&gt; and simplified/fixed:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:replace("Chapter 9", "[0-9]+", action := function { . + 1 }),

fn:replace(
  "57°43′30″",
  "([0-9]+)°([0-9]+)′([0-9]+)″",
  action := function($matches) {
    ($matches[1] + $matches[2] div 60 + $matches[3] div 3600) || '°'
  }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #127 created</title>
   <pubDate>Tue, 16 Aug 2022 09:40:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/127</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-127</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Function items: Align "function" and "-&amp;gt;" &lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think that &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;-&amp;gt;&lt;/code&gt; should be 100% interchangeable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Current Rule:
[83] InlineFunctionExpr  ::=  (("function" FunctionSignature) | ("-&amp;gt;" FunctionSignature?)) FunctionBody

Proposed:
[83] InlineFunctionExpr  ::=  (("function" | "-&amp;gt;") FunctionSignature?) FunctionBody
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And an editorial note: In https://qt4cg.org/branch/master/xquery-40/xquery-40-diff.html#id-inline-func, the expanded syntax needs to be changed from&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function($x as item()} as item()* {$x -&amp;gt; {EXPR}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function($x as item()} as item()* { $x ! EXPR }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #126 created</title>
   <pubDate>Tue, 16 Aug 2022 09:25:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/126</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-126</guid>
   <description>&lt;div&gt;&lt;p&gt;Mathematical Operator Unicode Symbols&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As &lt;a href="https://www.hanselman.com/blog/monospaced-programming-fonts-with-ligatures"&gt;programming fonts with ligatures&lt;/a&gt; get more and more common, we should ensure that Unicode symbols that are defined as equivalents for ASCII operators will not be mixed up with ligatures.&lt;/p&gt;
&lt;p&gt;In particular, it’s the aliases for value comparisons that I believe should be used for general comparison operators instead:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;≤&lt;/code&gt; → &lt;code&gt;&amp;lt;=&lt;/code&gt; (instead of&lt;code&gt;le&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;≥&lt;/code&gt; → &lt;code&gt;&amp;gt;=&lt;/code&gt; (instead of&lt;code&gt;ge&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;≠&lt;/code&gt; → &lt;code&gt;!=&lt;/code&gt; (instead of &lt;code&gt;ne&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;≐&lt;/code&gt;, &lt;code&gt;⋖&lt;/code&gt;, &lt;code&gt;⋗&lt;/code&gt; …drop them?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The full list of the currently defined aliases: https://qt4cg.org/branch/master/xquery-40/xquery-40-diff.html#id-math-symbols&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #125 created</title>
   <pubDate>Mon, 15 Aug 2022 10:02:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/125</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-125</guid>
   <description>&lt;div&gt;&lt;p&gt;array:partition → fn:partition: empty results; examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;1. I think that an empty sequence should be returned if &lt;code&gt;array:partition&lt;/code&gt; is invoked with an empty array. See e.g. &lt;code&gt;fn:tokenize('')&lt;/code&gt;, which also returns an empty sequence and no zero-character string.&lt;/p&gt;
&lt;p&gt;2. The last two example queries need to be revised, e.g. as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;array:partition(
  tokenize("In the beginning was the word"),
  function($previous, $current) { sum(($previous, $current) ! string-length()) gt 10 }
)

array:partition(
  (1, 2, 3, 6, 7, 9, 10),
  function($seq, $new) { not($new = $seq[last()] + 1) }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe an affirming &lt;code&gt;$add-when&lt;/code&gt; function is more intuitive than &lt;code&gt;$break-when&lt;/code&gt;, in particular for function bodies with sequence operations and general comparisons.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #10 closed</title>
   <pubDate>Thu, 11 Aug 2022 23:20:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/10</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-10</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:filter with a function returning empty sequence&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #61 closed</title>
   <pubDate>Thu, 11 Aug 2022 22:57:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/61</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-61</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:all and fn:some have an xs:integer* return type, but describe an xs:boolean return type&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #81 closed</title>
   <pubDate>Thu, 11 Aug 2022 22:46:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/81</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-81</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt30] Typo in §4.4&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #102 closed</title>
   <pubDate>Thu, 11 Aug 2022 22:42:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/102</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-102</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt30] Meaning of the term "lexical space"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #117 closed</title>
   <pubDate>Thu, 11 Aug 2022 22:22:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/117</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-117</guid>
   <description>&lt;div&gt;&lt;p&gt;Downcasting (relabelling) in the coercion rules&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #120 closed</title>
   <pubDate>Thu, 11 Aug 2022 22:11:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/120</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-120</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo:  "stremability"&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #124 created</title>
   <pubDate>Wed, 10 Aug 2022 19:16:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/124</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-124</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Incorrect subtype-itemtype rules for pure and local union types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Looking at https://github.com/qt4cg/qtspecs/issues/122, I've identified a possible gap in the logic for pure union types and &lt;code&gt;LocalUnionTypes&lt;/code&gt;. Specifically, the rules are defined for when &lt;code&gt;A&lt;/code&gt; is one of these union types but not when &lt;code&gt;B&lt;/code&gt; is one of these union types.&lt;/p&gt;
&lt;p&gt;That is, under the current 4.0 draft rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;subtype-itemtype(union(xs:string, xs:integer), xs:string)&lt;/code&gt; is defined and will return false (&lt;code&gt;xs:integer&lt;/code&gt; is not a subtype of &lt;code&gt;xs:string&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subtype-itemtype(xs:string, union(xs:string, xs:integer))&lt;/code&gt; is not defined and will return false even though the union type supports &lt;code&gt;xs:string&lt;/code&gt; as one of its member types.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that in the earlier standard versions, the pure union type case is handled by &lt;code&gt;derives-from(AT, ET)&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ET&lt;/code&gt; is a pure union type of which &lt;code&gt;AT&lt;/code&gt; is a member type&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With &lt;code&gt;derives-from(AT, ET)&lt;/code&gt; only being applied in the case when both are atomic types&lt;/p&gt;
&lt;h2&gt;Draft Wording&lt;/h2&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;em&gt;Conditions for atomic and union types:&lt;/em&gt;
a. &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are &lt;code&gt;AtomicOrUnionType&lt;/code&gt;s, and &lt;code&gt;derives-from(A, B)&lt;/code&gt; returns true.
b. &lt;code&gt;A&lt;/code&gt; is a &lt;code&gt;LocalUnionType&lt;/code&gt; in the form &lt;code&gt;union(T1, T2, ...)&lt;/code&gt; and every type &lt;code&gt;T&lt;/code&gt; in (&lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;T2&lt;/code&gt;, ...) satisfies &lt;code&gt;subtype-itemType(T, B)&lt;/code&gt;.
c. &lt;code&gt;B&lt;/code&gt; is a &lt;code&gt;LocalUnionType&lt;/code&gt; in the form &lt;code&gt;union(T1, T2, ...)&lt;/code&gt; and any type &lt;code&gt;T&lt;/code&gt; in (&lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;T2&lt;/code&gt;, ...) satisfies &lt;code&gt;subtype-itemType(A, T)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Note: There is no need for a rule when &lt;code&gt;A&lt;/code&gt; is a pure union type as that is covered by the "There is a type MT such that derives-from( AT, MT ) and derives-from( MT, ET )" rule for &lt;code&gt;derives-from&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #123 created</title>
   <pubDate>Tue, 9 Aug 2022 17:33:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/123</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-123</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:duplicate-values&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Motivation&lt;/h3&gt;
&lt;p&gt;The new function &lt;code&gt;fn:all-equal&lt;/code&gt; can be used for consistency checks (e.g., to verify if IDs are distinct). Often, however, developers rather need to find the actual values that exist more than once. A &lt;code&gt;fn:duplicate-values&lt;/code&gt; (or &lt;code&gt;fn:duplicates&lt;/code&gt;) function could fill that gap.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Returns values that appear more than once in a sequence. Values are compared according to the rules of the &lt;code&gt;fn:distinct-values&lt;/code&gt; function.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:duplicate-values(
  $values     as xs:anyAtomicType*,
  $collation  as xs:string?        := ()
) as xs:anyAtomicType*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Use Case&lt;/h3&gt;
&lt;p&gt;Find the values of duplicate IDs in a sequence:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $ids := duplicate-values(//@id)
where exists($ids)
return error((), 'Duplicate IDs found: ' || string-join($ids, ', '))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;p&gt;Query | Result
--- | ---
&lt;code&gt;fn:duplicate-values((1, '2', 3.0))&lt;/code&gt; | &lt;em&gt;empty sequence&lt;/em&gt;
&lt;code&gt;fn:duplicate-values(('id1', 'id10', 'id1'))&lt;/code&gt; | &lt;code&gt;id1&lt;/code&gt;
&lt;code&gt;fn:duplicate-values((1, 1 to 2, 1 to 3))&lt;/code&gt; | &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;
&lt;code&gt;fn:duplicate-values((1, 1.0, 1e0))&lt;/code&gt; | &lt;code&gt;1&lt;/code&gt; (as with &lt;code&gt;fn:distinct-values&lt;/code&gt;, items may be of different type)
&lt;code&gt;fn:duplicate-values(1 to 1000000000000000000)&lt;/code&gt; | &lt;em&gt;empty sequence&lt;/em&gt;
&lt;code&gt;fn:duplicate-values(())&lt;/code&gt; | &lt;em&gt;empty sequence&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Equivalent Expression&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $group in $values
group by $value := $group (: collation 'value of $collation' :)
where count($group) &amp;gt; 1
return $value
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Advantages vs. Drawbacks&lt;/h3&gt;
&lt;p&gt;+ simple and intuitive to understand as proposed
+ behavior analogous to &lt;code&gt;distinct-values&lt;/code&gt;
– narrow focus (similar as &lt;code&gt;distinct-values&lt;/code&gt;)
– “yet another convenience function”&lt;/p&gt;
&lt;p&gt;Maybe it boils down to if we want to have more easy-to-use convenience functions, or if we rather wish to keep the set of functions limited.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #122 created</title>
   <pubDate>Tue, 9 Aug 2022 12:20:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/122</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-122</guid>
   <description>&lt;div&gt;&lt;p&gt;Support general union sequence types&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;Use Case&lt;/h1&gt;
&lt;p&gt;There are a number of cases where it is beneficial to define a type more precisely (specifically in parameters and return types) as a union of item or sequence types, for example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a binary type over &lt;code&gt;xs:hexBinary&lt;/code&gt; and &lt;code&gt;xs:base64Binary&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;an element that accepts &lt;code&gt;ol&lt;/code&gt; or &lt;code&gt;ul&lt;/code&gt; html list element names;&lt;/li&gt;
&lt;li&gt;an options parameter that accepts strings (&lt;code&gt;xs:string*&lt;/code&gt;) an element (&lt;code&gt;element(options)&lt;/code&gt;) or a map;&lt;/li&gt;
&lt;li&gt;a function that takes JSON types (map, array, xs:integer, xs:decimal, xs:string).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are a number of MarkLogic APIs that make use of this. Several EXPath and EXQuery specifications can take advantage of this. I've also used this in my XQuery IntelliJ plugin when defining vendor APIs that have changed over the different versions.&lt;/p&gt;
&lt;h1&gt;Examples&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;(: BaseX API change in 8.5 :)
declare function archive:options($archive as xs:base64Binary)
     as (element(archive:options) | map(*)) external;

declare function html:list($list as (element(ol) | element(ul))) { ... };

(: https://docs.marklogic.com/cts:classify -- MarkLogic defines this as `(element() | map:map)?` :)
declare function cts:classify($data-nodes as node()*,
                              $classifier as element(cts:classifier),
                              $options as (element()? | map:map?))
     as element(cts:label)* external;

(: https://docs.marklogic.com/cts:search :)
declare function cts:search($expression as node()*,
                            $query as cts:query?,
                            $options as (cts:order* | xs:string*))
     as node()* external;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Existing Support&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://qt4cg.org/branch/master/xquery-40/xquery-40.html#id-local-union-types"&gt;Local Union Types&lt;/a&gt; -- This handles support for unions over atomic types.&lt;/li&gt;
&lt;li&gt;https://github.com/qt4cg/qtspecs/issues/23 -- This provides a more concise syntax for unions over element or attribute names.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/xquery-semantics/#doc-fs-Type"&gt;Types&lt;/a&gt; -- The Formal Semantics specification defines union types.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rhdunn.github.io/xquery-intellij-plugin/specifications/XQuery%20IntelliJ%20Plugin%20XQuery.html#2126-sequence-types"&gt;Sequence Type Union&lt;/a&gt; -- This is the definition in my XQuery IntelliJ plugin.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: Due to &lt;code&gt;SequenceTypeUnion&lt;/code&gt; being present in typeswitch expressions XQuery implementations will have existing code to handle matching these unioned types.&lt;/p&gt;
&lt;h1&gt;Syntax&lt;/h1&gt;
&lt;h2&gt;3.4 Sequence Types&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;SequenceTypeUnion ::= SequenceType  ("|"  SequenceType)*
SequenceType ::= EmptySequenceType | (ItemType OccurrenceIndicator?) | ParenthesizedSequenceType
EmptySequenceType ::= "empty-sequence" "(" ")"
ParenthesizedSequenceType ::= "(" SequenceTypeUnion ")"
ItemType ::= AnyItemTest | TypeName | KindTest | FunctionTest | MapTest | ArrayTest |
             AtomicOrUnionType | RecordTest | LocalUnionType | EnumerationType
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Note: &lt;code&gt;SequenceTypeUnion&lt;/code&gt; is an existing BNF symbol used in typeswitch expressions that is unchanged in this issue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;3.6 Item Types&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ItemTypeUnion ::= ItemType  ("|"  ItemType)*
ParenthesizedItemType ::= "("  ItemTypeUnion  ")"
ParenthesizableItemType ::= ItemType | ParenthesizedItemType
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Note: &lt;code&gt;ItemTypeUnion&lt;/code&gt; mirrors &lt;code&gt;SequenceTypeUnion&lt;/code&gt;, allowing the non-sequence unions to be used in the contexts where only item types are allowed. Implementations can make use of the &lt;code&gt;SequenceTypeUnion&lt;/code&gt; logic after the syntax/parser validates the item type restriction in those contexts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Note: An alternative to this -- in order to minimize grammar changes -- would be to replace the &lt;code&gt;ItemType&lt;/code&gt; with an &lt;code&gt;ItemTypeBase&lt;/code&gt; symbol (or appropriately named alternative), and then define &lt;code&gt;ItemType&lt;/code&gt; accordingly:
&lt;code&gt;ItemTypeBase ::= AnyItemTest | TypeName | KindTest | ...&lt;/code&gt;
&lt;code&gt;ItemTypeUnion ::= ItemTypeBase  ("|"  ItemTypeBase)*&lt;/code&gt;
&lt;code&gt;ItemType ::= ItemTypeBase | ParenthesizedItemType&lt;/code&gt;
&lt;code&gt;SequenceType ::= EmptySequenceType | (ItemTypeBase OccurrenceIndicator?) | ParenthesizedSequenceType&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Notes: If &lt;code&gt;ItemType&lt;/code&gt; is changed to &lt;code&gt;ParenthesizableItemType&lt;/code&gt;, these are the other areas in the current XPath/XQuery 4.0 grammar that need changing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;ContextItemDecl ::= "declare"  "context"  "item"  ("as"  ParenthesizableItemType)?
                    ((":="  VarValue)  |  ("external"  (":="  VarDefaultValue)?))
ItemTypeDecl ::= "item-type" EQName "as" ParenthesizableItemType
TypedMapTest ::= "map" "(" ParenthesizableItemType "," SequenceType ")"
LocalUnionType ::= "union" "(" ParenthesizableItemType ("," ParenthesizableItemType)* ")"
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Text&lt;/h1&gt;
&lt;h2&gt;4.22.2 Typeswitch&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;effective case&lt;/em&gt; definition is defined as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The effective case in a typeswitch expression is the first case clause in which the value of the operand expression matches a &lt;a href="https://www.w3.org/TR/xquery-31/#doc-xquery31-SequenceType"&gt;SequenceType&lt;/a&gt; in the &lt;a href="https://www.w3.org/TR/xquery-31/#doc-xquery31-SequenceType"&gt;SequenceTypeUnion&lt;/a&gt; of the case clause, using the rules of &lt;a href="https://www.w3.org/TR/xquery-31/#dt-sequencetype-matching"&gt;SequenceType matching&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In order to make that fit this proposal, the wording should be updated to something like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The effective case in a typeswitch expression is the first case clause in which the value of the operand expression matches the &lt;a href="https://www.w3.org/TR/xquery-31/#doc-xquery31-SequenceType"&gt;SequenceTypeUnion&lt;/a&gt; of the case clause, using the rules of &lt;a href="https://www.w3.org/TR/xquery-31/#dt-sequencetype-matching"&gt;SequenceType matching&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;3.7.2 The judgement subtype-itemtype(A, B)&lt;/h2&gt;
&lt;p&gt;Section (2) &lt;em&gt;Conditions for atomic and union types:&lt;/em&gt; should add the following rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt; is an &lt;code&gt;ItemTypeUnion&lt;/code&gt; in the form &lt;code&gt;(T1 | T2 | ...)&lt;/code&gt; and every type &lt;code&gt;T&lt;/code&gt; in (&lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;T2&lt;/code&gt;, ...) satisfies &lt;code&gt;subtype-itemType(T, B)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;B&lt;/code&gt; is an &lt;code&gt;ItemTypeUnion&lt;/code&gt; in the form &lt;code&gt;(T1 | T2 | ...)&lt;/code&gt; and any type &lt;code&gt;T&lt;/code&gt; in (&lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;T2&lt;/code&gt;, ...) satisfies &lt;code&gt;subtype-itemType(A, T)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;3.7.1 The judgement subtype(A, B)&lt;/h2&gt;
&lt;p&gt;The first paragraph in this section shall be replaced by:&lt;/p&gt;
&lt;p&gt;The judgement &lt;code&gt;subtype(A, B)&lt;/code&gt; determines if the &lt;a href="https://qt4cg.org/branch/master/xquery-40/xquery-40-diff.html#dt-sequence-type"&gt;sequence type&lt;/a&gt; &lt;code&gt;A&lt;/code&gt; is a &lt;a href="https://qt4cg.org/branch/master/xquery-40/xquery-40-diff.html#dt-subtype"&gt;subtype&lt;/a&gt; of the sequence type &lt;code&gt;B&lt;/code&gt;. &lt;code&gt;A&lt;/code&gt; can either be &lt;code&gt;empty-sequence()&lt;/code&gt;, &lt;code&gt;xs:error&lt;/code&gt;, an &lt;a href="https://qt4cg.org/branch/master/xquery-40/xquery-40-diff.html#doc-xquery40-ItemType"&gt;ItemType&lt;/a&gt;, &lt;code&gt;Ai&lt;/code&gt;, possibly followed by an occurrence indicator, or a &lt;code&gt;SequenceTypeUnion&lt;/code&gt;. Similarly &lt;code&gt;B&lt;/code&gt; can either be &lt;code&gt;empty-sequence()&lt;/code&gt;, &lt;code&gt;xs:error&lt;/code&gt;, an &lt;a href="https://qt4cg.org/branch/master/xquery-40/xquery-40-diff.html#doc-xquery40-ItemType"&gt;ItemType&lt;/a&gt;, &lt;code&gt;Bi&lt;/code&gt;, possibly followed by an occurrence indicator, or a &lt;code&gt;SequenceTypeUnion&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The result of the &lt;code&gt;subtype(A, B)&lt;/code&gt; judgement can be determined as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;A&lt;/code&gt; is a &lt;code&gt;SequenceTypeUnion&lt;/code&gt; in the form &lt;code&gt;(T1 | T2 | ...)&lt;/code&gt; and every type &lt;code&gt;T&lt;/code&gt; in (&lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;T2&lt;/code&gt;, ...) satisfies &lt;code&gt;subtype(T, B)&lt;/code&gt;, then &lt;code&gt;subtype(A, B)&lt;/code&gt; is true.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;B&lt;/code&gt; is a &lt;code&gt;SequenceTypeUnion&lt;/code&gt; in the form &lt;code&gt;(T1 | T2 | ...)&lt;/code&gt; and any type &lt;code&gt;T&lt;/code&gt; in (&lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;T2&lt;/code&gt;, ...) satisfies &lt;code&gt;subtype(A, T)&lt;/code&gt;, then &lt;code&gt;subtype(A, B)&lt;/code&gt; is true.&lt;/li&gt;
&lt;li&gt;Otherwise, the result of the subtype(A, B) judgement can be determined from the table below, which makes use of the auxiliary judgement subtype-itemtype(Ai, Bi) defined in &lt;a href="https://qt4cg.org/branch/master/xquery-40/xquery-40-diff.html#id-itemtype-subtype"&gt;3.7.2 The judgement subtype-itemtype(A, B) &lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #103 closed</title>
   <pubDate>Tue, 9 Aug 2022 09:24:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/103</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-103</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:all, fn:some&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #121 created</title>
   <pubDate>Mon, 8 Aug 2022 19:58:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/121</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-121</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:nl, fn:tab, fn:cr&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The most popular custom functions in BaseX, and the most boring ones, allow users to insert new line and tab characters. It would be nice to see official variants added to the spec:&lt;/p&gt;
&lt;p&gt;Function | Returned character
--- | ---
&lt;code&gt;fn:nl() as xs:string&lt;/code&gt; | end of line (&lt;code&gt;&amp;amp;#10;&lt;/code&gt;, &lt;code&gt;&amp;amp;NewLine;&lt;/code&gt;)
&lt;code&gt;fn:tab() as xs:string&lt;/code&gt; | character tabulation (&lt;code&gt;&amp;amp;#9;&lt;/code&gt;, &lt;code&gt;&amp;amp;Tab;&lt;/code&gt;)
&lt;code&gt;fn:cr() as xs:string&lt;/code&gt; | carriage return (&lt;code&gt;&amp;amp;#13;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;The third function can possibly be dropped.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #120 created</title>
   <pubDate>Mon, 25 Jul 2022 13:14:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/120</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-120</guid>
   <description>&lt;div&gt;&lt;p&gt;Typo:  "stremability"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I noticed it in &lt;code&gt;3.5.3.3 Overriding Components from a Used Package&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #119 created</title>
   <pubDate>Sat, 16 Jul 2022 22:25:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/119</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-119</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow a map's key value to be any sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Since being introduced in XSLT 3.0 and later in XPath 3.1 the &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.w3.org/TR/xpath-functions-31/#maps-and-arrays"&gt;map&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; datatype has become a powerful and expressive tool for programming in XPath.&lt;/p&gt;
&lt;p&gt;At present the value of a key of a map can be &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.w3.org/TR/xpath-functions-31/#maps-and-arrays"&gt;"an arbitrary atomic value"&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, thus a sequence of zero or more than one atomic items cannot be used in a map-key specification.&lt;/p&gt;
&lt;p&gt;Besides giving us an almost &lt;code&gt;1 : 1&lt;/code&gt; correspondence to a &lt;code&gt;JSON&lt;/code&gt; object (when used with arrays, which themselves can be thought of as maps) maps are useful for expressing the tabular representation of a function that has one argument of type  &lt;code&gt;xs:anyAtomicType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is not possible using a map to naturally express the tabular representation of a function having two or more (or 0) arguments. While something like this can be done using nested maps as in the example below, this technique is cumbersome and error-prone even when having two arguments, and almost prohibitively difficult when applied to expressing functions with more than 2 arguments.&lt;/p&gt;
&lt;p&gt;Here is how we could express one possible tabular form of the function &lt;code&gt;M**N&lt;/code&gt; (&lt;code&gt;M&lt;/code&gt; to the power of &lt;code&gt;N&lt;/code&gt;), where the two arguments are of type &lt;code&gt;xs:positiveInteger&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $m1 := map {1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5, 6 : 6, 7 : 7, 8 :  8, 9 : 9, 10 :10},
    $m2 := map {1 : 1, 2 : 4, 3 : 9, 4 : 16, 5 : 25, 6 : 36, 7 : 49, 8 : 64, 9 : 81, 10 :100},
    $m3 := map {1 : 1, 2 : 8, 3 : 27, 4 : 64, 5 : 125, 6 : 216, 7 : 343, 8 : 512, 9 : 729, 10 :1000},
    (:  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . :)  
  
    $M := map{ 1: $m1,  2: $m2,  3: $m3 (: ... :)  }
  return $M(3)(4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here evaluating &lt;code&gt;$M(3)(4)&lt;/code&gt; produces the value &lt;code&gt;4**3&lt;/code&gt; (&lt;code&gt;4&lt;/code&gt; to the power of &lt;code&gt;3&lt;/code&gt;), that is:
&lt;code&gt;64&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;This proposal is to expand the allowed value-space for a key of a map to any sequence.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thus one will be able to write:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $M := map{ (2, 2) : 4, (3, 2) : 9, (: . . . :)
               (2, 3) : 8, (3, 3) : 27 (: . . . :)
}
 return
    $M((2, 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And evaluating this returns the correct result &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Possible implementation&lt;/strong&gt;:
The implementation is very straightforward: just use in &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-same-key"&gt;op:same-key&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; as comparison function an improvement of &lt;strong&gt;&lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-deep-equal"&gt;&lt;code&gt;fn:deep-equal()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;, which has similar behavior, but never throws errors, is context-free, error-free and transitive. Due to lack of fantasy I called this function &lt;strong&gt;&lt;code&gt;deep-equal-safe()&lt;/code&gt;&lt;/strong&gt; and its description is &lt;strong&gt;&lt;a href="https://github.com/dnovatchev/FXSL-XSLT2/blob/master/fn-deep-equal-safe.pdf"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:
No new datatypes and no changes to the XDM are necessary in order to implement this proposal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #118 created</title>
   <pubDate>Tue, 21 Jun 2022 16:38:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/118</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-118</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:match - can we do better&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The draft spec proposes an instruction xsl:match to test whether a given item matches a specified pattern, returning a boolean.&lt;/p&gt;
&lt;p&gt;While this fills a gap, it's rather clumsy, especially because instructions that return atomic values typically have to be wrapped in xsl:variable or xsl:function to be useful.&lt;/p&gt;
&lt;p&gt;It might be better to try and make xsl:apply-templates work more nicely as a function.&lt;/p&gt;
&lt;p&gt;The current &lt;code&gt;&amp;lt;xsl:match select="N" match="P"/&amp;gt;&lt;/code&gt; is roughly equivalent to &lt;code&gt;&amp;lt;xsl:apply-template mode="test-pattern" select="N"/&amp;gt;&lt;/code&gt; where&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:mode name="test-pattern" as="xs:boolean"&amp;gt;
   &amp;lt;xsl:template match="P"&amp;gt;&amp;lt;xsl:sequence select="true()"/&amp;gt;&amp;lt;/xsl:template&amp;gt;
   &amp;lt;xsl:template match="."&amp;gt;&amp;lt;xsl:sequence select="false()"/&amp;gt;&amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:mode&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can we improve this?&lt;/p&gt;
&lt;p&gt;(a) we could allow &lt;code&gt;&amp;lt;xsl:mode name="test-pattern" function-name="my:test"/&amp;gt; &lt;/code&gt; so that a function call &lt;code&gt;my:test(XXX)&lt;/code&gt; is equivalent to the instruction &lt;code&gt;&amp;lt;xsl:apply-templates mode="test-pattern" select="X"/&amp;gt;&lt;/code&gt;: that is, each mode can declare the name of a function whose effect is to apply templates in that mode (with no parameters).&lt;/p&gt;
&lt;p&gt;(b) we could allow a &lt;code&gt;select&lt;/code&gt; attribute on xsl:template to provide a quick way of returning the result, avoiding xsl:sequence.&lt;/p&gt;
&lt;p&gt;(c) we could allow &lt;code&gt;&amp;lt;xsl:mode on-no-match="return false()"/&amp;gt;&lt;/code&gt; to avoid the fallback template rule.&lt;/p&gt;
&lt;p&gt;The use-case would then become&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:mode name="test-pattern" as="xs:boolean" on-no-match="return false()" function-name="my:test"&amp;gt;
   &amp;lt;xsl:template match="P" select="true()"/&amp;gt;
&amp;lt;/xsl:mode&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #117 created</title>
   <pubDate>Tue, 21 Jun 2022 16:16:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/117</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-117</guid>
   <description>&lt;div&gt;&lt;p&gt;Downcasting (relabelling) in the coercion rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The proposed coercion rules (aka function conversion rules) permitting down-casting (aka "relabelling") introduce a backwards incompatibility.&lt;/p&gt;
&lt;p&gt;For example in XSLT3 test case as-1711 we have&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;xslt:variable name="var1" select="/doc-schemaas/elem-NMTOKEN" as="xs:token"/&amp;gt;

   &amp;lt;xslt:template match="/doc-schemaas"&amp;gt;
            &amp;lt;xslt:value-of select="$var1 instance of xs:NMTOKEN"/&amp;gt;
   &amp;lt;/xslt:template&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where the result of atomising elem-NMTOKEN is of type xs:NMTOKEN.&lt;/p&gt;
&lt;p&gt;Under the new rules this is "relabelled" as xs:token, causing the "instance of" test to return false, where in XSLT 2.0/3.0 it returned true.&lt;/p&gt;
&lt;p&gt;I think the relabelling rules should probably be amended so that if the supplied value is already an instance of the required type, no relabelling takes place - it retains its existing type.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #116 created</title>
   <pubDate>Thu, 19 May 2022 09:52:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/116</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-116</guid>
   <description>&lt;div&gt;&lt;p&gt;Clarify the fn:transform function() wrt multiple top-level elements&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;fn:transform&lt;/code&gt; function should clarify the expected behavior when the stylesheet node passed in has two top-level &lt;code&gt;xsl:stylesheet&lt;/code&gt; elements.&lt;/p&gt;
&lt;p&gt;Personally, I think this should be an error.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #115 created</title>
   <pubDate>Wed, 4 May 2022 18:55:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/115</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-115</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup operator on arrays of maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've been converting the XMark data files and queries from XML to JSON.&lt;/p&gt;
&lt;p&gt;Here's part of Q20 in its XML form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;preferred&amp;gt;
  {count (/site/people/person/profile[@income &amp;gt;= 100000])}
 &amp;lt;/preferred&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which becomes this, when we access the JSON form of the data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;preferred&amp;gt;
  {count (?people?*?profile[?income &amp;gt;= 100000])}
 &amp;lt;/preferred&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can get worse, for example Q16 has&lt;/p&gt;
&lt;p&gt;&lt;code&gt;exists ($a?annotation?description?parlist?*?parlist?*?text?*?emph?*?keyword?*?("§")) &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These paths arise because a structured derived from JSON often includes map entries whose values are arrays.&lt;/p&gt;
&lt;p&gt;It's very hard to get these paths right, and it's hard to produce good diagnostics when you get them wrong.&lt;/p&gt;
&lt;p&gt;I'd like to allow the &lt;code&gt;?*?&lt;/code&gt; "operators" to be replaced with a simple "?". This isn't difficult. Currently the rules for the lookup operator say:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;If the context item is an array:
If the [KeySpecifier] is an NCName, the [UnaryLookup](https://www.w3.org/TR/xpath-31/#doc-xpath31-UnaryLookup) operator raises a type error 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All that's needed is to change this to say that if the context item is an array, and the KeySpecifier is an NCName, then the array must be an array of maps and the lookup is applied to these maps.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #114 created</title>
   <pubDate>Wed, 4 May 2022 11:07:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/114</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-114</guid>
   <description>&lt;div&gt;&lt;p&gt;[fo] array:index-where&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There is a need for an &lt;code&gt;array:index-where()&lt;/code&gt; function to operate on arrays in the same way as &lt;code&gt;fn:index-where()&lt;/code&gt; operates on sequences/&lt;/p&gt;
&lt;p&gt;Use case: consider XMark query Q4, which uses the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(: Q4. List the reserves of those open auctions where a
       certain person issued a bid before another person. :)

for    $b in /site/open_auctions/open_auction
where  $b/bidder/personref[@person="person18829"] &amp;lt;&amp;lt;
            $b/bidder/personref[@person="person10487"]
return &amp;lt;history&amp;gt;{ $b/reserve }&amp;lt;/history&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the bidders held in an array like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     "bidders": [
        { "increase":18, "time":"13:16:15", "date":"2001-06-13", "personref":"person0" },
        { "increase":12, "time":"11:29:44", "date":"2000-09-18", "personref":"person23" },
        { "increase":18, "time":"10:23:59", "date":"1998-01-07", "personref":"person14" },
        { "increase":4.5, "time":"14:00:39", "date":"2001-07-10", "personref":"person16" }
      ],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the best way of expressing this query seems to be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for    $b in ?open_auctions?*
let    $bidders := $b?bidders
where  array:index-where($bidders, -&amp;gt;($bidder) {$bidder?personref="person18829"}) &amp;lt;
            array:index-where($bidders, -&amp;gt;($bidder) {$bidder?personref="person10487"})
return &amp;lt;history&amp;gt;{ $b?reserve }&amp;lt;/history&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #113 created</title>
   <pubDate>Wed, 4 May 2022 07:53:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/113</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-113</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt] Constructing arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've felt for a while that the current proposal for xsl:array is messy. It's both semantically and syntactically messy with it's &lt;code&gt;composite=yes|no&lt;/code&gt; attribute and the &lt;code&gt;xsl:array-member&lt;/code&gt; child. I've been using it doing XML to JSON conversion and you get a lot of stuff like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="closed_auctions"&amp;gt;
      &amp;lt;xsl:array&amp;gt;
         &amp;lt;xsl:for-each select="closed_auction"&amp;gt;
            &amp;lt;xsl:map&amp;gt;
               &amp;lt;xsl:apply-templates select="*"/&amp;gt;
            &amp;lt;/xsl:map&amp;gt;
         &amp;lt;/xsl:for-each&amp;gt;
      &amp;lt;/xsl:array&amp;gt;
   &amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Almost invariably, xsl:array has xsl:for-each or xsl:apply-templates as a child. So how about allowing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="closed_auctions"&amp;gt;
         &amp;lt;xsl:for-each select="closed_auction" form="array"&amp;gt;
            &amp;lt;xsl:map&amp;gt;
               &amp;lt;xsl:apply-templates select="*"/&amp;gt;
            &amp;lt;/xsl:map&amp;gt;
         &amp;lt;/xsl:for-each&amp;gt;
   &amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The semantics here is that xsl:for-each delivers an array in which there is one member for each item in the input sequence. This cleanly eliminates the need for &lt;code&gt;composite=yes|no&lt;/code&gt; and &lt;code&gt;xsl:array-member&lt;/code&gt;: you can create a "composite" array using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each select="1 to 5" form="array"&amp;gt;
   &amp;lt;xsl:sequence select="., .+1"/&amp;gt;
&amp;lt;/xsl:for-each&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which delivers &lt;code&gt;[(1,2), (2,3), (3,4), (4,5), (5,6)]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The attribute &lt;code&gt;form="array"&lt;/code&gt; can also appear on &lt;code&gt;xsl:apply-templates&lt;/code&gt; and &lt;code&gt;xsl:for-each-group&lt;/code&gt;. In the latter case each group produces one member of the resulting array:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each-group select="0 to 9" group-adjacent="0 idiv 5" form="array"&amp;gt;
   &amp;lt;xsl:sequence select="current-group()"/&amp;gt;
&amp;lt;/xsl:for-each-group&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;delivers &lt;code&gt;[(0,1,2,3,4), (5,6,7,8,9)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The attribute &lt;code&gt;form="sequence"&lt;/code&gt; is the default and specifies the current behaviour.&lt;/p&gt;
&lt;p&gt;I've been wondering also about extending this to &lt;code&gt;form="map"&lt;/code&gt;. In most cases when you construct a map from an input sequence, both the key and the value are functions of the input item. So instead of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="regions"&amp;gt;
      &amp;lt;xsl:map&amp;gt;
         &amp;lt;xsl:for-each select="*"&amp;gt;
            &amp;lt;xsl:map-entry key="name()"&amp;gt;
               &amp;lt;xsl:array&amp;gt;
                  &amp;lt;xsl:for-each select="item"&amp;gt;
                     &amp;lt;xsl:array-member&amp;gt;
                        &amp;lt;xsl:apply-templates select="."/&amp;gt;
                     &amp;lt;/xsl:array-member&amp;gt;
                  &amp;lt;/xsl:for-each&amp;gt;
               &amp;lt;/xsl:array&amp;gt;
            &amp;lt;/xsl:map-entry&amp;gt;
         &amp;lt;/xsl:for-each&amp;gt;
      &amp;lt;/xsl:map&amp;gt;
   &amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we could write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="regions"&amp;gt;
         &amp;lt;xsl:for-each select="*" form="map" key="name()"&amp;gt;
                  &amp;lt;xsl:apply-templates select="item" form="array"/&amp;gt;
         &amp;lt;/xsl:for-each&amp;gt;
 &amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which strikes me as an improvement...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #112 created</title>
   <pubDate>Wed, 30 Mar 2022 15:28:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/112</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-112</guid>
   <description>&lt;div&gt;&lt;p&gt;Abbreviate `map:function($someMap)` to `$someMap?function()`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The title says it all.&lt;/p&gt;
&lt;p&gt;We already have a proposal to be able to have (when &lt;code&gt;$m&lt;/code&gt; is a map and &lt;code&gt;$x&lt;/code&gt; is a variable of type &lt;code&gt;xs:string&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;$m?$x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;instead of: &lt;code&gt;map:get($m, $x)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The next logical step is to allow the RHS of the &lt;code&gt;?&lt;/code&gt; operator to be any of the standard functions in the namespace "http://www.w3.org/2005/xpath-functions/map" (with the standard prefix "map:".&lt;/p&gt;
&lt;p&gt;Thus, instead of &lt;code&gt;map:keys($m)&lt;/code&gt;  or &lt;code&gt;$m =&amp;gt; map:keys()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One would simply write:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$m?keys()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #111 created</title>
   <pubDate>Fri, 4 Feb 2022 23:02:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/111</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-111</guid>
   <description>&lt;div&gt;&lt;p&gt;FLWOR tracing&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've been developing a complex query involving grouping, windowing, and sorting, and finding it very hard to debug.&lt;/p&gt;
&lt;p&gt;I propose a new clause that can be included anywhere in a FLWOR expression&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TraceClause ::= "trace" Expr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;for example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $item in //items
trace "input: ", $item/@id
group by $sku := $item/sku
trace "group: ", data($sku), " items: ", data($item/@id)
return count($item) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with fn:trace(), the precise output is implementation-dependent.&lt;/p&gt;
&lt;p&gt;The trace clause passes the incoming tuple stream unchanged to the next clause in the pipeline, with the side effect of evaluating an expression in the context of the variables defined in that tuple stream and displaying the value of the expression in an implementation-defined way.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #110 created</title>
   <pubDate>Sun, 23 Jan 2022 11:20:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/110</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-110</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;JSON templates&lt;/h3&gt;
&lt;p&gt;JSON templates are introduced as a convenient way of constructing maps and arrays, especially for use in a stylesheet designed to deliver serialised JSON output (but not restricted to that use case).&lt;/p&gt;
&lt;p&gt;A new kind of XPath expression called a JSON template is introduced. The following specification is informal.&lt;/p&gt;
&lt;p&gt;The syntax is&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json-template ::= "[#" parameterized-json "#]"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The syntax of &lt;code&gt;parameterised-json&lt;/code&gt; is a modified form of the JSON syntax.&lt;/p&gt;
&lt;p&gt;There are three modifications:&lt;/p&gt;
&lt;p&gt;(a) single quotes can be used instead of double-quotes&lt;/p&gt;
&lt;p&gt;(b) wherever a JSON value is permitted (including a string used as a key), we allow a parenthesised XPath expression&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ "sum": ($x + $y),
  "difference": ($x - $y),
  ($extra) : true }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The rules for what the XPath expression may return are essentially the same as the JSON serialization rules, except that if the value is a node, it is atomised rather than serialized.&lt;/p&gt;
&lt;p&gt;(c) within an array, wherever an array element may appear, we allow the syntax "*(" expression ")") to deliver a sequence of array elements. For example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[ 1, 2, *(5 to 10)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;returns the array [1, 2, 3, 5, 6, 7, 8, 9, 10]&lt;/p&gt;
&lt;p&gt;Similarly, within an object, wherever a member may appear, we allow the syntax "*(" expression ")") to deliver a sequence of members. The XPath expression must deliver a map or sequence of maps, whose entries are used as the members of the target object. For example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{ "A":1, "B":2, *(//book ! map{isbn : price}) } &lt;/code&gt;
Entries with duplicate keys result in an error.&lt;/p&gt;
&lt;p&gt;Note: an XPath expression appearing within a json-template may of course contain nested json-templates.&lt;/p&gt;
&lt;p&gt;JSON templates can be embedded in XPath using the syntax "[#" parameterized-json "#]", and we also allow them to be embedded in XSLT using the instruction:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:json-template&amp;gt; parameterized-json &amp;lt;/xsl:json-template&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #109 created</title>
   <pubDate>Thu, 20 Jan 2022 20:40:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/109</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-109</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt4] xsl:note for structured documentation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that we add an element &lt;code&gt;xsl:note&lt;/code&gt; whose intended use is for structured documentation.&lt;/p&gt;
&lt;p&gt;The element may appear anywhere and may have any attributes and content, including elements in the XSLT namespace. Any &lt;code&gt;xsl:note&lt;/code&gt; elements in the stylesheet are stripped (together with their attributes and descendants) at the same time as comments and processing instructions are stripped. (Rules such as "xsl:param must come first" or "xsl:apply-imports must be empty" thus apply to the stylesheet AFTER &lt;code&gt;xsl:note&lt;/code&gt; elements are stripped.)&lt;/p&gt;
&lt;p&gt;Traditionally, structured documentation comments have been written in a third-party namespace. This approach has two disadvantages:&lt;/p&gt;
&lt;p&gt;(a) they can only appear in a limited number of places (typically as children of &lt;code&gt;xsl:stylesheet&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;(b) they require an extra namespace to appear on the &lt;code&gt;xsl:stylesheet&lt;/code&gt; element, and this namespace has semantics that affect the stylesheet execution. It even needs to be carried through to run-time, in case someone (for example) tries to cast a dynamic string to a QName.&lt;/p&gt;
&lt;p&gt;The spec would say very little about &lt;code&gt;xsl:note&lt;/code&gt;, except that it is permitted and ignored by the XSLT processor. It might offer some usage suggestions:&lt;/p&gt;
&lt;p&gt;(a) an &lt;code&gt;xsl:note&lt;/code&gt; appearing as the first child of &lt;code&gt;xsl:package&lt;/code&gt; or &lt;code&gt;xsl:stylesheet&lt;/code&gt; should be taken as pertaining to the package or stylesheet as a whole; an &lt;code&gt;xsl:note&lt;/code&gt; appearing anywhere else should be taken as pertaining to the first following sibling element that is not an xsl:note (if there is one)&lt;/p&gt;
&lt;p&gt;(b) third party software that takes account of &lt;code&gt;xsl:note&lt;/code&gt; (for example, a tool that generates documentation) should only recognise xsl:note elements that specify target=XXX where XXX is a string that they decide upon.&lt;/p&gt;
&lt;p&gt;(c) XSLT processors are discouraged from using xsl:note elements to modify the behaviour of the processor in any way, for example in ways that change the output or the performance; they are expressly not allowed to use xsl:note elements to trigger non-conformant behaviour.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #108 created</title>
   <pubDate>Wed, 19 Jan 2022 08:30:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/108</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-108</guid>
   <description>&lt;div&gt;&lt;p&gt;Template match using values of [tunnel] parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It would often be useful to make a template match conditional on the values of the supplied parameters, especially tunnel parameters.&lt;/p&gt;
&lt;p&gt;This is especially the case when matching JSON-derived structures (maps and arrays), as no context information is then available via the ancestor axis.&lt;/p&gt;
&lt;p&gt;Obviously, the parameters are not in scope within the match pattern, and I don't propose to change that. Instead I propose that xsl:param (when used in a template rule) should have a &lt;code&gt;test="expression"&lt;/code&gt; attribute. The expression may refer to the parameter being declared (and to no other parameters or local variables). For the template rule to match, any parameters having a test attribute must be satisfied: specifically, the test expression must have an effective boolean value of true. If no value is supplied for the parameter, then if required="yes" is specified, the template rule does not match; if required="no" is specified, the test is applied to its default value. The focus for evaluating the test expression is absent. The existence of the test has no effect on the priority of the template rule. An error evaluating the test expression means that the template rule does not match.&lt;/p&gt;
&lt;p&gt;For example, this template rule&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="record(long, lat)"&amp;gt;
  &amp;lt;xsl:param name="country" test="$country = 'UK'" tunnel="yes" required="yes"/&amp;gt;
  ....
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;matches only if the tunnel parameter &lt;code&gt;$country&lt;/code&gt; is present with the value "UK".&lt;/p&gt;
&lt;p&gt;In some cases this capability can substitute for modes, except that the values are entirely dynamic.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #107 created</title>
   <pubDate>Tue, 4 Jan 2022 22:01:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/107</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-107</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow self::(a|b|c)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;After an explicit axis specifier (including the abbreviated axis specifier "@", but not including the default axis specifier), allow a composite NodeTest that consists of a |-separated list of NodeTest's in parentheses. For example&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@(id|name)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ancestor::(section|chapter)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;child::(comment()|processing-instruction())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The composite NodeTest matches a node if any of its constituent NodeTest's matches.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #106 created</title>
   <pubDate>Sun, 2 Jan 2022 02:25:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/106</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-106</guid>
   <description>&lt;div&gt;&lt;p&gt;Decorators' support&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Decorators&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;Decorator&lt;/strong&gt; is a tool to wrap (extend/change/modify) the behavior of one or more existing functions without modifying their code.&lt;/p&gt;
&lt;p&gt;There are many cases when &lt;em&gt;&lt;strong&gt;we want to handle a call to a specific function &lt;code&gt;f()&lt;/code&gt; and do some or all of the following&lt;/strong&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Perform some initial action based on the context and on the arguments in the call to &lt;code&gt;f()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Transform the set of the actual arguments on the call to some other set of argument values -- substituted arguments.&lt;/li&gt;
&lt;li&gt;Decide whether or not to invoke &lt;code&gt;f()&lt;/code&gt;, passing to it the actual arguments or the substituted ones, created in the previous step.&lt;/li&gt;
&lt;li&gt;If we invoked the function in the previous step, we could do something with its result.&lt;/li&gt;
&lt;li&gt;Perform some final processing that may (but does not have to) depend on the result of the invocation of &lt;code&gt;f()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Here is a small, typical problem&lt;/strong&gt; that is well handled with decorators:&lt;/p&gt;
&lt;p&gt;We want to have a tool to help us with debugging &lt;em&gt;any&lt;/em&gt; function. When a function is called (and if we are in &lt;em&gt;Debug&lt;/em&gt; mode), this tool will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tell us that a call to the function was performed and will list  the function name and the parameters, passed to the function&lt;/li&gt;
&lt;li&gt;Tell us what the result of the call to the function was&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be able to do such tracing with not just one but with all functions, whose behavior we want to observe.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $trace-decorator := function($debug as xs:boolean, $f as function(*))
    {
      let $theDecorator := function($args as array(*), $kw-args as map(*))
      {
        if($debug)
        then 
          let $func-name := (function-name($f), $kw-args("$funcName"))[1],
            $pre-msg := "Calling function " || $func-name || " with params: " || array:flatten(($args))
            || "," || map:for-each( $kw-args, function($key as xs:anyAtomicType, $val)
                                          {if($key ne "$funcName")
                                            then (" "|| string($key)||": " || string($val))
                                            else ()
                                          }),
            
            $result := $f($args, $kw-args),
            $post-msg := "Got result: " || string($result) || "&amp;amp;#xA;"
           return
             ($pre-msg, $post-msg)
         else $f($args, $kw-args)
      }
      return $theDecorator
    },
    
    $upper := function($args as array(*), $kw-args as map(*))
    {
      let $txt := $args[1]
        return upper-case($txt)
    }
    
    return 
      (
        $trace-decorator(true(), $upper)(["hello"], map{"$funcName" : "$upper"}),
        $trace-decorator(true(), $upper)(["reader"], map{"$funcName" : "$upper"}),
        "=======================================================================",
        $trace-decorator(false(), $upper)(["hello"], map{"$funcName" : "$upper"}),
        $trace-decorator(false(), $upper)(["reader"], map{"$funcName" : "$upper"})
       )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of evaluating the above XPath 3.1 expression is exactly what we wanted to get:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Calling function $upper with params: hello,
Got result: HELLO&lt;/p&gt;
&lt;p&gt;Calling function $upper with params: reader,
Got result: READER&lt;/p&gt;
&lt;p&gt;=======================================================================
HELLO
READER&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, it is possible to write and use decorators even in XPath 3.1 as above. &lt;strong&gt;Then why XPath decorators are as rare as the white peacock&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/147841450-5a8f5e94-db6a-4030-80b9-af17c0966763.jpg" alt="peacock"/&gt;
Photo Via: aboutpetlife.com&lt;/p&gt;
&lt;p&gt;The answer is simple: just try to write even the simplest decorator in XPath 3.1 and you'll know how difficult and error-prone this is.
This is why &lt;strong&gt;several programming languages provide special support for decorators&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Python_syntax_and_semantics#Decorators"&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/a&gt;: &lt;a href="https://www.datacamp.com/community/tutorials/decorators-python"&gt;&lt;strong&gt;&lt;em&gt;decorators&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; are a standard feature of the language.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A standard syntax is provided to declare that a function is being decorated by another function. Composition of multiple decorators is supported.&lt;/li&gt;
&lt;li&gt;There is a standard Python way of getting "&lt;em&gt;any actual arguments&lt;/em&gt;" with which the unknown in advance function (to be decorated) is called.&lt;/li&gt;
&lt;li&gt;There is a standard Python way to call any function passing to it just an array (for its positional arguments) and a map (for its keyword arguments).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://saul-mirone.github.io/a-complete-guide-to-typescript-decorator/"&gt;&lt;strong&gt;Typescript&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A standard syntax is provided to declare that a function is being decorated by another function. Composition of multiple decorators is supported.&lt;/li&gt;
&lt;li&gt;Decorators can be applied not only to methods but also to their parameters (and to classes, constructors, static and instance properties, accessors).&lt;/li&gt;
&lt;li&gt;The actual parameters in calling the manipulated method are accessed in a standard way as a &lt;strong&gt;&lt;em&gt;spread&lt;/em&gt;&lt;/strong&gt; (the opposite of &lt;strong&gt;&lt;em&gt;destructuring&lt;/em&gt;&lt;/strong&gt;). The spread syntax is used both for getting the parameters and in providing them in the call to the manipulated method.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/what-are-decorators-and-how-are-they-used-in-javascript/"&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/a&gt; : Almost the same as in Typescript (above)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;.NET/C#&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/"&gt;&lt;strong&gt;C# Attributes&lt;/strong&gt;&lt;/a&gt;, and in particular &lt;a href="http://www.castleproject.org/projects/dynamicproxy/"&gt;&lt;strong&gt;Dynamic Proxies on the Fly in the Castle project&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;: &lt;strong&gt;&lt;a href="http://perfectjpattern.sourceforge.net/dp-decorator.html"&gt;A PerfectJpattern implementation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Goal of this proposal&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;To provide standard XPath support for decorators, as seen in other languages&lt;/em&gt; (above):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provide syntax for specifying the decoration of a function:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Update rule&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://www.saxonica.com/qt4specs/XP/xpath-40-diff.html#doc-xpath40-FullSignature"&gt;&lt;strong&gt;72&lt;/strong&gt;&lt;/a&gt;] | FullSignature | ::= | "function" "(" ParamList? ")" TypeDeclaration?
-- | -- | -- | --&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;[72] | FullSignature | ::= | ("^"  DecoratorReference)* "function" "(" ParamList? ")" TypeDeclaration?
-- | -- | -- | --&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And add this new rule&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;[NN] | DecoratorReference | ::= |  VarRef ArgumentList? |  FunctionCall
-- | -- | -- | --&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;p&gt;When a decorated function is called, the XPath processor should create from the actual arguments of the call &lt;strong&gt;an array &lt;em&gt;&lt;code&gt;$args&lt;/code&gt;&lt;/em&gt; that holds all positionally-specified arguments&lt;/strong&gt; in the call, and &lt;strong&gt;a map &lt;em&gt;&lt;code&gt;$kw-args&lt;/code&gt;&lt;/em&gt; that will hold the name - value pairs of all keyword-arguments&lt;/strong&gt; in the call. Then the decorator will be called with these two arguments: &lt;strong&gt;&lt;code&gt;($args, $kw-args)&lt;/code&gt;&lt;/strong&gt; in addition to any of its own positional arguments (if it has any).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;^decorator-name $funcName&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;is converted behind the scenes by the XPath engine to:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $funcName := decorator-name($funcName)
  return
  ...remaining code in the same scope
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This redefining of the inline-function name allows us to reference the result of the decoration using the same function item name (&lt;code&gt;$funcName&lt;/code&gt;) in the remainder of the current scope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When any function is called just with two arguments: &lt;strong&gt;&lt;code&gt;($args, $kw-args)&lt;/code&gt;&lt;/strong&gt; (such as from a decorator), the XPath processor must perform everything necessary in order to call the function in the way it expects to be called. For this purpose, &lt;strong&gt;a new overload of  &lt;a href="https://www.saxonica.com/qt4specs/FO/Overview-diff.html#func-apply"&gt;&lt;code&gt;fn:apply()&lt;/code&gt;&lt;/a&gt; is defined&lt;/strong&gt; (&lt;a href="https://github.com/qt4cg/qtspecs/issues/146"&gt;proposed separately here&lt;/a&gt;):&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;fn:apply&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;($function as function(*), $array as array(*), $map as map(*)) as item()*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The result&lt;/strong&gt; of the function is obtained by creating and invoking the same dynamic call that would be the result of  a  function-call to &lt;code&gt;$function&lt;/code&gt; with (positional) arguments taken from the members of the supplied array &lt;code&gt;$array&lt;/code&gt; and (keyword arguments) taken from &lt;code&gt;$map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The effect of calling&lt;/strong&gt; &lt;code&gt;fn:apply($f, [$a, $b, $c, ...], map{"k1" : v1, "k2" : v2, ...})&lt;/code&gt; is the same as the effect of the dynamic function call resulting from &lt;code&gt;$function($a, $b, $c, ...., $k1 = v1, $k2 = v2, ...)&lt;/code&gt;. The function conversion rules are applied to the supplied arguments in the usual way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;With this support added to the language, we simply write:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $f := $trace-decorator(true()) ( upper-case#1 )
  return
    ("hello", "reader") ! $f()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which produces the same correct result:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Calling function upper-case with params: hello,
Got result: HELLO&lt;/p&gt;
&lt;p&gt;Calling function upper-case with params: reader,
Got result: READER&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $f := $trace-decorator(false())  ( upper-case#1 )
  return
    ("hello", "reader") ! $f()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Produces just the normal result of executing the original function &lt;code&gt;$f()&lt;/code&gt;, as the $debug argument is &lt;code&gt;false()&lt;/code&gt; here&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HELLO
READER&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;When we decorate an inline-function&lt;/strong&gt; (say the $upper from the initial example), we can even simply write:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;^$trace-decorator(true())  $upper,
.   .   .   .   .
  return
    ("hello", "reader") ! $upper()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to get again the the correct result:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Calling function $upper with params: hello,
Got result: HELLO&lt;/p&gt;
&lt;p&gt;Calling function $upper with params: reader,
Got result: READER&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Do note&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The decorator and the manipulated function are completely independent of each other and may be written long before / after each other and by different people who may not be aware of each other.&lt;/li&gt;
&lt;li&gt;They can reside in different code files.&lt;/li&gt;
&lt;li&gt;We can have a library of useful decorator functions and can append them to decorate any wanted function.&lt;/li&gt;
&lt;li&gt;As the updated &lt;strong&gt;&lt;em&gt;&lt;code&gt;Rule 72&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; above suggests, &lt;strong&gt;one can specify a chain of decorators&lt;/strong&gt; manipulating a specific function. The inner-most decorator is passed to the next-inner-most-decorator, and so on..., which is passed ... to the outer-most decorator. &lt;strong&gt;Decorating is right-associative&lt;/strong&gt;.
The different decorators specified don't know about each other, are completely independent and may be written by different authors at any times and reside in different, unrelated function libraries.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #105 created</title>
   <pubDate>Sun, 26 Dec 2021 17:54:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/105</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-105</guid>
   <description>&lt;div&gt;&lt;p&gt;Maps with Infinite Number of Keys: Total Maps and Decorated maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;&lt;strong&gt;Maps with Infinite Number of Keys: Total Maps and Decorated maps&lt;/strong&gt;&lt;/h1&gt;
&lt;h3&gt;&lt;strong&gt;1. Total Maps&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Maps have become one of the most useful tools for creating readable, short and efficient XPath code. However, a significant limitation of this datatype is that a &lt;code&gt;map&lt;/code&gt; can have only a finite number of keys. In many cases we might want to implement a map that can have more than a fixed, finite number of arguments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here is a typical example&lt;/strong&gt; (&lt;em&gt;Example 1&lt;/em&gt;):&lt;br/&gt;
A hotel charges per night differently, depending on how long the customer has been staying. For the first night the price is $100, for the second $90, for the third $80 and for every night after the third $75. We can immediately try to express this pricing data as a map, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;map {
1 : 100,
2 : 90,
3 : 80
(:  ??? How to express the price for all eventual next nights? :)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could, if we had a special key, something like "TheRest", which means any other key-value, which is not one of the already specified key-values.&lt;/p&gt;
&lt;p&gt;Here comes the first part of this proposal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;We introduce a special key value, which, when specified in a map means: any possible key, different from the other keys, specified for the map&lt;/em&gt;&lt;/strong&gt;. For this purpose we use the string: &lt;strong&gt;&lt;code&gt;"\"&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Adding such a "&lt;em&gt;discard symbol&lt;/em&gt;" makes the map a &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Partial_function"&gt;total function&lt;/a&gt;&lt;/strong&gt; on the set of any possible XPath atomic items.&lt;/p&gt;
&lt;p&gt;Now we can easily express the hotel-price data as a map:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;map {
1 : 100,
2 : 90,
3 : 80
'\' : 75
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another useful &lt;em&gt;Example (2)&lt;/em&gt; is that now we can express any XPath item, or sequence of items as a map. Let's do this for a simple constant, like π:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $π := map {
'\' : math:pi()
}
 return $π?*   (: produces 3.141592653589793  :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the map above is empty (has no regular keys) and specifies that for any other key-value &lt;code&gt;$k&lt;/code&gt; it holds that &lt;code&gt;$π($k) eq math:pi()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Going further, we can express even the empty sequence (&lt;em&gt;Example 3&lt;/em&gt;) as the following map:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $Φ := map {
'\' : ()
}
 return $Φ?*   (: produces the empty sequence :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this representation of the empty sequence, we can provide a solution for the &lt;strong&gt;&lt;a href="https://xmlcom.slack.com/archives/C011NLXE4DU/p1616167871037100"&gt;"Forgiveness problem"&lt;/a&gt;&lt;/strong&gt; raised by Jarno Jelovirta in the XML.Com &lt;code&gt;#general&lt;/code&gt; channel in &lt;em&gt;March 2021&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;This expression will raise an error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;[map {"k0": 1}, map{"k0": [1, 2, 3]}]?*?("k0")?*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;[XPTY0004] Input of lookup operator must be map or array: 1.&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To prevent ("forgive", thus "Forgiveness Problem") the raising of such errors we could accept the rule that in XPath 4.0 any expression that evaluates to something different than a map or an array, could be coerced to the following map, which returns the empty sequence as the corresponding value for any key requested in a lookup:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;map {
'\' : ()
}  (: produces the empty sequence  for any lookup:)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;To summarize, what we have achieved so far&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The map constructed in Example 1 is now a &lt;strong&gt;total function&lt;/strong&gt; over the domain &lt;strong&gt;ℕ&lt;/strong&gt; of all natural numbers. Any map with a &lt;code&gt;"\"&lt;/code&gt; (discard key) is a total function over the value-space of all &lt;code&gt;xs:anyAtomicType&lt;/code&gt; values&lt;/li&gt;
&lt;li&gt;We can represent any XPath 4.0 item or sequence in an easy and intuitive way as a map.&lt;/li&gt;
&lt;li&gt;It is now straight-forward to solve the "Forgiveness Problem" by introducing the natural and intuitive rule for coercing any non-map value to the empty map, and this allows to use anywhere the lookup operator &lt;strong&gt;&lt;code&gt;?&lt;/code&gt;&lt;/strong&gt; without raising an error.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;h3&gt;&lt;strong&gt;2. Decorated Maps&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Although we already achieved a lot in the first part, there are still use-cases for which we don't have an adequate map  solution:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In the example (1) of expressing the hotel prices, we probably shouldn't get &lt;code&gt;$75&lt;/code&gt; for a key such as -1 or even &lt;code&gt;"blah-blah-blah"&lt;/code&gt;
But the XPath 4.0 language specification allows any atomic values to be possible keys and thus to be the argument to the &lt;code&gt;map:get()&lt;/code&gt; function. &lt;strong&gt;If we want validation for the actually-allowed key-values for a specific given map, we need to have additional processing/functionality.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With a discard symbol we can express only one infinite set of possible keys and group them under the same corresponding value. However, &lt;strong&gt;there are problems, the data for which needs several infinite sets of key-values to be projected onto different values&lt;/strong&gt;. Here is one such problem:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Imagine we are the organizers of a very simple lottery, selling many millions of tickets, identified by their number, which is a unique natural number.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We want to grant prizes with this simple strategy.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Any ticket number multiple of &lt;strong&gt;10&lt;/strong&gt; wins &lt;strong&gt;$10&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Any ticket number multiple of &lt;strong&gt;100&lt;/strong&gt; wins &lt;strong&gt;$20&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Any ticket number multiple of &lt;strong&gt;1000&lt;/strong&gt; wins &lt;strong&gt;$100&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Any ticket number multiple of &lt;strong&gt;5000&lt;/strong&gt; wins &lt;strong&gt;$1000&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Any ticket number which is &lt;strong&gt;a prime number&lt;/strong&gt; wins &lt;strong&gt;$25000&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Any other&lt;/strong&gt; ticket number doesn't win a prize (wins &lt;strong&gt;$0&lt;/strong&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;None of the sets of key-values for each of the 6 categories above can be conveniently expressed with the &lt;code&gt;map&lt;/code&gt; that we have so far, although we have merely 6 different cases!&lt;/p&gt;
&lt;p&gt;How can we solve this kind of problem still using maps?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Decorators to the rescue&lt;/strong&gt;...&lt;/p&gt;
&lt;p&gt;What is decorator, what is the decorator pattern and when it is good to use one? According to &lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern#What_solution_does_it_describe?"&gt;&lt;strong&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What solution does it describe?&lt;/strong&gt;
Define Decorator objects that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implement the interface of the extended (decorated) object (Component) transparently by forwarding all requests to it&lt;/li&gt;
&lt;li&gt;perform additional functionality before/after forwarding a request.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This allows working with different Decorator objects to extend the functionality of an object dynamically at run-time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The idea is to couple a map with a function (the decorator) which can perform any needed preprocessing, such as validation or projection of a supplied value onto one of a predefined small set of values (that are the actual keys of the map). For simplicity, we are not discussing post-processing here, though this can also be part of a decorator, if needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let us see how a decorated-map solution to the lottery problem looks like&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $prize-table := map {
  "ten" : 10,
  "hundred" : 20,
  "thousand" : 100,
  "five-thousand" : 1000,
  "prime" : 25000,
 "\" : 0
},
$isPrime := function($input as  xs:integer) as xs:boolean
{
  exists(index-of((2, 3, 5, 7, 11, 13, 17, 19, 23), $input)) (: simplified primality checker :)
},
$decorated-map := function($base-map as map(*), $input as xs:anyAtomicType) as item()*
{
  let $raw-result :=
         (
          let $key := 
           if(not($input castable as xs:positiveInteger)) then '\'  (: we can call the error() function here :) 
             else if($input mod 5000 eq 0) then 'five-thousand'
             else if($input mod 1000 eq 0) then 'thousand'
             else if($input mod 100 eq 0) then 'hundred'
             else if($input mod 10 eq 0) then 'ten'
             else if($isPrime($input)) then 'prime'
             else "\"
          return $base-map($key)
         ),
      $post-process := function($x) {$x},  (: using identity here for simplicity :)
      $post-processed := $post-process($raw-result)
    return $post-processed
},

$prizeForTicket := $decorated-map($prize-table, ?),       (: Note: this is exactly the lookup operator  ?    :)
$ticketNumbers := (1, 10, 100, 1000, 5000, 19, -3, "blah-blah-blah")

return $ticketNumbers ! $prizeForTicket(.)          (: produces 0, 10, 20, 100, 1000, 25000, 0, 0 :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In the 2nd part of this proposal, a new type/function -- the &lt;strong&gt;&lt;code&gt;decorated-map&lt;/code&gt;&lt;/strong&gt;  was described.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We defined the signature of a &lt;code&gt;decorated-map&lt;/code&gt; and gave an example how to construct and use one in solving a specific problem. In particular, &lt;strong&gt;the proposal is to have a standard function&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;decorated-map ($base-map as map(*), $input as xs:anyAtomicType) as item()*&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, we showed that the lookup operator &lt;strong&gt;&lt;code&gt;?&lt;/code&gt;&lt;/strong&gt; on a decorated map $dm is identical to and should be defined as :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$dm($base-map, ?)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;What remains to be done&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;The topic of &lt;strong&gt;&lt;em&gt;decorators&lt;/em&gt;&lt;/strong&gt; is extremely important, as a decorator may and should be possible to be defined on any function, not just on maps. This would be addressed in one or more new proposals. Stay tuned 😊&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #104 created</title>
   <pubDate>Sun, 26 Dec 2021 11:36:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/104</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-104</guid>
   <description>&lt;div&gt;&lt;p&gt;name of map:replace/array:replace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The name of map:replace/array:replace is easily confused with fn:replace. One might think that map:replace applies a regular expression to all the keys of a map (which might be a quite useful replacement for JSON object).&lt;/p&gt;
&lt;p&gt;It might also be confused with the replace function of Java's hashmap, which only inserts a new value if the key already exists in the map.&lt;/p&gt;
&lt;p&gt;One could name it map:put-with-function or map:put-f or map:putf  or map:puf for short&lt;/p&gt;
&lt;p&gt;Or something else: map:change, map:modify, map:alter&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #103 created</title>
   <pubDate>Sat, 18 Dec 2021 21:15:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/103</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-103</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:all, fn:some&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;a) the text says the function returns boolean, but the signature says integer*&lt;/p&gt;
&lt;p&gt;b) the text considers a case where the second argument is omitted, but there is no one argument function signature&lt;/p&gt;
&lt;p&gt;c) &lt;code&gt;fn:some&lt;/code&gt; is a wrapper around XQuery's &lt;code&gt;some&lt;/code&gt; expression, and &lt;code&gt;fn:all&lt;/code&gt; is a wrapper around XQuery's &lt;code&gt;every&lt;/code&gt; expression. Is this not confusing and people would expect it to be a wrapper around some kind of &lt;code&gt;all&lt;/code&gt; expression? Or be called &lt;code&gt;fn:every&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;d) I think it is pointless to have such functions when there are already the &lt;code&gt;some/every&lt;/code&gt; XQuery expressions&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #102 created</title>
   <pubDate>Mon, 13 Dec 2021 16:52:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/102</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-102</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt30] Meaning of the term "lexical space"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XSLT 3.0 specification uses the term "lexical space" rather freely, without definition.&lt;/p&gt;
&lt;p&gt;In XSD, the "lexical space" for a data type is the set of lexical representations AFTER any whitespace removal. For example, the lexical space for xs:integer does not allow leading or trailing whitespace. Such whitespace is valid in an instance document, but it is stripped prior to validation by a "pre-lexical" transformation.&lt;/p&gt;
&lt;p&gt;In XSLT, as far as I can see, the intended reading of a phrase such as "a string in the lexical space of xs:integer" is "a string that is castable to xs:integer", which includes strings with leading and trailing whitespace. In some cases the text can only be read this way.&lt;/p&gt;
&lt;p&gt;The F&amp;amp;O spec gets this right. Section 19.2, relating to casting from xs:string, says "The supplied string is mapped to a typed value of the target type as defined in [XML Schema Part 2: Datatypes Second Edition]. Whitespace normalization is applied as indicated by the whiteSpace facet for the datatype. The resulting whitespace-normalized string must be a valid lexical form for the datatype. The semantics of casting follow the rules of XML Schema validation."&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #101 created</title>
   <pubDate>Mon, 13 Dec 2021 13:14:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/101</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-101</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:serialize line breaks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Normally fn:serialize uses LF for line breaks&lt;/p&gt;
&lt;p&gt;But on Windows you want to have CR LF&lt;/p&gt;
&lt;p&gt;There could be an option for that&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #100 created</title>
   <pubDate>Wed, 1 Dec 2021 09:43:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/100</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-100</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Typo in §17.5.3&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;implementation-dependant =&amp;gt; implementation-dependent&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #99 created</title>
   <pubDate>Sun, 28 Nov 2021 01:40:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/99</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-99</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions that determine equality of two sequences or equality of two arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The only standard XPath 3.1 function that compares two arrays or two sequences for equality is the &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-deep-equal"&gt;deep-equal()&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; function.
It implements "value-based equality" which may not always be the equality one needs to check for. For example, the standard XPath 3.1 operator &lt;a href="https://www.w3.org/TR/xpath-31/#id-node-comparisons"&gt;&lt;strong&gt;&lt;em&gt;is&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; implements a check for "identity-based equality" on nodes.&lt;/p&gt;
&lt;p&gt;Thus for two nodes &lt;code&gt;$n1&lt;/code&gt; and &lt;code&gt;$n2&lt;/code&gt; it is possible that:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;deep-equal($n1, $n2) ne  ($n1 is $n2)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The functions defined below can be used to verify a more generic kind of equality between two sequences or between two arrays. These functions accept as a parameter a user-provided function &lt;strong&gt;&lt;em&gt;&lt;code&gt;$compare()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;, which is used to decide whether or not two corresponding items of the two sequences, or two constituents of the two arrays are "equal".&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;fn:sequence-equal($seq1 as item()*, $seq2 as item()*, 
                  $compare as function(item(), item()) as xs:boolean := deep-equal#2) as xs:boolean

fn:array-equal($ar1 as array(*), $ar2 as array(*), 
               $compare as function(item()*, item()*) as xs:boolean := deep-equal#2) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;fn:sequence-equal((1, 2, 3), (1, 2, 3))  (: returns true() :)
fn:sequence-equal((1, 2, 3), (1, 2, 5))  (: returns false() :)
fn:sequence-equal((1), (1, 2))  (: returns false() :)
fn:sequence-equal((), ())  (: returns true() :)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $compare := function($ arg1 as xs:integer, $arg2 as xs:integer) {$arg1 mod 2 eq $arg2 mod 2}
   return fn:sequence-equal((1, 2, 3), (5, 6, 7), $compare)  (: returns true() :)

let $compare := function($ arg1 as xs:integer, $arg2 as xs:integer) {$arg1 mod 2 eq $arg2 mod 2}
   return fn:sequence-equal((1, 2, 3), (5, 6, 8), $compare)  (: returns false() :)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;fn:array-equal([1, 2, 3], [1, 2, 3]) (: returns true() :)
fn:array-equal([1, 2, 3], [1, 2, 5])  (: returns false() :)
fn:array-equal([1], [1, 2])  (: returns false() :) 
fn:array-equal([], [])  (: returns true() :)
fn:array-equal([], [()])  (: returns false() :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Possible implementations&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Here is a pure XPath implementation of &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:sequence-equal&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $compare := function($it1 as item(), $it2 as item()) as xs:boolean 
                {deep-equal($it1, $it2)},
    $sequence-equal := function($seq1 as item()*, $seq2 as item()*, 
                                $compare as function(item(), item()) as xs:boolean, 
                                $self as function(*)) as xs:boolean
{
   let $size1 := count($seq1), $size2 := count($seq2)
    return
      if($size1 ne $size2) then false()
      else
         $size1 eq 0
        or
         $compare(head($seq1), head($seq2)) and $self(tail($seq1), tail($seq2), $compare, $self)
}
 return
   $sequence-equal((1, 2, 3), (1, 2, 3), $compare, $sequence-equal)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Below is a pure XPath implementation of &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:array-equal&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let  $compare := function($val1 as item()*, $val2 as item()*) as xs:boolean 
                {deep-equal($val1, $val2)},
     $array-equal := function($ar1 as array(*), $ar2 as array(*), 
                              $compare as function(item()*, item()*) as xs:boolean, 
                              $self as function(*)) as xs:boolean
{
   let $size1 := array:size($ar1), $size2 := array:size($ar2)
    return
      if($size1 ne $size2) then false()
      else
         $size1 eq 0
        or
         $compare(array:head($ar1), array:head($ar2)) and $self(array:tail($ar1), array:tail($ar2), $compare, $self)
}
 return
   $array-equal([], [()], $compare, $array-equal)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #98 created</title>
   <pubDate>Wed, 24 Nov 2021 17:05:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/98</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-98</guid>
   <description>&lt;div&gt;&lt;p&gt;Support ignoring whitespace/indentation differences in fn:deep-equal.&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;Signatures&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;fn:deep-equal( $input1 as item()*,
               $input2 as item()*,
               $collation as xs:string? := (),
               $boundary-space as enum("preserve", "strip") := "preserve") as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;If &lt;code&gt;$boundary-space&lt;/code&gt; is "preserve", then any whitespace differences are checked and would result in the function returning &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;$boundary-space&lt;/code&gt; is "strip", then any whitespace differences are ignored and would result in the function returning &lt;code&gt;true()&lt;/code&gt; if the inputs are otherwise identical.&lt;/p&gt;
&lt;h2&gt;Use Case&lt;/h2&gt;
&lt;p&gt;Comparing two XML fragments in a unit test assertion where you don't care about indentation differences.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #97 created</title>
   <pubDate>Mon, 22 Nov 2021 18:53:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/97</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-97</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Functions symmetric to `head()` and `tail()` for sequences and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In Xpath 3.1 we already have &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-head"&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;head()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-tail"&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;tail()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, and &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-last"&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;last()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But there is no function that produces the subsequence of all items of a sequence except the last one. There exists such a function in other programming languages. For example, in Haskell this is the &lt;a href="https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.List.html#init"&gt;&lt;strong&gt;&lt;em&gt;init&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; function.&lt;/p&gt;
&lt;p&gt;And the &lt;code&gt;last()&lt;/code&gt; function isn't the symmetric opposite of &lt;code&gt;head()&lt;/code&gt; -- it doesn't give us the last item in a sequence, just its position. So we need another function: &lt;code&gt;fn:heel()&lt;/code&gt; for this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;fn:init($sequence as item()*) as item()*

fn:heel($sequence as item()*) as item()?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;init($seq)&lt;/code&gt; is a convenient shorthand for &lt;code&gt;subsequence($seq, 1, count($seq) -1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;heel($seq)&lt;/code&gt; is a convenient shorthand for &lt;code&gt;slice($seq, -1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:init(('a', 'b', 'c'))&lt;/code&gt; returns &lt;code&gt;'a', 'b'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:init(('a', 'b'))&lt;/code&gt; returns &lt;code&gt;'a'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:init('a')&lt;/code&gt; returns &lt;code&gt;()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:init(())&lt;/code&gt; returns &lt;code&gt;()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:heel('a', 'b', 'c')&lt;/code&gt; returns &lt;code&gt;'c'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;('a', 'b', 'c') =&amp;gt; init() =&amp;gt; heel()&lt;/code&gt; returns &lt;code&gt;'b'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It makes sense to have &lt;code&gt;fn:init()&lt;/code&gt; and &lt;code&gt;fn:heel()&lt;/code&gt; defined on arrays, too&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;array:init($array as array(*)) as array(*)

array:heel($array as array(*)) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:init([1, 2, 3, 4, 5])&lt;/code&gt;  returns &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:init([1])&lt;/code&gt;  returns &lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:heel([1, 2, 3, (4, 5)])&lt;/code&gt;  returns &lt;code&gt;(4, 5)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:heel([()])&lt;/code&gt;  returns &lt;code&gt;()&lt;/code&gt; (the empty sequence)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:init([])&lt;/code&gt;  produces &lt;strong&gt;error&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:heel([])&lt;/code&gt;  produces &lt;strong&gt;error&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[1, 2, 3, (4, 5)] =&amp;gt;array:heel() =&amp;gt; heel()&lt;/code&gt;  returns &lt;code&gt;5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I would challenge anyone to re-write the last example in understandable way using &lt;code&gt;fn:slice()&lt;/code&gt; 💯&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #96 created</title>
   <pubDate>Mon, 22 Nov 2021 15:56:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/96</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-96</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Functions that determine if a given sequence starts with another sequence or ends with another sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It is surprising that we are at version 4 and still are missing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;(1) fn:starts-with-sequence($container as item()*, $maybe-start as item()*, 
                            $compare as function(item(), item()) as xs:boolean := deep-equal)
                            ) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;(2) fn:ends-with-sequence($container as item()*, $maybe-end as item()*, 
                          $compare as function(item(), item()) as xs:boolean := deep-equal)
                          ) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(2) above is a shorthand for:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;fn:starts-with-sequence(reverse($container), reverse($maybe-end)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:starts-with-sequence(('a', 'b', 'c', 'd'), ('a', 'b'))&lt;/code&gt;   returns &lt;code&gt;true()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:starts-with-sequence(('a', 'b', 'c', 'd'), ('a', 'c'))&lt;/code&gt;   returns &lt;code&gt;false()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:ends-with-sequence(('a', 'b', 'c', 'd'), ('c', 'd'))&lt;/code&gt;   returns &lt;code&gt;true()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:ends-with-sequence(('a', 'b', 'c', 'd'), ('b', 'd'))&lt;/code&gt;   returns &lt;code&gt;false()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;('a', 'b', 'c', 'd') =&amp;gt; starts-with-sequence(('a', 'b'))&lt;/code&gt; returns &lt;code&gt;true()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;('a', 'b', 'c', 'd') =&amp;gt; starts-with-sequence(('a', 'c'))&lt;/code&gt; returns &lt;code&gt;false()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;('a', 'b', 'c', 'd') =&amp;gt; ends-with-sequence(('c', 'd'))&lt;/code&gt; returns &lt;code&gt;true()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;('a', 'b', 'c', 'd') =&amp;gt; ends-with-sequence(('b', 'd'))&lt;/code&gt; returns &lt;code&gt;false()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One possible implementation&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $starts-with-sequence := function($seq1 as item()*, $seq2 as item()*, $self as function(*))
{
   empty($seq2)
  or
   head($seq1) eq head($seq2) and $self(subsequence($seq1, 2), subsequence($seq2, 2), $self)
}
  return
    $starts-with-sequence(('a', 'b', 'c', 'd'), ('a', 'b', 'c'), $starts-with-sequence)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #95 closed</title>
   <pubDate>Mon, 22 Nov 2021 09:23:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/95</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-95</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] URI validation function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #95 created</title>
   <pubDate>Sun, 21 Nov 2021 18:15:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/95</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-95</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] URI validation function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Apparently there is no function to validate URI syntax against the relevant RFC. I expected that casting to &lt;code&gt;xs:anyURI&lt;/code&gt; validates but that seems not to be the case:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Because it is impractical for processors to check that a value is a context-appropriate URI reference, this specification follows the lead of [RFC 2396] (as amended by [RFC 2732]) in this matter: such rules and restrictions are not part of type validity and are not checked by ·minimally conforming· processors. Thus in practice the above definition imposes only very modest obligations on ·minimally conforming· processors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;https://www.w3.org/TR/xmlschema-2/#anyURI&lt;/p&gt;
&lt;p&gt;Valid URIs are quite critical in strict RDF output formats such as RDF/XML.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #94 created</title>
   <pubDate>Sat, 20 Nov 2021 19:32:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/94</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-94</guid>
   <description>&lt;div&gt;&lt;p&gt;Functions that determine if a given sequence is a subsequence of another sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It is surprising that we are at version 4 and still are missing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;(1) fn:has-subsequence($container as item()*, $maybe-subsequence as item()*, 
                       $compare as function(item(), item()) as xs:boolean := deep-equal)
                       ) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;(2) fn:has-subsequence($container as item()*, $maybe-subsequence as item()*, $contiguous-subsequence := true(),
                       $compare as function(item(), item()) as xs:boolean := deep-equal)
                       ) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;(3) fn:has-non-contigous-subsequence($container as item()*, $maybe-subsequence as item()*,
                                     $compare as function(item(), item()) as xs:boolean := deep-equal)
                                     ) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(3) above is a shorthand for:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;fn:has-subsequence(?, ?, false()) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:has-subsequence(('a', 'b', 'c', 'd'), ('b', 'c'))&lt;/code&gt;   returns &lt;code&gt;true()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:has-subsequence(('a', 'b', 'c', 'd'), ('b', 'd'))&lt;/code&gt;   returns &lt;code&gt;false()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:has-non-contigous-subsequence(('a', 'b', 'c', 'd'), ('b', 'd'))&lt;/code&gt;   returns &lt;code&gt;true()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:has-non-contigous-subsequence(('a', 'b', 'c', 'd'), ('d', 'b'))&lt;/code&gt;   returns &lt;code&gt;false()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;('a', 'b', 'c', 'd') =&amp;gt; has-subsequence(('b', 'c'))&lt;/code&gt; returns &lt;code&gt;true()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;('a', 'b', 'c', 'd') =&amp;gt; has-subsequence(('b', 'd'))&lt;/code&gt; returns &lt;code&gt;false()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;('a', 'b', 'c', 'd') =&amp;gt; has-non-contigous-subsequence(('b', 'd'))&lt;/code&gt; returns &lt;code&gt;true()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;('a', 'b', 'c', 'd') =&amp;gt; has-non-contigous-subsequence(('d, 'b'))&lt;/code&gt; returns &lt;code&gt;false()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #93 created</title>
   <pubDate>Sat, 20 Nov 2021 16:10:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/93</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-93</guid>
   <description>&lt;div&gt;&lt;p&gt;Support order by ascending/descending from a string value.&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Use Case&lt;/h3&gt;
&lt;p&gt;It is a common pattern to have a sort key and direction on requests that support listing or searching an object (e.g. authors).&lt;/p&gt;
&lt;p&gt;Currently, in order to switch between ascending/descending in a FLWOR expression two separate expressions need to be written. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($sort-order eq "ascending") then
    for $name in $authors order by $name ascending return $name
else
    for $name in $authors order by $name descending return $name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be cleaner if this could be rewritten as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $name in $authors
order by $name in $sort-order order
return $name
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;OrderModifier ::= ("ascending"  |  "descending"  |  OrderDirection)?
                  ("empty"  ("greatest"  |  "least"))?
                  ("collation" URILiteral)?
OrderDirection ::= "in" ExprSingle "order"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Semantics&lt;/h3&gt;
&lt;p&gt;If OrderDirection is used, the expression is evaluated.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the expression is not a single atomic value, an XQST#### error is raised.&lt;/li&gt;
&lt;li&gt;If the expression evaluates to the string "ascending", this is the same as using the &lt;code&gt;ascending&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;If the expression evaluates to the string "descending", this is the same as using the &lt;code&gt;descending&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;Otherwise, an XQST#### error is raised.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #92 created</title>
   <pubDate>Sun, 24 Oct 2021 13:58:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/92</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-92</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplify rule for attribute values on Extension Instructions used to invoke named templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Regarding the rule in the current proposal for &lt;a href="https://qt4cg.org/branch/master/xslt-40/Overview.html#invoking-named-templates"&gt;Invoking Named Templates with Extension Instructions&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The way in which attribute values are handled depends on the type declaration of the template parameter...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have some problems with this dependency on parameter type (to control whether value is an AVT or XPath expression):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In many cases, a &lt;code&gt;xs:string&lt;/code&gt; or &lt;code&gt;xs:boolean&lt;/code&gt; type passed as a param will be a variable reference so a coder needs to enter &lt;code&gt;name="{$myName}"&lt;/code&gt; instead of &lt;code&gt;name="$myName"&lt;/code&gt; in their XSLT editor.&lt;/li&gt;
&lt;li&gt;If passing a literal &lt;code&gt;xs:string&lt;/code&gt; type, the syntax: &lt;code&gt;name="first"&lt;/code&gt; would be easy for a human reader to misinterpret as a &lt;code&gt;NameTest&lt;/code&gt; instead of a &lt;code&gt;StringLiteral&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The dependency on param type means more effort (and thus poorer performance) for a tokenizer or syntax-highlighter as it may need to get type information from included/imported XSLT stylesheet modules or from extension elements declared later in the same XSLT module.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The third point above is most important from my viewpoint as maintainer of an XSLT editor, but I believe the first two points are also valid.&lt;/p&gt;
&lt;p&gt;For these reasons, I propose that: all attribute-values on extension instructions used to invoke named templates are treated as XPath expressions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #91 created</title>
   <pubDate>Fri, 17 Sep 2021 17:58:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/91</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-91</guid>
   <description>&lt;div&gt;&lt;p&gt;name of map:substitute&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;a href="https://qt4cg.org/branch/master/xpath-functions-40/Overview-diff.html#func-map-substitute"&gt;map:substitute&lt;/a&gt; is a weird name for the function. It sounds as it would change just one value with a new value like map:put&lt;/p&gt;
&lt;p&gt;Actually it is mapping all values. &lt;code&gt;map:map&lt;/code&gt; or &lt;code&gt;map:map-values&lt;/code&gt; would be more fitting&lt;/p&gt;
&lt;p&gt;Or &lt;code&gt;map:for-each&lt;/code&gt; would have been logical.  Unfortunately it is already taken. &lt;code&gt;fn:for-each&lt;/code&gt; takes a sequence and returns a sequence, &lt;code&gt;array:for-each&lt;/code&gt; takes an array and returns an array. &lt;code&gt;map:for-each&lt;/code&gt; takes a map and returns a ~map~ sequence. makes no sense. Anyways, &lt;code&gt;map:for-each-value&lt;/code&gt; would also be a good name&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Map_(higher-order_function)#Language_comparison"&gt;Other languages&lt;/a&gt; have other names. It could also be called  &lt;code&gt;map:transform&lt;/code&gt; like C++, or &lt;code&gt;map:apply&lt;/code&gt; like pari/gp&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #90 created</title>
   <pubDate>Thu, 16 Sep 2021 11:35:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/90</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-90</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplified simplified stylesheets&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A couple of suggestions for making "simplified stylesheets" more useful:&lt;/p&gt;
&lt;p&gt;(a) Allow the xsl:version (and therefore the XSLT namespace declaration) to be omitted; the default is supplied by the processor. So this becomes a valid stylesheet:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;out id="{/*/@id}"&amp;gt;
  &amp;lt;x&amp;gt;{/thing/foo[1]/x}&amp;lt;/x&amp;gt;
  &amp;lt;y&amp;gt;{/thing/foo[2]/x}&amp;lt;/y&amp;gt;
&amp;lt;/out&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(b) Allow "single-template" stylesheets as an intermediate form between simplified stylesheets and full stylesheets:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:xslt xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&amp;gt;
  &amp;lt;xsl:strip-space elements="*"/&amp;gt;
  &amp;lt;xsl:param name="id"/&amp;gt;
  &amp;lt;out id="{$id}"&amp;gt;
    &amp;lt;x&amp;gt;{/thing/foo[1]/x}&amp;lt;/x&amp;gt;
    &amp;lt;y&amp;gt;{/thing/foo[2]/x}&amp;lt;/y&amp;gt;
  &amp;lt;/out&amp;gt; 
&amp;lt;/xsl:xslt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last child element of xsl:xslt, if not in the XSLT namespace, is implicitly wrapped in &lt;code&gt;&amp;lt;xsl:template match="/"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #89 created</title>
   <pubDate>Thu, 2 Sep 2021 18:58:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/89</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-89</guid>
   <description>&lt;div&gt;&lt;p&gt;[XQuery] DirPIConstructor permits ':' in the PI name.&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;PITarget&lt;/code&gt; symbol allows a colon in the grammar, but the rest of the spec and XQuery implementations (tested on BaseX, Saxon, and MarkLogic) disalow &lt;code&gt;:&lt;/code&gt; in &lt;code&gt;DirPIConstructor&lt;/code&gt; productions.&lt;/p&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;DirPIConstructor&lt;/code&gt; construct is defined as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[151] DirPIConstructor ::= "&amp;lt;?"  PITarget  (S DirPIContents)?  "?&amp;gt;" | /* ws: explicit */
[232] PITarget ::= [http://www.w3.org/TR/REC-xml#NT-PITarget]XML /* xgc: xml-version */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with XML defining &lt;code&gt;PITarget&lt;/code&gt; as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[17] PITarget ::= Name - (('X' \| 'x') ('M' \| 'm') ('L' \| 'l'))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The "excluding 'xml' in any case insensitive form" part is covered by the &lt;em&gt;3.9.2 Other Direct Constructors&lt;/em&gt; section.&lt;/p&gt;
&lt;p&gt;While the XML specification states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Namespaces in XML Recommendation [XML Names] assigns a meaning to names containing colon characters. Therefore, authors should not use the colon in XML names except for namespace purposes, but XML processors must accept the colon as a name character.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;various XQuery processors disallow a colon here in line with the rest of the XQuery specification.&lt;/p&gt;
&lt;h2&gt;Proposal&lt;/h2&gt;
&lt;p&gt;Change &lt;code&gt;PITarget&lt;/code&gt; to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[232] PITarget ::= NCName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to reflect actual usage and align it with the rest of the XQuery specification.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #88 created</title>
   <pubDate>Mon, 16 Aug 2021 10:06:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/88</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-88</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPATH] breaking ancestor or descendant axes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A common issue that I often have to deal with in Xpath (within xslt most of the time) is to be able to break descendants or ancestors axes. To do that I have to use predicates which are sometimes quite complicated, because it has to appen to every encountered nodes, which force to think really globally. Maybe this is proper to functionnal langages but maybe it would be possible to add simple feature for this common use-case.&lt;/p&gt;
&lt;p&gt;An really simple example (no difficult to resolve here, but it's sometimes much more complex) :&lt;/p&gt;
&lt;p&gt;Let's say I want to get all "doc" elements that have a table &lt;em&gt;as content&lt;/em&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;doc id="doc1"&amp;gt;
  &amp;lt;header/&amp;gt;
  &amp;lt;table/&amp;gt;
  &amp;lt;doc id="doc2"&amp;gt;
    &amp;lt;p/&amp;gt;
    &amp;lt;doc id="doc3"&amp;gt;
      &amp;lt;table/&amp;gt;
    &amp;lt;/doc&amp;gt;
  &amp;lt;/doc&amp;gt;
  &amp;lt;footer&amp;gt;
    &amp;lt;doc id="doc4"&amp;gt;
      &amp;lt;table/&amp;gt;
    &amp;lt;/doc&amp;gt;
  &amp;lt;/footer&amp;gt;
&amp;lt;/doc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example doc1, doc3 and doc4 all have a table "as content", but doc2 doesn't, though it has a table as descendant.&lt;/p&gt;
&lt;p&gt;The xpath to get all doc that have a table as content would be something like :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//doc[let $self := . return exists (descendant::table[ancestor::doc[1] is $self])]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don't really have any idea on how to express a new way to break this axis, let's suggest a predicate on the axis itself, something like :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//doc[descendant[break-axis-on-matching='self::doc']::table]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This syntax is really not nice, but I guess you see the idea ?
Maybe I missed a way to achieve this in Xpath 3.1 ?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #87 created</title>
   <pubDate>Mon, 16 Aug 2021 09:16:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/87</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-87</guid>
   <description>&lt;div&gt;&lt;p&gt;[XSL] Support for "master files"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Oxygen allows to set one or more "master files" on a project. This is quite usefull when validating or searching for references while editing XSLT "modules" that depends on a main XSLT.&lt;/p&gt;
&lt;p&gt;The main use-case is when I have an big XSLT that I want to split into modules (typically on module per mode). I could off course gather each global variable / parameters / function into the same module, but then I have to import it from each module if I want every XSLT to be valid. It would make more sens to import it once from the main XSLT, but then none of the other modules are valid anymore.&lt;/p&gt;
&lt;p&gt;Being able to set master files would help in validation as a common XSLT feature. It would have no incidence on compilation but only as validation feature.&lt;/p&gt;
&lt;p&gt;What do you think ?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #86 created</title>
   <pubDate>Mon, 9 Aug 2021 09:14:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/86</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-86</guid>
   <description>&lt;div&gt;&lt;p&gt;Fallback for named timezones &lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;§9.8.4.6 says "If no timezone name can be identified, the timezone offset is output using the fallback format +01:01." But "+01:01" is not a valid format. It should say either "01:01" or (preferably, I think) "00:00t".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #85 closed</title>
   <pubDate>Sun, 8 Aug 2021 16:07:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/85</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-85</guid>
   <description>&lt;div&gt;&lt;p&gt;New separators (apply-templates, for-each) vs attribute, value-of, serialization's item-separator&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #85 created</title>
   <pubDate>Sun, 8 Aug 2021 15:32:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/85</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-85</guid>
   <description>&lt;div&gt;&lt;p&gt;New separators (apply-templates, for-each) vs attribute, value-of, serialization's item-separator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Don't know if the new separator attributes for apply-templates and for-each are designed to work differently than the existing separator functionality in XSLT 3. According to one of the examples, if the instruction produces sibling text nodes then separators are included between the text nodes. In XSLT 3, sibling text nodes are always merged and separators ignored. Perhaps this inconsistency should be reconsidered, or at least a note added for clarification.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #84 created</title>
   <pubDate>Fri, 30 Jul 2021 13:26:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/84</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-84</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal : allow ignorable &amp;lt;xsl:div&amp;gt; wrapper for documentation or organize the code&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;It's a long time I'm missing a way to organize XSLT code. Using &lt;a href="https://qt4cg.org/branch/master/xslt-40/Overview-diff.html#enclosed-modes"&gt;enclosed mode&lt;/a&gt; will help a lot, but it's not its main purpose and it's not enought I guess to be able :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Group templates or function that go together (according to the author)&lt;/li&gt;
&lt;li&gt;easily comments blocks of code for debugging purpose&lt;/li&gt;
&lt;li&gt;add documentation on any XSLT elements : not only top level elements as with oxygen "xd" elements&lt;/li&gt;
&lt;li&gt;add foreign xml structures that can help for static analysing of the code (ex : informations to help with xslt schematron validation, that need autocompletion with a specific xml schema, that means processing instructions are not engough here)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What about a &lt;code&gt;xsl:div&lt;/code&gt; element (for division), this is a well known element's name, used in HTML but also Relax NG.
That element might have a &lt;code&gt;process-content&lt;/code&gt; attribute with 2 possible values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt; (default): to say the content should be "applied" as &lt;code&gt;xsl:div&lt;/code&gt; might be nested  with different process-content attribute values&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt;: to say the content has to be completely skipped at compilation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;xsl:stylesheet 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
  xmlns:local="local"
  xmlns:xslq="https://github.com/mricaud/xsl-quality"
  xmlns:a="http://my-annotations.org"
  version="4.0"&amp;gt;
  
  &amp;lt;xsl:div&amp;gt;
    &amp;lt;xsl:div process-content="false"&amp;gt;
      &amp;lt;p&amp;gt;This block is about "foo"&amp;lt;/p&amp;gt;
    &amp;lt;/xsl:div&amp;gt;
    
    &amp;lt;xsl:function name="local:has-foo-child" as="xs:boolean"&amp;gt;
      &amp;lt;xsl:param name="e"&amp;gt;
        &amp;lt;xsl:div process-content="false"&amp;gt;&amp;lt;xd:doc&amp;gt;Any elements&amp;lt;/xd:doc&amp;gt;&amp;lt;/xsl:div&amp;gt;
      &amp;lt;/xsl:param&amp;gt;
      &amp;lt;xsl:sequence select="exists($e/foo)"/&amp;gt;
    &amp;lt;/xsl:function&amp;gt;
    
    &amp;lt;xsl:template match="foo"&amp;gt;
        &amp;lt;xsl:div process-content="false"&amp;gt;
           &amp;lt;xslq:schematron ignore-rule="mode-name-must-be-namepace-prefixed"/&amp;gt;
         &amp;lt;xsl:div&amp;gt;
        &amp;lt;xsl:value-of select="normalize-space(.)"&amp;gt;&amp;lt;xsl:div process-content="false"&amp;gt;&amp;lt;xd:doc&amp;gt;Normalization is needed here&amp;lt;/xd:doc&amp;gt;&amp;lt;/xsl:div&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    
  &amp;lt;/xsl:div&amp;gt;
  
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Writing this example let me see that it's a bit verbose. Another proposal would be to declare a set of namespaces that are to be ignored at compilation time, wether by skipping it or by apply what's inside of it.
The same example would give something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;xsl:stylesheet 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
  xmlns:local="local"
  xmlns:xslq="https://github.com/mricaud/xsl-quality"
  xmlns:a="http://my-annotations.org"
  version="4.0"&amp;gt;
  
  &amp;lt;xsl:ignore-namespaces select="map{
    'http://www.oxygenxml.com/ns/doc/xsl' : 'skip', 
    'http://my-annotations.org' : 'apply',
    'https://github.com/mricaud/xsl-quality' : 'skip'
    }"/&amp;gt;
    
  
  &amp;lt;a:div label="This block is about foo"&amp;gt;
    
    &amp;lt;xsl:function name="local:has-foo-child" as="xs:boolean"&amp;gt;
      &amp;lt;xsl:param name="e"&amp;gt;&amp;lt;xd:doc&amp;gt;Any elements&amp;lt;/xd:doc&amp;gt;&amp;lt;/xsl:param&amp;gt;
      &amp;lt;xsl:sequence select="exists($e/foo)"/&amp;gt;
    &amp;lt;/xsl:function&amp;gt;
    
    &amp;lt;xsl:template match="foo" mode="bar"&amp;gt;
      &amp;lt;xslq:schematron ignore-rule="mode-name-must-be-namepace-prefixed"/&amp;gt;
      &amp;lt;xsl:value-of select="normalize-space(.)" xd:doc="normalization is needed here"/&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    
  &amp;lt;/a:div&amp;gt;
  
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, there are probably multiple ways to achieve this need.&lt;/p&gt;
&lt;p&gt;I would be really happy to have such possiblilities, but I don't know if some of you have the same need.&lt;/p&gt;
&lt;p&gt;Thanks for any comments / replies / ideas / feedbacks&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #83 created</title>
   <pubDate>Thu, 29 Jul 2021 15:08:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/83</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-83</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath]Proposal: Notation for using an operator as a function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In this thread of (XML slack)#general:
https://app.slack.com/client/T011VK9115Z/C011NLXE4DU/thread/C011NLXE4DU-1627497085.455200?cdn_fallback=2
there is this expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;for-each-pair($aa, $bb, function($x, $y) {$x ne $y}) 
           =&amp;gt; index-of(true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the long and unreadable: &lt;code&gt;function($x, $y) {$x ne $y}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Writing, understanding and maintaining XPath code, would be enhanced if we had a better way of expressing the use of an operator as a function.
In Haskell one simply writes:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-haskell"&gt;(/)  4, 2
half   = (/2)
(-) 4, 2
negate = (0-)
ne = (/=)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could accept a similar convention, so the original expression above is written simply as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;for-each-pair($aa, $bb, (ne)) 
           =&amp;gt; index-of(true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or we could use something less overloaded than parenthesis, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;`ne`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then the original expression looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;for-each-pair($aa, $bb, `ne`) 
           =&amp;gt; index-of(true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Regardless which lexical representation is chosen, being able to represent an operator as a function leads to significant code simplification, and improves its readability.&lt;/p&gt;
&lt;p&gt;Please, share your thoughts/questions on this proposal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #82 created</title>
   <pubDate>Thu, 29 Jul 2021 12:25:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/82</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-82</guid>
   <description>&lt;div&gt;&lt;p&gt;Should the mode attribute for apply-templates in templates of enclosed modes default to #current?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;XSLT 4 with enclosed modes allows to nest &lt;code&gt;xsl:template&lt;/code&gt; declarations inside of an &lt;code&gt;xsl:mode&lt;/code&gt; declaration, to kind of wrap all templates belonging to a certain mode.&lt;/p&gt;
&lt;p&gt;On XmlSlack, it was suggested, that for such templates, if they have an &lt;code&gt;xsl:apply-templates&lt;/code&gt; instruction without a &lt;code&gt;mode&lt;/code&gt; attribute, the mode should implicitly default to &lt;code&gt;#current&lt;/code&gt;, meaning the enclosed mode, and not to the default mode of the stylesheet.&lt;/p&gt;
&lt;p&gt;So the section in https://qt4cg.org/branch/master/xslt-40/Overview-diff.html#using-modes saying about the optional &lt;code&gt;mode&lt;/code&gt; attribute of &lt;code&gt;xsl:apply-templates&lt;/code&gt; that "If the attribute is omitted, the default mode for the stylesheet module is used." needs to be adjusted to say that the enclosed mode is used if the template containing the &lt;code&gt;xsl:apply-templates&lt;/code&gt;  is declared inside of such a mode.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #81 created</title>
   <pubDate>Tue, 27 Jul 2021 09:20:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/81</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-81</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt30] Typo in §4.4&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The text of the first Note in §4.4 reads&lt;/p&gt;
&lt;p&gt;This list excludes documents passed as the values of stylesheet parameters or parameters of the initial named template or initial function, trees created by functions such as parse-xml, parse-xml-fragment, analyze-string, or json-to-xml, nor values returned from extension functions.&lt;/p&gt;
&lt;p&gt;"nor" should be "and".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #80 created</title>
   <pubDate>Mon, 14 Jun 2021 11:25:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/80</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-80</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:while (before: fn:until)&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Motivation&lt;/h3&gt;
&lt;p&gt;Similar to &lt;code&gt;fold-left&lt;/code&gt;, the function allows for an alternative writing of code that would otherwise be solved recursively, and that would possibly cause stack overflows without tail call optimizations.&lt;/p&gt;
&lt;p&gt;In contrast to sequence-processing functions (fold functions, &lt;code&gt;for-each&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, others), the initial input of &lt;code&gt;fn:while&lt;/code&gt; can be arbitrary and will not determine the number of maximum iterations.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Applies the predicate function &lt;code&gt;$test&lt;/code&gt; to &lt;code&gt;$input&lt;/code&gt;. If the result is &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;$action&lt;/code&gt; is invoked with the start value – or, subsequently, with the result of this function – until the predicate function returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; The &lt;code&gt;$input&lt;/code&gt; argument (before: &lt;code&gt;$zero&lt;/code&gt;) is now defined as first parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:while(
  $input  as item()*,
  $test   as function(item()*) as xs:boolean,
  $action as function(item()*) as item()*
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Examples / Use Cases&lt;/h3&gt;
&lt;p&gt;Calculate the square root of a number by iteratively improving an initial guess:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $input := 3936256
return fn:while(
  $input,
  function($result) { abs($result * $result - $input) &amp;gt;= 0.0000000001 },
  function($guess) { ($guess + $input div $guess) div 2 }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find the first number that does not occur in a sequence:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $values := (1 to 999, 1001 to 2000)
return while(1, -&amp;gt; { . = $values }, -&amp;gt; { . + 1 })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Equivalent Expression&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function local:while(
  $input  as item()*,
  $test   as function(item()*) as xs:boolean,
  $action as function(item()*) as item()*
) {
  if($test($input)) then (
    local:while($action($input), $test, $action)
  ) else (
    $input
  )
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #79 created</title>
   <pubDate>Fri, 4 Jun 2021 07:46:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/79</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-79</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:deep-normalize-space($e as node())&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Summary: removes redundant whitespace within the content of a given node, leaving the element structure intact.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;p&amp;gt;  My &amp;lt;i&amp;gt;crazy&amp;lt;/i&amp;gt;
&amp;lt;b&amp;gt; content&amp;lt;/b&amp;gt;.
&amp;lt;/p&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;p&amp;gt;My &amp;lt;i&amp;gt;crazy&amp;lt;/i&amp;gt; &amp;lt;b&amp;gt;content&amp;lt;/b&amp;gt;.&amp;lt;/p&amp;gt; &lt;/code&gt;
Rules (expressed informally, and may need refining):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The string value of the result is the normalize-space() of the string-value of the input.&lt;/li&gt;
&lt;li&gt;Every non-whitespace character in the result has the same ancestor path as the corresponding character in the input (for example if it was in an &lt;code&gt;i&lt;/code&gt; element in the input, then it will be in an &lt;code&gt;i&lt;/code&gt; element in the output).&lt;/li&gt;
&lt;li&gt;When several adjacent whitespace characters from different elements in the input are combined into a single space in the output, the resulting space will be in a text node whose parent is the result node corresponding to the common ancestor of those different elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example &lt;code&gt;&amp;lt;i&amp;gt;easy &amp;lt;/i&amp;gt;&amp;lt;b&amp;gt; peasy&amp;lt;/b&amp;gt;&lt;/code&gt; becomes &lt;code&gt;&amp;lt;i&amp;gt;easy&amp;lt;/i&amp;gt; &amp;lt;b&amp;gt;peasy&amp;lt;/b&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Could perhaps also add an option to word-wrap to a given line length.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #78 created</title>
   <pubDate>Sun, 30 May 2021 00:33:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/78</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-78</guid>
   <description>&lt;div&gt;&lt;p&gt;Specify strict order of evaluation for a subexpression &lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As discussed in a related issue #71, given an XPath expression such as (1):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $d in  ( 10, 2, 3 , current-date())
  return
     $d[. castable as xs:date][xs:date(.) le current-date()]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;anyone who expects this expression to be evaluated without errors and to produce as result a sequence of one item, will be disappointed to get an error (as per BaseX 9.5.2):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Error&lt;/strong&gt;:
&lt;em&gt;Stopped at C:/W3C-XPath/DupsSolutions/file, 3/39:
[XPTY0004] Cannot convert xs:integer to &lt;code&gt;xs:date&lt;/code&gt;: 10&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At present the recommended solution to the problem is to write an expression of this kind instead (2):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $d in  ( 10, 2, 3, current-date() )
  return
     if($d[. castable as xs:date] eq $d)
       then $d[xs:date(.) le current-date()]
       else()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evaluating this produces the expected result (a sequence of one item, which is the &lt;code&gt;current-date()&lt;/code&gt; ).&lt;/p&gt;
&lt;p&gt;There are many challenges with such a recommendation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The expression above is unreadable.&lt;/li&gt;
&lt;li&gt;It is very difficult and error-prone to convert manually (1) to (2)&lt;/li&gt;
&lt;li&gt;It would be nearly impossible to transform a more complex expression and it would be tremendously difficult to read, understand and maintain such code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Proposed solution&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Introduce the &lt;strong&gt;&lt;em&gt;strict-order evaluation&lt;/em&gt;&lt;/strong&gt; operator &lt;strong&gt;~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then achieving a strict-order evaluation for the subexpression (of (1) above): &lt;code&gt;[xs:date(.) le current-date()]&lt;/code&gt; would be  simply (3):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $d in  ( 10, 2, 3 , current-date())
  return
     $d[. castable as xs:date]~[xs:date(.) le current-date()]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this particular case the XPath processor will rewrite the above expression into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $d in  ( 10, 2, 3, current-date() )
  return
     $d[. castable as xs:date] =&amp;gt; 
                                  (function($x) {
                                                 $x[xs:date($x) le current-date()]
                                                 }
                                  ) ()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #77 created</title>
   <pubDate>Tue, 25 May 2021 22:00:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/77</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-77</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow manipulation of maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As discussed in the xml.com Slack workspace's xpath-ng channel, there is interest in extending the XQuery Update Facility to allow manipulation of maps and arrays—in effect, to facilitate the editing of large, deep JSON documents.&lt;/p&gt;
&lt;p&gt;For example, @DrRataplan provided this use case (the first code snippet can be viewed at &lt;a href="https://xpath.playground.fontoxml.com/?mode=0&amp;amp;variables=%7B%7D&amp;amp;xml=%3Cxml%3E%0A%3C%2Fxml%3E&amp;amp;xpath=let+%24theMap+%3A%3D+map%7B%27key%27%3Amap%7B%27deeperKey%27%3A+%5B1%2C2%2C3%5D%7D%7D%0A%0Areturn%0A%0A%24theMap+%3D%3E+map%3Aput%28%27key%27%2C+%24theMap%3Fkey+%3D%3E+map%3Aput%28%27deeperKey%27%2C+array%3Aappend%28%24theMap%3Fkey%3FdeeperKey%2C+42%29%29%29&amp;amp;context="&gt;fontoxml's playground&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think XQUF for JSON may have its merit. Editing larger JSON documents using XQuery is not the most elegant. I mean, in JavaScript, changing a value in a deep map is &lt;code&gt;theMap['key']['deeperKey'].push(42)&lt;/code&gt;. In XPath, it is more like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;$theMap 
=&amp;gt; map:put('key', $theMap?key)
=&amp;gt; map:put('deeperKey', array:append($theMap?key?deeperKey, 42)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In XQUF terms, I think this would look a bit like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;insert 42 as last into $theMap?key?deeperKey
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;... which is at least a lot shorter.&lt;/p&gt;
&lt;p&gt;At some point when working on a project that tried to edit some JSON metadata objects in XQuery I implemented a function that accepted a map, a path of keys, a value and some semantics, such as inserting at the start vs. at the end. It did not work too great in the end and we went for JavaScript functions instead. Just too explicit and hard to debug.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See also &lt;a href="https://stackoverflow.com/questions/67652693/is-xquery-3-1-designed-for-advanced-json-editing/67653949#67653949"&gt;this discussion at StackOverflow&lt;/a&gt;, where a user was struggling to use &lt;code&gt;map:put&lt;/code&gt; or &lt;code&gt;map:remove&lt;/code&gt; on deeper entries in a map; asked, "Is XQuery 3.1 designed for advanced JSON editing?"; and worried that XQuery "might not be the right choice" for his use case. Highlights from the responses:&lt;/p&gt;
&lt;p&gt;@michaelhkay wrote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You're correct that doing what I call deep update of a map is quite difficult with XQuery 3.1 (and indeed XSLT 3.0) as currently defined. And it's not easy to define language constructs with clean semantics. I attempted to design a construct as an XSLT extension instruction - see https://saxonica.com/documentation10/index.html#!extensions/instructions/deep-update -- but I don't think its anywhere near a perfect solution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@ChristianGruen wrote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Updates primitives had been defined for JSONiq (https://www.jsoniq.org/docs/JSONiqExtensionToXQuery/html-single/index.html#section-json-updates), but I believe they haven’t made it into the reference implementation. They could also be considered for XQuery 4.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@michaelhkay responded:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If I'm not mistaken, maps in JSONiq have object identity, which is not true of XQuery maps (which are pure functional data structures). That makes the semantics of deep update much easier to define, but makes it more difficult to make simple operations such as &lt;code&gt;put()&lt;/code&gt; and &lt;code&gt;remove()&lt;/code&gt; efficient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Slack @liamquin also wrote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the proposals i've seen for this in the past required that maps and arrays be given identity in some way, but then you have the problem that e.g. &lt;code&gt;map:insert&lt;/code&gt; returns a new map, which is not how an XQuery update expression works&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@jonathanrobie also wrote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, but the first question is this: how much will is there to support JSON updates in XQuery update?&lt;/p&gt;
&lt;p&gt;I would love to have this.  I no longer work for an implementation of XQuery.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@adamretter added:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sounds like a nice idea&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #76 created</title>
   <pubDate>Mon, 24 May 2021 22:00:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/76</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-76</guid>
   <description>&lt;div&gt;&lt;p&gt;non-deterministic time&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;current-date/Time&lt;/code&gt; functions are deterministic, so they always return the same time, which is very confusing to everyone&lt;/p&gt;
&lt;p&gt;There could be &lt;code&gt;actual-current-date/Time&lt;/code&gt; functions that return the actual time non-deterministically. Or call it &lt;code&gt;wall-date/Time&lt;/code&gt;  or &lt;code&gt;system-date/Time&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #75 created</title>
   <pubDate>Fri, 14 May 2021 20:10:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/75</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-75</guid>
   <description>&lt;div&gt;&lt;p&gt;Support processing HTML 5 template element content&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;The Problem&lt;/h1&gt;
&lt;p&gt;The HTML 5 specification introduces a &lt;code&gt;template&lt;/code&gt; element [1], [2] where the content of that element doesn't represent children of it, but are part of a content property. The root node of the content property is a DocumentFragment which is a light-weight document node. These specifications provide some non-normative guidelines for interacting with XSLT and XPath [3].&lt;/p&gt;
&lt;p&gt;The DocumentFragment interface is defined in the HTML DOM 4.1 [4] as an instance of a Node. Within the HTML 5 specification, it is only referenced in relation to the &lt;code&gt;template&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;This affects the proposed &lt;code&gt;fn:parse-html&lt;/code&gt; (issue #74) function as well as databases and query processors that support storing and accessing HTML5 content via &lt;code&gt;fn:doc&lt;/code&gt; and other APIs.&lt;/p&gt;
&lt;h1&gt;Requirements&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Accurately represent the contents of the &lt;code&gt;template&lt;/code&gt; element in the DOM/data model.&lt;/li&gt;
&lt;li&gt;Allow a conforming implementation to process the &lt;code&gt;template&lt;/code&gt; content as if it was XML content -- i.e. using the child:: axis to access the content.&lt;/li&gt;
&lt;li&gt;Allow a conforming implementation to process the &lt;code&gt;template&lt;/code&gt; content separately from child content -- e.g. if the implementation has support for the HTML DOM.&lt;/li&gt;
&lt;li&gt;Allow authors to select the content of a &lt;code&gt;template&lt;/code&gt; element.&lt;/li&gt;
&lt;li&gt;Minimize changes to the data model specification. [*]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[*] I don't believe it is possible to support this without some changes to the data model (see the Design section below).&lt;/p&gt;
&lt;h1&gt;Design&lt;/h1&gt;
&lt;h2&gt;Storing the content of the template&lt;/h2&gt;
&lt;p&gt;There are 3 options to handling the content of a &lt;code&gt;template&lt;/code&gt; element.&lt;/p&gt;
&lt;h3&gt;1. As children&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Store the content as child elements of the &lt;code&gt;template&lt;/code&gt; element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is how conforming processors that only understand XML content will process and view the document.&lt;/p&gt;
&lt;h3&gt;2. As a document node&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Store the content as children of a &lt;code&gt;document&lt;/code&gt; node, where the parent of the document node is the &lt;code&gt;template&lt;/code&gt; element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This would be the minimal amount of changes needed to make the HTML5 model work. The only change I can see is that this won't conform to section &lt;em&gt;6.1.2 Accessors&lt;/em&gt; of the data model, in that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;dm:parent&lt;/code&gt;
Returns the empty sequence&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;dm:parent&lt;/code&gt;
If this is a document fragment for a &lt;code&gt;template&lt;/code&gt; element, returns the &lt;code&gt;template&lt;/code&gt; element. Otherwise, returns the empty sequence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Implementors using the HTML DOM would need to map DocumentFragment nodes to &lt;code&gt;document-node()&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;3. As a new document-fragment node&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Store the content as children of a new &lt;code&gt;document-fragment&lt;/code&gt; node type, where the parent of the document-fragment node is the &lt;code&gt;template&lt;/code&gt; element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the option that is most compatible with the HTML DOM as it mirrors the &lt;code&gt;DocumentFragment&lt;/code&gt; interface from that, but is also the one that is the most invasive. It will require (among other things):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Defining rules in section &lt;em&gt;6. Nodes&lt;/em&gt; of the data model for &lt;em&gt;Document Fragment Nodes&lt;/em&gt; -- accessors, construction from infoset and PSVI, and infoset mapping.&lt;/li&gt;
&lt;li&gt;Adding a new &lt;code&gt;document-fragment()&lt;/code&gt; &lt;code&gt;KindTest&lt;/code&gt; to the supported node/item types.&lt;/li&gt;
&lt;li&gt;Adding &lt;code&gt;subtype-itemtype&lt;/code&gt; rules for the document fragment nodes.&lt;/li&gt;
&lt;li&gt;Adding a new &lt;code&gt;document-fragment { ... }&lt;/code&gt; computed constructor for XQuery.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Selecting template content&lt;/h2&gt;
&lt;p&gt;A new forward axis should be added that supports selecting fragment nodes. Some of the possible names include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fragment::&lt;/code&gt; -- following the pattern defined by the &lt;code&gt;attribute::&lt;/code&gt; axis; or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content::&lt;/code&gt; -- following the nomenclature from the HTML specification for the &lt;code&gt;template&lt;/code&gt; element contents.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The behaviour will depend on which of the 3 options above is selected for storing the content type:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If an implementation only supports XML (option 1), the new axis will work the same as &lt;code&gt;child::&lt;/code&gt;. The principle node kind is &lt;em&gt;element&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;If option 2 is chosen (reuse the document node), the new axis will match document nodes whose parent is a &lt;code&gt;template&lt;/code&gt; element. The principle node kind is &lt;em&gt;document&lt;/em&gt;. &lt;strong&gt;Note:&lt;/strong&gt; This has an ambiguity with the reverse axes, as it is checking the parent of the node as well as the node type.&lt;/li&gt;
&lt;li&gt;If option 3 is chosen (create a document fragment node), the new axis will match any document fragment nodes. The principle node kind is &lt;em&gt;document fragment&lt;/em&gt;. &lt;strong&gt;Note:&lt;/strong&gt; This makes more sense when the &lt;code&gt;fragment::&lt;/code&gt; name is used for the axis, and would be more generally applicable, such as for computed constructor created fragments, or HTML DocumentFragments created from a JavaScript or web browser XPath/XSLT/XQuery binding such as Saxon-JS.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;[1] https://www.w3.org/TR/html52/semantics-scripting.html#the-template-element
[2] https://html.spec.whatwg.org/#the-template-element
[3] https://www.w3.org/TR/html52/semantics-scripting.html#interaction-of-template-elements-with-xslt-and-xpath
[4] https://www.w3.org/TR/dom41/#documentfragment&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #74 created</title>
   <pubDate>Fri, 14 May 2021 15:09:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/74</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-74</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Support parsing HTML&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It is common for applications that use an XQuery database engine to want to parse HTML documents when adding content from HTML pages into a database, or in other applications like generating epub documents from HTML source files. Vendors like MarkLogic (&lt;code&gt;xdmp:tidy&lt;/code&gt; via HTML Tidy for HTML4), BaseX (&lt;code&gt;html:parse&lt;/code&gt; via TagSoup), Saxon (&lt;code&gt;saxon:parse-html&lt;/code&gt; via TagSoup), and eXist-db (&lt;code&gt;util:parse-html&lt;/code&gt; via Neko) have provided custom methods to support this.&lt;/p&gt;
&lt;p&gt;Q: Should there also be functions to list the supported methods and character encodings?&lt;/p&gt;
&lt;h1&gt;fn:parse-html&lt;/h1&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Parses HTML-based input into an XML document.&lt;/p&gt;
&lt;h2&gt;Signature&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;fn:parse-html($input as union(xs:string, xs:hexBinary, xs:base64Binary),
              $options as map(*) := map { "method": "html5" }) as document-node()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Properties&lt;/h2&gt;
&lt;p&gt;This function is ·deterministic·, ·context-independent·, and ·focus-independent·.&lt;/p&gt;
&lt;h2&gt;Rules&lt;/h2&gt;
&lt;p&gt;The $options map conforms to &lt;code&gt;record(method as union(enum("html5"), xs:string), encoding as xs:string?, *)&lt;/code&gt;. A vendor may provide ·implementation-dependent· options that may vary between the different &lt;code&gt;method&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;method&lt;/code&gt; property of $options defines the approach used to convert the HTML document to XML. This specification supports &lt;code&gt;html5&lt;/code&gt; for using the HTML5 parsing rules for HTML content. The exact version of HTML5 used is ·implementation-dependent·.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;encoding&lt;/code&gt; property of $options defines the character encoding used to decode binary data. By default, this is an empty sequence. Implementations must support at least &lt;code&gt;utf-8&lt;/code&gt;, &lt;code&gt;utf8&lt;/code&gt;, &lt;code&gt;ascii&lt;/code&gt;, and &lt;code&gt;latin1&lt;/code&gt;. Other encoding values are ·implementation-dependent·, but it is recommended that the encodings documented in the WHATWG Encoding specification [3] are supported.&lt;/p&gt;
&lt;p&gt;If $input is an &lt;code&gt;xs:string&lt;/code&gt;, no character decoding is performed as the input is already decoded.&lt;/p&gt;
&lt;p&gt;If $input is an &lt;code&gt;xs:hexBinary&lt;/code&gt; or &lt;code&gt;xs:base64Binary&lt;/code&gt;, the character encoding used to decode the binary data is determined as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;if the binary data has a valid Unicode Byte Order Mark (BOM), the character encoding specified by that BOM is used.&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;encoding&lt;/code&gt; is specified in $options, that value is used;&lt;/li&gt;
&lt;li&gt;if prescanning the first 1024 bytes of data contains a character encoding (using the rules from https://html.spec.whatwg.org/multipage/parsing.html#prescan-a-byte-stream-to-determine-its-encoding), the detected encoding is used;&lt;/li&gt;
&lt;li&gt;if ·implementation-dependent· heuristics (in line with the HTML5 rules) detect a character encoding, that encoding is used;&lt;/li&gt;
&lt;li&gt;otherwise, the encoding is "utf-8".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the detected character encoding name is not supported, an &lt;code&gt;FO######&lt;/code&gt; error is raised. Otherwise, the character encoding method associated with the character encoding is used.&lt;/p&gt;
&lt;p&gt;If the parsing method is not supported, an &lt;code&gt;FO######&lt;/code&gt; error is raised.&lt;/p&gt;
&lt;p&gt;The $input is then parsed according to the specified parsing method, building an intermediate HTML Document object. The XML &lt;code&gt;document-node&lt;/code&gt; is then constructed by mapping the HTML document, element, attribute, text, and comment nodes to their XML equivalents.&lt;/p&gt;
&lt;p&gt;If a HTML document contains a &lt;code&gt;template&lt;/code&gt; element, the contents of that element are added as children of the &lt;code&gt;template&lt;/code&gt; element. It is ·implementation-dependent· whether or not a processor ignores this content when evaluating path expressions on these &lt;code&gt;template&lt;/code&gt; elements, and how they are represented in any DOM interfaces.&lt;/p&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The character encoding logic follows the https://html.spec.whatwg.org/multipage/parsing.html#encoding-sniffing-algorithm rules.&lt;/p&gt;
&lt;p&gt;HTML does not support processing instructions. They are treated as comments in the HTML5 specification.&lt;/p&gt;
&lt;p&gt;The HTML &lt;code&gt;template&lt;/code&gt; element is complex as the HTML specification defines its content as being part of a separate document that is associated with the template contents property of that element, not its children. The WHATWG specification provides a non-normative guide for XSLT and XPath interacting with these elements (https://html.spec.whatwg.org/#template-XSLT-XPath).&lt;/p&gt;
&lt;p&gt;A conforming implementation may choose to parse and return the HTML into a HTML-based data model (e.g. the HTML DOM) instead of generating an XML infoset or PSVI. This is valid as long as the accessor functions (https://www.w3.org/TR/xpath-datamodel-31/#accessors) and the various syntax that works with XML nodes also works for the HTML nodes. That is, expressions like &lt;code&gt;$html/html/body/p instance of element(p)&lt;/code&gt; are supported.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The expression &lt;code&gt;fn:parse-html("&amp;lt;html&amp;gt;")&lt;/code&gt; returns an empty html document constructed using the HTML5 document construction rules.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;fn:parse-html($html, encoding: "latin2")&lt;/code&gt; uses the &lt;code&gt;latin2&lt;/code&gt; character encoding to parse $html, or generates an FO###### error if the processor does not support that encoding.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;fn:parse-html($html, method: "html5", encoding: ())&lt;/code&gt; is equivalent to &lt;code&gt;fn:parse-html($html)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;fn:parse-html($html, method: "tidy")&lt;/code&gt; uses the &lt;code&gt;tidy&lt;/code&gt; method (e.g. from the HTML Tidy application) to parse $html into an XML document if supported by the implementation. Otherwise an &lt;code&gt;FO######&lt;/code&gt; error is raised.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;fn:parse-html($html, method: "tagsoup", nons: true())&lt;/code&gt; uses the &lt;code&gt;tagsoup&lt;/code&gt; method (e.g. from the TagSoup application) to parse $html into an XML document if supported by the implementation, passing the &lt;code&gt;--nons&lt;/code&gt; attribute. Otherwise an &lt;code&gt;FO######&lt;/code&gt; error is raised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/html52/"&gt;HTML 5.2&lt;/a&gt;, W3C.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://html.spec.whatwg.org/multipage/"&gt;HTML Living Standard&lt;/a&gt;, WHATWG.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://encoding.spec.whatwg.org/"&gt;Encoding Living Standard&lt;/a&gt;, WHATWG.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #73 created</title>
   <pubDate>Fri, 7 May 2021 07:33:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/73</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-73</guid>
   <description>&lt;div&gt;&lt;p&gt;Split a string by graphemes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The new &lt;code&gt;fn:characters&lt;/code&gt; function is useful, but doesn't solve a problem of manipulating strings where multiple codepoints correspond to a single grapheme. For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;characters with one or more combining characters;&lt;/li&gt;
&lt;li&gt;emoji with skin tone variant selectors;&lt;/li&gt;
&lt;li&gt;emoji with gender variant selectors;&lt;/li&gt;
&lt;li&gt;multi-sequence emoji -- family, wales flag, etc.;&lt;/li&gt;
&lt;li&gt;region indicator pairs for flags.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Getting this right is complex, and implementing it as a regular expression is easy to get wrong/make mistakes.&lt;/p&gt;
&lt;h1&gt;fn:graphemes&lt;/h1&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Splits the supplied string into a sequence of single-grapheme (one or more character) strings.&lt;/p&gt;
&lt;h2&gt;Signature&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fn:graphemes($value as xs:string?) as xs:string*&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Properties&lt;/h2&gt;
&lt;p&gt;This function is ·deterministic·, ·context-independent·, and ·focus-independent·.&lt;/p&gt;
&lt;h2&gt;Rules&lt;/h2&gt;
&lt;p&gt;The function returns a sequence of strings, containing the corresponding ·grapheme· in $value. These are determined by the corresponding Unicode rules for what constitutes a ·grapheme·. The version of Unicode and the Unicode Emoji standards is ·implementation-dependent·.&lt;/p&gt;
&lt;p&gt;If $value is a zero-length string or the empty sequence, the function returns the empty sequence.&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The expression &lt;code&gt;fn:graphemes("Thérèse")&lt;/code&gt; returns &lt;code&gt;("T", "h", "é", "r", "è", "s", "e")&lt;/code&gt;, irrespective of whether the e characters use combining characters or not.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;fn:graphemes("")&lt;/code&gt; returns &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;fn:graphemes(())&lt;/code&gt; returns &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;fn:graphemes("👋🏻👋🏼👋🏽👋🏾👋🏿")&lt;/code&gt; returns &lt;code&gt;("👋🏻", "👋🏼", "👋🏽", "👋🏾", "👋🏿")&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;fn:graphemes("👪")&lt;/code&gt; returns &lt;code&gt;("👪")&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;fn:graphemes("👨‍🔬👩‍🔬")&lt;/code&gt; returns &lt;code&gt;("👨‍🔬", "👩‍🔬")&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;fn:graphemes("🇪🇪🇩🇪🇫🇷🏴󠁧󠁢󠁷󠁬󠁳󠁿🇮🇸")&lt;/code&gt; returns &lt;code&gt;("🇪🇪", "🇩🇪", "🇫🇷", "🏴󠁧󠁢󠁷󠁬󠁳󠁿", "🇮🇸")&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #72 created</title>
   <pubDate>Tue, 4 May 2021 07:38:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/72</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-72</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Provide better support for URI processing within an expression&lt;/p&gt;&lt;div class="markup"&gt;&lt;blockquote&gt;
&lt;p&gt;Use Case 1: Decode an encoded URI string.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is difficult to implement correctly, and is a commonly asked question/request on sites like stackoverflow. Vendors have even implemented their own functions, like &lt;code&gt;xdmp:uri-decode&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use Case 2: Extracting the hash/parameters from a URI string.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is common when manipulating URI strings and not using something like RESTXQ to bind the query parameters to function parameters. The API should:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;extract the hash as a string, and the parameters as a name/value map;&lt;/li&gt;
&lt;li&gt;combine parameters with the same name into the same map entry;&lt;/li&gt;
&lt;li&gt;decode the values where necessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Use Case 3: Extract the other parts of a URI string.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This can be useful if writing a RESTXQ or similar implementation in XSLT/XQuery. It can also be useful for generating response headers such as Origin, or doing HTTP to HTTPS redirects.&lt;/p&gt;
&lt;p&gt;It is easy to make mistakes and the wrong assumptions when writing a URI parser by hand. Additionally, it is not easy to implement in XSLT/XQuery as functions like &lt;code&gt;analyse-string&lt;/code&gt; and &lt;code&gt;tokenize&lt;/code&gt; are not powerful enough to implement a lexer, and manipulating codepoints is difficult without stateful logic.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #71 created</title>
   <pubDate>Tue, 13 Apr 2021 08:42:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/71</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-71</guid>
   <description>&lt;div&gt;&lt;p&gt;[XSLT] Use of multiple predicates: order of evaluation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I notice I added an example pattern to the draft XSLT4 spec &lt;code&gt;match=".[. castable as xs:date][xs:date(.) le current-date()]"&lt;/code&gt; which is incorrect because processors are allowed to change the order of predicates, so you can't use the first predicate as a guard to stop the second predicate throwing an error. I've seen users fall over this (Saxon does sometimes reorder predicates). My instinct is to ban reordering of predicates; if you want to allow it, you can use the "and" operator. An alternative would be an "and" operator (say "and-also") with explicit ordering semantics, as in XPath 1.0.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #70 created</title>
   <pubDate>Mon, 12 Apr 2021 16:47:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/70</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-70</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Built-in function changes to support default values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue tracks the changes needed to the built-in functions to allow them to combine the declarations into a single definition with default parameter values.&lt;/p&gt;
&lt;p&gt;The general approach to this is to make required arguments optional if they are for a function signature that is not the lowest argument count signature, and move any associated logic into the function.&lt;/p&gt;
&lt;h2&gt;array:subarray&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;array:subarray&lt;/code&gt;/&lt;code&gt;$length&lt;/code&gt; from &lt;code&gt;xs:integer&lt;/code&gt; to &lt;code&gt;xs:integer?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Rules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Except in error cases, the result of the function is the value of the expression op:A2S($array) =&amp;gt; fn:subsequence($start, $length) =&amp;gt; op:S2A().&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Error Conditions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A dynamic error is raised [err:FOAY0001] if $start is less than one or greater than array:size($array) + 1.&lt;/p&gt;
&lt;p&gt;A dynamic error is raised [err:FOAY0002] if $length is not an empty sequence and is less than zero.&lt;/p&gt;
&lt;p&gt;A dynamic error is raised [err:FOAY0001] if $length is not an empty sequence and $start + $length is greater than array:size($array) + 1.&lt;/p&gt;
&lt;h2&gt;fn:concat&lt;/h2&gt;
&lt;p&gt;This should be modified to use a sequence-variadic signature, either as a 1 parameter function (taking an &lt;code&gt;xs:anyAtomicType*&lt;/code&gt; value, allowing 0 and 1 arguments), or a 3 parameter function with the last parameter having the type &lt;code&gt;xs:anyAtomicType*&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;fn:differences&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;$options&lt;/code&gt; parameter should be moved to the end of the parameter list in order to make the function a map-variadic function when default values are applied. This then makes it possible to specify the collation argument using a keyword argument in addition to specifying options as keyword arguments.&lt;/p&gt;
&lt;h2&gt;fn:resolve-uri&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:resolve-uri&lt;/code&gt;/&lt;code&gt;$base&lt;/code&gt; from &lt;code&gt;node()&lt;/code&gt; to &lt;code&gt;node()?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;- If the $base argument is not supplied,
+ If the $base argument is the empty sequence,
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;fn:subsequence&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:subsequence&lt;/code&gt;/&lt;code&gt;$length&lt;/code&gt; from &lt;code&gt;xs:double&lt;/code&gt; to &lt;code&gt;xs:double?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When $length is the empty sequence, this function returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$input[fn:round($start) le position()]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When $length is not the empty sequence, this function returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$input[fn:round($start) le position() 
         and position() lt fn:round($start) + fn:round($length)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;fn:substring&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:subsequence&lt;/code&gt;/&lt;code&gt;$length&lt;/code&gt; from &lt;code&gt;xs:double&lt;/code&gt; to &lt;code&gt;xs:double?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More specifically, when $length is not the empty sequence the function returns the characters in $value whose position $p satisfies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:round($start) &amp;lt;= $p and $p &amp;lt; fn:round($start) + fn:round($length)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When $length is the empty sequence the function assumes that $length is infinite and thus returns the ·characters· in $value whose position $p satisfies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:round($start) &amp;lt;= $p
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;fn:tokenize&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:tokenize&lt;/code&gt;/&lt;code&gt;$pattern&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If $pattern is the empty sequence, the $value argument is set to &lt;code&gt;fn:normalize-space($value)&lt;/code&gt; and $pattern is set to &lt;code&gt;' '&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;fn:unparsed-text / fn:unparsed-text-available&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:unparsed-text&lt;/code&gt;/&lt;code&gt;$encoding&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:unparsed-text-available&lt;/code&gt;/&lt;code&gt;$encoding&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;fn:unparsed-text-lines&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:unparsed-text-lines&lt;/code&gt;/&lt;code&gt;$encoding&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The result of the function is the same as the result of the expression &lt;code&gt;fn:tokenize(fn:unparsed-text($href, $encoding), '\r\n|\r|\n')[not(position()=last() and .='')]&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Collations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:collation-key&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:compare&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:contains&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:contains-token&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:deep-equal&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:differences&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:distinct-values&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:ends-with&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:index-of&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:max&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:min&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:starts-with&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:substring-after&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:substring-before&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:uniform&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:unique&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Passing the empty sequence to the $collation argument is equivalent to supplying the default collation to that argument.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #69 created</title>
   <pubDate>Mon, 12 Apr 2021 16:46:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/69</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-69</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:document, fn:function-available: default arguments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue tracks the changes needed to the built-in functions to allow them to combine the declarations into a single definition with default parameter values.&lt;/p&gt;
&lt;p&gt;The general approach to this is to make required arguments optional if they are for a function signature that is not the lowest argument count signature, and move any associated logic into the function.&lt;/p&gt;
&lt;h2&gt;fn:document&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:document&lt;/code&gt;/&lt;code&gt;$base-node&lt;/code&gt; from &lt;code&gt;node()&lt;/code&gt; to &lt;code&gt;node()?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;- If $base-node is supplied,
+ If $base-node is not empty,
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;fn:function-available&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:function-available&lt;/code&gt;/&lt;code&gt;$arity&lt;/code&gt; from &lt;code&gt;xs:integer&lt;/code&gt; to &lt;code&gt;xs:integer?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If $arity is the empty sequence, the function-available function returns true if and only if there is at least one available function (with some arity) whose name matches the value of the $name argument.&lt;/p&gt;
&lt;p&gt;If $arity is not the empty sequence, the function-available function returns true if and only if there is an available function whose name matches the value of the $function-name argument and whose arity matches the value of the $arity argument.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #68 closed</title>
   <pubDate>Mon, 12 Apr 2021 14:25:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/68</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-68</guid>
   <description>&lt;div&gt;&lt;p&gt;Don't attempt to upgrade the host&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #68 created</title>
   <pubDate>Mon, 12 Apr 2021 14:25:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/68</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-68</guid>
   <description>&lt;div&gt;&lt;p&gt;Don't attempt to upgrade the host&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The CI script shouldn't attempt to upgrade the host. CircleCI have customized some of the packages so upgrading doesn't work. And it shouldn't really be necessary anyway.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #67 created</title>
   <pubDate>Fri, 9 Apr 2021 09:59:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/67</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-67</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow optional parameters and keyword arguments on map and sequence variadic functions.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;These proposed draft changes seek to address the following issues with, and limitations of, the current draft specification:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;%variadic("sequence")&lt;/code&gt; function where the sequence type uses the &lt;code&gt;+&lt;/code&gt; occurrence indicator should not have an implicit default value. That would mean passing &lt;code&gt;()&lt;/code&gt; to the sequence, which would generate a coercion error.&lt;/li&gt;
&lt;li&gt;Map-variadic and sequence-variadic functions cannot have user-specified default parameter values with the current draft wording. In this case the map/sequence last parameter need to be given a default in the function declaration. This allows those to be defaulted to something other than an empty map/sequence, as well as specifying the defaults for other parameters (e.g. in the case where a map is the last of several parameters).&lt;/li&gt;
&lt;li&gt;It should be possible to allow parameters to be specified as keyword arguments for map-variadic functions. For map-variadic functions, a keyword argument will be bound to a parameter if it matches the parameter, or added to the map if not.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Note:&lt;/p&gt;
&lt;p&gt;It would be nice to support keyword arguments for sequence-variadic functions. The other design notes detail a possible way to implement this logic. This would resolve issue #26, and make the features (keyword arguments in this case) usable in all cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Proposal&lt;/h2&gt;
&lt;p&gt;There are two orthogonal concepts related to variadic functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;arity bounds&lt;/em&gt; -- the number of required and optional parameters a function has;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;variadic type&lt;/em&gt; -- how the function behaves in relation to its last parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Arity Bounds&lt;/h3&gt;
&lt;p&gt;[Definition: The &lt;em&gt;declared arity&lt;/em&gt; of a function is the number of parameters defined in the function declaration.] The declared arity includes both required and optional parameters.&lt;/p&gt;
&lt;p&gt;[Definition: An &lt;em&gt;optional parameter&lt;/em&gt; is a parameter with a default value.] The default value may either be specified in the function declaration, or determined by the logic described below.&lt;/p&gt;
&lt;p&gt;[Definition: A &lt;em&gt;declared optional parameter&lt;/em&gt; is an optional parameter specified in the function declaration.] TODO: Define a syntax for specifying declared optional parameters. [Note: see issue #64 for a proposal on doing this.]&lt;/p&gt;
&lt;p&gt;The property &lt;code&gt;A&lt;/code&gt; is the &lt;em&gt;declared arity&lt;/em&gt; of a function.&lt;/p&gt;
&lt;p&gt;The property &lt;code&gt;D&lt;/code&gt; is the number of optional parameters. This is determined as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If there are any declared optional parameters, &lt;code&gt;D&lt;/code&gt; is the number of declared optional parameters.&lt;/li&gt;
&lt;li&gt;If the last parameter is a &lt;code&gt;MapTest&lt;/code&gt; or &lt;code&gt;RecordTest&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; is 1.&lt;/li&gt;
&lt;li&gt;If the last parameter is a sequence type with a minimum item occurrence of 0 (e.g. using the &lt;code&gt;*&lt;/code&gt; occurrence indicator), &lt;code&gt;D&lt;/code&gt; is 1.&lt;/li&gt;
&lt;li&gt;If none of the above apply, &lt;code&gt;D&lt;/code&gt; is 0.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The property &lt;code&gt;R&lt;/code&gt; is the number of required parameters, and is determined by evaluating &lt;code&gt;A-D&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Variadic Type&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;variadic type&lt;/em&gt; is given by the &lt;code&gt;%variadic(enum("no", "map", "sequence"))&lt;/code&gt; annotation. It is determined as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the last parameter is a &lt;code&gt;MapTest&lt;/code&gt; or &lt;code&gt;RecordTest&lt;/code&gt;, &lt;code&gt;%variadic("map")&lt;/code&gt; is specified.&lt;/li&gt;
&lt;li&gt;If the last parameter is a sequence type with an unbounded maximum item occurrence (e.g. using the &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; occurrence indicator), &lt;code&gt;%variadic("sequence")&lt;/code&gt; is specified.&lt;/li&gt;
&lt;li&gt;If none of the above apply, &lt;code&gt;%variadic("no")&lt;/code&gt; is specified.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[Definition: The &lt;em&gt;variadic parameter&lt;/em&gt; of a function refers to the last parameter of a map-variadic or sequence-variadic function.]&lt;/p&gt;
&lt;p&gt;The values of the MinA/MaxA, MinP/MaxP, and MinK/MaxK properties are given by the following table, where &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt; are defined in the &lt;em&gt;arity bounds&lt;/em&gt; section.&lt;/p&gt;
&lt;p&gt;| &lt;code&gt;%variadic&lt;/code&gt;    | MinA | MaxA      | MinP | MaxP      | MinK | MaxK      |
|----------------|------|-----------|------|-----------|------|-----------|
| &lt;code&gt;no&lt;/code&gt;           | R    | A         | 0    | A         | 0    | A         |
| &lt;code&gt;map&lt;/code&gt;          | R    | unbounded | 0    | A         | 0    | unbounded |
| &lt;code&gt;sequence&lt;/code&gt;     | R    | unbounded | R    | unbounded | 0    | 0         |&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;%variadic("no")&lt;/code&gt; and &lt;code&gt;%variadic("map")&lt;/code&gt; functions, positional and keyword arguments can be mixed, or the arguments can be specified as either all positional arguments, or all keyword arguments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;If a keyword argument has the name of the variadic parameter for a map-variadic function, it is used to specify the value of that map, and not a key in a constructed map. In this case, the other keyword arguments must specify parameter names as the value of the variadic parameter has already been specified, and would result in a conflicting value if any of the keyword arguments were specifying keys in the variadic parameter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For &lt;code&gt;%variadic("sequence")&lt;/code&gt; functions, only positional parameters are allowed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Note:&lt;/p&gt;
&lt;p&gt;Keyword arguments &lt;em&gt;could&lt;/em&gt; be supported for sequence-variadic functions if the presence of a keyword argument makes it function like &lt;code&gt;%variadic("no")&lt;/code&gt;. That is, it is not unbounded in this case. This would work, as keyword arguments occur after positional arguments, and the variadic parameter would need to be specified as a keyword argument.&lt;/p&gt;
&lt;p&gt;The tricky part of this is that MinA/MaxA would no longer be statically determinable, in that they would depend on whether the function call used keyword arguments.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sequence&lt;/code&gt; row would be modified as follows:&lt;/p&gt;
&lt;p&gt;| &lt;code&gt;%variadic&lt;/code&gt;    | MinA | MaxA      | MinP | MaxP      | MinK | MaxK      |
|----------------|------|-----------|------|-----------|------|-----------|
| &lt;code&gt;sequence&lt;/code&gt;     | R    | variable [1] | 0    | unbounded | 0    | A         |&lt;/p&gt;
&lt;p&gt;[1] If the function call has at least one keyword argument, &lt;code&gt;MaxA&lt;/code&gt; is &lt;code&gt;A&lt;/code&gt;. Otherwise, &lt;code&gt;MaxA&lt;/code&gt; is &lt;code&gt;unbounded&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Evaluating Static Function Calls&lt;/h3&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;
&lt;p&gt;Positional argument values are mapped to parameters in the function declaration as follows:
Let the number of declared parameters be N.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A positional argument with position M, (M &amp;lt; N) corresponds to the parameter in position M.&lt;/li&gt;
&lt;li&gt;For sequence-variadic functions, the values of arguments in positions greater than or equal to N are concatenated into a sequence, and the resulting sequence is supplied as the value of parameter N. If there are no such arguments (that is, if N-1 arguments are supplied), then the value supplied for parameter N is an empty sequence.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyword argument values are mapped to parameters in the function declaration as follows:
Let the keyword corresponding to a keyword argument be K.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If there is a parameter with name K, the keyword argument corresponds to the named parameter K.&lt;/li&gt;
&lt;li&gt;For map-variadic functions, the keyword argument is assembled into a map. For each keyword argument, the map has an entry whose name is the keyword (as an instance of &lt;code&gt;xs:string&lt;/code&gt;) and whose corresponding value is the argument value.&lt;/li&gt;
&lt;li&gt;For non-variadic functions, an XPST#### error is raised if there is no parameter with name K.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Note:&lt;/p&gt;
&lt;p&gt;If supporting keyword arguments for sequence-variadic functions, 4/iii would handle them. That is, an error is raised if the keyword name does not match a parameter name.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start="5"&gt;
&lt;li&gt;
&lt;p&gt;If no argument corresponds to a parameter in the function declaration:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the parameter has a default value, then that value is used.
TODO: define how the default value is evaluated, i.e. what context is used.&lt;/li&gt;
&lt;li&gt;For sequence-variadic functions, the value supplied for parameter N is an empty sequence.&lt;/li&gt;
&lt;li&gt;For map-variadic functions, the value supplied for parameter N is the map constructed in step 4. If no keyword arguments were used to construct the map, and empty map is used.&lt;/li&gt;
&lt;li&gt;If none of the above apply, an XPST#### error is raised.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If more than one argument corresponds to a parameter in the function declaration, an XPST#### error is raised.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #66 created</title>
   <pubDate>Tue, 30 Mar 2021 18:28:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/66</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-66</guid>
   <description>&lt;div&gt;&lt;p&gt;ThinArrowTarget should use FunctionBody&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;For consistency with &lt;code&gt;FunctionDecl&lt;/code&gt; and &lt;code&gt;InlineFunctionExpr&lt;/code&gt; (both of which use &lt;code&gt;FunctionBody&lt;/code&gt; for the function body instead of &lt;code&gt;EnclosedExpr&lt;/code&gt;), &lt;code&gt;ThinArrowTarget&lt;/code&gt; should also use &lt;code&gt;FunctionBody&lt;/code&gt; for the inline function call version (e.g. &lt;code&gt;2 -&amp;gt; { . + 1 }&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ThinArrowTarget ::= "-&amp;gt;" ( (ArrowStaticFunction ArgumentList) |
                           (ArrowDynamicFunction PositionalArgumentList) |
                           FunctionBody )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #65 created</title>
   <pubDate>Mon, 29 Mar 2021 17:13:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/65</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-65</guid>
   <description>&lt;div&gt;&lt;p&gt;Support using different input/output element namespaces&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;Use Case&lt;/h2&gt;
&lt;p&gt;There have been requests for specifying the output namespace in XQuery akin to the &lt;code&gt;@xpath-default-namespace&lt;/code&gt; element in XSLT. With the element and type namespaces now being able to be set independently, it would be a good idea to make this change as well, splitting the input and output default XML namespaces.&lt;/p&gt;
&lt;h2&gt;Grammar&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;DefaultNamespaceDecl ::= "declare"  "default"  ((("input" | "output")? "element")  |  "type"  |  "function")
                         "namespace"  URILiteral
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;New Semantics&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;default element namespace&lt;/em&gt; static context item is split into a &lt;em&gt;default input element namespace&lt;/em&gt; that applies to input element contexts (e.g. path steps), and a &lt;em&gt;default output element namespace&lt;/em&gt; that applies to output element contexts (e.g. direct/constructed elements).&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;scope&lt;/em&gt; of the default namespace declaration is the &lt;code&gt;element&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;input element&lt;/code&gt;, &lt;code&gt;output element&lt;/code&gt;, or &lt;code&gt;type&lt;/code&gt; namespace specified in the declaration.&lt;/p&gt;
&lt;p&gt;A default namespace declaration with the &lt;em&gt;element&lt;/em&gt; scope will set any of the &lt;em&gt;input element&lt;/em&gt;, &lt;em&gt;output element&lt;/em&gt;, and &lt;em&gt;type&lt;/em&gt; namespaces that have not been set by a corresponding &lt;em&gt;input element&lt;/em&gt;, &lt;em&gt;output element&lt;/em&gt;, or &lt;em&gt;type&lt;/em&gt; scoped default namespace declaration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;Given &lt;code&gt;declare default input element namespace "A"; declare default element namespace "B";&lt;/code&gt;, the &lt;em&gt;output element&lt;/em&gt; and &lt;em&gt;type&lt;/em&gt; namespaces will be specified by the &lt;em&gt;element&lt;/em&gt; scope default namespace declaration "B", and the &lt;em&gt;input element&lt;/em&gt; namespace will be specified by the &lt;em&gt;input element&lt;/em&gt; scope default namespace declaration "A".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;p&gt;Map all element symbols/contexts as using either the &lt;em&gt;input element&lt;/em&gt; or &lt;em&gt;output element&lt;/em&gt; default namespace for NCName EQNames.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #64 created</title>
   <pubDate>Fri, 12 Mar 2021 08:55:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/64</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-64</guid>
   <description>&lt;div&gt;&lt;p&gt;Specify optional parameters to create bounded variadic functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current Editor's Draft for XPath and XQuery define a &lt;code&gt;%variadic("bounded")&lt;/code&gt; function type, but does not define a syntax for specifying these.&lt;/p&gt;
&lt;h2&gt;Grammar&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ParamList ::= RequiredParamList ( "," OptionalParamList )?
RequiredParamList ::= Param ("," Param)*
Param ::= "$" EQName TypeDeclaration?
OptionalParamList ::= OptionalParam ("," OptionalParam)*
OptionalParam ::= Param ":=" ExprSingle
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;I've followed the structure of positional and keyword arguments here, so the optional parameters are only valid at the end of the function. If it is decided that optional parameters can be declared anywhere in the parameter list, the grammar simplifies to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ParamList ::= Param ("," Param)*
Param ::= "$" EQName TypeDeclaration? ( ":=" ExprSingle )?
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Semantics&lt;/h2&gt;
&lt;p&gt;[Definition: a parameter is an &lt;em&gt;optional parameter&lt;/em&gt; if it has a default value specified using the &lt;code&gt;:= ExprSingle&lt;/code&gt; syntax.] Optional parameters affect the value of R (the number of parameters that do not have a default value) in the &lt;em&gt;4.4.1 Static Functions&lt;/em&gt; section.&lt;/p&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;There are open questions on what to allow in the default value expression. Specifically, how to support things like the context item for functions such as &lt;code&gt;fn:data#0&lt;/code&gt; that use the context item if not specified (e.g. when used at the end of a path expression).&lt;/p&gt;
&lt;p&gt;An investigation should be done on the standard functions and vendor built-in functions to see what values they take as defaults.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #63 created</title>
   <pubDate>Tue, 2 Mar 2021 16:02:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/63</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-63</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:slice, array:slice: Signatures, Examples&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; 1. is obsolete, 2. and 3. are still up-to-date:&lt;/p&gt;
&lt;p&gt;1. The current specification for &lt;code&gt;fn:slice&lt;/code&gt; has only one signature.&lt;/p&gt;
&lt;p&gt;It might be recommendable to also provide signatures with 1 and 2 arguments (especially for users who don’t want to use the new syntax for specifying optional arguments).&lt;/p&gt;
&lt;p&gt;2. The last examples look wrong; I would expect the input as results:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The expression fn:slice(("a", "b", "c", "d"), 0) returns ().
The expression array:slice(["a", "b", "c", "d"], 0) returns [].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3. The first argument of &lt;code&gt;array:slice&lt;/code&gt; should be renamed from &lt;code&gt;$input&lt;/code&gt; to &lt;code&gt;$array&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #62 created</title>
   <pubDate>Fri, 19 Feb 2021 13:04:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/62</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-62</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] The parameter types for fn:unique and array:partition are incorrectly specified.&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;In both signatures of &lt;code&gt;fn:unique&lt;/code&gt; the &lt;code&gt;$values&lt;/code&gt; parameter has the type &lt;code&gt;xs:anyAtomicType**&lt;/code&gt; which should be &lt;code&gt;xs:anyAtomicType*&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;array:partition&lt;/code&gt; the &lt;code&gt;$input&lt;/code&gt; parameter is &lt;code&gt;item(*)*&lt;/code&gt; which should be &lt;code&gt;item()*&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #61 created</title>
   <pubDate>Fri, 19 Feb 2021 13:01:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/61</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-61</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:all and fn:some have an xs:integer* return type, but describe an xs:boolean return type&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;fn:all&lt;/code&gt; function states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The result of the function is true if and only if the expression every $i in $input satisfies $predicate($i) is true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;but the return type is specified as &lt;code&gt;xs:integer*&lt;/code&gt;. -- It should have a return type of &lt;code&gt;xs:boolean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A similar issue occurs with &lt;code&gt;fn:some&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #60 created</title>
   <pubDate>Fri, 19 Feb 2021 12:58:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/60</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-60</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:namespace-uri-for-prefix no longer supports passing a prefix by string&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The type signature of the &lt;code&gt;$prefix&lt;/code&gt; variable has changed from &lt;code&gt;xs:string?&lt;/code&gt; to &lt;code&gt;union(xs:NCName, enum(''))?&lt;/code&gt;. This means that passing a prefix like &lt;code&gt;"fn"&lt;/code&gt; will no longer work as it is not an &lt;code&gt;xs:NCName&lt;/code&gt; and is not a zero-length string (&lt;code&gt;enum('')&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The only other affected function is the new &lt;code&gt;fn:in-scope-namespaces&lt;/code&gt; method. It would be useful in some cases to be able to pass the value as an &lt;code&gt;xs:string&lt;/code&gt; (e.g. &lt;code&gt;"fn"&lt;/code&gt;) without having to cast the value.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #59 created</title>
   <pubDate>Fri, 19 Feb 2021 12:48:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/59</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-59</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:replace no longer has the 3 an 4 argument variants&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The signature for fn:replace in FO 4.0 [1] only has the new 5 argument variant, whereas FO 3.1 has 3 and 4 argument variants.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://qt4cg.org/branch/master/xpath-functions-40/Overview-diff.html#func-replace&lt;/li&gt;
&lt;li&gt;https://www.w3.org/TR/xpath-functions-31/#func-replace&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #58 created</title>
   <pubDate>Mon, 15 Feb 2021 12:06:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/58</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-58</guid>
   <description>&lt;div&gt;&lt;p&gt;[XQuery] String Value Templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A &lt;em&gt;string value template&lt;/em&gt; (SVT) is a StringLiteral that supports enclosed expression values and entities. It is written as either &lt;code&gt;T"..."&lt;/code&gt; or &lt;code&gt;T'...'&lt;/code&gt;, where the &lt;code&gt;T&lt;/code&gt; stands for "template".&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; An SVT is similar to an attribute value template or text value template in XSLT.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For instance, the following expression:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $s in ("one", "two", "red", "blue")
return T"{$s} fish"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;evaluates to the sequence &lt;code&gt;("one fish", "two fish", "red fish", "blue fish")&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A string value template &lt;code&gt;T"xyz"&lt;/code&gt; is equivalent to the expression &lt;code&gt;&amp;lt;svt t="xyz"/&amp;gt;/@t/string()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Grammar&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;PrimaryExpr ::= ... | StringValueTemplate
StringValueTemplate ::= ('T"' (EscapeQuot | QuotAttrValueContent)* '"')
                      | ("T'" (EscapeApos | AposAttrValueContent)* "'")
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;T"&lt;/code&gt; and &lt;code&gt;T'&lt;/code&gt; are a single token/unit (i.e. no whitespace/comments are allowed between the characters), just like the &lt;code&gt;Q{&lt;/code&gt; in BracedURILiterals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #57 created</title>
   <pubDate>Thu, 4 Feb 2021 21:09:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/57</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-57</guid>
   <description>&lt;div&gt;&lt;p&gt;The item-type(T) syntax is not defined&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Section 3.7.2 &lt;em&gt;The judgement subtype-itemtype(A, B)&lt;/em&gt; of the XPath 4.0 and XQuery 4.0 specifications mention &lt;code&gt;item-type(N)&lt;/code&gt;, as does section 5.19 &lt;em&gt;Item Type Declarations&lt;/em&gt; of the XQuery 4.0 specification. It is also not in the EBNF grammar -- searching for &lt;code&gt;"item-type"&lt;/code&gt; only finds the &lt;code&gt;ItemTypeDecl&lt;/code&gt; symbol in the XQuery 4.0 EBNF.&lt;/p&gt;
&lt;p&gt;This should be defined in section 3.6 &lt;em&gt;Item Types&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #56 created</title>
   <pubDate>Thu, 4 Feb 2021 20:59:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/56</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-56</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow item-type to be matched within its definition scope&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In https://qt4cg.org/branch/master/xpath-functions-40/Overview-diff.html#func-random-number-generator, the &lt;code&gt;rng&lt;/code&gt; item type is defined as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;record(
    number   as xs:double,
    next     as (function() as record(number, next, permute, *)),
    permute  as (function(item()*) as item()*),
    *
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be helpful and more type specific if this could be defined as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;record(
    number   as xs:double,
    next     as (function() as rng),
    permute  as (function(item()*) as item()*),
    *
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where the &lt;code&gt;next&lt;/code&gt; field references the &lt;code&gt;rng&lt;/code&gt; type being defined -- this is like how structures in other languages (C/C++, Java, C#) can reference themselves as property types.&lt;/p&gt;
&lt;p&gt;This would also provide an alternative for the &lt;code&gt;..&lt;/code&gt; (self reference) specifier.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the &lt;code&gt;..&lt;/code&gt; syntax is still useful in the case of anonymous record types.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #55 created</title>
   <pubDate>Thu, 4 Feb 2021 19:45:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/55</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-55</guid>
   <description>&lt;div&gt;&lt;p&gt;Provide an XML version of the stack trace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;While the string version of &lt;code&gt;fn:stack-trace()&lt;/code&gt; is useful for debugging and including in log messages, being able to process that (from an XML representation) is also useful.&lt;/p&gt;
&lt;h3&gt;Use Cases&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;providing extended functionality, like implementing a &lt;code&gt;current-function-name()&lt;/code&gt; helper function -- e.g. &lt;code&gt;fn:stack-trace("json")[1]?function-name&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;customizing the format of the stack trace (e.g. standardizing it across different implementations);&lt;/li&gt;
&lt;li&gt;using the information in libraries/IDEs/editors that call the queries -- e.g. by returning the XML and processing it in the library/IDE/editor, such as mapping the data to stack frames in the IDE/editor. &lt;strong&gt;Note:&lt;/strong&gt; This is what I'm doing in my IntelliJ plugin with the MarkLogic stack XML to process query exceptions and the stack when debugging a query.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;fn:stack-trace&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;fn:stack-trace($format as enum("text", "xml", "json") := "text") as item()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like the current specification version of this function (with the same default semantics), but also supports XML and JSON formats. The "text" format returns an instance of &lt;code&gt;xs:string&lt;/code&gt; in an implementation-defined format, the "xml" format returns an instance of &lt;code&gt;element(fn:stack-trace)&lt;/code&gt;, and the "json" format returns an instance of &lt;code&gt;array(fn:stack-frame)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, &lt;code&gt;fn:stack-frame&lt;/code&gt; is defined as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare type fn:stack-frame as record(
    uri: xs:string,
    function-name: xs:QName?,
    line-number: xs:integer?,
    column-number: xs:integer?,
    *
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The XML version has the same information as elements in the &lt;code&gt;fn:&lt;/code&gt; namespace (e.g. &lt;code&gt;fn:uri&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;fn:format-stack-trace&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;fn:format-stack-trace($stack as item(),
                      $format as enum("text", "xml", "json") := "text") as item()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;$stack&lt;/code&gt; is an instance of &lt;code&gt;element(fn:stack-trace)&lt;/code&gt;, it is converted into the desired output format. (If the output format is "xml", no processing is performed.)&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;$stack&lt;/code&gt; is an instance of &lt;code&gt;array(fn:stack-frame)&lt;/code&gt;, it is converted into the desired output format. (If the output format is "json", no processing is performed.)&lt;/p&gt;
&lt;p&gt;Otherwise, an &lt;code&gt;err:XPTY0004&lt;/code&gt; error is raised.&lt;/p&gt;
&lt;h3&gt;fn:parse-stack-trace&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;fn:parse-stack-trace($stack as xs:string,
                     $format as enum("xml", "json")) as item()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function takes a stack trace in the implementation-defined format and parses it to XML or JSON. The "xml" format returns an instance of &lt;code&gt;element(fn:stack-trace)&lt;/code&gt;, and the "json" format returns an instance of &lt;code&gt;array(fn:stack-frame)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;$stack&lt;/code&gt; is not in the correct format, an error (error code TBD) is raised.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This could be useful when processing log messages or similar output.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #54 created</title>
   <pubDate>Tue, 26 Jan 2021 08:55:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/54</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-54</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Keyword arguments don't work with all parameters/keys in static functions.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The KeywordArgument symbol restricts the argument name to an NCName. This has two issues:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;for non-variadic and bounded-variadic functions, a parameter can be a QName, so may be in a different namespace, or there can be ambiguity if there are multiple parameters with the same local-name in different namespaces;&lt;/li&gt;
&lt;li&gt;for map-variadic functions, a parameter key can contain spaces, so cannot be expressed as an NCName.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;KeywordArgument ::= KeywordArgumentName  ":"  ExprSingle
KeywordArgumentName ::= EQName | StringLiteral
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I'm using the favoured map-based syntax here. If that is not used, then the &lt;code&gt;":"&lt;/code&gt; should be &lt;code&gt;":="&lt;/code&gt; as it is in the current draft.&lt;/p&gt;
&lt;h3&gt;Semantics&lt;/h3&gt;
&lt;p&gt;For non-variadic and bounded-variadic functions, a KeywordArgumentName is matched as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An &lt;em&gt;EQName&lt;/em&gt; matches against the expanded QName of the parameter;&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;StringLiteral&lt;/em&gt; is cast to an NCName (with an XPTY0004 error if it is not a valid NCName), which is in no namespace (like other variables such as VarName symbols); the resulting expanded QName then matches against the expanded QName of the parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For map-variadic functions, a KeywordArgumentName is matched as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An &lt;em&gt;NCName&lt;/em&gt; uses the local-name as the key in the constructed map cast to the key type of the map. This follows the XQFO casting rules with the source type of the local-name being &lt;code&gt;xs:NCName&lt;/code&gt; and the target type being the map's key type.;&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;QName&lt;/em&gt; or &lt;em&gt;URIQualifiedName&lt;/em&gt; results in an XPTY0004 error as it does not form a valid key name;&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;StringLiteral&lt;/em&gt; uses the value of the string as the key in the constructed map.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #53 created</title>
   <pubDate>Sat, 23 Jan 2021 10:43:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/53</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-53</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow function keyword inline functions without parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current draft InlineFunctionExpr adds &lt;code&gt;-&amp;gt;&lt;/code&gt; as a shorthand. This shorthand allows optional parameter lists (e.g. &lt;code&gt;-&amp;gt; { true() }&lt;/code&gt;), but the &lt;code&gt;function&lt;/code&gt; keyword version of this requires a parameter list. For consistency, the &lt;code&gt;function&lt;/code&gt; keyword version should also have an optional parameter list.&lt;/p&gt;
&lt;p&gt;This means that the syntax for InlineFunctionExpr can be simplified to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;InlineFunctionExpr ::= ("function" | "-&amp;gt;")  FunctionSignature?  FunctionBody
&lt;/code&gt;&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;Update: From recent discussions, the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator as both a thin arrow expression and an inline function definition is confusing. As such, a replacement for &lt;code&gt;-&amp;gt;&lt;/code&gt; in the inline function context should be identified.&lt;/p&gt;
&lt;p&gt;In the context of the variant without a parameter definition (e.g. when used with arrow operators), the question is how should it work. I suggest:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it should be a 0 and 1 arity function with the parameter argument defaulting to &lt;code&gt;()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;if the parameter is a single value, it should bind to the &lt;code&gt;.&lt;/code&gt; (context item) and &lt;code&gt;~&lt;/code&gt; (context value -- https://github.com/qt4cg/qtspecs/issues/129);&lt;/li&gt;
&lt;li&gt;if the parameter is an empty sequence, or multi-valued sequence, it should bind to the &lt;code&gt;~&lt;/code&gt; (context value -- https://github.com/qt4cg/qtspecs/issues/129) only.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This way, it will be usable in multiple contexts.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #52 created</title>
   <pubDate>Thu, 21 Jan 2021 12:29:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/52</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-52</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow record(*) based RecordTests&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The other ItemTypes that support specifying information about the type allow &lt;code&gt;type(*)&lt;/code&gt; to represent any instance of the type. The new RecordTest ItemType should support this.&lt;/p&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;p&gt;The:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RecordTest ::= "record"  "("  FieldDeclaration  (","  FieldDeclaration)*  ExtensibleFlag?  ")"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;symbol should be changed to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RecordTest ::= AnyRecordTest | TypedRecordTest
AnyRecordTest ::= "record"  "("  "*"  ")"
TypedRecordTest ::= "record"  "("  FieldDeclaration  (","  FieldDeclaration)*  ExtensibleFlag?  ")"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This follows the structure of the other any/typed tests (e.g. &lt;code&gt;MapTest&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Semantics&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;record(*)&lt;/code&gt; item type test is equivalent to &lt;code&gt;map(*)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #51 created</title>
   <pubDate>Mon, 18 Jan 2021 11:07:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/51</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-51</guid>
   <description>&lt;div&gt;&lt;p&gt;Generalize lookup operator for function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current lookup operator is a specialized expression for maps and arrays. All kinds of data structures can be realized with functions, and maps and arrays are functions as well, so it would be pretty straightforward to extend the lookup operator to arbitrary function items:&lt;/p&gt;
&lt;h3&gt;Use Cases&lt;/h3&gt;
&lt;h4&gt;Return name elements whose string values contain supplied substrings&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare variable $DOC := &amp;lt;xml&amp;gt;
  &amp;lt;name&amp;gt;Jack Daniels&amp;lt;/name&amp;gt;
  &amp;lt;name&amp;gt;Jim Beam&amp;lt;/name&amp;gt;
  &amp;lt;name&amp;gt;Johnny Walker&amp;lt;/name&amp;gt;
&amp;lt;/xml&amp;gt;;

let $names := function($key) {
  $DOC//name[contains(string(), $key)]
}
return $names?('Jack', 'Jim', 'Johnny')

(: result :)
&amp;lt;name&amp;gt;Jack Daniels&amp;lt;/name&amp;gt;,
&amp;lt;name&amp;gt;Jim Beam&amp;lt;/name&amp;gt;,
&amp;lt;name&amp;gt;Johnny Walker&amp;lt;/name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Return squares of supplied integers&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $square := math:pow(?, 2)
return $square?(1 to 5)

(: result :)
1, 4, 9, 16, 25
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Remarks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XPTY0004&lt;/code&gt; must be raised if the wildcard &lt;code&gt;*&lt;/code&gt; is specified as key, and if the input is neither a map nor an array.&lt;/li&gt;
&lt;li&gt;The extension could easily be combined with the extension for sequences (see #50).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #50 created</title>
   <pubDate>Sat, 16 Jan 2021 21:06:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/50</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-50</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Introduce the lookup operator for sequences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XPath 3.1 it is convenient to use the &lt;code&gt;?&lt;/code&gt; lookup operator on arrays and maps.&lt;/p&gt;
&lt;p&gt;It is easy and readable to construct expressions, such as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  [10, 20, 30]?(2, 3, 1, 1, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this understandably produces the sequence:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;20, 30, 10, 10, 20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, it is not possible to write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(10, 20, 30)[2, 3, 1, 1, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(10, 20, 30)(2, 3, 1, 1, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(10, 20, 30)?(2, 3, 1, 1, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This proposal is to allow the use on &lt;code&gt;sequences&lt;/code&gt; of the postfix lookup operator &lt;code&gt;?&lt;/code&gt;  with the same syntax as it is now used for &lt;code&gt;arrays&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; lookup operator will be applied on sequences whose first item isn't an array or a map. The only change would be to allow the type of the left-hand side to be a &lt;code&gt;sequence&lt;/code&gt;,  in addition to the currently allowed &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;array&lt;/code&gt; types. At present, applying &lt;code&gt;?&lt;/code&gt; on any such sequence results in error. In case the first item of the LHS sequence is an array or a map, then the current XPath 3.1 semantics is in force, which applies the RHS to each item in the sequence.&lt;/p&gt;
&lt;p&gt;The restriction in the above paragraph can be eliminated if we decide to use a different than &lt;code&gt;?&lt;/code&gt; symbol for this operator, for example &lt;code&gt;^&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The goal of this feature is achieving conciseness, readability, understandability and convenience.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For example, now one could easily produce from a sequence a projection / rearrangement with any desired multiplicity and ordering.&lt;/p&gt;
&lt;p&gt;Thus, it would be easy to express the function &lt;code&gt;reverse()&lt;/code&gt; as simply:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$seq?($len to 1 by -1)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #49 created</title>
   <pubDate>Sat, 16 Jan 2021 11:42:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/49</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-49</guid>
   <description>&lt;div&gt;&lt;p&gt;[XQuery] The 'member' keyword is still present on ForMemberBinding&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The latest editor's draft (13 January 2021) moves the &lt;code&gt;member&lt;/code&gt; keyword to a new &lt;code&gt;ForMemberClause&lt;/code&gt; symbol:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ForMemberClause           ::=          "for" "member" ForMemberBinding ("," ForMemberBinding)*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this change, the &lt;code&gt;ForMemberBinding&lt;/code&gt; syntax has retained the optional &lt;code&gt;member&lt;/code&gt; keyword from the previous change to &lt;code&gt;ForBinding&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ForMemberBinding          ::=          "member"? "$" VarName TypeDeclaration? PositionalVar? "in" ExprSingle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that &lt;code&gt;for member member ...&lt;/code&gt; and &lt;code&gt;for member $a in [], member $b in [] ...&lt;/code&gt; are valid with the current grammar.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ForMemberBinding&lt;/code&gt; grammar should be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ForMemberBinding          ::=          "$" VarName TypeDeclaration? PositionalVar? "in" ExprSingle
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #44 closed</title>
   <pubDate>Sat, 16 Jan 2021 11:30:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/44</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#closed-44</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Support RecordTest self references without occurrence indicators&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #48 created</title>
   <pubDate>Thu, 14 Jan 2021 16:11:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/48</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-48</guid>
   <description>&lt;div&gt;&lt;p&gt;Create a schema-for-xslt40.xsd file for the current draft spec.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Note: schema-for-xslt30.xsd is still referenced by other source files, such as xslt-first-cut.xml, so it has not been removed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #38 closed</title>
   <pubDate>Thu, 14 Jan 2021 15:59:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/38</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-38</guid>
   <description>&lt;div&gt;&lt;p&gt;Create a schema-for-xslt40.xsd file.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #47 created</title>
   <pubDate>Wed, 13 Jan 2021 07:50:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/47</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-47</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Allow argument placeholders on keyword arguments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This would allow a user to name the arguments that are used as placeholders, making the code more readable. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $pow2 := math:pow(2, y: ?)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;p&gt;This proposal would change &lt;code&gt;KeywordArgument&lt;/code&gt; from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KeywordArgument ::= NCName  ":="  ExprSingle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KeywordArgument ::= NCName  ":="  Argument
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or (using the proposed &lt;code&gt;:&lt;/code&gt; syntax) to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KeywordArgument ::= NCName  ":"  Argument
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Semantics&lt;/h3&gt;
&lt;p&gt;A function call with N argument placeholders will create an N-arity function. The order of the argument placeholders correspond to the order of the parameters in that new function. Those parameters map to the corresponding parameter in the target (partially applied) function, which can be in a different order, or bind to keys in an options map (in the case of functions like &lt;code&gt;fn:serialize&lt;/code&gt;). For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;math:pow(y: ?, x: ?)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would create a function that calculates &lt;code&gt;y^x&lt;/code&gt; instead of &lt;code&gt;x^y&lt;/code&gt; as the arguments are reversed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #46 created</title>
   <pubDate>Wed, 13 Jan 2021 00:36:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/46</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-46</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:sequence: @as&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'd like to see@as on xsl:sequence. That way i can write, e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:function name="dc:slice-count" as="xs:integer"&amp;gt;
  &amp;lt;xsl:param name="toast" as="element(toast)" /&amp;gt;
  &amp;lt;xsl:for-each select="$toast" as="xs:integer"&amp;gt;
    &amp;lt;xsl:sequence select="@cooked-slices + @raw-slices"  as="xs:integer" /&amp;gt;
  &amp;lt;/xsl:for-each&amp;gt;
&amp;lt;/xsl:function&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be an error for the for-each to have other than exactly one integer as its result, and the same for the &lt;code&gt;@sequence&lt;/code&gt;. In this simple example there's not much scope for that to happen of course,&lt;/p&gt;
&lt;p&gt;Maybe on anything with a &lt;code&gt;select&lt;/code&gt;  attribute?&lt;/p&gt;
&lt;p&gt;Parenthetically, a context-item attribute on xsl:sequence would obviate the XSLT1-ish xsl:for-each there, although $toast/(@a, @b) =&amp;gt; sum() would work as well and be XSLT  3-ish.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #45 created</title>
   <pubDate>Tue, 12 Jan 2021 12:56:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/45</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-45</guid>
   <description>&lt;div&gt;&lt;p&gt;Second parameter of fn:sum must be neutral element for +&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently fn:sum specifies the intent of the second parameter in a note:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The second argument allows an appropriate value to be defined to represent the sum of an empty sequence. For example, when summing a sequence of durations it would be appropriate to return a zero-length duration of the appropriate type. This argument is necessary because a system that does dynamic typing cannot distinguish "an empty sequence of integers", for example, from "an empty sequence of durations".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When implementing fn:sum on sequences of billions of items (numerics, or durations, etc), another aspect arises: this second parameter must also be, for this to work and for optimizations to be possible, a neutral element for +.&lt;/p&gt;
&lt;p&gt;Indeed, a distributed system like Spark will produce intermediate sums for (possibly empty) subsets, and will naturally use &lt;code&gt;$zero&lt;/code&gt; for the sum of an empty subset. Intermediate totals are aggregated in a treewise fashion. For the result to be correct, it must be the case that &lt;code&gt;$zero + $x eq $x&lt;/code&gt; for any item in the sequence provided as the first parameter. It is fully aligned with the idea of the note above, but I would suggest to make this requirement a bit stricter.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #44 created</title>
   <pubDate>Wed, 6 Jan 2021 17:35:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/44</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-44</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Support RecordTest self references without occurrence indicators&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This would be useful for defining things like binary trees, where the fields are optional but (if supplied) the values are not. So it is more logical to define them as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare item-type binary-tree as record(
    left? as ..,
    right? as ..,
    value as item()*
);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #43 created</title>
   <pubDate>Wed, 6 Jan 2021 15:37:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/43</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-43</guid>
   <description>&lt;div&gt;&lt;p&gt;Support standard and user-defined composite values using item type definitions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The composite values defined in &lt;em&gt;4.14.4 Composite Atomic Values&lt;/em&gt; are currently specified as a table. This means that it is not possible for users to define their own properties for custom types. It is also harder for editors/IDEs, or other tools to implement as there is an element of hard-coding the logic.&lt;/p&gt;
&lt;p&gt;These could be implemented as a properties/values record associated with the defined type. The values of the record could then be arity-1 functions that are called with the supplied value when accessed via maps. For example, in XQuery:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare %composite-values("composite-values") type xs:date external; (: built-in :)
declare type date-composite-values := record(
    year: fn:year-from-date#1,
    (: ... :)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and XSLT:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:item-type name="xs:date" composite-values="date-composite-values"/&amp;gt;
&amp;lt;xsl:item-type name="date-composite-values" as="record(
    year: fn:year-from-date#1,
    (: ... :)
)"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;code&gt;xs:date("1999-10-15")?year&lt;/code&gt; would be evaluated as &lt;code&gt;date-composite-values?year(xs:date("1999-10-15"))&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #42 created</title>
   <pubDate>Tue, 5 Jan 2021 09:49:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/42</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-42</guid>
   <description>&lt;div&gt;&lt;p&gt;Relax type incompatibility in order by clause (impl. dep. instead of XPST0004)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the case where XQuery is used with very large sequences (billions/trillions of items or of tuples) with a parallel evaluation [1], the order by clause in its current state is costly to evaluate, because checking the primitive types for compatibility requires an extra step and materialization (in the case of Spark: an additional action to perform this check).&lt;/p&gt;
&lt;p&gt;Relaxing this by making the order between different primitive types implementation-dependent (for the purpose of order by) rather than throwing XPST0004, in case of several incompatible primitive types in the comparison keys, would make parallel implementations more efficient.&lt;/p&gt;
&lt;p&gt;[1] &lt;a href="http://www.vldb.org/pvldb/vol14/p498-muller.pdf"&gt;http://www.vldb.org/pvldb/vol14/p498-muller.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #41 created</title>
   <pubDate>Wed, 30 Dec 2020 10:41:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/41</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-41</guid>
   <description>&lt;div&gt;&lt;p&gt;[XQuery] The TypeswitchExpr and CaseClause symbols have repeated VarNames&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The TypeswitchExpr symbol has changed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-TypeswitchExpr ::= "typeswitch" "(" Expr ")" CaseClause+ "default" ("$" VarName)? "return" ExprSingle
+TypeswitchExpr ::= "typeswitch" "(" Expr ")" CaseClause+ "default" ("$" VarName)? "$" VarName "return" ExprSingle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CaseClause symbol has changed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-CaseClause ::= "case" ("$" VarName "as")? SequenceTypeUnion "return" ExprSingle
+CaseClause ::= "case" ("$" VarName "as")? "$" VarName "as" SequenceTypeUnion "return" ExprSingle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is, both of these have a repeated &lt;code&gt;"$" VarName ...&lt;/code&gt; section from the previous optional section.&lt;/p&gt;
&lt;p&gt;Is this an effect of removing the references to the older specifications from the grammar?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #40 created</title>
   <pubDate>Tue, 29 Dec 2020 12:19:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/40</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-40</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] The modified SingleType EBNF symbol is redundant.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;SingleType&lt;/code&gt; definition has changed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-SingleType ::= SimpleTypeName "?"?
+SingleType ::= (SimpleTypeName | LocalUnionType) "?"? 	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, &lt;code&gt;SimpleTypeName&lt;/code&gt; has also changed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-SimpleTypeName ::= TypeName
+SimpleTypeName ::= TypeName | LocalUnionType 	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore, the change to &lt;code&gt;SingleType&lt;/code&gt; is not needed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #39 created</title>
   <pubDate>Tue, 29 Dec 2020 11:20:44 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/39</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-39</guid>
   <description>&lt;div&gt;&lt;p&gt;URILiteral is defined in the EBNF grammar but not used&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Comparing the WithExpr grammar, XPath has:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[10] NamespaceDeclaration ::= QName  "="  StringLiteral
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;whereas XQuery has:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[44] NamespaceDeclaration ::= QName  "="  URILiteral
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore, it looks like the intention is to use URILiteral in the XPath EBNF grammar for &lt;code&gt;NamespaceDeclaration&lt;/code&gt; as well.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #38 created</title>
   <pubDate>Mon, 28 Dec 2020 15:30:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/38</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-38</guid>
   <description>&lt;div&gt;&lt;p&gt;Create a schema-for-xslt40.xsd file.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This uses schema-for-xslt30.xsd as the basis for adding the new elements and attributes in the current XSLT 4.0 draft.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #37 created</title>
   <pubDate>Mon, 21 Dec 2020 12:03:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/37</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-37</guid>
   <description>&lt;div&gt;&lt;p&gt;Support sequence, array, and map destructuring declarations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Given a function that returns a sequence, array, or map of a fixed length or structure, it would be useful to extract those values in a destructuring declaration like can be done in other languages (such as JavaScript, Kotlin, C++, and Python). For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $(sin, cos) := sincos(math:pi()) (: sequence :)
let $[x, y, z] := camera-angle() (: array :)
let ${r, i} := complex(1, 2) (: map :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These would be equivalent to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $ret := sincos(math:pi()), $sin := $ret[1], $cos := $ret[2] (: sequence :)
let $ret := camera-angle(), $x := $ret?(1), $y := $ret?(2), $z := $ret?(3) (: array :)
let $ret := complex(1 ,2), $r := $ret?r, $i := $ret?i (: map :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should be possible to define the type of a component and/or the whole construct:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $(sin as xs:float, cos) as xs:float* := sincos(math:pi()) (: sequence :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For maps, it would also be useful to rename the components, such as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let ${re := r, im as xs:double := i} := complex(1, 2) (: map :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should also be possible to capture any left-over items in the sequence/array/map, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $(headings, rows) := load-csv("test.csv")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A destructuring declaration should be usable anywhere a variable binding can be defined.&lt;/p&gt;
&lt;p&gt;It should not be an error to use the same variable name twice. This supports conventions such as using &lt;code&gt;_&lt;/code&gt; for unused values. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $[_, y, _] := camera-angle()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #36 created</title>
   <pubDate>Mon, 21 Dec 2020 11:31:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/36</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-36</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:function-annotations (Allow support for user-defined annotations)&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Requirements/Use Cases&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;It should be possible for a library or application written in XQuery to define, access, and use custom annotations without relying on vendor extensions.&lt;/li&gt;
&lt;li&gt;It should be possible for a processor or editor/IDE to check and verify user-defined annotation usage (can an annotation be used multiple times; what argument values/types are valid) to provide better validation for custom annotations.&lt;/li&gt;
&lt;li&gt;It should be possible to access the details of the annotations on a function (name, argument values) so tools like xqDoc can read and format annotations without using vendor extensions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Annotation Declarations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;An annotation declaration is a function declared using the &lt;code&gt;%annotation&lt;/code&gt; annotation.&lt;/li&gt;
&lt;li&gt;Annotation parameters must be a SequenceType that has an ItemType which is either a) a subtype of &lt;code&gt;union(xs:string, xs:double, xs:float, xs:decimal)*&lt;/code&gt;, or b) &lt;code&gt;item()&lt;/code&gt; (to denote any permitted literal value). &lt;strong&gt;Note:&lt;/strong&gt; This is because annotation values are restricted to literal values. &lt;strong&gt;Note:&lt;/strong&gt; It is therefore possible to use an EnumerationType to define a set of allowed string values (e.g. "yes" and "no").&lt;/li&gt;
&lt;li&gt;If a function annotation name matches an annotation declaration in the statically-known functions using the function name resolver, it is verified using the same rules for static function calls; if there are no matching annotation declarations, then no error is issued, although an implementation may choose to issue a warning.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Annotation Tests&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;A new AnnotationTest (&lt;code&gt;annotation(...)&lt;/code&gt;) SequenceType is provided with the same structure and semantics as a FunctionTest.&lt;/li&gt;
&lt;li&gt;AnnotationTest parameters must be a SequenceType that has an ItemType which is either a) a subtype of &lt;code&gt;union(xs:string, xs:double, xs:float, xs:decimal)*&lt;/code&gt;, or b) &lt;code&gt;item()&lt;/code&gt; (to denote any permitted literal value). &lt;strong&gt;Note:&lt;/strong&gt; This is because annotation values are restricted to literal values. &lt;strong&gt;Note:&lt;/strong&gt; It is therefore possible to use an EnumerationType to define a set of allowed string values (e.g. "yes" and "no").&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;fn:annotations&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fn:annotations($f as function(*)) as annotation(*)*&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Returns all the annotations on the function.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;annotation&lt;/code&gt; signature will match the signature of the annotation, so &lt;code&gt;%a(1, 2)&lt;/code&gt; will have the &lt;code&gt;annotation(xs:integer, xs:integer)&lt;/code&gt; annotation type.&lt;/p&gt;
&lt;p&gt;If a function has multiple annotations with the same signature (e.g. &lt;code&gt;%values(1) %count(2)&lt;/code&gt;) then two annotations will be returned with the same signature, referring to the different annotations.&lt;/p&gt;
&lt;h3&gt;fn:annotation&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fn:annotation($f as function(*), $name as xs:QName) as annotation(*)*&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Returns all the annotations on the function with the name &lt;code&gt;$name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;annotation&lt;/code&gt; signature will match the signature of the annotation, so &lt;code&gt;%a(1, 2)&lt;/code&gt; will have the &lt;code&gt;annotation(xs:integer, xs:integer)&lt;/code&gt; annotation type.&lt;/p&gt;
&lt;p&gt;If a function has multiple annotations with the same name and signature (e.g. &lt;code&gt;%values(1) %values(2)&lt;/code&gt;) then two annotations will be returned with the same signature, referring to the different annotations.&lt;/p&gt;
&lt;h3&gt;fn:annotation-name&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fn:annotation-name($annotation as annotation(*)) as xs:QName&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Returns the name of the annotation.&lt;/p&gt;
&lt;h3&gt;fn:annotation-arguments&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fn:annotation-arguments($annotation as annotation(*)) as array(*)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Returns the arguments passed to the associated annotation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #35 created</title>
   <pubDate>Mon, 21 Dec 2020 01:08:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/35</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-35</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO]The `union ( | )`, `itersect`, `except`  and `combine (,)` operators are not mentioned in the F &amp;amp; O. Have not the best categorization in the XPath spec.&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Searching the F &amp;amp; O document for the &lt;code&gt;union &lt;/code&gt; ( &lt;code&gt;|&lt;/code&gt; ), &lt;code&gt;intersect &lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; operators finds 0 occurrences. Neither can &lt;code&gt;,&lt;/code&gt; be found, and of course, it is unsearchable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the XPath spec these are described in section "4.7.3 Combining Node Sequences". The word node-set is not mentioned at all and this is misleading, because the &lt;code&gt;union &lt;/code&gt; ( &lt;code&gt;|&lt;/code&gt; ), &lt;code&gt;intersect &lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; operators are in fact set-operators, or at least set-generating operators.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks,
Dimitre&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #34 created</title>
   <pubDate>Sat, 19 Dec 2020 23:54:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/34</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-34</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal to introduce the set datatype in XPath 4&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;It is high time&lt;/strong&gt; that we come up with a &lt;strong&gt;set&lt;/strong&gt; type in XPath. We actually have to deal all the time with sets (not just node-sets, but sets of any-type values), and it is painful to read in the spec how two maps are compared for equality when explaing &lt;code&gt;fn:deep-equal()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;"&lt;em&gt;If $i1 and $i2 are both ·maps·, the result is true if and only if all the following conditions apply:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Both maps have the same number of entries.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For every entry in the first map, there is an entry in the second map that:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;has the ·same key· (note that the collation is not used when comparing keys), and&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;has the same associated value (compared using the fn:deep-equal function, under the collation supplied in the original call to fn:deep-equal).&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;When if we had the set type the above would simply say:&lt;/p&gt;
&lt;p&gt;"&lt;em&gt;If $i1 and $i2 are both ·maps·, the result is true if and only if the sets of their keys are equal, and the corresponding values for each key in the two maps are deep-equal.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I propose that starting with XPath 4.0&lt;/strong&gt; we introduce the &lt;strong&gt;set&lt;/strong&gt; type and define set equality, the union ( &lt;strong&gt;|&lt;/strong&gt; ), intersection (&lt;strong&gt;intersect&lt;/strong&gt;) and set difference (&lt;strong&gt;except&lt;/strong&gt;) not only for node-sets but for sets of any-typed values.&lt;/p&gt;
&lt;p&gt;Then we can have a function: &lt;strong&gt;&lt;code&gt;to-set($collection as item()*) as set&lt;/code&gt;&lt;/strong&gt;, which would produce a set (of the distinct values) of any collection-typed argument supplied to it: sequence(its distinct values) , map (a set of its entries), array (a set of its members).&lt;/p&gt;
&lt;p&gt;This makes &lt;code&gt;fn:distinct-values()&lt;/code&gt; almost unnecessary.&lt;/p&gt;
&lt;p&gt;We will no longer have to explain in a "Remarks" section that the result of a function is "unordered" or that its order is "implementation-defined" -- just by making this function return a &lt;strong&gt;set&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;How can almost all major programming languages (not even speaking of SQL), such as C#, Python and Java have a set data type / interface, but even in XPath version 4 we still have to describe it in a free language narrative?&lt;/p&gt;
&lt;p&gt;Thanks,
Dimitre&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #33 created</title>
   <pubDate>Fri, 18 Dec 2020 20:16:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/33</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-33</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON Parsing &amp;amp; Serialization: Numbers&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;To-dos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;number-formatter&lt;/code&gt; to the &lt;code&gt;json&lt;/code&gt; method in the serialization spec.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;Sometimes people put very large numbers in a JSON file, if they are parsed as double, the numbers are corrupted. Or they become confused when &lt;code&gt;1000000&lt;/code&gt; from the input becomes &lt;code&gt;1e6&lt;/code&gt; in the output. Finally parsing a double is slower  than parsing an integer.&lt;/p&gt;
&lt;p&gt;There could be an additional option for parse-json/json-doc  &lt;code&gt;number-type&lt;/code&gt; with possible values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;: Parse all numbers as &lt;code&gt;xs:double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;decimal&lt;/code&gt;: Parse all numbers as &lt;code&gt;xs:decimal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;: Return numbers as &lt;code&gt;xs:string&lt;/code&gt; (so &lt;code&gt;1e6&lt;/code&gt; stays &lt;code&gt;"1e6"&lt;/code&gt; and &lt;code&gt;1000000&lt;/code&gt; stays &lt;code&gt;"1000000"&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;: Parse numbers containing &lt;code&gt;e&lt;/code&gt; as &lt;code&gt;xs:double&lt;/code&gt;, numbers containing &lt;code&gt;.&lt;/code&gt; as &lt;code&gt;xs:decimal&lt;/code&gt;, and numbers containing neither as &lt;code&gt;xs:integer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #32 created</title>
   <pubDate>Fri, 18 Dec 2020 16:28:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/32</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-32</guid>
   <description>&lt;div&gt;&lt;p&gt;try/catch: New variable for all error information&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Within the scope of a catch clause, some variables are implicitly declared. However, it’s more than tedious to forward all this information to another function:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;try {
  'oh' + 'dear'
} catch * {
  handle-error($err:code, $err:description, $err:line-number, $err:column-number, ...)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What about binding all data to an additional &lt;code&gt;$err:map&lt;/code&gt; variable?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map {
  'code': $err:code,
  'value': $err:value,
  'description': $err:description,
  'line-number': $err:line-number,
  'column-number': $err:column-number,
  'additional': $err:additional
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code could then be shortened to:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;try {
  'oh' + 'yes'
} catch * {
  handle-error($err:map)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #31 created</title>
   <pubDate>Fri, 18 Dec 2020 12:53:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/31</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-31</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend FLWOR expressions to maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Current proposal (https://github.com/qt4cg/qtspecs/issues/31#issuecomment-1613342841):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for key $key in ...
return …

for value $value in ...
return …

for key $key value $value in ...
return …
&lt;/code&gt;&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;With the addition of the &lt;code&gt;for member&lt;/code&gt; syntax for arrays, it is possible to use a ForExpr/FLWORExpr to enumerate the contents of sequences and arrays, but not maps. In order to be consistent and symmetric across these types, the &lt;code&gt;for member&lt;/code&gt; syntax should be extended to support maps by enumerating the key/value entries of the map.&lt;/p&gt;
&lt;p&gt;Given a map of type &lt;code&gt;map(K, V)&lt;/code&gt; the member RecordTest would be &lt;code&gt;record(key as K, value as V)&lt;/code&gt;. Given a map of type &lt;code&gt;map(*)&lt;/code&gt;, the member RecordTest would be &lt;code&gt;record(key, value)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This would allow a user to write expressions like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for member $entry in $map
return element { $entry?key } { $entry?value }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; With the addition of the &lt;code&gt;array:values&lt;/code&gt; and &lt;code&gt;map:entries&lt;/code&gt; functions in issue #29, it is possible to avoid the need of the &lt;code&gt;for member&lt;/code&gt; syntax for arrays and maps, but may be worth keeping for people who prefer the wordy style of the XPath/XQuery syntax.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #30 created</title>
   <pubDate>Fri, 18 Dec 2020 12:28:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/30</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-30</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve the discoverability and parseability of the mathematical operator symbols&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In order to keep the XPath and XQuery languages parseable without the need of a pre-processing step, the operators should be integrated into the grammar, such as in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[29] UnionExpr ::= IntersectExceptExpr ( ("union" |  "|" | "∪") IntersectExceptExpr )*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make them more easily discoverable to someone reading the specification, the behaviour of the Unicode aliases should be included the description in the text related to that section. For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The union, |, and ∪ operators are equivalent. They take two node sequences as operands and return a sequence containing all the nodes that occur in either of the operands.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; With the introduction of the &lt;code&gt;LocalUnionType&lt;/code&gt;, a pre-processing step would need to map &lt;code&gt;∪&lt;/code&gt; to &lt;code&gt;|&lt;/code&gt; in order to avoid &lt;code&gt;∪(xs:string, xs:integer)&lt;/code&gt; being valid. -- This would then mean that things like the &lt;code&gt;CatchErrorList&lt;/code&gt; would then be able to use &lt;code&gt;∪&lt;/code&gt;, as in &lt;code&gt;try {} catch err:FOER0001 ∪ err:FOER0002 {}&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #29 created</title>
   <pubDate>Fri, 18 Dec 2020 11:51:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/29</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-29</guid>
   <description>&lt;div&gt;&lt;p&gt;array:values (resolved: map:values, map:entries)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; Revised and aligned with the recently added and proposed map and array functions (#314, #357):&lt;/p&gt;
&lt;p&gt;The suggested functions are based on the observations that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;users who prefer readable function names tend to reject &lt;code&gt;?*&lt;/code&gt; as handy shortcut;&lt;/li&gt;
&lt;li&gt;functions are often more flexible and better composable than FLWOR enhancements (but of course both could be added).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;array:values&lt;/h2&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Returns all members of an array as a sequence. Equivalent to &lt;code&gt;$array?*&lt;/code&gt;, but better composable and easier to read (especially for newcomers), and known from other programming languages.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;array:values($array as array(*)) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: Query :)
let $array := [ (), 2, [ 3, 4 ] ]
return array:values($array)

(: Result :)
2
[ 3, 4 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;map:values&lt;/h2&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Returns all values of a map as a sequence. Complementary to &lt;code&gt;map:keys&lt;/code&gt;, and equivalent to &lt;code&gt;$map?*&lt;/code&gt;, but better composable and easier to read (especially for newcomers), and known from other programming languages.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:values($map as map(*)) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: Query :)
let $map := map { 'a': (), 'b': 2, 'c': [ 3, 4 ] }
return map:values($map)

(: Result :)
2
[ 3, 4 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;map:entries&lt;/h2&gt;
&lt;p&gt;See #357 on composing and decomposing &lt;em&gt;Key-Value Records&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Returns each entry of a map as a singleton map. Equivalent to &lt;code&gt;map:for-each($map, map:entry#2)&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:entries($map as map(*)) as map(*)*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: Query :)
let $map := map { 'a': (), 'b': 2, 'c': [ 3, 4 ] }
for $entry in map:entries($map)
return element { map:keys($entry) } { string-join(map:values($entry)) }

(: Result :)
&amp;lt;a/&amp;gt;
&amp;lt;b&amp;gt;2&amp;lt;/b&amp;gt;
&amp;lt;c&amp;gt;34&amp;lt;/c&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;array:members&lt;/h2&gt;
&lt;p&gt;See #314.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #28 created</title>
   <pubDate>Thu, 17 Dec 2020 19:49:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/28</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-28</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Support multiple clauses in ForExpr and LetExpr.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This implements the proposal in issue #22 to support multiple clauses in XPath ForExpr and LetExpr, with both the grammar and specification text changes.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #27 created</title>
   <pubDate>Thu, 17 Dec 2020 17:49:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/27</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-27</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix references to ArgumentPlaceholder in the specifications.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This fixes issue #24.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #26 created</title>
   <pubDate>Thu, 17 Dec 2020 15:48:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/26</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-26</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath]A value in the last row (for "sequence-variadic" functions) of the table "Number of Arguments allowed in a Function Call" is incorrect&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In another issue ( #25 ) it was already discussed that the proposed "sequence-variadic" functions have definite problems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This issue is about the incorrect value in the MaxK column of the "sequence-variadic" (last) row of the table titled "Number of Arguments allowed in a Function Call", which is in the section "&lt;a href="https://qt4cg.org/branch/master/xquery-40/xpath-40-diff.html#id-static-functions"&gt;4.4.1 Static Functions&lt;/a&gt;&lt;/strong&gt;".&lt;/p&gt;
&lt;p&gt;As published, the value of the 7th (last, for the MaxK column) item in this row is 0.&lt;/p&gt;
&lt;p&gt;In fact all of the required positional arguments can be entered as keyword arguments in a function call (there is no reason why this cannot/shouldn't be done).&lt;/p&gt;
&lt;p&gt;Thus, the value for MaxK (the maximum number of keyword arguments) must be R, (the current value of 0 is wrong).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proposed corrective action&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Replace "sequence-variadic" with "array-variadic", which avoids the problems of "sequence-variadic" (as discussed in #25 )&lt;/li&gt;
&lt;li&gt;In the row for "array-variadic" of the table, specify R as the value for the column MaxK&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #25 created</title>
   <pubDate>Thu, 17 Dec 2020 05:13:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/25</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-25</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] `%variadic("sequence")` does not allow specifying some argument values in the variadic sequence, and in one case even not the variadic sequence itself&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;The current specification for sequence variadic functions (at: https://qt4cg.org/branch/master/xquery-40/xpath-40-diff.html#id-static-functions) has the following issues&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An empty sequence cannot be specified into the sequence of variadic arguments&lt;/li&gt;
&lt;li&gt;Even the last (sequence) argument that is supposed to contain the variadic arguments "disappears" when no variadic argument is specified on the function call&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This results in difficulties to describe, explain and implement such sequence-variadic functions, and in inability to provide any argument value (like the empty sequence) within the last, sequence argument.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proposed improvement&lt;/strong&gt;, which doesn't have the above problems:&lt;/p&gt;
&lt;p&gt;Use &lt;strong&gt;&lt;em&gt;array-variadic&lt;/em&gt;&lt;/strong&gt; functions instead of sequence-variadic:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%variadic("array")&lt;/code&gt; indicates that the function is &lt;em&gt;array-variadic&lt;/em&gt;. An &lt;em&gt;array-variadic&lt;/em&gt; function declares one or more parameters, of which the last must be an array. If the declaration includes N parameters, then a call on the function may supply N-1 or more arguments. However, the effective call always consists of N arguments, the first N-1 of which are the values for the positional parameters of the function, and the Nth argument is an array that contains all provided variadic arguments.&lt;/p&gt;
&lt;p&gt;Why an &lt;em&gt;array-variadic&lt;/em&gt; function doesn't have the problems 1 and 2 above?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An empty sequence can be specified in the last argument, for example: [1, (), 2]. For example:
&lt;code&gt;myFun($posArg1, $posArg2, ..., $posArgN_minus_1, [1, (), 2])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When no variadic arguments are supplied, the last argument of the effective function call is still supplied -- it is the empty array. For example:  &lt;code&gt;myFun($posArg1, $posArg2, ..., $posArgN_minus_1, [])&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #24 created</title>
   <pubDate>Thu, 17 Dec 2020 00:23:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/24</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-24</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] The unknown ArgumentPlaceHolder EBNF symbol is referred to in several places&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The references to &lt;code&gt;ArgumentPlaceHolder&lt;/code&gt; should have a lower case &lt;code&gt;h&lt;/code&gt; to match the EBNF symbol name &lt;code&gt;ArgumentPlaceholder&lt;/code&gt; in the grammar.&lt;/p&gt;
&lt;p&gt;Kind regards,
Reece&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #23 created</title>
   <pubDate>Thu, 17 Dec 2020 00:04:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/23</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-23</guid>
   <description>&lt;div&gt;&lt;p&gt;Extending element and attribute tests to NameTest unions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the XPath and XQuery drafts the element and attribute tests have been extended to support any NameTest, meaning they now support all wildcard forms, which is great.&lt;/p&gt;
&lt;p&gt;It is possible to write a path expression that takes a union of different paths -- such as &lt;code&gt;html//(ol|ul)&lt;/code&gt; -- however it is not possible to define a precise type that accepts that path expression in variables, parameters, or return types, so if a user does specify a type some type information is lost during the static analysis phase.&lt;/p&gt;
&lt;p&gt;As such, I propose renaming &lt;code&gt;CatchErrorList&lt;/code&gt; to &lt;code&gt;NameTestUnion&lt;/code&gt; and making &lt;code&gt;ElementTest&lt;/code&gt; and &lt;code&gt;AttributeTest&lt;/code&gt; accept a &lt;code&gt;NameTestUnion&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[86] CatchClause ::= "catch" NameTestUnion EnclosedExpr
[87] NameTestUnion ::= NameTest ("|" NameTest)*
[212] AttributeTest ::= "attribute" "(" (NameTestUnion ("," TypeName)?)? ")"
[215] ElementTest ::= "element" "(" (NameTestUnion ("," TypeName "?"?)?)? ")"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kind regards,
Reece&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #22 created</title>
   <pubDate>Thu, 17 Dec 2020 00:01:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/22</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-22</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Allowing multiple let clauses in LetExpr and for clauses in ForExpr&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently, it is possible to have multiple &lt;code&gt;SimpleLetBinding&lt;/code&gt;s in a &lt;code&gt;SimpleLetClause&lt;/code&gt;, but not have multiple &lt;code&gt;SimpleLetClause&lt;/code&gt;s in a &lt;code&gt;LetExpr&lt;/code&gt;. The same applies for &lt;code&gt;ForExpr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I propose that this should be possible. In other words, make the following changes to the XPath 4.0 grammar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[12] ForExpr ::= SimpleForClause SimpleForClause* "return" ExprSingle
[15] LetExpr ::= SimpleLetClause SimpleLetClause* "return" ExprSingle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, a user can write the following in XPath 4.0:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $x := 1.0
let $y := 2.0
return $x + $y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in addition to the following in XPath 3.1 and earlier:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $x := 1.0, $y := 2.0
return $x + $y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this does not add any new capability to XPath (in particular, for and let clauses cannot be mixed like in XQuery) as a user can define multiple let or for clauses, it just provides them with an alternative way of expressing that like they can do in XQuery (where it is common to use a series of let clauses instead of let bindings for multiple local variables).&lt;/p&gt;
&lt;p&gt;Kind regards,
Reece&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #21 created</title>
   <pubDate>Wed, 16 Dec 2020 23:59:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/21</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-21</guid>
   <description>&lt;div&gt;&lt;p&gt;New reserved function names&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In section A.3 (Reserved Function Names) of the XPath 4.0 and XQuery 4.0 draft specifications, the tuple and union keywords have been added.&lt;/p&gt;
&lt;p&gt;I don't think these (or more accurately, the keywords for the new item type constructs) are needed, as they cannot currently be used in places where functions can. Only KindTests can appear as path expressions, and the only other reserved names should be for other types of expression (if, switch, typeswitch, etc.).&lt;/p&gt;
&lt;p&gt;From a similar reasoning, the following keywords should be able to be removed from the list as they are also only ItemTypes/SequenceTypes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;empty-sequence&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kind regards,
Reece&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #20 created</title>
   <pubDate>Wed, 16 Dec 2020 23:56:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/20</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-20</guid>
   <description>&lt;div&gt;&lt;p&gt;Highlight EBNF grammar differences in the diff versions of the specs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The diff versions of the specs highlight what has changed in the wording of the specifications, which is useful, but don't highlight the differences in the EBNF grammar. This makes it harder for implements and tool vendors to work out what has changed in the grammar to then know what changes need to be made to the lexer and parser in order to support the new constructs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #19 created</title>
   <pubDate>Mon, 14 Dec 2020 18:04:22 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/19</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-19</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt] annotation-prefixes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;By analogy with Schema  annotations, i'd like to see an annotation-prefixes attribute on xsl:stylesheet/transform containing a space-separated list of NCName namespace prefixes that are associated with annotations; the XSLT processor would discard these elements (including children) during compilation. Here's a rough go at some text.&lt;/p&gt;
&lt;p&gt;The purpose is to be able to include annotations at any level where elements are allowed - for example, inside an xl:variable  or template or function body. Annotations might include XTest unit tests, Schmatron rules, human-readable documentation, CSS styles, or more, and could be used by other operations than the XSLT transformation: for  example, by processing the XSLT source itself with XSLT.&lt;/p&gt;
&lt;p&gt;It should be possible for the same element to be both an extension element and an annotation, but the behaviour is implementation-dependent in this case (for example, an API might allow an extension to access content or convert the annotation elements to something else on compilation).&lt;/p&gt;
&lt;p&gt;XSLT instructions occurring inside annotation elements are ignored along with other content, except for xsl:fallback instructions (and their contents) if the prefix was also declared as an extension prefix and no matching extension was found. Similarly, extension attributes are discarded. The fallback behaviour might be used to support an XSLT-based implementation, for example by reading the XSLT source and processing embedded Schematron tests.&lt;/p&gt;
&lt;p&gt;Attributes of annotation elements are not considered to be attribute value templates and content is not considered to be text value templates - that is, { and } are not special. However, an annotation element or attribute backed by an extension could perform such processing if an implementation supported it.  The behaviour of shadow annotation attributes and xsl:use-when is implementation defined, but expressions contained in them must be processed as elsewhere.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #18 created</title>
   <pubDate>Fri, 11 Dec 2020 10:05:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/18</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-18</guid>
   <description>&lt;div&gt;&lt;p&gt;[DM31] Function types do not form a hierarchy&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Section §2.8.1 in the XDM specification states "The space of all possible function signatures forms a hierarchy of function types. "&lt;/p&gt;
&lt;p&gt;This is clearly incorrect. It's a directed acyclic graph. (It's not even a lattice, because there is no minimum or maximum - there is no function signature that is a supertype of all others, nor is there one that is a subtype of all others). (I think there is one lattice for each possible arity.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #17 created</title>
   <pubDate>Thu, 10 Dec 2020 09:44:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/17</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-17</guid>
   <description>&lt;div&gt;&lt;p&gt;readme&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The readme needs an update&lt;/p&gt;
&lt;p&gt;Link to the 4.0 html spec files rather than the 3.1 spec&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #16 closed</title>
   <pubDate>Wed, 9 Dec 2020 09:36:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/16</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-16</guid>
   <description>&lt;div&gt;&lt;p&gt;More build fixes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #16 created</title>
   <pubDate>Wed, 9 Dec 2020 09:35:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/16</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-16</guid>
   <description>&lt;div&gt;&lt;p&gt;More build fixes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;More 🤦&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #15 closed</title>
   <pubDate>Wed, 9 Dec 2020 08:49:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/15</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-15</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix errors in stylesheet execution&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #15 created</title>
   <pubDate>Wed, 9 Dec 2020 08:49:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/15</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-15</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix errors in stylesheet execution&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;🤦&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #14 closed</title>
   <pubDate>Mon, 7 Dec 2020 10:25:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/14</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-14</guid>
   <description>&lt;div&gt;&lt;p&gt;Refactor build scripts to avoid out-of-memory errors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #14 created</title>
   <pubDate>Mon, 7 Dec 2020 10:25:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/14</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-14</guid>
   <description>&lt;div&gt;&lt;p&gt;Refactor build scripts to avoid out-of-memory errors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #13 closed</title>
   <pubDate>Fri, 4 Dec 2020 17:16:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/13</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-13</guid>
   <description>&lt;div&gt;&lt;p&gt;Cleanup some build errors&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #13 created</title>
   <pubDate>Fri, 4 Dec 2020 17:16:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/13</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-13</guid>
   <description>&lt;div&gt;&lt;p&gt;Cleanup some build errors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I think this PR fixes the build errors. (CircleCI is having issues at the moment, and I know that master is currently broken, so I'm just going to merge this and hope!)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #11 closed</title>
   <pubDate>Fri, 4 Dec 2020 17:00:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/11</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-11</guid>
   <description>&lt;div&gt;&lt;p&gt;Cleanup build artifacts and remove a few more specs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #12 closed</title>
   <pubDate>Fri, 4 Dec 2020 13:46:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/12</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-12</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo in spec reference&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #12 created</title>
   <pubDate>Fri, 4 Dec 2020 13:46:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/12</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-12</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix typo in spec reference&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Spec identifiers are case sensitive.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #11 created</title>
   <pubDate>Fri, 4 Dec 2020 12:53:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/11</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-11</guid>
   <description>&lt;div&gt;&lt;p&gt;Cleanup build artifacts and remove a few more specs&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;Delete rafts of build artifacts (all the html and build directoies)&lt;/li&gt;
&lt;li&gt;Remove a few more specs we're unlikely to edit&lt;/li&gt;
&lt;li&gt;Make sure the builds work even if the html and build directories are initially missing&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #10 created</title>
   <pubDate>Thu, 3 Dec 2020 18:25:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/10</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-10</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:filter with a function returning empty sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;filter has signature:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:filter($seq as item()*, $f as function(item()) as xs:boolean) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It could easily be changed to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:filter($seq as item()*, $f as function(item()) as xs:boolean?) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with &lt;code&gt;()&lt;/code&gt; meaning &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then it could be used with a map to pick elements from the seq. E.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filter(1 to 10, map {3: true(), 4: true()}) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;~&amp;gt; (3, 4)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filter(("a", "b", "b", "c", "d"), map {"b": true(), "d": true()}) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;~&amp;gt; ("b", "b", "d")&lt;/p&gt;
&lt;p&gt;Same for array:filter&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #9 closed</title>
   <pubDate>Thu, 3 Dec 2020 12:48:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/9</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-9</guid>
   <description>&lt;div&gt;&lt;p&gt;Build fixes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #9 created</title>
   <pubDate>Thu, 3 Dec 2020 12:48:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/9</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-9</guid>
   <description>&lt;div&gt;&lt;p&gt;Build fixes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR fixes the publication date, cleans up a few other details, and makes the generated index more robust. It also publishes all of the new specs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #8 closed</title>
   <pubDate>Thu, 3 Dec 2020 05:30:09 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/8</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-8</guid>
   <description>&lt;div&gt;&lt;p&gt;Updated CI config and automatically publish changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #8 created</title>
   <pubDate>Thu, 3 Dec 2020 05:29:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/8</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-8</guid>
   <description>&lt;div&gt;&lt;p&gt;Updated CI config and automatically publish changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #7 closed</title>
   <pubDate>Wed, 2 Dec 2020 14:16:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/7</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-7</guid>
   <description>&lt;div&gt;&lt;p&gt;Enable automatic builds at CircleCI&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #7 created</title>
   <pubDate>Wed, 2 Dec 2020 14:15:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/7</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-7</guid>
   <description>&lt;div&gt;&lt;p&gt;Enable automatic builds at CircleCI&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Just more infrastructure work.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #6 closed</title>
   <pubDate>Wed, 2 Dec 2020 12:50:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/6</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#closed-6</guid>
   <description>&lt;div&gt;&lt;p&gt;Build improvements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #6 created</title>
   <pubDate>Wed, 2 Dec 2020 12:06:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/6</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-6</guid>
   <description>&lt;div&gt;&lt;p&gt;Build improvements&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;Remove old specs&lt;/li&gt;
&lt;li&gt;Refactor a few ant tasks so that they will work in gradle&lt;/li&gt;
&lt;li&gt;Fix a few markup errors&lt;/li&gt;
&lt;li&gt;Add a top-level gradle build that publishes the specs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More work will be needed to automate publication, but this is a start.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #5 created</title>
   <pubDate>Mon, 30 Nov 2020 21:10:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/5</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-5</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] The math:atan2 notes incorrectly defines its behaviour.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When &lt;code&gt;$y&lt;/code&gt; is positive and &lt;code&gt;$x&lt;/code&gt; is negative, the notes define this to be equal to &lt;code&gt;π - atan($y div $x)&lt;/code&gt; when it should be &lt;code&gt;atan($y div $x) + π&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;$y&lt;/code&gt; is negative and &lt;code&gt;$x&lt;/code&gt; is positive, the notes don't define the value. It is the same as the first case, when &lt;code&gt;$y&lt;/code&gt; is positive and &lt;code&gt;$x&lt;/code&gt; is positive, so the first case should be "If $y is positive or negative, and ...".&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;$y&lt;/code&gt; is negative and &lt;code&gt;$x&lt;/code&gt; is negative, the notes don't define the value. The value is equivalent to &lt;code&gt;atan($y div $x) - π&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #4 created</title>
   <pubDate>Mon, 30 Nov 2020 20:39:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/4</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-4</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Better names for ThinArrowTarget and FatArrowTarget&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;ThinArrowTarget&lt;/code&gt; and &lt;code&gt;FatArrowTarget&lt;/code&gt; EBNF symbols do not follow the convention in the XPath and XQuery specifications of describing the semantics of the symbols, but instead describe how they are written.&lt;/p&gt;
&lt;p&gt;I propose the following names:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;CurryingArrowTarget&lt;/code&gt; instead of &lt;code&gt;FatArrowTarget&lt;/code&gt; -- This is because the LHS is being curried into the function, making the function call it applies to take one less parameter. Other possible names would be &lt;code&gt;SimpleArrowTarget&lt;/code&gt; or &lt;code&gt;UnaryArrowTarget&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MappingArrowTarget&lt;/code&gt; instead of &lt;code&gt;ThinArrowTarget&lt;/code&gt; -- This is because both variants make use of the simple map operator.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #3 created</title>
   <pubDate>Mon, 30 Nov 2020 16:57:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/3</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-3</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow tokens in xsl:mode/@name&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A minor request:&lt;/p&gt;
&lt;p&gt;I find I often want to re-use the same behaviours across modes, or use related modes across similar content.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;xsl:template&lt;/code&gt; and &lt;code&gt;xsl:apply-templates&lt;/code&gt;, we can use a space separated list of mode names: it would be convenient if I could do the same thing in &lt;code&gt;xsl:mode&lt;/code&gt; instructions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #2 created</title>
   <pubDate>Mon, 30 Nov 2020 16:47:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-2</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:intersperse&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A simple proposal, for a change:&lt;/p&gt;
&lt;p&gt;A new function would be handsome to insert separators in a sequence. Equivalent functions exist in other languages; in Haskell and Dart, they are called &lt;code&gt;intersperse&lt;/code&gt;:&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Inserts the defined separator between the items of a sequence and returns the resulting sequence.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:intersperse($values as item()*, $separator as item()*) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $div :=
  &amp;lt;div&amp;gt;
    &amp;lt;span&amp;gt;one&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;two&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;three&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
return fn:intersperse($div/span, ',')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #1 created</title>
   <pubDate>Sat, 28 Nov 2020 00:10:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-1</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Conversion between xs:QName and Q{uri}local format&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It would be good to have functions to convert from &lt;code&gt;Q{uri}local&lt;/code&gt; format to &lt;code&gt;xs:QName&lt;/code&gt; (perhaps with the option of supplying a prefix), and the reverse, generating &lt;code&gt;Q{uri}local&lt;/code&gt; from an xs:QName.&lt;/p&gt;
&lt;p&gt;I don't think we can extend the &lt;code&gt;xs:QName&lt;/code&gt; constructor function to do this, because that has to remain consistent with XSD and (sadly) we can't change the lexical space in XSD.&lt;/p&gt;
&lt;p&gt;So I would suggest a single-argument form of &lt;code&gt;fn:QName&lt;/code&gt; that accepts either &lt;code&gt;local&lt;/code&gt; or &lt;code&gt;Q{}local&lt;/code&gt; or &lt;code&gt;Q{uri}local&lt;/code&gt;. But this doesn't allow a prefix to be added. An alternative would be fn:EQName#1 accepting &lt;code&gt;local&lt;/code&gt; or &lt;code&gt;Q{}local&lt;/code&gt; or &lt;code&gt;Q{uri}local&lt;/code&gt;, with an optional second argument to supply a prefix.&lt;/p&gt;
&lt;p&gt;For the reverse, perhaps &lt;code&gt;fn:EQName-from-QName#1&lt;/code&gt;? But the terminology here is a bit loose: in the grammar, EQName covers various formats of which URIQualifiedName is one. But &lt;code&gt;fn:URIQualifiedName-from-QName&lt;/code&gt; is a bit of a mouthful.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item></channel></rss>