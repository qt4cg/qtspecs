<!--XSLT Processor: Saxonica--><!-- <spec id="spec-top" w3c-doctype="&doc.w3c-doctype;" status="int-review"> --><spec xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" id="spec-top" w3c-doctype="rec"><header id="spec-header"><title>XQuery and XPath Data Model 4.0</title><version/><w3c-designation>REC-xpath-datamodel-40</w3c-designation><w3c-doctype>W3C Editor's Draft</w3c-doctype><pubdate><day>01</day><month>January</month><year>2000</year></pubdate><publoc>
    <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2000/REC-xpath-datamodel-40-20000101/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/2000/REC-xpath-datamodel-40-20000101/</loc>
  </publoc><!-- These altlocs URIs are computed from the concatenation of doc.public, doc.shortname, and either '.xml' or
     '-diff-from-yyyymmdd.html', where 'yyyymmdd' is the earlier version of the spec from which a diff has been produced --><altlocs><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2000/REC-xpath-datamodel-40-20000101/xpath-datamodel-40.xml" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML</loc></altlocs><!-- The latestloc URI is computed from doc.latestloc --><latestloc doc="XQuery and XPath Data Model 4.0">
    <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/xpath-datamodel-40/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/xpath-datamodel-40/</loc>
  </latestloc><!-- These prevlocs URIs are always hard-coded and are never computed from entities --><!-- Pubrules doesn't like FPWD to have a prevloc, not even a previous Recommendation --><prevlocs doc="XQuery and XPath Data Model 4.0">
    <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2017/PR-xpath-datamodel-31-20170117/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/2017/PR-xpath-datamodel-31-20170117/</loc>
    <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2016/CR-xpath-datamodel-31-20161213/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/2016/CR-xpath-datamodel-31-20161213/</loc>
    <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2014/CR-xpath-datamodel-31-20141218/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/2014/CR-xpath-datamodel-31-20141218/</loc>
  </prevlocs><latestloc-major doc="XQuery and XPath Data Model 4">
    <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/xpath-datamodel-4/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/xpath-datamodel-4/</loc>
  </latestloc-major><latestloc-tech doc="XQuery and XPath Data Model">
    <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/xpath-datamodel/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/xpath-datamodel/</loc>
  </latestloc-tech><prevrec doc="XQuery and XPath Data Model">
    <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2014/REC-xpath-datamodel-30-20140408/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/2014/REC-xpath-datamodel-30-20140408/</loc>
  </prevrec><authlist><author><name>Norm Tovey-Walsh</name><affiliation>Saxonica, Ltd</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:norm@saxonica.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">norm@saxonica.com</email></author><author><name><phrase><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://john.snelson.org.uk" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">John Snelson</loc> (XML Query WG)</phrase></name><affiliation>MarkLogic Corporation</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:john.snelson@marklogic.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">john.snelson@marklogic.com</email></author><author><name>Andrew Coleman (XML Query WG)</name><affiliation>IBM Hursley Laboratories</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:andrew_coleman@uk.ibm.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">andrew_coleman@uk.ibm.com</email></author></authlist><errataloc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/XML/2017/qt-errata/xpath-datamodel-31-errata.html" xlink:type="simple"/><translationloc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/2003/03/Translations/byTechnology?technology=xpath-datamodel-31" xlink:type="simple"/><!--* Common status section for QT specs.
    * Use is currently not required, but it simplifies things.
    * 
    * Revisions:
    * 2007-01-15 : CMSMcQ : made file, to simplify publication of Rec.
    * 2008-02-15 : JimMelton : cloned from MSM's REC-only material
                     to generalize for all stages
    *--><status id="status"><!-- ************************************************************************** --><!-- * All Status sections must start with the standard boilerplate paragraph * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p><emph>This section describes the status of this
         document at the time of its publication.
         Other documents may supersede this document.
         A list of current W3C publications and the latest
         revision of this technical report can be found in the
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">W3C technical reports index</loc>
         at https://www.w3.org/TR/.</emph></p><p>This document is governed by the
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" id="w3c_process_revision" href="https://www.w3.org/2017/Process-20170301/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">1 March 2017 W3C Process Document</loc>. </p><!-- ************************************************************************** --><!-- * QT publishes suites of documents, which must be described in the       * --><!--     Status section of each document within such a suite.                 * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * There is a lot of detailed customization based on the document stage   * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This is a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/2015/Process-20150901/#rec-publication" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Recommendation</loc> of the W3C. 
It was jointly developed by the W3C 
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/XML/Query/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Query Working Group</loc> and the W3C <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/Style/XSL/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XSLT Working Group</loc>, each of which is part of the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/XML/Activity" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Activity</loc>.</p><!-- ************************************************************************** --><!-- * CR documents must cite features at risk                                * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * Every Status section must have a customized paragraph                  * --><!-- *   This entity is defined completely in the host document.              * --><!-- ************************************************************************** --><p>This Editor's Draft specifies the XQuery and XPath Data Model (XDM)
                               version 4.0, a fully compatible extension of <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/xpath-datamodel-30/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XDM version 3.1</loc>. </p><!-- ************************************************************************** --><!-- * CR docs should, and PR docs must, have a pointer to an implementation  * --><!-- *   report.  We also want to point to the test suite.                    * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This specification is designed to be referenced normatively from
other specifications defining a host language for it; it is not
intended to be implemented outside a host language.  The
implementability of this specification has been tested in the context
of its normative inclusion in host languages defined by the
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/xquery-31/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery 3.1</loc>
and
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/xslt-30/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XSLT 3.0</loc> specifications;
see the
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://dev.w3.org/2011/QT3-test-suite/ReportingResults31/report.html" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery 3.1 implementation report</loc>
(and, in the future, the WGs expect that there will also be an
XSLT 3.0 implementation report) for details.</p><!-- ************************************************************************** --><!-- * The Status section should point to a changelog                         * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>No substantive changes have been made to this specification
since its publication as a Proposed Recommendation.</p><!-- ************************************************************************** --><!-- * The Status section must tell readers where to send comments            * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p>Please report errors in this document using W3C's
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/Bugs/Public/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public Bugzilla system</loc>
         (instructions can be found at
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/XML/2005/04/qt-bugzilla" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/XML/2005/04/qt-bugzilla</loc>).
         If access to that system is not feasible, you may send your comments
         to the W3C XSLT/XPath/XQuery public comments mailing list,
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:public-qt-comments@w3.org" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public-qt-comments@w3.org</loc>.
         It will be very helpful if you include the string 
         “[XDM31]”
         in the subject line of your report, whether made in Bugzilla or in email.
         Please use multiple Bugzilla entries (or, if necessary, multiple email messages)
         if you have more than one comment to make.
         Archives of the comments and responses are available at
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://lists.w3.org/Archives/Public/public-qt-comments/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://lists.w3.org/Archives/Public/public-qt-comments/</loc>. </p><!-- ************************************************************************** --><!-- Status sections must state the stability (not stable, or REC) of the document --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This document has been reviewed by W3C Members, by
software developers, and by other W3C groups and interested parties,
and is endorsed by the Director as a W3C Recommendation. 
It is a stable document and may be used as reference material or cited from
another document. 
W3C's role in making the Recommendation is to draw attention to
the specification and to promote its widespread deployment. 
This enhances the functionality and interoperability of
the Web.</p><!-- ************************************************************************** --><!-- * Finally, all Status sections must end with the appropriate IPR para    * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p>This document was produced by groups operating under the
   <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/Consortium/Patent-Policy-20040205/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">5 February 2004 W3C Patent Policy</loc>.
   W3C maintains a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/2004/01/pp-impl/18797/status#disclosures" rel="disclosure" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public list of any 
   patent disclosures (W3C XML Query Working Group)</loc> and a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/2004/01/pp-impl/19552/status#disclosures" rel="disclosure" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public list of any patent 
   disclosures (W3C XSLT Working Group)</loc> made in connection with the deliverables of 
   each group; these pages also include instructions for disclosing a patent.
   An individual who has actual knowledge of a patent which the individual believes contains
   <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Essential Claim(s)</loc>
   must disclose the information in accordance with
   <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">section 6 of the W3C Patent Policy</loc>. </p><note role="dedication" id="dedication"><p>The publications of this community group 
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="../xquery-40/xpath-40.html#dedication" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">are dedicated</loc> to our co-chair,
Michael Sperberg-McQueen (1954–2024).</p></note></status><abstract><p>This document defines the XQuery and XPath Data Model 4.0,
which is the data model of <bibref ref="xpath-40"/>,
<bibref ref="xslt-40"/>, and <bibref ref="xquery-40"/>, and any other
specifications that reference it.
This document is the result of joint
work by the <bibref ref="XSLWG"/> and the <bibref ref="XQWG"/>.</p></abstract><langusage><language id="en">English</language></langusage><revisiondesc><p>See the CVS changelog.</p></revisiondesc></header><body><div1 id="intro"><head>Introduction</head><changes><change>Use the arrows to browse significant changes since the 3.1 version of this specification.</change><change>Sections with significant changes are marked Δ in the table of contents.</change></changes><p>This document defines the XQuery and XPath Data Model 4.0,
which is the data model of <bibref ref="xpath-40"/>, <bibref ref="xslt-40"/>, and
<bibref ref="xquery-40"/>. </p><p>The XQuery and XPath Data Model 4.0 (henceforth “data model”)
serves two purposes.
First, it defines the information contained in the input to an
XSLT or XQuery processor.  Second, it defines all permissible values of
expressions in the XSLT, XQuery, and XPath languages.  A
language is <emph>closed</emph> with respect to a data model if the value
of every expression in the language is guaranteed to be in the data model.
XSLT 4.0, XQuery 4.0, and XPath 4.0 are all closed with respect to
the data model.</p><p>The data model describes items similar to those of
the <bibref ref="xml-infoset"/>
(henceforth “Infoset”).
 It is written to provide a data model suitable for XPath, XQuery and XSLT, which was not a goal of the Infoset,
 and this leads to a number of differences, some of which are:

</p><ulist><item><p>Support for XML Schema types. The XML Schema recommendations
    define features, such as structures (<bibref ref="xmlschema-1"/>)
    and simple data types (<bibref ref="xmlschema-2"/>), that extend
    the Infoset with precise type information.</p></item><item><p>Representation of collections of documents and of
    complex values. </p></item><item><p>Support for typed atomic items.</p></item><item><p>Support for ordered, heterogeneous sequences.</p></item></ulist><p>As with the Infoset, the XQuery and XPath Data Model 4.0
specifies what information in the documents is accessible but does
not specify the programming-language interfaces or bindings used to
represent or access the data.</p><p>The data model can represent various
values, including not only the input and the output of a stylesheet or query but all
values of expressions used during the intermediate calculations.
Examples include the input document or document repository (represented
as a document node or a sequence of document nodes), the result of a
path expression (represented as a sequence of nodes), the result of an
arithmetic or a logical expression (represented as an <termref def="dt-atomic-item"/>),
a sequence expression resulting in a sequence of items, etc.
</p><p>This document provides a precise definition of the properties of nodes
in the XQuery and XPath Data Model 4.0, how they are accessed, and how
they relate to values in the Infoset and PSVI.</p></div1><div1 id="concepts"><head>Terminology and Concepts</head><p>This section outlines a number of general concepts that apply throughout
this specification.</p><p>In this document, examples and material labeled as “Note” are provided for
explanatory purposes and are not normative.</p><div2 id="terminology"><head>Terminology</head><p>For a full glossary of terms, see <specref ref="glossary"/>.</p><p>In this specification the phrases <rfc2119>must</rfc2119>, <rfc2119>must
                  not</rfc2119>, <rfc2119>should</rfc2119>, <rfc2119>should not</rfc2119>,
                  <rfc2119>may</rfc2119>, <rfc2119>required</rfc2119>, and
                  <rfc2119>recommended</rfc2119>, when used in normative
                  text and rendered in small capitals, are to be interpreted as described in
                  <bibref ref="RFC2119"/>.</p><p><termdef id="dt-implementation-defined" term="implementation     defined"><term>Implementation-defined</term> indicates an aspect that
    may differ between implementations, but must be specified by the
    implementer for each particular implementation.</termdef></p><p><termdef id="dt-implementation-dependent" term="implementation     dependent"><term>Implementation-dependent</term> indicates an aspect
    that may differ between implementations, is not specified by this or
    any W3C specification, and is not required to be specified by the
    implementer for any particular implementation.</termdef></p><p>In all cases where this specification leaves the behavior
    implementation-defined or implementation-dependent, the implementation
    has the option of providing mechanisms that allow the user to
    influence the behavior.</p><p>This specification distinguishes between the data model as a general
concept and specific items (documents, elements, <termref def="dt-atomic-item">atomic items</termref>, etc.)
that are concrete examples of the data model by identifying all concrete
examples as <termref def="dt-instance">instances of the data model</termref>.
</p><p>Sometimes it is necessary to distinguish the case where a
    particular property has no value in the data model. The canonical
    example of such a case is the namespace URI property of an
    <termref def="dt-expanded-qname">expanded QName</termref>
    that is not in any namespace. For such properties, it is
    convenient to be able to speak of “the state of having no value”.
    <termdef id="dt-absent" term="absent">When a property has no value, we
      say that it is <term>absent</term>.</termdef>
  </p><p>Within this specification, the term URI refers to a
    Uniform Resource Identifier as defined in
    <bibref ref="RFC3986"/> and extended in <bibref ref="RFC3987"/>
    with the new name Internationalized Reference Identifier, IRI. The term URI has been retained in preference to
    IRI to avoid introducing new names for concepts such as “Base URI”
    that are defined or referenced across the whole family of XML
    specifications.</p></div2><div2 id="basic-concepts"><head>Basic Concepts</head><changes><change issue="225" PR="232" date="2022-11-05">
        Clarified the terminology concerning atomic types and type annotations.
      </change><change issue="1337" PR="1361" date="2024-08-02">
        The term <term>atomic value</term> has been replaced by <termref def="dt-atomic-item"/>.
      </change></changes><p><termdef id="dt-instance" term="instance of the data model">Every
<term>instance of the data model</term> is a
<termref def="dt-sequence">sequence</termref>.</termdef>
</p><p><termdef id="dt-sequence" term="sequence">A <term>sequence</term>
is an ordered collection of zero or more <termref def="dt-item">items</termref>.</termdef> A sequence cannot be a member
of a sequence. A single item appearing on its own is modeled as a
sequence containing one item. Sequences are defined in <specref ref="sequences"/>.</p><p diff="add" at="2022-11-05"><termdef id="dt-value" term="value">Because every value is a sequence, the term
    <term>value</term> is used synonymously with <termref def="dt-sequence"/>.</termdef></p><p><termdef id="dt-item" term="item">An <term>item</term>
is either
a <termref def="dt-node">node</termref>,
a <termref def="dt-function-item">function</termref>,
or an <termref def="dt-atomic-item">atomic item</termref>.</termdef>
</p><p diff="add" at="2022-11-05"><termdef id="dt-item-type" term="item type">An <term>item type</term> represents
a class of <termref def="dt-item">items</termref>.</termdef> An item is said to
<emph>be an instance of</emph> an item type (or to <emph>match</emph> the item type) if it is a member
of that class. Items generally belong to more than one item type, and the
membership of different item types is overlapping.</p><p>Every node is one of the seven kinds of nodes defined in Section <specref ref="Node"/>. Nodes form a tree. Each node has at most one parent
(reachable via the <function>parent</function> accessor) and zero or more descendant
nodes that are reachable directly or indirectly
via the <function>children</function>,
<function>attributes</function>, and
<function>namespace-nodes</function> accessors.</p><p><termdef id="dt-root-node" term="root node">The
<term>root node</term> is the topmost node of a tree, the node with no
parent.</termdef>
Every tree has exactly one root node and every other node can be reached
from exactly one root node.
</p><note><p>The term “root node” means any node that has no parent. 
  It may be any kind of node. In the XPath 1.0 datamodel the term “root node” was
  used to refer to a document node.</p></note><note diff="add" at="2022-11-05"><p>Generally, the term <term>tree</term>
    is used to refer to a complete tree rooted at a parentless node. On occasions,
    which should be clear from the context, the same term is used to refer
    to a subtree, that is, a tree forming part of a larger tree.</p></note><p><termdef id="dt-document" term="document">A
tree whose root node is a document node is referred to as a
<term>document</term>.</termdef></p><p><termdef id="dt-fragment" term="fragment">A tree whose root node is not a document node is
referred to as a <term>fragment</term>.</termdef></p><p diff="chg" at="2022-11-05"><termdef id="dt-atomic-item" term="atomic item">An
<term>atomic item</term> is a pair (<var>T</var>, <var>D</var>) where <var>T</var> (the <termref def="dt-type-annotation"/>)
  is an <termref def="dt-atomic-type"/>, and <var>D</var> (the <termref def="dt-datum"/>)
  is a point in the value space of <var>T</var>.</termdef></p><p diff="chg" at="2022-11-05"><termdef id="dt-datum" term="datum">The <term>datum</term> of an <termref def="dt-atomic-item"/>
      is a point in the value space of its type, which is also a point in the value space of
      the primitive type from which that type is derived.</termdef> There are 20 primitive atomic types (19 defined
      in XSD, plus <code nobreak="false">xs:untypedAtomic</code>), and these have non-overlapping value spaces, so each
      datum belongs to exactly one primitive atomic type.</p><note diff="chg" at="2022-11-05"><p>The term <term>value space</term> is defined in <bibref ref="xmlschema11-2"/>
      as a set of <emph>values</emph>. The term <term>datum</term> is used here in preference to <emph>value</emph>,
      because <termref def="dt-value"/> has a different meaning in this data model.</p></note><p><termdef id="dt-atomic-type" term="atomic type">An <term>atomic type</term>
is either a <termref def="dt-primitive-simple-type">primitive simple type</termref>
  <phrase diff="add" at="2022-11-05">with variety <code nobreak="false">atomic</code>,</phrase>
or a type derived by restriction from
another atomic type.</termdef>
(Types derived by list or union are not atomic.)
</p><note diff="add" at="2022-11-05"><p>Atomic types include the 19 primitive atomic
    types defined in XSD (such as <code nobreak="false">xs:string</code>, <code nobreak="false">xs:boolean</code>,
    and <code nobreak="false">xs:decimal</code>), the built-in non-primitive types defined in XSD
    (such as <code nobreak="false">xs:integer</code>, and <code nobreak="false">xs:NCName</code>, and <code nobreak="false">xs:dayTimeDuration</code>), 
    atomic types derived from these in a user-defined schema, and the 
    special type <code nobreak="false">xs:untypedAtomic</code>.</p></note><p><termdef id="dt-primitive-simple-type" term="primitive simple type">The
<term>primitive simple types</term> are the types defined
in <specref ref="xs-types"/>.</termdef></p><p diff="chg" at="2022-11-05"><termdef id="dt-type-annotation" term="type annotation">The term <term>type annotation</term> has
      two slightly different meanings. For an <termref def="dt-atomic-item"/>, the type annotation of the value
      is the most specific <termref def="dt-atomic-type"/> that it is an instance of (it is also an instance of every type from which that
      type is derived). For an element or attribute node, the type annotation is the <termref def="dt-schema-type"/>
      (a simple or complex type) against which the node has been validated, defaulting to
      <code nobreak="false">xs:untypedAtomic</code> for unvalidated attribute nodes, and <code nobreak="false">xs:untyped</code>
      for unvalidated element nodes.</termdef></p><p><phrase diff="chg" at="2022-11-05">Named types are identified</phrase> in the data model by an
    <termref def="dt-expanded-qname">expanded QName</termref>. <phrase diff="add" at="2022-11-05">A schema 
      may also contain anonymous types, and these may be used as <termref def="dt-type-annotation">type annotations</termref> 
      on nodes and atomic items; anonymous types, however, cannot be referenced explicitly in programs.</phrase>
    </p><p diff="chg" at="2022-11-05"><termdef id="dt-expanded-qname" term="expanded QName">An
<term>expanded QName</term> is a <phrase diff="del" at="2022-11-05">set of three values</phrase> 
  <phrase diff="add" at="2022-11-05">triple</phrase> consisting of a
  possibly <phrase diff="chg" at="2022-11-05">absent</phrase> prefix, a possibly 
  <phrase diff="chg" at="2022-11-05">absent</phrase> namespace URI, and a local
name.</termdef> See <specref ref="qnames-and-notations"/>.</p><div3 id="xs-types"><head>Types adopted from XML Schema</head><p diff="add" at="2022-11-05"><termdef id="dt-schema-type" term="schema type">A
  <term>schema type</term> corresponds to a <term>type definition component</term>
  as defined in XSD.</termdef> Schema types are either complex types or simple types;
  simple types are either atomic types, list types, or union types.</p><p>The data model adopts the following <phrase diff="add" at="2022-11-05">schema</phrase> types:</p><ulist><item><p>The 19 <phrase diff="add" at="2022-11-05">primitive atomic</phrase> types defined in
<xspecref spec="XS2" ref="built-in-primitive-datatypes"/>
of <bibref ref="xmlschema-2"/>.</p></item><item><p>Three built-in list types:
<code nobreak="false">xs:NMTOKENS</code>, <code nobreak="false">xs:IDREFS</code>, and <code nobreak="false">xs:ENTITIES</code>.
</p></item><item><p>The following types, which were originally defined in
<bibref ref="xpath-datamodel"/> and were subsequently adopted by
<bibref ref="xmlschema11-2"/>:
<code nobreak="false">xs:anyAtomicType</code>, <code nobreak="false">xs:dayTimeDuration</code>,
<code nobreak="false">xs:yearMonthDuration</code>.
</p></item><item><p>In the case of a processor that supports
<bibref ref="xmlschema11-2"/>, 
the new union type <code nobreak="false">xs:error</code> (a type with no instances)
and the new derived type <code nobreak="false">xs:dateTimeStamp</code>.</p></item><item><p>The following types, which use the <code nobreak="false">xs:</code> namespace
and are defined here in the data model but not in XML Schema:
<code nobreak="false">xs:untypedAtomic</code>, and
<code nobreak="false">xs:numeric</code>,
a union type whose members are <code nobreak="false">xs:double</code>, <code nobreak="false">xs:float</code>
and <code nobreak="false">xs:decimal</code>.
</p></item></ulist><p diff="add" at="2022-11-05">Schema types fulfill a role different from <termref def="dt-item-type">item types</termref>.
  Schema types other than atomic types arise in the data model only as <termref def="dt-type-annotation">type annotations</termref>
  on element and attribute nodes. Nodes are not instances of schema types in the sense of the XPath <code nobreak="false">instance of</code>
  operator; but an element or attribute node may be an instance of the item type <code nobreak="false">element(*, S)</code> or <code nobreak="false">attribute(*, S)</code>
  where <code nobreak="false">S</code> is a schema type. The node matches this item type if its type annotation is <code nobreak="false">S</code>, or a type derived from 
    <code nobreak="false">S</code>, which will be the case if the node has been validated against type <code nobreak="false">S</code> in the course of 
  schema validation.</p><p diff="add" at="2022-11-05">Schema types and item types form overlapping categories:</p><ulist diff="add" at="2022-11-05"><item><p>Atomic types belong to both categories.</p></item><item><p>Node types and function types are item types, but they are not schema types.</p></item><item><p>Complex types, list types, and union types are schema types, but they are not item types.</p></item></ulist></div3></div2><div2 id="notation"><head>Notation</head><p>To explain the data model, this specification uses both prose and a defined set of accessor
functions. The accessors are shown with the
prefix <emph>dm:</emph>. This prefix is always shown in italics to
emphasize that these functions are abstract; they exist to explain the
interface between the data model and specifications that rely on the
data model: they are not accessible directly from the host
language.</p><p>Several prefixes are used throughout this document for notational
convenience. The following bindings are assumed.</p><olist><item><p><code nobreak="false">xs:</code> bound to
<code nobreak="false">http://www.w3.org/2001/XMLSchema</code>
</p></item><item><p><code nobreak="false">xsi:</code> bound to
<code nobreak="false">http://www.w3.org/2001/XMLSchema-instance</code>
</p></item><item><p><code nobreak="false">fn:</code> bound to
<code nobreak="false">http://www.w3.org/2005/xpath-functions</code>
</p></item></olist><p>In practice, any prefix that is bound to the appropriate URI may be used.</p><p>The signature of accessor functions is shown using the same style as
<bibref ref="xpath-functions-40"/>, described in
<xspecref spec="FO40" ref="func-signatures"/>.</p><p>This document relies on the <bibref ref="xml-infoset"/> and
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/xmlschema-1/#key-psvi" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Post-Schema-Validation
Infoset</loc> (PSVI). Information items
and properties are indicated by the styles <emph role="info-item">information
item</emph> and <emph role="infoset-property">infoset property</emph>, respectively.</p><p>Some aspects of type assignment rely on the ability to access properties of
the schema components. Such properties are indicated by curly brackets, e.g.,
{component property}. Note that this does not mean a lightweight schema processor
cannot be used, it only means that the application must have some mechanism to
access the necessary properties.</p></div2><div2 id="node-identity"><head>Node Identity</head><p>Each node has a unique identity.

The identity of
a node is distinct from its value or other intrinsic properties; nodes may be
distinct even when they have the same values for all intrinsic
properties other than their identity.
(The
identity of <termref def="dt-atomic-item">atomic items</termref>, by contrast, is determined solely by their
intrinsic properties. No two distinct integers, for example, have the
same value;
every instance of the value “5” as an integer is identical to every
other instance of the value “5” as an integer.)
</p><note><p>The concept of node identity should not be confused with the
concept of a unique ID, which is a unique name assigned to an element
by the author to represent references using ID/IDREF correlation.</p></note></div2><div2 id="document-order"><head>Document Order</head><p><termdef id="dt-document-order" term="document order">A
<term>document order</term> is defined among all the nodes
accessible during a given query or transformation. Document order is a
total ordering, although the relative order of some nodes is
implementation-dependent. Informally, document order is the order in
which nodes appear in the XML serialization of a document.</termdef>
<termdef id="dt-stable" term="stable">Document order is
<term>stable</term>, which means that the relative order of two
nodes will not change during the processing of a given query or
transformation, even if this order is implementation-dependent.</termdef></p><p>Within a tree, document order satisfies the following constraints:</p><olist><item><p>The root node is the first node.
</p></item><item><p>Every node occurs before all of its children and descendants.</p></item><item><p>namespace nodes immediately follow the element node with which
they are associated. The relative order of namespace nodes is
stable but implementation-dependent.</p><imp-dep-feature>The relative order of namespace nodes nodes is
stable but implementation-dependent.</imp-dep-feature></item><item><p>attribute nodes immediately follow the namespace nodes of the
element node with which they are associated, if any; otherwise they immediately
follow the element node; with which they are associated. The relative order of attribute nodes is
stable but implementation-dependent.</p><imp-dep-feature>The relative order of attribute nodes nodes is
stable but implementation-dependent.</imp-dep-feature></item><item><p>The relative order of siblings is the order in which they occur in
the <emph role="dm-node-property">children</emph> property of their parent node.</p></item><item><p>Children and descendants occur before following siblings.</p></item></olist><p>The relative order of nodes in distinct trees is stable but
implementation-dependent, subject to the following constraint: If
any node in a given tree, <code nobreak="false">T1</code>, occurs before any node in a different
tree, <code nobreak="false">T2</code>, then all nodes in <code nobreak="false">T1</code> are before all nodes in
<code nobreak="false">T2</code>.</p><imp-dep-feature>The relative order of distinct trees is
stable but implementation-dependent.</imp-dep-feature></div2><div2 id="sequences"><head>Sequences</head><p>An important characteristic of the data model is that there is no
distinction between an <termref def="dt-item"/> (a node, function, or <termref def="dt-atomic-item"/>) and a
singleton <termref def="dt-sequence"/> containing that item. An item is
equivalent to a singleton sequence containing that item and vice
versa.</p><p>A sequence may contain any mixture of nodes, functions, and 
  <termref def="dt-atomic-item">atomic items</termref>. When a node is added to a sequence its
identity remains the same. Consequently a node may occur in more than
one sequence and a sequence may contain duplicate items.</p><p>Sequences never contain other sequences; if sequences are combined,
the result is always a “flattened” sequence. In other words, appending
“(d e)” to “(a b c)” produces a sequence of length 5: “(a b c d e)”.
It <emph>does not</emph> produce a sequence of length 4: “(a b c (d e))”;
such a nested sequence never occurs.</p><note><p>Sequences replace node-sets from XPath 1.0. In XPath 1.0, node-sets
do not contain duplicates. In generalizing node-sets to sequences,
duplicate removal is provided by functions on node sequences.</p></note><note><p>Arrays and maps are function items and
therefore can also be contained within sequences.</p></note><p>The following constructor and accessor functions are defined for sequences;
  these provide a formal underpinning for user-visible functions, operators,
  and language constructs.</p><div3 id="dm-empty-sequence"><head><code nobreak="false">empty-sequence</code> Constructor</head><example role="signature"><proto class="dm" name="empty-sequence" return-type="item()*" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"/></example><p>The <code nobreak="false">dm:empty-sequence</code> constructor returns a sequence containing no items.</p><p>The function is exposed in XPath as an empty sequence expression, written <code nobreak="false">()</code>.</p></div3><div3 id="dm-sequence-concat"><head><code nobreak="false">sequence-concat</code> Constructor</head><example role="signature"><proto class="dm" name="sequence-concat" return-type="item()*" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="input1" type="item()*"/><arg name="input2" type="item()*"/></proto></example><p>The <code nobreak="false">dm:sequence-concat</code> constructor returns a sequence by concatenating two supplied sequences.</p><p>The returned sequence contains the items in <code nobreak="false">$input1</code> (retaining order), followed by the items in
      <code nobreak="false">$input2</code> (also retaining order).</p><p>The function is exposed in XPath through the comma operator <code nobreak="false">,</code>.</p></div3><div3 id="dm-count"><head><code nobreak="false">count</code> Accessor</head><example role="signature"><proto class="dm" name="count" return-type="xs:integer" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="input" type="item()*"/></proto></example><p>The <code nobreak="false">dm:count</code> accessor function returns the number of items in <code nobreak="false">$input</code>.</p><p>The function is exposed in XPath through the <code nobreak="false">fn:count</code> function.</p></div3><div3 id="dm-iterate-sequence"><head><code nobreak="false">iterate-sequence</code> Accessor</head><example role="signature"><proto class="dm" name="iterate-sequence" return-type="item()*" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="input" type="array(*)"/><arg name="action" type="function(item(), xs:integer) as item()*"/></proto></example><p>The <code nobreak="false">dm:iterate-sequence</code> accessor calls the supplied <code nobreak="false">$action</code>
      function once for each item in <code nobreak="false">$input</code>, in order,
      and returns the sequence concatenation of the results. The <code nobreak="false">$action</code> function
      is called with two arguments. The first argument is an item in <code nobreak="false">$input</code>,
      and the second is the 1-based ordinal position of the item within <code nobreak="false">$input</code>.</p><p>The function is exposed in XPath most directly through the function <code nobreak="false">for-each</code>,
        as well as <code nobreak="false">for</code> expressions in XPath, <code nobreak="false">for</code> clauses in FLWOR expressions
        in XQuery, and the <code nobreak="false">xsl:for-each</code> instruction in XSLT.
        It also underpins all other functions that manipulate sequences, such as <code nobreak="false">fn:count</code>
       and <code nobreak="false">fn:filter</code>.</p></div3></div2><div2 id="namespace-names"><head>Namespace Names</head><p>The specifications
<bibref ref="xml-names"/> and <bibref ref="xml-names11"/>
introduce
the concept of a namespace name. In <bibref ref="xml-names"/> a namespace name
is required to be a URI; in <bibref ref="xml-names11"/> it is required to be an
IRI; but both specifications explicitly do not require a processor to
check that namespace names appearing in an instance document are in
fact valid URIs or IRIs.</p><p><termdef id="dt-namespace-uri" term="Namespace URI"> This
specification uses the term <term>Namespace URI</term> to refer to a
namespace name, whether or not it is a valid URI or IRI</termdef>.
Following the lead of <bibref ref="xml-names"/> and <bibref ref="xml-names11"/>,
processors implementing this data model <rfc2119>may</rfc2119> raise an error if a
namespace name is not a valid URI or IRI (depending on whether they
support
<bibref ref="xml-names"/> or <bibref ref="xml-names11"/>),
but they are <emph>not required</emph> to make any checks.
Note that the use of a relative reference as a namespace name is
deprecated and is defined to be meaningless, but it is not an error.
Namespace names, whatever form they take, are treated as character
strings and compared for equality using codepoint-by-codepoint
comparison, subject only to whitespace normalization if they appear in
a context (for example, within an attribute value) where this is
appropriate.</p><p>In some interfaces, namespace names are held as values of type
<code nobreak="false">xs:anyURI</code>. For example, the namespace part of an expanded QName is
defined to be a value of type <code nobreak="false">xs:anyURI</code>. In
<bibref ref="xmlschema-2"/>, the type <code nobreak="false">xs:anyURI</code> imposes some
restrictions on the value space, but there is latitude for
implementers to decide exactly what these restrictions are. In
<bibref ref="xmlschema11-2"/> there are no restrictions on the form of
an <code nobreak="false">xs:anyURI</code> value, so any sequence of characters is
acceptable within the value space. In this and related specifications,
the use of the type <code nobreak="false">xs:anyURI</code> to hold a namespace name does not imply
any restrictions on the value space beyond those described in this
section: implementations <rfc2119>may</rfc2119> reject character strings that are not
valid URIs or IRIs, but they are <emph>not required</emph> to do so.
</p></div2><div2 id="types"><head>Schema Information</head><p>The data model supports strongly typed languages such as
<bibref ref="xpath-40"/> and <bibref ref="xquery-40"/>
that have a type system based on <bibref ref="xmlschema-1"/>. To achieve this,
the data model includes (by reference) the Schema Component Model described in
<bibref ref="xmlschema-1"/>.
</p><note><p>The Schema Component Model includes a number of kinds of
component, such as type definitions and element and attribute
declarations, and defines the properties and relationships of these
components. Many of these components and properties are not used by the
language specifications that rely on XDM, and where this is the case,
there is no requirement for implementations to make them visible.
However, this specification makes no attempt to define the minimal
subset of the schema component model that is needed to support the
semantics of XPath and XQuery processing.</p><p>There are two main areas where the language semantics depend on
information in schema components:</p><olist><item><p>Expressions are evaluated with respect to a static context, which
includes schema components, specifically type definitions, element
declarations, and attribute declarations. The names of such components
may be used in language constructs only if the components are present in
the static context.</p></item><item><p>Values including element and attribute nodes, and <termref def="dt-atomic-item">atomic items</termref>,
have a property called a type annotation whose value is a type: this is
a reference to a type definition in the Schema Component Model.
</p></item></olist></note><p>The diagram below illustrates the 
    <phrase diff="chg" at="2022-11-05"><termref def="dt-schema-type"/></phrase>
    system, in which all types are derived from 
    <code nobreak="false">xs:anyType</code>. </p><!-- This markup is slightly idiosyncratic in order to support
     styling with CSS. --><p role="type-hierarchy-figure">
   <ulist role="type-hierarchy type-colors"><item role="abstract root"><p role="root">
            <phrase>XML Schema types</phrase>
            <phrase role="kind"> (abstract)</phrase>
         </p><ulist><item role="built-in-complex"><p role="first">
                  <phrase>anyType</phrase>
                  <phrase role="kind"> (built-in complex)</phrase>
               </p><ulist><item role="abstract"><p role="first">
                        <phrase>Simple types</phrase>
                        <phrase role="kind"> (abstract)</phrase>
                     </p><ulist><item role="built-in-list"><p role="first">
                              <phrase>anySimpleType</phrase>
                              <phrase role="kind"> (built-inlist)</phrase>
                           </p><ulist><item role="abstract"><p role="first">
                                    <phrase>Atomic types</phrase>
                                    <phrase role="kind"> (abstract)</phrase>
                                 </p><ulist><item role="built-in-atomic"><p role="first">
                                          <phrase><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#th_anyAtomicType" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">anyAtomicType</loc></phrase>
                                          <phrase role="kind"> (built-in atomic)</phrase>
                                       </p></item></ulist></item><item role="abstract"><p role="item">
                                    <phrase>list types</phrase>
                                    <phrase role="kind"> (abstract)</phrase>
                                 </p><ulist><item role="built-in-list"><p role="item">
                                          <phrase>ENTITIES</phrase>
                                          <phrase role="kind"> (built-in list)</phrase>
                                       </p></item><item role="built-in-list"><p role="first">
                                          <phrase>IDREFS</phrase>
                                          <phrase role="kind"> (built-in list)</phrase>
                                       </p></item><item role="built-in-list"><p role="item">
                                          <phrase>NMTOKENS</phrase>
                                          <phrase role="kind"> (built-in list)</phrase>
                                       </p></item><item role="user-defined"><p role="last">
                                          <phrase>user-defined list types</phrase>
                                          <phrase role="kind"> (user-defined)</phrase>
                                       </p></item></ulist></item><item role="abstract"><p role="last">
                                    <phrase>union types</phrase>
                                    <phrase role="kind"> (abstract)</phrase>
                                 </p><ulist><item role="built-in-complex"><p role="first">
                                          <phrase>numeric</phrase>
                                          <phrase role="kind"> (built-in complex)</phrase>
                                       </p></item><item role="user-defined"><p role="item">
                                          <phrase>user-defined union types</phrase>
                                          <phrase role="kind"> (user-defined)</phrase>
                                       </p></item><item role="user-defined"><p role="last">
                                          <phrase>user-defined enumeration types</phrase>
                                          <phrase role="kind"> (user-defined)</phrase>
                                       </p></item></ulist></item></ulist></item><item role="abstract"><p role="last">
                              <phrase>complex types</phrase>
                              <phrase role="kind"> (complex)</phrase>
                           </p><ulist><item role="built-in-complex"><p role="first">
                                    <phrase>untyped</phrase>
                                    <phrase role="kind"> (built-in complex)</phrase>
                                 </p></item><item role="user-defined"><p role="last">
                                    <phrase>user-defined complex types</phrase>
                                    <phrase role="kind"> (user-defined)</phrase>
                                 </p></item></ulist></item></ulist></item></ulist></item></ulist></item></ulist>

<ulist role="type-hierarchy type-colors"><item><p role="root"><phrase>Supertype</phrase></p><ulist><item><p><phrase>subtype</phrase></p></item></ulist></item></ulist>
<ulist role="type-legend type-colors"><item role="abstract"><p>
         <phrase>Abstract types</phrase>
         <phrase role="kind"> (abstract)</phrase>
      </p></item><item role="built-in-atomic"><p>
         <phrase>Built-in atomic types</phrase>
         <phrase role="kind"> (built-in atomic)</phrase>
      </p></item><item role="built-in-complex"><p>
         <phrase>Built-in complex types</phrase>
         <phrase role="kind"> (built-in complex)</phrase>
      </p></item><item role="built-in-list"><p>
         <phrase>Built-in list types</phrase>
         <phrase role="kind"> (built-in list)</phrase>
      </p></item><item role="user-defined"><p>
         <phrase>User-defined types</phrase>
         <phrase role="kind"> (user-defined)</phrase>
      </p></item></ulist>
</p><!--
<p>The list shows a portion of the type hierarchy, rooted at <code>xs:anyType</code>
which represents, conceptually, all of the XML Schema types. The <code>xs:anySimpleType</code>,
representing conceptually all of the simple types, and all of the conceptual complex types,
are derived from <code>xs:anyType</code>. The <code>xs:anyAtomicType</code>
representing conceptually all of the atomic types, and all of the conceptual list
and union types are derived from <code>xs:anySimpleType</code>. The types
<code>xs:IDREFS</code>, <code>xs:NMTOKENS</code>, <code>xs:ENTITIES</code>,
and user-defined list types are derived from list types. The types
<code>xs:numeric</code> and user-defined union types are derived from the union
types. The types <code>xs:untyped</code> and user-defined complex types are derived
from complex types.</p>
--><div3 id="schema-consistency" diff="add" at="Issue451"><head>Schema Consistency</head><p><termdef id="dt-schema" term="schema">Following the terminology of <bibref ref="xmlschema-1"/>,
  a <term>schema</term> is defined as set of schema components. Schema components include,
  for example, element declarations and type definitions.</termdef></p><note><p>This contrasts with a <term>schema document</term>, which is an XML document
  containing an <code nobreak="false">xs:schema</code> element and other XML elements such as 
  <code nobreak="false">xs:element</code> and <code nobreak="false">xs:complexType</code>. In popular usage, the term
    <term>schema</term> is often used inaccurately to refer to a <term>schema document</term>.
  A schema generally consists of the result of processing a set of schema documents linked
  using <code nobreak="false">xs:include</code> and <code nobreak="false">xs:import</code> declarations; it may also
  include built-in schema components that are known intrinsically to a processor, or
  schema components that are constructed programmatically.</p></note><p>It is possible for an application to use more than one schema. For example, a transformation
  may accept as input a source document validated against a schema <var>X</var>, and produce as output a result
  document validated against a different schema <var>Y</var>; the stylesheet or query might import a schema that is the
    union of <var>X</var> and <var>Y</var>. Different modules of a query, or different packages
  within a stylesheet, may import different schemas. When this happens, there is a requirement
  that the different schemas must be compatible with each other. This requirement is expanded
  in the following paragraphs.</p><p><termdef id="dt-schema-compatible" term="compatible (of schemas)">Two 
    <termref def="dt-schema">schemas</termref> 
    <var>X</var> and <var>Y</var> are 
    <term>compatible</term> if the union of 
    <var>X</var> and <var>Y</var> is a valid <termref def="dt-schema"/>.</termdef> This essentially
      means that there must be no schema components in <var>X</var> and <var>Y</var> that have
    the same name but different definitions.</p><p>An implication of this rule is that when one schema document uses <code nobreak="false">xs:redefines</code>
    or <code nobreak="false">xs:override</code> to modify the definitions found in another schema document, the
    resulting schemas will generally be incompatible.</p><p>The rule means that when a type <var>T</var> appears in both <var>X</var> and <var>Y</var>,
  the properties of the schema component corresponding to <var>T</var>, and the properties of all 
    the schema components that it refers to, transitively, will be the same.</p><p>This will always be true (in the absence of <code nobreak="false">xs:redefines</code> and <code nobreak="false">xs:override</code>)
    if both schemas derive their definition of <var>T</var> from the same
    schema document. It may also be true if the definitions of <var>T</var> derive from different
  schema documents, but in this case processors <rfc2119>may</rfc2119> treat the definitions as incompatible
  without further analysis.</p><p>It will <emph>not</emph> always be the case that validating an element node <var>N</var> against type 
    <var>T</var> using schema <var>X</var> has the same outcome as validating the same
    element node <var>N</var> against type <var>T</var> using schema <var>Y</var>. Cases where the outcome
  may be different include the following:</p><ulist><item><p>The content model of <var>T</var> includes an element particle <var>E</var>
    whose corresponding element declaration has different substitution group members
    in <var>X</var> and <var>Y</var>.</p></item><item><p>Schema <var>X</var> includes a type <var>U</var> that extends <var>T</var>, and 
      <var>U</var> is not present in <var>Y</var>; element <var>N</var> has the
      attribute <code nobreak="false">xsi:type="U"</code>, which references this extended type definition.</p></item><item><p>The content model of <var>T</var> includes a wildcard particle 
      that specifies <code nobreak="false">processContents="lax"</code> or <code nobreak="false">processContents="strict"</code>; 
      element <var>N</var> has a child <var>C</var> that is matched against this wildcard; a declaration
      for <var>C</var> is present in <var>X</var> but not in <var>Y</var>.
    </p></item><item><p>The content model of <var>T</var> (in XSD 1.1) includes a wildcard particle 
      that specifies <code nobreak="false">notQName="##defined</code>; 
      element <var>N</var> has a child <var>C</var> that is matched against this wildcard; a declaration
      for <var>C</var> is present in <var>X</var> but not in <var>Y</var>.
    </p></item></ulist><p>It is essential that nodes validated against one schema can be passed to a stylesheet or query
  that is using a different but compatible schema. This is necessary, for example, to ensure that
  the validated output of one stylesheet can form the validated input of another. 
  The definitions for schema-based 
    <termref def="dt-item-type">item types</termref> such as <code nobreak="false">element(*, T)</code>
    and <code nobreak="false">schema-element(E)</code> therefore allow for the possibility that the node being
  tested against the item type was validated using a different but compatible schema, and by
  implication, that revalidation using the local schema might not succeed.</p><note><p>It is potentially useful to prevent differences arising between different schemas
  that share schema components by:</p><ulist><item><p>Disallowing extensions to element declarations and types by using attributes such as
      <code nobreak="false">blockDefault="#all"</code></p></item><item><p>Avoiding use of wildcards whose effect depends on the presence of unrelated
      schema components, for example <code nobreak="false">processContents="lax"</code>
      and <code nobreak="false">processContents="strict"</code>.</p></item></ulist></note><!--<p>There is a constraint that the total set of <phrase diff="add" at="2022-11-05">schema</phrase> components used during
expression processing (both statically and dynamically) must constitute
a valid schema. This implies, for example, that this total set does not
include two different types with the same expanded name.</p>
--><note><p>This makes it the responsibility of the processor to ensure that
the schema components used in the static context of a query or
expression during static analysis are compatible with the schema
components used to validate documents during query or expression
evaluation. This specification does not say how this should be achieved.
</p></note><p>It is also a constraint that the schema information available to the processor must
contain at least the components and properties needed to correctly
implement the semantics of the XPath and XQuery language. For example,
this means that given <phrase diff="chg" at="2022-11-05">an element node</phrase> with a particular type annotation <var>T</var>, and a
  function that expects an argument of type <phrase diff="chg" at="2022-11-05"><code nobreak="false">element(*, S)</code></phrase>, there must be sufficient
information available to the processor to establish whether or not <var>T</var> is
derived from <var>S</var>. As with other consistency constraints described in this
data model, it is a precondition that these constraints are satisfied;
the specifications do not speculate on what happens if they are not.</p></div3><div3 id="types-representation"><head>Representation of Types</head><p>The data model uses
<termref def="dt-expanded-qname">expanded QNames</termref> to
represent the names of schema types, which include the built-in
types defined by <bibref ref="xmlschema-2"/> and the five additional types
defined by this specification, and may include other user- or
implementation-defined types.</p><imp-def-feature>Support for additional user-defined or
implementation-defined types is implementation-defined.</imp-def-feature><p>For XML Schema types, the namespace name of the expanded QName is
the {target namespace} property of the type definition, and its local
name is the {name} property of the type definition.</p><p>The data model relies on the fact that an expanded QName uniquely
identifies every named type. Although it is possible for different
schemas to define different types with the same expanded QName, at
most one of them can be used in any given validation episode. The data model
cannot support environments where different types with the same expanded QName
are available.
</p><imp-dep-feature>The names of anonymous types are implementation-dependent.
</imp-dep-feature><p>The scope over which the names of anonymous types must be
meaningful and distinct depends on the processing context.
It is the responsibility of the host language to define the
size and scope of the processing context.</p><note diff="add" at="2022-11-05"><p>The type annotation of a schema-validated node,
  or of an <termref def="dt-atomic-item"/> extracted by atomizing a schema-validated node,
  may be an anonymous type. Queries and expressions cannot refer explicitly
  to anonymous types, but it is always possible to test whether such an item
  matches a named type from which the anonymous type is derived.</p></note></div3><div3 id="types-predefined" diff="chg" at="2023-09-28"><head>Predefined Types</head><p>The three atomic types <code nobreak="false">xs:anyAtomicType</code>,
    <code nobreak="false">xs:dayTimeDuration</code>, and
    <code nobreak="false">xs:yearMonthDuration</code> were first introduced in the 2.0 version of this specification,
  and were subsequently adopted by XSD 1.1. These types are always present in the XDM data model,
  with the definitions as given in XSD 1.1, whether or not the processor actually supports XSD 1.1.</p><note><p>The types <code nobreak="false">xs:dayTimeDuration</code>, and
      <code nobreak="false">xs:yearMonthDuration</code> have a special status in these specifications because many
    arithmetic operations (such as comparing two durations) are available in XPath only on these
    subtypes of <code nobreak="false">xs:duration</code>, not on the primitive type <code nobreak="false">xs:duration</code> itself.</p><p>The datatype <code nobreak="false">xs:anyAtomicType</code> is an atomic type that
      includes all atomic items (and no values that are not atomic). Its
      base type is <code nobreak="false">xs:anySimpleType</code>, from which all simple
      types, including atomic, list, and union types are derived. All
      primitive atomic types, such as <code nobreak="false">xs:decimal</code> and
      <code nobreak="false">xs:string</code>, have <code nobreak="false">xs:anyAtomicType</code>
      as their base type.</p><p>No type may be derived from <code nobreak="false">xs:anyAtomicType</code>
      by restriction, union, or list.</p></note><p>The types <code nobreak="false">xs:untyped</code> and <code nobreak="false">xs:untypedAtomic</code>, although
  they have names in the XSD namespace, are defined in this XDM specification, and not
  in XSD.</p><p>The type <term>xs:untypedAtomic</term> denotes untyped atomic
    data, such as text that has not been assigned a more specific type. It is
    classified as an atomic type. An attribute that has not been validated 
    (or that has been validated in skip mode) is represented in the data
    model by an attribute node with the type annotation <code nobreak="false">xs:untypedAtomic</code>. No
    predefined types are derived from <code nobreak="false">xs:untypedAtomic</code>
    <phrase>and no such derivations are allowed</phrase>.
  </p><p>The datatype <term>xs:untyped</term> is used as the type annotation of
    an element node that has not been validated, or that has been validated in
    skip mode. It is a classified as a complex type. The properties of <code nobreak="false">xs:untyped</code>
    are the same as the properties of <code nobreak="false">xs:anyType</code> except for
    the base type and name. The base type of <code nobreak="false">xs:untyped</code> is
    <code nobreak="false">xs:anyType</code>.
    No predefined types are derived from <code nobreak="false">xs:untyped</code>
    <phrase>and no such derivations are allowed</phrase>.</p></div3><div3 id="xml-and-xsd-versions"><head>XML and XSD Versions</head><changes><change issue="414" PR="546" date="2023-07-25">
      Relaxed the rules regarding use of non-XML characters in instances of <code nobreak="false">xs:string</code>.
    </change></changes><p>Some of the types defined in XML Schema have differing definitions
in XSD 1.0 and XSD 1.1; furthermore, some types are defined by
reference to other specifications, including XML and XML Namespaces,
and these too may vary from one version of the specification to the
next.</p><p>As a general policy, implementations of data types
<rfc2119>should</rfc2119> support the latest definitive version of any
referenced specification, even if that is published after the date of
this specification.</p><p>This means, for example, that the <code nobreak="false">xs:string</code> data type <rfc2119>should</rfc2119>
support the set of characters defined by Unicode. Similarly, the <code nobreak="false">xs:anyURI</code> data
type <rfc2119>should</rfc2119> support the definition used in XSD 1.1 (which allows any
sequence of characters), and the <code nobreak="false">xs:NCName</code> data type <rfc2119>should</rfc2119> support
the definition based on the syntax of a name as defined in both XML
1.1 Second Edition and XML 1.0 Fifth Edition (which provide the same definition).</p><p>In practice interoperability problems can arise both because
specifications are not always in synchronization with each other (for
example, XSD 1.0 contains references to dated versions of XML 1.0
other than the latest version), and also because implementations <rfc2119>may</rfc2119>
use third-party components (such as XML parsers, serializers, and
schema validators) that were built against different versions of the
base specifications. For these reasons, use of the latest version of
referenced specifications is generally <emph>recommended</emph> but not
<emph>required</emph>.
It is implementation-dependent how a processor handles any such
conflicts.</p><p diff="chg" at="2023-06-12"><termdef term="string" id="dt-string">A
<term>string</term>
is a sequence of zero or more
<termref def="dt-character">characters</termref>.</termdef></p><p diff="chg" at="2023-06-12"><termdef term="character" id="dt-character">A
<term>character</term> is any Unicode character.</termdef>
Implementations <rfc2119>may</rfc2119> restrict characters
to those Unicode characters allowed by the <code nobreak="false">Char</code>
production in <bibref ref="xml"/>. Unpaired surrogates are always forbidden.</p><p><termdef id="dt-codepoint" term="codepoint">A
<term>codepoint</term> is a non-negative integer assigned to a
<termref def="dt-character">character</termref> by the Unicode
consortium, or reserved for future assignment to a
character.</termdef></p><p diff="add" at="2023-06-12">The definitions of <termref def="dt-string">string</termref> and
<termref def="dt-character">character</termref> in the data model
allow an implementation to accept input that cannot occur in a
well-formed XML document. For example, an implementation might allow
the <code nobreak="false">unparsed-text()</code> function to return the content of a
text file that includes the control character <char>U+0007</char> or might
not restrict what <code nobreak="false">codepoints-to-string()</code> can return.</p><p diff="add" at="2023-06-12">An implementation that allows a broader repertoire of characters to
be consumed by the processor, <rfc2119>must</rfc2119> ensure that</p><olist diff="add" at="2023-06-12"><item><p>Any characters serialized with the XML or XHTML output methods satisfy the
well-formedness criteria of the selected version of XML.</p></item><item><p>Any schema validation carried out using an XML Schema 1.0 or 1.1 schema rejects
any nodes or <termref def="dt-atomic-item">atomic items</termref> containing characters that do not satisfy the
constraints of the selected version of XML.</p></item></olist><note diff="add" at="2023-09-28"><p>The lexical space of type <code nobreak="false">xs:duration</code> is defined in XSD 1.1 part 2 (§3.3.6.2) 
      in two different ways:
    with a BNF grammar starting with the production <code nobreak="false">durationLexicalRep</code>, and with a regular 
    expression. The two definitions are inconsistent: the BNF allows a decimal point at the start or end
    of the seconds component, while the regular expression requires any decimal point to be preceded and followed
    by a digit. For the purposes of this specification, the regular expression is considered to be 
    correct, and the BNF incorrect; this makes the representation identical to that in XSD 1.0, 
    and is compatible with ISO 8601.</p></note></div3></div2><div2 id="types-hierarchy"><head>Type System</head><p>Every value manipulated by XPath, XQuery, or XSLT is a <termref def="dt-sequence"/>
  comprising zero or more <termref def="dt-item">items</termref>.</p><p><termdef id="dt-sequence-type" term="sequence type">A <term>sequence type</term>
    constrains the set of permitted sequences, by defining the permitted 
    <termref def="dt-item-type">item types</termref>
  and the permitted number of items in the sequence (exactly zero, exactly one, zero-or-more,
  one-or-more, zero-or-one).</termdef></p><p diff="chg" at="2022-11-05">Every <termref def="dt-item">item</termref> is
    an instance of one or more <termref def="dt-item-type">item types</termref>:</p><ulist diff="chg" at="2022-11-05"><item><p>All items are instances of the type <code nobreak="false">item()</code>.</p></item><item><p>Every <termref def="dt-node"/> is an instance of the type <code nobreak="false">node()</code>, and more
      specifically it is an instance of one of seven node kinds: <code nobreak="false">document()</code>,
      <code nobreak="false">element(*)</code>, <code nobreak="false">attribute(*)</code>, <code nobreak="false">text()</code>,
      <code nobreak="false">comment()</code>, <code nobreak="false">processing-instruction()</code>, or
      <code nobreak="false">namespace()</code>. Nodes may also be instances of more specific
      types characterized by the node name and type annotation.</p></item><item><p>Every <termref def="dt-atomic-item"/> is an instance of a specific <termref def="dt-atomic-type"/>
      determined by its <termref def="dt-type-annotation"/>; it is also an instance of every type from which that
      type is derived by restriction (directly or indirectly), and of every union type that
      includes that type as a member type.</p></item><item><p>Every <termref def="dt-function-item"/> is an instance of the generic type <code nobreak="false">function(*)</code>,
      and also of a specific function type defining the types of the function's parameters and the
      type of the result.</p><p>A <termref def="dt-map-item"/>, as well as being a function, is also an instance of the generic
        map type <code nobreak="false">map(*)</code>, of more specific map types <code nobreak="false">map(K, V)</code> defining the
        types of the keys and values, and perhaps of one or more record types that associate a type with 
        specific key values.</p><p>An <termref def="dt-array-item"/>, as well as being a function, is also an instance of the generic
        array type <code nobreak="false">array(*)</code>, and also of more specific array types <code nobreak="false">array(M)</code>
        defining the type of the array's members.</p></item></ulist><p>This section describes how <termref def="dt-item-type">item types</termref> relate to each other.</p><p>The diagrams below show how nodes, functions,
<termref def="dt-primitive-simple-type">primitive simple types</termref>,
and user defined types fit together into a type system.

In the diagrams, connecting lines represent relationships between derived types
and the types from which they are derived;
the latter are always higher and to the left of the latter. 
</p><p>The <code nobreak="false">xs:IDREFS</code>, <code nobreak="false">xs:NMTOKENS</code>,
<code nobreak="false">xs:ENTITIES</code> types, and <code nobreak="false">xs:numeric</code>, and both the
<code nobreak="false">user-defined list types</code> and
<code nobreak="false">user-defined union types</code>
are special types in that these types are lists or unions
rather than types derived by extension or restriction.</p><p>The first diagram illustrates the
relationship of various <termref def="dt-item-type">item
types</termref>. Item types in the data model form a directed graph,
rather than a hierarchy or lattice: in the relationship defined by the
<code nobreak="false">derived-from(A, B)</code> function, some types are derived from
more than one other type. Examples include functions
(<code nobreak="false">function(xs:string) as xs:int</code> is substitutable for
<code nobreak="false">function(xs:NCName) as xs:int</code> and also for
<code nobreak="false">function(xs:string) as xs:decimal</code>), and union types
(<code nobreak="false">A</code> is substitutable for the union type <code nobreak="false">(A | B)</code> and also
for the union type <code nobreak="false">(A | C)</code>). In XDM, item types include node types,
function types, and built-in atomic types. The list, which shows only
hierarchic relationships, is therefore a simplification of the full
model.</p><!-- This markup is slightly idiosyncratic in order to support
     styling with CSS. --><p role="type-hierarchy-figure">
<ulist role="type-hierarchy type-colors"><item role="abstract"><p role="root"><phrase>item</phrase><phrase role="kind"> (abstract)</phrase></p><ulist><item role="built-in-atomic"><p>
          <phrase><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#th_anyAtomicType" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">anyAtomicType</loc></phrase>
          <phrase role="kind"> (built-in atomic)</phrase>
        </p></item><item role="abstract node"><p><phrase>node</phrase><phrase role="kind"> (node)</phrase></p><ulist><item role="node"><p><phrase>attribute</phrase><phrase role="kind"> (node)</phrase></p><ulist><item role="node user-defined"><p>
                   <phrase>user-defined attribute types</phrase>
                   <phrase role="kind"> (user-defined)</phrase>
                </p></item></ulist></item><item role="node"><p><phrase>document</phrase><phrase role="kind"> (node)</phrase></p><ulist><item role="node user-defined"><p>
                    <phrase>user-defined document types</phrase>
                    <phrase role="kind"> (user-defined)</phrase>
                 </p></item></ulist></item><item role="node"><p><phrase>element</phrase><phrase role="kind"> (node)</phrase></p><ulist><item role="node user-defined"><p>
                    <phrase>user-defined element types</phrase>
                    <phrase role="kind"> (user-defined)</phrase>
                 </p></item></ulist></item><item role="node"><p><phrase>text</phrase><phrase role="kind"> (node)</phrase></p></item><item role="node"><p><phrase>comment</phrase><phrase role="kind"> (node)</phrase></p></item><item role="node"><p><phrase>processing-instruction</phrase><phrase role="kind"> (node)</phrase></p></item><item role="node"><p><phrase>namespace</phrase><phrase role="kind"> (node)</phrase></p></item></ulist></item><item role="abstract function"><p><phrase>function(*)</phrase><phrase role="kind"> (function item)</phrase></p><ulist><item role="function user-defined"><p>
                <phrase>user-defined function item types</phrase>
                <phrase role="kind"> (user-defined)</phrase>
             </p></item><item role="abstract function"><p><phrase>array(*)</phrase><phrase role="kind"> (function item)</phrase></p><ulist><item role="function user-defined"><p>
                    <phrase>user-defined array types</phrase>
                    <phrase role="kind"> (user-defined)</phrase>
                 </p></item></ulist></item><item role="abstract function"><p><phrase>map(*)</phrase><phrase role="kind"> (function item)</phrase></p><ulist><item role="function user-defined"><p>
                    <phrase>user-defined map types</phrase>
                    <phrase role="kind"> (user-defined)</phrase>
                 </p></item><item role="function user-defined"><p>
                    <phrase>user-defined record types</phrase>
                    <phrase role="kind"> (user-defined)</phrase>
                 </p></item></ulist></item></ulist></item></ulist></item></ulist>
<ulist role="type-hierarchy type-colors legend"><item><p role="root"><phrase>Supertype</phrase></p><ulist><item><p><phrase>subtype</phrase></p></item></ulist></item></ulist>
<ulist role="type-legend type-colors legend"><item role="abstract"><p>
         <phrase>Abstract types</phrase>
         <phrase role="kind"> (abstract)</phrase>
      </p></item><item role="built-in-atomic"><p>
         <phrase>Built-in atomic types</phrase>
         <phrase role="kind"> (built-in atomic)</phrase>
      </p></item><item role="node"><p>
         <phrase>Node types</phrase>
         <phrase role="kind"> (node)</phrase>
      </p></item><item role="function"><p>
         <phrase>Function item types</phrase>
         <phrase role="kind"> (function item)</phrase>
      </p></item><item role="user-defined"><p>
         <phrase>User-defined types</phrase>
         <phrase role="kind"> (user-defined)</phrase>
      </p></item></ulist>
</p><!--
<p>The list shows a portion of the type hierarchy, rooted at the abstract type
item. The types <code>xs:anyAtomicType</code>, and the abstract types for nodes
and functions are derived from item. Arrays and maps are further derived from
functions. Attribute, document, element, text, comment, processing-instruction,
and namespace nodes are derived from node. User-defined attribute, document,
and element types are also be derived from attribute, document, and element,
respectively.</p>
--><p>The XPath Data Model is the abstraction over which XPath expressions are evaluated.
    Historically, all of the items in the data model could be derived directly (nodes) or
    indirectly (typed values, sequences) from an XML document. However, as the XPath
    expression language has matured, new features have been added which require additional
    types of items to appear in the data model. These items have no direct XML serialization,
    but they are never the less part of the data model.
  </p><p id="hier_anyAtomicType">The next diagram shows all of the
atomic types, including the primitive simple types and the built-in
types derived from the primitive simple types. This includes all the
built-in datatypes defined in <bibref ref="xmlschema-2"/>. Atomic types
act both as <termref def="dt-item-type">item types</termref> (meaning
they can be used to declare the types of variables and function arguments),
and as <termref def="dt-schema-type">schema types</termref> (meaning they
can be used as type annotations on nodes).</p><!-- This markup is slightly idiosyncratic in order to support
     styling with CSS. --><p role="type-hierarchy-figure">
<ulist role="type-hierarchy type-colors"><item role="primitive special root"><p role="root" id="th_anyAtomicType">
         <phrase>anyAtomicType</phrase>
      </p><ulist><item role="primitive"><p role="first">
               <phrase>anyURI</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>base64Binary</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>boolean</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>date</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>dateTime</phrase>
            </p><ulist><item role="atomic"><p role="first">
                     <phrase>dateTimeStamp</phrase>
                  </p></item></ulist></item><item role="primitive"><p role="item">
               <phrase>decimal</phrase>
            </p><ulist><item role="built-in-atomic"><p role="first">
                     <phrase>integer</phrase>
                  </p><ulist><item role="built-in-atomic"><p role="first">
                           <phrase>long</phrase>
                        </p><ulist><item role="built-in-atomic"><p role="first">
                                 <phrase>int</phrase>
                              </p><ulist><item role="built-in-atomic"><p role="first">
                                       <phrase>short</phrase>
                                    </p><ulist><item role="built-in-atomic"><p role="first">
                                             <phrase>byte</phrase>
                                          </p></item></ulist></item></ulist></item></ulist></item><item role="built-in-atomic"><p role="item">
                           <phrase>nonNegativeInteger</phrase>
                        </p><ulist><item role="built-in-atomic"><p role="first">
                                 <phrase>positiveInteger</phrase>
                              </p></item><item role="built-in-atomic"><p role="last">
                                 <phrase>unsignedLong</phrase>
                              </p><ulist><item role="built-in-atomic"><p role="first">
                                       <phrase>unsignedInt</phrase>
                                    </p><ulist><item role="built-in-atomic"><p role="first">
                                             <phrase>unsignedShort</phrase>
                                          </p><ulist><item role="built-in-atomic"><p role="first">
                                                   <phrase>unsignedByte</phrase>
                                                </p></item></ulist></item></ulist></item></ulist></item></ulist></item><item role="built-in-atomic"><p role="last">
                           <phrase>nonPositiveInteger</phrase>
                        </p><ulist><item role="built-in-atomic"><p role="first">
                                 <phrase>negativeInteger</phrase>
                              </p></item></ulist></item></ulist></item></ulist></item><item role="primitive"><p role="item">
               <phrase>double</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>duration</phrase>
            </p><ulist><item role="built-in-atomic"><p role="first">
                     <phrase>dayTimeDuration</phrase>
                  </p></item><item role="built-in-atomic"><p role="last">
                     <phrase>yearMonthDuration</phrase>
                  </p></item></ulist></item><item role="primitive"><p role="item">
               <phrase>float</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>gDay</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>gMonth</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>gMonthDay</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>gYear</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>gYearMonth</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>hexBinary</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>NOTATION</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>QName</phrase>
            </p></item><item role="primitive"><p role="item">
               <phrase>string</phrase>
            </p><ulist><item role="built-in-atomic"><p role="first">
                     <phrase>normalizedString</phrase>
                  </p><ulist><item role="built-in-atomic"><p role="first">
                           <phrase>token</phrase>
                        </p><ulist><item role="built-in-atomic"><p role="last">
                                 <phrase>NMTOKEN</phrase>
                              </p></item><item role="built-in-atomic"><p role="item">
                                 <phrase>Name</phrase>
                              </p><ulist><item role="built-in-atomic"><p role="first">
                                       <phrase>NCName</phrase>
                                    </p><ulist><item role="built-in-atomic"><p role="first">
                                             <phrase>ENTITY</phrase>
                                          </p></item><item role="built-in-atomic"><p role="item">
                                             <phrase>ID</phrase>
                                          </p></item><item role="built-in-atomic"><p role="last">
                                             <phrase>IDREF</phrase>
                                          </p></item></ulist></item></ulist></item><item role="built-in-atomic"><p role="first">
                                 <phrase>language</phrase>
                              </p></item></ulist></item></ulist></item></ulist></item><item role="primitive"><p role="item">
               <phrase>time</phrase>
            </p></item><item role="primitive"><p role="last">
               <phrase>untypedAtomic</phrase>
            </p></item></ulist></item></ulist>

<ulist role="type-hierarchy type-colors"><item><p role="root"><phrase>Supertype</phrase></p><ulist><item><p><phrase>subtype</phrase></p></item></ulist></item></ulist>
<ulist role="type-legend type-colors"><item role="built-in-atomic"><p><phrase>Built-in atomic types</phrase></p></item></ulist>
</p><!--
<p>The list shows a portion of the type hierarchy, rooted at
<code>xs:anyAtomicType</code>. The types
<code>xs:untypedAtomic</code>, <code>xs:string</code>,
<code>xs:duration</code>, <code>xs:date</code>, <code>xs:time</code>,
<code>xs:dateTime</code>, <code>xs:double</code>,
<code>xs:float</code>, <code>xs:decimal</code>,
<code>xs:base64Binary</code>, <code>xs:hexBinary</code>,
<code>xs:boolean</code>, <code>xs:anyURI</code>,
<code>xs:QName</code>, <code>xs:Notation</code>,
<code>xs:gYear</code>, <code>xs:gMonth</code>, <code>xs:gDay</code>,
<code>xs:gYearMonth</code>, and <code>xs:gMonthDay</code> are derived from
<code>xs:anyAtomicType</code>.</p>
<p>Starting at <code>xs:string</code>, <code>xs:normalizedString</code> is derived and <code>xs:token</code> is derived from that. The types
<code>xs:language</code>, <code>xs:NMTOKEN</code>, and <code>xs:Name</code> are
derived from <code>xs:token</code>. The type <code>xs:NCName</code> is further
derived from <code>xs:Name</code>, and the types <code>xs:ID</code>, <code>xs:IDREF</code>,
and <code>xs:ENTITY</code> are derived from <code>xs:NCName</code>.</p>
<p>The types <code>xs:yearMonthDuration</code> and <code>xs:dayTimeDuration</code>
are derived from <code>xs:duration</code>.</p>
<p>The type <code>xs:integer</code> is derived from <code>xs:decimal</code>.
The types <code>xs:nonPositiveInteger</code> (and from that <code>xs:negativeInteger</code>),
<code>xs:long</code>, and <code>xs:nonNegativeInteger</code> are derived from
<code>xs:integer</code>. An <code>xs:long</code> is the head of a chain of derivations
from <code>xs:int</code> to <code>xs:short</code> to <code>xs:byte</code>.
Finally, a <code>positiveInteger</code> and the chain of derivations from
<code>xs:unsignedLong</code> to <code>xs:unsignedInt</code>
to <code>xs:unsighedShort</code> to <code>xs:unsignedByte</code> are derived
from <code>xs:nonNegativeInteger</code>.
</p>
--><div3 id="AtomicValue"><head>Atomic Items</head><changes><change issue="1337" PR="1361" date="2024-08-02">
      The term <term>atomic value</term> has been replaced by <termref def="dt-atomic-item"/>.
    </change></changes><p>An <termref def="dt-atomic-item"/> can be constructed from a lexical
representation. Given a string and an <termref def="dt-atomic-type"/>, the atomic item is
constructed in such a way as to be
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#typed-string-relationships" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">consistent with schema validation</loc>.
If the
string does not represent a valid value of the type, an error is
raised. When <code nobreak="false">xs:untypedAtomic</code> is specified as the type,
no validation takes place. The details of the construction are
described in <xspecref spec="FO40" ref="constructor-functions"/>
and the related <xspecref spec="FO40" ref="casting"/>
section of <bibref ref="xpath-functions-40"/>.
</p></div3><div3 id="StringValue"><head>String Values</head><p>A string value can be constructed from an <termref def="dt-atomic-item"/>.
Such a value is constructed by
converting the atomic item to its string representation as described
in <xspecref spec="FO40" ref="casting"/>.
</p></div3><div3 id="NegativeZero"><head>Negative Zero</head><p>The <code nobreak="false">xs:float</code> and <code nobreak="false">xs:double</code> data types
in the data model have the same value space as in
XML Schema 1.1 (<bibref ref="xmlschema11-2"/>).
Specifically they include both negative and positive zero, and in this
respect they differ from XML Schema 1.0.</p><p>To accommodate this difference,
when converting from an
<code nobreak="false">xs:string</code> to an <code nobreak="false">xs:float</code> or
<code nobreak="false">xs:double</code>, it is implementation-defined whether the
lexical value “-0” (and similar forms such as “-0.0”) convert to
negative zero or to positive zero in the value space.</p><!-- I think it's *really* weird that imp-def-feature and imp-dep-feature
     produce no output in the normal flow, but I'm not going to try to
     change that today. --><imp-def-feature>When converting from an
<code nobreak="false">xs:string</code> to an <code nobreak="false">xs:float</code> or
<code nobreak="false">xs:double</code>, it is implementation-defined whether the
lexical value “-0” (and similar forms such as “-0.0”) convert to
negative zero or to positive zero in the value space.</imp-def-feature></div3><div3 id="function-items"><head>Function Items</head><changes><change issue="520" PR="525" date="2023-05-30">
      Introduced the concept of function identity.
    </change></changes><p>
<termdef term="function item" id="dt-function-item">
  A <term>function item</term> is an item that can be <term>called</term>.
</termdef>
Function items <phrase diff="del" at="2023-05-25">cannot be compared for
identity, equality, or otherwise, and</phrase> have no serialization.
</p><note diff="add" at="2023-03-11"><p>XDM 4.0 uses the term <term>function item</term> where XDM 3.1 used
    <term>function</term>. There is no distinction
    in meaning, but <term>function item</term> is preferred for clarity, because the unqualified
    term <term>function</term> has additional meanings in relation to
    <term>function definitions</term> in XSLT and XQuery.</p></note><p>A function item has the following properties:
</p><ulist><item><p>
      <term>name</term>
      <phrase>(<code nobreak="false">xs:QName</code>)</phrase>:
      An expanded QName, possibly
      <termref def="dt-absent">absent</termref>. 
    </p></item><item><p diff="add" at="2023-05-25">
      <term>identity</term>: An abstract property that can be used to test whether
      two variables refer to the same function or to different functions. This property
      is exposed only for this purpose.
    </p><note><p>Currently, the concept of function identity is used for two purposes: firstly,
    when functions appear in the arguments supplied to the <code nobreak="false">fn:deep-equal</code> function;
    and secondly, in establishing whether the arguments and results of a function are "the same"
    when deciding whether the function is deterministic.</p></note><note><p>Function identity is not currently defined for maps and arrays, because in the circumstances
    where function identity would otherwise be used, maps and arrays are compared by examining their 
    content.</p></note></item><item><p>
      <term>parameter names</term>
      <phrase>(<code nobreak="false">xs:QName*</code>)</phrase>:
      A list of distinct names, one for each of the function’s parameters.
    </p><note><p>This property is currently unused. There is no way of discovering the
    parameter names of a function item, and there is no functionality
    that depends on the parameter names.</p></note></item><item><p>
      <term>signature</term>
      <phrase><termdef term="function signature" id="dt-signature">
        A <term>function signature</term>
        represents the type of a
        <termref def="dt-function-item">function</termref>.</termdef></phrase>
      The signature of a function item comprises:
    </p><ulist><item><p>The required types of its parameters (each one being a <xnt xmlns:xlink="http://www.w3.org/1999/xlink" spec="XP40" ref="doc-xpath40-SequenceType" xlink:type="simple">SequenceType</xnt>)</p></item><item><p>The required types of the function result (also a <xnt xmlns:xlink="http://www.w3.org/1999/xlink" spec="XP40" ref="doc-xpath40-SequenceType" xlink:type="simple">SequenceType</xnt>)</p></item><item><p>A sequence of zero or more <term>function annotations</term>. Each annotation consists
      of an annotation name (an instance of <code nobreak="false">xs:QName</code>) and an annotation value
      (an arbitrary sequence of atomic items). Annotations are ordered and it is permitted for two
      annotations to share the same name.</p></item></ulist><!--<phrase>
        (a <code>FunctionTest</code> of the form
        <code>Annotation* TypedFunctionTest</code>)</phrase>:

      The <xnt spec="XP40" ref="doc-xpath40-TypedFunctionTest">TypedFunctionTest</xnt>
        has one <xnt spec="XP40" ref="doc-xpath40-SequenceType">SequenceType</xnt>
        for each parameter, and one SequenceType for the function’s result.
      
      The presence of annotations is language dependent;
functions defined in languages, such as XPath, that have no mechanism for defining annotations
will create functions in the data model with zero annotations.
    </p>--></item><item><p>
      <term>body</term>
      The body of a function provides the logic
      to map the arguments supplied in a function call into an instance of 
      the function’s result type.</p><p diff="chg" at="2023-03-11"> 
      The function body is generally one of the following:</p><ulist><item><p>a user-written construct in XPath, XQuery, XSLT, or some
            other host language known to the processor.
          </p></item><item><p>vendor-supplied logic internal to the processor.</p></item><item><p>external logic written in some third-party programming
            language, to be invoked by the processor using implementation-dependent
            mechanisms.</p></item></ulist><p>These categories are not mutually exclusive; they may be used in combination.</p><note><p>The term “function body” replaces “function implementation”, to avoid confusion with
    the use of the term “implementation” in phrases such as “implementation-defined”.</p></note></item><item><p>
      <term>captured context</term> This includes a static and dynamic context for evaluation
      of the function body, as described in <xspecref spec="XP40" ref="context"/>. In particular
      it includes a set of <term>nonlocal variable bindings</term>
      (a mapping from <code nobreak="false">xs:QName</code> to <code nobreak="false">item()*</code>),
      which provides a value for each of the function’s free variables
      (i.e., variables referenced by the function’s body, other than locals and parameters).
    </p><note diff="chg" at="2023-03-11"><p>Where the function body is implemented in XPath, XQuery, or XSLT, the captured
      context includes the static context for the user-written code (for example, its in-scope namespaces)
      as well as any nonlocal variable bindings.</p><p>Functions implemented internally by the processor may capture specific parts of the static or dynamic context,
      for example <code nobreak="false">fn:position#0</code> captures the value of the context position.</p></note></item></ulist><p>
<termdef term="function arity" id="dt-function-arity">
  The <term>arity</term> of a <termref def="dt-function-item"/> is the number of its parameters.
</termdef>
The number of names in a function’s parameter names,
and the number of parameter types in its signature,
must equal the function’s arity.
</p><p diff="chg" at="2022-12-17">All function items match the generic function type <code nobreak="false">function(*)</code>,
    which is itself a subtype of <code nobreak="false">item()</code>. 
    A <termref def="dt-signature">function signature</termref> defines a more specific function type, which is always
    a subtype of <code nobreak="false">function(*)</code>. A function signature 
    <code nobreak="false">function(<var>T/1</var>, <var>T/2</var>, <var>T/3</var>, ...) as <var>T/R</var></code> is a subtype of another
    function signature <code nobreak="false">function(<var>U/1</var>, <var>U/2</var>, <var>U/3</var>, ...) as <var>U/R</var></code>
    if (a) the two signatures have the same <termref def="dt-function-arity">arity</termref>, (b) the return type <var>T/R</var>
    is a subtype of <var>U/R</var>, and (c) for each pair of parameter types, <var>T/n</var> is a supertype of <var>U/n</var>.
    The rules are explained more fully in <xspecref spec="XP40" ref="id-sequencetype-subtype"/>. For example:
</p><ulist><item><p><code nobreak="false">function(item()) as item()</code> is a subtype of <code nobreak="false">function(*)</code>
  </p></item><item><p><code nobreak="false">function(item()) as xs:integer</code> is a subtype of <code nobreak="false">function(item()) as item()</code>
  </p></item><item><p>
    <code nobreak="false">function(item()) as item()</code> is a subtype of <code nobreak="false">function(xs:string) as item()</code>
  </p></item></ulist></div3><div3 id="map-items"><head>Map Items</head><changes><change issue="1335" date="2024-07-20">Constructors are added, and the single accessor function
    is now an iterator over the key/value pairs in the map.</change><change issue="1651" PR="1703" date="2025-01-14">Ordered maps are introduced.</change></changes><p><termdef term="map item" id="dt-map-item">A <term>map item</term>
(also called simply a <term>map</term>)
is an item that represents an ordered sequence of key/value pairs,
in which the keys are unique.</termdef> 
  In other languages this is sometimes 
called a hash, dictionary, or associative array.
  The keys are atomic items, and each key in the map is unique (there is no other key
to which it is equal). Each key is associated with a value that may be any sequence 
of zero or more items. There is no uniqueness constraint on
values, only on keys. The semantics of equality when comparing keys are described in
<xspecref spec="FO40" ref="func-atomic-equal"/>.</p><p><termdef id="dt-entry" term="entry">The key/value pairs in a map are
    referred to as <term>entries</term>.</termdef></p><p><termdef id="dt-single-entry-map" term="single-entry map">A map containing exactly
    one entry is referred to as a <term>single-entry map</term>.</termdef></p><p><termdef id="dt-empty-map" term="empty map">A map containing no entries 
    is referred to as an <term>empty map</term>.</termdef></p><note><p>Maps have no intrinsic identity separate from their content. A map can be given
  a transient identity, represented by an <code nobreak="false">id</code> property in its label, by applying the
  <code nobreak="false">fn:pin</code> function. This property is expected to be used in defining
  operations for deep update of maps.
</p></note><p><termdef id="dt-entry-order" term="entry order">The order of entries in a map
            is referred to as <term>entry order</term>.</termdef>
  The entry order affects the result of functions such as <function>map:keys</function>
  and <function>map:for-each</function>, and also determines the order of entries
  when a map is serialized using the JSON output method.</p><p>Constructor and accessor functions for maps are defined in the following sections.</p><div4 id="dm-empty-map"><head><code nobreak="false">empty-map</code> Constructor</head><example role="signature"><proto class="dm" name="empty-map" return-type="map(*)" returnSeq="no" returnEmptyOk="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"/></example><p>The <code nobreak="false">dm:empty-map</code> constructor returns an <termref def="dt-empty-map"/>,
      that is, a map containing no key/value pairs.</p><note><p>In XPath an <termref def="dt-empty-map"/> may be constructed using the expression <code nobreak="false">{}</code>
    or <code nobreak="false">map {}</code>.</p></note></div4><div4 id="dm-map-put"><head><code nobreak="false">map-put</code> Constructor</head><example role="signature"><proto class="dm" name="map-put" return-type="map(*)" returnSeq="no" returnEmptyOk="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="map" type="map(*)"/><arg name="key" type="xs:anyAtomicType"/><arg name="value" type="item()*"/></proto></example><p>The <code nobreak="false">dm:map-put</code> constructor returns a map based on the contents of a supplied map.</p><p>The key/value pairs in the returned map are as follows:</p><ulist><item><p>One key/value pair for every key/value pair present in <code nobreak="false">$map</code> whose key is
      not equal to <code nobreak="false">$key</code>; plus</p></item><item><p>One key/value pair whose key is <code nobreak="false">$key</code> and whose associated value is <code nobreak="false">$value</code>.</p></item></ulist><p>The <termref def="dt-entry-order"/> in the returned
      map reflects the <termref def="dt-entry-order"/> in the supplied <code nobreak="false">$map</code>. If the key of
      the new entry was present in <code nobreak="false">$map</code> then the new entry replaces that entry retaining
      its current position; otherwise, the new entry is added after all existing entries.</p><p>The function is exposed in XPath through the function <function>map:put</function>.</p></div4><div4 id="dm-iterate-map"><head><code nobreak="false">iterate-map</code> Accessor</head><example role="signature"><proto class="dm" name="iterate-map" return-type="item()*" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="map" type="map(*)"/><arg name="action" type="function(xs:anyAtomicType, item()*) as item()*"/></proto></example><p>The <code nobreak="false">dm:iterate-map</code> accessor calls the supplied <code nobreak="false">$action</code>
      function once for each key/value pair in <code nobreak="false">$map</code>,
      and returns the sequence concenation of the results. The order in which entries
    are processed is the <termref def="dt-entry-order"/> of the map.</p><p>The function is exposed in XPath most directly through the function <function>map:for-each</function>, but
      it also underpins all other functions giving access to maps, such as <function>map:size</function>,
      <function>map:contains</function>, and <function>map:get</function>.</p></div4></div3><div3 id="array-items"><head>Array Items</head><changes><change issue="1335" date="2024-07-20">Constructors are added, and the single accessor function
    is now an iterator over the members of the array.</change></changes><p><termdef term="array item" id="dt-array-item">An <term>array item</term> 
  (also called simply an <term>array</term>)
is a value that represents an array.</termdef>
<termdef id="dt-member" term="member">An array is an ordered list of values; these values are called the
<term>members</term> of the array.</termdef> Unlike sequences, a member of an array can be
any value (including a sequence or an array). The number of members in
an array is called its size, and they are referenced by their
position, in the range 1 to the size of the array.</p><p><termdef id="dt-single-member-array" term="single-member array">An array containing exactly
    one member is referred to as a <term>single-member array</term>.</termdef></p><p><termdef id="dt-empty-array" term="empty array">An array containing no members 
    is referred to as an <term>empty array</term>.</termdef></p><note><p>Arrays have no intrinsic identity separate from their content. An array can be given
    a transient identity, represented by an <code nobreak="false">id</code> property in its label, by applying the
    <code nobreak="false">fn:pin</code> function. This property is expected to be used in defining
    operations for deep update of arrays.
  </p></note><p>Constructor and accessor functions for arrays are defined in the following sections.</p><div4 id="dm-empty-array"><head><code nobreak="false">empty-array</code> Constructor</head><example role="signature"><proto class="dm" name="empty-array" return-type="array(*)" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"/></example><p>The <code nobreak="false">dm:empty-array</code> constructor returns an <termref def="dt-empty-array"/>,
      that is, an array item containing no members.</p><p>The function is exposed in XPath as an empty array constructor, written <code nobreak="false">[]</code>
    or <code nobreak="false">array {}</code>.</p></div4><div4 id="dm-array-append"><head><code nobreak="false">array-append</code> Constructor</head><example role="signature"><proto class="dm" name="array-append" return-type="array(*)" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="array" type="array(*)"/><arg name="member" type="item()*"/></proto></example><p>The <code nobreak="false">dm:array-append</code> constructor returns an array based on the contents of a supplied array.</p><p>The returned array contains:</p><ulist><item><p>One member for every member present in <code nobreak="false">$array</code>, at the same position; plus</p></item><item><p>One additional member, <code nobreak="false">$member</code>, as the last member in the returned array.</p></item></ulist><p>The function is exposed in XPath through the function <code nobreak="false">array:append</code>.</p></div4><div4 id="dm-iterate-array"><head><code nobreak="false">iterate-array</code> Accessor</head><example role="signature"><proto class="dm" name="iterate-array" return-type="item()*" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="array" type="array(*)"/><arg name="action" type="function(item()*, xs:integer) as item()*"/></proto></example><p>The <code nobreak="false">dm:iterate-array</code> accessor calls the supplied <code nobreak="false">$action</code>
      function once for each member in <code nobreak="false">$array</code>, in order,
      and returns the sequence concenation of the results. The <code nobreak="false">$action</code> function
      is called with two arguments. The first argument is the array member (an arbitrary sequence),
      and the second is its 1-based ordinal position within the array.</p><p>The function is exposed in XPath most directly through the function <code nobreak="false">array:for-each</code> (but
        note that <code nobreak="false">array:for-each</code> delivers an array rather than a sequence). 
        It also underpins all other functions giving access to arrays, such as <code nobreak="false">array:size</code>
       and <code nobreak="false">array:get</code>.</p></div4></div3></div2><div2 id="id-LabeledItems"><head>Labeled Items</head><changes><change issue="960" PR="988" date="2024-02-27">
        Introduced the concept of labeled items.
      </change></changes><p><termdef id="dt-labeled-item" term="labeled item">A <term>labeled item</term>
    is a pair (<var>S</var>, <var>L</var>) where <var>S</var> (called the subject)
    is any item, and <var>L</var> (called the label) is a map containing supplementary
    information about the item.</termdef>.</p><p>The keys in the map are always instances of <code nobreak="false">xs:string</code>, and the associated values
    can be arbitrary values.</p><p>There are currently no constructs in the language that would cause either 
      the subject or the label of a labeled item to
      itself be a labeled item. Nor is there anything that would cause the 
      label to contain a labeled item.</p><p>Operations on labeled items fall into three categories:</p><ulist><item><p>Operations that select items which are present in their input return the
      labeled item unchanged (including its label). 
      Examples are filter expressions, axis expressions, lookup
      expressions, and functions such as <function>fn:head</function>, <code nobreak="false">fn:tail</code>,
      and <code nobreak="false">fn:subsequence</code>.</p></item><item><p>Operations that construct new values from their input treat the labeled
      item exactly as if the operation were applied directly to the subject. That is,
      the label is ignored. Examples are arithmetic and comparison operators, operators
      such as <code nobreak="false">is</code> and <code nobreak="false">instance of</code>, cast expressions, atomization,
      and functions such as 
      <code nobreak="false">fn:avg</code> or <code nobreak="false">fn:index-of</code>.</p></item><item><p>The <code nobreak="false">fn:label</code> function is a special case: it returns the
      label of a labeled item, as a map. If applied to an item that is not labeled, it 
      returns an empty map.</p></item></ulist><note><p>Two items representing the same node (such that <code nobreak="false">$n1 is $n2</code> returns
    true) may nevertheless have different labels. It is perhaps helpful to think of such items
    not as nodes, but as references to nodes, which are automatically dereferenced by the majority
    of operations.</p></note><note><p>A labeled item matches a type if its subject matches the type; labels are thus extraneous
    to the type system.</p></note><p>Labeled items are returned by certain operations, such as the lookup operators <code nobreak="false">?</code> 
      and <code nobreak="false">??</code>. As a result, the lookup operation can be treated at one level as if it
    returned a simple value (an entry found in a map or array), but applications that need extra
    information about the value can find this by examining the label: for example, they can identify
    the associated key value.</p><p>The function <code nobreak="false">fn:pin</code> takes a map or array <var>J</var> as its argument, and returns
    a labeled map or array with <var>J</var> as its subject (or the subject of <var>J</var>, if <var>J</var>
    is itself a labeled item), and with a map <var>M</var> as its label, where <var>M</var> contains
    a single entry having the key <code nobreak="false">"pinned"</code> (as an <code nobreak="false">xs:string</code>) and an associated
    <code nobreak="false">xs:boolean</code> value <code nobreak="false">true</code>. An item <code nobreak="false">$item</code> 
      satisfying <code nobreak="false">$item[label(.)?pinned]</code> is referred to as a <term>pinned</term> item.</p></div2></div1><div1 id="construction"><head>Data Model Construction</head><p>This section describes the constraints on instances of the data model.</p><p>The data model supports well-formed XML documents conforming to
<bibref ref="xml-names"/> or <bibref ref="xml-names11"/>.
Documents that are not well-formed are,
by definition, not XML. XML documents that do not conform to
<bibref ref="xml-names"/> or <bibref ref="xml-names11"/>
are not supported (nor are they supported by
<bibref ref="xml-infoset"/>).</p><p>In other words, the data model supports the following classes
of XML documents:</p><ulist><item><p>Well-formed documents conforming to <bibref ref="xml-names"/> or
<bibref ref="xml-names11"/>.</p></item><item><p>DTD-valid documents conforming to <bibref ref="xml-names"/> or
<bibref ref="xml-names11"/>, and</p></item><item><p>W3C XML Schema-validated documents.</p></item></ulist><p>This document describes how to construct an instance of the data
model from an infoset (<bibref ref="xml-infoset"/>) or a Post Schema Validation
Infoset (PSVI), the augmented infoset produced by an XML Schema
validation episode.</p><p>An instance of the data model can also be constructed directly
through application APIs, or from non-XML sources such as relational
tables in a database.
Data model construction from sources other than
an Infoset or PSVI is implementation-defined.
Regardless of how an instance of the data model
is constructed, every node and <termref def="dt-atomic-item"/> in the data model must
have a typed value that is consistent with its type.</p><imp-def-feature>Data model construction from sources other than
an Infoset or PSVI is implementation-defined.</imp-def-feature><p>The data model supports some kinds of values that are not supported
by <bibref ref="xml-infoset"/>. Examples of these are
<termref def="dt-fragment">document fragments</termref>
and sequences of document nodes.
The data model also supports values that are not nodes. Examples of
these are sequences of <termref def="dt-atomic-item">atomic items</termref>,
or sequences mixing nodes and atomic
items. These are necessary to be able to represent the results of
intermediate expressions in the data model during expression
processing.
</p><div2 id="const-other"><head>Direct Construction</head><p>Although this document describes construction of an instance of the
data model in terms of infoset properties, an infoset is not a
necessary precondition for building an instance of the data model.</p><p>There are no constraints on how an instance of the data model may be
constructed directly, save that the resulting instance
<rfc2119>must</rfc2119> satisfy all of the constraints described in
this document.</p></div2><div2 id="const-infoset"><head>Construction from an Infoset</head><p>An instance of the data model can be constructed from an infoset
that satisfies the
following general constraints:</p><ulist><item><p>All general and external parsed entities must be fully expanded. The
Infoset must not contain any <emph role="info-item">unexpanded entity
reference information items</emph>.</p></item><item><p>The infoset <rfc2119>must</rfc2119> provide all of the properties identified as
<quote>required</quote> in this document.
The properties identified as <quote>optional</quote>
may be used, if they are present. All other properties are ignored.</p></item></ulist><p>An instance of the data model constructed from an information set
<rfc2119>must</rfc2119> be consistent with the description provided
for each node kind.</p><p>Furthermore, construction of an instance
of the data model from an Infoset is guaranteed to be
well-defined only for those Infosets that could have been derived from a
conforming XML document.</p></div2><div2 id="const-psvi"><head>Construction from a PSVI</head><p>An instance of the data model can be constructed from a PSVI, whose
element and attribute information items have been strictly assessed,
laxly assessed, or have not been assessed. Constructing an instance of
the data model from a PSVI <rfc2119>must</rfc2119> be consistent with
the description provided in this section and with the description
provided for each node kind.</p><p>Data model construction requires that the PSVI provide unique names
for all anonymous schema types.</p><note><p><bibref ref="xmlschema-1"/> does not require all schema processors to
provide unique names for anonymous schema types. In order to build an
instance of the data model
from a PSVI produced by a processor that does not provide the names,
some post-processing will be required in order to ensure that they are
all uniquely identified before construction begins.</p></note><p><termdef id="dt-incompletely-validated" term="incompletely validated">An
<term>incompletely validated</term> document is an XML document that has a
corresponding schema but whose schema-validity assessment has resulted
in one or more element or attribute information items being assigned
values other than ‘valid’ for the <emph role="infoset-property">validity</emph>
property in the PSVI.</termdef></p><p>The data model supports incompletely validated documents. Elements
and attributes that are not valid are treated as having unknown types.</p><p>The most significant difference between Infoset construction and PSVI
construction occurs in the area of schema type assignment. Other differences
can also arise from schema processing: default attribute and element values
may be provided, white space normalization of element content may occur, and the
user-supplied lexical form of elements and attributes with atomic schema types
may be lost.</p><div3 id="PSVI2Types"><head>Mapping PSVI Additions to Node Properties</head><p>A PSVI element or attribute information item may have a
<emph role="infoset-property">validity</emph> property.
The <emph role="infoset-property">validity</emph> property may be
<quote><emph>valid</emph></quote>, <quote><emph>invalid</emph></quote>,
or <quote><emph>notKnown</emph></quote>
and reflects the outcome of schema-validity assessment. In the data
model, precise schema type information is exposed for element and
attribute nodes that are <quote><emph>valid</emph></quote>. Nodes
that are not <quote><emph>valid</emph></quote> are treated as if they
were simply well-formed XML and only very general schema type
information is associated with them.
</p><div4 id="PSVI2NodeTypes"><head>Element and Attribute Node Types</head><p>The precise definition of the schema type of an element or attribute
information item depends on the properties of the PSVI.
In the PSVI, <bibref ref="xmlschema-1"/>
defines a
<emph role="infoset-property">type definition</emph> property
as well as the
<emph role="infoset-property">type definition namespace</emph>,
<emph role="infoset-property">type definition name</emph> and
<emph role="infoset-property">type definition anonymous</emph>
properties, which are effectively short-cut terms for properties of
the type definition.
Further, the <emph role="infoset-property">element declaration</emph> and
<emph role="infoset-property">attribute declaration</emph>
properties are defined for elements and attributes, respectively.
These declarations in turn will identify the
<emph role="infoset-property">type definition</emph>
declared for the element or attribute. To distinguish the
<emph role="infoset-property">type definition</emph>
given in the PSVI for the element or attribute instance
from the <emph role="infoset-property">type definition</emph> associated
with the declaration, the former is referred to below as the actual
type and the latter as the declared type of the element or attribute
instance in question.
</p><p>The type depends on the declared type, the actual type, and the
<emph role="infoset-property">validity</emph> and
<emph role="infoset-property">validation attempted</emph> properties in
the PSVI. If:</p><ulist><item><p>The <emph role="infoset-property">validity</emph> and
<emph role="infoset-property">validation attempted</emph> properties exist
and have the values <quote><emph>valid</emph></quote> and
<quote><emph>full</emph></quote>, respectively, the
schema type of an element or attribute information item is
represented by an <termref def="dt-expanded-qname">expanded QName</termref>
whose namespace and local name correspond
to the first applicable items in the following list:
</p><ulist><item><p>If the declared type exists and is a union and the actual type is (not the
same as the declared type, and not a type derived from the declared
type, but) one of the member types of the union, or derived from one
of its member types:
</p><ulist><item><p>If the {name} property of the declared type is present: the
  {target namespace} and {name} properties of the declared type.
  </p></item><item><p>If the {name} property of the declared type is absent: the
  namespace and local name of the anonymous type name supplied for the
  declared type.
  </p></item></ulist></item><item><p>If there is no declared type, and the actual type is a union, then:</p><ulist><item><p>If the {name} property of the actual type is present: the {target
  namespace} and {name} properties of the actual type.
  </p></item><item><p>If the {name} property of the actual type is absent: the
  namespace and local name of the anonymous type name supplied for the
  actual type.</p></item></ulist></item><item><p>Otherwise:</p><ulist><item><p>If <emph role="infoset-property">type definition anonymous</emph>
  is false: the {target namespace} and {name} properties of the actual type.
  </p></item><item><p>If <emph role="infoset-property">type definition anonymous</emph> is true:
  the namespace and local name of the anonymous type name supplied for
  the actual type.</p></item></ulist></item></ulist></item><item><p>The <emph role="infoset-property">validity</emph> property exists
and is <quote><emph>invalid</emph></quote>, or the
<emph role="infoset-property">validation attempted</emph> property exists
and is <quote><emph>partial</emph></quote>, the schema type of an element
is <code nobreak="false">xs:anyType</code> and the type of an attribute is
<code nobreak="false">xs:anySimpleType</code>.</p></item><item><p>The <emph role="infoset-property">validity</emph> property exists and is
<quote><emph>notKnown</emph></quote>, the schema type of an element is
<code nobreak="false">xs:anyType</code> and the type of an attribute is
<code nobreak="false">xs:anySimpleType</code>.
</p></item><item><p>The <emph role="infoset-property">validity</emph> or
<emph role="infoset-property">validation attempted</emph> properties do not
exist, the schema type of an element is
<code nobreak="false">xs:untyped</code> and the type of an attribute is
<code nobreak="false">xs:untypedAtomic</code>.
</p></item></ulist><p>The prefix associated with the type names is implementation-dependent.</p><imp-dep-feature>The prefix associated with type names is
implementation-dependent.
</imp-dep-feature></div4><div4 id="TypedValueDetermination"><head>Typed Value Determination</head><p>This section describes how the typed value of an element or
attribute node is computed from an element or attribute PSVI
information item, where the information item has either a simple type
or a complex type with simple content. For other kinds of
element nodes, see <specref ref="const-psvi-element"/>; for other kinds of
attribute nodes, see <specref ref="const-psvi-attribute"/>.</p><p>The typed value of attribute nodes and some element nodes is a
sequence of <termref def="dt-atomic-item">atomic items</termref>. The
types of the items in the typed value of a node may differ from
the type of the node itself. This section describes how the typed
value of a node is derived from the properties of an information item
in a PSVI.</p><p>The types of the items in the typed value of a node are determined as follows.
The process begins with a type, <code nobreak="false">T</code>. If the schema type of the node itself, as
represented in the PSVI, is a complex type with simple content, then <code nobreak="false">T</code> is the
{content type} of the schema type of the node; otherwise, <code nobreak="false">T</code> is the schema type
of the node itself. For each primitive or ordinary simple type <code nobreak="false">T</code>, the W3C XML
Schema specification defines a function <code nobreak="false">M</code> mapping the lexical representation of
a value onto the value itself.</p><note><p>For atomic and list types, the mapping is the “lexical mapping”
defined for <code nobreak="false">T</code> in
<bibref ref="xmlschema-2"/>; for union types, the mapping is the
lexical mapping defined in
<bibref ref="xmlschema-2"/> modified
as appropriate by any applicable rules in
<bibref ref="xmlschema-1"/>. The mapping, so modified, is a function
(in the mathematical sense) which maps to a single value even
in cases where the lexical mapping proper maps to multiple values.
</p></note><p>The typed value is determined as follows:</p><ulist><item><p>If the <emph role="dm-node-property">nilled</emph> property of the node in question is
<code nobreak="false">true</code>, then the typed value is the empty sequence.
</p></item><item><p>If <code nobreak="false">T</code> is <code nobreak="false">xs:anySimpleType</code> or
<code nobreak="false">xs:anyAtomicType</code>, the typed value
is the <emph role="infoset-property">schema normalized value</emph> as
an instance of <code nobreak="false">xs:untypedAtomic</code>.
</p></item><item><p>Otherwise, the typed value is the result of applying <code nobreak="false">M</code>
to the string value as an instance of the appropriate value type,
where the appropriate value type is the <emph role="infoset-property">member
type definition</emph> if <code nobreak="false">T</code> is a union type, otherwise it
is simply <code nobreak="false">T</code>.
</p></item></ulist><p>The typed value determination process is guaranteed to result in a
sequence of <termref def="dt-atomic-item">atomic items</termref>, 
  each having a well-defined atomic type. This
sequence of atomic items, in turn, determines the
typed-value property of the node in the data model.</p></div4><div4 id="typed-string-relationships"><head>Relationship Between Typed-Value and String-Value</head><p>Element and attribute nodes have both typed-value and string-value
properties (the terms <term>typed value</term> and <term>string value</term> are 
defined at <xspecref spec="XP40" ref="id-typed-value"/> of <bibref ref="xpath-40"/>). 
However, implementations are allowed some flexibility in
how these properties are stored. An implementation may choose to store
the string-value property only and derive the typed-value property from it, or to store
the typed-value property only and derive the string-value property from it, or to store
both the string-value property and the typed-value property.</p><p>To permit these various implementation strategies, some
variations in the string value of a node are defined as insignificant.
Implementations that store only the typed value of a node are permitted to
return a string value that is different from the original lexical form of
the node content. For example, consider the following element:</p><eg xml:space="preserve">&lt;offset xsi:type="xs:integer"&gt;0030&lt;/offset&gt;</eg><p>Assuming that the node is valid, it has a typed value of 30 as an
<code nobreak="false">xs:integer</code>. An implementation may return either “<code nobreak="false">30</code>” or
“<code nobreak="false">0030</code>” as the string value of the node. Any string that is a valid
lexical representation of the typed value is acceptable. In this
specification, we express this rule by saying that the relationship
between the string value of a node and its typed value must be
“consistent with schema validation.”</p><p>If an implementation stores only the string value of a node, the
following considerations apply:</p><ulist><item><p>Where union types occur, the implementation must be able to deliver
the typed value as an instance of the appropriate member type. For
example, if the type of 
an element node is <code nobreak="false">my:integer-or-string</code>, which is
defined as a union of <code nobreak="false">xs:integer</code> and <code nobreak="false">xs:string</code>, and the string value
of the node is “47”, the implementation must be able to deliver the
typed value of the node as either the integer <code nobreak="false">47</code> or the string <code nobreak="false">"47"</code>,
depending on which member type validated the element.</p></item><item><p>Where types of <code nobreak="false">xs:QName</code>, <code nobreak="false">xs:NOTATION</code>, or
types derived from one of these types occur, the implementation must
be able to deliver the typed value as a triple consisting of a local name,
a namespace prefix, and a namespace URI, even though the namespace URI
is not part of the string-value (see
<specref ref="qnames-and-notations"/>).</p></item><item><p>Where an element with a complex type and element-only content
occurs, it is an error to attempt to access the typed-value of the
element node.</p></item></ulist><p>If an implementation stores only the typed value of a node, it must
be prepared to construct string values from not only the node, but in
some cases also the descendants of that node. For example, an element
with a complex type and element-only content has no typed value but
does have a string value that is the concatenation of the
string values of all its text node descendants in document order.</p><p>A further caveat applies if an implementation stores the typed
value of a node. If a new data model is constructed by copying
portions of another data model, and the copy operation does not
preserve inherited namespaces, and the type is a union type that is
sensitive to the namespace context, then the typed value may be
different than what would be obtained by revalidating the node within
its new namespace context. Although this may stretch the semantics of
“consistent with schema validation”, we accept this possibility; it
is not an error.</p></div4><div4 id="pattern-facets"><head>Pattern Facets</head><p>Creating a subtype by restriction generally reduces the
<emph>value</emph> space of the original schema type. For example,
expressing a hat size as a restriction of decimal with a minimum value
of 6.5 and maximum value of 8.0 creates a schema type whose valid values are
only those in the range 6.5 to 8.0.</p><p>The pattern facet is different because it restricts the
<emph>lexical</emph> space of the schema type, not its value space.
Expressing a three-digit number as a restriction of integer with the
pattern facet “[0-9]{3}” creates a schema type whose valid values
are only those with a lexical form consisting of three digits.</p><p>The pattern facet is not reversible in practice. A given point in
the value space might have several lexical representations. In
general, there is no practical way to determine which, if any, of these
representations satisfies the pattern facet of the type.</p><p>As a consequence, pattern facets are not respected when mapping to
an Infoset or during serialization, and values in the data model that
were originally valid with respect to a schema that contains
pattern-based restrictions may be invalid after serialization.</p></div4></div3><!--
<div3 id="nilled">
<head>Mapping <att>xsi:nil</att> on &elementNode;s</head>

<p><bibref ref="xmlschema-2"/> introduced a mechanism for signaling
that an element should be accepted as valid when it has no content
despite a content type which does not require or even necessarily
allow empty content. That mechanism is the <att>xsi:nil</att> attribute.
</p>

<p>The data model exposes this special semantic in the &dm.prop.nilled; property.
(It also exposes the attribute, irrespective of whether or not schema
processing has been performed.)
</p>

<p>If the <emph role="infoset-property">validity</emph> property exists on
an information item and is <quote><emph>valid</emph></quote> then if
the <emph role="infoset-property">nil</emph> property exists and is true,
then the &dm.prop.nilled; property is <quote><emph>true</emph></quote>.
In all other cases, including all cases where schema validity assessment was
not attempted or did not succeed, the
&dm.prop.nilled; property is <quote><emph>false</emph></quote>.</p>

</div3>
--><div3 id="dates-and-times"><head>Dates and Times</head><p>The date and time types require special attention. This section
applies to implementations that store the typed value of
<code nobreak="false">xs:dateTime</code>, <code nobreak="false">xs:date</code>, <code nobreak="false">xs:time</code>,
<code nobreak="false">xs:gYearMonth</code>, <code nobreak="false">xs:gYear</code>,
<code nobreak="false">xs:gMonthDay</code>, <code nobreak="false">xs:gMonth</code>,
<code nobreak="false">xs:gDay</code>, and types that are derived from them. These are
known collectively as the date/time types in this specification.</p><p>The values of the date/time types are represented in the data model
using seven components:</p><glist><gitem><label>year</label><def><p>An <code nobreak="false">xs:integer</code>.
</p></def></gitem><gitem><label>month</label><def><p>An <code nobreak="false">xs:integer</code> between 1 and 12, inclusive.
</p></def></gitem><gitem><label>day</label><def><p>An <code nobreak="false">xs:integer</code> between 1 and 31, inclusive, possibly
restricted further depending on the values of month and year.
</p></def></gitem><gitem><label>hour</label><def><p>An <code nobreak="false">xs:integer</code> between 0 and 23, inclusive.
</p></def></gitem><gitem><label>minute</label><def><p>An <code nobreak="false">xs:integer</code> between 0 and 59, inclusive.
</p></def></gitem><gitem id="tuple-timezone"><label>second</label><def><p>An <code nobreak="false">xs:decimal</code> greater than or equal to zero and less
than 60. Leap seconds are not supported.
</p></def></gitem><gitem><label>timezone</label><def><p>An <code nobreak="false">xs:dayTimeDuration</code> between -PT14H00M and PT14H00M,
inclusive. All timezone values must be an integral number of minutes.
</p></def></gitem></glist><p>Components that are intrinsic to the datatype (for example, day,
month, and year in a <code nobreak="false">xs:date</code>) are required; components
that can never be part of a datatype (for example, years in a
<code nobreak="false">xs:time</code>) must be missing. Missing components are
represented by the empty sequence. When a component is present, it
contains the “local value” that has not been normalized in any way.
The timezone component is optional for all the date/time datatypes.</p><p>Thus, the lexical <code nobreak="false">xs:dateTime</code> representation
“<code nobreak="false">2003-01-02T11:30:00-05:00</code>” is stored as
“<code nobreak="false">{2003, 1, 2, 11, 30, 0.0, -PT05H00M}</code>”.
The value of the lexical representation “<code nobreak="false">2003-01-16T16:30:00</code>”
is stored as
“<code nobreak="false">{2003, 1, 16, 16, 30, 0, ()}</code>”
because it has no timezone.
The value of the lexical <code nobreak="false">xs:gDay</code> representation
“<code nobreak="false">---30+10:30</code>” is
stored as
“<code nobreak="false">{(), (), 30, (), (), (), PT10H30M}</code>”.
</p><p>The lexical form “<code nobreak="false">24:00:00</code>” is normalized in the component
model. As a <code nobreak="false">xs:time</code>, it is stored as
“<code nobreak="false">{(), (), (), 0, 0, 0.0, ()}</code>”
and the <code nobreak="false">xs:dateTime</code> representation
“<code nobreak="false">1999-12-31T24:00:00</code>” is stored as
“<code nobreak="false">{2000, 1, 1, 0, 0, 0.0, ()}</code>”.
</p><note><p>Implementations are permitted to store date/time values in
any representation that is convenient for them, provided that the
individual properties can be accessed and modified.</p></note></div3><div3 id="qnames-and-notations"><head>QNames and NOTATIONS</head><p>The <code nobreak="false">QName</code> and <code nobreak="false">NOTATION</code> data types require
special attention. The following sections apply to
<code nobreak="false">xs:QName</code>, <code nobreak="false">xs:NOTATION</code>, and types derived
from them. These types are referred to collectively as “qualified
names”.</p><p>As defined in XML Schema, the lexical space for qualified names
includes a local name and an optional namespace prefix. The value
space for qualified names contains a local name and an optional
namespace URI. Therefore, it is not possible to derive a lexical value
from the typed value, or vice versa, without access to some context
that defines the namespace bindings.</p><p>When qualified names exist as values of nodes in a well-formed document,
it is always possible to determine such a namespace context. However,
the data model also allows qualified names to exist as freestanding
<termref def="dt-atomic-item">atomic items</termref>, or as the name or value of a parentless attribute node,
and in these cases no namespace context is available.</p><p>In this Data Model, therefore, the value space for qualified names
contains a local-name, an optional namespace URI, and an optional
prefix. The prefix is used only when producing a lexical
representation of the value, that is, when casting the value to a
string. The prefix plays no part in other operations involving
qualified names: in particular, two qualified names are equal if their
local names and namespace URIs match, regardless whether they have the
same prefix.</p><p>The following consistency constraints apply:</p><ulist><item><p>If the namespace URI of a qualified name is
<termref def="dt-absent">absent</termref>, then the prefix must
also be
<termref def="dt-absent">absent</termref>.</p></item><item><p>For every element node whose name has a prefix, the prefix must be one
that has a binding to the namespace URI of the element name in the namespaces
property of the element.</p></item><item><p>For every element node whose name has no prefix, the element must have
a binding for the empty prefix to the namespace URI of the element name,
or must have no binding for the empty prefix in
the case where the name of the element has no namespace URI.</p></item><item><p>For every attribute node whose name has a prefix, the attribute node must
either be parentless, or the prefix must be one that has a binding to the
namespace URI of the attribute name in the namespaces property of the
parent element.</p></item><item><p>For every qualified name that contains a prefix and that is included in
the typed value of an element node, or of an attribute node that has an
element node as its parent, the prefix must be one that is bound to the
namespace URI of the qualified name in the namespaces property of that
element.</p></item><item><p>For every qualified name that contains a namespace URI and no prefix, and
that is included in the typed value of an element node, or of an attribute
node that has an element node as its parent, that element node must have a
binding for the empty prefix to that namespace URI in its namespace property.
</p></item><item><p>For every qualified name that contains neither a namespace URI nor a
prefix, and that is included in the typed value of an element node, or of an
attribute node that has an element node as its parent, that node
must not have a binding for the empty prefix.</p></item><item><p>No qualified name that contains a prefix may be included in the typed value of
an attribute node that has no parent.</p></item></ulist></div3></div2></div1><div1 id="accessors"><head>Accessors</head><p>A set of accessors is defined on <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#Node" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">nodes</loc> in
the data model. For consistency, all the accessors are defined on
every kind of node, although several accessors return a constant empty
sequence on some kinds of nodes.</p><p>In order for processors to be able to operate on instances of the
data model, the model must expose the properties of the items it contains.
The data model does this by defining a family of accessor functions.
These are not functions in the literal sense; they are not available
for users or applications to call directly. Rather they are
descriptions of the information that an implementation of the data model
must expose to applications. Functions and operators available to end users
are described in <bibref ref="xpath-functions-40"/>.</p><p>Some typed values in the data model
are <termref def="dt-absent">absent</termref>.
Attempting to access an absent typed value is an error. Behavior
in these cases is implementation defined and the host language is responsible
for determining the result.</p><imp-def-feature>Some typed values in the data model are <emph>absent</emph>.
Attempting to access an absent typed value is an error. Behavior
in these cases is implementation defined and the host language is responsible
for determining the result.</imp-def-feature><div2 id="dm-attributes"><head><code nobreak="false">attributes</code> Accessor</head><example role="signature"><proto class="dm" name="attributes" return-type="attribute()" returnSeq="yes" returnEmptyOk="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="n" type="node()"/></proto></example><p>The <function>attributes</function> accessor returns the attributes of
a node as a sequence containing zero or more attribute nodes.
The order of attribute nodes is stable but implementation dependent.</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-attributes" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-base-uri"><head><code nobreak="false">base-uri</code> Accessor</head><example role="signature"><proto class="dm" name="base-uri" return-type="xs:anyURI" returnEmptyOk="yes" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="n" type="node()"/></proto></example><p>The <function>base-uri</function> accessor returns the base URI of a node
as a sequence containing zero or one URI reference. For more information
about base URIs, see <bibref ref="xmlbase"/>.</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-base-uri" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-children"><head><code nobreak="false">children</code> Accessor</head><example role="signature"><proto class="dm" name="children" return-type="node()" returnSeq="yes" returnEmptyOk="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="n" type="node()"/></proto></example><p>The <function>children</function> accessor returns the children of a node
as a sequence containing zero or more nodes.</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-children" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-document-uri"><head><code nobreak="false">document-uri</code> Accessor</head><example role="signature"><proto class="dm" name="document-uri" return-type="xs:anyURI" returnEmptyOk="yes" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="node" type="node()"/></proto></example><p>The <function>document-uri</function> accessor returns the
absolute URI of the resource from which the document node was constructed, if
the absolute URI is available. If there is no URI available, or if it cannot
be made absolute when the document node is constructed, or if it is used
on a node other than a document node,
the empty sequence is returned.
</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-document-uri" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-is-id"><head><code nobreak="false">is-id</code> Accessor</head><example role="signature"><proto class="dm" name="is-id" return-type="xs:boolean" returnEmptyOk="yes" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="node" type="node()"/></proto></example><p>The <function>is-id</function> accessor returns true if the
node is an XML ID. Exactly what constitutes an ID depends in part on
how the data model was constructed, see
<specref ref="ElementNode"/> and <specref ref="AttributeNode"/>.
</p><p>It is defined on <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-is-id" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc>
node kinds.</p></div2><div2 id="dm-is-idrefs"><head><code nobreak="false">is-idrefs</code> Accessor</head><example role="signature"><proto class="dm" name="is-idrefs" return-type="xs:boolean" returnEmptyOk="yes" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="node" type="node()"/></proto></example><p>The <function>is-idrefs</function> accessor returns true if the
node is an XML IDREF or IDREFS.
Exactly what constitutes an IDREF or IDREFS depends in part on
how the data model was constructed, see
<specref ref="ElementNode"/> and <specref ref="AttributeNode"/>.</p><p>It is defined on <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-is-idrefs" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc>
node kinds.</p></div2><div2 id="dm-namespace-nodes"><head><code nobreak="false">namespace-nodes</code> Accessor</head><example role="signature"><proto class="dm" name="namespace-nodes" return-type="node()" returnSeq="yes" returnEmptyOk="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="n" type="node()"/></proto></example><p>The <function>namespace-nodes</function> accessor returns the dynamic,
in-scope namespaces associated with a node as a sequence containing
zero or more namespace nodes. The order of namespace nodes is stable
but implementation dependent.</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-namespace-nodes" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-nilled"><head><code nobreak="false">nilled</code> Accessor</head><example role="signature"><proto class="dm" name="nilled" return-type="xs:boolean" returnSeq="no" returnEmptyOk="yes" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="n" type="node()"/></proto></example><p>The <function>nilled</function> accessor returns true if the
node is <quote>nilled</quote>.
<bibref ref="xmlschema-1"/> introduced the nilled mechanism to
signal that an element should be accepted as valid when it has no
content even when it has a content type which does not require or even
necessarily allow empty content.
</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-nilled" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-node-kind"><head><code nobreak="false">node-kind</code> Accessor</head><example role="signature"><proto class="dm" name="node-kind" return-type="xs:string" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="n" type="node()"/></proto></example><p>The <function>node-kind</function> accessor returns a string identifying the
kind of node. It will be one of the following, depending on the kind of
node:
“attribute”,
“comment”,
“document”,
“element”,
“namespace”,
“processing-instruction”, or
“text”.
</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-node-kind" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-node-name"><head><code nobreak="false">node-name</code> Accessor</head><example role="signature"><proto class="dm" name="node-name" return-type="xs:QName" returnEmptyOk="yes" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="n" type="node()"/></proto></example><p>The <function>node-name</function> accessor returns the name of the node
as a sequence of zero or one <code nobreak="false">xs:QName</code>s. Note that the
QName value includes an optional prefix as described in
<specref ref="qnames-and-notations"/>.</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-node-name" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-parent"><head><code nobreak="false">parent</code> Accessor</head><example role="signature"><proto class="dm" name="parent" return-type="node()" returnEmptyOk="yes" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="n" type="node()"/></proto></example><p>The <function>parent</function> accessor returns the parent of a node
as a sequence containing zero or one nodes.</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-parent" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-string-value"><head><code nobreak="false">string-value</code> Accessor</head><example role="signature"><proto class="dm" name="string-value" return-type="xs:string" returnEmptyOk="no" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="n" type="node()"/></proto></example><p>The <function>string-value</function> accessor returns the string value
of a node.</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-string-value" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-type-name"><head><code nobreak="false">type-name</code> Accessor</head><example role="signature"><proto class="dm" name="type-name" return-type="xs:QName" returnEmptyOk="yes" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="n" type="node()"/></proto></example><p>The <function>type-name</function> accessor returns the name of the schema type
of a node as a sequence of zero or one <code nobreak="false">xs:QName</code>s.</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-type-name" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-typed-value"><head><code nobreak="false">typed-value</code> Accessor</head><example role="signature"><proto class="dm" name="typed-value" return-type="xs:anyAtomicType" returnSeq="yes" returnEmptyOk="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="n" type="node()"/></proto></example><p>The <function>typed-value</function> accessor returns the
typed value of the node as a sequence of zero or more atomic
items.</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-typed-value" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-unparsed-entity-public-id"><head><code nobreak="false">unparsed-entity-public-id</code> Accessor</head><example role="signature"><proto class="dm" name="unparsed-entity-public-id" return-type="xs:string" returnEmptyOk="yes" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="node" type="node()"/><arg name="entityname" type="xs:string"/></proto></example><p>The <function>unparsed-entity-public-id</function> accessor returns
the public identifier of an unparsed external entity declared in the
specified document. If no entity with the name specified in
<code nobreak="false">$entityname</code> exists, or if the entity is not an external
unparsed entity, or if the entity has no public identifier, the empty
sequence is returned.</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-unparsed-entity-public-id" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2><div2 id="dm-unparsed-entity-system-id"><head><code nobreak="false">unparsed-entity-system-id</code> Accessor</head><example role="signature"><proto class="dm" name="unparsed-entity-system-id" return-type="xs:anyURI" returnEmptyOk="yes" returnSeq="no" prefix="fn" returnVaries="no" isSchema="no" isDatatype="no" isSpecial="no" isOp="no"><arg name="node" type="node()"/><arg name="entityname" type="xs:string"/></proto></example><p>The <function>unparsed-entity-system-id</function> accessor returns the
system identifier of an unparsed external entity declared in the
specified document.
The value is an absolute URI, and is obtained by resolving the
<emph role="infoset-property">system identifier</emph>
of the unparsed entity information item against the
<emph role="infoset-property">declaration base URI</emph>
of the same item.
If no entity with the name specified in <code nobreak="false">$entityname</code>
exists, or if the entity is not an external unparsed entity, the empty sequence
is returned.</p><p>It is defined on
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#acc-summ-unparsed-entity-system-id" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">all seven</loc> node kinds.</p></div2></div1><div1 id="Node"><head>Nodes</head><p><termdef id="dt-node" term="node">There are seven kinds of
<term>nodes</term> in the data model:
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#DocumentNode" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">document</loc>,
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ElementNode" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">element</loc>,
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#AttributeNode" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">attribute</loc>,
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#TextNode" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">text</loc>,
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#NamespaceNode" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">namespace</loc>,
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ProcessingInstructionNode" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">processing instruction</loc>, and
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#CommentNode" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">comment</loc>.</termdef> Each kind of
node is described in the following sections.</p><p>Each section consists of an overview of the node, followed by 
  information on accessors and methods construction from an Infoset or a PSVI.
  The final section provides a mapping to Infosets. No mapping 
  is provided, nor can it be provided, for producing a PSVI. 
  Validation must be used to obtain a PSVI for a (portion of a) data 
  model instance.
</p><p id="constraints-general">All nodes <rfc2119>must</rfc2119> satisfy
the following general constraints:</p><olist><item><p>Every node <rfc2119>must</rfc2119> have a unique identity,
distinct from all other nodes.
</p></item><item><p>The <emph role="dm-node-property">children</emph> property of a node <rfc2119>must not</rfc2119>
contain two consecutive text nodes.</p></item><item><p>The <emph role="dm-node-property">children</emph> property of a node <rfc2119>must not</rfc2119>
contain any empty text nodes.</p></item><item><p>No node may appear more than once in the
<emph role="dm-node-property">children</emph> or <emph role="dm-node-property">attributes</emph> properties of a node.</p></item></olist><div2 id="DocumentNode"><head>Document nodes</head><div3 id="DocumentNodeOverview"><head>Overview</head><p>Document nodes encapsulate XML documents. Documents have the following
properties:</p><ulist><item><p><emph role="dm-node-property">base-uri</emph>, possibly empty.
</p></item><item><p><emph role="dm-node-property">children</emph>, possibly empty.
</p></item><item><p><emph role="dm-node-property">unparsed-entities</emph>, possibly empty.
</p></item><item><p><emph role="dm-node-property">document-uri</emph>, possibly empty.
</p></item><item><p><emph role="dm-node-property">string-value</emph>
</p></item><item><p><emph role="dm-node-property">typed-value</emph>
</p></item></ulist><p id="constraints-document">Document nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p><olist><item><p>The <emph role="dm-node-property">children</emph> <rfc2119>must</rfc2119> consist exclusively
of element, processing instruction, comment, and text nodes if it is not empty.
Attribute, namespace, and document nodes can never appear as children
</p></item><item><p>If a node <emph>N</emph> is among the <emph role="dm-node-property">children</emph> of a document node
<emph>D</emph>, then the <emph role="dm-node-property">parent</emph> of <emph>N</emph>
<rfc2119>must</rfc2119> be <emph>D</emph>.</p></item><item><p>If a node <emph>N</emph> has a <emph role="dm-node-property">parent</emph> document node <emph>D</emph>,
then <emph>N</emph> <rfc2119>must</rfc2119> be among the <emph role="dm-node-property">children</emph> of
<emph>D</emph>.
</p></item><item><p>The <emph role="dm-node-property">string-value</emph> property of a document node must
be the concatenation of the <emph role="dm-node-property">string-value</emph>s of all its
text node descendants in document order or,
if the document has no such descendants, the zero-length string.
</p></item></olist><p>In the <bibref ref="xml-infoset"/>, a
<emph role="info-item">document information item</emph>
must have at least one child, its children must consist exclusively of
<emph role="info-item">element information item</emph>s,
<emph role="info-item">processing instruction information item</emph>s
and <emph role="info-item">comment information item</emph>s,
and exactly one of the children must be
an <emph role="info-item">element information item</emph>.
This data model is more permissive: a
document node may be empty, it may have more than one element node as a
child, and it also permits text nodes as children.</p><p>Implementations that support DTD processing and access to the
unparsed entity accessors use the
<emph role="dm-node-property">unparsed-entities</emph> property to associate
information about an unordered collection of unparsed entities with a
document node. This property is accessed indirectly through the
<function>unparsed-entity-system-id</function> and
<function>unparsed-entity-public-id</function> functions.
<phrase diff="add" at="2014-12-01">There is at most one unparsed
entity associated with any given name. Conforming XML documents may include
more than one unparsed entity declaration for the same name, but XML
mandates that only the first such declaration is significant.
</phrase>
</p></div3><div3 id="DocumentNodeAccessors"><head>Accessors</head><glist role="accessors"><gitem><label><function>attributes</function></label><def><p>Returns the empty sequence
</p></def></gitem><gitem><label><function>base-uri</function></label><def><p>Returns the value of the <emph role="dm-node-property">base-uri</emph> property.
</p></def></gitem><gitem><label><function>children</function></label><def><p>Returns the value of the <emph role="dm-node-property">children</emph> property.
</p></def></gitem><gitem><label><function>document-uri</function></label><def><p>Returns the absolute URI of the resource from which the document node was
constructed, or the empty sequence if no such absolute URI is available.
</p></def></gitem><gitem><label><function>is-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>is-idrefs</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>namespace-nodes</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>nilled</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>node-kind</function></label><def><p>Returns “<code nobreak="false">document</code>”.</p></def></gitem><gitem><label><function>node-name</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>parent</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>string-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">string-value</emph> property.
</p></def></gitem><gitem><label><function>type-name</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>typed-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">typed-value</emph> property.
</p></def></gitem><gitem><label><function>unparsed-entity-public-id</function></label><def><p>Returns the public identifier of the specified unparsed entity or
the empty sequence if no such entity exists.
</p></def></gitem><gitem><label><function>unparsed-entity-system-id</function></label><def><p>Returns the system identifier of the specified unparsed entity or
the empty sequence if no such entity exists.
</p></def></gitem></glist></div3><div3 id="const-infoset-document"><head>Construction from an Infoset</head><p>The <emph role="info-item">document information item</emph> is
required. A document node is constructed for each
<emph role="info-item">document information item</emph>.</p><p>The following infoset properties are required:
<emph role="infoset-property">children</emph> and
<emph role="infoset-property">base URI</emph>.</p><p>The following infoset properties are optional:
<emph role="infoset-property">unparsed entities</emph>.</p><p>Document node properties are derived from the infoset as
follows:</p><glist><gitem><label><emph role="dm-node-property">base-uri</emph></label><def><!--
<p>The value of the <emph role="infoset-property">base URI</emph>
property. Note that the base URI property is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the &dm.prop.base-uri; property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p>
--><p>The value of the <emph role="infoset-property">base URI</emph>
property, if available.
Note that the base URI property, if available,
is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the <emph role="dm-node-property">base-uri</emph> property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p><p>In practice a <emph role="infoset-property">base URI</emph>
is not always known. In this case the value of the
<emph role="dm-node-property">base-uri</emph> property of the document node will be the empty
sequence. This is not intrinsically an error, though it may cause some
operations that depend on the base URI to fail.
</p></def></gitem><gitem><label><emph role="dm-node-property">children</emph></label><def><p>The sequence of nodes constructed from the information
items found in the <emph role="infoset-property">children</emph>
property.</p><p>For each element, processing instruction, and comment found in the
<emph role="infoset-property">children</emph> property, a corresponding
element, processing instruction, or comment node is constructed
and that sequence of nodes is used as the value of the <emph role="dm-node-property">children</emph>
property.</p><p>If present among the
<emph role="infoset-property">children</emph>, the
<emph role="info-item">document type declaration information item</emph>
is ignored.
</p></def></gitem><gitem><label><emph role="dm-node-property">unparsed-entities</emph></label><def><p>If the <emph role="infoset-property">unparsed entities</emph> property is
present and is not the empty set, the values of the
<emph role="info-item">unparsed entity information items</emph> must be used
to support the <function>unparsed-entity-system-id</function> and
<function>unparsed-entity-public-id</function> accessors.</p><p>The internal structure of the values of the
<emph role="dm-node-property">unparsed-entities</emph> property is implementation
defined.</p></def></gitem><gitem><label><emph role="dm-node-property">string-value</emph></label><def><p>The concatenation of the string-values of all its text node descendants in
document order. If the document has no such descendants, the zero-length
string.</p></def></gitem><gitem><label><emph role="dm-node-property">typed-value</emph></label><def><p>The <function>string-value</function> of the node as an
<code nobreak="false">xs:untypedAtomic</code> value.</p></def></gitem><gitem><label><emph role="dm-node-property">document-uri</emph></label><def><p>The <emph role="dm-node-property">document-uri</emph> property
holds the absolute URI for the resource from which the document node
was constructed, if one is available and can be made absolute. For
example, if a collection of documents is returned by the
<function>fn:collection</function> function, the
<emph role="dm-node-property">document-uri</emph> property
may serve to distinguish between them even though each has the same
<emph role="dm-node-property">base-uri</emph> property.</p><p>If the <emph role="dm-node-property">document-uri</emph> is not
the empty sequence, then the following constraint must hold: the node returned
by evaluating <code nobreak="false">fn:doc()</code> with the
<emph role="dm-node-property">document-uri</emph> as its argument must
return the document node that provided the value of the 
<emph role="dm-node-property">document-uri</emph> property.</p><p>In other words, for any document node <code nobreak="false">$arg</code>, either
<code nobreak="false">fn:document-uri($arg)</code> must return the empty sequence or
<code nobreak="false">fn:doc(fn:document-uri($arg))</code> must return <code nobreak="false">$arg</code>.
</p></def></gitem></glist></div3><div3 id="const-psvi-document"><head>Construction from a PSVI</head><p>Construction from a PSVI is identical to construction
from the Infoset.</p></div3><div3 id="infoset-mapping-document"><head>Infoset Mapping</head><p>A document node maps to a
<emph role="info-item">document information item</emph>. The mapping fails
and produces no value if the document node contains text node children
that do not consist entirely of white space or if the document node contains
more than one element node child.</p><p>The following properties are specified by this mapping:</p><glist><gitem><label><emph role="infoset-property">children</emph></label><def><p>A list of information items obtained by processing each of the
<function>children</function> in order and mapping each to
the appropriate information item(s).
</p></def></gitem><gitem><label><emph role="infoset-property">document element</emph></label><def><p>The <emph role="info-item">element information item</emph> that is among the
<emph role="infoset-property">children</emph>.
</p></def></gitem><gitem><label><emph role="infoset-property">unparsed entities</emph></label><def><p>An unordered set of <emph role="info-item">unparsed entity information item</emph>s
constructed from the
<emph role="dm-node-property">unparsed-entities</emph>.
</p><p>Each unparsed entity maps to an <emph role="info-item">unparsed entity
information item</emph>. The
following properties are specified by this mapping:</p><glist><gitem><label><emph role="infoset-property">name</emph></label><def><p>The name of the entity.</p></def></gitem><gitem><label><emph role="infoset-property">system identifier</emph></label><def><p>The system identifier of the entity.</p></def></gitem><gitem><label><emph role="infoset-property">public identifier</emph></label><def><p>The public identifier of the entity.</p></def></gitem><gitem><label><emph role="infoset-property">declaration base URI</emph></label><def><p>Implementation defined. In many cases, the 
<emph role="dm-node-property">document-uri</emph>
is the correct answer and implementations <rfc2119>must</rfc2119>
use this value if they have no better information. Implementations that
keep track of the original
<emph role="infoset-property">declaration base URI</emph>
for entities should use that value.</p></def></gitem></glist><p>The following properties of the <emph role="info-item">unparsed entity
information item</emph> have no value:
<emph role="infoset-property">notation name</emph>,
<emph role="infoset-property">notation</emph>.</p></def></gitem></glist><p>The following properties of the <emph role="info-item">document
information item</emph> have no value:
<emph role="infoset-property">notations</emph>
<emph role="infoset-property">character encoding scheme</emph>
<emph role="infoset-property">standalone</emph>
<emph role="infoset-property">version</emph>
<emph role="infoset-property">all declarations processed</emph>.</p></div3></div2><div2 id="ElementNode"><head>Element nodes</head><div3 id="ElementNodeOverview"><head>Overview</head><p>Element nodes encapsulate XML elements. Elements have the following properties:</p><ulist><item><p><emph role="dm-node-property">base-uri</emph>, possibly empty.
</p></item><item><p><emph role="dm-node-property">node-name</emph>
</p></item><item><p><emph role="dm-node-property">parent</emph>, possibly empty
</p></item><item><p><emph role="dm-node-property">schema-type</emph>
</p></item><item><p><emph role="dm-node-property">children</emph>, possibly empty
</p></item><item><p><emph role="dm-node-property">attributes</emph>, possibly empty
</p></item><item><p><emph role="dm-node-property">namespaces</emph>
</p></item><item><p><emph role="dm-node-property">nilled</emph>
</p></item><item><p><emph role="dm-node-property">string-value</emph>
</p></item><item><p><emph role="dm-node-property">typed-value</emph>
</p></item><item><p><emph role="dm-node-property">is-id</emph>
</p></item><item><p><emph role="dm-node-property">is-idrefs</emph>
</p></item></ulist><p>Element nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p><olist><item id="elem-children"><p>The <emph role="dm-node-property">children</emph> <rfc2119>must</rfc2119> consist exclusively
of element, processing instruction, comment, and text nodes if it is not empty.
attribute, namespace, and document nodes can never appear as children
</p></item><item><p>The attribute nodes of an element <rfc2119>must</rfc2119> have distinct
<code nobreak="false">xs:QName</code>s.
</p></item><item><p>If a node <emph>N</emph> is among the <emph role="dm-node-property">children</emph> of an element
<emph>E</emph>, then the <emph role="dm-node-property">parent</emph> of <emph>N</emph>
<rfc2119>must</rfc2119> be <emph>E</emph>.
</p></item><item><p>Exclusive of attribute and namespace nodes, if a node
<emph>N</emph> has a <emph role="dm-node-property">parent</emph> element <emph>E</emph>, then
<emph>N</emph> <rfc2119>must</rfc2119> be among the <emph role="dm-node-property">children</emph> of
<emph>E</emph>. (Attribute and namespace nodes have a parent, but
they do not appear among the children of their parent.)</p><p>The data model permits element nodes without parents
(to represent partial results during expression processing, for example).
Such element nodes <rfc2119>must not</rfc2119>
appear among the <emph role="dm-node-property">children</emph> of any other node.</p><p diff="add" at="2014-11-11">An element may not be its own child or its own parent.</p></item><item><p>If an attribute node <emph>A</emph> is among the <emph role="dm-node-property">attributes</emph>
of an element <emph>E</emph>, then the <emph role="dm-node-property">parent</emph> of <emph>A</emph>
<rfc2119>must</rfc2119> be <emph>E</emph>.
</p></item><item><p>If an attribute node <emph>A</emph> has a
<emph role="dm-node-property">parent</emph> element <emph>E</emph>,
then <emph>A</emph> <rfc2119>must</rfc2119> be among the <emph role="dm-node-property">attributes</emph>
of <emph>E</emph>.</p><p>The data model permits attribute nodes without parents.
Such attribute nodes <rfc2119>must not</rfc2119>
appear among the <emph role="dm-node-property">attributes</emph> of any element node.
</p></item><item><p>If a namespace node <emph>N</emph> is among the namespaces
of an element <emph>E</emph>, then the parent of <emph>N</emph>
<rfc2119>must</rfc2119> be <emph>E</emph>.</p></item><item><p>If a namespace node <emph>N</emph> has a
parent element <emph>E</emph>, then <emph>N</emph> <rfc2119>must</rfc2119>
be among the <emph role="dm-node-property">namespaces</emph> of <emph>E</emph>.</p><p>The data model permits namespace nodes without parents. Such
namespace nodes <rfc2119>must not</rfc2119> appear among the
<emph role="dm-node-property">namespaces</emph> of any element node.  This constraint
is irrelevant for implementations that do not support namespace nodes.
</p></item><item><p>If the <function>type-name</function> of an element node is
<code nobreak="false">xs:untyped</code>, then the <function>type-name</function> of all its
descendant elements <rfc2119>must</rfc2119> also be <code nobreak="false">xs:untyped</code> and the
<function>type-name</function> of all its attribute nodes <rfc2119>must</rfc2119> be
<code nobreak="false">xs:untypedAtomic</code>.</p></item><item><p>If the <function>type-name</function> of an element node is
<code nobreak="false">xs:untyped</code>, then the
<emph role="dm-node-property">nilled</emph> property <rfc2119>must</rfc2119> be <code nobreak="false">false</code>.
</p></item><item><p>If the <emph role="dm-node-property">nilled</emph> property is <code nobreak="false">true</code>, then the
<emph role="dm-node-property">children</emph> property <rfc2119>must not</rfc2119> contain
element nodes or text nodes.</p></item><item><p>For every <termref def="dt-expanded-qname">expanded QName</termref>
that appears in the <function>node-name</function> of the element,
in the <function>node-name</function> of any attribute node among the
<emph role="dm-node-property">attributes</emph> of the element, or in any value of type
<code nobreak="false">xs:QName</code> or <code nobreak="false">xs:NOTATION</code> (or any type derived
from those types) that appears in the typed-value of the element or
the typed-value of any of its attributes, if the expanded QName has a non-empty URI, then
there <rfc2119>must</rfc2119> be a prefix binding for this URI among the
<emph role="dm-node-property">namespaces</emph> of this
element node.</p><p>If any of the expanded QNames has an empty URI, then there
<rfc2119>must not</rfc2119> be any binding among the 
<emph role="dm-node-property">namespaces</emph> of this
element node which binds the empty prefix to a URI.</p></item><item><p>Every element must include a namespace node and/or namespace binding
for the prefix <code nobreak="false">xml</code> bound to the URI
<code nobreak="false">http://www.w3.org/XML/1998/namespace</code> and there must be no other
prefix bound to that URI.</p></item><item><p>The <emph role="dm-node-property">string-value</emph> property of an element node must
be the concatenation of the <emph role="dm-node-property">string-value</emph>s of all its
text node descendants in document order or,
if the element has no such descendants, the zero-length string.
</p></item></olist></div3><div3 id="ElementNodeAccessors"><head>Accessors</head><glist role="accessors"><gitem><label><function>attributes</function></label><def><p>Returns the value of the <emph role="dm-node-property">attributes</emph> property. The order of
attribute nodes is stable but implementation dependent.
</p></def></gitem><gitem><label><function>base-uri</function></label><def><p>Returns the value of the <emph role="dm-node-property">base-uri</emph> property.
</p></def></gitem><gitem><label><function>children</function></label><def><p>Returns the value of the <emph role="dm-node-property">children</emph> property.
</p></def></gitem><gitem><label><function>document-uri</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>is-id</function></label><def><p>Returns the value of the <emph role="dm-node-property">is-id</emph>
property.
</p></def></gitem><gitem><label><function>is-idrefs</function></label><def><p>Returns the value of the <emph role="dm-node-property">is-idrefs</emph>
property.
</p></def></gitem><gitem><label><function>namespace-nodes</function></label><def><p>Returns the value of the <emph role="dm-node-property">namespaces</emph> property as a sequence of
namespace nodes. The order of
namespace nodes is stable but implementation dependent.
</p></def></gitem><gitem><label><function>nilled</function></label><def><p>Returns the value of the <emph role="dm-node-property">nilled</emph> property.
</p></def></gitem><gitem><label><function>node-kind</function></label><def><p>Returns “<code nobreak="false">element</code>”.</p></def></gitem><gitem><label><function>node-name</function></label><def><p>Returns the value of the <emph role="dm-node-property">node-name</emph> property.
</p></def></gitem><gitem><label><function>parent</function></label><def><p>Returns the value of the <emph role="dm-node-property">parent</emph> property.
</p></def></gitem><gitem><label><function>string-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">string-value</emph> property.
</p></def></gitem><gitem><label><function>type-name</function></label><def><p>Returns the value of the <emph role="dm-node-property">schema-type</emph> property.
</p></def></gitem><gitem><label><function>typed-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">typed-value</emph> property.
</p></def></gitem><gitem><label><function>unparsed-entity-public-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>unparsed-entity-system-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem></glist></div3><div3 id="const-infoset-element"><head>Construction from an Infoset</head><p>The <emph role="info-item">element information items</emph> are
required. An element node is constructed for each
<emph role="info-item">element information item</emph>.</p><p>The following infoset properties are required:
<emph role="infoset-property">namespace name</emph>,
<emph role="infoset-property">local name</emph>,
<emph role="infoset-property">children</emph>,
<emph role="infoset-property">attributes</emph>,
<emph role="infoset-property">in-scope namespaces</emph>,
<emph role="infoset-property">base URI</emph>, and
<emph role="infoset-property">parent</emph>.</p><p>Element node properties are derived from the infoset as
follows:</p><glist><gitem><label><emph role="dm-node-property">base-uri</emph></label><def><!--
<p>The value of the <emph role="infoset-property">base URI</emph>
property. Note that the base URI property is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the &dm.prop.base-uri; property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p>
--><p>The value of the <emph role="infoset-property">base URI</emph>
property, if available.
Note that the base URI property, if available,
is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the <emph role="dm-node-property">base-uri</emph> property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p><p>In practice a <emph role="infoset-property">base URI</emph>
is not always known. In this case the value of the
<emph role="dm-node-property">base-uri</emph> property of the document node will be the empty
sequence. This is not intrinsically an error, though it may cause some
operations that depend on the base URI to fail.
</p></def></gitem><gitem><label><emph role="dm-node-property">node-name</emph></label><def><p>An <code nobreak="false">xs:QName</code> constructed from the
<emph role="infoset-property">prefix</emph>,
<emph role="infoset-property">local name</emph>,
and
<emph role="infoset-property">namespace name</emph> properties.</p></def></gitem><gitem><label><emph role="dm-node-property">parent</emph></label><def><p>The node that corresponds to the
value of the <emph role="infoset-property">parent</emph> property or
the empty sequence if there is no parent.</p></def></gitem><gitem><label><emph role="dm-node-property">schema-type</emph></label><def><p>All element nodes constructed from an infoset have the type
<code nobreak="false">xs:untyped</code>.</p></def></gitem><gitem><label><emph role="dm-node-property">children</emph></label><def><p>The sequence of nodes constructed from the information
items found in the <emph role="infoset-property">children</emph>
property.</p><p>For
each element, processing instruction, comment, and maximal sequence of
adjacent <emph role="info-item">character information items</emph> found in the
<emph role="infoset-property">children</emph> property, a corresponding
element, processing instruction, comment, or text node is constructed
and that sequence of nodes is used as the value of the <emph role="dm-node-property">children</emph>
property.</p><p>Because the data model requires
that all general entities be expanded, there will never be
<emph role="info-item">unexpanded entity reference information item</emph>
children.</p></def></gitem><gitem><label><emph role="dm-node-property">attributes</emph></label><def><p>A set of attribute nodes constructed from the
<emph role="info-item">attribute information items</emph>
appearing in the <emph role="infoset-property">attributes</emph>
property. This includes all of the <quote>special</quote> attributes
(<att>xml:lang</att>, <att>xml:space</att>, <att>xsi:type</att>, etc.)
but does not include namespace declarations (because they are not attributes).</p><p>Default and fixed attributes provided by the DTD
are added to the <emph role="infoset-property">attributes</emph> and are
therefore included in the data model <emph role="dm-node-property">attributes</emph> of an element.</p></def></gitem><gitem><label><emph role="dm-node-property">namespaces</emph></label><def><p>A set of namespace nodes constructed from the
<emph role="info-item">namespace information items</emph>
appearing in the <emph role="infoset-property">in-scope namespaces</emph>
property. Implementations that do not support namespace nodes may simply
preserve the relevant bindings in this property.</p><p>Implementations <rfc2119>may</rfc2119> ignore
<emph role="info-item">namespace information items</emph> for
namespaces which are not known to be used. A namespace is known to be
used if:</p><ulist><item><p>It appears in the <termref def="dt-expanded-qname">expanded QName</termref>
of the <emph role="dm-node-property">node-name</emph> of the element.</p></item><item><p>It appears in the <termref def="dt-expanded-qname">expanded QName</termref>
of the <emph role="dm-node-property">node-name</emph> of any of the element’s attributes.</p></item></ulist><p>Note: applications may rely on namespaces that are not known to be used,
for example when QNames are used in content and that content does not
have a type of <code nobreak="false">xs:QName</code> Such applications may have difficulty
processing data models where some namespaces have been ignored.</p></def></gitem><gitem><label><emph role="dm-node-property">nilled</emph></label><def><p>All element nodes constructed from an infoset have a
<emph role="dm-node-property">nilled</emph> property of <quote><emph>false</emph></quote>.</p></def></gitem><gitem><label><emph role="dm-node-property">string-value</emph></label><def><p>The <emph role="dm-node-property">string-value</emph> is constructed from the
<emph role="info-item">character information item</emph>
<emph role="infoset-property">children</emph>
of the
element and all its descendants. The precise rules for selecting
significant
<emph role="info-item">character information items</emph> and
constructing characters from them is described in
<specref ref="const-infoset-text"/> of
<specref ref="TextNode"/>.</p><p>This process is equivalent to concatenating the
<function>string-value</function>s
of all of the text node descendants of
the resulting element node.</p><p>If the element has no such descendants, the <emph role="dm-node-property">string-value</emph>
is the empty string.</p></def></gitem><gitem><label><emph role="dm-node-property">typed-value</emph></label><def><p>The <emph role="dm-node-property">string-value</emph> as an <code nobreak="false">xs:untypedAtomic</code>.
</p></def></gitem><gitem><label><emph role="dm-node-property">is-id</emph></label><def><p>All element nodes constructed from an infoset have a
<emph role="dm-node-property">is-id</emph> property of
<quote><emph>false</emph></quote>.</p></def></gitem><gitem><label><emph role="dm-node-property">is-idrefs</emph></label><def><p>All element nodes constructed from an infoset have a
<emph role="dm-node-property">is-idrefs</emph> property of
<quote><emph>false</emph></quote>.</p></def></gitem></glist></div3><div3 id="const-psvi-element"><head>Construction from a PSVI</head><p>The following element node properties are affected by PSVI properties.</p><glist><gitem><label><emph role="dm-node-property">schema-type</emph></label><def><p>The <emph role="dm-node-property">schema-type</emph> is
determined as described in <specref ref="PSVI2NodeTypes"/>.</p></def></gitem><gitem><label><emph role="dm-node-property">children</emph></label><def><p>The sequence of nodes constructed from the information
items found in the <emph role="infoset-property">children</emph>
property.</p><p>For each element, processing instruction, comment, and maximal
sequence of adjacent <emph role="info-item">character information items</emph> found in the
<emph role="infoset-property">children</emph> property, a corresponding
element, processing instruction, comment, or text node is constructed
and that sequence of nodes is used as the value of the <emph role="dm-node-property">children</emph>
property.</p><p>For elements with schema simple types, or complex types with simple content,
if the <emph role="infoset-property">schema normalized value</emph>
PSVI property exists, the processor
<rfc2119>may</rfc2119> use a sequence of nodes
containing the processing instruction and comment nodes corresponding
to the
<emph role="info-item">processing instruction</emph> and
<emph role="info-item">comment information items</emph> found in the
<emph role="infoset-property">children</emph>
property, plus an optional single text node whose string value is
the <emph role="infoset-property">schema normalized value</emph> for
the <emph role="dm-node-property">children</emph> property.
If the <emph role="infoset-property">schema normalized value</emph> is
the empty string, the text node <rfc2119>must not</rfc2119> be
present, otherwise it <rfc2119>must</rfc2119> be present.
<!-- No new paragraph, otherwise the reader will think it applies to all elements, not the ones 
      specified by the opening sentence of the paragraph. -->
The relative order of Processing Instruction and comment nodes must
be preserved, but the position of the text node, if it is present, among
them is implementation defined.</p><p>The effect of the above rules is that where a fixed or default
value for an element is defined in the schema, and the element takes
this default value, a text node will be created to contain the value,
even though there are no character information items representing the
value in the PSVI. The position of this text node relative to any
comment or processing instruction children is
implementation-dependent.</p><p><bibref ref="xmlschema-1"/> also permits an element with mixed
content to take a default or fixed value (which will always be a
simple value), but it is unclear how such
a defaulted value is represented in the PSVI. Implementations
therefore <rfc2119>may</rfc2119> represent such a default value by
creating a text node, but are not required to do so.</p><note><p>Section 3.3.1 in
<bibref ref="xmlschema11-1"/> clarifies the PSVI
contributions of element default or fixed values in mixed content:
additional character information items are not added to the PSVI.
</p></note><p>Because the data model requires
that all general entities be expanded, there will never be
<emph role="info-item">unexpanded entity reference information item</emph>
children.</p></def></gitem><gitem><label><emph role="dm-node-property">attributes</emph></label><def><p>A set of attribute nodes constructed from the
<emph role="info-item">attribute information items</emph>
appearing in the <emph role="infoset-property">attributes</emph>
property. This includes all of the <quote>special</quote> attributes
(<att>xml:lang</att>, <att>xml:space</att>, <att>xsi:type</att>, etc.)
but does not include namespace declarations (because they are not attributes).</p><p>Default and fixed attributes provided by XML Schema processing
are added to the <emph role="infoset-property">attributes</emph> and are
therefore included in the data model <emph role="dm-node-property">attributes</emph> of an element.</p></def></gitem><gitem><label><emph role="dm-node-property">namespaces</emph></label><def><p>A set of namespace nodes constructed from the
<emph role="info-item">namespace information items</emph>
appearing in the <emph role="infoset-property">in-scope namespaces</emph>
property. Implementations that do not support namespace nodes may simply
preserve the relevant bindings in this property.</p><p>Implementations <rfc2119>may</rfc2119> ignore
<emph role="info-item">namespace information items</emph> for
namespaces which are not known to be used. A namespace is known to be
used if:</p><ulist><item><p>It appears in the <termref def="dt-expanded-qname">expanded QName</termref>
of the <emph role="dm-node-property">node-name</emph> of the element.</p></item><item><p>It appears in the <termref def="dt-expanded-qname">expanded QName</termref>
of the <emph role="dm-node-property">node-name</emph> of any of the element’s attributes.</p></item><item><p>It appears in the <termref def="dt-expanded-qname">expanded QName</termref>
of any values of type <code nobreak="false">xs:QName</code> that appear among the
element’s children or the typed values of its attributes.</p></item></ulist><p>Note: applications may rely on namespaces that are not known to be used,
for example when QNames are used in content and that content does not
have a type of <code nobreak="false">xs:QName</code> Such applications may have difficulty
processing data models where some namespaces have been ignored.</p></def></gitem><gitem><label><emph role="dm-node-property">nilled</emph></label><def><p>If the <emph role="infoset-property">validity</emph> property exists on
an information item and is <quote><emph>valid</emph></quote> then if
the <emph role="infoset-property">nil</emph> property exists and is true,
then the <emph role="dm-node-property">nilled</emph> property is <quote><emph>true</emph></quote>.
In all other cases, including all cases where schema validity assessment was
not attempted or did not succeed, the
<emph role="dm-node-property">nilled</emph> property is <quote><emph>false</emph></quote>.</p></def></gitem><gitem><label><emph role="dm-node-property">string-value</emph></label><def><p>The string-value is calculated as follows:</p><ulist><item><p>If the element is empty: its string value is the zero length string.
</p></item><item><p>If the element has a type of <code nobreak="false">xs:untyped</code>, a complex
type with element-only content, or a complex type with mixed content: its
string-value is the concatenation of the <emph role="dm-node-property">string-value</emph>s of all its
text node descendants in document order.
</p></item><item><p>If the element has a simple type or a complex type with simple content:
its string-value is the <emph role="infoset-property">schema normalized value</emph>
of the node.
</p></item></ulist><p>If an implementation stores only the typed value of an element, it
may use any valid lexical representation of the typed value for the
<emph role="dm-node-property">string-value</emph> property.</p></def></gitem><gitem><label><emph role="dm-node-property">typed-value</emph></label><def><p>The typed-value is calculated as follows:</p><ulist><item><p>If the element is of type <code nobreak="false">xs:untyped</code>, its typed-value
is its <function>string-value</function> as an <code nobreak="false">xs:untypedAtomic</code>.
</p></item><item><p>If the element has a complex type with empty content, its typed-value
is the empty sequence.
</p></item><item><p>If the element has a simple type or a complex type with simple content:
its typed value is computed as described in
<specref ref="TypedValueDetermination"/>.
The result is a sequence of zero or more atomic items. The
relationship between the type-name, typed-value, and string-value of an
element node is consistent with XML Schema validation.
</p><p>Note that in the case of dates and times, the timezone is preserved
as described in <specref ref="dates-and-times"/>, and
in the case of <code nobreak="false">xs:QName</code>s and <code nobreak="false">xs:NOTATION</code>s,
the prefix is preserved as described in
<specref ref="qnames-and-notations"/>.</p></item><item><p>If the element has a complex type with mixed content
(including <code nobreak="false">xs:anyType</code>), its typed-value
is its <function>string-value</function> as an <code nobreak="false">xs:untypedAtomic</code>.
</p></item><item><p>Otherwise, the element must be a complex type with element-only content.
The typed-value of such an element is <termref def="dt-absent">absent</termref>.
Attempting to access this property with the
<function>typed-value</function> accessor always raises an error.
</p></item></ulist></def></gitem><gitem><label><emph role="dm-node-property">is-id</emph></label><def><p>If the element has a complex type with element-only content,
the <emph role="dm-node-property">is-id</emph>
property is <code nobreak="false">false</code>.
Otherwise, if the typed-value of the element consists of exactly
one atomic item and that value is of type <code nobreak="false">xs:ID</code>,
or a type derived from <code nobreak="false">xs:ID</code>,
the <emph role="dm-node-property">is-id</emph>
property is <code nobreak="false">true</code>, otherwise it is <code nobreak="false">false</code>.</p><note><p>This means that in the case of a type constructed by list
from <code nobreak="false">xs:ID</code>, the ID is recognized provided that the list
is of length one. A type constructed as a union
involving <code nobreak="false">xs:ID</code> is recognized provided the actual value
is of type <code nobreak="false">xs:ID</code>.</p></note><note><p>The element that is marked with the
<emph role="dm-node-property">is-id</emph> property, and which will
therefore be retrieved by the fn:id function, is the node whose typed
value contains the <code nobreak="false">xs:ID</code> value.
This node is a child of the element node that, according to XML Schema,
is uniquely identified by this ID.</p></note></def></gitem><!-- old text
<gitem>
<label><emph role='dm-node-property'>is-id</emph></label>
<def>
<p>If the element has a complex type with element-only content, the
<emph role='dm-node-property'>is-id</emph>
property is <code>false</code>. Otherwise, if the typed-value of the element
consists of exactly one atomic item that value is of type <code>xs:ID</code>, or
a type derived from <code>xs:ID</code>, the
<emph role='dm-node-property'>is-id</emph> property is <code>true</code>,
otherwise it is <code>false</code>.</p>
</def>
</gitem>
--><gitem><label><emph role="dm-node-property">is-idrefs</emph></label><def><p>If the element has a complex type with element-only content, the
<emph role="dm-node-property">is-idrefs</emph>
property is <code nobreak="false">false</code>. 
Otherwise, if any of the atomic items in the typed-value of the
element is of type <code nobreak="false">xs:IDREF</code> or <code nobreak="false">xs:IDREFS</code>, or
a type derived from one of those types, the
<emph role="dm-node-property">is-idrefs</emph>
property is <code nobreak="false">true</code>, otherwise it is <code nobreak="false">false</code>.
</p></def></gitem></glist><p>All other properties have values that are consistent with construction
from an infoset.</p></div3><div3 id="infoset-mapping-element"><head>Infoset Mapping</head><p>An element node maps to an <emph role="info-item">element information item</emph>.</p><p>The following properties are specified by this mapping:</p><glist><gitem><label><emph role="infoset-property">namespace name</emph></label><def><p>The namespace name of the value of <function>node-name</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">local name</emph></label><def><p>The local part of the value of <function>node-name</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">prefix</emph></label><def><p>The prefix associated with the value of <function>node-name</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">children</emph></label><def><p>A list of information items obtained by processing each of the
<function>children</function> in order and mapping each to
the appropriate information item(s).
</p></def></gitem><gitem><label><emph role="infoset-property">attributes</emph></label><def><p>An unordered set of information items obtained by processing each of the
<function>attributes</function> and mapping each to
the appropriate information item(s).
</p></def></gitem><gitem><label><emph role="infoset-property">in-scope namespaces</emph></label><def><p>An unordered set of <emph role="info-item">namespace information items</emph> constructed from the
<emph role="dm-node-property">namespaces</emph>.
</p><p>Each in-scope namespace maps to a <emph role="info-item">namespace information item</emph>. The
following properties are specified by this mapping:</p><glist><gitem><label><emph role="infoset-property">prefix</emph></label><def><p>The prefix associated with the namespace.
</p></def></gitem><gitem><label><emph role="infoset-property">namespace name</emph></label><def><p>The URI associated with the namespace.
</p></def></gitem></glist></def></gitem><gitem><label><emph role="infoset-property">base URI</emph></label><def><p>The value of <function>base-uri</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">parent</emph></label><def><ulist><item><p>If this node is the root of the infoset mapping operation,
<emph>unknown</emph>.</p></item><item><p>If this node has a parent, the information item that corresponds
to the node returned by <function>parent</function>.
</p></item><item><p>Otherwise <emph>no value</emph>.
</p></item></ulist></def></gitem></glist><p>The following property has no value:
<emph role="infoset-property">namespace attributes</emph>.</p></div3></div2><div2 id="AttributeNode"><head>Attribute nodes</head><div3 id="AttributeNodeOverview"><head>Overview</head><p>Attribute nodes represent XML attributes. Attributes have the
following properties:</p><ulist><item><p><emph role="dm-node-property">node-name</emph>
</p></item><item><p><emph role="dm-node-property">parent</emph>, possibly empty
</p></item><item><p><emph role="dm-node-property">schema-type</emph>
</p></item><item><p><emph role="dm-node-property">string-value</emph>
</p></item><item><p><emph role="dm-node-property">typed-value</emph>
</p></item><item><p><emph role="dm-node-property">is-id</emph>
</p></item><item><p><emph role="dm-node-property">is-idrefs</emph>
</p></item></ulist><p>Attribute nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p><olist><item><p>If an attribute node <emph>A</emph> is among the <emph role="dm-node-property">attributes</emph>
of an element <emph>E</emph>, then the <emph role="dm-node-property">parent</emph> of <emph>A</emph>
<rfc2119>must</rfc2119> be <emph>E</emph>.
</p></item><item><p>If a attribute node <emph>A</emph> has a parent element
<emph>E</emph>, then <emph>A</emph> <rfc2119>must</rfc2119> be among
the <emph role="dm-node-property">attributes</emph> of <emph>E</emph>.</p><p>The data model permits attribute nodes without parents
(to represent partial results during expression processing, for example).
Such attributes <rfc2119>must not</rfc2119>
appear among the <emph role="dm-node-property">attributes</emph> of any element node.
</p></item><item><p>In the node-name of an attribute node, if a namespace URI is
present then a prefix <rfc2119>must</rfc2119> also be present.
</p></item></olist><p>For convenience, the element node that owns this attribute is called
its “parent” even though an attribute node is not a “child” of its
parent element. </p></div3><div3 id="AttributeNodeAccessors"><head>Accessors</head><glist role="accessors"><gitem><label><function>attributes</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>base-uri</function></label><def><p>If the attribute has a parent, returns the value of the
<function>base-uri</function> of its parent; otherwise it returns
the empty sequence.</p></def></gitem><gitem><label><function>children</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>document-uri</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>is-id</function></label><def><p>Returns the value of the <emph role="dm-node-property">is-id</emph>
property.
</p></def></gitem><gitem><label><function>is-idrefs</function></label><def><p>Returns the value of the <emph role="dm-node-property">is-idrefs</emph>
property.
</p></def></gitem><gitem><label><function>namespace-nodes</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>nilled</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>node-kind</function></label><def><p>Returns “<code nobreak="false">attribute</code>”.</p></def></gitem><gitem><label><function>node-name</function></label><def><p>Returns the value of the <emph role="dm-node-property">node-name</emph> property.
</p></def></gitem><gitem><label><function>parent</function></label><def><p>Returns the value of the <emph role="dm-node-property">parent</emph> property.
</p></def></gitem><gitem><label><function>string-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">string-value</emph> property.
</p></def></gitem><gitem><label><function>type-name</function></label><def><p>Returns the value of the <emph role="dm-node-property">schema-type</emph> property.
</p></def></gitem><gitem><label><function>typed-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">typed-value</emph> property.
</p></def></gitem><gitem><label><function>unparsed-entity-public-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>unparsed-entity-system-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem></glist></div3><div3 id="const-infoset-attribute"><head>Construction from an Infoset</head><p>The <emph role="info-item">attribute information items</emph> are
required. An attribute node is constructed for each
<emph role="info-item">attribute information item</emph>.</p><p>The following infoset properties are required:
<emph role="infoset-property">namespace name</emph>,
<emph role="infoset-property">local name</emph>,
<emph role="infoset-property">normalized value</emph>,
<emph role="infoset-property">attribute type</emph>, and
<emph role="infoset-property">owner element</emph>.</p><p>Attribute node properties are derived from the infoset as
follows:</p><glist><gitem><label><emph role="dm-node-property">node-name</emph></label><def><p>An <code nobreak="false">xs:QName</code> constructed from the
<emph role="infoset-property">prefix</emph>,
<emph role="infoset-property">local name</emph>,
and
<emph role="infoset-property">namespace name</emph> properties.</p></def></gitem><gitem><label><emph role="dm-node-property">parent</emph></label><def><p>The element node that corresponds to the value of the
<emph role="infoset-property">owner element</emph> property
or the empty sequence if there is no owner.</p></def></gitem><gitem><label><emph role="dm-node-property">schema-type</emph></label><def><p>The value <code nobreak="false">xs:untypedAtomic</code>.
</p></def></gitem><gitem><label><emph role="dm-node-property">string-value</emph></label><def><p>The <emph role="infoset-property">normalized value</emph> of the
attribute.</p></def></gitem><gitem><label><emph role="dm-node-property">typed-value</emph></label><def><p>The attribute’s typed-value
is its <function>string-value</function> as an <code nobreak="false">xs:untypedAtomic</code>.
</p><!--
<p>The typed-value is calculated as follows:</p>

<ulist>
<item>
<p>If the attribute is of type <code>xs:untypedAtomic</code>: its typed-value
is its <function>string-value</function> as an <code>xs:untypedAtomic</code>.
</p>
</item>
<item>
<p>Otherwise: its typed-value is a sequence of zero or more atomic
values derived from the &dm.prop.string-value; of the node and its type in a way
that is consistent with XML Schema validation.</p>
<p>Note that in the case of dates and times, the timezone is preserved
as described in <specref ref="dates-and-times"/>, and
in the case of <code>xs:QName</code>s and <code>xs:NOTATION</code>s,
the prefix is preserved as described in
<specref ref="qnames-and-notations"/>.</p>
</item>
</ulist>
--></def></gitem><gitem><label><emph role="dm-node-property">is-id</emph></label><def><p>If the attribute is named <att>xml:id</att> and its
<emph role="infoset-property">attribute type</emph> property does not
have the value <code nobreak="false">ID</code>, then <bibref ref="xml-id"/> processing
is performed. This will ensure that the value does have the type <code nobreak="false">ID</code>
and that it is properly normalized. If an error is encountered during
<att>xml:id</att> processing, an implementation <rfc2119>may</rfc2119> raise a dynamic error.
The
<emph role="dm-node-property">is-id</emph> property is always <code nobreak="false">true</code> for
attributes named <att>xml:id</att>.</p><p>If the <emph role="infoset-property">attribute type</emph> property
has the value <code nobreak="false">ID</code>, <code nobreak="false">true</code>, otherwise <code nobreak="false">false</code>.
</p></def></gitem><gitem><label><emph role="dm-node-property">is-idrefs</emph></label><def><p>If the <emph role="infoset-property">attribute type</emph> property
has the value <code nobreak="false">IDREF</code> or <code nobreak="false">IDREFS</code>,
<code nobreak="false">true</code>, otherwise <code nobreak="false">false</code>.
</p></def></gitem></glist></div3><div3 id="const-psvi-attribute"><head>Construction from a PSVI</head><p>The following attribute node properties are affected by PSVI properties.</p><glist><gitem><label><emph role="dm-node-property">string-value</emph></label><def><ulist><item><p>The <emph role="infoset-property">schema normalized value</emph>
PSVI property if that exists.
</p></item><item><p>Otherwise, the <emph role="infoset-property">normalized value</emph> property.
</p></item></ulist><p>If an implementation stores only the typed value of an attribute, it
may use any valid lexical representation of the typed value for the
<emph role="dm-node-property">string-value</emph> property.</p></def></gitem><gitem><label><emph role="dm-node-property">schema-type</emph></label><def><p>The <emph role="dm-node-property">schema-type</emph> is
determined as described in <specref ref="PSVI2NodeTypes"/>.</p></def></gitem><gitem><label><emph role="dm-node-property">typed-value</emph></label><def><p>The typed-value is calculated as follows:</p><ulist><item><p>If the attribute is of type <code nobreak="false">xs:untypedAtomic</code>: its typed-value
is its <function>string-value</function> as an <code nobreak="false">xs:untypedAtomic</code>.
</p></item><item><p>Otherwise, a sequence of zero or more atomic items as described in 
<specref ref="TypedValueDetermination"/>. The relationship between the 
type-name, typed-value, and string-value of an attribute node is 
consistent with XML Schema validation.</p></item></ulist></def></gitem><gitem><label><emph role="dm-node-property">is-id</emph></label><def><p>If the attribute is named <att>xml:id</att> and
its <emph role="infoset-property">attribute type</emph> property
does not have the value <code nobreak="false">xs:ID</code> or a type derived from <code nobreak="false">xs:ID</code>,
then <bibref ref="xml-id"/> processing is performed.
This will ensure that the value does have the type <code nobreak="false">xs:ID</code>
and that it is properly normalized.
If an error is encountered during <att>xml:id</att> processing,
an implementation <rfc2119>may</rfc2119> raise a dynamic error.
The <emph role="dm-node-property">is-id</emph>
property is always true for attributes named <code nobreak="false">xml:id</code>.</p><p>Otherwise, if the typed-value of the attribute consists of
exactly one atomic item and that value is of type <code nobreak="false">xs:ID</code>,
or a type derived from <code nobreak="false">xs:ID</code>,
the <emph role="dm-node-property">is-id</emph>
property is <code nobreak="false">true</code>, otherwise it is <code nobreak="false">false</code>.</p><note><p>This means that in the case of a type constructed by list
from <code nobreak="false">xs:ID</code>, the ID is recognized provided that the list
is of length one. A type constructed as a union
involving <code nobreak="false">xs:ID</code> is recognized provided the actual value
is of type <code nobreak="false">xs:ID</code>.</p></note></def></gitem><!-- old text
<gitem>
<label><emph role='dm-node-property'>is-id</emph></label>
<def>
<p>If the attribute is named <att>xml:id</att> and its
<emph role="infoset-property">attribute type</emph> property does not
have the value <code>xs:ID</code>, then <bibref ref="xml-id"/> processing
is performed. This will ensure that the value does have the type <code>xs:ID</code>
and that it is properly normalized. If an error is encountered during
xml:id processing, an implementation <rfc2119>may</rfc2119> raise a dynamic error.
The
<emph role='dm-node-property'>is-id</emph> property is always <code>true</code> for
attributes named <att>xml:id</att>.</p>

<p>If the &dm.prop.type-name; is <code>xs:ID</code> or a type derived from
<code>xs:ID</code>, <code>true</code>, otherwise <code>false</code>.
</p>
</def>
</gitem>
--><gitem><label><emph role="dm-node-property">is-idrefs</emph></label><def><p>If any of the atomic items in the typed-value of the
attribute is of type <code nobreak="false">xs:IDREF</code> or <code nobreak="false">xs:IDREFS</code>, or
a type derived from one of those types, the
<emph role="dm-node-property">is-idrefs</emph>
property is <code nobreak="false">true</code>, otherwise it is <code nobreak="false">false</code>.
</p><note><p>This rule means that a
<phrase diff="chg" at="2015-03-26">node whose type is</phrase>
constructed by list with an item type of <code nobreak="false">xs:IDREF</code>
(or a type derived from <code nobreak="false">xs:IDREF</code>)
<phrase diff="chg" at="2015-03-26">may have</phrase> the
<emph role="dm-node-property">is-idrefs</emph> property,
whether or not the list type is named <code nobreak="false">xs:IDREFS</code> or is derived from
<code nobreak="false">xs:IDREFS</code>. Because union types are allowed, it also means that an
element or attribute with the
<emph role="dm-node-property">is-idrefs</emph> property can contain atomic
items of type <code nobreak="false">xs:IDREF</code> alongside values of other types.
<phrase diff="add" at="2015-03-26">A node
has the
<emph role="dm-node-property">is-idrefs</emph> property only if the typed value contains at least
one atomic item that is an instance of <code nobreak="false">xs:IDREF</code>;
it is not sufficient that the type annotation permits such values.</phrase>
</p></note></def></gitem></glist><p>All other properties have values that are consistent with construction
from an infoset.</p><p>Note: attributes from the XML Schema instance namespace,
<quote><code nobreak="false">http://www.w3.org/2001/XMLSchema-instance</code></quote>
(<att>xsi:schemaLocation</att>,
<att>xsi:type</att>, etc.), appear as ordinary attributes in the data model.
</p></div3><div3 id="infoset-mapping-attribute"><head>Infoset Mapping</head><p>An attribute node maps to an <emph role="info-item">attribute information item</emph>.</p><p>The following properties are specified by this mapping:</p><glist><gitem><label><emph role="infoset-property">namespace name</emph></label><def><p>The namespace name of the value of <function>node-name</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">local name</emph></label><def><p>The local part of the value of <function>node-name</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">prefix</emph></label><def><p>The prefix associated with the value of <function>node-name</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">normalized value</emph></label><def><p>The value of <function>string-value</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">owner element</emph></label><def><ulist><item><p>If this node has a parent, the information item that corresponds
to the node returned by <function>parent</function>.
</p></item><item><p>Otherwise <emph>no value</emph>.
</p></item></ulist></def></gitem></glist><p>The following properties have no value:
<emph role="infoset-property">specified</emph>
<emph role="infoset-property">attribute type</emph>
<emph role="infoset-property">references</emph>.</p></div3></div2><div2 id="NamespaceNode"><head>Namespace nodes</head><div3 id="NamespaceNodeOverview"><head>Overview</head><p>Each namespace node represents the binding of a namespace URI to a 
namespace prefix or to the default namespace. Implementations that do not 
use namespace nodes may represent the same information using the 
<emph role="dm-node-property">namespaces</emph> property of
an element node.
Namespaces have the
following properties:</p><ulist><item><p><emph role="dm-node-property">prefix</emph>, possibly empty
</p></item><item><p><emph role="dm-node-property">uri</emph>
</p></item><item><p><emph role="dm-node-property">parent</emph>, possibly empty
</p></item></ulist><p>Namespace nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p><olist><item><p>If a namespace node <emph>N</emph> is among the namespaces
of an element <emph>E</emph>, then the parent of <emph>N</emph>
<rfc2119>must</rfc2119> be <emph>E</emph>.</p></item><item><p>If a namespace node <emph>N</emph> has a parent element
<emph>E</emph>, then <emph>N</emph> <rfc2119>must</rfc2119> be among
the namespaces of <emph>E</emph>.</p></item><item><p>A namespace node <rfc2119>must</rfc2119> not have the
name <code nobreak="false">xmlns</code> nor the string-value
<code nobreak="false">http://www.w3.org/2000/xmlns/</code>.</p></item></olist><p>The data model permits namespace nodes without parents; see below.
</p><p>In XPath 1.0, namespace nodes were directly accessible by applications, by
means of the namespace axis. In XPath <phrase diff="chg" at="2013-12-06">3.1</phrase> the namespace axis is deprecated,
and it is not available at all in XQuery <phrase diff="chg" at="2013-12-06">3.1</phrase>. 
XPath <phrase diff="chg" at="2013-12-06">3.1</phrase> implementations are
not required to expose the namespace axis, though they may do so if they
wish to offer backwards compatibility.</p><p>The information held in namespace
nodes is instead made available to applications using functions defined
in <bibref diff="chg" at="2022-11-05" ref="xpath-functions-40"/>. Some properties of namespace nodes are
not exposed by these functions: in particular, properties related to the
identity of namespace nodes, their parentage, and their position in document
order. Implementations that do not expose the namespace axis can therefore
avoid the overhead of maintaining this information.</p><p>Implementations that expose the namespace axis <rfc2119>must</rfc2119> provide unique
namespace nodes for each element.
Each element has an associated set of namespace nodes, one for each
distinct namespace prefix that is in scope for the element (including
the <code nobreak="false">xml</code> prefix, which is implicitly declared by
<bibref ref="xml-names"/> and one for the default
namespace if one is in scope for the element. The element is the
parent of each of these namespace nodes; however, a namespace node is
not a child of its parent element. In implementations that expose the
namespace axis, elements never share namespace
nodes.</p><note><p>In implementations that do not expose the namespace axis, there is no
means by which the host language can tell if namespace nodes are shared or not
and, in such circumstances, sharing namespace nodes may be a very reasonable
implementation strategy.</p></note></div3><div3 id="NamespaceNodeAccessors"><head>Accessors</head><glist role="accessors"><gitem><label><function>attributes</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>base-uri</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>children</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>document-uri</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>is-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>is-idrefs</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>namespace-nodes</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>nilled</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>node-kind</function></label><def><p>Returns “<code nobreak="false">namespace</code>”.</p></def></gitem><gitem><label><function>node-name</function></label><def><p>If the <emph role="dm-node-property">prefix</emph> is not empty,
returns an <code nobreak="false">xs:QName</code> with the value of the <emph role="dm-node-property">prefix</emph> property
in the local-name and an empty namespace name, otherwise returns
the empty sequence.
</p></def></gitem><gitem><label><function>parent</function></label><def><p>Returns the value of the <emph role="dm-node-property">parent</emph> property.
</p></def></gitem><gitem><label><function>string-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">uri</emph> property.
</p></def></gitem><gitem><label><function>type-name</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>typed-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">uri</emph> property as an
<code nobreak="false">xs:string</code>.
</p></def></gitem><gitem><label><function>unparsed-entity-public-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>unparsed-entity-system-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem></glist></div3><div3 id="const-infoset-namespace"><head>Construction from an Infoset</head><p>The <emph role="info-item">namespace information items</emph> are
required.</p><p>The following infoset properties are required:
<emph role="infoset-property">prefix</emph>,
<emph role="infoset-property">namespace name</emph>.</p><p>Namespace node properties are derived from the infoset as
follows:</p><glist><gitem><label><emph role="dm-node-property">prefix</emph></label><def><p>The <emph role="infoset-property">prefix</emph> property.</p></def></gitem><gitem><label><emph role="dm-node-property">uri</emph></label><def><p>The <emph role="infoset-property">namespace name</emph> property.</p></def></gitem><gitem><label><emph role="dm-node-property">parent</emph></label><def><p>The element in whose <emph role="infoset-property">in-scope namespaces</emph> 
property the <emph role="info-item">namespace information item</emph> appears, if the implementation
exposes any mechanism for accessing the <function>parent</function>
accessor of namespace nodes.</p></def></gitem></glist></div3><div3 id="const-psvi-namespace"><head>Construction from a PSVI</head><p>Construction from a PSVI is identical to construction
from the Infoset.</p></div3><div3 id="infoset-mapping-namespace"><head>Infoset Mapping</head><p>A namespace node maps to a <emph role="info-item">namespace information item</emph>.</p><p>The following properties are specified by this mapping:</p><glist><gitem><label><emph role="infoset-property">prefix</emph></label><def><p>The prefix associated with the namespace.
</p></def></gitem><gitem><label><emph role="infoset-property">namespace name</emph></label><def><p>The value of <function>string-value</function>.
</p></def></gitem></glist></div3></div2><div2 id="ProcessingInstructionNode"><head>Processing instruction nodes</head><div3 id="ProcessingInstructionNodeOverview"><head>Overview</head><p>Processing instruction nodes encapsulate XML processing instructions.
Processing instructions have the following properties:</p><ulist><item><p><emph role="dm-node-property">target</emph>
</p></item><item><p><emph role="dm-node-property">content</emph>
</p></item><item><p><emph role="dm-node-property">base-uri</emph>, possibly empty
</p></item><item><p><emph role="dm-node-property">parent</emph>, possibly empty
</p></item></ulist><p>Processing instruction nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p><olist><item><p>The string <quote>?&gt;</quote> <rfc2119>must not</rfc2119> occur within the
<emph role="dm-node-property">content</emph>.</p></item><item><p>The <emph role="dm-node-property">target</emph> <rfc2119>must</rfc2119> be an <code nobreak="false">NCName</code>.
</p></item></olist></div3><div3 id="ProcessingInstructionNodeAccessors"><head>Accessors</head><glist role="accessors"><gitem><label><function>attributes</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>base-uri</function></label><def><p>Returns the value of the <emph role="dm-node-property">base-uri</emph> property.
</p></def></gitem><gitem><label><function>children</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>document-uri</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>is-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>is-idrefs</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>namespace-nodes</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>nilled</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>node-kind</function></label><def><p>Returns “<code nobreak="false">processing-instruction</code>”.</p></def></gitem><gitem><label><function>node-name</function></label><def><p>Returns an <code nobreak="false">xs:QName</code> with the value of the <emph role="dm-node-property">target</emph>
property in the local-name and an empty namespace URI and empty prefix.
</p></def></gitem><gitem><label><function>parent</function></label><def><p>Returns the value of the <emph role="dm-node-property">parent</emph> property.</p></def></gitem><gitem><label><function>string-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">content</emph> property.
</p></def></gitem><gitem><label><function>type-name</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>typed-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">content</emph> property as a
<code nobreak="false">xs:string</code>.
</p></def></gitem><gitem><label><function>unparsed-entity-public-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>unparsed-entity-system-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem></glist></div3><div3 id="const-infoset-pi"><head>Construction from an Infoset</head><p>A processing instruction node is constructed for each
<emph role="info-item">processing instruction information item</emph> that
is not ignored.</p><p>The following infoset properties are required:
<emph role="infoset-property">target</emph>,
<emph role="infoset-property">content</emph>,
<emph role="infoset-property">base URI</emph>, and
<emph role="infoset-property">parent</emph>.</p><p>Processing instruction node properties are derived from the infoset as
follows:</p><glist><gitem><label><emph role="dm-node-property">target</emph></label><def><p>The value of the <emph role="infoset-property">target</emph> property.</p></def></gitem><gitem><label><emph role="dm-node-property">content</emph></label><def><p>The value of the <emph role="infoset-property">content</emph> property.</p></def></gitem><gitem><label><emph role="dm-node-property">base-uri</emph></label><def><!--
<p>The value of the <emph role="infoset-property">base URI</emph>
property. Note that the base URI property is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the &dm.prop.base-uri; property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p>
--><p>The value of the <emph role="infoset-property">base URI</emph>
property, if available.
Note that the base URI property, if available,
is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the <emph role="dm-node-property">base-uri</emph> property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p><p>In practice a <emph role="infoset-property">base URI</emph>
is not always known. In this case the value of the
<emph role="dm-node-property">base-uri</emph> property of the document node will be the empty
sequence. This is not intrinsically an error, though it may cause some
operations that depend on the base URI to fail.
</p></def></gitem><gitem><label><emph role="dm-node-property">parent</emph></label><def><p>The node corresponding to the value of the
<emph role="infoset-property">parent</emph> property.</p></def></gitem></glist><p>There are no processing instruction nodes for processing instructions
that are children of a
<emph role="info-item">document type declaration information item</emph>.</p></div3><div3 id="const-psvi-pi"><head>Construction from a PSVI</head><p>Construction from a PSVI is identical to construction
from the Infoset.</p></div3><div3 id="infoset-mapping-processing-instruction"><head>Infoset Mapping</head><p>An processing instruction node maps to a
<emph role="info-item">processing instruction information item</emph>.</p><p>The following properties are specified by this mapping:</p><glist><gitem><label><emph role="infoset-property">target</emph></label><def><p>The local part of the value of <function>node-name</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">content</emph></label><def><p>The value of <function>string-value</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">base URI</emph></label><def><p>The value of <function>base-uri</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">parent</emph></label><def><ulist><item><p>If this node is the root of the infoset mapping operation,
<emph>unknown</emph>.</p></item><item><p>If this node has a parent, the information item that corresponds
to the node returned by <function>parent</function>.
</p></item><item><p>Otherwise <emph>no value</emph>.
</p></item></ulist></def></gitem><gitem><label><emph role="infoset-property">notation</emph></label><def><p><emph>No value</emph>.
</p></def></gitem></glist></div3></div2><div2 id="CommentNode"><head>Comment nodes</head><div3 id="CommentNodeOverview"><head>Overview</head><p>Comment nodes encapsulate XML comments. Comments have the following properties:
</p><ulist><item><p><emph role="dm-node-property">content</emph>
</p></item><item><p><emph role="dm-node-property">parent</emph>, possibly empty
</p></item></ulist><p>Comment nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p><olist><item><p>The string <quote>--</quote> <rfc2119>must not</rfc2119> occur within the
<emph role="dm-node-property">content</emph>.</p></item><item><p>The character <quote>-</quote> <rfc2119>must not</rfc2119> occur as the
last character of the
<emph role="dm-node-property">content</emph>.</p></item></olist></div3><div3 id="CommentNodeAccessors"><head>Accessors</head><glist role="accessors"><gitem><label><function>attributes</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>base-uri</function></label><def><p>If the comment has a parent, returns the value of the
<function>base-uri</function> of its parent; otherwise, returns
the empty sequence.</p></def></gitem><gitem><label><function>children</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>document-uri</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>is-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>is-idrefs</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>namespace-nodes</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>nilled</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>node-kind</function></label><def><p>Returns “<code nobreak="false">comment</code>”.</p></def></gitem><gitem><label><function>node-name</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>parent</function></label><def><p>Returns the value of the <emph role="dm-node-property">parent</emph> property.
</p></def></gitem><gitem><label><function>string-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">content</emph> property.
</p></def></gitem><gitem><label><function>type-name</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>typed-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">content</emph> property as a
<code nobreak="false">xs:string</code>.
</p></def></gitem><gitem><label><function>unparsed-entity-public-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>unparsed-entity-system-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem></glist></div3><div3 id="const-infoset-comment"><head>Construction from an Infoset</head><p>The <emph role="info-item">comment information items</emph> are
optional.</p><p>A comment node is constructed for each
<emph role="info-item">comment information item</emph>.</p><p>The following infoset properties are required:
<emph role="infoset-property">content</emph> and
<emph role="infoset-property">parent</emph>.</p><p>Comment node properties are derived from the infoset as
follows:</p><glist><gitem><label><emph role="dm-node-property">content</emph></label><def><p>The value of the <emph role="infoset-property">content</emph> property.</p></def></gitem><gitem><label><emph role="dm-node-property">parent</emph></label><def><p>The node corresponding to the value of the
<emph role="infoset-property">parent</emph> property.</p></def></gitem></glist><p>There are no comment nodes for comments that are children of a
<emph role="info-item">document type declaration information item</emph>.</p></div3><div3 id="const-psvi-comment"><head>Construction from a PSVI</head><p>Construction from a PSVI is identical to construction
from the Infoset.</p></div3><div3 id="infoset-mapping-comment"><head>Infoset Mapping</head><p>A comment node maps to a <emph role="info-item">comment information item</emph>.</p><p>The following properties are specified by this mapping:</p><glist><gitem><label><emph role="infoset-property">content</emph></label><def><p>The value of the <function>string-value</function>.
</p></def></gitem><gitem><label><emph role="infoset-property">parent</emph></label><def><ulist><item><p>If this node is the root of the infoset mapping operation,
<emph>unknown</emph>.</p></item><item><p>If this node has a parent, the information item that corresponds
to the node returned by <function>parent</function>.
</p></item><item><p>Otherwise <emph>no value</emph>.
</p></item></ulist></def></gitem></glist></div3></div2><div2 id="TextNode"><head>Text nodes</head><div3 id="TextNodeOverview"><head>Overview</head><p>Text nodes encapsulate XML character content. Text has the following properties:
</p><ulist><item><p><emph role="dm-node-property">content</emph>
  </p></item><item><p><emph role="dm-node-property">parent</emph>, possibly empty.
  </p></item></ulist><p>Text nodes <rfc2119>must</rfc2119> satisfy the following constraint:</p><olist><item><p>If the <emph role="dm-node-property">parent</emph> of a text node is not empty,
the text node <rfc2119>must not</rfc2119> contain the zero-length string
as its
<emph role="dm-node-property">content</emph>.
</p></item></olist><p>In addition, Document and element nodes impose the constraint that
two consecutive text nodes can never occur as adjacent siblings.
When a Document or element node is constructed, text nodes that would
be adjacent <rfc2119>must</rfc2119> be
combined into a single text node. If the resulting text node
is empty, it <rfc2119>must</rfc2119> never be placed among the children of
its parent; it is simply discarded.
</p></div3><div3 id="TextNodeAccessors"><head>Accessors</head><glist role="accessors"><gitem><label><function>attributes</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>base-uri</function></label><def><p>If the text node has a parent, returns the value of the
<function>base-uri</function> of its parent; otherwise, returns
the empty sequence.</p></def></gitem><gitem><label><function>children</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>document-uri</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>is-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>is-idrefs</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>namespace-nodes</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>nilled</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>node-kind</function></label><def><p>Returns “<code nobreak="false">text</code>”.</p></def></gitem><gitem><label><function>node-name</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>parent</function></label><def><p>Returns the value of the <emph role="dm-node-property">parent</emph> property.
</p></def></gitem><gitem><label><function>string-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">content</emph> property.
</p></def></gitem><gitem><label><function>type-name</function></label><def><p>Returns <code nobreak="false">xs:untypedAtomic</code>.
</p></def></gitem><gitem><label><function>typed-value</function></label><def><p>Returns the value of the <emph role="dm-node-property">content</emph> property as an
<code nobreak="false">xs:untypedAtomic</code>.
</p></def></gitem><gitem><label><function>unparsed-entity-public-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem><gitem><label><function>unparsed-entity-system-id</function></label><def><p>Returns the empty sequence.
</p></def></gitem></glist></div3><div3 id="const-infoset-text"><head>Construction from an Infoset</head><p>The <emph role="info-item">character information items</emph> are
required. A text node is constructed for each maximal sequence of
<emph role="info-item">character information items</emph> in document order.</p><p>The following infoset properties are required:
<emph role="infoset-property">character code</emph> and
<emph role="infoset-property">parent</emph>.</p><p>The following infoset properties are optional:
<emph role="infoset-property">element content whitespace</emph>.</p><p>A sequence of
<emph role="info-item">character information items</emph> is maximal
if it satisfies the following constraints:</p><olist><item><p>All of the information items in the sequence have the same parent.</p></item><item><p>The sequence consists of adjacent
<emph role="info-item">character information items</emph>
uninterrupted by other types of information item.</p></item><item><p>No other such sequence exists that contains any of the same
<emph role="info-item">character information items</emph> and is longer.</p></item></olist><p>Text node properties are derived from the infoset as
follows:</p><glist><gitem><label><emph role="dm-node-property">content</emph></label><def><p>A string comprised of characters that correspond to the
<emph role="infoset-property">character code</emph> properties of
each of the <emph role="info-item">character information items</emph>.</p><p>If the resulting text node consists entirely of whitespace and
the <emph role="infoset-property">element content whitespace</emph> property
of the <emph role="info-item">character information items</emph> used to
construct this node are <code nobreak="false">true</code>,
the <emph role="dm-node-property">content</emph> of the text node
is the zero-length string. text nodes are allowed to be empty only if they
have no parents; an empty text node will be discarded when its parent
is constructed, if it has a parent.</p><p>The content of the text node is not necessarily normalized as
described in the <bibref ref="charmod"/>. It is the
responsibility of data producers to provide normalized
text, and the responsibility of applications to make sure that
operations do not de-normalize text.</p></def></gitem><gitem><label><emph role="dm-node-property">parent</emph></label><def><p>The node corresponding to the value of the
<emph role="infoset-property">parent</emph> property.</p></def></gitem></glist></div3><div3 id="const-psvi-text"><head>Construction from a PSVI</head><p>For text nodes constructed from the
<emph role="infoset-property">schema normalized value</emph> of elements,
<emph role="dm-node-property">content</emph> contains the value of the
<emph role="infoset-property">schema normalized value</emph>.</p><p>Otherwise, construction from a PSVI is the same as construction
from the Infoset except for the <emph role="dm-node-property">content</emph> property. When
constructing the <emph role="dm-node-property">content</emph> property,
<emph role="infoset-property">element content whitespace</emph>
is not used to test if whitespace is collapsed. Instead,
if the resulting text node consists entirely of whitespace and the
<emph role="info-item">character information items</emph> used to
construct this node have a parent and that parent is an element and its
{content type} is not “<code nobreak="false">mixed</code>”, then
the <emph role="dm-node-property">content</emph> of the text node
is the zero-length string.</p><p>text nodes are allowed to be empty only if they
have no parents; an empty text node will be discarded when its parent
is constructed, if it has a parent.</p></div3><div3 id="infoset-mapping-text"><head>Infoset Mapping</head><p>A text node maps to a sequence of <emph role="info-item">character information items</emph>.</p><p>Each
character of the <function>string-value</function> of the node is converted
into a <emph role="info-item">character information item</emph> as specified by this mapping:</p><glist><gitem><label><emph role="infoset-property">character code</emph></label><def><p>The Unicode code point value of the character.
</p></def></gitem><gitem><label><emph role="infoset-property">parent</emph></label><def><ulist><item><p>If this node is the root of the infoset mapping operation,
<emph>unknown</emph>.</p></item><item><p>If this node has a parent, the information item that corresponds
to the node returned by <function>parent</function>.
</p></item><item><p>Otherwise <emph>no value</emph>.
</p></item></ulist></def></gitem><gitem><label><emph role="infoset-property">element content whitespace</emph></label><def><p><emph>Unknown</emph>.
</p></def></gitem></glist><p>This sequence of characters constitutes the infoset mapping.</p></div3></div2></div1><div1 id="conformance"><head>Conformance</head><p>The data model is intended primarily as a component that can be
used by other specifications. Therefore, the data model relies on
specifications that use it (such as <bibref ref="xpath-40"/>,
<bibref ref="xslt-40"/>, and <bibref ref="xquery-40"/>) to specify conformance
criteria for the data model in their respective environments.
Specifications that set conformance criteria for their use of the data
model must not relax the constraints expressed in this
specification.</p><p>Authors of conformance criteria for the use of the data
model should pay particular attention to the following features of
the data model:</p><olist><item><p>Support for the normative construction from an infoset described in
<specref ref="const-infoset"/>.
</p></item><item><p>Support for the normative construction from a PSVI described in
<specref ref="const-psvi"/>.
</p></item><item><p>Support for XML 1.0 and XML 1.1.
</p></item><item><p>Support for data types in XML Schema 1.0 and XML Schema 1.1.
</p></item><item><p>How namespaces are supported, through nodes or through the
alternative, implementation-dependent representation.</p></item></olist><note><p>In addition, the <function>is-id</function> 
and <function>base-uri</function> accessors are required by functions in <bibref ref="xpath-functions-40"/>.
These refer to the specifications  <bibref ref="xml-id"/>
and <bibref ref="xmlbase"/> respectively.</p></note></div1></body><back><div1 id="infoset-conformance"><head>XML Information Set Conformance</head><p>This specification conforms to the XML Information Set
<bibref ref="xml-infoset"/>.
The following information items <rfc2119>must</rfc2119> be exposed
by the infoset producer to construct a data model unless they are explicitly
identified as optional:</p><ulist><item><p>The <emph role="info-item">Document Information Item</emph> with
           <emph role="infoset-property">base URI</emph>,
           <emph role="infoset-property">children</emph>, and, optionally,
           <emph role="infoset-property">unparsed entities</emph>
           properties. If the
           <emph role="infoset-property">unparsed entities</emph> property
	   is supported, the <emph role="info-item">Unparsed Entity
           Information Items</emph> must also be supported.</p></item><item><p><emph role="info-item">Element Information Items</emph> with
           <emph role="infoset-property">base URI</emph>,
           <emph role="infoset-property">children</emph>,
           <emph role="infoset-property">attributes</emph>,
           <emph role="infoset-property">in-scope namespaces</emph>,
           <emph role="infoset-property">prefix</emph>,
           <emph role="infoset-property">local name</emph>,
           <emph role="infoset-property">namespace name</emph>,
           <emph role="infoset-property">parent</emph> properties.</p></item><item><p><emph role="info-item">Attribute Information Items</emph> with
           <emph role="infoset-property">namespace name</emph>,
           <emph role="infoset-property">prefix</emph>,
           <emph role="infoset-property">local name</emph>,
           <emph role="infoset-property">normalized value</emph>,
           <emph role="infoset-property">attribute type</emph>, and
           <emph role="infoset-property">owner element</emph> properties.</p></item><item><p><emph role="info-item">Character Information Items</emph> with
           <emph role="infoset-property">character code</emph>,
           <emph role="infoset-property">parent</emph>, and, optionally,
           <emph role="infoset-property">element content whitespace</emph>
           properties.</p></item><item><p><emph role="info-item">Processing Instruction Information Items</emph> with
           <emph role="infoset-property">base URI</emph>,
           <emph role="infoset-property">target</emph>,
           <emph role="infoset-property">content</emph> and
           <emph role="infoset-property">parent</emph> properties.</p></item><item><p><emph role="info-item">Comment Information Items</emph> with
           <emph role="infoset-property">content</emph> and
           <emph role="infoset-property">parent</emph> properties.</p></item><item><p><emph role="info-item">Namespace Information Items</emph> with
           <emph role="infoset-property">prefix</emph> and
           <emph role="infoset-property">namespace name</emph> properties.</p></item></ulist><p>Other information items and properties made available by the
Infoset processor are ignored.  In addition to the properties above,
the following PSVI properties are required
on
<emph role="info-item">Element Information Items</emph> and
<emph role="info-item">Attribute Information Items</emph>
if the data model is constructed from a PSVI:</p><ulist><item><p><emph role="infoset-property">validity</emph>,
  <emph role="infoset-property">validation attempted</emph>,
  <emph role="infoset-property">type definition</emph>,
  <emph role="infoset-property">type definition namespace</emph>,
  <emph role="infoset-property">type definition name</emph>,
  <emph role="infoset-property">type definition anonymous</emph>,
  <emph role="infoset-property">nil</emph>,
  <emph role="infoset-property">member type definition</emph>,
  <emph role="infoset-property">member type definition namespace</emph>,
  <emph role="infoset-property">member type definition name</emph>,
  <emph role="infoset-property">member type definition anonymous</emph> and
  <emph role="infoset-property">schema normalized value</emph>.</p></item></ulist></div1><div1 id="references"><head>References</head><div2 id="normative-references"><head>Normative References</head><blist><!--FIXME: update ../etc/tr with the latest TR page info! --><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xml" key="XML" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xml-infoset" key="Infoset" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xml-names" key="Namespaces in XML" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xml-names11" key="Namespaces in XML 1.1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xml-id" key="xml:id" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xpath-datamodel" key="XQuery 1.0 and XPath 2.0 Data Model (XDM)" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xpath-40" key="XML Path Language (XPath) 4.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xpath-functions-40" key="XQuery and XPath Functions and Operators 4.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xmlschema-1" key="Schema Part 1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xmlschema-2" key="Schema Part 2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xmlschema11-1" key="Schema 1.1 Part 1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xmlschema11-2" key="Schema 1.1 Part 2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xslt-xquery-serialization-40" key="XSLT and XQuery Serialization 4.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xquery-semantics" key="XQuery 1.0 and XPath 2.0 Formal Semantics" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="RFC2119" key="RFC 2119" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="RFC3986" key="RFC 3986" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="RFC3987" key="RFC 3987" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="charmod" key="Character Model" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/></blist></div2><div2 id="informative-references"><head>Other References</head><blist><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xmlbase" key="XML Base" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xslt-40" key="XSL Transformations (XSLT) Version 4.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XQWG" key="XML Query Working Group" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
<titleref href="https://www.w3.org/XML/Query/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">XML Query Working Group</titleref>,
World Wide Web Consortium.
Home page: https://www.w3.org/XML/Query/
</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XSLWG" key="XSLT Working Group" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
<titleref href="https://www.w3.org/Style/XSL/" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">XSL Working Group</titleref>,
World Wide Web Consortium.
Home page: https://www.w3.org/Style/XSL/
</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xquery-40" key="XQuery 4.0: An XML Query Language" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><!--<bibl id="xquery-31-requirements" key="XQuery 3.1 Requirements"/>--><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="ISO8601" key="ISO 8601" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">ISO (International Organization for Standardization).
<emph>Representations of dates and times, 2000-08-03.</emph>
Available from: <loc href="http://www.iso.org/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.iso.org/</loc>
</bibl></blist></div2></div1><inform-div1 id="glossary"><head>Glossary</head><?glossary?></inform-div1><inform-div1 id="example"><head>Example</head><p>The following XML document is used to illustrate the information
contained in a data model:</p><eg xml:space="preserve">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="dm-example.xsl"?&gt;
&lt;catalog xmlns="http://www.example.com/catalog"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.example.com/catalog
                             dm-example.xsd"
         xml:lang="en"
         version="0.1"&gt;

&lt;!-- This example is for data model illustration only.
     It does not demonstrate good schema design. --&gt;

&lt;tshirt code="T1534017" label=" Staind : Been Awhile "
        xlink:href="http://example.com/0,,1655091,00.html"
        sizes="M L XL"&gt;
  &lt;title&gt; Staind: Been Awhile Tee Black (1-sided) &lt;/title&gt;
  &lt;description&gt;
    &lt;html:p&gt;
      Lyrics from the hit song 'It's Been Awhile'
      are shown in white, beneath the large
      'Flock &amp;amp; Weld' Staind logo.
    &lt;/html:p&gt;
  &lt;/description&gt;
  &lt;price&gt; 25.00 &lt;/price&gt;
&lt;/tshirt&gt;

&lt;album code="A1481344" label=" Staind : Its Been A While "
       formats="CD"&gt;
  &lt;title&gt; It's Been A While &lt;/title&gt;
  &lt;description xsi:nil="true" /&gt;
  &lt;price currency="USD"&gt; 10.99 &lt;/price&gt;
  &lt;artist&gt; Staind &lt;/artist&gt;
&lt;/album&gt;

&lt;/catalog&gt;
</eg><p>The document is associated with the URI
<quote>http://www.example.com/catalog.xml</quote>,
and is valid with respect to the following XML schema:</p><eg xml:space="preserve">&lt;?xml version="1.0"?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:cat="http://www.example.com/catalog"
           xmlns:xlink="http://www.w3.org/1999/xlink"
           targetNamespace="http://www.example.com/catalog"
           elementFormDefault="qualified"&gt;

&lt;xs:import namespace="http://www.w3.org/XML/1998/namespace"
           schemaLocation="http://www.w3.org/2001/xml.xsd" /&gt;

&lt;xs:import namespace="http://www.w3.org/1999/xlink"
           schemaLocation="https://www.w3.org/XML/2008/06/xlink.xsd" /&gt;

&lt;xs:element name="catalog"&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="cat:_item" maxOccurs="unbounded" /&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="version" type="xs:string" fixed="0.1" use="required" /&gt;
    &lt;xs:attribute ref="xml:base" /&gt;
    &lt;xs:attribute ref="xml:lang" /&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;

&lt;xs:element name="_item" type="cat:itemType" abstract="true" /&gt;

&lt;xs:complexType name="itemType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element name="title" type="xs:token" /&gt;
    &lt;xs:element name="description" type="cat:description" nillable="true" /&gt;
    &lt;xs:element name="price" type="cat:price" maxOccurs="unbounded" /&gt;
  &lt;/xs:sequence&gt;
  &lt;xs:attribute name="label" type="xs:token" /&gt;
  &lt;xs:attribute name="code" type="xs:ID" use="required" /&gt;
  &lt;xs:attributeGroup ref="xlink:simpleAttrs" /&gt;
&lt;/xs:complexType&gt;

&lt;xs:element name="tshirt" type="cat:tshirtType" substitutionGroup="cat:_item" /&gt;

&lt;xs:complexType name="tshirtType"&gt;
  &lt;xs:complexContent&gt;
    &lt;xs:extension base="cat:itemType"&gt;
      &lt;xs:attribute name="sizes" type="cat:clothesSizes" use="required" /&gt;
      &lt;xs:attribute ref="xml:lang" use="optional"/&gt;
    &lt;/xs:extension&gt;
  &lt;/xs:complexContent&gt;
&lt;/xs:complexType&gt;

&lt;xs:simpleType name="clothesSizes"&gt;
  &lt;xs:union memberTypes="cat:sizeList"&gt;
    &lt;xs:simpleType&gt;
      &lt;xs:restriction base="xs:token"&gt;
        &lt;xs:enumeration value="oneSize" /&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:simpleType&gt;
  &lt;/xs:union&gt;
&lt;/xs:simpleType&gt;

&lt;xs:simpleType name="sizeList"&gt;
  &lt;xs:restriction&gt;
    &lt;xs:simpleType&gt;
      &lt;xs:list itemType="cat:clothesSize" /&gt;
    &lt;/xs:simpleType&gt;
    &lt;xs:minLength value="1" /&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;

&lt;xs:simpleType name="clothesSize"&gt;
  &lt;xs:union memberTypes="cat:numberedSize cat:categorySize" /&gt;
&lt;/xs:simpleType&gt;

&lt;xs:simpleType name="numberedSize"&gt;
  &lt;xs:restriction base="xs:integer"&gt;
    &lt;xs:enumeration value="4" /&gt;
    &lt;xs:enumeration value="6" /&gt;
    &lt;xs:enumeration value="8" /&gt;
    &lt;xs:enumeration value="10" /&gt;
    &lt;xs:enumeration value="12" /&gt;
    &lt;xs:enumeration value="14" /&gt;
    &lt;xs:enumeration value="16" /&gt;
    &lt;xs:enumeration value="18" /&gt;
    &lt;xs:enumeration value="20" /&gt;
    &lt;xs:enumeration value="22" /&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;

&lt;xs:simpleType name="categorySize"&gt;
  &lt;xs:restriction base="xs:token"&gt;
    &lt;xs:enumeration value="XS" /&gt;
    &lt;xs:enumeration value="S" /&gt;
    &lt;xs:enumeration value="M" /&gt;
    &lt;xs:enumeration value="L" /&gt;
    &lt;xs:enumeration value="XL" /&gt;
    &lt;xs:enumeration value="XXL" /&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;

&lt;xs:element name="album" type="cat:albumType" substitutionGroup="cat:_item" /&gt;

&lt;xs:complexType name="albumType"&gt;
  &lt;xs:complexContent&gt;
    &lt;xs:extension base="cat:itemType"&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="artist" type="xs:string" /&gt;
      &lt;/xs:sequence&gt;
      &lt;xs:attribute name="formats" type="cat:formatsType" use="required" /&gt;
      &lt;xs:attribute ref="xml:lang" use="optional"/&gt;
    &lt;/xs:extension&gt;
  &lt;/xs:complexContent&gt;
&lt;/xs:complexType&gt;

&lt;xs:simpleType name="formatsType"&gt;
  &lt;xs:list itemType="cat:formatType" /&gt;
&lt;/xs:simpleType&gt;

&lt;xs:simpleType name="formatType"&gt;
  &lt;xs:restriction base="xs:token"&gt;
    &lt;xs:enumeration value="CD" /&gt;
    &lt;xs:enumeration value="MiniDisc" /&gt;
    &lt;xs:enumeration value="tape" /&gt;
    &lt;xs:enumeration value="vinyl" /&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;

&lt;xs:complexType name="description" mixed="true"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:any namespace="http://www.w3.org/1999/xhtml" processContents="lax"
            minOccurs="0" maxOccurs="unbounded" /&gt;
  &lt;/xs:sequence&gt;
  &lt;xs:attribute ref="xml:lang" use="optional"/&gt;
&lt;/xs:complexType&gt;

&lt;xs:complexType name="price"&gt;
  &lt;xs:simpleContent&gt;
    &lt;xs:extension base="cat:monetaryAmount"&gt;
      &lt;xs:attribute name="currency" type="cat:currencyType" default="USD" /&gt;
    &lt;/xs:extension&gt;
  &lt;/xs:simpleContent&gt;
&lt;/xs:complexType&gt;

&lt;xs:simpleType name="currencyType"&gt;
  &lt;xs:restriction base="xs:token"&gt;
    &lt;xs:pattern value="[A-Z]{3}" /&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;

&lt;xs:simpleType name="monetaryAmount"&gt;
  &lt;xs:restriction base="xs:decimal"&gt;
    &lt;xs:fractionDigits value="3" /&gt;
    &lt;xs:pattern value="\d+(\.\d{2,3})?" /&gt;
  &lt;/xs:restriction&gt;
&lt;/xs:simpleType&gt;

&lt;/xs:schema&gt;
</eg><p>The schema is associated with the URI
<quote>http://www.example.com/dm-example.xsd</quote>.</p><p>This example exposes the data model for a document that has an associated
schema and has been validated successfully against it.
In general, an XML Schema is not required,
that is, the data model can represent a schemaless, well-formed XML
document with the rules described in <specref ref="types"/>.</p><p>The XML document is represented by the nodes described below.
The value <emph>D1</emph> represents a document node;
the values <emph>E1, E2, etc.</emph> represent element nodes;
the values <emph>A1, A2, etc.</emph> represent attribute nodes;
the values <emph>N1, N2, etc.</emph> represent namespace nodes;
the values <emph>P1, P2, etc.</emph> represent processing instruction nodes;
the values <emph>T1, T2, etc.</emph> represent text nodes.</p><p>For brevity:</p><ulist><item><p>Text nodes in the data model that contain only white space are not shown.</p></item><item><p>Literal strings are shown in quotes without the <code nobreak="false">xs:string()</code>
constructor.
</p></item><item><p>Literal decimals are shown without the <code nobreak="false">xs:decimal()</code>
constructor.
</p></item><item><p>Nodes are referred to using the syntax <code nobreak="false">[nodeID].</code>
</p></item><item><p>xs:QNames are used with the following prefixes bindings:</p><table><tbody><tr><td rowspan="1" colspan="1">xs</td><td rowspan="1" colspan="1">http://www.w3.org/2001/XMLSchema</td></tr><tr><td rowspan="1" colspan="1">xsi</td><td rowspan="1" colspan="1">http://www.w3.org/2001/XMLSchema-instance</td></tr><tr><td rowspan="1" colspan="1">cat</td><td rowspan="1" colspan="1">http://www.example.com/catalog</td></tr><tr><td rowspan="1" colspan="1">xlink</td><td rowspan="1" colspan="1">http://www.w3.org/1999/xlink</td></tr><tr><td rowspan="1" colspan="1">html</td><td rowspan="1" colspan="1">http://www.w3.org/1999/xhtml</td></tr><tr><td rowspan="1" colspan="1">anon</td><td rowspan="1" colspan="1">An implementation-dependent prefix associated with
anonymous type names</td></tr></tbody></table></item><item><p>The abbreviation <quote><code nobreak="false">\n</code></quote> is used in string literals
to represent a newline character; this is not supported in XPath, but it makes
this presentation clearer.</p></item><item><p>Accessors that return the empty sequence have been omitted.</p></item><item><p>To simplify the presentation, we assume an implementation
that does not expose the namespace axis. Therefore,
namespace nodes are shared across multiple elements.
See <specref ref="NamespaceNode"/>.</p></item></ulist><table><tbody><tr role="document" id="ex-D1"><td colspan="3" rowspan="1">// Document node D1</td></tr><tr role="document"><td rowspan="1" colspan="1">dm:base-uri(D1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="document"><td rowspan="1" colspan="1">dm:node-kind(D1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"document"</td></tr><tr role="document"><td rowspan="1" colspan="1">dm:string-value(D1)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"  Staind:  Been  Awhile  Tee  Black  (1-sided)  \n            Lyrics  from  the  hit  song  'It's  Been  Awhile'\n            are  shown  in  white,  beneath  the  large\n            'Flock  &amp;  Weld'  Staind  logo.\n          25.00    It's  Been  A  While    10.99    Staind  "</td></tr><tr role="document"><td rowspan="1" colspan="1">dm:typed-value(D1)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">xs:untypedAtomic("  Staind:  Been  Awhile  Tee  Black  (1-sided)  \n            Lyrics  from  the  hit  song  'It's  Been  Awhile'\n            are  shown  in  white,  beneath  the  large\n            'Flock  &amp;  Weld'  Staind  logo.\n          25.00    It's  Been  A  While    10.99    Staind  ")</td></tr><tr role="document"><td rowspan="1" colspan="1">dm:children(D1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-P1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">P1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E1</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="namespace" id="ex-N1"><td colspan="3" rowspan="1">// Namespace node N1</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:node-kind(N1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"namespace"</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:node-name(N1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">()</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:string-value(N1)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://www.example.com/catalog"</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:typed-value(N1)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://www.example.com/catalog"</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="namespace" id="ex-N2"><td colspan="3" rowspan="1">// Namespace node N2</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:node-kind(N2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"namespace"</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:node-name(N2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "html")</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:string-value(N2)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://www.w3.org/1999/xhtml"</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:typed-value(N2)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://www.w3.org/1999/xhtml"</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="namespace" id="ex-N3"><td colspan="3" rowspan="1">// Namespace node N3</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:node-kind(N3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"namespace"</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:node-name(N3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "xlink")</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:string-value(N3)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://www.w3.org/1999/xlink"</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:typed-value(N3)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://www.w3.org/1999/xlink"</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="namespace" id="ex-N4"><td colspan="3" rowspan="1">// Namespace node N4</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:node-kind(N4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"namespace"</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:node-name(N4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "xsi")</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:string-value(N4)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://www.w3.org/2001/XMLSchema-instance"</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:typed-value(N4)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://www.w3.org/2001/XMLSchema-instance"</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="namespace" id="ex-N5"><td colspan="3" rowspan="1">// Namespace node N5</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:node-kind(N5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"namespace"</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:node-name(N5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "xml")</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:string-value(N5)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://www.w3.org/XML/1998/namespace"</td></tr><tr role="namespace"><td rowspan="1" colspan="1">dm:typed-value(N5)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://www.w3.org/XML/1998/namespace"</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr id="ex-P1"><td colspan="3" rowspan="1">// Processing Instruction node P1</td></tr><tr role="processing-instruction"><td rowspan="1" colspan="1">dm:base-uri(P1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="processing-instruction"><td rowspan="1" colspan="1">dm:node-kind(P1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"processing-instruction"</td></tr><tr role="processing-instruction"><td rowspan="1" colspan="1">dm:node-name(P1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "xml-stylesheet")</td></tr><tr role="processing-instruction"><td rowspan="1" colspan="1">dm:string-value(P1)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"type="text/xsl"  href="dm-example.xsl""</td></tr><tr role="processing-instruction"><td rowspan="1" colspan="1">dm:typed-value(P1)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"type="text/xsl"  href="dm-example.xsl""</td></tr><tr role="processing-instruction"><td rowspan="1" colspan="1">dm:parent(P1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-D1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">D1</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="element" id="ex-E1"><td colspan="3" rowspan="1">// Element node E1</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:base-uri(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-kind(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"element"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-name(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.example.com/catalog", "catalog")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:string-value(E1)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"  Staind:  Been  Awhile  Tee  Black  (1-sided)  \n            Lyrics  from  the  hit  song  'It's  Been  Awhile'\n            are  shown  in  white,  beneath  the  large\n            'Flock  &amp;  Weld'  Staind  logo.\n          25.00    It's  Been  A  While    10.99    Staind  "</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:typed-value(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">fn:error()</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:type-name(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">anon:TYP000001</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-id(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-idrefs(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:parent(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-D1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">D1</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:children(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-C1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">C1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E7" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E7</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:attributes(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A3</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-nodes(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-bindings(E1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">("", "http://www.example.com/catalog", "html", "http://www.w3.org/1999/xhtml", "xlink", "http://www.w3.org/1999/xlink", "xsi", "http://www.w3.org/2001/XMLSchema-instance", "xml", "http://www.w3.org/XML/1998/namespace")</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A1"><td colspan="3" rowspan="1">// Attribute node A1</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.w3.org/2001/XMLSchema-instance", "xsi:schemaLocation")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A1)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://www.example.com/catalog                                                            dm-example.xsd"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">(xs:anyURI("http://www.example.com/catalog"), xs:anyURI("catalog.xsd"))</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">anon:TYP000002</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E1</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A2"><td colspan="3" rowspan="1">// Attribute node A2</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.w3.org/XML/1998/namespace", "xml:lang")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A2)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"en"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"en"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:NMTOKEN</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E1</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A3"><td colspan="3" rowspan="1">// Attribute node A3</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "version")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A3)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"0.1"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"0.1"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:string</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E1</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="comment" id="ex-C1"><td colspan="3" rowspan="1">// Comment node C1</td></tr><tr role="comment"><td rowspan="1" colspan="1">dm:base-uri(C1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="comment"><td rowspan="1" colspan="1">dm:node-kind(C1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"comment"</td></tr><tr role="comment"><td rowspan="1" colspan="1">dm:string-value(C1)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"  This  example  is  for  data  model  illustration  only.\n          It  does  not  demonstrate  good  schema  design.  "</td></tr><tr role="comment"><td rowspan="1" colspan="1">dm:typed-value(C1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"  This  example  is  for  data  model  illustration  only.\n          It  does  not  demonstrate  good  schema  design.  "</td></tr><tr role="comment"><td rowspan="1" colspan="1">dm:parent(C1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E1</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="element" id="ex-E2"><td colspan="3" rowspan="1">// Element node E2</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:base-uri(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-kind(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"element"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-name(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.example.com/catalog", "tshirt")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:string-value(E2)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"  Staind:  Been  Awhile  Tee  Black  (1-sided)  \n            Lyrics  from  the  hit  song  'It's  Been  Awhile'\n            are  shown  in  white,  beneath  the  large\n            'Flock  &amp;  Weld'  Staind  logo.\n          25.00  "</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:typed-value(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">fn:error()</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:type-name(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:tshirtType</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-id(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-idrefs(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:parent(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E1</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:children(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E6" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E6</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:attributes(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A5</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A6" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A6</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A7" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A7</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-nodes(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-bindings(E2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">("", "http://www.example.com/catalog", "html", "http://www.w3.org/1999/xhtml", "xlink", "http://www.w3.org/1999/xlink", "xsi", "http://www.w3.org/2001/XMLSchema-instance", "xml", "http://www.w3.org/XML/1998/namespace")</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A4"><td colspan="3" rowspan="1">// Attribute node A4</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "code")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A4)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"T1534017"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:ID("T1534017")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:ID</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">true</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E2</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A5"><td colspan="3" rowspan="1">// Attribute node A5</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "label")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A5)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"Staind  :  Been  Awhile"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:token("Staind : Been Awhile")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:token</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E2</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A6"><td colspan="3" rowspan="1">// Attribute node A6</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.w3.org/1999/xlink", "xlink:href")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A6)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"http://example.com/0,,1655091,00.html"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://example.com/0,,1655091,00.html")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E2</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A7"><td colspan="3" rowspan="1">// Attribute node A7</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "sizes")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A7)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"M  L  XL"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">(xs:token("M"), xs:token("L"), xs:token("XL"))</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:sizeList</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E2</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="element" id="ex-E3"><td colspan="3" rowspan="1">// Element node E3</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:base-uri(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-kind(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"element"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-name(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.example.com/catalog", "title")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:string-value(E3)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"Staind:  Been  Awhile  Tee  Black  (1-sided)"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:typed-value(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:token("Staind: Been Awhile Tee Black (1-sided)")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:type-name(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:token</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-id(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-idrefs(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:parent(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E2</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:children(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-T1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">T1</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:attributes(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">()</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-nodes(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-bindings(E3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">("", "http://www.example.com/catalog", "html", "http://www.w3.org/1999/xhtml", "xlink", "http://www.w3.org/1999/xlink", "xsi", "http://www.w3.org/2001/XMLSchema-instance", "xml", "http://www.w3.org/XML/1998/namespace")</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="text" id="ex-T1"><td colspan="3" rowspan="1">// Text node T1</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:base-uri(T1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:node-kind(T1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"text"</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:string-value(T1)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"Staind:  Been  Awhile  Tee  Black  (1-sided)"</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:typed-value(T1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic("Staind:  Been  Awhile  Tee  Black  (1-sided)")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:type-name(T1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:parent(T1)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E3</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="element" id="ex-E4"><td colspan="3" rowspan="1">// Element node E4</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:base-uri(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-kind(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"element"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-name(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.example.com/catalog", "description")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:string-value(E4)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"\n            Lyrics  from  the  hit  song  'It's  Been  Awhile'\n            are  shown  in  white,  beneath  the  large\n            'Flock  &amp;  Weld'  Staind  logo.\n        "</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:typed-value(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic("\n            Lyrics  from  the  hit  song  'It's  Been  Awhile'\n            are  shown  in  white,  beneath  the  large\n            'Flock  &amp;  Weld'  Staind  logo.\n        ")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:type-name(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:description</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-id(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-idrefs(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:parent(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E2</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:children(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:attributes(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">()</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-nodes(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-bindings(E4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">("", "http://www.example.com/catalog", "html", "http://www.w3.org/1999/xhtml", "xlink", "http://www.w3.org/1999/xlink", "xsi", "http://www.w3.org/2001/XMLSchema-instance", "xml", "http://www.w3.org/XML/1998/namespace")</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="element" id="ex-E5"><td colspan="3" rowspan="1">// Element node E5</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:base-uri(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-kind(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"element"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-name(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.w3.org/1999/xhtml", "html:p")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:string-value(E5)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"\n            Lyrics  from  the  hit  song  'It's  Been  Awhile'\n            are  shown  in  white,  beneath  the  large\n            'Flock  &amp;  Weld'  Staind  logo.\n        "</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:typed-value(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic("\n            Lyrics  from  the  hit  song  'It's  Been  Awhile'\n            are  shown  in  white,  beneath  the  large\n            'Flock  &amp;  Weld'  Staind  logo.\n        ")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:type-name(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyType</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-id(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-idrefs(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:parent(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E4</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:children(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-T2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">T2</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:attributes(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">()</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-nodes(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-bindings(E5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">("", "http://www.example.com/catalog", "html", "http://www.w3.org/1999/xhtml", "xlink", "http://www.w3.org/1999/xlink", "xsi", "http://www.w3.org/2001/XMLSchema-instance", "xml", "http://www.w3.org/XML/1998/namespace")</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="text" id="ex-T2"><td colspan="3" rowspan="1">// Text node T2</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:base-uri(T2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:node-kind(T2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"text"</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:string-value(T2)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"\n            Lyrics  from  the  hit  song  'It's  Been  Awhile'\n            are  shown  in  white,  beneath  the  large\n            'Flock  &amp;  Weld'  Staind  logo.\n        "</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:typed-value(T2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic("\n            Lyrics  from  the  hit  song  'It's  Been  Awhile'\n            are  shown  in  white,  beneath  the  large\n            'Flock  &amp;  Weld'  Staind  logo.\n        ")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:type-name(T2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:parent(T2)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E5</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="element" id="ex-E6"><td colspan="3" rowspan="1">// Element node E6</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:base-uri(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-kind(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"element"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-name(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.example.com/catalog", "price")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:string-value(E6)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"25.00"</td></tr><tr role="element"><td colspan="3" rowspan="1">// The typed-value is based on the content type of the complex type for the element</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:typed-value(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:monetaryAmount(25.0)</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:type-name(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:price</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-id(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-idrefs(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:parent(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E2</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:children(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-T3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">T3</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:attributes(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">()</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-nodes(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-bindings(E6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">("", "http://www.example.com/catalog", "html", "http://www.w3.org/1999/xhtml", "xlink", "http://www.w3.org/1999/xlink", "xsi", "http://www.w3.org/2001/XMLSchema-instance", "xml", "http://www.w3.org/XML/1998/namespace")</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="text" id="ex-T3"><td colspan="3" rowspan="1">// Text node T3</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:base-uri(T3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:node-kind(T3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"text"</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:string-value(T3)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"25.00"</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:typed-value(T3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic("25.00")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:type-name(T3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:parent(T3)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E6" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E6</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="element" id="ex-E7"><td colspan="3" rowspan="1">// Element node E7</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:base-uri(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-kind(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"element"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-name(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.example.com/catalog", "album")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:string-value(E7)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"  It's  Been  A  While    10.99    Staind  "</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:typed-value(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">fn:error()</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:type-name(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:albumType</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-id(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-idrefs(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:parent(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E1</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:children(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E8" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E8</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E9" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E9</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E10" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E10</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E11" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E11</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:attributes(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A8" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A8</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A9" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A9</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A10" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A10</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-nodes(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-bindings(E7)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">("", "http://www.example.com/catalog", "html", "http://www.w3.org/1999/xhtml", "xlink", "http://www.w3.org/1999/xlink", "xsi", "http://www.w3.org/2001/XMLSchema-instance", "xml", "http://www.w3.org/XML/1998/namespace")</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A8"><td colspan="3" rowspan="1">// Attribute node A8</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "code")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A8)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"A1481344"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:ID("A1481344")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:ID</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">true</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E7" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E7</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A9"><td colspan="3" rowspan="1">// Attribute node A9</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "label")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A9)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"Staind  :  Its  Been  A  While"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:token("Staind : Its Been A While")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:token</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E7" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E7</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A10"><td colspan="3" rowspan="1">// Attribute node A10</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "formats")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A10)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"CD"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:formatType("CD")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:formatType</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E7" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E7</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="element" id="ex-E8"><td colspan="3" rowspan="1">// Element node E8</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:base-uri(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-kind(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"element"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-name(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.example.com/catalog", "title")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:string-value(E8)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"It's  Been  A  While"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:typed-value(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:token("It's Been A While")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:type-name(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:token</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-id(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-idrefs(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:parent(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E7" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E7</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:children(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-T4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">T4</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:attributes(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">()</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-nodes(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-bindings(E8)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">("", "http://www.example.com/catalog", "html", "http://www.w3.org/1999/xhtml", "xlink", "http://www.w3.org/1999/xlink", "xsi", "http://www.w3.org/2001/XMLSchema-instance", "xml", "http://www.w3.org/XML/1998/namespace")</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="text" id="ex-T4"><td colspan="3" rowspan="1">// Text node T4</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:base-uri(T4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:node-kind(T4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"text"</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:string-value(T4)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"It's  Been  A  While"</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:typed-value(T4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic("It's  Been  A  While")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:type-name(T4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:parent(T4)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E8" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E8</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="element" id="ex-E9"><td colspan="3" rowspan="1">// Element node E9</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:base-uri(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-kind(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"element"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-name(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.example.com/catalog", "description")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:string-value(E9)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">""</td></tr><tr role="element"><td colspan="3" rowspan="1">// xsi:nil is true so the typed value is the empty sequence</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:typed-value(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">()</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:type-name(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:description</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-id(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-idrefs(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:parent(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E7" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E7</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:children(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">()</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:attributes(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A11" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A11</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-nodes(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-bindings(E9)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">("", "http://www.example.com/catalog", "html", "http://www.w3.org/1999/xhtml", "xlink", "http://www.w3.org/1999/xlink", "xsi", "http://www.w3.org/2001/XMLSchema-instance", "xml", "http://www.w3.org/XML/1998/namespace")</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A11"><td colspan="3" rowspan="1">// Attribute node A11</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.w3.org/2001/XMLSchema-instance", "xsi:nil")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A11)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"true"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:boolean("true")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E9" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E9</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="element" id="ex-E10"><td colspan="3" rowspan="1">// Element node E10</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:base-uri(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-kind(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"element"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-name(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.example.com/catalog", "price")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:string-value(E10)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"10.99"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:typed-value(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:monetaryAmount(10.99)</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:type-name(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:price</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-id(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-idrefs(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:parent(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E7" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E7</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:children(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-T5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">T5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:attributes(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-A12" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">A12</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-nodes(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-bindings(E10)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">("", "http://www.example.com/catalog", "html", "http://www.w3.org/1999/xhtml", "xlink", "http://www.w3.org/1999/xlink", "xsi", "http://www.w3.org/2001/XMLSchema-instance", "xml", "http://www.w3.org/XML/1998/namespace")</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="attribute" id="ex-A12"><td colspan="3" rowspan="1">// Attribute node A12</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-kind(A12)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"attribute"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:node-name(A12)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("", "currency")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:string-value(A12)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"USD"</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:typed-value(A12)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:currencyType("USD")</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:type-name(A12)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">cat:currencyType</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-id(A12)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:is-idrefs(A12)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="attribute"><td rowspan="1" colspan="1">dm:parent(A12)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E10" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E10</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="text" id="ex-T5"><td colspan="3" rowspan="1">// Text node T5</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:base-uri(T5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:node-kind(T5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"text"</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:string-value(T5)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"10.99"</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:typed-value(T5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic("10.99")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:type-name(T5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:parent(T5)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E10" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E10</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="element" id="ex-E11"><td colspan="3" rowspan="1">// Element node E11</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:base-uri(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-kind(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"element"</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:node-name(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:QName("http://www.example.com/catalog", "artist")</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:string-value(E11)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"  Staind  "</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:typed-value(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">" Staind "</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:type-name(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:string</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-id(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:is-idrefs(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">false</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:parent(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E7" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E7</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:children(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-T6" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">T6</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:attributes(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">()</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-nodes(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N1</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N2</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N3" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N3</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N4" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N4</loc>], [<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-N5" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">N5</loc>])</td></tr><tr role="element"><td rowspan="1" colspan="1">dm:namespace-bindings(E11)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">("", "http://www.example.com/catalog", "html", "http://www.w3.org/1999/xhtml", "xlink", "http://www.w3.org/1999/xlink", "xsi", "http://www.w3.org/2001/XMLSchema-instance", "xml", "http://www.w3.org/XML/1998/namespace")</td></tr><tr><td colspan="3" rowspan="1"> </td></tr><tr role="text" id="ex-T6"><td colspan="3" rowspan="1">// Text node T6</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:base-uri(T6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:anyURI("http://www.example.com/catalog.xml")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:node-kind(T6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">"text"</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:string-value(T6)</td><td rowspan="1" colspan="1">=</td><td rowspan="1" colspan="1">"  Staind  "</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:typed-value(T6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic("  Staind  ")</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:type-name(T6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">xs:untypedAtomic</td></tr><tr role="text"><td rowspan="1" colspan="1">dm:parent(T6)</td><td rowspan="1" colspan="1"> = </td><td rowspan="1" colspan="1">([<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ex-E11" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">E11</loc>])</td></tr><tr><td colspan="3" rowspan="1"> </td></tr></tbody></table><p>A graphical representation of the data model for the preceding
example is shown below. Document order in this representation can be
found by following the traditional left-to-right,
depth-first traversal; however, because the image has been rotated for
easier presentation, this appears to be bottom-to-top,
depth-first order.</p><table><tbody><tr><td rowspan="1" colspan="1"><graphic xmlns:xlink="http://www.w3.org/1999/xlink" source="dm-example.png" alt="Graphical depiction of the example data model." xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
      </td></tr><tr><td rowspan="1" colspan="1">Graphic representation of the data model.
[<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="dm-example-large.png" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">large view</loc>,
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="dm-example.svg" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">SVG</loc>]
      </td></tr></tbody></table></inform-div1><inform-div1 id="impl-summary"><head>Implementation-Defined and Implementation-Dependent Items</head><div2 id="implementation-defined"><head>Implementation-Defined Items</head><p>The following items are
<termref def="dt-implementation-defined">implementation-defined</termref>.
</p><?imp-def-feature?></div2><div2 id="implementation-dependent"><head>Implementation-Dependent Items</head><p>The following items are
<termref def="dt-implementation-dependent">implementation-dependent</termref>.
</p><?imp-dep-feature?></div2></inform-div1><inform-div1 id="ChangeLog" diff="chg" at="2022-11-05"><head>Change Log</head><p>The following substantive changes have been made to this document since the
   <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/xpath-datamodel-31/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XPath and XQuery Data Model 3.1 Recommendation of 21 March 2017</loc>.</p><?change-log?><!--<div2 id="ChangeLog-Substantive">
<head>Substantive changes</head>

<p>No substantive changes have been made.</p>

</div2>

<div2 id="ChangeLog-Minor">
<head>Minor changes</head>

<ulist>

<item>
<p>Editorial changes have been made to refer to the 4.0 family of specifications, and the administrative arrangements for publishing
the specification.</p>
</item>

<item>
<p>Various terms and concepts are more clearly defined and explained, and some minor errors are corrected.</p>
</item>


</ulist>

</div2>--></inform-div1><inform-div1><head>Accessor Summary</head><?xdm-accessor-summary?></inform-div1><inform-div1><head>Infoset Construction Summary</head><?xdm-infoset-construction-summary?></inform-div1><inform-div1><head>PSVI Construction Summary</head><?xdm-psvi-construction-summary?></inform-div1><inform-div1><head>Infoset Mapping Summary</head><?xdm-infoset-mapping-summary?></inform-div1></back></spec>