<?xml version="1.0" encoding="UTF-8"?>
<fos:functions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.w3.org/xpath-functions/spec/namespace fos.xsd"
   xmlns:fos="http://www.w3.org/xpath-functions/spec/namespace">
   <fos:global-variables>
      <fos:variable id="v-po" name="po" as="element()"
         >&lt;PurchaseOrder&gt; &lt;line-item&gt;
         &lt;description&gt;Large widget&lt;/description&gt; &lt;price&gt;8.95&lt;/price&gt;
         &lt;quantity&gt;5.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Small widget&lt;/description&gt; &lt;price&gt;3.99&lt;/price&gt;
         &lt;quantity&gt;2.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Tiny widget&lt;/description&gt; &lt;price&gt;1.49&lt;/price&gt;a
         &lt;quantity&gt;805&lt;/quantity&gt; &lt;/line-item&gt;
         &lt;/PurchaseOrder&gt;</fos:variable>
      <fos:variable id="v-item1" name="item1" select="$po/line-item[1]"/>
      <fos:variable id="v-item2" name="item2" select="$po/line-item[2]"/>
      <fos:variable id="v-item3" name="item3" select="$po/line-item[3]"/>
   </fos:global-variables>

   <fos:type id="uri-structure-record">
      <fos:record extensible="true">
         <fos:field name="uri" type="xs:string" required="false"/>
         <fos:field name="scheme" type="xs:string" required="false"/>
         <fos:field name="authority" type="xs:string" required="false"/>
         <fos:field name="userinfo" type="xs:string" required="false"/>
         <fos:field name="host" type="xs:string" required="false"/>
         <fos:field name="port" type="xs:string" required="false"/>
         <fos:field name="path" type="xs:string" required="false"/>
         <fos:field name="query" type="xs:string" required="false"/>
         <fos:field name="fragment" type="xs:string" required="false"/>
         <fos:field name="path-segments" type="array(xs:string)" required="false"/>
         <fos:field name="query-parameters" type="array(record(key? as xs:string, value? as xs:string, *))" required="false"/>
      </fos:record>
   </fos:type>
   
   <fos:type id="random-number-generator-record">
      <fos:record extensible="true">
         <fos:field name="number" type="xs:double" required="true"/>
         <fos:field name="next" type="function() as #random-number-generator-record" required="true"/>
         <fos:field name="permute" type="function(item()*) as item()*" required="true"/>
      </fos:record>
   </fos:type>
   
   <fos:type id="sort-key-record">
      <fos:record extensible="true">
         <fos:field name="key" type="function(item()) as xs:anyAtomicType*" required="true"/>
         <fos:field name="ascending" type="xs:boolean" required="false"/>
         <fos:field name="collation" type="xs:string" required="false"/>
      </fos:record>
   </fos:type>
   
   <fos:type id="parse-html-options">
      <fos:record extensible="true">        
         <fos:field name="method" type="xs:string" required="false"/>
         <fos:field name="html-version" type="union(enum('LS'), xs:decimal)" required="false"/>
         <fos:field name="encoding" type="xs:string?" required="false"/>
         <fos:field name="include-template-content" type="xs:boolean?" required="false"/>
      </fos:record>
   </fos:type>

   <fos:type id="common-csv-options">
      <fos:record extensible="false">
         <fos:field name="row-delimiter" type="xs:string" required="false"/>
         <fos:field name="column-delimiter" type="xs:string" required="false"/>
         <fos:field name="quote-character" type="xs:string" required="false"/>
      </fos:record>
   </fos:type>

   <fos:type id="parse-csv-options">
      <fos:record extensible="false">
         <fos:field name="row-delimiter" type="xs:string" required="false"/>
         <fos:field name="column-delimiter" type="xs:string" required="false"/>
         <fos:field name="quote-character" type="xs:string" required="false"/>
         <fos:field name="trim-whitespace" type="xs:boolean" required="false"/>
      </fos:record>
   </fos:type>

   <fos:type id="parsed-csv-structure-record">
      <fos:record extensible="false">
         <fos:field name="columns" type="csv-columns-record" required="true"/>
         <fos:field name="rows" type="csv-row-record*" required="true"/>
      </fos:record>
   </fos:type>

   <fos:type id="csv-columns-record">
      <fos:record extensible="false">
         <fos:field name="names" type="map(xs:string, xs:integer)" required="true"/>
         <fos:field name="fields" required="true" type="xs:string*"/>
      </fos:record>
   </fos:type>

   <fos:type id="csv-row-record">
      <fos:record extensible="false">
         <fos:field name="fields" type="xs:string*" required="true"/>
         <fos:field name="field" required="true" type="function(union(xs:integer, xs:string)) as xs:string?"/>
      </fos:record>
   </fos:type>

   <fos:function name="node-name" prefix="fn">
      <fos:signatures>
         <fos:proto name="node-name" return-type="xs:QName?">
            <fos:arg name="node" type="node()?" default="." usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the name of a node, as an <code>xs:QName</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If the argument is omitted, it defaults to the context item (<code>.</code>).<phrase diff="del" at="2022-11-29"> The
            behavior of the function if the argument is omitted is exactly the same as if the
            context item had been passed as the argument.</phrase></p>
         <p>If <code>$node</code> is the empty sequence, the empty sequence is returned.</p>
         <p>Otherwise, the function returns the result of the <code>dm:node-name</code> accessor as
            defined in <bibref
               ref="xpath-datamodel-31"/> (see <xspecref spec="DM40" ref="dm-node-name"/>).</p>
      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>

      </fos:errors>
      <fos:notes>
         <p>For element and attribute nodes, the name of the node is returned as an
               <code>xs:QName</code>, retaining the prefix, namespace URI, and local part.</p>
         <p>For processing instructions, the name of the node is returned as an
               <code>xs:QName</code> in which the prefix and namespace URI are <xtermref
               ref="dt-absent" spec="DM40">absent</xtermref>.</p>
         <p>For a namespace node, the function returns an empty sequence if the node represents the
            default namespace; otherwise it returns an <code>xs:QName</code> in which prefix and
            namespace URI are <xtermref
               ref="dt-absent" spec="DM40"
            >absent</xtermref> and the local
            part is the namespace prefix being bound.</p>
         <p>For all other kinds of node, the function returns the empty sequence.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="nilled" prefix="fn">
      <fos:signatures>
         <fos:proto name="nilled" return-type="xs:boolean?">
            <fos:arg name="node" type="node()?" default="." usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>

      <fos:summary>
         <p>Returns <code>true</code> for an element that is <term>nilled</term>.</p>
      </fos:summary>
      <fos:rules>
         <p>If the argument is omitted, it defaults to the context item (<code>.</code>). <phrase diff="del" at="2022-11-29">The
            behavior of the function if the argument is omitted is exactly the same as if the
            context item had been passed as the argument.</phrase></p>
         <p>If <code>$node</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise the function returns the result of the <code>dm:nilled</code> accessor as
            defined in <bibref
               ref="xpath-datamodel-31"/> (see <xspecref spec="DM40" ref="dm-nilled"/>).</p>
      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>

      </fos:errors>
      <fos:notes>
         <p>If <code>$node</code> is not an element node, the function returns the empty
            sequence.</p>
         <p>If <code>$node</code> is an untyped element node, the function returns <code>false</code>.</p>
         <p>In practice, the function returns <code>true</code> only for an element node that has
            the attribute <code>xsi:nil="true"</code> and that is successfully validated against a
            schema that defines the element to be nillable; the detailed rules, however, are defined
            in <bibref
               ref="xpath-datamodel-31"/>.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="string" prefix="fn">
      <fos:signatures>
         <fos:proto name="string" return-type="xs:string">
            <fos:arg name="value" type="item()?" default="." usage="absorption"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the value of <code>$value</code> represented as an <code>xs:string</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>In the zero-argument version of the function, <code>$value</code> defaults to the context
            item. That is, calling <code>fn:string()</code> is equivalent to calling
               <code>fn:string(.)</code>.</p>
         <p>If <code>$value</code> is the empty sequence, the function returns the zero-length
            string.</p>

         <p>If <code>$value</code> is a node, the function returns the string value of the node, as obtained using the
                     <code>dm:string-value</code> accessor defined in <bibref
               ref="xpath-datamodel-31"/> (see <xspecref spec="DM40" ref="dm-string-value"/>).</p>

         <p>If <code>$value</code> is an atomic value, the function returns the result of the expression <code>$value cast
                     as xs:string</code> (see <specref
               ref="casting"/>).</p>

         <p>In all other cases, a dynamic error occurs (see below).</p>


      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <xerrorref spec="XP" class="DY" code="0002" type="type"
               /> by
            the zero-argument version of the function if the context item is <xtermref
               ref="dt-absent" spec="DM40">absent</xtermref>. </p>
         <p>A type error is raised <errorref class="TY" code="0014" type="type"
               /> if
               <code>$value</code> is a function item (this includes maps and arrays).</p>
      </fos:errors>
      <fos:notes>
         <p>Every node has a string value, even an element with element-only
            content (which has no typed value). Moreover, casting an atomic value to a string always
            succeeds. Functions, maps, and arrays have no string value, so these are the
            only arguments that satisfy the type signature but cause failure.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>string(23)</fos:expression>
               <fos:result>"23"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>string(false())</fos:expression>
               <fos:result>"false"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>string("Paris")</fos:expression>
               <fos:result>"Paris"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>string((1, 2, 3))</fos:expression>
               <fos:error-result error-code="XPTY0004"/>
            </fos:test>
            <fos:test>
               <fos:expression>string([[1, 2], [3, 4]])</fos:expression>
               <fos:error-result error-code="FOTY0014"/>
            </fos:test>
            <fos:test>
               <fos:expression>string(abs#1)</fos:expression>
               <fos:error-result error-code="FOTY0014"/>
            </fos:test>
         </fos:example>
         <fos:variable id="v-string-para" name="para"><![CDATA[
<para>In a hole in the ground there lived a <term author="Tolkien">hobbit</term>.</para>]]>
         </fos:variable>
         <fos:example>
            <fos:test use="v-string-para">
               <fos:expression>string($para)</fos:expression>
               <fos:result>"In a hole in the ground there lived a hobbit."</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="data" prefix="fn">
      <fos:signatures>
         <fos:proto name="data" return-type="xs:anyAtomicType*">
            <fos:arg name="input" type="item()*" default="." usage="absorption"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the result of atomizing a sequence. This process flattens arrays, and replaces
            nodes by their typed values.</p>
      </fos:summary>
      <fos:rules>
         <p>If the argument is omitted, it defaults to the context item (<code>.</code>).<phrase diff="del" at="2022-11-29"> The
            behavior of the function if the argument is omitted is exactly the same as if the
            context item had been passed as the argument.</phrase></p>
         <p> The result of <code>fn:data</code> is the sequence of atomic values produced by
            applying the following rules to each item in <code>$input</code>:</p>
         <ulist>
            <item>
               <p>If the item is an atomic value, it is appended to the result sequence.</p>
            </item>
            <item>
               <p>If the item is a node, the typed value of the node is appended to the result
                  sequence. The typed value is a sequence of zero or more atomic values:
                  specifically, the result of the <code>dm:typed-value</code> accessor as defined in
                     <bibref
                     ref="xpath-datamodel-31"/> (See <xspecref spec="DM40" ref="dm-typed-value"
                  />).</p>
            </item>
            <item>
               <p>If the item is an array, the result of applying <code>fn:data</code> to
                  each member of the array, in order, is appended to the result sequence.</p>
            </item>
         </ulist>
      </fos:rules>
      <fos:errors>
         <p>A type error is raised <errorref class="TY" code="0012" type="type"
               /> if an item in the
            sequence <code>$input</code> is a node that does not have a typed value. </p>
         <p>A type error is raised <errorref class="TY" code="0013" type="dynamic"
               /> if an item in
            the sequence <code>$input</code> is a function item other than
               an array. </p>

         <p>A dynamic error is raised if <code>$input</code> is omitted and the context item is
               <xtermref
               ref="dt-absent" spec="DM40">absent</xtermref>.</p>


      </fos:errors>
      <fos:notes>
         <p>The process of applying the <code>fn:data</code> function to a sequence is referred to
            as <code>atomization</code>. In many cases an explicit call on <code>fn:data</code> is
            not required, because atomization is invoked implicitly when a node or sequence of nodes
            is supplied in a context where an atomic value or sequence of atomic values is
            required.</p>
         <p>The result of atomizing an empty sequence is an empty sequence.</p>
         <p>The result of atomizing an empty array is an empty sequence.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>data(123)</fos:expression>
               <fos:result>123</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>data((123, 456))</fos:expression>
               <fos:result>123, 456</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>data([[1,2],[3,4]])</fos:expression>
               <fos:result>1, 2, 3, 4</fos:result>
            </fos:test>
         </fos:example>

         <fos:variable id="v-data-para" name="para"><![CDATA[
<para>In a hole in the ground there lived a <term author="Tolkien">hobbit</term>.</para>]]>
         </fos:variable>
         <fos:example>
            <fos:test use="v-data-para">
               <fos:expression>data($para)</fos:expression>
               <fos:result>xs:untypedAtomic("In a hole in the ground there lived a hobbit.")</fos:result>
            </fos:test>
            <fos:test use="v-data-para">
               <fos:expression>data($para/term/@author)</fos:expression>
               <fos:result>xs:untypedAtomic("Tolkien")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>data(abs#1)</fos:expression>
               <fos:error-result error-code="FOTY0013"/>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="base-uri" prefix="fn">
      <fos:signatures>
         <fos:proto name="base-uri" return-type="xs:anyURI?">
            <fos:arg name="node" type="node()?" default="." usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the base URI of a node.</p>
      </fos:summary>
      <fos:rules>
         <!-- see bug 6340 -->
         <p>The zero-argument version of the function returns the base URI of the context node: it
            is equivalent to calling <code>fn:base-uri(.)</code>.</p>
         <p>The single-argument version of the function behaves as follows:</p>
         <olist>
            <item><p>If <code>$node</code> is the empty sequence, the function returns the empty
               sequence.</p></item>

            <item><p>Otherwise, the function returns the value of the <code>dm:base-uri</code> accessor
               applied to the node <code>$node</code>. This accessor is defined, for each kind of
               node, in the XDM specification (See <xspecref
                  spec="DM40" ref="dm-base-uri"/>).</p></item>
         </olist>
         <note><p>As explained in XDM, document, element and processing-instruction nodes have a
            base-uri property which may be empty. The base-uri property for all other node kinds is
            the empty sequence. The dm:base-uri accessor returns the base-uri property of a node if
            it exists and is non-empty; otherwise it returns the result of applying the dm:base-uri
            accessor to its parent, recursively. If the node does not have a parent, or if the
            recursive ascent up the ancestor chain encounters a parentless node whose base-uri
            property is empty, the empty sequence is returned. In the case of namespace nodes,
            however, the result is always an empty sequence &#x2014; it does not depend on the base URI of
            the parent element.</p></note>


         <p>See also <code>fn:static-base-uri</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>
      </fos:errors>
   </fos:function>
   <fos:function name="document-uri" prefix="fn">
      <fos:signatures>
         <fos:proto name="document-uri" return-type="xs:anyURI?">
            <fos:arg name="node" type="node()?" default="." usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the URI of a resource where a document can be found, if available.</p>
      </fos:summary>
      <fos:rules>
         <p>If the argument is omitted, it defaults to the context item (<code>.</code>). <phrase diff="del" at="2022-11-29">The
            behavior of the function if the argument is omitted is exactly the same as if the
            context item had been passed as the argument.</phrase></p>
         <p>If <code>$node</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>If <code>$node</code> is not a document node, the function returns the empty
            sequence.</p>
         <p>Otherwise, the function returns the value of the <code>document-uri</code> accessor
            applied to <code>$node</code>, as defined in <bibref
               ref="xpath-datamodel-31"/> (See
               <xspecref spec="DM40"
               ref="DocumentNodeAccessors"/>).</p>
      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>

      </fos:errors>
      <fos:notes>
         <p>In the case of a document node <code>$D</code> returned by the <code>fn:doc</code>
            function, or a document node at the root of a tree containing a node returned by the
               <code>fn:collection</code> function, it will always be true that either
               <code>fn:document-uri($D)</code> returns the empty sequence, or that the following
            expression is <code>true</code>: <code>fn:doc(fn:document-uri($D))</code> is <code>$D</code>. It is
               <termref
               def="implementation-defined"
            >implementation-defined</termref> whether this guarantee also holds for
            document nodes obtained by other means, for example a document node passed as the
            initial context node of a query or transformation.</p>
         <p diff="add" at="A">A consequence of these rules is that it is not possible (within the
         execution scope of a transformation) for two different documents to have the same
         value for their <code>document-uri</code> property. This means that in situations where
         URI stability is not guaranteed (for example, with streamed input documents in XSLT,
         or for documents returned by <code>fn:collection</code> if document stability has been
            disabled), the <code>document-uri</code> property <rfc2119>should</rfc2119> be absent, and
            <code>fn:document-uri</code> <rfc2119>should</rfc2119> return an empty sequence.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="error" prefix="fn">
      <fos:signatures>
         <fos:proto name="error" return-type="none">
            <fos:arg name="code" type="xs:QName?" default="()"/>
            <fos:arg name="description" type="xs:string?" default="()"/>
            <fos:arg name="value" type="item()*" default="." usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Calling the <code>fn:error</code> function raises an application-defined error.</p>
      </fos:summary>
      <fos:rules>
         <p>This function never returns a value. Instead it always raises an error. The effect of
            the error is identical to the effect of dynamic errors raised implicitly, for example
            when an incorrect argument is supplied to a function.</p>
         <p>The parameters to the <code>fn:error</code> function supply information that is
            associated with the error condition and that is made available to a caller that asks for
            information about the error. The error may be caught either by the host language (using
            a try/catch construct in XSLT or XQuery, for example), or by the calling application or
            external processing environment. The way in which error information is returned to the
            external processing environment is <termref
               def="implementation-dependent">implementation-dependent</termref>.</p>

         <p>There are three pieces of information that may be associated with an error.</p>
         <ulist>
            <item>
               <p>The <code>$code</code> is an error code that distinguishes this error from others.
                  It is an <code>xs:QName</code>; the namespace URI conventionally identifies the
                  component, subsystem, or authority responsible for defining the meaning of the
                  error code, while the local part identifies the specific error condition. The
                  namespace URI <code>http://www.w3.org/2005/xqt-errors</code> is used for errors
                  defined in this specification; other namespace URIs may be used for errors defined
                  by the application.</p>
               <p>If the external processing environment expects the error code to be returned as a
                  URI or a string rather than as an <code>xs:QName</code>, then an error code with
                  namespace URI <code>NS</code> and local part <code>LP</code> will be returned in
                  the form <code>NS#LP</code>. The namespace URI part of the error code should
                  therefore not include a fragment identifier.</p>
               <p>If no value is supplied for the <code>$code</code> argument, <phrase diff="add" at="2022-12-19">or if the value supplied
                  is an empty sequence,</phrase>
                  the effective value of the error code is <code>fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')</code>.</p>
            </item>
            <item>
               <p>The <code>$description</code> is a natural-language description of the error
                  condition.</p>
               <p>If no value is supplied for the <code>$description</code>
                  argument, <phrase diff="add" at="2022-12-19">or if the value supplied
                     is an empty sequence,</phrase> then the
                  effective value of the description is <termref
                     def="implementation-dependent">implementation-dependent</termref>.</p>
            </item>
            <item>
               <p>The <code>$value</code> is an arbitrary value used to convey additional
                  information about the error, and may be used in any way the application
                  chooses.</p>
               <p>If no value is supplied for the <code>$value</code>
                  argument <phrase diff="add" at="2022-12-19">or if the value supplied
                     is an empty sequence</phrase>, then the
                  effective value of the error object is <termref
                     def="implementation-dependent">implementation-dependent</termref>.</p>
            </item>
         </ulist>



      </fos:rules>
      <fos:errors>
         <p>This function always raises a dynamic error. By default, it raises <errorref class="ER"
               code="0000"/></p>
      </fos:errors>
      <fos:notes>
         <p>The value of the <code>$description</code> parameter may need to be localized.</p>
         <p>The type <quote>none</quote> is a special type defined in <bibref ref="xquery-semantics"
            /> and is not available to the user. It indicates that the function never returns and
            ensures that it has the correct static type.</p>
         <p>Any QName may be used as an error code; there are no reserved names or namespaces. The
            error is always classified as a dynamic error, even if the error code used is one that
            is normally used for static errors or type errors.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>error()</fos:expression>
               <fos:error-result error-code="FOER0000"/>
               <fos:postamble>This returns the URI
                     <code>http://www.w3.org/2005/xqt-errors#FOER0000</code> (or the corresponding
                     <code>xs:QName</code>) to the external processing environment, unless the error
                  is caught using a try/catch construct in the host language.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>error(
  QName(
    'http://www.example.com/HR',
    'myerr:toohighsal'
  ),
  'Salary is too high'
)</eg></fos:expression>
               <fos:error-result error-code="myerr:toohighsal"/>
               <fos:postamble>This returns <code>http://www.example.com/HR#toohighsal</code> and the
                     <code>xs:string</code>
                  <code>"Salary is too high"</code> (or the corresponding
                     <code>xs:QName</code>) to the external processing environment, unless the error
                  is caught using a try/catch construct in the host language.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">All three arguments are now optional, and each argument can be set
            to an empty sequence. Previously if <code>$description</code> was supplied, it could not be empty.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="trace" prefix="fn">
      <fos:signatures>
         <fos:proto name="trace" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="transmission"/>
            <fos:arg name="label" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Provides an execution trace intended to be used in debugging queries.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>$input</code>, unchanged.</p>
         <p>In addition, the values of <code>$input</code>, typically serialized and converted
            to an <code>xs:string</code>, and <code>$label</code> (if supplied
            <phrase diff="add" at="2022-12-19">and non-empty</phrase>) <rfc2119>may</rfc2119>
            be output to an <termref def="implementation-defined"/> destination.</p>
         <p>The serialization of the trace output <rfc2119>must not</rfc2119> raise an error.
            This can be achieved (for example) by using a serialization method that can handle
            arbitrary input, such as the adaptive output method (see
            <xspecref spec="SER31" ref="adaptive-output"/>).</p>
         <p>The format of the trace output and its order are
            <termref def="implementation-dependent"/>. Therefore, the order in which the output
            appears is not predictable. This also means that if dynamic errors occur
            (whether or not they are caught using try/catch), it may be unpredictable whether
            any output is logged before the error occurs.</p>
      </fos:rules>
      <fos:notes>
         <p>If the trace information is unrelated to a specific value,
            <code>fn:log</code> can be used instead.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>Consider a situation in which a user wants to investigate the actual value passed to
               a function. Assume that in a particular execution, <code>$v</code> is an
                  <code>xs:decimal</code> with value <code>124.84</code>.
                  Writing <code>fn:trace($v, 'the value of $v is:')</code> will output the strings
                  <code>"124.84"</code> and <code>"the value of $v is:"</code>
                  in an implementation-dependent order.</p>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">The <code>$label</code> argument can now be set
            to an empty sequence. Previously if <code>$label</code> was supplied, it could not be empty.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="log" prefix="fn">
      <fos:signatures>
         <fos:proto name="log" return-type="empty-sequence()">
            <fos:arg name="input" type="item()*" usage="transmission"/>
            <fos:arg name="label" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Outputs trace information and discards the result.</p>
      </fos:summary>
      <fos:rules>
         <p>Similar to <code>fn:trace</code>, the values of <code>$input</code>,
            typically serialized and converted to an <code>xs:string</code>, and <code>$label</code>
            (if supplied and non-empty) <rfc2119>may</rfc2119> be output to an
            <termref def="implementation-defined"/> destination.</p>
         <p>In contrast to <code>fn:trace</code>, the function returns an empty sequence.</p>
         <p>The serialization of the log output <rfc2119>must not</rfc2119> raise an error.
            This can e.g. be achieved by using a serialization method that can handle arbitrary
            input, such as the <xspecref spec="SER31" ref="adaptive-output"/>.</p>
         <p>The format of the trace output and its order are
            <termref def="implementation-dependent"/>. Therefore, the order in which the output
            appears is not predictable. This also means that if dynamic errors occur
            (whether or not they are caught using try/catch), it may be unpredictable whether
            any output is logged before the error occurs.</p>
      </fos:rules>
      <fos:notes>
         <p>The function can be used for debugging. It can also be helpful in productive
            environments, e.g. to store dynamic input and evaluations to log files.</p>
      </fos:notes>
      <fos:history>
         <fos:version version="4.0">New function.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="numeric-add" prefix="op">
      <fos:signatures>
         <fos:proto name="numeric-add" return-type="xs:numeric">
            <fos:arg name="arg1" type="xs:numeric"/>
            <fos:arg name="arg2" type="xs:numeric"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="+" types="numeric"
         >Defines the semantics of the <code>+</code> operator when
         applied to two numeric values</fos:opermap>
      <fos:summary>
         <p>Returns the arithmetic sum of its operands: (<code>$arg1 + $arg2</code>).</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="op.numeric"/>.</p>
      </fos:rules>
      <fos:notes>
         <p> For <code>xs:float</code> or <code>xs:double</code> values, if one of the operands is a
            zero or a finite number and the other is <code>INF</code> or <code>-INF</code>,
               <code>INF</code> or <code>-INF</code> is returned. If both operands are
               <code>INF</code>, <code>INF</code> is returned. If both operands are
               <code>-INF</code>, <code>-INF</code> is returned. If one of the operands is
               <code>INF</code> and the other is <code>-INF</code>, <code>NaN</code> is
            returned.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="numeric-subtract" prefix="op">
      <fos:signatures>
         <fos:proto name="numeric-subtract" return-type="xs:numeric">
            <fos:arg name="arg1" type="xs:numeric"/>
            <fos:arg name="arg2" type="xs:numeric"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="-" types="numeric"
         >Defines the semantics of the <code>-</code> operator when
         applied to two numeric values. </fos:opermap>
      <fos:summary>
         <p>Returns the arithmetic difference of its operands: (<code>$arg1 - $arg2</code>).</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="op.numeric"/>.</p>
      </fos:rules>
      <fos:notes>
         <p> For <code>xs:float</code> or <code>xs:double</code> values, if one of the operands is a
            zero or a finite number and the other is <code>INF</code> or <code>-INF</code>, an
            infinity of the appropriate sign is returned. If both operands are <code>INF</code> or
               <code>-INF</code>, <code>NaN</code> is returned. If one of the operands is
               <code>INF</code> and the other is <code>-INF</code>, an infinity of the appropriate
            sign is returned.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="numeric-multiply" prefix="op">
      <fos:signatures>
         <fos:proto name="numeric-multiply" return-type="xs:numeric">
            <fos:arg name="arg1" type="xs:numeric"/>
            <fos:arg name="arg2" type="xs:numeric"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="*" types="numeric"
         >Defines the semantics of the <code>*</code> operator when
         applied to two numeric values.</fos:opermap>
      <fos:summary>
         <p>Returns the arithmetic product of its operands: (<code>$arg1 * $arg2</code>).</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="op.numeric"/>.</p>
      </fos:rules>
      <fos:notes>
         <p> For <code>xs:float</code> or <code>xs:double</code> values, if one of the operands is a
            zero and the other is an infinity, <code>NaN</code> is returned. If one of the operands
            is a non-zero number and the other is an infinity, an infinity with the appropriate sign
            is returned.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="numeric-divide" prefix="op">
      <fos:signatures>
         <fos:proto name="numeric-divide" return-type="xs:numeric">
            <fos:arg name="arg1" type="xs:numeric"/>
            <fos:arg name="arg2" type="xs:numeric"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="div" types="numeric"
         >Defines the semantics of the <code>div</code> operator when
         applied to two numeric values.</fos:opermap>
      <fos:summary>
         <p>Returns the arithmetic quotient of its operands: (<code>$arg1 div $arg2</code>).</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="op.numeric"/>.</p>
         <p>As a special case, if the types of both <code>$arg1</code> and <code>$arg2</code> are
               <code>xs:integer</code>, then the return type is <code>xs:decimal</code>.</p>

      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="AR" code="0001"
               /> for <code>xs:decimal</code>
            and <code>xs:integer</code> operands, if the divisor is (positive or negative) zero.</p>
      </fos:errors>
      <fos:notes>
         <p>For <code>xs:float</code> and <code>xs:double</code> operands, floating point division
            is performed as specified in <bibref
               ref="ieee754-2008"
               />. A positive number divided by
            positive zero returns <code>INF</code>. A negative number divided by positive zero
            returns <code>-INF</code>. Division by negative zero returns <code>-INF</code> and
               <code>INF</code>, respectively. Positive or negative zero divided by positive or
            negative zero returns <code>NaN</code>. Also, <code>INF</code> or <code>-INF</code>
            divided by <code>INF</code> or <code>-INF</code> returns <code>NaN</code>.</p>
      </fos:notes>

   </fos:function>
   <fos:function name="numeric-integer-divide" prefix="op">
      <fos:signatures>
         <fos:proto name="numeric-integer-divide" return-type="xs:integer">
            <fos:arg name="arg1" type="xs:numeric"/>
            <fos:arg name="arg2" type="xs:numeric"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="idiv" types="numeric"
         >Defines the semantics of the <code>idiv</code> operator when
         applied to two numeric values.</fos:opermap>
      <fos:summary>
         <p>Performs an integer division.</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="op.numeric"/>.</p>

         <p>If <code>$arg2</code> is <code>INF</code> or <code>-INF</code>, and <code>$arg1</code>
            is not <code>INF</code> or <code>-INF</code>, then the result is zero.</p>

         <p>Otherwise, subject to limits of precision and overflow/underflow conditions, the result
            is the largest (furthest from zero) <code>xs:integer</code> value <code>$N</code> such
            that the following expression is <code>true</code>:</p>

         <eg>abs($N * $arg2) le abs($arg1) 
               and compare($N * $arg2, 0) eq compare($arg1, 0).</eg>
         <note>
            <p>The second term in this condition ensures that the result has the correct sign.</p>
         </note>
         <p>The implementation may adopt a different algorithm provided that it is equivalent to
            this formulation in all cases where <termref
               def="implementation-dependent">implementation-dependent</termref> or <termref
               def="implementation-defined"
               >implementation-defined</termref> behavior does not affect the outcome, for example,
            the implementation-defined precision of the result of <code>xs:decimal</code>
            division.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="AR" code="0001"
            /> if the divisor is (positive
            or negative) zero.</p>
         <p>A dynamic error is raised <errorref class="AR" code="0002"
               /> if either operand is
               <code>NaN</code> or if <code>$arg1</code> is <code>INF</code> or
            <code>-INF</code>.</p>
      </fos:errors>
      <fos:notes>
         <p>Except in situations involving errors, loss of precision, or overflow/underflow, the
            result of <code>$a idiv $b</code> is the same as <code>($a div $b) cast as
               xs:integer</code>.</p>
         <p>The semantics of this function are different from integer division as defined in
            programming languages such as Java and C++.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-integer-divide(10,3)</fos:expression>
               <fos:result>3</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-integer-divide(3,-2)</fos:expression>
               <fos:result>-1</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-integer-divide(-3,2)</fos:expression>
               <fos:result>-1</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-integer-divide(-3,-2)</fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-integer-divide(9.0,3)</fos:expression>
               <fos:result>3</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-integer-divide(-3.5,3)</fos:expression>
               <fos:result>-1</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-integer-divide(3.0,4)</fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-integer-divide(3.1E1,6)</fos:expression>
               <fos:result>5</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-integer-divide(3.1E1,7)</fos:expression>
               <fos:result>4</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="numeric-mod" prefix="op">
      <fos:signatures>
         <fos:proto name="numeric-mod" return-type="xs:numeric">
            <fos:arg name="arg1" type="xs:numeric"/>
            <fos:arg name="arg2" type="xs:numeric"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="mod" types="numeric"
         >Defines the semantics of the <code>mod</code> operator when
         applied to two numeric values.</fos:opermap>
      <fos:summary>
         <p>Returns the remainder resulting from dividing <code>$arg1</code>, the dividend, by
               <code>$arg2</code>, the divisor. </p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="op.numeric"/>.</p>
         <p>The operation <code>a mod b</code> for operands that are <code>xs:integer</code> or
               <code>xs:decimal</code>, or types derived from them, produces a result such that
               <code>(a idiv b)*b+(a mod b)</code> is equal to <code>a</code> and the magnitude of
            the result is always less than the magnitude of <code>b</code>. This identity holds even
            in the special case that the dividend is the negative integer of largest possible
            magnitude for its type and the divisor is -1 (the remainder is 0). It follows from this
            rule that the sign of the result is the sign of the dividend.</p>

         <p> For <code>xs:float</code> and <code>xs:double</code> operands the following rules
            apply:</p>
         <ulist>
            <item>
               <p>If either operand is <code>NaN</code>, the result is <code>NaN</code>.</p>
            </item>
            <item>
               <p>If the dividend is positive or negative infinity, or the divisor is positive or
                  negative zero (0), or both, the result is <code>NaN</code>.</p>
            </item>
            <item>
               <p>If the dividend is finite and the divisor is an infinity, the result equals the
                  dividend.</p>
            </item>
            <item>
               <p>If the dividend is positive or negative zero and the divisor is finite, the result
                  is the same as the dividend.</p>
            </item>
            <item>
               <p>In the remaining cases, where neither positive or negative infinity, nor positive
                  or negative zero, nor <code>NaN</code> is involved, the result obeys <code>(a idiv
                     b)*b+(a mod b)</code> = <code>a</code>.
                  <!--float or double remainder r from a dividend n and a divisor d is defined by the mathematical relation r = n-(d * q) where q is an integer that is negative only if n/d is negative and positive only if n/d is positive, and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of n and d.  -->
                  Division is truncating division, analogous to integer division, not <bibref
                     ref="ieee754-2008"
                  /> rounding division i.e. additional digits are truncated,
                  not rounded to the required precision.</p>
            </item>
         </ulist>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="AR" code="0001"
               /> for <code>xs:integer</code>
            and <code>xs:decimal</code> operands, if <code>$arg2</code> is zero.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-mod(10,3)</fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-mod(6,-2)</fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-mod(4.5,1.2)</fos:expression>
               <fos:result>0.9</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>op:numeric-mod(1.23E2, 0.6E1)</fos:expression>
               <fos:result>3.0E0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="numeric-unary-plus" prefix="op">
      <fos:signatures>
         <fos:proto name="numeric-unary-plus" return-type="xs:numeric">
            <fos:arg name="arg" type="xs:numeric"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="+" types="numeric"
         >Defines the semantics of the unary <code>+</code> operator
         applied to a numeric value.</fos:opermap>
      <fos:summary>
         <p>Returns its operand with the sign unchanged: (<code>+ $arg</code>).</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="op.numeric"/>.</p>
         <p>The returned value is equal to <code>$arg</code>, and is an instance of
               <code>xs:integer</code>, <code>xs:decimal</code>, <code>xs:double</code>, or
               <code>xs:float</code> depending on the type of <code>$arg</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>Because function conversion rules are applied in the normal way, the unary
               <code>+</code> operator can be used to force conversion of an untyped node to a
            number: the result of <code>+@price</code> is the same as <code>xs:double(@price)</code>
            if the type of <code>@price</code> is <code>xs:untypedAtomic</code>.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="numeric-unary-minus" prefix="op">
      <fos:signatures>
         <fos:proto name="numeric-unary-minus" return-type="xs:numeric">
            <fos:arg name="arg" type="xs:numeric"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="-" types="numeric"
         >Defines the semantics of the unary <code>-</code> operator when
         applied to a numeric value.</fos:opermap>
      <fos:summary>
         <p>Returns its operand with the sign reversed: (<code>- $arg</code>).</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="op.numeric"/>.</p>
         <p>The returned value is an instance of <code>xs:integer</code>, <code>xs:decimal</code>,
               <code>xs:double</code>, or <code>xs:float</code> depending on the type of
               <code>$arg</code>.</p>
         <p>For <code>xs:integer</code> and <code>xs:decimal</code> arguments, <code>0</code> and
               <code>0.0</code> return <code>0</code> and <code>0.0</code>, respectively. For
               <code>xs:float</code> and <code>xs:double</code> arguments, <code>NaN</code> returns
               <code>NaN</code>, <code>0.0E0</code> returns <code>-0.0E0</code> and vice versa.
               <code>INF</code> returns <code>-INF</code>. <code>-INF</code> returns
               <code>INF</code>.</p>
      </fos:rules>
   </fos:function>
   <fos:function name="numeric-equal" prefix="op" diff="chg" at="A">
      <fos:signatures>
         <fos:proto name="numeric-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:numeric"/>
            <fos:arg name="arg2" type="xs:numeric"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="numeric" other-operators="ne le ge"
         >Defines the semantics of
         the <code>eq</code> operator when applied to two numeric values, and is also used in defining the
         semantics of <code>ne</code>, <code>le</code> and <code>ge</code>.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if and only if the value of <code>$arg1</code> is equal to the value of
               <code>$arg2</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="op.numeric"/> and <specref ref="comp.numeric"/>.</p>
      </fos:rules>
      <fos:notes>
         <p>For <code>xs:float</code> and <code>xs:double</code> values, positive zero and negative
            zero compare equal. <code>INF</code> equals <code>INF</code> and <code>-INF</code>
            equals <code>-INF</code>. If <code>$arg1</code> or <code>$arg2</code> is
            <code>NaN</code>, the function returns <code>false</code>.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="numeric-less-than" prefix="op" diff="chg" at="A">
      <fos:signatures>
         <fos:proto name="numeric-less-than" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:numeric"/>
            <fos:arg name="arg2" type="xs:numeric"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="lt" types="numeric" other-operators="le gt ge"
            >Defines the semantics of the
         <code>lt</code> operator when applied to two numeric values, and is also used in defining the
         semantics of <code>le</code>, <code>gt</code>, and <code>ge</code>.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if and only if <code>$arg1</code> is numerically less than
               <code>$arg2</code>. </p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="op.numeric"/> and <specref ref="comp.numeric"/>.</p>
      </fos:rules>
      <fos:notes>
         <p>For <code>xs:float</code> and <code>xs:double</code> values, positive infinity is
            greater than all other non-<code>NaN</code> values; negative infinity is less than all
            other non-<code>NaN</code> values. Positive and negative zero compare equal.
            If <code>$arg1</code> or <code>$arg2</code> is
            <code>NaN</code>, the function returns <code>false</code>.</p>
      </fos:notes>
   </fos:function>

   <fos:function name="abs" prefix="fn">
      <fos:signatures>
         <fos:proto name="abs" return-type="xs:numeric?">
            <fos:arg name="value" type="xs:numeric?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the absolute value of <code>$value</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="numeric-value-functions"/>.</p>
         <p>If <code>$value</code> is negative the function returns <code>-$value</code>, otherwise it
            returns <code>$value</code>.</p>
         <p>For the four types <code>xs:float</code>,
               <code>xs:double</code>, <code>xs:decimal</code> and <code>xs:integer</code>, it is
            guaranteed that if the type of <code>$value</code> is an instance of type <var>T</var> then
            the result will also be an instance of <var>T</var>. The result <rfc2119>may</rfc2119>
            also be an instance of a type derived from one of these four by restriction. For example, if
            <code>$value</code> is an instance of <code>xs:positiveInteger</code> then the value of
            <code>$value</code>
            <rfc2119>may</rfc2119> be returned unchanged.</p>
         <p>For <code>xs:float</code> and <code>xs:double</code> arguments, if the argument is
            positive zero or negative zero, then positive zero is returned. If the argument is
            positive or negative infinity, positive infinity is returned.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>abs(10.5)</fos:expression>
               <fos:result>10.5</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>abs(-10.5)</fos:expression>
               <fos:result>10.5</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>abs(-math:log(0))</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="ceiling" prefix="fn">
      <fos:signatures>
         <fos:proto name="ceiling" return-type="xs:numeric?">
            <fos:arg name="value" type="xs:numeric?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Rounds <code>$value</code> upwards to a whole number.</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="numeric-value-functions"/>.</p>
         <p>The function returns the smallest (closest to negative infinity) number with no
            fractional part that is not less than <code>$value</code>.</p>
         <p>For the four types <code>xs:float</code>,
            <code>xs:double</code>, <code>xs:decimal</code> and <code>xs:integer</code>, it is
            guaranteed that if the type of <code>$value</code> is an instance of type <var>T</var> then
            the result will also be an instance of <var>T</var>. The result <rfc2119>may</rfc2119>
            also be an instance of a type derived from one of these four by restriction. For example, if
         <code>$value</code> is an instance of <code>xs:decimal</code> then the result <rfc2119>may</rfc2119>
         be an instance of <code>xs:integer</code>.</p>
         <p>For <code>xs:float</code> and <code>xs:double</code> arguments, if the argument is
            positive zero, then positive zero is returned. If the argument is negative zero, then
            negative zero is returned. If the argument is less than zero and greater than -1,
            negative zero is returned. If the argument is positive or negative infinity, 
            the value of the argument is returned.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>ceiling(10.5)</fos:expression>
               <fos:result>11</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>ceiling(-10.5)</fos:expression>
               <fos:result>-10</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>ceiling(math:log(0))</fos:expression>
               <fos:result>-xs:double('INF')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="floor" prefix="fn">
      <fos:signatures>
         <fos:proto name="floor" return-type="xs:numeric?">
            <fos:arg name="value" type="xs:numeric?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Rounds <code>$value</code> downwards to a whole number.</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="numeric-value-functions"/>.</p>
         <p>The function returns the largest (closest to positive infinity) number with no
            fractional part that is not greater than <code>$value</code>.</p>
         <p>For the four types <code>xs:float</code>,
         <code>xs:double</code>, <code>xs:decimal</code> and <code>xs:integer</code>, it is
         guaranteed that if the type of <code>$value</code> is an instance of type <var>T</var> then
         the result will also be an instance of <var>T</var>. The result <rfc2119>may</rfc2119>
         also be an instance of a type derived from one of these four by restriction. For example, if
         <code>$value</code> is an instance of <code>xs:decimal</code> then the result <rfc2119>may</rfc2119>
         be an instance of <code>xs:integer</code>.</p>
         <p>For <code>xs:float</code> and <code>xs:double</code> arguments, if the argument is
            positive zero, then positive zero is returned. If the argument is negative zero, then
            negative zero is returned. If the argument is positive or negative infinity, 
            the value of the argument is returned.</p>

      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>floor(10.5)</fos:expression>
               <fos:result>10</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>floor(-10.5)</fos:expression>
               <fos:result>-11</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>math:log(0) => floor()</fos:expression>
               <fos:result>-xs:double('INF')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="round" prefix="fn">
      <fos:signatures>
         <fos:proto name="round" return-type="xs:numeric?">
            <fos:arg name="value" type="xs:numeric?"/>
            <fos:arg name="precision" type="xs:integer" default="0"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Rounds a value to a specified number of decimal places, rounding upwards if two such
            values are equally near.</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="numeric-value-functions"/>.</p>
         <p>The function returns the nearest (that is, numerically closest) value to
               <code>$value</code> that is a multiple of ten to the power of minus
               <code>$precision</code>. If two such values are equally near (for example, if the
            fractional part in <code>$value</code> is exactly .5), the function returns the one that
            is closest to positive infinity.</p>
         <p>For the four types <code>xs:float</code>,
            <code>xs:double</code>, <code>xs:decimal</code> and <code>xs:integer</code>, it is
            guaranteed that if the type of <code>$value</code> is an instance of type <var>T</var> then
            the result will also be an instance of <var>T</var>. The result <rfc2119>may</rfc2119>
            also be an instance of a type derived from one of these four by restriction. For example, if
            <code>$value</code> is an instance of <code>xs:decimal</code> and <code>$precision</code> is 
            less than one, then the result <rfc2119>may</rfc2119>
            be an instance of <code>xs:integer</code>.</p>
         <p>The single-argument version of this function produces the same result as the
            two-argument version with <code>$precision=0</code> (that is, it rounds to a whole
            number).</p>
         <p>When <code>$value</code> is of type <code>xs:float</code> and <code>xs:double</code>:</p>
         <olist>
            <item>
               <p>If <code>$value</code> is <code>NaN</code>, positive or negative zero, or positive or negative
                  infinity, then the result is the same as the argument.</p>
            </item>
            <item>
               <p>For other values, the argument is cast to <code>xs:decimal</code> using an
                  implementation of <code>xs:decimal</code> that imposes no limits on the number of
                  digits that can be represented. The function is applied to this
                     <code>xs:decimal</code> value, and the resulting <code>xs:decimal</code> is
                  cast back to <code>xs:float</code> or <code>xs:double</code> as appropriate to
                  form the function result. If the resulting <code>xs:decimal</code> value is zero,
                  then positive or negative zero is returned according to the sign of
                     <code>$value</code>.</p>
            </item>
         </olist>

      </fos:rules>
      <fos:notes>
         <p>This function is typically used with a non-zero <code>$precision</code> in financial
            applications where the argument is of type <code>xs:decimal</code>. For arguments of
            type <code>xs:float</code> and <code>xs:double</code> the results may be
            counter-intuitive. For example, consider <code>round(35.425e0, 2)</code>. The result is
            not <code>35.43</code>, as might be expected, but <code>35.42</code>.
            This is because the <code>xs:double</code> written as <code>35.425e0</code>
            has an exact value equal to <code>35.42499999999...</code>, which is closer to
            <code>35.42</code> than to <code>35.43</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>round(2.5)</fos:expression>
               <fos:result>3.0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>round(2.4999)</fos:expression>
               <fos:result>2.0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>round(-2.5)</fos:expression>
               <fos:result>-2.0</fos:result>
               <fos:postamble>Not the possible alternative, <code>-3</code></fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0">
               <fos:expression>round(1.125, 2)</fos:expression>
               <fos:result>1.13</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0">
               <fos:expression>round(8452, -2)</fos:expression>
               <fos:result>8500</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0">
               <fos:expression>round(3.1415e0, 2)</fos:expression>
               <fos:result>3.14e0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0">
               <fos:expression>math:log(0) => round()</fos:expression>
               <fos:result>-xs:double('INF')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="round-half-to-even" prefix="fn">
      <fos:signatures>
         <fos:proto name="round-half-to-even" return-type="xs:numeric?">
            <fos:arg name="value" type="xs:numeric?"/>
            <fos:arg name="precision" type="xs:integer" default="0"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Rounds a value to a specified number of decimal places, rounding to make the last digit
            even if two such values are equally near.</p>
      </fos:summary>
      <fos:rules>
         <p>General rules: see <specref ref="numeric-value-functions"/>.</p>
         <p>The function returns the nearest (that is, numerically closest) value to
               <code>$value</code> that is a multiple of ten to the power of minus
               <code>$precision</code>. If two such values are equally near (e.g. if the fractional
            part in <code>$value</code> is exactly .500...), the function returns the one whose least
            significant digit is even.</p>
         <p>For the four types <code>xs:float</code>,
            <code>xs:double</code>, <code>xs:decimal</code> and <code>xs:integer</code>, it is
            guaranteed that if the type of <code>$value</code> is an instance of type <var>T</var> then
            the result will also be an instance of <var>T</var>. The result <rfc2119>may</rfc2119>
            also be an instance of a type derived from one of these four by restriction. For example, if
            <code>$value</code> is an instance of <code>xs:decimal</code> and <code>$precision</code>
            is less than one, then the result <rfc2119>may</rfc2119>
            be an instance of <code>xs:integer</code>.</p>
         <p diff="chg" at="2023-01-17"> The one-argument form of this function produces the same result as the two-argument form
            with <code>$precision=0</code>.</p>
         <p>For arguments of type <code>xs:float</code> and <code>xs:double</code>:</p>
         <olist>
            <item>
               <p>If the argument is <code>NaN</code>, positive or negative zero, or positive or
                  negative infinity, then the result is the same as the argument.</p>
            </item>
            <item>
               <p>In all other cases, the argument is cast to <code>xs:decimal</code> using an
                  implementation of <code>xs:decimal</code> that imposes no limits on the number of digits that
                  can be represented. The function is applied to this <code>xs:decimal</code> value,
                  and the resulting <code>xs:decimal</code> is cast back to <code>xs:float</code> or
                     <code>xs:double</code> as appropriate to form the function result. If the
                  resulting <code>xs:decimal</code> value is zero, then positive or negative zero is
                  returned according to the sign of the original argument.</p>
            </item>
         </olist>

      </fos:rules>
      <fos:notes>
         <p>This function is typically used in financial applications where the argument is of type
               <code>xs:decimal</code>. For arguments of type <code>xs:float</code> and
               <code>xs:double</code> the results may be counter-intuitive. For example, consider
               <code>round-half-to-even(xs:float(150.015), 2)</code>.
               The result is not <code>150.02</code> as might be expected, but <code>150.01</code>.
               This is because the conversion of the
               <code>xs:float</code> value represented by the literal <code>150.015</code> to an
               <code>xs:decimal</code> produces the <code>xs:decimal</code>
               value <code>150.014999389...</code>, which is closer to
               <code>150.01</code> than to <code>150.02</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>round-half-to-even(0.5)</fos:expression>
               <fos:result>0.0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>round-half-to-even(1.5)</fos:expression>
               <fos:result>2.0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>round-half-to-even(2.5)</fos:expression>
               <fos:result>2.0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>round-half-to-even(3.567812e+3, 2)</fos:expression>
               <fos:result>3567.81e0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>round-half-to-even(4.7564e-3, 2)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>round-half-to-even(35612.25, -2)</fos:expression>
               <fos:result>35600</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>math:log(0) => round-half-to-even()</fos:expression>
               <fos:result>-xs:double('INF')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="format-integer" prefix="fn">
      <fos:signatures>
         <fos:proto name="format-integer" return-type="xs:string">
            <fos:arg name="value" type="xs:integer?"/>
            <fos:arg name="picture" type="xs:string"/>
            <fos:arg name="language" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="default-language">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Formats an integer according to a given picture string, using the conventions of a given
            natural language if specified.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is an empty sequence, the function returns a zero-length
            string.</p>
         <p>In all other cases, the <code>$picture</code> argument describes the format in which
               <code>$value</code> is output.</p>
         <p>The rules that follow describe how non-negative numbers are output. If the value of
               <code>$value</code> is negative, the rules below are applied to the absolute value of
               <code>$value</code>, and a minus sign is prepended to the result.</p>

         <p>The value of <code>$picture</code> consists of the following, in order:</p>
         <olist>
            <item><p diff="add" at="2023-04-25">An optional radix, which is an integer in the range 2 to 36, written using ASCII
            digits (<code>0-9</code>) without any leading zero;</p></item>
            <item><p diff="add" at="2023-04-25">A circumflex (<code>^</code>), which is present if the radix is present, and absent otherwise.</p>
               <p diff="add" at="2023-04-25">A circumflex is recognized as marking the presence of a radix only
                  if (a) it is immediately preceded by an integer
                  in the range 2 to 36, and (b) it is
                  followed (somewhere within the primary format token) by an <code>"X"</code>
                  or <code>"x"</code>. In other cases, the circumflex is treated as a grouping separator.
                  For example, the picture <code>9^000</code> outputs the number
                  2345 as <code>"2^345"</code>, whereas <code>9^XXX</code> outputs <code>"4451"</code>.
                  This rule is to ensure backwards compatibility.</p>
            </item>
            <item><p>A primary format token. This is always present and
               <rfc2119>must not</rfc2119> be zero-length.</p></item>
            <item><p>An optional format modifier.</p>
               <p>If the string contains one or more
                  semicolons then the last semicolon is taken as terminating the primary
                  format token, and everything that follows is taken as the format modifier; if the string
                  contains no semicolon then 
                  the format modifier is taken to be absent (which is equivalent to supplying a
                  zero-length string).</p></item>
         </olist>
         

         <p diff="add" at="2023-04-07">If a radix is present, then the primary format token must follow the
            rules for a <var>digit-pattern</var>.</p>
         
         
         <p>The primary format token is classified as one of the following:</p>
         <olist>
            <item>
               <p>A <var>digit-pattern</var> made up of <var>optional-digit-signs</var>,
                     <var>mandatory-digit-signs</var>, and <var>grouping-separator-signs</var>.</p>

               <ulist>
                  <item>
                     <p>The <var>optional-digit-sign</var> is the character <code>#</code>.</p>
                  </item>
                  <item>
                     <p><phrase diff="add" at="2023-04-07">If the radix is absent, then</phrase>
                        a <var>mandatory-digit-sign</var> is a <termref def="character"
                           >character</termref> in Unicode category <var>Nd</var>. All
                           <var>mandatory-digit-signs</var> within the format token
                           <rfc2119>must</rfc2119> be from the same digit family, where a digit
                        family is a sequence of ten consecutive characters in Unicode category <var>Nd</var>,
                        having digit values <code>0</code> through <code>9</code>.
                        Within the format token, these digits are
                        interchangeable: a three-digit number may thus be indicated equivalently by
                        <code>000</code>, <code>001</code>, or <code>999</code>.</p>
                     <p>If the primary format token contains at least one Unicode digit,
                        then the primary format token is taken
                        as a decimal digit pattern, and in this case it <rfc2119>must</rfc2119> match the
                        regular expression <code>^((\p{Nd}|#|[^\p{N}\p{L}])+?)$</code>. If it contains a
                        digit but does not match this pattern, a dynamic error is raised <errorref
                           class="DF" code="1310"/>.</p>
                  </item>
                  <item>
                     <p><phrase diff="add" at="2023-04-07">If the radix (call it <var>R</var>) is 
                        present (including the case where an explicit radix of 10 is used), then</phrase>
                        the character used as the <var>mandatory-digit-sign</var> is either <code>"x"</code>
                        or <code>"X"</code>. If any <var>mandatory-digit-sign</var> is upper-case <code>"X"</code>, then all
                        <var>mandatory-digit-signs</var> must be upper-case <code>"X"</code>. The digit family
                        used in the output comprises the first <var>R</var> characters of the
                        alphabet <code>0123456789abcdefghijklmnopqrstuvwxyz</code>, but using upper-case 
                        letters in place of lower-case if an upper-case <code>"X"</code> is used
                        as the <var>mandatory-digit-sign</var>.</p>
                     <p diff="add" at="2023-04-25">In this case the primary format token <rfc2119>must</rfc2119> match the
                        regular expression <code>^(([Xx#]|[^\p{N}\p{L}])+?)$</code></p>
                  </item>
                  <item>
                     <p>a <var>grouping-separator-sign</var> is a non-alphanumeric character, that
                        is a <termref
                           def="character"
                           >character</termref> whose Unicode category is
                        other than <var>Nd</var>, <var>Nl</var>, <var>No</var>, <var>Lu</var>, <var>Ll</var>, 
                        <var>Lt</var>, <var>Lm</var> or <var>Lo</var>.</p>
                  </item>
               </ulist>

               

               <note>
                  <p>If a semicolon is to be used as a grouping separator, then the primary format
                     token as a whole must be followed by another semicolon, to ensure that the
                     grouping separator is not mistaken as a separator between the primary format
                     token and the format modifier.</p>
               </note>


               <p>There <rfc2119>must</rfc2119> be at least one <var>mandatory-digit-sign</var>.
                  There may be zero or more <var>optional-digit-signs</var>, and (if present) these
                     <rfc2119>must</rfc2119> precede all <var>mandatory-digit-signs</var>. There may
                  be zero or more <var>grouping-separator-signs</var>. A
                     <var>grouping-separator-sign</var>
                  <rfc2119>must not</rfc2119> appear at the start or end of the
                     <var>digit-pattern</var>, nor adjacent to another
                     <var>grouping-separator-sign</var>.</p>

               <p>The corresponding output is a number in the specified radix, using this digit family, with
                  at least as many digits as there are <var>mandatory-digit-signs</var> in the
                  format token. Thus:</p>
                  <ulist>
                     <item><p>A format token <code>1</code> generates the sequence <code>0 1
                        2 ... 10 11 12 ...</code></p></item>
                     <item><p>A format token <code>01</code> (or equivalently,
                        <code>00</code> or <code>99</code>) generates the sequence <code>00 01 02 ...
                           09 10 11 12 ... 99 100 101</code></p></item>
                     <item><p>A format token of <code>&amp;#x661;</code>
                        (Arabic-Indic digit one) generates the sequence <code>١</code> then <code>٢</code>
                        then <code>٣</code> ...</p></item>
                     <item><p>A format token of <code>16^xx</code> generates the sequence <code>00 01 02 03
                     ... 08 09 0a 0b 0c 0d 0e 0f 10 11 ...</code></p></item>
                     <item><p>A format token of <code>16^X</code> generates the sequence <code>0 1 2 3
                        ... 8 9 A B C D E F 10 11 ...</code></p></item>
                  </ulist>

               <p>The <var>grouping-separator-signs</var> are handled as follows:</p>

               <olist>
                  <item>
                     <p>The position of
                        grouping separators within the format token, counting backwards from the last
                        digit, indicates the position of grouping separators to appear within the
                        formatted number, and the character used as the <var>grouping-separator-sign</var>
                        within the format token indicates the character to be used as the corresponding
                        grouping separator in the formatted number.
                     </p>
                  </item>
                  <item>
                     <p>More specifically, the <term>position</term> of a grouping separator is
                        the number of <var>optional-digit-signs</var> and <var>mandatory-digit-signs</var> appearing
                        between the grouping separator and the right-hand end of the primary format token.</p>
                  </item>
                  <item>
                     <p>Grouping separators are defined to be <term>regular</term> if the following conditions apply:</p>
                     <olist>
                        <item>
                           <p>There is at least one grouping separator.</p>
                        </item>
                        <item>
                           <p>Every grouping separator is the same character (call it <var>C</var>).</p>
                        </item>
                        <item>
                           <p>There is a positive integer <var>G</var> (the grouping size) such that:</p>
                           <olist>
                              <item>
                                 <p>The position of every grouping separator is an integer multiple of <var>G</var>, and</p>
                              </item>
                              <item>
                                 <p>Every positive integer multiple of <var>G</var> that is less than the number of 
                              <var>optional-digit-signs</var> and <var>mandatory-digit-signs</var> in the primary format token
                              is the position of a grouping separator.</p>
                              </item>
                           </olist>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>The <term>grouping separator template</term> is a (possibly infinite) set of (position, character) pairs.</p>
                  </item>
                  <item>
                     <p>If grouping separators are regular, then the grouping separator template contains one pair of the form <code>(n×G, C)</code>
                     for every positive integer <var>n</var> where <var>G</var> is the grouping size and <var>C</var> is the grouping character.</p>
                  </item>
                  <item>
                     <p>Otherwise (when grouping separators are not regular), the grouping separator template contains one pair of the form
                     <code>(P, C)</code> for every grouping separator found in the primary formatting token, where <var>C</var> is the grouping
                     separator character and <var>P</var> is its position.</p>
                  </item>
                  <item>
                     <note>
                        <p>If there are no grouping separators, then the grouping separator template is an empty set.</p>
                     </note>
                  </item>
               </olist>


               <p>The number is formatted as follows:</p>

               <olist>
                  <item>
                     <p>Let <var>S/1</var> be the result of formatting the supplied number 
                        <phrase diff="chg" at="2023-04-07">in the appropriate radix:
                        for radix 10 this will be the value obtained</phrase> by casting
                  it to <code>xs:string</code>.</p>
                  </item>
                  <item>
                     <p>Let <var>S/2</var> be the result of padding <var>S/1</var> on the left with as many leading zeroes
                  as are needed to ensure that it contains at least as many digits as the number of <var>mandatory-digit-signs</var>
                  in the primary format token.</p>
                  </item>
                  <item>
                     <p>Let <var>S/3</var> be the result of replacing all decimal digits (0-9) in <var>S/2</var> with the corresponding
                     digits from the selected digit family. <phrase diff="add" at="2023-04-27">(This has no effect when the selected digit family uses ASCII digits (0-9),
                     which will always be the case if a radix is specified.)</phrase></p>
                  </item>
                  <item>
                     <p>Let <var>S/4</var> be the result of inserting grouping separators into <var>S/3</var>: for every (position 
                     <var>P</var>, character <var>C</var>) pair in the grouping separator template where <var>P</var> is less than the number
                  of digits in <var>S/3</var>, insert character <var>C</var> into <var>S/3</var> at position <var>P</var>, counting from 
                  the right-hand end.</p>
                  </item>
                  <item>
                     <p>Let <var>S/5</var> be the result of converting <var>S/4</var> into ordinal form, if an ordinal modifier
                  is present, as described below.</p>
                  </item>
                  <item>
                     <p>The result of the function is then <var>S/5</var>.</p>
                  </item>
               </olist>


            </item>




            <item>
               <p>The format token <code>A</code>, which generates the sequence <code>A B C ... Z AA
                     AB AC...</code>.</p>
            </item>
            <item>
               <p>The format token <code>a</code>, which generates the sequence <code>a b c ... z aa
                     ab ac...</code>.</p>
            </item>
            <item>
               <p>The format token <code>i</code>, which generates the sequence <code>i ii iii iv v
                     vi vii viii ix x ...</code>.</p>
            </item>
            <item>
               <p>The format token <code>I</code>, which generates the sequence <code>I II III IV V
                     VI VII VIII IX X ...</code>.</p>
            </item>
            <item>
               <p>The format token <code>w</code>, which generates numbers written as lower-case
                  words, for example in English, <code>one two three four ...</code>
               </p>
            </item>
            <item>
               <p>The format token <code>W</code>, which generates numbers written as upper-case
                  words, for example in English, <code>ONE TWO THREE FOUR ...</code>
               </p>
            </item>
            <item>
               <p>The format token <code>Ww</code>, which generates numbers written as title-case
                  words, for example in English, <code>One Two Three Four ...</code>
               </p>
            </item>
            <item>
               <p>Any other format token, which indicates a numbering sequence in which that token
                  represents the number 1 (one) (but see the note below).
                  <!-- Where possible (given the constraint that format tokens
						must be alphanumeric, and that they must be distinct) the format token
						used to represent a numbering sequence should be the same as the representation
						of the number 1 (one) in that sequence.-->
                  It is <termref
                     def="implementation-defined"
                     >implementation-defined</termref> which
                  numbering sequences, additional to those listed above, are supported. If an
                  implementation does not support a numbering sequence represented by the given
                  token, it <rfc2119>must</rfc2119> use a format token of <code>1</code>.</p>
               <note>
                  <p>In some traditional numbering sequences additional signs are added to denote
                     that the letters should be interpreted as numbers, for example, in ancient Greek
                     the <emph>dexia keraia</emph>
                     <phrase role="normalize-nfc"
                        >(x0374, &#x0374;)</phrase> and sometimes the 
                     <emph>aristeri keraia</emph>
                     <phrase role="normalize-nfc">(x0375, &#x0375;)</phrase>. These should not be
                     included in the format token.
                  </p>
               </note>
            </item>
         </olist>
         <p>For all format tokens other than a <var>digit-pattern</var>, there 
            <rfc2119>may</rfc2119> be <termref
               def="implementation-defined"
               >implementation-defined</termref> lower and upper bounds on the range of numbers that
            can be formatted using this format token; indeed, for some numbering sequences there may
            be intrinsic limits. For example, the format token <code>&amp;#x2460;</code> (circled
            digit one, ①) has a range imposed by the Unicode character repertoire &#x2014; <phrase>zero to 20</phrase>
            in Unicode versions prior to <phrase>3.2</phrase>, or <phrase>zero to 50</phrase> in subsequent versions. For the numbering
            sequences described above any upper bound imposed by the implementation <rfc2119>must
               not</rfc2119> be less than 1000 (one thousand) and any lower bound must not be
            greater than 1. Numbers that fall outside this range <rfc2119>must</rfc2119> be
            formatted using the format token <code>1</code>.</p>
         <p>The above expansions of numbering sequences for format tokens such as <code>a</code> and
               <code>i</code> are indicative but not prescriptive. There are various conventions in
            use for how alphabetic sequences continue when the alphabet is exhausted, and differing
            conventions for how roman numerals are written (for example, <code>IV</code> versus
               <code>IIII</code> as the representation of the number 4). Sometimes alphabetic
            sequences are used that omit letters such as <code>i</code> and <code>o</code>. This
            specification does not prescribe the detail of any sequence other than those sequences
            consisting entirely of decimal digits.</p>
         <p>Many numbering sequences are language-sensitive. This applies especially to the sequence
            selected by the tokens <code>w</code>, <code>W</code> and <code>Ww</code>. It also
            applies to other sequences, for example different languages using the Cyrillic alphabet
            use different sequences of characters, each starting with the letter #x410 (Cyrillic
            capital letter A). In such cases, the <code>$language</code> argument specifies which
            language conventions are to be used. If the argument is specified, the value
               <rfc2119>should</rfc2119> be either an empty sequence or a value that would be valid
            for the <code>xml:lang</code> attribute (see <bibref
               ref="xml"
            />). Note that this
            permits the identification of sublanguages based on country codes (from ISO 3166-1) as
            well as identification of dialects and regions within a country.</p>
         <p>The set of languages for which numbering is supported is <termref
               def="implementation-defined"
               >implementation-defined</termref>. If the <code>$language</code> argument is absent, or is
            set to an empty sequence, or is invalid, or is not a language supported by the
            implementation, then the number is formatted using the default language from the dynamic
            context. </p>
         <p>The format modifier <rfc2119>must</rfc2119> be a string that matches the regular
            expression <code>^([co](\(.+\))?)?[at]?$</code>. That is, if it is present it must
            consist of one or more of the following, in order:</p>
         <ulist>
            <item>
               <p>either <code>c</code> or <code>o</code>, optionally followed by a sequence of
                  characters enclosed between parentheses, to indicate cardinal or ordinal numbering
                  respectively, the default being cardinal numbering</p>
            </item>
            <item>
               <p>either <code>a</code> or <code>t</code>, to indicate alphabetic or traditional
                  numbering respectively, the default being <termref
                     def="implementation-defined">implementation-defined</termref>.</p>
            </item>
         </ulist>
         <p>If the <code>o</code> modifier is present, this indicates a request to output ordinal
            numbers rather than cardinal numbers. For example, in English, when used with the format
            token <code>1</code>, this outputs the sequence <code>1st 2nd 3rd 4th ...</code>, and
            when used with the format token <code>w</code> outputs the sequence <code>first second
               third fourth ...</code>.</p>
         <p>The string of characters between the parentheses, if present, is used to select between
            other possible variations of cardinal or ordinal numbering sequences. The interpretation
            of this string is <termref
               def="implementation-defined"
            >implementation-defined</termref>. No error occurs if the implementation does not
            define any interpretation for the defined string.</p>


         <p>It is <termref def="implementation-defined"
            >implementation-defined</termref> what
            combinations of values of the format token, the language, and the cardinal/ordinal
            modifier are supported. If ordinal numbering is not supported for the combination of the
            format token, the language, and the string appearing in parentheses, the request is
            ignored and cardinal numbers are generated instead.</p>

         <p>The use of the <code>a</code> or <code>t</code> modifier disambiguates between numbering
            sequences that use letters. In many languages there are two commonly used numbering
            sequences that use letters. One numbering sequence assigns numeric values to letters in
            alphabetic sequence, and the other assigns numeric values to each letter in some other
            manner traditional in that language. In English, these would correspond to the numbering
            sequences specified by the format tokens <code>a</code> and <code>i</code>. In some
            languages, the first member of each sequence is the same, and so the format token alone
            would be ambiguous. In the absence of the <code>a</code> or <code>t</code> modifier, the
            default is <termref
               def="implementation-defined">implementation-defined</termref>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DF" code="1310"
               /> if the format token is
            invalid, that is, if it violates any mandatory rules (indicated by an emphasized
               <rfc2119>must</rfc2119> or <rfc2119>required</rfc2119> keyword in the above rules).
            For example, the error is raised if the primary format token contains a digit but does
            not match the required regular expression.</p>
      </fos:errors>
      <fos:notes>
         <olist>
            <item>
               <p>Note the careful distinction between conditions that are errors and conditions where
               fallback occurs. The principle is that an error in the syntax of the format picture will
               be reported by all processors, while a construct that is recognized by some
               implementations but not others will never result in an error, but will instead cause a
               fallback representation of the integer to be used.</p>
            </item>
            <item>
               <p>The following notes apply when a <var>digit-pattern</var> is used:</p>
               <olist>
                  <item>
                     <p>If <var>grouping-separator-signs</var>
                     appear at regular intervals within the format token, then the sequence is extrapolated to
                     the left, so grouping separators will be used in the formatted number at every
                     multiple of <var>N</var>. For example, if the format token is <code>0'000</code>
                     then the number one million will be formatted as <code>1'000'000</code>, while the
                     number fifteen will be formatted as <code>0'015</code>.</p>
                  </item>
                  <item>
                     <p>The only purpose of <var>optional-digit-signs</var> is to mark the position of
                     <var>grouping-separator-signs</var>. For example, if the format token is
                     <code>#'##0</code> then the number one million will be formatted as
                     <code>1'000'000</code>, while the number fifteen will be formatted as
                     <code>15</code>. A grouping separator is included in the formatted number only
                     if there is a digit to its left, which will only be the case if either (a) the
                     number is large enough to require that digit, or (b) the number of
                     <var>mandatory-digit-signs</var> in the format token requires insignificant
                     leading zeros to be present.</p>
                  </item>
                  <item>
                     <p>Grouping separators are <emph>not</emph> designed for effects such as
                     formatting a US telephone number as <code>(365)123-9876</code>. In general they are not 
                     suitable for such purposes because (a) only single characters are allowed, and (b) they
                     cannot appear at the beginning or end of the number.</p>
                  </item>
                  <item>
                     <p>Numbers will never be truncated. Given the <var>digit-pattern</var>
                        <code>01</code>, the number three hundred will be output as <code>300</code>,
                     despite the absence of any <var>optional-digit-sign</var>.</p>
                  </item>

               </olist>
            </item>
            <item>
               <p>The following notes apply when ordinal numbering is selected using the <code>o</code> modifier.</p>
               <p>In some languages, the form of numbers (especially ordinal numbers) varies depending 
                  on the grammatical context: they may have different genders and may decline with the 
                  noun that they qualify. In such cases the string appearing in parentheses after the 
                  letter <code>c</code> or <code>o</code> may be used to indicate the variation of the 
                  cardinal or ordinal number required.</p>

               <p>The way in which the variation is indicated will depend on the conventions of the language.</p>

               <p>For inflected languages that vary the ending of the word, the approach recommended 
                     in the previous version of this specification was to indicate the required ending, 
                     preceded by a hyphen: for example in German, appropriate values might be 
                     <code>o(-e)</code>, <code>o(-er)</code>, <code>o(-es)</code>, <code>o(-en)</code>. 
                  </p>
               <p>Another approach, which might usefully be adopted by an implementation based on the 
                     open-source ICU localization library <bibref
                     ref="ICU"
                     />, or any other library making use of the 
                     Unicode Common Locale Data Repository <bibref
                     ref="CLDR"
                     />, is to allow the value in parentheses 
                     to be the name of a registered numbering rule set for the language in question, 
                     conventionally prefixed with a percent sign: for example, 
                     <code>o(%spellout-ordinal-masculine)</code>, or <code>c(%spellout-cardinal-year)</code>.
                  </p>

            </item>
            <item>
               <p>The following notes apply when the primary format token is neither a <var>digit-pattern</var>
               nor one of the seven other defined format tokens (A, a, i, I, w, W, Ww), but is an arbitrary token
               representing the number 1:</p>
               <p>Unexpected results may occur for traditional numbering. For example, in an
                  implementation that supports traditional numbering system in Greek, the example
                     <code>format-integer(19, "α;t")</code> might return <code>δπιιιι</code> or
                     <code>ιθ</code>, depending upon whether the ancient acrophonic or late antique
                  alphabetic system is supported. </p>
               <p>Unexpected results may also occur for alphabetic numbering. For example, in an
                  implementation that supports alphabetic numbering system in Greek, someone
                  writing <code>format-integer(19, "α;a")</code> might expect the nineteenth Greek
                  letter, #x3C4 <code>τ</code>, but the implementation might return the eighteenth one, 
                  #x3C3 <code>σ</code>, because the latter is the nineteenth item in the sequence of 
                  lowercase Greek letters in Unicode (the sequence is interrupted because of the final 
                  form of the sigma, #x3C2 &#x3C2;). Because Greek never had a final capital sigma, 
                  Unicode has marked #x3A2, the eighteenth codepoint in the sequence of Greek capital 
                  letters, as reserved, to ensure that every Greek uppercase letter is always 32 codepoints 
                  less than its lowercase counterpart. Therefore, someone writing 
                  <code>format-integer(18, "Α;a")</code> might expect the eighteenth Greek capital letter, 
                  #x3A3 <code>Σ</code>, but an implementation might return #x3a2, the eighteenth position 
                  in the sequence of Greek capital letters, but unassigned to any character. </p>
            </item>
         </olist>


      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test xslt-version="3.0">
               <fos:expression>format-integer(123, '0000')</fos:expression>
               <fos:result>"0123"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p><code>format-integer(123, 'w')</code> might return <code>"one hundred and
                  twenty-three"</code></p>
         </fos:example>
         <fos:example>
            <p>Ordinal numbering in Italian: The specification <code>"1;o(-º)"</code> with <code>$language</code> equal to
                  <code>it</code>, if supported, should produce the sequence:</p>
            <eg xml:space="preserve">1º 2º 3º 4º ...</eg>
            <p>The specification <code>"Ww;o"</code> with <code>$language</code> equal to
                  <code>it</code>, if supported, should produce the sequence:</p>
            <eg xml:space="preserve">Primo Secondo Terzo Quarto Quinto ...</eg>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0">
               <fos:expression>format-integer(21, '1;o', 'en')</fos:expression>
               <fos:result>"21st"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p><code>format-integer(14, 'Ww;o(-e)', 'de')</code> might return
                  <code>"Vierzehnte"</code></p>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0">
               <fos:expression>format-integer(7, 'a')</fos:expression>
               <fos:result>"g"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0">
               <fos:expression>format-integer(27, 'a')</fos:expression>
               <fos:result>"aa"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0">
               <fos:expression>format-integer(57, 'I')</fos:expression>
               <fos:result>"LVII"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0">
               <fos:expression>format-integer(1234, '#;##0;')</fos:expression>
               <fos:result>"1;234"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="4.0">
               <fos:expression>format-integer(1234, '16^xxxx')</fos:expression>
               <fos:result>"04d2"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="4.0">
               <fos:expression>format-integer(1234, '16^X')</fos:expression>
               <fos:result>"4D2"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="4.0">
               <fos:expression>format-integer(12345678, '16^xxxx_xxxx')</fos:expression>
               <fos:result>"00bc_614e"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="4.0">
               <fos:expression>format-integer(12345678, '16^#_xxxx')</fos:expression>
               <fos:result>"bc_614e"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="4.0">
               <fos:expression>format-integer(255, '2^xxxx xxxx')</fos:expression>
               <fos:result>"1111 1111"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="4.0">
               <fos:expression>format-integer(1023, '32^XXXX')</fos:expression>
               <fos:result>"00VV"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="4.0">
               <fos:expression>format-integer(1023, '10^XXXX')</fos:expression>
               <fos:result>"1023"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="4.0">
               <fos:expression>format-integer(1023, '10^00')</fos:expression>
               <fos:result>"10^23"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="format-number" prefix="fn">
      <fos:signatures>
         <fos:proto name="format-number" return-type="xs:string">
            <fos:arg name="value" type="xs:numeric?"/>
            <fos:arg name="picture" type="xs:string"/>
            <fos:arg name="decimal-format-name" type="union(xs:string, xs:QName)?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="decimal-formats namespaces">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a string containing a number formatted according to a given picture string,
            taking account of decimal formats specified in the static context.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the two-argument form of the function is equivalent to calling the
            three-argument form with an empty sequence as the value of the third argument.</p>
         <p>The function formats <code>$value</code> as a string using the <termref
               def="dt-picture-string"
               >picture string</termref> specified by the
               <code>$picture</code> argument and the decimal-format named by the
               <code>$decimal-format-name</code> argument, or the unnamed decimal-format, if there
            is no <code>$decimal-format-name</code> argument. The syntax of the picture string is
            described in <specref
               ref="syntax-of-picture-string"/>.</p>
         <p>The <code>$value</code> argument may be of any numeric data type
            (<code>xs:double</code>, <code>xs:float</code>, <code>xs:decimal</code>, or their
            subtypes including <code>xs:integer</code>). Note that if an <code>xs:decimal</code> is
            supplied, it is not automatically promoted to an <code>xs:double</code>, as such
            promotion can involve a loss of precision.</p>
         <p>If the supplied value of the <code>$value</code> argument is an empty sequence, the
            function behaves as if the supplied value were the <code>xs:double</code> value
               <code>NaN</code>.</p>
         <p>The value of <code>$decimal-format-name</code>, if present and non-empty,
               <rfc2119>must</rfc2119> be <phrase
               diff="add" at="A"
               >either an <code>xs:QName</code>, 
                  or</phrase> a string which after removal of leading and trailing
            whitespace is in the form of an <code>EQName</code> as defined in the XPath 4.0
            grammar, that is one of the following:</p>

         <ulist>
            <item>
               <p>A lexical QName, which is expanded using the statically known namespaces. The
                  default namespace is not used (no prefix means no namespace).</p>
            </item>
            <item>
               <p>A <code>URIQualifiedName</code> using the syntax <code>Q{uri}local</code>, where
                  the URI can be zero-length to indicate a name in no namespace.</p>
            </item>
         </ulist>


         <p>The decimal format that is used is the decimal format in the static context whose name
            matches <code>$decimal-format-name</code> if supplied, or the unnamed decimal format in
            the static context otherwise.</p>

         <p>The evaluation of the <code>fn:format-number</code> function takes place in two
            phases, an analysis phase described in <specref
               ref="analyzing-picture-string"
               /> and a
            formatting phase described in <specref
               ref="formatting-the-number"/>.</p>

         <p>The analysis phase takes as its inputs the <termref def="dt-picture-string"
               >picture
               string</termref> and the variables derived from the relevant decimal format in the
            static context, and produces as its output a number of variables with defined values.
            The formatting phase takes as its inputs the number to be formatted and the variables
            produced by the analysis phase, and produces as its output a string containing a
            formatted representation of the number.</p>

         <p>The result of the function is the formatted string representation of the supplied
            number.</p>

      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DF" code="1280"/>
            <phrase diff="chg" at="A">if 
            the <code>$decimal-format-name</code> argument is supplied as an <code>xs:string</code>
            that is</phrase> neither a valid lexical QName nor a
            valid <code>URIQualifiedName</code>, or if it uses a prefix that is not found in the
            statically known namespaces, or if the static context does not contain a declaration of
            a decimal-format with a matching expanded QName. If the processor is able to detect the
            error statically (for example, when the argument is supplied as a string literal), then
            the processor <rfc2119>may</rfc2119> optionally signal this as a static error.</p>
      </fos:errors>
      <fos:notes>
         <p>A string is an ordered sequence of characters, and this specification 
            uses terms such as “left” and “right”, “preceding” and “following” in relation to this ordering, 
            irrespective of the position of the characters when visually rendered on some output medium. 
            Both in the picture string and in the result string, digits with higher significance (that is, 
            representing higher powers of ten) always precede digits with lower significance, even when 
            the rendered text flow is from right to left.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>The following examples assume a default decimal format in which the chosen digits are
               the ASCII digits 0-9, the decimal separator is <code>.</code>, the grouping separator is <code>,</code>,
               the minus-sign is <code>-</code>, and the percent-sign is <code>%</code>.</p>
            <fos:test>
               <fos:expression>format-number(12345.6, '#,###.00')</fos:expression>
               <fos:result>"12,345.60"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>format-number(12345678.9, '9,999.99')</fos:expression>
               <fos:result>"12,345,678.90"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>format-number(123.9, '9999')</fos:expression>
               <fos:result>"0124"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>format-number(0.14, '01%')</fos:expression>
               <fos:result>"14%"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>format-number(-6, '000')</fos:expression>
               <fos:result>"-006"</fos:result>
            </fos:test>
            <p>The following example assumes the existence of a decimal format named <code>ch</code> in which
               the grouping separator is <code>&#x2b9;</code> and the decimal separator is
                  <code>&#xb7;</code>:</p>
            <fos:test>
               <fos:expression><eg>format-number(
  1234.5678,
  '#&#x2b9;##0&#xb7;00',
  'ch'
)</eg></fos:expression>
               <fos:result>"1&#x2b9;234&#xb7;57"</fos:result>
            </fos:test>
            <p>The following examples assume that the exponent separator is
               in decimal format <code>fortran</code> is <code>E</code>:</p>
            <fos:test>
               <fos:expression>format-number(1234.5678, '00.000E0', 'fortran')</fos:expression>
               <fos:result>"12.346E2"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>format-number(0.234, '0.0E0', 'fortran')</fos:expression>
               <fos:result>"2.3E-1"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>format-number(0.234, '#.00E0', 'fortran')</fos:expression>
               <fos:result>"0.23E0"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>format-number(0.234, '.00E0', 'fortran')</fos:expression>
               <fos:result>".23E0"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">The decimal format name can now be supplied as a value of type <code>xs:QName</code>,
            as an alternative to supplying a lexical QName as an instance of <code>xs:string</code>.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="parse-integer" prefix="fn">
      <fos:signatures>
         <fos:proto name="parse-integer" return-type="xs:integer">
            <fos:arg name="value" type="xs:string" example="'12345'"/>
            <fos:arg name="radix" type="xs:integer" default="10"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Converts a string to an integer, recognizing any radix in the range 2 to 36.</p>
      </fos:summary>
      <fos:rules>
         
         <p>The supplied <code>$radix</code> must be in the range 2 to 36 inclusive.</p>
         <p>The string <code>$value</code> is preprocessed by stripping all whitespace characters (including internal whitespace)
         and underscore characters.</p>
         <p>After this process, the supplied value
          must consist of an optional sign (<code>+</code> or <code>-</code>)
         followed by a sequence of one or more generalized digits drawn from the first <code>$radix</code> characters
         in the alphabet <code>0123456789abcdefghijklmnopqrstuvwxyz</code>; upper-case alphabetics
         <code>A-Z</code> may be used in place of their lower-case equivalents.</p>
         <p>The value of a generalized digit corresponds to its position in this alphabet.
         More formally, in non-error cases the result of the function is given by the XQuery expression:</p>
         <eg><![CDATA[let $alphabet := characters("0123456789abcdefghijklmnopqrstuvwxyz")
let $preprocessed-value := translate($value, "_ &#x9;&#xa;&#xd;", "")
let $digits := translate($preprocessed-value, "+-", "")
let $abs := sum(
  for $char at $p in reverse(characters($digits))
  return (index-of($alphabet, $char) - 1) * xs:integer(math:pow($radix, $p - 1)))
return if (starts-with($preprocessed-value, "-")) then -$abs else +$abs]]></eg>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="RG" code="0011"/>
            if <code>$radix</code> is not in the range 2 to 36.</p>
         <p>A dynamic error is raised <errorref class="RG" code="0012"/>
            if, after stripping whitespace and underscores and the optional leading sign, 
            <code>$value</code> is a zero-length string,
            or if it contains a character
         that is not among the first <code>$radix</code> characters in the
            alphabet <code>0123456789abcdefghijklmnopqrstuvwxyz</code>, or the
         upper-case equivalent of such a character.</p>
         <p>A dynamic error is raised <errorref class="CA" code="0003"/>
            if the value of the resulting integer exceeds the implementation-dependent
            limit on the size of an <code>xs:integer</code>.</p>
         
      </fos:errors>
      <fos:notes>
         <p>When <code>$radix</code> takes its default value of <code>10</code>,
            the function delivers the same result as casting <code>$value</code> 
            (after removal of whitespace and underscores) to <code>xs:integer</code>.</p>
         <p>If underscores or whitespace in the input need to be rejected, then
         the string should first be validated, perhaps using <code>fn:matches</code>.</p>
         <p>If other characters may legitimately appear in the input, for example
         a leading <code>0x</code>, then this must first be removed by pre-processing the input.</p>
         <p>If the input uses a different family of digits, then the value should first
         be converted to the required digits using <code>fn:translate</code>.</p>
         <p>A string in the lexical space of <code>xs:hexBinary</code> will always
         be an acceptable input, provided it is not too long. So, for example, the expression
         <code>"1DE=" => xs:base64Binary() => xs:hexBinary() => xs:string() => parse-integer(16)</code>
         can be used to convert the Base 64 value <code>1DE=</code> to the integer 54321, via the 
         hexadecimal string <code>D431</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>parse-integer(" 200 ")</fos:expression>
               <fos:result>200</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-integer("-20")</fos:expression>
               <fos:result>-20</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-integer(" +100")</fos:expression>
               <fos:result>100</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-integer("ff", 16)</fos:expression>
               <fos:result>255</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-integer("FFFF FFFF", 16)</fos:expression>
               <fos:result>4294967295</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-integer("-FFFF_FFFF", 16)</fos:expression>
               <fos:result>-4294967295</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-integer("377", 8)</fos:expression>
               <fos:result>255</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-integer("101", 2)</fos:expression>
               <fos:result>5</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-integer("vv", 32)</fos:expression>
               <fos:result>1023</fos:result>
            </fos:test>
            <p>Alphabetic base-26 numbering systems (hexavigesimal) can be parsed via translation.
               Note, enumerating systems that do not assign a symbol to zero (e.g., spreadsheet
               columns) must be preprocessed in a different fashion.</p>
            <fos:test>
               <fos:expression><eg>lower-case("AAB")
=> translate("abcdefghijklmnopqrstuvwxyz", "0123456789abcdefghijklmnop")
=> parse-integer(26)</eg></fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
            <p>Digit-based numeration systems comparable to the Arabic numbers 0 through 9 can be
               parsed via translation.</p>
            <fos:test>
               <fos:expression><eg>translate('٢٠٢٣', '٠١٢٣٤٥٦٧٨٩', '0123456789')
=> parse-integer()</eg></fos:expression>
               <fos:result>2023</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="pi" prefix="math">
      <fos:signatures>
         <fos:proto name="pi" return-type="xs:double"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an approximation to the mathematical constant <var>π</var>.</p>
      </fos:summary>
      <fos:rules>
         <p>This function returns the <code>xs:double</code> value whose lexical representation is
            3.141592653589793e0</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test xslt-version="3.0">
               <fos:expression>2*math:pi()</fos:expression>
               <fos:result>6.283185307179586e0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The expression <code>60 * (math:pi() div 180)</code> converts an angle of 60 degrees
               to radians. </p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="exp" prefix="math">
      <fos:signatures>
         <fos:proto name="exp" return-type="xs:double?">
            <fos:arg name="value" type="xs:double?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the value of <var>e</var><sup>x</sup> where <var>x</var> is the argument value.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise the result is the mathematical constant <var>e</var> raised to the power of
               <code>$value</code>, as defined in the <bibref
               ref="ieee754-2008"
            /> specification of
            the <code>exp</code> function applied to 64-bit binary floating point values.</p>
      </fos:rules>
      <fos:notes>
         <p>The treatment of overflow and underflow is defined in <specref ref="op.numeric"/>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:exp(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp(0)</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp(1)</fos:expression>
               <fos:result approx="true">2.7182818284590455e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp(2)</fos:expression>
               <fos:result>7.38905609893065e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp(-1)</fos:expression>
               <fos:result>0.36787944117144233e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp(math:pi())</fos:expression>
               <fos:result>23.140692632779267e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp(xs:double('NaN'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp(xs:double('INF'))</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp(xs:double('-INF'))</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="exp10" prefix="math">
      <fos:signatures>
         <fos:proto name="exp10" return-type="xs:double?">
            <fos:arg name="value" type="xs:double?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the value of <code>10</code><sup>x</sup>, where <var>x</var> is the supplied argument value.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise the result is ten raised to the power of <code>$value</code>, as defined in the
               <bibref
               ref="ieee754-2008"
            /> specification of the <code>exp10</code> function applied
            to 64-bit binary floating point values.</p>
      </fos:rules>
      <fos:notes>
         <p>The treatment of overflow and underflow is defined in <specref ref="op.numeric"/>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:exp10(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp10(0)</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp10(1)</fos:expression>
               <fos:result>1.0e1</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp10(0.5)</fos:expression>
               <fos:result>3.1622776601683795e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp10(-1)</fos:expression>
               <fos:result>1.0e-1</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp10(xs:double('NaN'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp10(xs:double('INF'))</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:exp10(xs:double('-INF'))</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="log" prefix="math">
      <fos:signatures>
         <fos:proto name="log" return-type="xs:double?">
            <fos:arg name="value" type="xs:double?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the natural logarithm of the argument.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise the result is the natural logarithm of <code>$value</code>, as defined in the
               <bibref
               ref="ieee754-2008"
            /> specification of the <code>log</code> function applied
            to 64-bit binary floating point values.</p>
      </fos:rules>
      <fos:notes>
         <p>The treatment of <code>divideByZero</code> and <code>invalidOperation</code> exceptions
            is defined in <specref
               ref="op.numeric"
                  />. <phrase>The effect is that if the argument is 
            zero, the result is <code>-INF</code>, and if it is negative, the result is <code>NaN</code></phrase>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:log(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log(0)</fos:expression>
               <fos:result>xs:double('-INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log(math:exp(1))</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log(1.0e-3)</fos:expression>
               <fos:result>-6.907755278982137e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log(2)</fos:expression>
               <fos:result>0.6931471805599453e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log(-1)</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log(xs:double('NaN'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log(xs:double('INF'))</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log(xs:double('-INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="log10" prefix="math">
      <fos:signatures>
         <fos:proto name="log10" return-type="xs:double?">
            <fos:arg name="value" type="xs:double?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the base-ten logarithm of the argument.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise the result is the base-10 logarithm of <code>$value</code>, as defined in the
               <bibref
               ref="ieee754-2008"
            /> specification of the <code>log10</code> function applied
            to 64-bit binary floating point values.</p>
      </fos:rules>
      <fos:notes>
         <p>The treatment of <code>divideByZero</code> and <code>invalidOperation</code> exceptions
            is defined in <specref
               ref="op.numeric"
                  />. <phrase>The effect is that if the argument is 
               zero, the result is <code>-INF</code>, and if it is negative, the result is <code>NaN</code></phrase>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:log10(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log10(0)</fos:expression>
               <fos:result>xs:double('-INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log10(1.0e3)</fos:expression>
               <fos:result>3.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log10(1.0e-3)</fos:expression>
               <fos:result>-3.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log10(2)</fos:expression>
               <fos:result>0.3010299956639812e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log10(-1)</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log10(xs:double('NaN'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log10(xs:double('INF'))</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:log10(xs:double('-INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="sqrt" prefix="math">
      <fos:signatures>
         <fos:proto name="sqrt" return-type="xs:double?">
            <fos:arg name="value" type="xs:double?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the non-negative square root of the argument.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise the result is the mathematical non-negative square root of <code>$value</code>
            as defined in the <bibref
               ref="ieee754-2008"
            /> specification of the
               <code>squareRoot</code> function applied to 64-bit binary floating point values.</p>
      </fos:rules>
      <fos:notes>

         <p>The treatment of the <code>invalidOperation</code> exception is defined in <specref
               ref="op.numeric"
               />. The effect is that if the argument is less than zero, the result
            is <code>NaN</code>.</p>

         <p>If <code>$value</code> is positive or negative zero, positive infinity, or
            <code>NaN</code>, then the result is <code>$value</code>. (Negative zero is the only
            case where the result can have negative sign)</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:sqrt(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sqrt(0.0e0)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sqrt(-0.0e0)</fos:expression>
               <fos:result>-0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sqrt(1.0e6)</fos:expression>
               <fos:result>1.0e3</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sqrt(2.0e0)</fos:expression>
               <fos:result>1.4142135623730951e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sqrt(-2.0e0)</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sqrt(xs:double('NaN'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sqrt(xs:double('INF'))</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sqrt(xs:double('-INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="pow" prefix="math">
      <fos:signatures>
         <fos:proto name="pow" return-type="xs:double?">
            <fos:arg name="x" type="xs:double?"/>
            <fos:arg name="y" type="xs:numeric"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the result of raising the first argument to the power of the second.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$x</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>If <code>$y</code> is an instance of <code>xs:integer</code>, the result is
               <code>$x</code> raised to the power of <code>$y</code> as defined in the <bibref
               ref="ieee754-2008"
            /> specification of the <code>pown</code> function applied to a
            64-bit binary floating point value and an integer.</p>
         <p>Otherwise <code>$y</code> is converted to an <code>xs:double</code> by numeric
            promotion, and the result is <code>$x</code> raised to the power of
               <code>$y</code> as defined in the <bibref
               ref="ieee754-2008"
            /> specification of the
               <code>pow</code> function applied to two 64-bit binary floating point values.</p>
      </fos:rules>
      <fos:notes>

         <p>The treatment of the <code>divideByZero</code> and <code>invalidOperation</code>
            exceptions is defined in <specref
               ref="op.numeric"
            />. Some of the consequences are
            illustrated in the examples below.</p>

      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:pow((), 93.7)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(2, 3)</fos:expression>
               <fos:result>8.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-2, 3)</fos:expression>
               <fos:result>-8.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(2, -3)</fos:expression>
               <fos:result>0.125e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-2, -3)</fos:expression>
               <fos:result>-0.125e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(2, 0)</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(0, 0)</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(xs:double('INF'), 0)</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(xs:double('NaN'), 0)</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-math:pi(), 0)</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(0e0, 3)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(0e0, 4)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-0e0, 3)</fos:expression>
               <fos:result>-0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(0, 4)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(0e0, -3)</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(0e0, -4)</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-0e0, -3)</fos:expression>
               <fos:result>xs:double('-INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(0, -4)</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(16, 0.5e0)</fos:expression>
               <fos:result>4.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(16, 0.25e0)</fos:expression>
               <fos:result>2.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(0e0, -3.0e0)</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-0e0, -3.0e0)</fos:expression>
               <fos:result>xs:double('-INF')</fos:result>
               <fos:postamble>Odd-valued whole numbers are treated specially</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(0e0, -3.1e0)</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-0e0, -3.1e0)</fos:expression>
               <fos:result>xs:double('INF')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(0e0, 3.0e0)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-0e0, 3.0e0)</fos:expression>
               <fos:result>-0.0e0</fos:result>
               <fos:postamble>Odd-valued whole numbers are treated specially</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(0e0, 3.1e0)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-0e0, 3.1e0)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-1, xs:double('INF'))</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-1, xs:double('-INF'))</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(1, xs:double('INF'))</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(1, xs:double('-INF'))</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(1, xs:double('NaN'))</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-2.5e0, 2.0e0)</fos:expression>
               <fos:result>6.25e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:pow(-2.5e0, 2.00000001e0)</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="sin" prefix="math">
      <fos:signatures>
         <fos:proto name="sin" return-type="xs:double?">
            <fos:arg name="radians" type="xs:double?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the sine of the argument. The argument is an angle in radians.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$radians</code> is the empty sequence, the function returns the empty
            sequence.</p>

         <p>Otherwise the result is the sine of <code>$radians</code> (which is treated as an angle in
            radians) as defined in the <bibref
               ref="ieee754-2008"
            /> specification of the
               <code>sin</code> function applied to 64-bit binary floating point values.</p>

      </fos:rules>
      <fos:notes>
         <p>The treatment of the <code>invalidOperation</code> and <code>underflow</code> exceptions
            is defined in <specref
               ref="op.numeric"/>. </p>
         <p>If <code>$radians</code> is positive or negative zero, the result is
            <code>$radians</code>.</p>
         <p>If <code>$radians</code> is positive or negative infinity, or <code>NaN</code>,
            then the result is <code>NaN</code>.</p>
         <p>Otherwise the result is always in the range -1.0e0 to +1.0e0</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:sin(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sin(0)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sin(-0.0e0)</fos:expression>
               <fos:result>-0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sin(math:pi() div 2)</fos:expression>
               <fos:result approx="true">1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sin(-math:pi() div 2)</fos:expression>
               <fos:result approx="true">-1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sin(math:pi())</fos:expression>
               <fos:result approx="true">0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sin(xs:double('NaN'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sin(xs:double('INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:sin(xs:double('-INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="cos" prefix="math">
      <fos:signatures>
         <fos:proto name="cos" return-type="xs:double?">
            <fos:arg name="radians" type="xs:double?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the cosine of the argument. The argument is an angle in radians.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$radians</code> is the empty sequence, the function returns the empty
            sequence.</p>
         <p>If <code>$radians</code> is positive or negative infinity, or <code>NaN</code>,
            then the result is <code>NaN</code>.</p>
         <p>Otherwise the result is the cosine of <code>$</code><var>θ</var> (which is treated as an angle in
            radians) as defined in the <bibref
               ref="ieee754-2008"
            /> specification of the
               <code>cos</code> function applied to 64-bit binary floating point values.</p>
      </fos:rules>
      <fos:notes>
         <p>The treatment of the <code>invalidOperation</code> exception is defined in <specref
               ref="op.numeric"/>. </p>
         <p>If <code>$radians</code> is positive or negative zero, the result is
            <code>$radians</code>.</p>
         <p>If <code>$radians</code>is positive or negative infinity, or <code>NaN</code>,
            then the result is <code>NaN</code>.</p>
         <p>Otherwise the result is always in the range -1.0e0 to +1.0e0</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:cos(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:cos(0)</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:cos(-0.0e0)</fos:expression>
               <fos:result>1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:cos(math:pi() div 2)</fos:expression>
               <fos:result approx="true">0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:cos(-math:pi() div 2)</fos:expression>
               <fos:result approx="true">0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:cos(math:pi())</fos:expression>
               <fos:result approx="true">-1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:cos(xs:double('NaN'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:cos(xs:double('INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:cos(xs:double('-INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="tan" prefix="math">
      <fos:signatures>
         <fos:proto name="tan" return-type="xs:double?">
            <fos:arg name="radians" type="xs:double?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the tangent of the argument. The argument is an angle in radians.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$radians</code> is the empty sequence, the function returns the empty
            sequence.</p>
         <p>Otherwise the result is the tangent of <code>$radians</code> (which is treated as an angle
            in radians) as defined in the <bibref
               ref="ieee754-2008"
            /> specification of the
               <code>tan</code> function applied to 64-bit binary floating point values.</p>

      </fos:rules>
      <fos:notes>
         <p>The treatment of the <code>invalidOperation</code> and <code>underflow</code> exceptions
            is defined in <specref
               ref="op.numeric"/>. </p>
         <p>If <code>$radians</code> is positive or negative infinity, or <code>NaN</code>,
            then the result is <code>NaN</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:tan(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:tan(0)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:tan(-0.0e0)</fos:expression>
               <fos:result>-0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:tan(math:pi() div 4)</fos:expression>
               <fos:result approx="true">1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:tan(-math:pi() div 4)</fos:expression>
               <fos:result approx="true">-1.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>1 div math:tan(math:pi() div 2)</fos:expression>
               <fos:result approx="true">0.0e0</fos:result>
               <fos:postamble>Mathematically, <emph>tan(π/2)</emph> is positive infinity. But because <code>math:pi() div 2</code>
                  returns an approximation, the result of <code>math:tan(math:pi() div 2)</code> will be a large
                  but finite number.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression>1 div math:tan(-math:pi() div 2)</fos:expression>
               <fos:result approx="true">-0.0e0</fos:result>
               <fos:postamble>Mathematically, <emph>tan(-π/2)</emph> is negative infinity. But because <code>-math:pi() div 2</code>
                  returns an approximation, the result of <code>math:tan(-math:pi() div 2)</code> will be a large
                  but finite negative number.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression>math:tan(math:pi())</fos:expression>
               <fos:result approx="true">0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:tan(xs:double('NaN'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:tan(xs:double('INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:tan(xs:double('-INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="asin" prefix="math">
      <fos:signatures>
         <fos:proto name="asin" return-type="xs:double?">
            <fos:arg name="value" type="xs:double?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the arc sine of the argument.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise the result is the arc sine of <code>$value</code> as defined in the <bibref
               ref="ieee754-2008"
               /> specification of the
            <code>asin</code> function applied to 64-bit binary floating point values. 
            The result is in the range -<var>π</var>/2 to +<var>π</var>/2 radians. </p>
      </fos:rules>
      <fos:notes>
         <p>The treatment of the <code>invalidOperation</code> and <code>underflow</code> exceptions
            is defined in <specref
               ref="op.numeric"/>. </p>
         <p>If <code>$value</code> is positive or negative zero, the result is <code>$value</code>.</p>
         <p>If <code>$value</code> is <code>NaN</code>, or if its absolute value is greater than one,
            then the result is <code>NaN</code>.</p>
         <p>In other cases the result is an <code>xs:double</code> value representing an angle
               <var>θ</var> in radians in the range -<var>π</var><code>/2 &lt;=
               </code><var>θ</var><code> &lt;= +</code><var>π</var><code>/2</code>. </p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:asin(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:asin(0)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:asin(-0.0e0)</fos:expression>
               <fos:result>-0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:asin(1.0e0)</fos:expression>
               <fos:result approx="true">1.5707963267948966e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:asin(-1.0e0)</fos:expression>
               <fos:result approx="true">-1.5707963267948966e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:asin(2.0e0)</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:asin(xs:double('NaN'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:asin(xs:double('INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:asin(xs:double('-INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="acos" prefix="math">
      <fos:signatures>
         <fos:proto name="acos" return-type="xs:double?">
            <fos:arg name="value" type="xs:double?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the arc cosine of the argument.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise the result is the arc cosine of <code>$value</code>, as defined in the <bibref
               ref="ieee754-2008"
               /> specification of the
               <code>acos</code> function applied to 64-bit binary floating point values.
            The result is in the range zero to +<var>π</var> radians.</p>
      </fos:rules>
      <fos:notes>
         <p>The treatment of the <code>invalidOperation</code> exception is defined in <specref
               ref="op.numeric"/>. </p>
         <p>If <code>$value</code> is <code>NaN</code>, or if its absolute value is greater than one,
            then the result is <code>NaN</code>.</p>
         <p>In other cases the result is an <code>xs:double</code> value representing an angle
               <var>θ</var> in radians in the range <code>0 &lt;= </code><var>θ</var><code> &lt;=
               +</code><var>π</var>. </p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:acos(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:acos(0)</fos:expression>
               <fos:result approx="true">1.5707963267948966e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:acos(-0.0e0)</fos:expression>
               <fos:result approx="true">1.5707963267948966e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:acos(1.0e0)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:acos(-1.0e0)</fos:expression>
               <fos:result approx="true">3.141592653589793e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:acos(2.0e0)</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:acos(xs:double('NaN'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:acos(xs:double('INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:acos(xs:double('-INF'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="atan" prefix="math">
      <fos:signatures>
         <fos:proto name="atan" return-type="xs:double?">
            <fos:arg name="value" type="xs:double?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the arc tangent of the argument.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise the result is the arc tangent of <code>$value</code>, as defined 
            in the <bibref
               ref="ieee754-2008"
               /> specification of the
               <code>atan</code> function applied to 64-bit binary floating point values.
            The result is in the range -<var>π</var>/2
            to +<var>π</var>/2 radians.</p>
      </fos:rules>
      <fos:notes>
         <p>The treatment of the <code>underflow</code> exception is defined in <specref
               ref="op.numeric"/>. </p>
         <p>If <code>$value</code> is positive or negative zero, the result is <code>$value</code>.</p>
         <p>If <code>$value</code> is <code>NaN</code> then the result is <code>NaN</code>.</p>
         <p>In other cases the result is an <code>xs:double</code> value representing an angle
               <var>θ</var> in radians in the range -<var>π</var><code>/2 &lt;=
               </code><var>θ</var><code> &lt;= +</code><var>π</var><code>/2</code>. </p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>math:atan(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan(0)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan(-0.0e0)</fos:expression>
               <fos:result>-0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan(1.0e0)</fos:expression>
               <fos:result approx="true">0.7853981633974483e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan(-1.0e0)</fos:expression>
               <fos:result approx="true">-0.7853981633974483e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan(xs:double('NaN'))</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan(xs:double('INF'))</fos:expression>
               <fos:result approx="true">1.5707963267948966e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan(xs:double('-INF'))</fos:expression>
               <fos:result approx="true">-1.5707963267948966e0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="atan2" prefix="math">
      <fos:signatures>
         <fos:proto name="atan2" return-type="xs:double">
            <fos:arg name="y" type="xs:double"/>
            <fos:arg name="x" type="xs:double"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the angle in radians subtended at the origin by the point on a plane with
            coordinates (x, y) and the positive x-axis.</p>
      </fos:summary>
      <fos:rules>
         <p>The result is the value of <code>atan2(y, x)</code> as defined in the <bibref
               ref="ieee754-2008"
               /> specification of the <code>atan2</code> function applied to
            64-bit binary floating point values. The result is in the range -<var>π</var>
            to +<var>π</var> radians.</p>
      </fos:rules>
      <fos:notes>
         <p>The treatment of the <code>underflow</code> exception is defined in <specref
               ref="op.numeric"/>. The following rules apply when the values are finite and non-zero, 
            (subject to rules for overflow, underflow and approximation).</p>
         <p>If either argument is <code>NaN</code> then the result is <code>NaN</code>.</p>
         <p diff="chg" at="B">If <code>$x</code> is positive, then  the value of <code>atan2($y,
               $x)</code> is <code>atan($y div $x)</code>.</p>
         <p diff="chg" at="B">If <code>$x</code> is negative, then:</p>
         <ulist diff="chg" at="B">
            <item><p>If <code>$y</code> is positive, then the value of <code>atan2($y, $x)</code> is 
               <code>atan($y div $x) + </code><var>π</var>.</p></item>
            <item><p>If <code>$y</code> is negative, then the value of <code>atan2($y, $x)</code> is 
               <code>atan($y div $x) - </code><var>π</var>.</p></item>
         </ulist>
         <p>Some results for special values of the arguments are shown in the examples below.</p>

      </fos:notes>
      <fos:examples>


         <fos:example>
            <fos:test>
               <fos:expression>math:atan2(+0.0e0, 0.0e0)</fos:expression>
               <fos:result>0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan2(-0.0e0, 0.0e0)</fos:expression>
               <fos:result>-0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan2(+0.0e0, -0.0e0)</fos:expression>
               <fos:result>3.141592653589793e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan2(-0.0e0, -0.0e0)</fos:expression>
               <fos:result>-3.141592653589793e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan2(-1, 0.0e0)</fos:expression>
               <fos:result>-1.5707963267948966e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan2(+1, 0.0e0)</fos:expression>
               <fos:result>1.5707963267948966e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan2(-0.0e0, -1)</fos:expression>
               <fos:result>-3.141592653589793e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan2(+0.0e0, -1)</fos:expression>
               <fos:result>3.141592653589793e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan2(-0.0e0, +1)</fos:expression>
               <fos:result>-0.0e0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>math:atan2(+0.0e0, +1)</fos:expression>
               <fos:result>+0.0e0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="codepoints-to-string" prefix="fn">
      <fos:signatures>
         <fos:proto name="codepoints-to-string" return-type="xs:string">
            <fos:arg name="values" type="xs:integer*"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an <code>xs:string</code> whose characters have supplied <termref
               def="codepoint">codepoints</termref>.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the string made up from the <termref def="character"
               >characters</termref> whose Unicode <termref def="codepoint"
               >codepoints</termref> are
            supplied in <code>$values</code>. This will be the zero-length string if <code>$values</code>
            is the empty sequence. </p>

      </fos:rules>
      <fos:errors>
         <p diff="chg" at="2023-06-12">A dynamic error is raised <errorref class="CH" code="0001"
               /> if any of the codepoints in
               <code>$values</code> is not a
               <termref def="dt-permitted-character">permitted character</termref>.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>codepoints-to-string((66, 65, 67, 72))</fos:expression>
               <fos:result>"BACH"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>codepoints-to-string((2309, 2358, 2378, 2325))</fos:expression>
               <fos:result>"अशॊक"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>codepoints-to-string(())</fos:expression>
               <fos:result>""</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>codepoints-to-string(0)</fos:expression>
               <fos:error-result error-code="FOCH0001"/>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="string-to-codepoints" prefix="fn">
      <fos:signatures>
         <fos:proto name="string-to-codepoints" return-type="xs:integer*">
            <fos:arg name="value" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the sequence of <termref def="codepoint"
               >codepoints</termref> that constitute an
               <code>xs:string</code> value. </p>
      </fos:summary>
      <fos:rules>
         <p>The function returns a sequence of integers, each integer being the Unicode <termref
               def="codepoint">codepoint</termref> of the corresponding <termref def="character"
                  >character</termref> in <code>$value</code>.</p>
         <p>If <code>$value</code> is a zero-length string or the empty sequence, the function returns
            the empty sequence.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>string-to-codepoints("Thérèse")</fos:expression>
               <fos:result>(84, 104, 233, 114, 232, 115, 101)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="compare" prefix="fn">
      <fos:signatures>
         <fos:proto name="compare" return-type="xs:integer?">
            <fos:arg name="value1" type="xs:string?"/>
            <fos:arg name="value2" type="xs:string?"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>-1</code>, <code>0</code>, or <code>1</code>,
            depending on whether <code>$value1</code> collates before,
            equal to, or after <code>$value2</code> according to the rules of a selected
            collation.</p>
      </fos:summary>
      <fos:rules>
         <p>Returns <code>-1</code>, <code>0</code>, or <code>1</code>,
            depending on whether <code>$value1</code> is
            respectively less than, equal to, or greater than <code>$value2</code>,
            according to the rules of the collation that is used. </p>
         <p>The collation used by this function is determined according to the rules in <specref
               ref="choosing-a-collation"/>. </p>
         <p>If either <code>$value1</code> or <code>$value2</code> is the empty sequence,
            the function returns the empty sequence.</p>
         <p>This function, <phrase diff="chg" at="2023-01-17">when used with the default collation,</phrase> defines the semantics of the <code>eq</code>, <code>ne</code>,
            <code>gt</code>, <code>lt</code>, <code>le</code> and <code>ge</code> operators on <code>xs:string</code> values.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>compare('abc', 'abc')</fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test
               default-collation="http://www.w3.org/2013/collation/UCA?lang=de;strength=primary">
               <fos:expression>compare('Strasse', 'Straße')</fos:expression>
               <fos:result>0</fos:result>
               <fos:postamble>Assuming the default collation includes provisions that equate
                     <quote>ss</quote> and the (German) character <quote>ß</quote>
                     (<quote>sharp-s</quote>). Otherwise, the returned value depends on the
                  semantics of the default collation.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>compare(
  'Strasse',
  'Straße',
  'http://www.w3.org/2013/collation/UCA?lang=de;strength=primary'
)</eg></fos:expression>
               <fos:result>0</fos:result>
               <fos:postamble>The specified collation equates
                     <quote>ss</quote> and the (German) character <quote>ß</quote>
                     (<quote>sharp-s</quote>).</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test default-collation="http://www.w3.org/2013/collation/UCA?lang=de">
               <fos:expression>compare('Strassen', 'Straße')</fos:expression>
               <fos:result>1</fos:result>
               <fos:postamble>Assuming the default collation includes provisions that treat
                  differences between <quote>ss</quote> and the (German) character <quote>ß</quote>
                     (<quote>sharp-s</quote>) with less strength than the differences between the
                  base characters, such as the final <quote>n</quote>. </fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="codepoint-equal" prefix="fn">
      <fos:signatures>
         <fos:proto name="codepoint-equal" return-type="xs:boolean?">
            <fos:arg name="value1" type="xs:string?"/>
            <fos:arg name="value2" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if two strings are equal, considered codepoint-by-codepoint.</p>
      </fos:summary>
      <fos:rules>
         <p>If either argument is the empty sequence, the function returns the empty sequence. </p>
         <p>Otherwise, the function returns <code>true</code> or <code>false</code> depending on
            whether <code>$value1</code> is equal to 
            <code>$value2</code>, according to the Unicode codepoint collation
               (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p>

      </fos:rules>
      <fos:notes>
         <p>This function allows <code>xs:anyURI</code> values to be compared without having to
            specify the Unicode codepoint collation.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>codepoint-equal("abcd", "abcd")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>codepoint-equal("abcd", "abcd ")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>codepoint-equal("", "")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>codepoint-equal("", ())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>codepoint-equal((), ())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="concat" prefix="fn">
      <fos:signatures>
         <fos:proto name="concat" return-type="xs:string">
            <fos:arg name="..." type="xs:anyAtomicType*"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="||" types="xs:anyAtomicType xs:anyAtomicType"
         > The two-argument form of
         this function defines the semantics of the <code>||</code> operator.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the concatenation of the string values of the arguments.</p>
      </fos:summary>
      <fos:rules>
         <p>This function accepts zero or more arguments, each declared with the required type
            <code>xs:anyAtomicType*</code>. The value <code>$v</code> supplied for each argument
            is first reduced to a single string as follows:</p>
         <ulist>
            <item>
               <p>If XPath 1.0 compatibility mode is set to true in the static context of the
                  function call, then the result of <code>xs:string($v[1])</code>.</p>
            </item>
            <item>
               <p>Otherwise, the result of <code>fn:string-join($v)</code>.</p>
            </item>
         </ulist>
         <p>The resulting sequence of strings (one for each supplied argument) is then reduced
            to a single string by applying <code>fn:string-join#1</code> to the sequence.</p>
         <p>The <code>fn:concat</code> function is specified to allow zero or more arguments, which
            are concatenated together. This is the only function specified in this document that
            allows a variable number of arguments. This capability is retained for compatibility
            with <bibref
               ref="xpath"/>. </p>
      </fos:rules>
      <fos:notes>
         <p>As mentioned in <specref ref="string-types"
               /> Unicode normalization is not automatically
            applied to the result of <code>fn:concat</code>. If a normalized result is required,
               <code>fn:normalize-unicode</code> can be applied to the <code>xs:string</code>
            returned by <code>fn:concat</code>. The following XQuery:</p>
         <eg xml:space="preserve">
let $v1 := "I plan to go to Mu"
let $v2 := "?nchen in September"
return concat($v1, $v2)</eg>
         <p>where the <code>?</code> represents either the actual Unicode character <code>COMBINING DIARESIS</code>
            (Unicode codepoint <code>U+0308</code>) or <code>&amp;#x0308;</code>, will return:</p>
         <p>"I plan to go to Mu?nchen in September"</p>
         <p>where the <code>?</code> represents either the actual Unicode character<code> COMBINING DIARESIS</code>
            (Unicode codepoint <code>U+0308</code>) or <code>&amp;#x0308;</code>.
            It is worth noting that the returned value is not normalized in NFC; however, it is normalized in NFD.</p>
         <p> However, the following XQuery:</p>
         <eg xml:space="preserve">
let $v1 := "I plan to go to Mu"
let $v2 := "?nchen in September"
return normalize-unicode(concat($v1, $v2))</eg>
         <p>where <code>?</code> represents either the actual Unicode character <code>COMBINING DIARESIS</code>
            (Unicode codepoint <code>U+0308</code>) or <code>&amp;#x0308;</code>, will return:</p>
         <p><code>"I plan to go to München in September"</code></p>
         <p>This returned result is normalized in NFC.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>concat('un', 'grateful')</fos:expression>
               <fos:result>"ungrateful"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>concat(
  'Thy ', (), 'old ', "groans", "", ' ring',
  ' yet', ' in', ' my', ' ancient',' ears.'
)</eg></fos:expression>
               <fos:result>"Thy old groans ring yet in my ancient ears."</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>concat('Ciao!',())</fos:expression>
               <fos:result>"Ciao!"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>concat('Ingratitude, ', 'thou ', ('marble-hearted', ' fiend!'))</eg></fos:expression>
               <fos:result>"Ingratitude, thou marble-hearted fiend!"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>concat(01, 02, 03, 04, true())</fos:expression>
               <fos:result>"1234true"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>concat()</fos:expression>
               <fos:result>""</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>10 || '/' || 6</fos:expression>
               <fos:result>"10/6"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="string-join" prefix="fn">
      <fos:signatures>
         <fos:proto name="string-join" return-type="xs:string">
            <fos:arg name="values" type="xs:anyAtomicType*"/>
            <fos:arg name="separator" type="xs:string" default='""'/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a string created by concatenating the items in a sequence, with a defined
            separator between adjacent items.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of calling the single-argument version of this function is the same as
            calling the two-argument version with <code>$separator</code> set to a zero-length
            string.</p>
         <p>The function returns an <code>xs:string</code> created by <phrase>casting each item 
            in the sequence <code>$values</code> to an <code>xs:string</code>, 
            and then concatenating the result strings in order,</phrase> 
            using the value of <code>$separator</code> as a
            separator between adjacent strings. If <code>$separator</code> is the zero-length
            string, then the items in <code>$values</code> are concatenated without a separator.</p>

      </fos:rules>
      <fos:notes>
         <p>If <code>$values</code> is the empty sequence, the function returns the
            zero-length string.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>string-join(1 to 9)</fos:expression>
               <fos:result>"123456789"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>string-join(('Now', 'is', 'the', 'time', '...'), ' ')</fos:expression>
               <fos:result>"Now is the time ..."</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>string-join(
  ('Blow, ', 'blow, ', 'thou ', 'winter ', 'wind!'),
  ''
)</eg></fos:expression>
               <fos:result>"Blow, blow, thou winter wind!"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>string-join((), 'separator')</fos:expression>
               <fos:result>""</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>string-join(1 to 5, ', ')</fos:expression>
               <fos:result>"1, 2, 3, 4, 5"</fos:result>
            </fos:test>
         </fos:example>

         <fos:variable name="doc" id="v-string-join-doc"
            >&lt;doc&gt;
  &lt;chap&gt;
    &lt;section xml:id="xyz"/&gt;
  &lt;/chap&gt;
&lt;/doc&gt;</fos:variable>
         <fos:example>
            <fos:test use="v-string-join-doc">
               <fos:expression><eg>$doc//@xml:id
! string-join((node-name(), '="', ., '"'))</eg></fos:expression>
               <fos:result>'xml:id="xyz"'</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-string-join-doc">
               <fos:expression><eg>$doc//section
! string-join(ancestor-or-self::*/name(), '/')</eg></fos:expression>
               <fos:result>"doc/chap/section"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="substring" prefix="fn">
      <fos:signatures>
         <fos:proto name="substring" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="start" type="xs:double"/>
            <fos:arg name="length" type="xs:double?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the part of <code>$value</code> beginning at the position
            indicated by <code>$start</code> and continuing for the number of <termref
               def="character"
               >characters</termref> indicated by <code>$length</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns
            the zero-length string. </p>
         <p>Otherwise, the function returns a string comprising those <termref def="character"
            >characters</termref> of <code>$value</code> whose index position (counting
            from one) is greater than or equal to <code>$start</code> (rounded to an
            integer), and (if <code>$length</code> is specified 
            <phrase diff="add" at="2022-12-19">and non-empty</phrase>) less than the sum of
               <code>$start</code> and <code>$length</code> (both rounded to integers).</p>
         <p>The characters returned do not extend beyond <code>$value</code>. If
               <code>$start</code> is zero or negative, only those characters in positions greater
            than zero are returned.</p>
         <p>More specifically, the three argument version of the function returns the characters in
            <code>$value</code> whose position <code>$p</code> satisfies:</p>
         <p>
            <code>fn:round($start) &lt;= $p and $p &lt; fn:round($start) + fn:round($length)</code>
         </p>
         <p>The two argument version of the function assumes that <code>$length</code> is infinite
            and thus returns the <termref
               def="character"
               >characters</termref> in
            <code>$value</code> whose position <code>$p</code> satisfies:</p>
         <p>
            <code>fn:round($start) &lt;= $p</code>
         </p>
         <p>In the above computations, the rules for <code>op:numeric-less-than</code> <phrase diff="del" at="2022-11-27">and
               op:numeric-greater-than</phrase> apply.</p>
      </fos:rules>
      <fos:notes>
         <p>The first character of a string is located at position 1, not position 0.</p>
         <p>The second and third arguments allow <code>xs:double</code> values (rather than
         requiring <code>xs:integer</code>) in order to achieve compatibility with XPath 1.0.</p>
         <p>A surrogate pair counts as one character, not two.</p>
         <p>The consequences of supplying values such as <code>NaN</code> or positive or negative
         infinity for the <code>$start</code> or <code>$length</code> arguments follow from the
         above rules, and are not always intuitive.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>substring("motor car", 6)</fos:expression>
               <fos:result>" car"</fos:result>
               <fos:postamble>Characters starting at position 6 to the end of
                     <code>$sourceString</code> are selected.</fos:postamble>
            </fos:test>
            <p/>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring("metadata", 4, 3)</fos:expression>
               <fos:result>"ada"</fos:result>
               <fos:postamble>Characters at positions greater than or equal to 4 and less than 7 are
                  selected.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring("12345", 1.5, 2.6)</fos:expression>
               <fos:result>"234"</fos:result>
               <fos:postamble>Characters at positions greater than or equal to 2 and less than 5 are
                  selected.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring("12345", 0, 3)</fos:expression>
               <fos:result>"12"</fos:result>
               <fos:postamble>Characters at positions greater than or equal to 0 and less than 3 are
                  selected. Since the first position is 1, these are the characters at positions 1
                  and 2.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring("12345", 5, -3)</fos:expression>
               <fos:result>""</fos:result>
               <fos:postamble>Characters at positions greater than or equal to 5 and less than 2 are
                  selected.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring("12345", -3, 5)</fos:expression>
               <fos:result>"1"</fos:result>
               <fos:postamble>Characters at positions greater than or equal to -3 and less than 2
                  are selected. Since the first position is 1, this is the character at position
                  1.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring("12345", 0 div 0E0, 3)</fos:expression>
               <fos:result>""</fos:result>
               <fos:postamble>Since <code>0 div 0E0</code> returns <code>NaN</code>, and
                     <code>NaN</code> compared to any other number returns <code>false</code>, no
                  characters are selected.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring("12345", 1, 0 div 0E0)</fos:expression>
               <fos:result>""</fos:result>
               <fos:postamble>As above.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring((), 1, 3)</fos:expression>
               <fos:result>""</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring("12345", -42, 1 div 0E0)</fos:expression>
               <fos:result>"12345"</fos:result>
               <fos:postamble>Characters at positions greater than or equal to -42 and less than
                     <code>INF</code> are selected.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring("12345", -1 div 0E0, 1 div 0E0)</fos:expression>
               <fos:result>""</fos:result>
               <fos:postamble>Since the value of <code>-INF + INF</code> is <code>NaN</code>, no
                  characters are selected.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">The third argument can now be supplied as an empty sequence.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="string-length" prefix="fn">
      <fos:signatures>
         <fos:proto name="string-length" return-type="xs:integer">
            <fos:arg name="value" type="xs:string?" default="fn:string(.)"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the number of <termref def="character">characters</termref> in a string.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns an <code>xs:integer</code> equal to the length in <termref
            def="character">characters</termref> of <code>$value</code>.</p>
         <p>Calling the zero-argument version of the function is equivalent to calling
               <code>fn:string-length(fn:string(.))</code>.</p>
         <p>If <code>$value</code> is the empty sequence, the function returns the
               <code>xs:integer</code> value <code>0</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>If <code>$value</code> is not specified and the context item is <xtermref ref="dt-absent"
               spec="DM40">absent</xtermref>, a dynamic error is raised: <xerrorref spec="XP"
               class="DY" code="0002" type="dynamic"/>.</p>
      </fos:errors>
      <fos:notes>
         <p>Unlike some programming languages, a <termref def="codepoint"
            >codepoint</termref>
            greater than 65535 counts as one character, not two.</p>
         <p>There are situations where <code>fn:string-length()</code> has a different effect
            from <code>fn:string-length(.)</code>. For example, if the context item
         is an attribute node typed as an <code>xs:integer</code> with the string value <code>000001</code>,
         then <code>fn:string-length()</code> returns <code>6</code>
            (the length of the string value of the node), while 
            <code>fn:string-length(.)</code> raises a type error (because the result of atomization
            is not an <code>xs:string</code>).</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>string-length(
  "Harp not on that string, madam; that is past."
)</eg></fos:expression>
               <fos:result>45</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>string-length(())</fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="normalize-space" prefix="fn">
      <fos:signatures>
         <fos:proto name="normalize-space" return-type="xs:string">
            <fos:arg name="value" type="xs:string?" default="fn:string(.)"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>$value</code> with leading and trailing whitespace removed, and
            sequences of internal whitespace reduced to a single space character.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the
            zero-length string.</p>
         <p>The function returns a string constructed by stripping leading and trailing whitespace
            from <code>$value</code>, and replacing sequences of one or more adjacent
            whitespace characters with a single space, <code>#x20</code>.</p>
         <p>The whitespace characters are defined in the metasymbol S (Production 3) of <bibref
               ref="xml"/>.</p>

         <p>If no argument is supplied, then <code>$value</code> defaults to the string value
            (calculated using <code>fn:string</code>) of the context item (<code>.</code>). </p>
      </fos:rules>
      <fos:errors>
         <p>If no argument is supplied and the context item is <xtermref ref="dt-absent" spec="DM40"
               >absent</xtermref> then a dynamic error is raised: <xerrorref spec="XP" class="DY"
               code="0002" type="dynamic"/>.</p>
      </fos:errors>
      <fos:notes>
         <p>The definition of whitespace is unchanged in <bibref ref="xml11"
            />. It is repeated here
         for convenience:</p>
         <p>
            <code>S ::= (#x20 | #x9 | #xD | #xA)+</code>
         </p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>normalize-space(" The    wealthy curled darlings
           of    our    nation. ")</eg></fos:expression>
               <fos:result>"The wealthy curled darlings of our nation."</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>normalize-space(())</fos:expression>
               <fos:result>""</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="normalize-unicode" prefix="fn">
      <fos:signatures>
         <fos:proto name="normalize-unicode" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="form" type="xs:string" default='"NFC"'/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>$value</code> after applying Unicode normalization.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the
            zero-length string.</p>
         <p>If the single-argument version of the function is used, the result is the same as
            calling the two-argument version with <code>$form</code> set to the string
            <code>"NFC"</code>.</p>
         <p>Otherwise, the function returns <code>$value</code> normalized according to
            the rules of the normalization form identified by the value of
               <code>$form</code>.</p>
         <p>The effective value of <code>$form</code> is the value of the expression
               <code>fn:upper-case(fn:normalize-space($form))</code>.</p>

         <ulist>
            <item>
               <p>If the effective value of <code>$form</code> is <quote>NFC</quote>,
                  then the function returns <code>$value</code> converted to Unicode
                  Normalization Form C (NFC).</p>
            </item>
            <item>
               <p>If the effective value of <code>$form</code> is <quote>NFD</quote>,
                  then the function returns <code>$value</code> converted to Unicode
                  Normalization Form D (NFD).</p>
            </item>
            <item>
               <p>If the effective value of <code>$form</code> is <quote>NFKC</quote>,
                  then the function returns <code>$value</code> in Unicode Normalization
                  Form KC (NFKC).</p>
            </item>
            <item>
               <p>If the effective value of <code>$form</code> is <quote>NFKD</quote>,
                  then the function returns <code>$value</code> converted to Unicode
                  Normalization Form KD (NFKD).</p>
            </item>
            <item>
               <p>If the effective value of <code>$form</code> is
                     <quote>FULLY-NORMALIZED</quote>, then the function returns 
                  <code>$value</code> converted to fully normalized form. </p>
            </item>
            <item>
               <p>If the effective value of <code>$form</code> is the zero-length
                  string, no normalization is performed and <code>$value</code> is returned.</p>
            </item>
         </ulist>
         <p>Normalization forms NFC, NFD, NFKC, and NFKD, and the algorithms to be used for
            converting a string to each of these forms, are defined in <bibref
               ref="UNICODE-TR15"/>.</p>
         <p>The motivation for normalization form FULLY-NORMALIZED is explained in <bibref
               ref="charmod-normalization"
            />. However, as that specification did not progress beyond
            working draft status, the normative specification is as follows:</p>
         <ulist>
            <item>
               <p>A string is <term>fully-normalized</term> if (a) it is in normalization form NFC
                  as defined in <bibref
                     ref="UNICODE-TR15"
                  />, and (b) it does not start
                  with a composing character.</p>
            </item>
            <item>
               <p>A composing character is a character that is one or both of the following:</p>
               <ulist>
                  <item>
                     <p>the second character in the canonical decomposition mapping of some
                        character that is not listed in the Composition Exclusion Table defined in
                        <bibref
                           ref="UNICODE-TR15"/>;</p>
                  </item>
                  <item>
                     <p>of non-zero canonical combining class (as defined in <bibref ref="Unicode"
                        />).</p>
                  </item>

               </ulist>
            </item>
            <item>
               <p>A string is converted to FULLY-NORMALIZED form as follows:</p>
               <ulist>
                  <item>
                     <p>if the first character in the string is a composing character, prepend a
                        single space (x20);</p>
                  </item>
                  <item>
                     <p>convert the resulting string to normalization form NFC.</p>
                  </item>
               </ulist>
            </item>
         </ulist>

         <p>Conforming implementations <rfc2119>must</rfc2119> support normalization form <code>NFC</code> and
               <rfc2119>may</rfc2119> support normalization forms <code>NFD</code>, <code>NFKC</code>, <code>NFKD</code>, and
            <code>FULLY-NORMALIZED</code>. They <rfc2119>may</rfc2119> also support other normalization forms
            with <termref
               def="implementation-defined">implementation-defined</termref> semantics. </p>
         <p>It is <termref def="implementation-defined"
               >implementation-defined</termref> which
            version of Unicode (and therefore, of the normalization algorithms and their underlying
            data) is supported by the implementation. See <bibref
               ref="UNICODE-TR15"
               /> for
            details of the stability policy regarding changes to the normalization rules in future
            versions of Unicode. If the input string contains codepoints that are unassigned in the
            relevant version of Unicode, or for which no normalization rules are defined, the
               <code>fn:normalize-unicode</code> function leaves such codepoints unchanged. If the
            implementation supports the requested normalization form then it <rfc2119>must</rfc2119>
            be able to handle every input string without raising an error.</p>
      </fos:rules>
      <fos:errors>
         <p>A <phrase>dynamic</phrase> error is raised <errorref class="CH" code="0003"
               /> if the
            effective value of the <code>$form</code> argument is not one of the values
            supported by the implementation.</p>
      </fos:errors>
   </fos:function>
   <fos:function name="upper-case" prefix="fn">
      <fos:signatures>
         <fos:proto name="upper-case" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Converts a string to upper case.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the zero-length string is
            returned.</p>
         <p>Otherwise, the function returns <code>$value</code> after translating every
               <termref
               def="character"
               >character</termref> to its upper-case correspondent as
            defined in the appropriate case mappings section in the Unicode standard <bibref
               ref="Unicode"
            />. For versions of Unicode beginning with the 2.1.8 update, only
            locale-insensitive case mappings should be applied. Beginning with version 3.2.0 (and
            likely future versions) of Unicode, precise mappings are described in default case
            operations, which are full case mappings in the absence of tailoring for particular
            languages and environments. Every lower-case character that does not have an upper-case
            correspondent, as well as every upper-case character, is included in the returned value
            in its original form. </p>
      </fos:rules>
      <fos:notes>
         <p>Case mappings may change the length of a string. In general, the
               <code>fn:upper-case</code> and <code>fn:lower-case</code> functions are not inverses
            of each other: <code>fn:lower-case(fn:upper-case($s))</code> is not guaranteed to
            return <code>$s</code>, nor is <code>fn:upper-case(fn:lower-case($s))</code>. The
            Latin small letter dotless i (ı, U+0131, used in Turkish) is perhaps the most prominent
            lower-case letter which will not round-trip. The Latin capital letter i with dot above (İ, U+0130)
            is the most prominent upper-case letter which will not round trip; there are others,
            such as Latin capital letter sharp S (ẞ, U+1E9E), which was introduced in Unicode 5.1.</p>
         <p> These functions may not always be linguistically appropriate (e.g. Turkish i without
            dot) or appropriate for the application (e.g. titlecase). In cases such as Turkish, a
            simple translation should be used first.</p>
         <p> Because the function is not sensitive to locale, results will not always match user
            expectations. In Quebec, for example, the standard uppercase equivalent of <code>è</code> is <code>È</code>,
            while in metropolitan France it is more commonly <code>E</code>; only one of these is supported by
            the functions as defined.</p>
         <p> Many characters of class Ll lack uppercase equivalents in the Unicode case mapping
            tables; many characters of class Lu lack lowercase equivalents.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>upper-case("abCd0")</fos:expression>
               <fos:result>"ABCD0"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="lower-case" prefix="fn">
      <fos:signatures>
         <fos:proto name="lower-case" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Converts a string to lower case.</p>
      </fos:summary>
      <fos:rules>
         <p>If t<code>$value</code> is the empty sequence, the zero-length string is
            returned.</p>
         <p>Otherwise, the function returns <code>$value</code> after translating every
               <termref
               def="character"
               >character</termref> to its lower-case correspondent as
            defined in the appropriate case mappings section in the Unicode standard <bibref
               ref="Unicode"
            />. For versions of Unicode beginning with the 2.1.8 update, only
            locale-insensitive case mappings should be applied. Beginning with version 3.2.0 (and
            likely future versions) of Unicode, precise mappings are described in default case
            operations, which are full case mappings in the absence of tailoring for particular
            languages and environments. Every upper-case character that does not have a lower-case
            correspondent, as well as every lower-case character, is included in the returned value
            in its original form. </p>
      </fos:rules>
      <fos:notes>
         <p>Case mappings may change the length of a string. In general, the
               <code>fn:upper-case</code> and <code>fn:lower-case</code> functions are not inverses
            of each other: <code>fn:lower-case(fn:upper-case($s))</code> is not guaranteed to
            return <code>$s</code>, nor is <code>fn:upper-case(fn:lower-case($s))</code>. The
            Latin small letter dotless i (ı, U+0131, used in Turkish) is perhaps the most prominent
            lower-case letter which will not round-trip. The Latin capital letter i with dot above (İ, U+0130)
            is the most prominent upper-case letter which will not round trip; there are others,
            such as Latin capital letter sharp S (ẞ, U+1E9E), which was introduced in Unicode 5.1.</p>
         <p> These functions may not always be linguistically appropriate (e.g. Turkish i without
            dot) or appropriate for the application (e.g. titlecase). In cases such as Turkish, a
            simple translation should be used first.</p>
         <p> Because the function is not sensitive to locale, results will not always match user
            expectations. In Quebec, for example, the standard uppercase equivalent of <code>è</code> is <code>È</code>,
            while in metropolitan France it is more commonly <code>E</code>; only one of these is supported by
            the functions as defined.</p>
         <p> Many characters of class Ll lack uppercase equivalents in the Unicode case mapping
            tables; many characters of class Lu lack lowercase equivalents.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>lower-case("ABc!D")</fos:expression>
               <fos:result>"abc!d"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="translate" prefix="fn">
      <fos:signatures>
         <fos:proto name="translate" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="replace" type="xs:string"/>
            <fos:arg name="with" type="xs:string"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>$value</code> modified by replacing or removing individual
            characters. </p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the
            zero-length string.</p>
         <p>Otherwise, the function returns a result string constructed by processing each <termref
               def="character"
            >character</termref> in <code>$value</code>, in order,
            according to the following rules:</p>
         <olist>
            <item>
               <p>If the character does not appear in <code>$replace</code> then it
                  is added to the result string unchanged.</p>
            </item>
            <item>
               <p>If the character first appears in <code>$replace</code> at some
                  position <emph>M</emph>, where the value of <code>$with</code> is
                     <emph>M</emph> or more characters in length, then the character at position
                     <emph>M</emph> in <code>$with</code> is added to the result string.</p>
            </item>
            <item>
               <p>If the character first appears in <code>$replace</code> at some
                  position <emph>M</emph>, where <code>$with</code> is less than
                     <emph>M</emph> characters in length, then the character is omitted from the
                  result string.</p>
            </item>
         </olist>
      </fos:rules>
      <fos:notes>
         <p>If <code>$replace</code> is the zero-length string then the function returns
               <code>$value</code> unchanged.</p>
         <p>If a character occurs more than once in <code>$replace</code>, then the first
            occurrence determines the action taken.</p>
         <p>If <code>$with</code> is longer than <code>$replace</code>, the excess
            characters are ignored.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>translate("bar","abc","ABC")</fos:expression>
               <fos:result>"BAr"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>translate("--aaa--","abc-","ABC")</fos:expression>
               <fos:result>"AAA"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>translate("abcdabc", "abc", "AB")</fos:expression>
               <fos:result>"ABdAB"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="encode-for-uri" prefix="fn">
      <fos:signatures>
         <fos:proto name="encode-for-uri" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Encodes reserved characters in a string that is intended to be used in the path segment
            of a URI.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the zero-length
            string.</p>
         <p>This function applies the URI escaping rules defined in section 2 of <bibref
               ref="rfc3986"
               /> to the <code>xs:string</code> supplied as <code>$value</code>. The
            effect of the function is to escape reserved characters. Each such character in the
            string is replaced with its percent-encoded form as described in <bibref
               ref="rfc3986"/>.</p>
         <p>Since <bibref ref="rfc3986"
            /> recommends that, for consistency, URI producers and
            normalizers should use uppercase hexadecimal digits for all percent-encodings, this
            function must always generate hexadecimal values using the upper-case letters A-F.</p>
      </fos:rules>
      <fos:notes>
         <p>All characters are escaped except those identified as “unreserved” by <bibref
               ref="rfc3986"
            />, that is the upper- and lower-case letters <code>A</code> to <code>Z</code>,
            the digits <code>0</code> to <code>9</code>, HYPHEN-MINUS (<code>-</code>),
            LOW LINE (<code>_</code>), FULL STOP (<code>.</code>), and TILDE (<code>~</code>).</p>
         <p>This function escapes URI delimiters and therefore cannot be used indiscriminately to
            encode “invalid” characters in a path segment.</p>
         <p>This function is invertible but not idempotent. This is because a string containing a
            percent character will be modified by applying the function: for example
               <code>100%</code> becomes <code>100%25</code>, while <code>100%25</code> becomes
               <code>100%2525</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>encode-for-uri(
  "http://example.com/00/Weather/CA/Los%20Angeles#ocean"
)</eg></fos:expression>
               <fos:result>"http%3A%2F%2Fexample.com%2F00%2FWeather%2FCA%2FLos%2520Angeles%23ocean"</fos:result>
               <fos:postamble>This is probably not what the user intended because all of the
                  delimiters have been encoded.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>concat(
  "http://example.com/",
  encode-for-uri("~bébé")
)</eg></fos:expression>
               <fos:result>"http://example.com/~b%C3%A9b%C3%A9"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>concat(
  "http://example.com/",
  encode-for-uri("100% organic")
)</eg></fos:expression>
               <fos:result>"http://example.com/100%25%20organic"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="decode-from-uri" prefix="fn">
      <fos:signatures>
         <fos:proto name="decode-from-uri" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Decodes URI-escaped characters in a string.</p>
      </fos:summary>
      <fos:rules>
         <p>This function returns the original representation of a URI-escaped string.</p>
         <p>If <code>$value</code> is the empty sequence, the function returns the zero-length
            string.</p>
         <p>Otherwise, the value is first converted to an sequence of octets. Each plus sign
            (<code>+</code>) is replaced with the octet representing a space character
            (<code>x20</code>), and any substring that matches the regular expression
            <code>%[a-fA-F0-9][a-fA-F0-9]</code> is replaced with an octet for the two-digit
            hexadecimal number that follows the percent sign. Characters that are not part of
            such a substring are replaced with the octets of their UTF-8 encoding.
            For example, <code>"A%42+C"</code> results in the octets <code>x41</code>,
            <code>x42</code>, <code>x20</code>, <code>x43</code>, and <code>"💡"</code> yields
            <code>xF0</code>, <code>x9F</code>, <code>x92</code>, and <code>xA1</code>.</p>
         <p>If <code>%</code> is followed by up to two characters that are no hexadecimal digits,
            these characters are replaced by octets <code>xEF</code>, <code>xBF</code>,
            and <code>xBD</code>, that is, the UTF-8 encoding of the Unicode replacement character
            (<code>0xFFFD</code>). For example, the incomplete or invalid percent-encoded strings
            <code>"%"</code>, <code>"%X"</code>, and <code>"%AX"</code> are all replaced with
            these octets. For the string <code>"%1X!"</code>, the octets <code>xEF</code>,
            <code>xBF</code>, <code>xBD</code>, and <code>x21</code> are returned.</p>
         <p>Next, the resulting octets are interpreted as UTF-8. For example,
            <code>x41</code>, <code>x42</code>, <code>x20</code>, and <code>x43</code>
            becomes <code>"AB C"</code>, and <code>xF0</code>, <code>x9F</code>,
            <code>x92</code>, and <code>xA1</code> becomes <code>"💡"</code>.</p>
         <p>If an invalid UTF-8 octet sequence is encountered, the octets that have
            successfully been parsed are replaced with a Unicode replacement character.
            Examples:</p>
         <ulist>
            <item><p>The single octet <code>xF0</code> is converted to <code>"�"</code>.</p></item>
            <item><p>The octets <code>xF0</code>, <code>x9F</code>, <code>x92</code>, and
               <code>x41</code> are converted to <code>"�A"</code>:
               The bit pattern of the first octet indicates that the UTF-8 character comprises
               four octets. As the fourth octet is invalid, a Unicode replacement character is
               added for the first three octets, and the fourth (invalid) octet is parsed as a
               new character.</p></item>
            <item><p>Similarly, the octets <code>xF0</code>, <code>xF0</code>, <code>x9F</code>,
               <code>x92</code>, and <code>xA1</code> are converted to <code>"�💡"</code>:
               The second octet is invalid, but it becomes valid when being parsed as the
               first octet of the remaining UTF-8 sequence.</p></item>
         </ulist>
         <p>Similarly, a UTF-8 octet sequence that represents a codepoint that is not a
            valid XML character is replaced with a Unicode replacement character.
            For example, <code>x00</code> becomes <code>"�"</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>decode-from-uri("http://example.com/")</fos:expression>
               <fos:result>"http://example.com/"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>decode-from-uri("~b%C3%A9b%C3%A9?a=b+c")</fos:expression>
               <fos:result>"~bébé?a=b c"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>decode-from-uri("%00-%XX-%F0%9F%92%41-%F0%F0%9F%92%A1")</fos:expression>
               <fos:result>"�-�-�A-�💡"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="iri-to-uri" prefix="fn">
      <fos:signatures>
         <fos:proto name="iri-to-uri" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Converts a string containing an IRI into a URI according to the rules of <bibref
               ref="rfc3987"/>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the zero-length
            string.</p>
         <p>Otherwise, the function converts <code>$value</code> into a URI according to
            the rules given in Section 3.1 of <bibref
               ref="rfc3987"
               /> by percent-encoding characters
            that are allowed in an IRI but not in a URI. If <code>$value</code> contains a character
            that is invalid in an IRI, such as the space character (see note below), the invalid
            character is replaced by its percent-encoded form as described in <bibref
               ref="rfc3986"/> before the conversion is performed.</p>
         <p>Since <bibref ref="rfc3986"
            /> recommends that, for consistency, URI producers and
            normalizers should use uppercase hexadecimal digits for all percent-encodings, this
            function must always generate hexadecimal values using the upper-case letters A-F.</p>
      </fos:rules>
      <fos:notes>
         <p>The function is idempotent but not invertible. Both the inputs <code>My Documents</code>
            and <code>My%20Documents</code> will be converted to the output
               <code>My%20Documents</code>.</p>
         <p>This function does not check whether <code>$iri</code> is a valid IRI. It treats it as
            an <termref
               def="string">string</termref> and operates on the <termref def="character"
               >characters</termref> in the string.</p>
         <!--Text replaced by erratum E8 change 1"-->
         <p> The following printable ASCII characters are invalid in an IRI: <code>&lt;</code>, <code>&gt;</code>,
            <code>"</code>, <code> </code>, <code>{</code>, <code>}</code>, <code>|</code>,
            <code>\</code>, <code>^</code>, and <code>`</code>. Since these
            characters should not appear in an IRI, if they do appear in <code>$iri</code> they will
            be percent-encoded. In addition, characters outside the range x20-x7E will be
            percent-encoded because they are invalid in a URI. </p>
         <!--End of text replaced by erratum E8-->
         <p> Since this function does not escape the PERCENT SIGN <code>%</code> and this character is not
            allowed in data within a URI, users wishing to convert character strings (such as file
            names) that include <code>%</code> to a URI should manually escape <code>%</code>
            by replacing it with <code>%25</code>.
         </p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>iri-to-uri(
  "http://www.example.com/00/Weather/CA/Los%20Angeles#ocean"
)</eg></fos:expression>
               <fos:result>"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>iri-to-uri("http://www.example.com/~bébé")</fos:expression>
               <fos:result>"http://www.example.com/~b%C3%A9b%C3%A9"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="escape-html-uri" prefix="fn">
      <fos:signatures>
         <fos:proto name="escape-html-uri" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Escapes a URI in the same way that HTML user agents handle attribute values expected to
            contain URIs.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the zero-length
            string.</p>
         <p>Otherwise, the function escapes all <termref def="character"
               >characters</termref> except
            printable characters of the US-ASCII coded character set, specifically the <termref
               def="codepoint"
               >codepoints</termref> between 32 and 126 (decimal) inclusive. Each
            character in <code>$uri</code> to be escaped is replaced by an escape sequence, which is
            formed by encoding the character as a sequence of octets in UTF-8, and then representing
            each of these octets in the form %HH, where HH is the hexadecimal representation of the
            octet. This function must always generate hexadecimal values using the upper-case
            letters A-F.</p>
      </fos:rules>
      <fos:notes>
         <p>The behavior of this function corresponds to the recommended handling of non-ASCII
            characters in URI attribute values as described in <bibref
               ref="HTML40"/> Appendix
            B.2.1.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>escape-html-uri(
  "http://www.example.com/00/Weather/CA/Los Angeles#ocean"
)</eg></fos:expression>
               <fos:result>"http://www.example.com/00/Weather/CA/Los Angeles#ocean"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>escape-html-uri(
  "javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~bébé');"
)</eg></fos:expression>
               <fos:result>"javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~b%C3%A9b%C3%A9');"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="contains" prefix="fn">
      <fos:signatures>
         <fos:proto name="contains" return-type="xs:boolean">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="substring" type="xs:string?"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the string <code>$value</code> contains <code>$substring</code> as a
            substring, taking collations into account.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> or <code>$substring</code> is the empty sequence, or
            contains only ignorable collation units, it is interpreted as the zero-length
            string.</p>
         <p>If <code>$substring</code> is the zero-length string, then the function returns
               <code>true</code>.</p>
         <p>If <code>$value</code> is the zero-length string, the function returns
               <code>false</code>.</p>
         <p>The collation used by this function is determined according to the rules in <specref
               ref="choosing-a-collation"/>.</p>
         <p>The function returns an <code>xs:boolean</code> indicating whether or not 
               <code>$value</code> contains (at the beginning, at the end, or anywhere within) at
            least one sequence of collation units that provides a <term>minimal match</term> to the
            collation units in <code>$substring</code>, according to the collation that is
            used.</p>
         <note>
            <p><term>Minimal match</term> is defined in <bibref ref="UNICODE-TR10"/>. </p>
         </note>

      </fos:rules>
      <fos:errors>
         <p>A <phrase>dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class="CH"
               code="0004"/> if the specified collation does not support collation units.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <p>The collation used in these examples, <code>http://example.com/CollationA</code> is a
               collation in which both <code>-</code> and <code>*</code> are ignorable collation units.</p>
            <p>“Ignorable collation unit” is equivalent to “ignorable collation element” in <bibref
                  ref="UNICODE-TR10"/>.</p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>contains("tattoo", "t")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>contains("tattoo", "ttt")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>contains("", ())</fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>The first rule is applied, followed by the second
                  rule.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>contains(
  "abcdefghi",
  "-d-e-f-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>contains(
  "a*b*c*d*e*f*g*h*i*",
  "d-ef-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>contains(
  "abcd***e---f*--*ghi",
  "def",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>contains(
  (),
  "--***-*---",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>The second argument contains only ignorable collation units and is
                  equivalent to the zero-length string.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="starts-with" prefix="fn">
      <fos:signatures>
         <fos:proto name="starts-with" return-type="xs:boolean">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="substring" type="xs:string?"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the string <code>$value</code> contains <code>$substring</code> as a leading
            substring, taking collations into account.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> or <code>$substring</code> is the empty sequence, or
            contains only ignorable collation units, it is interpreted as the zero-length
            string.</p>
         <p>If <code>$substring</code> is the zero-length string, then the function returns
               <code>true</code>. If <code>$value</code> is the zero-length string and
            <code>$substring</code> is not the zero-length string, then the function returns
               <code>false</code>.</p>
         <p>The collation used by this function is determined according to the rules in <specref
               ref="choosing-a-collation"/>.</p>
         <p>The function returns an <code>xs:boolean</code> indicating whether or not 
               <code>$value</code> starts with a sequence of collation units that provides a
               <term>match</term> to the collation units of <code>$substring</code> according to the
            collation that is used.</p>
         <note>
            <p><term>Match</term> is defined in <bibref ref="UNICODE-TR10"/>.</p>
         </note>

      </fos:rules>
      <fos:errors>
         <p>A <phrase>dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class="CH"
               code="0004"/> if the specified collation does not support collation units.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <p>The collation used in these examples, <code>http://example.com/CollationA</code> is a
               collation in which both <code>-</code> and <code>*</code> are ignorable collation units.</p>
            <p>“Ignorable collation unit” is equivalent to “ignorable collation element” in <bibref
                  ref="UNICODE-TR10"/>.</p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>starts-with("tattoo", "tat")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>starts-with("tattoo", "att")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>starts-with((), ())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>starts-with(
  "abcdefghi",
  "-a-b-c-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>starts-with(
  "a*b*c*d*e*f*g*h*i*",
  "a-bc-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>starts-with(
  "abcd***e---f*--*ghi",
  "abcdef",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>starts-with(
  (),
  "--***-*---",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>The second argument contains only ignorable collation units and is
                  equivalent to the zero-length string.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>starts-with(
  "-abcdefghi",
  "-abc",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="ends-with" prefix="fn">
      <fos:signatures>
         <fos:proto name="ends-with" return-type="xs:boolean">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="substring" type="xs:string?"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the string <code>$value</code> contains <code>$substring</code> as a trailing
            substring, taking collations into account.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> or <code>$substring</code> is the empty sequence, or
            contains only ignorable collation units, it is interpreted as the zero-length
            string.</p>
         <p>If <code>$substring</code> is the zero-length string, then the function returns
               <code>true</code>. If <code>$value</code> is the zero-length string and
            the value of <code>$substring</code> is not the zero-length string, then the function returns
               <code>false</code>.</p>
         <p>The collation used by this function is determined according to the rules in <specref
               ref="choosing-a-collation"/>.</p>
         <p>The function returns an <code>xs:boolean</code> indicating whether or not 
               <code>$value</code> ends with a sequence of collation units that provides a
               <term>match</term> to the collation units of <code>$substring</code> according to the
            collation that is used.</p>
         <note>
            <p>
               <term>Match</term> is defined in <bibref ref="UNICODE-TR10"/>. </p>
         </note>

      </fos:rules>
      <fos:errors>
         <p>A <phrase>dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class="CH"
               code="0004"/> if the specified collation does not support collation units.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <p>The collation used in these examples, <code>http://example.com/CollationA</code> is a
               collation in which both <code>-</code> and <code>*</code> are ignorable collation units.</p>
            <p>“Ignorable collation unit” is equivalent to “ignorable collation element” in <bibref
                  ref="UNICODE-TR10"/>.</p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>ends-with("tattoo", "tattoo")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>ends-with("tattoo", "atto")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>ends-with((), ())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>ends-with(
  "abcdefghi",
  "-g-h-i-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>ends-with(
  "abcd***e---f*--*ghi",
  "defghi",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>ends-with(
  "abcd***e---f*--*ghi",
  "defghi",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>ends-with(
  (),
  "--***-*---",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>The second argument contains only ignorable collation units and is
                  equivalent to the zero-length string.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>ends-with(
  "abcdefghi",
  "ghi-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="substring-before" prefix="fn">
      <fos:signatures>
         <fos:proto name="substring-before" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="substring" type="xs:string?"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the part of <code>$value</code> that precedes the first occurrence of
               <code>$substring</code>, taking collations into account.</p>
      </fos:summary>
      <fos:rules>
         <p> If <code>$value</code> or <code>$substring</code> is the empty sequence, or
            contains only ignorable collation units, it is interpreted as the zero-length
            string.</p>
         <p>If <code>$substring</code> is the zero-length string, then the function returns
            the zero-length string. </p>
         <p>If <code>$value</code> does not contain a string that is equal to 
            <code>$substring</code>, then the function returns the zero-length string. </p>
         <p>The collation used by this function is determined according to the rules in <specref
               ref="choosing-a-collation"/>.</p>
         <p>The function returns the substring of <code>$value</code> that precedes in
            <code>$value</code> the first occurrence of a sequence of collation units
            that provides a <term>minimal match</term> to the collation units of <code>$substring</code>
            according to the collation that is used.</p>
         <note>
            <p><term>Minimal match</term> is defined in <bibref ref="UNICODE-TR10"/>. </p>
         </note>

      </fos:rules>
      <fos:errors>
         <p>A <phrase>dynamic</phrase> error <rfc2119>may</rfc2119> be raised <errorref class="CH"
               code="0004"/> if the specified collation does not support collation units.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <p>The collation used in these examples, <code>http://example.com/CollationA</code> is a
               collation in which both <code>-</code> and <code>*</code> are ignorable collation units.</p>
            <p>“Ignorable collation unit” is equivalent to “ignorable collation element” in <bibref
                  ref="UNICODE-TR10"/>.</p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring-before("tattoo", "attoo")</fos:expression>
               <fos:result>"t"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring-before("tattoo", "tatto")</fos:expression>
               <fos:result>""</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring-before((), ())</fos:expression>
               <fos:result>""</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>substring-before(
  "abcdefghi",
  "--d-e-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>"abc"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>substring-before(
  "abc--d-e-fghi",
  "--d-e-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>"abc--"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>substring-before(
  "a*b*c*d*e*f*g*h*i*",
  "***cde",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>"a*b*"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>substring-before(
  "Eureka!",
  "--***-*---",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>""</fos:result>
               <fos:postamble>The second argument contains only ignorable collation units and is
                  equivalent to the zero-length string.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="substring-after" prefix="fn">
      <fos:signatures>
         <fos:proto name="substring-after" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="substring" type="xs:string?"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the part of <code>$value</code> that follows the first occurrence of
               <code>$substring</code>, taking collations into account.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> or <code>$substring</code> is the empty sequence, or
            contains only ignorable collation units, it is interpreted as the zero-length
            string.</p>
         <p>If <code>$substring</code> is the zero-length string, then the function returns
            the value of <code>$value</code>.</p>
         <p>If <code>$value</code> does not contain a string that is equal to 
            <code>$substring</code>, then the function returns the zero-length string. </p>
         <p>The collation used by this function is determined according to the rules in <specref
               ref="choosing-a-collation"/>.</p>
         <p>The function returns the substring of <code>$value</code> that follows in
             <code>$value</code> the first occurrence of a sequence of collation units
            that provides a <term>minimal match</term> to the collation units of <code>$substring</code>
            according to the collation that is used. </p>
         <note>
            <p><term>Minimal match</term> is defined in <bibref ref="UNICODE-TR10"/>. </p>
         </note>

      </fos:rules>
      <fos:errors>
         <p>A dynamic error <rfc2119>may</rfc2119> be raised <errorref class="CH" code="0004"
            /> if
            the specified collation does not support collation units.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <p>The collation used in these examples, <code>http://example.com/CollationA</code> is a
               collation in which both <code>-</code> and <code>*</code> are ignorable collation units.</p>
            <p>“Ignorable collation unit” is equivalent to “ignorable collation element” in <bibref
                  ref="UNICODE-TR10"/>.</p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring-after("tattoo", "tat")</fos:expression>
               <fos:result>"too"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring-after("tattoo", "tattoo")</fos:expression>
               <fos:result>""</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>substring-after((), ())</fos:expression>
               <fos:result>""</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>substring-after(
  "abcdefghi",
  "--d-e-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>"fghi"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>substring-after(
  "abc--d-e-fghi",
  "--d-e-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>"-fghi"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>substring-after(
  "a*b*c*d*e*f*g*h*i*",
  "***cde***",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>"*f*g*h*i*"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>substring-after(
  "Eureka!",
  "--***-*---",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)</eg></fos:expression>
               <fos:result>"Eureka!"</fos:result>
               <fos:postamble>The second argument contains only ignorable collation units and is
                  equivalent to the zero-length string.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="matches" prefix="fn">
      <fos:signatures>
         <fos:proto name="matches" return-type="xs:boolean">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="pattern" type="xs:string"/>
            <fos:arg name="flags" type="xs:string?" default='""'/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the supplied string matches a given regular expression.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, it is interpreted as the zero-length
            string.</p>
         <p>If the <code>$flags</code> argument is omitted or if it is an empty sequence,
            the effect is the same as setting <code>$flags</code> to a zero-length string.
            Flags are defined in <specref ref="flags"/>.</p>
         <p>The function returns <code>true</code> if <code>$value</code> or some substring of
            <code>$value</code> matches the regular expression supplied as <code>$pattern</code>,
            and the associated <code>$flags</code>. Otherwise, the function returns <code>false</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="RX" code="0002"
               /> if 
               <code>$pattern</code> is invalid according to the rules described in <specref
               ref="regex-syntax"/>. </p>
         <p>A dynamic error is raised <errorref class="RX" code="0001"
               /> if 
               <code>$flags</code> is invalid according to the rules described in <specref
               ref="flags"/>. </p>
      </fos:errors>
      <fos:notes>
         <p>Unless the metacharacters <code>^</code> and <code>$</code> are used as anchors, the
            string is considered to match the pattern if any substring matches the pattern. But if
            anchors are used, the anchors must match the start/end of the string (in string mode),
            or the start/end of a line (in multi-line mode). </p>
         <p>This is different from the behavior of patterns in <bibref ref="xmlschema-2"
               />, where
            regular expressions are <emph>implicitly</emph> anchored.</p>
         <p>Regular expression matching is defined on the basis of Unicode code points; it takes no
            account of collations.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>matches("abracadabra", "bra")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>matches("abracadabra", "^a.*a$")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>matches("abracadabra", "^bra")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Given the source document:</p>
         </fos:example>
         <fos:variable name="poem" id="v-matches-poem" as="element()"><![CDATA[
<poem author="Wilhelm Busch">
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
</poem>]]></fos:variable>
         <fos:example>
            <p>the following function calls produce the following results, with the
                  <code>poem</code> element as the context node:</p>
         </fos:example>
         <fos:example>
            <fos:test use="v-matches-poem">
               <fos:expression>matches($poem, "Kaum.*krähen")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-matches-poem">
               <fos:expression>matches($poem, "Kaum.*krähen", "s")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-matches-poem">
               <fos:expression>matches($poem, "^Kaum.*gesehen,$", "m")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-matches-poem">
               <fos:expression>matches($poem, "^Kaum.*gesehen,$")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-matches-poem">
               <fos:expression>matches($poem, "kiki", "i")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="replace" prefix="fn">
      <fos:signatures>
         <fos:proto name="replace" return-type="xs:string">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="pattern" type="xs:string"/>
            <fos:arg name="replacement" type="xs:string?" default="()"/>
            <fos:arg name="flags" type="xs:string?" default="''"/>
            <fos:arg name="action" type="(function(xs:untypedAtomic, xs:untypedAtomic*) as item()?)?" default="()" diff="add" at="A"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a string produced from the input string by replacing any substrings that match a
            given regular expression with a supplied replacement string<phrase diff="add" at="A">,
            provided either literally, or by invoking a supplied function.</phrase></p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, it is interpreted as the zero-length
            string.</p>
         <p diff="add" at="A">The replacement string is determined by the values of the
            <code>$replacement</code> and/or <code>$action</code> arguments:</p>
         <ulist diff="add" at="A">
            <item><p>If the <code>$action</code> argument is present and is not an empty sequence,
               the string is obtained by calling the <code>$action</code> function.</p>
               <p>The first argument to the <code>$action</code> function is the string to be replaced,
                  provided as <code>xs:untypedAtomic</code>.</p>
               <p>The second argument to the <code>$action</code> function provides the captured
                  substrings as an <code>xs:untypedAtomic</code> sequence.
                  The <code>Nth</code> item in this sequence is the substring captured by 
                  the <code>Nth</code> parenthesized sub-expression. If the
                  <code>Nth</code> parenthesized sub-expression was not matched, the <code>Nth</code> item
                  will be the zero-length string.</p>
               <p>Note that the rules for function coercion mean that the function actually
                  supplied for the <code>$action</code> parameter may be an arity-1 function: the
                  second argument does not need to be declared if it is not used.</p>
               <p>The replacement string is obtained by invoking <code>fn:string</code>
                  for the result of the function call.</p>
            </item>
            <item><p>Otherwise, if the <code>$replacement</code> argument is present and is not
               an empty sequence, the replacement string is the value of <code>$replacement</code>.</p></item>
            <item><p>Otherwise, the replacement string is the zero-length string.</p></item>
         </ulist>
         <p>If the <code>$flags</code> argument is omitted or if it is an empty sequence,
            the effect is the same as setting <code>$flags</code> to a zero-length string.
            Flags are defined in <specref ref="flags"/>.</p>
         <p>The function returns the <code>xs:string</code> that is obtained by replacing each
            non-overlapping substring of <code>$value</code> that matches the given
            <code>$pattern</code> with <phrase diff="chg" at="A">a replacement string</phrase>.</p>
         <p>If two overlapping substrings of <code>$value</code> both match the
            <code>$pattern</code>, then only the first one (that is, the one whose first <termref
            def="character">character</termref> comes first in the <code>$value</code> string) is
            replaced.</p>
         <p>If the <code>q</code> flag is present, or if the replacement string was obtained
            by calling the <code>$action</code> function, then the replacement string is used
            <emph>as is</emph>.</p>
         <p>Otherwise, within the replacement string, a variable <code>$N</code> may
            be used to refer to the substring captured by the Nth parenthesized sub-expression in
            the regular expression. For each match of the pattern, these variables are assigned the
            value of the content matched by the relevant sub-expression, and the modified
            replacement string is then substituted for the <termref
               def="character"
               >characters</termref> in <code>$value</code> that matched the pattern.
               <code>$0</code> refers to the substring captured by the regular expression as a
            whole.</p>
         <p>More specifically, the rules are as follows, where <code>S</code> is the number of
            parenthesized sub-expressions in the regular expression, and <code>N</code> is the
            decimal number formed by taking all the digits that consecutively follow the
               <code>$</code> character:</p>

         <olist>
            <item>
               <p>If <code>N</code>=<code>0</code>, then the variable is replaced by the substring
                  matched by the regular expression as a whole.</p>
            </item>
            <item>
               <p>If <code>1</code>&lt;=<code>N</code>&lt;=<code>S</code>, then the variable is
                  replaced by the substring captured by the Nth parenthesized sub-expression. If the
                     <code>Nth</code> parenthesized sub-expression was not matched, then the
                  variable is replaced by the zero-length string.</p>
            </item>
            <item>
               <p>If <code>S</code>&lt;<code>N</code>&lt;=<code>9</code>, then the variable is
                  replaced by the zero-length string.</p>
            </item>
            <item>
               <p>Otherwise (if <code>N</code>&gt;<code>S</code> and
                     <code>N</code>&gt;<code>9</code>), the last digit of <code>N</code> is taken to
                  be a literal character to be included “as is” in the replacement string, and the
                  rules are reapplied using the number <code>N</code> formed by stripping off this
                  last digit.</p>
            </item>
         </olist>

         <p>For example, if the replacement string is 
               <code>"$23"</code>
             and there are 5 substrings, the result contains the value of the substring that
            matches the second sub-expression, followed by the digit 
               <code>3</code>.</p>
         <p>Unless the <code>q</code> flag is used, a literal <code>$</code> character within the
            replacement string must be written as <code>\$</code>, and a literal <code>\</code>
            character must be written as <code>\\</code>.</p>

         <p> If two alternatives within the pattern both match at the same position in the
               <code>$input</code>, then the match that is chosen is the one matched by the first
            alternative. For example:</p>
         <eg xml:space="preserve"> replace("abcd", "(ab)|(a)", "[1=$1][2=$2]") returns "[1=ab][2=]cd"</eg>

      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="RX" code="0002"
               /> if the value of
               <code>$pattern</code> is invalid according to the rules described in section <specref
               ref="regex-syntax"/>. </p>
         <p>A dynamic error is raised <errorref class="RX" code="0001"
               /> if the value of
               <code>$flags</code> is invalid according to the rules described in section <specref
               ref="flags"/>. </p>
         <p>A dynamic error is raised <errorref class="RX" code="0003"
               /> if the pattern matches a
            zero-length string, that is, if the expression <code>fn:matches("", $pattern,
               $flags)</code> returns <code>true</code>. It is not an error, however, if a captured
            substring is zero-length.</p>
         <p>In the absence of the <code>q</code> flag,
            a dynamic error is raised <errorref
               class="RX" code="0004"
               /> if the value of
               <code>$replacement</code> contains a dollar sign (<code>$</code>) character that is not
            immediately followed by a digit <code>0-9</code> and not immediately preceded by a
            backslash (<code>\</code>).</p>
         <p>In the absence of the <code>q</code> flag,
            a dynamic error is raised <errorref
               class="RX" code="0004"
               /> if the value of
               <code>$replacement</code> contains a backslash (<code>\</code>) character that is not part of a
               <code>\\</code> pair, unless it is immediately followed by a dollar sign (<code>$</code>)
            character.</p>
         <p>A dynamic error is raised <errorref class="RX" code="0005"/> if both the <code>$replacement</code> 
            and <code>$action</code> arguments are supplied, and neither is an empty sequence.</p>
      </fos:errors>
      <fos:notes>
         <p><!--bug 10261-->If the input string contains no substring that matches the regular
            expression, the result of the function is a single string identical to the input
            string.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>replace("abracadabra", "bra", "*")</fos:expression>
               <fos:result>"a*cada*"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>replace("abracadabra", "a.*a", "*")</fos:expression>
               <fos:result>"*"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>replace("abracadabra", "a.*?a", "*")</fos:expression>
               <fos:result>"*c*bra"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>replace("abracadabra", "a", "")</fos:expression>
               <fos:result>"brcdbr"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>replace("abracadabra", "a(.)", "a$1$1")</fos:expression>
               <fos:result>"abbraccaddabbra"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>replace("AAAA", "A+", "b")</fos:expression>
               <fos:result>"b"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>replace("AAAA", "A+?", "b")</fos:expression>
               <fos:result>"bbbb"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>replace("darted", "^(.*?)d(.*)$", "$1c$2")</fos:expression>
               <fos:result>"carted"</fos:result>
               <fos:postamble>The first <code>d</code> is replaced.</fos:postamble>
            </fos:test>
            <fos:test diff="add" at="A">
               <fos:expression><eg>replace(
  "abracadabra",
  "bra",
  action := function { "*" }
)</eg></fos:expression>
               <fos:result>"a*cada*"</fos:result>
            </fos:test>
            <fos:test diff="add" at="A">
               <fos:expression><eg>replace(
  "abracadabra",
  "bra",
  action := upper-case#1
)</eg></fos:expression>
               <fos:result>aBRAcadaBRA</fos:result>
            </fos:test>
            <fos:test diff="add" at="A">
               <fos:expression><eg>replace(
  "Chapter 9",
  "[0-9]+",
  action := function { string(number(.) + 1) }
)</eg></fos:expression>
               <fos:result>"Chapter 10"</fos:result>
            </fos:test>
            <fos:test diff="add" at="A">
               <fos:expression><eg>replace(
  "LHR to LAX",
  "[A-Z]{3}",
  action := map {'LAX': 'Los Angeles', 'LHR': 'London' }
)</eg></fos:expression>
               <fos:result>"London to Los Angeles"</fos:result>
            </fos:test>
            <fos:test diff="add" at="A">
               <fos:expression><eg>replace(
  "57°43′30″",
  "([0-9]+)°([0-9]+)′([0-9]+)″",
  action := function($s, $groups) {
    string(number($groups[1]) + number($groups[2]) ÷ 60 + number($groups[3]) ÷ 3600) || '°'
  }
)</eg></fos:expression>
               <fos:result>"57.725°"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The expression <code>fn:replace("abracadabra", ".*?", "$1")</code> raises an error,
               because the pattern matches the zero-length string </p>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">The addition of the <code>$action</code> argument as proposed here has
            not been reviewed by the working group.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="tokenize" prefix="fn">
      <fos:signatures>
         <fos:proto name="tokenize" return-type="xs:string*">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="pattern" type="xs:string?" default='()'/>
            <fos:arg name="flags" type="xs:string?" default='""'/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence of strings constructed by splitting the input wherever a separator is
            found; the separator is any substring that matches a given regular expression.</p>
      </fos:summary>
      <fos:rules>
         <p diff="add" at="2023-01-17">The following rules apply when the <code>$pattern</code> argument is omitted, 
            or is set to an empty sequence:</p>
         <ulist>
            <item><p>The function splits the supplied string at whitespace boundaries.</p></item>
            <item><p>More specifically, calling <code>fn:tokenize($value)</code> <phrase diff="add" at="2023-01-17">or <code>fn:tokenize($value, ())</code></phrase>
               is equivalent to calling <code>fn:tokenize(fn:normalize-space($value), ' '))</code> where the second argument
               is a single space character (x20).</p></item>
            <item><p>The <code>$flags</code> argument is ignored.</p></item>
         </ulist>
         <p>The following rules apply when the <code>$pattern</code> argument is supplied as a single string:</p>
         <ulist>
            <item><p>If the <code>$flags</code> argument is omitted or if it is an empty sequence,
               the effect is the same as setting <code>$flags</code> to a zero-length string.
               Flags are defined in <specref ref="flags"/>.</p></item>
            <item><p>If <code>$value</code> is the empty sequence, or if <code>$value</code> is the
               zero-length string, the function returns the empty sequence.</p></item>
            <item>
               <p>The function returns a sequence of strings formed by breaking the <code>$value</code>
                  string into a sequence of strings, treating any substring that matches
                  <code>$pattern</code> as a separator. The separators themselves are not returned.</p>
            </item>
            <item>
               <p>If a separator occurs at the start of the <code>$value</code> string, the result
                  sequence will start with a zero-length string. Similarly, zero-length strings will also occur in
                  the result sequence if a separator occurs at the end of the <code>$value</code> string,
                  or if two adjacent substrings match the supplied <code>$pattern</code>.</p>
            </item>
            <item>
               <p>If two alternatives within the supplied <code>$pattern</code> both match at the same
                  position in the <code>$value</code> string, then the match that is chosen is the first.
                  For example:</p>
               <eg xml:space="preserve"> tokenize("abracadabra", "(ab)|(a)") returns ("", "r", "c", "d", "r", "")</eg>
            </item>
         </ulist>

      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="RX" code="0002"
               /> if the value of
               <code>$pattern</code> is invalid according to the rules described in section <specref
               ref="regex-syntax"/>.</p>
         <p>A dynamic error is raised <errorref class="RX" code="0001"
               /> if the value of
               <code>$flags</code> is invalid according to the rules described in section <specref
               ref="flags"/>.</p>
         <p>A dynamic error is raised <errorref class="RX" code="0003"
               /> if the supplied
               <code>$pattern</code> matches a zero-length string, that is, if <code>fn:matches("",
               $pattern, $flags)</code> returns <code>true</code>. </p>

      </fos:errors>
      <fos:notes>
         <p><!--bug 10261-->If the input string is not zero length, and no separators are found in
            the input string, the result of the function is a single string identical to the input
            string.</p>
         <p>The one-argument form of the function has a similar effect to
         the two-argument form with <code>\s+</code> as the separator pattern, except that the one-argument
         form strips leading and trailing whitespace, whereas the two-argument form delivers an extra
         zero-length token if leading or trailing whitespace is present.</p>
         <p>The function returns no information about the separators that were found
         in the string. If this information is required, the <code>fn:analyze-string</code> function
         can be used instead.</p>
         <p>The separator used by the one-argument form of the function is any sequence
            of tab (<code>x09</code>), newline (<code>x0A</code>), carriage return
            (<code>x0D</code>) or space (<code>x20</code>) characters. This is the same as the
         separator recognized by list-valued attributes as defined in XSD.
         It is not the same as the separator recognized by list-valued attributes in HTML5,
         which also treats form-feed (<code>x0C</code>) as whitespace. If it is necessary
         to treat form-feed as a separator, an explicit separator pattern should be used.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>tokenize(" red green blue ")</fos:expression>
               <fos:result>("red", "green", "blue")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>tokenize("The cat sat on the mat", "\s+")</fos:expression>
               <fos:result>("The", "cat", "sat", "on", "the", "mat")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>tokenize(" red green blue ", "\s+")</fos:expression>
               <fos:result>("", "red", "green", "blue", "")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>tokenize("1, 15, 24, 50", ",\s*")</fos:expression>
               <fos:result>("1", "15", "24", "50")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>tokenize("1,15,,24,50,", ",")</fos:expression>
               <fos:result>("1", "15", "", "24", "50", "")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p><code>fn:tokenize("abba", ".?")</code> raises the dynamic error <errorref class="RX"
                  code="0003"/>.</p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>tokenize(
  "Some unparsed &lt;br&gt; HTML &lt;BR&gt; text",
  "\s*&lt;br&gt;\s*", "i"
)</eg></fos:expression>
               <fos:result>("Some unparsed", "HTML", "text")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Changed for 4.0: allow the second argument to be an empty sequence.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="analyze-string" prefix="fn">
      <fos:signatures>
         <fos:proto name="analyze-string" return-type="element(fn:analyze-string-result)">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="pattern" type="xs:string"/>
            <fos:arg name="flags" type="xs:string?" default='""'/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Analyzes a string using a regular expression, returning an XML structure that identifies
            which parts of the input string matched or failed to match the regular expression, and
            in the case of matched substrings, which substrings matched each capturing group in the
            regular expression.</p>
      </fos:summary>
      <fos:rules>
         <p>If the <code>$flags</code> argument is omitted or if it is an empty sequence,
            the effect is the same as setting <code>$flags</code> to a zero-length string.
            Flags are defined in <specref ref="flags"/>.</p>
         <p>If <code>$value</code> is the empty sequence the function behaves as if
            <code>$value</code> were the zero-length string. In this situation the result will be
            an element node with no children.</p>
         <p>The function returns an element node whose local name is
               <code>analyze-string-result</code>. This element and all its descendant elements have
            the namespace URI <code>http://www.w3.org/2005/xpath-functions</code>. The namespace
            prefix is <termref
               def="implementation-dependent"
               >implementation-dependent</termref>. The children of this element are a
            sequence of <code>fn:match</code> and <code>fn:non-match</code> elements. This sequence
            is formed by breaking the <code>$value</code> string into a sequence of strings,
            returning any substring that matches <code>$pattern</code> as the content of a
               <code>match</code> element, and any intervening substring as the content of a
               <code>non-match</code> element.</p>
         <p>More specifically, the function starts at the beginning of the input string and attempts
            to find the first substring that matches the regular expression. If there are several
            matches, the first match is defined to be the one whose starting position comes first in
            the string. If several alternatives within the regular expression both match at the same
            position in the input string, then the match that is chosen is the first alternative
            that matches. For example, if the input string is <code>The quick brown fox jumps</code>
            and the regular expression is <code>jump|jumps</code>, then the match that is chosen is
               <code>jump</code>.</p>

         <p>Having found the first match, the instruction proceeds to find the second and subsequent
            matches by repeating the search, starting at the first <termref
               def="character">character</termref> that was not included in the previous match.</p>

         <p>The input string is thus partitioned into a sequence of substrings, some of which match
            the regular expression, others which do not match it. Each substring will contain at
            least one character. This sequence is represented in the result by the sequence of
               <code>fn:match</code> and <code>fn:non-match</code> children of the returned element
            node; the string value of the <code>fn:match</code> or <code>fn:non-match</code> element
            will be the corresponding substring of <code>$input</code>, and the string value of the
            returned element node will therefore be the same as <code>$input</code>.</p>

         <p>The content of an <code>fn:non-match</code> element is always a single text node.</p>

         <p>The content of a <code>fn:match</code> element, however, is in general a sequence of
            text nodes and <code>fn:group</code> element children. An <code>fn:group</code> element
            with a <code>nr</code> attribute having the integer value <var>N</var> identifies the
            substring captured by the <var>Nth</var> parenthesized sub-expression in the regular
            expression. For each capturing subexpression there will be at most one corresponding
               <code>fn:group</code> element in each <code>fn:match</code> element in the
            result.</p>

         <p>If the function is called twice with the same arguments, it is <termref
               def="implementation-dependent"
               >implementation-dependent</termref> whether the two calls return the same element node
            or distinct (but deep equal) element nodes. In this respect it is <termref
               def="dt-nondeterministic">non-deterministic with respect to node identity</termref>.</p>

         <p>The base URI of the element nodes in the result is <termref
               def="implementation-dependent">implementation-dependent</termref>.</p>

         <p>A schema is defined for the structure of the returned element: see <specref
               ref="schema-for-analyze-string"/>.</p>

         <p>The result of the function will always be such that validation against this schema would succeed.
         However, it is <termref
               def="implementation-defined"
            >implementation-defined</termref> whether the result is typed or untyped,
         that is, whether the elements and attributes in the returned tree have type annotations that reflect
         the result of validating against this schema.</p>


      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="RX" code="0002"
               /> if the value of
               <code>$pattern</code> is invalid according to the rules described in section <specref
               ref="regex-syntax"/>.</p>
         <p>A dynamic error is raised <errorref class="RX" code="0001"
               /> if the value of
               <code>$flags</code> is invalid according to the rules described in section <specref
               ref="flags"/>.</p>
         <p>A dynamic error is raised <errorref class="RX" code="0003"
               /> if the supplied
               <code>$pattern</code> matches a zero-length string, that is, if <code>fn:matches("",
               $pattern, $flags)</code> returns <code>true</code>.</p>
      </fos:errors>
      <fos:notes>
         <p>It is <rfc2119>recommended</rfc2119> that a processor that implements schema awareness should return typed nodes.
            The concept of “schema awareness”, however, is a matter for host languages to define and is outside
            the scope of the function library specification.</p>
         <p>The declarations and definitions in the schema are not automatically available in
            the static context of the <code>fn:analyze-string</code> call (or of any other
            expression). The contents of the static context are host-language defined, and in some
            host languages are implementation-defined.</p>
         <p>The schema defines the outermost element, <code>analyze-string-result</code>, in such
         a way that mixed content is permitted. In fact the element will only have element nodes (<code>match</code>
         and <code>non-match</code>) as its children, never text nodes. Although this might have originally been an
            oversight, defining the <code>analyze-string-result</code> element with <code>mixed="true"</code> allows it
         to be atomized, which is potentially useful (the atomized value will be the original input string),
         and the capability has therefore been retained for compatibility with the 3.0 version of this
         specification.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>In the following examples, the result document is shown in serialized form, with
               whitespace between the element nodes. This whitespace is not actually present in the
               result.</p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>analyze-string("The cat sat on the mat.", "\w+")</fos:expression>
               <fos:result normalize-space="true" ignore-prefixes="true" as="element()"><![CDATA[
<analyze-string-result xmlns="http://www.w3.org/2005/xpath-functions">
  <match>The</match>
  <non-match> </non-match>
  <match>cat</match>
  <non-match> </non-match>
  <match>sat</match>
  <non-match> </non-match>
  <match>on</match>
  <non-match> </non-match>
  <match>the</match>
  <non-match> </non-match>
  <match>mat</match>
  <non-match>.</non-match>
</analyze-string-result>]]></fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>analyze-string(
  "2008-12-03",
  "^(\d+)\-(\d+)\-(\d+)$"
)</eg></fos:expression>
               <fos:result normalize-space="true" ignore-prefixes="true" as="element()"><![CDATA[
<analyze-string-result xmlns="http://www.w3.org/2005/xpath-functions">
  <match><group nr="1">2008</group>-<group nr="2"
          >12</group>-<group nr="3">03</group></match>
</analyze-string-result>]]></fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>analyze-string(
  "A1,C15,,D24, X50,",
  "([A-Z])([0-9]+)"
)</eg></fos:expression>
               <fos:result normalize-space="true" ignore-prefixes="true" as="element()"><![CDATA[
<analyze-string-result xmlns="http://www.w3.org/2005/xpath-functions">                  
  <match><group nr="1">A</group><group nr="2">1</group></match>
  <non-match>,</non-match>
  <match><group nr="1">C</group><group nr="2">15</group></match>
  <non-match>,,</non-match>
  <match><group nr="1">D</group><group nr="2">24</group></match>
  <non-match>, </non-match>
  <match><group nr="1">X</group><group nr="2">50</group></match>
  <non-match>,</non-match>
</analyze-string-result>]]></fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="contains-token" prefix="fn">
      <fos:signatures>
         <fos:proto name="contains-token" return-type="xs:boolean">
            <fos:arg name="value" type="xs:string*"/>
            <fos:arg name="token" type="xs:string"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Determines whether or not any of the supplied strings, when tokenized at whitespace boundaries, contains the supplied token,
            under the rules of the supplied collation.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns <code>false</code>.</p>
         <p>Leading and trailing whitespace is trimmed from <code>$token</code>. 
            If the trimmed value of <code>$token</code>
            is a zero-length string, the function returns <code>false</code>.</p>
         <p>The collation used by this function is determined according to the rules in <specref
               ref="choosing-a-collation"/>.</p>
         <p>The function returns <code>true</code> if and only if there is string in <code>$value</code> which, 
            after tokenizing at whitespace boundaries, contains a token
         that is equal to the trimmed value of <code>$token</code> under
         the rules of the selected collation.</p>
         <p>That is, the function returns the value of the expression:</p>
         <eg><![CDATA[some $t in $input!tokenize(.) satisfies 
                 compare($t, replace($token, '^\s*|\s*$', ''), $collation) eq 0)]]></eg>
      </fos:rules>
      <fos:notes>
         <p>Interior whitespace within <code>$token</code> will cause the function to return <code>false</code>,
         unless such whitespace is ignored by the selected collation.</p>
         <p>This function can be used for processing space-separated attribute values
            (for example, the XHTML and DITA class attribute),
            where one often needs to test for the presence
            of a single token in a space-separated list. The function is designed to work
            both when the attribute has been validated against an XSD list type, and when it
            appears as a single untyped string. It differs from the
            HTML 5 definition in that HTML 5 recognizes form feed (x0C) as a separator.
            To reproduce the HTML token matching behavior, the HTML ASCII case-insensitive collation
            should be used: see <specref
               ref="html-ascii-case-insensitive-collation"/>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>contains-token("red green blue ", "red")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>contains-token(("red", "green", "blue"), " red ")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>contains-token("red, green, blue", "red")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>contains-token(
  "red green blue",
  "RED",
  "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="resolve-uri" prefix="fn">
      <fos:signatures>
         <fos:proto name="resolve-uri" return-type="xs:anyURI?">
            <fos:arg name="href" type="xs:string?"/>
            <fos:arg name="base" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Resolves a relative IRI reference against an absolute IRI.</p>
      </fos:summary>
      <fos:rules>


         <p>The function is defined to operate on IRI references as defined in <bibref ref="rfc3987"
               />, and the implementation <rfc2119>must</rfc2119> permit all arguments that are valid
            according to that specification. In addition, the implementation <rfc2119>may</rfc2119>
            accept some or all strings that conform to the rules for (absolute or relative) Legacy
            Extended IRI references as defined in <bibref
               ref="LEIRI"
            />. For the purposes of this
            section, the terms IRI and IRI reference include these extensions, insofar as the
            implementation chooses to support them.</p>

         <p>The following rules apply in order:</p>

         <olist>
            <item>
               <p>If <code>$href</code> is the empty sequence, the function returns the empty
               sequence.</p>
            </item>
            <item>
               <p>If <code>$href</code> is an absolute IRI (as defined above), then it is returned
               unchanged.</p>
            </item>
            <item>
               <p>If the <code>$base</code> argument is not supplied, 
                  <phrase diff="add" at="2022-12-19">or is supplied as an empty sequence</phrase> then:</p>
               <olist>
                  <item>
                     <p>If the static base URI in the static context is not absent, it is used as the effective
               value of <code>$base</code>.</p>
                  </item>
                  <item>
                     <p>Otherwise, a dynamic error is raised: <phrase><errorref class="NS"
                              code="0005"/></phrase>.</p>
                  </item>
               </olist>
            </item>
            <item>
               <p>The function resolves the relative IRI reference <code>$href</code>
               against the base IRI <code>$base</code> using the algorithm defined in <bibref
                     ref="rfc3986"/>, adapted by treating any <termref def="character"
                     >character</termref>
               that would not be valid in an RFC3986 URI or relative reference in the same way that
               RFC3986 treats unreserved characters. No percent-encoding takes place.</p>
            </item>
         </olist>
      </fos:rules>
      <fos:errors>
         <p>The first form of this function resolves <code>$href</code> against the value of the
            base-uri property from the static context. A dynamic error is raised <errorref
               class="NS" code="0005"
            /> if the base-uri property is not initialized in the static
            context. </p>
         <p>A dynamic error is raised <errorref class="RG" code="0002"
            /> if <code>$href</code>
            is not a valid IRI according to the rules of RFC3987, extended with an
            implementation-defined subset of the extensions permitted in LEIRI, or if it is not a
            suitable relative reference to use as input to the RFC3986 resolution algorithm extended
            to handle additional unreserved characters. </p>
         <p>A dynamic error is raised <errorref class="RG" code="0002"
            /> if <code>$base</code> is
            not a valid IRI according to the rules of RFC3987, extended with an
            implementation-defined subset of the extensions permitted in LEIRI, or if it is not a
            suitable IRI to use as input to the chosen resolution algorithm (for example, if it is a
            relative IRI reference<phrase diff="add" at="2023-04-04"> or</phrase><phrase
            diff="del" at="2023-04-04">,</phrase> if it is a non-hierarchic URI<phrase
            diff="del" at="2023-04—04">, or if it contains a fragment
            identifier</phrase>).<phrase diff="add" at="2023-04-04"> In XPath 4.0, attempting
         to resolve against an absolute URI that includes a fragment identifier is no longer
         an error, the fragment identifier is simply ignored. A narrow reading of RFC 3986
         might seem to forbid this, but in practice the interpretation is non-controversial
         and the practice is widely supported.</phrase></p>
         <p>A dynamic error is raised <errorref class="RG" code="0009"
            /> if the chosen resolution
            algorithm fails for any other reason. </p>
      </fos:errors>
      <fos:notes>
         <p>Resolving a URI does not dereference it. This is merely a syntactic operation on two
               <termref
               def="string">strings</termref>.</p>
         <p>The algorithms in the cited RFCs include some variations that are optional or
            recommended rather than mandatory; they also describe some common practices that are not
            recommended, but which are permitted for backwards compatibility. Where the cited RFCs
            permit variations in behavior, so does this specification. </p>
         <p>Throughout this family of specifications, the phrase "resolving a relative URI (or IRI)
            reference" should be understood as using the rules of this function, unless otherwise
            stated.</p>
         <p>RFC3986 defines an algorithm for resolving relative references 
            in the context of the URI syntax defined in that RFC. RFC3987 describes a modification 
            to that algorithm to make it applicable to IRIs (specifically: additional characters 
            permitted in an IRI are handled the same way that RFC3986 handles unreserved characters). 
            The LEIRI specification does not explicitly define a resolution algorithm, but suggests 
            that it <emph>should not</emph> be done by converting the LEIRI to a URI, and 
            <emph>should not</emph> involve percent-encoding. This specification fills this gap 
            by defining resolution for LEIRIs in the same way that RFC3987 defines resolution for IRIs,
            that is by specifying that additional characters are handled as unreserved characters.</p>
      </fos:notes>
      <fos:history>
         <fos:version version="4.0">The optional second argument can now be supplied as an empty sequence.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="true" prefix="fn">
      <fos:signatures>
         <fos:proto name="true" return-type="xs:boolean"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:boolean</code> value <code>true</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>The result is equivalent to <code>xs:boolean("1")</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>true()</fos:expression>
               <fos:result>xs:boolean(1)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="false" prefix="fn">
      <fos:signatures>
         <fos:proto name="false" return-type="xs:boolean"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:boolean</code> value <code>false</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>The result is equivalent to <code>xs:boolean("0")</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>false()</fos:expression>
               <fos:result>xs:boolean(0)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="boolean-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="boolean-equal" return-type="xs:boolean">
            <fos:arg name="value1" type="xs:boolean"/>
            <fos:arg name="value2" type="xs:boolean"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="xs:boolean numeric"
            >Defines the semantics of the <code>eq</code>
         operator when applied to two <code>xs:boolean</code> values.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if the two arguments are the same boolean value.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>true</code> if both arguments are <code>true</code> or if
            both arguments are <code>false</code>. It returns <code>false</code> if one of the
            arguments is <code>true</code> and the other argument is <code>false</code>. </p>
      </fos:rules>
   </fos:function>
   <fos:function name="boolean-less-than" prefix="op">
      <fos:signatures>
         <fos:proto name="boolean-less-than" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:boolean"/>
            <fos:arg name="arg2" type="xs:boolean"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="lt" types="xs:boolean numeric" other-operators="ge"
            >Defines the
         semantics of the <code>lt</code> operator when applied to two <code>xs:boolean</code> values. Also
         used in the definition of the <code>ge</code> operator.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if the first argument is <code>false</code> and the second is <code>true</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>true</code> if <code>$arg1</code> is <code>false</code> and
               <code>$arg2</code> is <code>true</code>. Otherwise, it returns
            <code>false</code>.</p>
      </fos:rules>
   </fos:function>

   <fos:function name="boolean" prefix="fn">
      <fos:signatures>
         <fos:proto name="boolean" return-type="xs:boolean">
            <fos:arg name="input" type="item()*" usage="inspection" example="42"/>
         </fos:proto>
      </fos:signatures>
      <fos:summary>
         <p>Computes the effective boolean value of the sequence <code>$input</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>The function computes the effective boolean value of a sequence, defined according to
            the following rules. See also <xspecref
               spec="XP31" ref="id-ebv"/>.</p>
         <ulist>
            <item>
               <p>If <code>$input</code> is the empty sequence, <code>fn:boolean</code> returns
                     <code>false</code>.</p>
            </item>
            <item>
               <p>If <code>$input</code> is a sequence whose first item is a node,
                     <code>fn:boolean</code> returns <code>true</code>.</p>
            </item>
            <item>
               <p>If <code>$input</code> is a singleton value of type <code>xs:boolean</code> or a
                  derived from <code>xs:boolean</code>, <code>fn:boolean</code> returns
                     <code>$input</code>.</p>
            </item>
            <item>
               <p>If <code>$input</code> is a singleton value of type <code>xs:string</code> or a type
                  derived from <code>xs:string</code>, <code>xs:anyURI</code> or a type derived from
                     <code>xs:anyURI</code>, or <code>xs:untypedAtomic</code>,
                     <code>fn:boolean</code> returns <code>false</code> if the operand value has
                  zero length; otherwise it returns <code>true</code>.</p>
            </item>
            <item>
               <p>If <code>$input</code> is a singleton value of any numeric type or a type derived
                  from a numeric type, <code>fn:boolean</code> returns <code>false</code> if the
                  operand value is <code>NaN</code> or is numerically equal to zero; otherwise it
                  returns <code>true</code>.</p>
            </item>
         </ulist>
      </fos:rules>
      <fos:errors>
         <p>In all cases other than those listed above, <code>fn:boolean</code> raises a type error <errorref
               class="RG" code="0006"/>.</p>
      </fos:errors>
      <fos:notes>
         <p>The result of this function is not necessarily the same as <code>$input cast as
               xs:boolean</code>. For example, <code>fn:boolean("false")</code> returns the value
               <code>true</code> whereas <code>"false" cast as xs:boolean</code> (which can also be
            written <code>xs:boolean("false")</code>) returns <code>false</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="abc" id="v-boolean-abc"
            select="(&quot;a&quot;, &quot;b&quot;, &quot;&quot;)"/>
         <fos:example>
            <fos:test use="v-boolean-abc">
               <fos:expression>boolean($abc[1])</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-boolean-abc">
               <fos:expression>boolean($abc[0])</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-boolean-abc">
               <fos:expression>boolean($abc[3])</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p><code>fn:boolean($abc)</code> raises a type error <errorref class="RG" code="0006"
               />.</p>
         </fos:example>
         <fos:example>
            <p><code>fn:boolean([])</code> raises a type error <errorref class="RG" code="0006"
               />.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="not" prefix="fn">
      <fos:signatures>
         <fos:proto name="not" return-type="xs:boolean">
            <fos:arg name="input" type="item()*" usage="inspection" example="42"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the effective boolean value of <code>$input</code> is
               <code>false</code>, or <code>false</code> if it is <code>true</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>The value of <code>$input</code> is first reduced to an effective boolean value by
            applying the <code>fn:boolean()</code> function. The function returns <code>true</code>
            if the effective boolean value is <code>false</code>, or <code>false</code> if the
            effective boolean value is <code>true</code>. </p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>not(true())</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>not(())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>not("false")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p><code>fn:not(1 to 10)</code> raises a type error <errorref class="RG" code="0006"
               />.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   
   <fos:function name="yearMonthDuration-less-than" prefix="op">
      <fos:signatures>
         <fos:proto name="yearMonthDuration-less-than" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:yearMonthDuration"/>
            <fos:arg name="arg2" type="xs:yearMonthDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="lt" types="xs:yearMonthDuration numeric" other-operators="ge"
            >Defines
         the semantics of the <code>lt</code> operator when applied to two <code>xs:yearMonthDuration</code>
         values. Also used in the definition of the <code>ge</code> operator.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if <code>$arg1</code> is a shorter duration than <code>$arg2</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If the number of months in <code>$arg1</code> is numerically less than the
            number of months in <code>$arg2</code>, the function returns <code>true</code>.</p>
         <p>Otherwise, the function returns <code>false</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>Either or both durations may be negative.</p>
      </fos:notes>
   </fos:function>

   <fos:function name="dayTimeDuration-less-than" prefix="op">
      <fos:signatures>
         <fos:proto name="dayTimeDuration-less-than" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:dayTimeDuration"/>
            <fos:arg name="arg2" type="xs:dayTimeDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="lt" types="xs:dayTimeDuration numeric" other-operators="ge"
            >Defines the
         semantics of the <code>lt</code> operator when applied to two <code>xs:dayTimeDuration</code> values.
         Also used in the definition of the <code>ge</code> operator.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if <code>$arg1</code> is a shorter duration than <code>$arg2</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If the number of seconds in <code>$arg1</code> is numerically less than the
            number of seconds in <code>$arg2</code>, the function returns <code>true</code>.</p>
         <p>Otherwise, the function returns <code>false</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>Either or both durations may be negative</p>
      </fos:notes>
   </fos:function>

   <fos:function name="duration-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="duration-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:duration"/>
            <fos:arg name="arg2" type="xs:duration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="xs:duration numeric" other-operators="ne"
            >Defines the
         semantics of the <code>eq</code> operators when applied to two <code>xs:duration</code> values. Also
         used in the definition of the <code>ne</code> operator.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if <code>$arg1</code> and <code>$arg2</code> are durations of the same
            length.</p>
      </fos:summary>
      <fos:rules>
         <p>If the <code>xs:yearMonthDuration</code> components of <code>$arg1</code> and
               <code>$arg2</code> are equal and the <code>xs:dayTimeDuration</code> components of
               <code>$arg1</code> and <code>$arg2</code> are equal, the function returns
               <code>true</code>.</p>
         <p>Otherwise, the function returns <code>false</code>.</p>
         <p>The semantics of this function are:</p>
         <eg xml:space="preserve">
xs:yearMonthDuration($arg1) div xs:yearMonthDuration('P1M')  eq
xs:yearMonthDuration($arg2) div xs:yearMonthDuration('P1M')
    and
xs:dayTimeDuration($arg1) div xs:dayTimeDuration('PT1S')  eq
xs:dayTimeDuration($arg2) div xs:dayTimeDuration('PT1S')
</eg>
         <p>that is, the function returns <code>true</code> if the months and seconds values of the
            two durations are equal.</p>
      </fos:rules>
      <fos:notes>
         <p>Note that this function, like any other, may be applied to arguments that are derived
            from the types given in the function signature, including the two subtypes
               <code>xs:dayTimeDuration</code> and <code>xs:yearMonthDuration</code>. With the
            exception of the zero-length duration, no instance of <code>xs:dayTimeDuration</code>
            can ever be equal to an instance of <code>xs:yearMonthDuration</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:duration-equal(
  xs:duration("P1Y"),
  xs:duration("P12M")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:duration-equal(
  xs:duration("PT24H"),
  xs:duration("P1D")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:duration-equal(
  xs:duration("P1Y"),
  xs:duration("P365D")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:duration-equal(
  xs:yearMonthDuration("P0Y"),
  xs:dayTimeDuration("P0D")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:duration-equal(
  xs:yearMonthDuration("P1Y"),
  xs:dayTimeDuration("P365D")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:duration-equal(
  xs:yearMonthDuration("P2Y"),
  xs:yearMonthDuration("P24M")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:duration-equal(
  xs:dayTimeDuration("P10D"),
  xs:dayTimeDuration("PT240H")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:duration-equal(
  xs:duration("P2Y0M0DT0H0M0S"),
  xs:yearMonthDuration("P24M")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:duration-equal(
  xs:duration("P0Y0M10D"),
  xs:dayTimeDuration("PT240H")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="years-from-duration" prefix="fn">
      <fos:signatures>
         <fos:proto name="years-from-duration" return-type="xs:integer?">
            <fos:arg name="value" type="xs:duration?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the number of years in a duration.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> representing the years
            component in <code>$value</code>. Given that a duration
            is a <code>($months, $seconds)</code> tuple, the result is the value of <code>($months idiv 12)</code>.</p>
         <p>If <code>$value</code> is a negative duration then the result will be negative.</p>
         <p>If <code>$value</code> is an <code>xs:dayTimeDuration</code> the function
            returns <code>0</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>years-from-duration(
  xs:yearMonthDuration("P20Y15M")
)</eg></fos:expression>
               <fos:result>21</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>years-from-duration(
  xs:yearMonthDuration("-P15M")
)</eg></fos:expression>
               <fos:result>-1</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>years-from-duration(
  xs:dayTimeDuration("-P2DT15H")
)</eg></fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="months-from-duration" prefix="fn">
      <fos:signatures>
         <fos:proto name="months-from-duration" return-type="xs:integer?">
            <fos:arg name="value" type="xs:duration?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the number of months in a duration.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> representing the months
            component in <code>$value</code>. Given that a duration
               is a <code>($months, $seconds)</code> tuple, the result is the value of <code>($months mod 12)</code>.</p>
         <p>If <code>$value</code> is a negative duration then the result will be negative.</p>
         <p>If <code>$value</code> is an <code>xs:dayTimeDuration</code> the function
            returns <code>0</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>months-from-duration(
  xs:yearMonthDuration("P20Y15M")
)</eg></fos:expression>
               <fos:result>3</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>months-from-duration(
  xs:yearMonthDuration("-P20Y18M")
)</eg></fos:expression>
               <fos:result>-6</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>months-from-duration(
  xs:dayTimeDuration("-P2DT15H0M0S")
)</eg></fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="days-from-duration" prefix="fn">
      <fos:signatures>
         <fos:proto name="days-from-duration" return-type="xs:integer?">
            <fos:arg name="value" type="xs:duration?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the number of days in a duration.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> representing the days
            component in <code>$value</code>. Given that a duration
               is a <code>($months, $seconds)</code> tuple, the result is <code>($seconds idiv 86400)</code>.</p>
         <p>If <code>$value</code> is a negative duration then the result will be negative.</p>
         <p>If <code>$value</code> is an <code>xs:yearMonthDuration</code> the function returns <code>0</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>days-from-duration(
  xs:dayTimeDuration("P3DT10H")
)</eg></fos:expression>
               <fos:result>3</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>days-from-duration(
  xs:dayTimeDuration("P3DT55H")
)</eg></fos:expression>
               <fos:result>5</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>days-from-duration(
  xs:yearMonthDuration("P3Y5M")
)</eg></fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="hours-from-duration" prefix="fn">
      <fos:signatures>
         <fos:proto name="hours-from-duration" return-type="xs:integer?">
            <fos:arg name="value" type="xs:duration?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the number of hours in a duration.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> representing the hours
            component in <code>$value</code>. <phrase>Given that a duration
               is a <code>($months, $seconds)</code> tuple, the result is the value of <code>($seconds mod 86400) idiv 3600</code></phrase>.</p>
         <p>If <code>$value</code> is a negative duration then the result will be negative.</p>
         <p>If <code>$value</code> is an <code>xs:yearMonthDuration</code> the function returns <code>0</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>hours-from-duration(
  xs:dayTimeDuration("P3DT10H")
)</eg></fos:expression>
               <fos:result>10</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>hours-from-duration(
  xs:dayTimeDuration("P3DT12H32M12S")
)</eg></fos:expression>
               <fos:result>12</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>hours-from-duration(
  xs:dayTimeDuration("PT123H")
)</eg></fos:expression>
               <fos:result>3</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>hours-from-duration(
  xs:dayTimeDuration("-P3DT10H")
)</eg></fos:expression>
               <fos:result>-10</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="minutes-from-duration" prefix="fn">
      <fos:signatures>
         <fos:proto name="minutes-from-duration" return-type="xs:integer?">
            <fos:arg name="value" type="xs:duration?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the number of minutes in a duration.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> representing the minutes
            component in  <code>$value</code>. Given that a duration
               is a <code>($months, $seconds)</code> tuple, the result is the value of <code>($seconds mod 3600) idiv 60</code>.</p>
         <p>If <code>$value</code> is a negative duration then the result will be negative.</p>
         <p>If <code>$value</code> is an <code>xs:yearMonthDuration</code> the function returns <code>0</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>minutes-from-duration(
  xs:dayTimeDuration("P3DT10H")
)</eg></fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>minutes-from-duration(
  xs:dayTimeDuration("-P5DT12H30M")
)</eg></fos:expression>
               <fos:result>-30</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="seconds-from-duration" prefix="fn">
      <fos:signatures>
         <fos:proto name="seconds-from-duration" return-type="xs:decimal?">
            <fos:arg name="value" type="xs:duration?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the number of seconds in a duration.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:decimal</code> representing the seconds
            component in <code>$value</code>. Given that a duration
               is a <code>($months, $seconds)</code> tuple, the result is the value of <code>($seconds mod 60)</code>
            as an <code>xs:decimal</code>.</p>
         <p>If <code>$value</code> is a negative duration then the result will be negative.</p>
         <p>If <code>$value</code> is an <code>xs:yearMonthDuration</code> the function returns <code>0</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>seconds-from-duration(
  xs:dayTimeDuration("P3DT10H12.5S")
)</eg></fos:expression>
               <fos:result>12.5</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>seconds-from-duration(
  xs:dayTimeDuration("-PT256S")
)</eg></fos:expression>
               <fos:result>-16.0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="add-yearMonthDurations" prefix="op">
      <fos:signatures>
         <fos:proto name="add-yearMonthDurations" return-type="xs:yearMonthDuration">
            <fos:arg name="arg1" type="xs:yearMonthDuration"/>
            <fos:arg name="arg2" type="xs:yearMonthDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="+" types="xs:yearMonthDuration numeric"
            >Defines the semantics of the
         <code>+</code> operator when applied to two <code>xs:yearMonthDuration</code> values.</fos:opermap>
      <fos:summary>
         <p>Returns the result of adding two <code>xs:yearMonthDuration</code> values. </p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of adding <code>$arg1</code> to <code>$arg2</code>. 
            The result will be an <code>xs:yearMonthDuration</code> whose
            length in months is equal to the length in months of <code>$arg1</code> plus the length
            in months of <code>$arg2</code>.</p>
         <p>For handling of overflow, see <specref ref="duration-limits"/>.</p>
      </fos:rules>
      <fos:notes>
         <p>Either duration (and therefore the result) may be negative.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:add-yearMonthDurations(
  xs:yearMonthDuration("P2Y11M"),
  xs:yearMonthDuration("P3Y3M")
)</eg></fos:expression>
               <fos:result>xs:yearMonthDuration("P6Y2M")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="subtract-yearMonthDurations" prefix="op">
      <fos:signatures>
         <fos:proto name="subtract-yearMonthDurations" return-type="xs:yearMonthDuration">
            <fos:arg name="arg1" type="xs:yearMonthDuration"/>
            <fos:arg name="arg2" type="xs:yearMonthDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="-" types="xs:yearMonthDuration numeric"
            >Defines the semantics of the
         <code>-</code> operator when applied to two <code>xs:yearMonthDuration</code> values.</fos:opermap>
      <fos:summary>
         <p>Returns the result of subtracting one <code>xs:yearMonthDuration</code> value from
            another. </p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of subtracting <code>$arg2</code> from 
            <code>$arg1</code>. The result will be an <code>xs:yearMonthDuration</code>
            whose length in months is equal to the length in months of <code>$arg1</code> minus the
            length in months of <code>$arg2</code>.</p>
         <p>For handling of overflow, see <specref ref="duration-limits"/>.</p>
      </fos:rules>
      <fos:notes>
         <p>Either duration (and therefore the result) may be negative.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-yearMonthDurations(
  xs:yearMonthDuration("P2Y11M"),
  xs:yearMonthDuration("P3Y3M")
)</eg></fos:expression>
               <fos:result>xs:yearMonthDuration("-P4M")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="multiply-yearMonthDuration" prefix="op">
      <fos:signatures>
         <fos:proto name="multiply-yearMonthDuration" return-type="xs:yearMonthDuration">
            <fos:arg name="arg1" type="xs:yearMonthDuration"/>
            <fos:arg name="arg2" type="xs:double"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="*" types="xs:yearMonthDuration numeric"
            >Defines the semantics of the
         <code>*</code> operator when applied to an <code>xs:yearMonthDuration</code> and a numeric
         value.</fos:opermap>
      <fos:summary>
         <p>Returns the result of multiplying  <code>$arg1</code> by <code>$arg2</code>.
            The result is rounded to the nearest month.</p>
      </fos:summary>
      <fos:rules>
         <p>The result is the <code>xs:yearMonthDuration</code> whose length in months is equal to
            the result of applying the <code>fn:round</code> function to the value obtained by
            multiplying the length in months of <code>$arg1</code> by the value of
               <code>$arg2</code>.</p>
         <p>If <code>$arg2</code> is positive or negative zero, the result is a zero-length
            duration. If <code>$arg2</code> is positive or negative infinity, the result overflows
            and is handled as described in <specref
               ref="duration-limits"/>. </p>
         <p>For handling of overflow and underflow, see <specref ref="duration-limits"/>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="CA" code="0005"
               /> if <code>$arg2</code> is
               <code>NaN</code>.</p>
      </fos:errors>
      <fos:notes>
         <p>Either duration (and therefore the result) may be negative.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:multiply-yearMonthDuration(
  xs:yearMonthDuration("P2Y11M"),
  2.3
)</eg></fos:expression>
               <fos:result>xs:yearMonthDuration("P6Y9M")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="divide-yearMonthDuration" prefix="op">
      <fos:signatures>
         <fos:proto name="divide-yearMonthDuration" return-type="xs:yearMonthDuration">
            <fos:arg name="arg1" type="xs:yearMonthDuration"/>
            <fos:arg name="arg2" type="xs:double"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="div" types="xs:yearMonthDuration numeric"
            >Defines the semantics of the
         <code>div</code> operator when applied to an <code>xs:yearMonthDuration</code> and a numeric
         value.</fos:opermap>
      <fos:summary>
         <p>Returns the result of dividing <code>$arg1</code> by <code>$arg2</code>.
            The result is rounded to the nearest month.</p>
      </fos:summary>
      <fos:rules>
         <p>The result is the <code>xs:yearMonthDuration</code> whose length in months is equal to
            the result of applying the <code>fn:round</code> function to the value obtained by
            dividing the length in months of <code>$arg1</code> by the value of
            <code>$arg2</code>.</p>
         <p>If <code>$arg2</code> is positive or negative infinity, the result is a zero-length
            duration. If <code>$arg2</code> is positive or negative zero, the result overflows and
            is handled as described in <specref
               ref="duration-limits"/>. </p>
         <p>For handling of overflow and underflow, see <specref ref="duration-limits"/>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="CA" code="0005"
               /> if <code>$arg2</code> is
               <code>NaN</code>.</p>
      </fos:errors>
      <fos:notes>
         <p>Either operand (and therefore the result) may be negative.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:divide-yearMonthDuration(
  xs:yearMonthDuration("P2Y11M"),
  1.5
)</eg></fos:expression>
               <fos:result>xs:yearMonthDuration("P1Y11M")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="divide-yearMonthDuration-by-yearMonthDuration" prefix="op">
      <fos:signatures>
         <fos:proto name="divide-yearMonthDuration-by-yearMonthDuration" return-type="xs:decimal">
            <fos:arg name="arg1" type="xs:yearMonthDuration"/>
            <fos:arg name="arg2" type="xs:yearMonthDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="div" types="xs:yearMonthDuration numeric"
            >Defines the semantics of the
         <code>div</code> operator when applied to two <code>xs:yearMonthDuration</code> values.</fos:opermap>
      <fos:summary>
         <p>Returns the ratio of two <code>xs:yearMonthDuration</code> values.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of dividing the length in months of <code>$arg1</code>
            by the length in months of <code>$arg2</code>, according to the rules of the
               <code>op:numeric-divide</code> function for integer operands.</p>
         <p>For handling of overflow and underflow, see <specref ref="duration-limits"/>.</p>
      </fos:rules>
      <fos:notes>
         <p>Either duration (and therefore the result) may be negative.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:divide-yearMonthDuration-by-yearMonthDuration(
  xs:yearMonthDuration("P3Y4M"),
  xs:yearMonthDuration("-P1Y4M")
)</eg></fos:expression>
               <fos:result>-2.5</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The following example demonstrates how to calculate the length of an
                  <code>xs:yearMonthDuration</code> value in months:</p>
            <fos:test>
               <fos:expression><eg>op:divide-yearMonthDuration-by-yearMonthDuration(
  xs:yearMonthDuration("P3Y4M"),
  xs:yearMonthDuration("P1M")
)</eg></fos:expression>
               <fos:result>40</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="add-dayTimeDurations" prefix="op">
      <fos:signatures>
         <fos:proto name="add-dayTimeDurations" return-type="xs:dayTimeDuration">
            <fos:arg name="arg1" type="xs:dayTimeDuration"/>
            <fos:arg name="arg2" type="xs:dayTimeDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="+" types="xs:dayTimeDuration numeric"
            >Defines the semantics of the <code>+</code>
         operator when applied to two <code>xs:dayTimeDuration</code> values.</fos:opermap>
      <fos:summary>
         <p>Returns the sum of two <code>xs:dayTimeDuration</code> values.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of adding <code>$arg1</code> to 
            <code>$arg2</code>. The result is the <code>xs:dayTimeDuration</code> whose length in
            seconds is equal to the sum of the length in seconds of the two input durations.</p>
         <p>For handling of overflow, see <specref ref="duration-limits"/>.</p>
      </fos:rules>
      <fos:notes>
         <p>Either duration (and therefore the result) may be negative.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:add-dayTimeDurations(
  xs:dayTimeDuration("P2DT12H5M"),
  xs:dayTimeDuration("P5DT12H")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration('P8DT5M')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="subtract-dayTimeDurations" prefix="op">
      <fos:signatures>
         <fos:proto name="subtract-dayTimeDurations" return-type="xs:dayTimeDuration">
            <fos:arg name="arg1" type="xs:dayTimeDuration"/>
            <fos:arg name="arg2" type="xs:dayTimeDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="-" types="xs:dayTimeDuration numeric"
            >Defines the semantics of the <code>-</code>
         operator when applied to two <code>xs:dayTimeDuration</code> values.</fos:opermap>
      <fos:summary>
         <p>Returns the result of subtracting one <code>xs:dayTimeDuration</code> from another.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of subtracting <code>$arg2</code> from 
            <code>$arg1</code>. The result is the <code>xs:dayTimeDuration</code> whose
            length in seconds is equal to the length in seconds of <code>$arg1</code> minus the
            length in seconds of <code>$arg2</code>.</p>
         <p>For handling of overflow, see <specref ref="duration-limits"/>.</p>
      </fos:rules>
      <fos:notes>
         <p>Either duration (and therefore the result) may be negative.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-dayTimeDurations(
  xs:dayTimeDuration("P2DT12H"),
  xs:dayTimeDuration("P1DT10H30M")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration('P1DT1H30M')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="multiply-dayTimeDuration" prefix="op">
      <fos:signatures>
         <fos:proto name="multiply-dayTimeDuration" return-type="xs:dayTimeDuration">
            <fos:arg name="arg1" type="xs:dayTimeDuration"/>
            <fos:arg name="arg2" type="xs:double"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="*" types="xs:dayTimeDuration numeric"
            >Defines the semantics of the <code>*</code>
         operator when applied to an <code>xs:dayTimeDuration</code> and a numeric
         value.</fos:opermap>
      <fos:summary>
         <p>Returns the result of multiplying a <code>xs:dayTimeDuration</code> by a number.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of multiplying <code>$arg1</code> by
               <code>$arg2</code>. The result is the <code>xs:dayTimeDuration</code> whose length in
            seconds is equal to the length in seconds of <code>$arg1</code> multiplied by the
            numeric value <code>$arg2</code>.</p>
         <!--<ednote>
            <edtext>We ought to say whether the calculation is performed using double or decimal
               arithmetic.</edtext>
         </ednote>-->
         <p>If <code>$arg2</code> is positive or negative zero, the result is a zero-length
            duration. If <code>$arg2</code> is positive or negative infinity, the result overflows
            and is handled as described in <specref
               ref="date-time-duration-conformance"/>. </p>
         <p>For handling of overflow and underflow, see <specref ref="duration-limits"/>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="CA" code="0005"
               /> if <code>$arg2</code> is
               <code>NaN</code>.</p>
      </fos:errors>
      <fos:notes>
         <p>Either operand (and therefore the result) may be negative.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:multiply-dayTimeDuration(
  xs:dayTimeDuration("PT2H10M"),
  2.1
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration('PT4H33M')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="divide-dayTimeDuration" prefix="op">
      <fos:signatures>
         <fos:proto name="divide-dayTimeDuration" return-type="xs:dayTimeDuration">
            <fos:arg name="arg1" type="xs:dayTimeDuration"/>
            <fos:arg name="arg2" type="xs:double"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="div" types="xs:dayTimeDuration numeric"
            >Defines the semantics of the
         <code>div</code> operator when applied to two <code>xs:dayTimeDuration</code> values.</fos:opermap>
      <fos:summary>
         <p>Returns the result of multiplying a <code>xs:dayTimeDuration</code> by a number.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of dividing <code>$arg1</code> by
               <code>$arg2</code>. The result is the <code>xs:dayTimeDuration</code> whose length in
            seconds is equal to the length in seconds of <code>$arg1</code> divided by the numeric
            value <code>$arg2</code>.</p>
         <p>If <code>$arg2</code> is positive or negative infinity, the result is a zero-length
            duration. If <code>$arg2</code> is positive or negative zero, the result overflows and
            is handled as described in <specref
               ref="date-time-duration-conformance"/>. </p>
         <!--<ednote>
            <edtext>We ought to say whether the calculation is performed using double or decimal
               arithmetic.</edtext>
         </ednote>-->
         <p>For handling of overflow and underflow, see <specref ref="duration-limits"/>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="CA" code="0005"
               /> if <code>$arg2</code> is
               <code>NaN</code>.</p>
      </fos:errors>
      <fos:notes>
         <p>Either operand (and therefore the result) may be negative.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:divide-dayTimeDuration(
  xs:dayTimeDuration("P1DT2H30M10.5S"),
  1.5
)</eg></fos:expression>
               <fos:result>xs:duration("PT17H40M7S")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="divide-dayTimeDuration-by-dayTimeDuration" prefix="op">
      <fos:signatures>
         <fos:proto name="divide-dayTimeDuration-by-dayTimeDuration" return-type="xs:decimal">
            <fos:arg name="arg1" type="xs:dayTimeDuration"/>
            <fos:arg name="arg2" type="xs:dayTimeDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="div" types="xs:dayTimeDuration numeric"
            >Defines the semantics of the
         <code>div</code> operator when applied to two <code>xs:dayTimeDuration</code> values.</fos:opermap>
      <fos:summary>
         <p>Returns the ratio of two <code>xs:dayTimeDuration</code> values, as a decimal
            number.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of dividing <code>$arg1</code> by
               <code>$arg2</code>. The result is the <code>xs:dayTimeDuration</code> whose length in
            seconds is equal to the length in seconds of <code>$arg1</code> divided by the length in
            seconds of <code>$arg2</code>. The calculation is performed by applying
               <code>op:numeric-divide</code> to the two <code>xs:decimal</code> operands.</p>
         <p>For handling of overflow and underflow, see <specref ref="duration-limits"/>.</p>
      </fos:rules>
      <fos:notes>
         <p>Either operand (and therefore the result) may be negative.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>round-half-to-even(
  op:divide-dayTimeDuration-by-dayTimeDuration(
    xs:dayTimeDuration("P2DT53M11S"), xs:dayTimeDuration("P1DT10H")
  ),
  4
)</eg></fos:expression>
               <fos:result>1.4378</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>This examples shows how to determine the number of seconds in a duration.</p>
            <fos:test>
               <fos:expression><eg>op:divide-dayTimeDuration-by-dayTimeDuration(
  xs:dayTimeDuration("P2DT53M11S"),
  xs:dayTimeDuration("PT1S")
)</eg></fos:expression>
               <fos:result>175991.0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="dateTime" prefix="fn">
      <fos:signatures>
         <fos:proto name="dateTime" return-type="xs:dateTime?">
            <fos:arg name="date" type="xs:date?"/>
            <fos:arg name="time" type="xs:time?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an <code>xs:dateTime</code> value created by combining an <code>xs:date</code>
            and an <code>xs:time</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If either <code>$date</code> or <code>$time</code> is the empty sequence the function
            returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:dateTime</code> whose date component is
            equal to <code>$date</code> and whose time component is equal to <code>$time</code>.</p>
         <p>The timezone of the result is computed as follows:</p>
         <ulist>
            <item>
               <p>If neither argument has a timezone, the result has no timezone.</p>
            </item>
            <item>
               <p>If exactly one of the arguments has a timezone, or if both arguments have the same
                  timezone, the result has this timezone.</p>
            </item>
         </ulist>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="RG" code="0008"
            /> if the two arguments both
            have timezones and the timezones are different. </p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>dateTime(
  xs:date("1999-12-31"),
  xs:time("12:00:00")
)</eg></fos:expression>
               <fos:result>xs:dateTime("1999-12-31T12:00:00")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>dateTime(
  xs:date("1999-12-31"),
  xs:time("24:00:00")
)</eg></fos:expression>
               <fos:result>xs:dateTime("1999-12-31T00:00:00")</fos:result>
               <fos:postamble>This is because <code>"24:00:00"</code> is an alternate lexical form
                  for <code>"00:00:00"</code></fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="dateTime-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="dateTime-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:dateTime"/>
            <fos:arg name="arg2" type="xs:dateTime"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="xs:dateTime numeric" other-operators="ne le ge"
            >Defines the
         semantics of the <code>eq</code> operator when applied to two <code>xs:dateTime</code> values. Also
         used in the definition of the <code>ne</code>, <code>le</code> and <code>ge</code> operators.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the two supplied <code>xs:dateTime</code> values refer to the same
            instant in time.</p>
      </fos:summary>
      <fos:rules>
         <p>If either <code>$arg1</code> or <code>$arg2</code> has no timezone component, the
            effective value of the argument is obtained by substituting the implicit timezone from
            the dynamic evaluation context.</p>
         <p>The function then returns <code>true</code> if and only if the effective value of
               <code>$arg1</code> is equal to the effective value of <code>$arg2</code> according to
            the algorithm defined in section 3.2.7.4 of <bibref
               ref="xmlschema-2"/>
            <quote>Order relation on dateTime</quote> for <code>xs:dateTime</code> values with
            timezones. Otherwise the function returns <code>false</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>Assume that the dynamic context provides an implicit timezone value of
                  <code>-05:00</code></p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:dateTime-equal(
  xs:dateTime("2002-04-02T12:00:00-01:00"),
  xs:dateTime("2002-04-02T17:00:00+04:00")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression><eg>op:dateTime-equal(
  xs:dateTime("2002-04-02T12:00:00"),
  xs:dateTime("2002-04-02T23:00:00+06:00")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:dateTime-equal(
  xs:dateTime("2002-04-02T12:00:00"),
  xs:dateTime("2002-04-02T17:00:00")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:dateTime-equal(
  xs:dateTime("2002-04-02T12:00:00"),
  xs:dateTime("2002-04-02T12:00:00")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:dateTime-equal(
  xs:dateTime("2002-04-02T23:00:00-04:00"),
  xs:dateTime("2002-04-03T02:00:00-01:00")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:dateTime-equal(
  xs:dateTime("1999-12-31T24:00:00"),
  xs:dateTime("2000-01-01T00:00:00")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:dateTime-equal(
  xs:dateTime("2005-04-04T24:00:00"),
  xs:dateTime("2005-04-04T00:00:00")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="dateTime-less-than" prefix="op">
      <fos:signatures>
         <fos:proto name="dateTime-less-than" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:dateTime"/>
            <fos:arg name="arg2" type="xs:dateTime"/>
         </fos:proto>
      </fos:signatures>

      <fos:opermap operator="lt" types="xs:dateTime numeric" other-operators="ge"
            >Defines the
         semantics of the <code>lt</code> operator when applied to two <code>xs:dateTime</code> values. Also
         used in the definition of the <code>ge</code> operator.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the first argument represents an earlier instant in time
            than the second argument.</p>
      </fos:summary>
      <fos:rules>
         <p>If either <code>$arg1</code> or <code>$arg2</code> has no timezone component, the
            effective value of the argument is obtained by substituting the implicit timezone from
            the dynamic evaluation context.</p>
         <p>The function then returns <code>true</code> if and only if the effective value of
               <code>$arg1</code> is less than the effective value of <code>$arg2</code> according
            to the algorithm defined in section 3.2.7.4 of <bibref
               ref="xmlschema-2"/>
            <quote>Order relation on dateTime</quote> for <code>xs:dateTime</code> values with
            timezones. Otherwise the function returns <code>false</code>.</p>
      </fos:rules>
   </fos:function>

   <fos:function name="date-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="date-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:date"/>
            <fos:arg name="arg2" type="xs:date"/>
         </fos:proto>
      </fos:signatures>

      <fos:opermap operator="eq" types="xs:date numeric" other-operators="ne le ge"
            >Defines the
         semantics of the <code>eq</code> operator when applied to two <code>xs:date</code> values. Also used
         in the definition of the <code>ne</code>, <code>le</code> and <code>ge</code> operators.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if and only if the starting instants of the two supplied
               <code>xs:date</code> values are the same.</p>
      </fos:summary>
      <fos:rules>
         <p>The starting instant of an <code>xs:date</code> is the <code>xs:dateTime</code> at time
               <code>00:00:00</code> on that date.</p>
         <p>The function returns the result of the expression:</p>
         <eg xml:space="preserve">op:dateTime-equal(xs:dateTime($arg1), xs:dateTime($arg2))</eg>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:date-equal(
  xs:date("2004-12-25Z"),
  xs:date("2004-12-25+07:00")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble>The starting instants are
                     <code>xs:dateTime("2004-12-25T00:00:00Z")</code> and
                     <code>xs:dateTime("2004-12-25T00:00:00+07:00")</code>. These are normalized to
                     <code>xs:dateTime("2004-12-25T00:00:00Z")</code> and
                     <code>xs:dateTime("2004-12-24T17:00:00Z")</code>. </fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:date-equal(
  xs:date("2004-12-25-12:00"),
  xs:date("2004-12-26+12:00")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="date-less-than" prefix="op">
      <fos:signatures>
         <fos:proto name="date-less-than" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:date"/>
            <fos:arg name="arg2" type="xs:date"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="lt" types="xs:date numeric" other-operators="ge"
            >Defines the semantics
         of the <code>lt</code> operator when applied to two <code>xs:date</code> values. Also used in the
         definition of the <code>ge</code> operator.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if and only if the starting instant of <code>$arg1</code> is
            less than the starting instant of <code>$arg2</code>. Returns <code>false</code>
            otherwise.</p>
      </fos:summary>
      <fos:rules>
         <p>The starting instant of an <code>xs:date</code> is the <code>xs:dateTime</code> at time
               <code>00:00:00</code> on that date.</p>
         <p>The function returns the result of the expression:</p>
         <eg xml:space="preserve">op:dateTime-less-than(xs:dateTime($arg1), xs:dateTime($arg2))</eg>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:date-less-than(
  xs:date("2004-12-25Z"),
  xs:date("2004-12-25-05:00")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:date-less-than(
  xs:date("2004-12-25-12:00"),
  xs:date("2004-12-26+12:00")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="time-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="time-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:time"/>
            <fos:arg name="arg2" type="xs:time"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="xs:time numeric" other-operators="ne le ge"
            >Defines the
         semantics of the <code>eq</code> operator when applied to two <code>xs:time</code> values. Also used
         in the definition of the <code>ne</code>, <code>le</code> and <code>ge</code> operators.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the two <code>xs:time</code> values represent the same
            instant in time, when treated as being times on the same date, before adjusting the
            timezone.</p>
      </fos:summary>
      <fos:rules>
         <p>Each of the supplied <code>xs:time</code> values is expanded to an
               <code>xs:dateTime</code> value by associating the time with an arbitrary date. The
            function returns the result of comparing these two <code>xs:dateTime</code> values using
               <code>op:dateTime-equal</code>.</p>
         <p>The result of the function is thus the same as the value of the expression:</p>
         <eg xml:space="preserve">op:dateTime-equal(
        dateTime(xs:date('1972-12-31'), $arg1), 
        dateTime(xs:date('1972-12-31'), $arg2))</eg>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>Assume that the date components from the reference <code>xs:dateTime</code>
               correspond to <code>1972-12-31</code>.</p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:time-equal(
  xs:time("08:00:00+09:00"),
  xs:time("17:00:00-06:00")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble>The <code>xs:dateTime</code>s calculated using the reference date
                  components are <code>1972-12-31T08:00:00+09:00</code> and
                     <code>1972-12-31T17:00:00-06:00</code>. These normalize to
                     <code>1972-12-30T23:00:00Z</code> and <code>1972-12-31T23:00:00Z</code>.
               </fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:time-equal(
  xs:time("21:30:00+10:30"),
  xs:time("06:00:00-05:00")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:time-equal(
  xs:time("24:00:00+01:00"),
  xs:time("00:00:00+01:00")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>This not the result one might expect. For <code>xs:dateTime</code>
                  values, a time of <code>24:00:00</code> is equivalent to <code>00:00:00</code> on
                  the following day. For <code>xs:time</code>, the normalization from
                     <code>24:00:00</code> to <code>00:00:00</code> happens before the
                     <code>xs:time</code> is converted into an <code>xs:dateTime</code> for the
                  purpose of the equality comparison. For <code>xs:time</code>, any operation on
                     <code>24:00:00</code> produces the same result as the same operation on
                     <code>00:00:00</code> because these are two different lexical representations
                  of the same value. </fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="time-less-than" prefix="op">
      <fos:signatures>
         <fos:proto name="time-less-than" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:time"/>
            <fos:arg name="arg2" type="xs:time"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="lt" types="xs:time numeric" other-operators="ge"
            >Defines the semantics
         of the <code>lt</code> operator when applied to two <code>xs:time</code> values. Also used in the
         definition of the <code>ge</code> operator.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the first <code>xs:time</code> value represents an earlier
            instant in time than the second, when both are treated as being times on the same date,
            before adjusting the timezone.</p>
      </fos:summary>
      <fos:rules>
         <p>Each of the supplied <code>xs:time</code> values is expanded to an
               <code>xs:dateTime</code> value by associating the time with an arbitrary date. The
            function returns the result of comparing these two <code>xs:dateTime</code> values using
               <code>op:dateTime-less-than</code>.</p>
         <p>The result of the function is thus the same as the value of the expression:</p>
         <eg xml:space="preserve">op:dateTime-less-than(
        dateTime(xs:date('1972-12-31'), $arg1), 
        dateTime(xs:date('1972-12-31'), $arg2))</eg>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>Assume that the dynamic context provides an implicit timezone value of
                  <code>-05:00</code>.</p>
         </fos:example>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression><eg>op:time-less-than(
  xs:time("12:00:00"),
  xs:time("23:00:00+06:00")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:time-less-than(
  xs:time("11:00:00"),
  xs:time("17:00:00Z")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:time-less-than(
  xs:time("23:59:59"),
  xs:time("24:00:00")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="gYearMonth-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="gYearMonth-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:gYearMonth"/>
            <fos:arg name="arg2" type="xs:gYearMonth"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="xs:gYearMonth numeric" other-operators="ne"
            >Defines the
         semantics of the <code>eq</code> operator when applied to two <code>xs:gYearMonth</code> values. Also
         used in the definition of the <code>ne</code> operator.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the two <code>xs:gYearMonth</code> values have the same starting
            instant.</p>
      </fos:summary>
      <fos:rules>
         <p>The starting instants of <code>$arg1</code> and <code>$arg2</code> are calculated by
            supplying the missing components of <code>$arg1</code> and <code>$arg2</code> from the
               <code>xs:dateTime</code> template <code>xxxx-xx-01T00:00:00</code>. The function
            returns the result of comparing these two starting instants using
               <code>op:dateTime-equal</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>Assume that the dynamic context provides an implicit timezone value of
                  <code>-05:00</code>.</p>
         </fos:example>
         <fos:example>
            <p><code>op:gYearMonth-equal(xs:gYearMonth("1986-02"), xs:gYearMonth("1986-03"))</code>
               returns <code>false()</code>. The starting instants are
                  <code>1986-02-01T00:00:00-05:00</code> and <code>1986-03-01T00:00:00</code>,
               respectively.</p>
         </fos:example>
         <fos:example>
            <p><code>op:gYearMonth-equal(xs:gYearMonth("1978-03"), xs:gYearMonth("1986-03Z"))</code>
               returns <code>false()</code>. The starting instants are
                  <code>1978-03-01T00:00:00-05:00</code> and <code>1986-03-01T00:00:00Z</code>,
               respectively.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="gYear-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="gYear-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:gYear"/>
            <fos:arg name="arg2" type="xs:gYear"/>
         </fos:proto>
      </fos:signatures>

      <fos:opermap operator="eq" types="xs:gYear numeric" other-operators="ne"
            >Defines the semantics
         of the <code>eq</code> operator when applied to two <code>xs:gYear</code> values. Also used in the
         definition of the <code>ne</code> operator.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the two <code>xs:gYear</code> values have the same starting instant.</p>
      </fos:summary>
      <fos:rules>
         <p>The starting instants of <code>$arg1</code> and <code>$arg2</code> are calculated by
            supplying the missing components of <code>$arg1</code> and <code>$arg2</code> from the
               <code>xs:dateTime</code> template <code>xxxx-01-01T00:00:00</code>. The function
            returns the result of comparing these two starting instants using
               <code>op:dateTime-equal</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>Assume that the dynamic context provides an implicit timezone value of
                  <code>-05:00</code>. Assume, also, that the <code>xs:dateTime</code> template is
                  <code>xxxx-01-01T00:00:00</code>. </p>
         </fos:example>
         <fos:example>
            <p><code>op:gYear-equal(xs:gYear("2005-12:00"), xs:gYear("2005+12:00"))</code> returns
                  <code>false()</code>. The starting instants are
                  <code>2005-01-01T00:00:00-12:00</code> and <code>2005-01-01T00:00:00+12:00</code>,
               respectively, and normalize to <code>2005-01-01T12:00:00Z</code> and
                  <code>2004-12-31T12:00:00Z</code>.</p>
         </fos:example>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression><eg>op:gYear-equal(
  xs:gYear("1976-05:00"),
  xs:gYear("1976")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="gMonthDay-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="gMonthDay-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:gMonthDay"/>
            <fos:arg name="arg2" type="xs:gMonthDay"/>
         </fos:proto>
      </fos:signatures>

      <fos:opermap operator="eq" types="xs:gMonthDay numeric" other-operators="ne"
            >Defines the
         semantics of the <code>eq</code> operator when applied to two <code>xs:gMonthDay</code> values. Also
         used in the definition of the <code>ne</code> operator.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the two <code>xs:gMonthDay</code> values have the same starting instant,
            when considered as days in the same year.</p>
      </fos:summary>
      <fos:rules>
         <p>The starting instants of <code>$arg1</code> and <code>$arg2</code> are calculated by
            supplying the missing components of <code>$arg1</code> and <code>$arg2</code> from the
               <code>xs:dateTime</code> template <code>1972-xx-xxT00:00:00</code> or an equivalent.
            The function returns the result of comparing these two starting instants using
               <code>op:dateTime-equal</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>Assume that the dynamic context provides an implicit timezone value of
                  <code>-05:00</code>. Assume for the purposes of illustration that the
                  <code>xs:dateTime</code> template used is <code>1972-xx-xxT00:00:00</code> (this
               does not affect the result). </p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:gMonthDay-equal(
  xs:gMonthDay("--12-25-14:00"),
  xs:gMonthDay("--12-26+10:00")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble> The starting instants are <code>1972-12-25T00:00:00-14:00</code> and
                     <code>1972-12-26T00:00:00+10:00</code>, respectively, and normalize to
                     <code>1972-12-25T14:00:00Z</code> and <code>1972-12-25T14:00:00Z</code>.
               </fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:gMonthDay-equal(
  xs:gMonthDay("--12-25"),
  xs:gMonthDay("--12-26Z")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="gMonth-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="gMonth-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:gMonth"/>
            <fos:arg name="arg2" type="xs:gMonth"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="xs:gMonth numeric" other-operators="ne"
            >Defines the
         semantics of the <code>eq</code> operator when applied to two <code>xs:gMonth</code> values. Also used
         in the definition of the <code>ne</code> operator.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the two <code>xs:gMonth</code> values have the same starting instant,
            when considered as months in the same year.</p>
      </fos:summary>
      <fos:rules>
         <p>The starting instants of <code>$arg1</code> and <code>$arg2</code> are calculated by
            supplying the missing components of <code>$arg1</code> and <code>$arg2</code> from the
               <code>xs:dateTime</code> template <code>1972-xx-01T00:00:00</code> or an equivalent.
            The function returns the result of comparing these two starting instants using
               <code>op:dateTime-equal</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>Assume that the dynamic context provides an implicit timezone value of
                  <code>-05:00</code>. Assume, also, that the <code>xs:dateTime</code> template
               chosen is <code>1972-xx-01T00:00:00</code>. </p>
         </fos:example>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression><eg>op:gMonth-equal(
  xs:gMonth("--12-14:00"),
  xs:gMonth("--12+10:00")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble> The starting instants are <code>1972-12-01T00:00:00-14:00</code> and
                     <code>1972-12-01T00:00:00+10:00</code>, respectively, and normalize to
                     <code>1972-11-30T14:00:00Z</code> and <code>1972-12-01T14:00:00Z</code>.
               </fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression><eg>op:gMonth-equal(
  xs:gMonth("--12"),
  xs:gMonth("--12Z")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="gDay-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="gDay-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:gDay"/>
            <fos:arg name="arg2" type="xs:gDay"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="xs:gDay numeric" other-operators="ne"
            >Defines the semantics
         of the <code>eq</code> operator when applied to two <code>xs:gDay</code> values. Also used in the
         definition of the <code>ne</code> operator.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the two <code>xs:gDay</code> values have the same starting instant, when
            considered as days in the same month of the same year.</p>
      </fos:summary>
      <fos:rules>
         <p>The starting instants of <code>$arg1</code> and <code>$arg2</code> are calculated by
            supplying the missing components of <code>$arg1</code> and <code>$arg2</code> from the
               <code>xs:dateTime</code> template <code>1972-12-xxT00:00:00</code> or an equivalent.
            The function returns the result of comparing these two starting instants using
               <code>op:dateTime-equal</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>Assume that the dynamic context provides an implicit timezone value of
                  <code>-05:00</code>. Assume, also, that the <code>xs:dateTime</code> template is
                  <code>1972-12-xxT00:00:00</code>. </p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:gDay-equal(
  xs:gDay("---25-14:00"),
  xs:gDay("---25+10:00")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble> The starting instants are <code>1972-12-25T00:00:00-14:00</code> and
                     <code>1972-12-25T00:00:00+10:00</code>, respectively, and normalize to
                     <code>1972-12-25T14:00:00Z</code> and <code>1972-12-24T14:00:00Z</code>.
               </fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression>op:gDay-equal(xs:gDay("---12"), xs:gDay("---12Z"))</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="year-from-dateTime" prefix="fn">
      <fos:signatures>
         <fos:proto name="year-from-dateTime" return-type="xs:integer?">
            <fos:arg name="value" type="xs:dateTime?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the year component of an <code>xs:dateTime</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> representing the year
            component in the local value of <code>$value</code>. The result may be negative.</p>
      </fos:rules>
      <fos:notes>
         <p>Ignoring complications that arise with midnight on the last day
            of the year, the year returned is the same numeric value that appears in the lexical
         representation, which for negative years means the meaning may vary depending on whether
         XSD 1.0 or XSD 1.1 conventions are in use.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>year-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)</eg></fos:expression>
               <fos:result>1999</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>year-from-dateTime(
  xs:dateTime("1999-05-31T21:30:00-05:00")
)</eg></fos:expression>
               <fos:result>1999</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>year-from-dateTime(
  xs:dateTime("1999-12-31T19:20:00")
)</eg></fos:expression>
               <fos:result>1999</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>year-from-dateTime(
  xs:dateTime("1999-12-31T24:00:00")
)</eg></fos:expression>
               <fos:result>2000</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>year-from-dateTime(
  xs:dateTime("-0002-06-06T00:00:00")
)</eg></fos:expression>
               <fos:result>-2</fos:result>
               <fos:postamble>The result is the same whether XSD 1.0 or 1.1 is in use, despite
                  the absence of a year 0 in the XSD 1.0 value space.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="month-from-dateTime" prefix="fn">
      <fos:signatures>
         <fos:proto name="month-from-dateTime" return-type="xs:integer?">
            <fos:arg name="value" type="xs:dateTime?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the month component of an <code>xs:dateTime</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> between <code>1</code> and
            <code>12</code>, both inclusive, representing the month component in the
            local value of <code>$value</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>month-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)</eg></fos:expression>
               <fos:result>5</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>month-from-dateTime(
  xs:dateTime("1999-12-31T19:20:00-05:00")
)</eg></fos:expression>
               <fos:result>12</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>month-from-dateTime(
  adjust-dateTime-to-timezone(
    xs:dateTime("1999-12-31T19:20:00-05:00"),
    xs:dayTimeDuration("PT0S")
  )
)</eg></fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="day-from-dateTime" prefix="fn">
      <fos:signatures>
         <fos:proto name="day-from-dateTime" return-type="xs:integer?">
            <fos:arg name="value" type="xs:dateTime?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the day component of an <code>xs:dateTime</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> between <code>1</code> and
            <code>31</code>, both inclusive, representing the day component in the
            local value of <code>$value</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>day-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)</eg></fos:expression>
               <fos:result>31</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>day-from-dateTime(
  xs:dateTime("1999-12-31T20:00:00-05:00")
)</eg></fos:expression>
               <fos:result>31</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>day-from-dateTime(
  adjust-dateTime-to-timezone(
    xs:dateTime("1999-12-31T19:20:00-05:00"),
    xs:dayTimeDuration("PT0S")
  )
)</eg></fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="hours-from-dateTime" prefix="fn">
      <fos:signatures>
         <fos:proto name="hours-from-dateTime" return-type="xs:integer?">
            <fos:arg name="value" type="xs:dateTime?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the hours component of an <code>xs:dateTime</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> between <code>0</code> and
            <code>23</code>, both inclusive, representing the hours component in the local value
            of <code>$value</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>hours-from-dateTime(
  xs:dateTime("1999-05-31T08:20:00-05:00")
)</eg></fos:expression>
               <fos:result>8</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>hours-from-dateTime(
  xs:dateTime("1999-12-31T21:20:00-05:00")
)</eg></fos:expression>
               <fos:result>21</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>hours-from-dateTime(
  adjust-dateTime-to-timezone(
    xs:dateTime("1999-12-31T21:20:00-05:00"),
    xs:dayTimeDuration("PT0S")
  )
)</eg></fos:expression>
               <fos:result>2</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>hours-from-dateTime(
  xs:dateTime("1999-12-31T12:00:00")
)</eg></fos:expression>
               <fos:result>12</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>hours-from-dateTime(
  xs:dateTime("1999-12-31T24:00:00")
)</eg></fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="minutes-from-dateTime" prefix="fn">
      <fos:signatures>
         <fos:proto name="minutes-from-dateTime" return-type="xs:integer?">
            <fos:arg name="value" type="xs:dateTime?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the minute component of an <code>xs:dateTime</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> value between <code>0</code>
            and <code>59</code>, both inclusive, representing the minute component in the local value of
            <code>$value</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>minutes-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)</eg></fos:expression>
               <fos:result>20</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>minutes-from-dateTime(
  xs:dateTime("1999-05-31T13:30:00+05:30")
)</eg></fos:expression>
               <fos:result>30</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="seconds-from-dateTime" prefix="fn">
      <fos:signatures>
         <fos:proto name="seconds-from-dateTime" return-type="xs:decimal?">
            <fos:arg name="value" type="xs:dateTime?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the seconds component of an <code>xs:dateTime</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:decimal</code> value greater than or equal
            to zero and less than 60, representing the seconds and fractional seconds in the local
            value of <code>$value</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>seconds-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)</eg></fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="timezone-from-dateTime" prefix="fn">
      <fos:signatures>
         <fos:proto name="timezone-from-dateTime" return-type="xs:dayTimeDuration?">
            <fos:arg name="value" type="xs:dateTime?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the timezone component of an <code>xs:dateTime</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns the timezone component of <code>$value</code>, if any. If
            <code>$value</code> has a timezone component, then the result is an
               <code>xs:dayTimeDuration</code> that indicates deviation from UTC; its value may
            range from +14:00 to -14:00 hours, both inclusive. If <code>$value</code> has no timezone
            component, the result is the empty sequence.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>timezone-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("-PT5H")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>timezone-from-dateTime(
  xs:dateTime("2000-06-12T13:20:00Z")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("PT0S")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>timezone-from-dateTime(
  xs:dateTime("2004-08-27T00:00:00")
)</eg></fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="year-from-date" prefix="fn">
      <fos:signatures>
         <fos:proto name="year-from-date" return-type="xs:integer?">
            <fos:arg name="value" type="xs:date?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the year component of an <code>xs:date</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> representing the year in the
            local value of <code>$value</code>. The value may be negative. </p>
      </fos:rules>
      <fos:notes>
         <p>The year returned is the same numeric value that appears in the lexical
            representation, which for negative years means the meaning may vary depending on whether
            XSD 1.0 or XSD 1.1 conventions are in use.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>year-from-date(
  xs:date("1999-05-31")
)</eg></fos:expression>
               <fos:result>1999</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>year-from-date(
  xs:date("2000-01-01+05:00")
)</eg></fos:expression>
               <fos:result>2000</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>year-from-date(
  xs:date("-0002-06-01")
)</eg></fos:expression>
               <fos:result>-2</fos:result>
               <fos:postamble>The result is the same whether XSD 1.0 or 1.1 is in use, despite
               the absence of a year 0 in the XSD 1.0 value space.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="month-from-date" prefix="fn">
      <fos:signatures>
         <fos:proto name="month-from-date" return-type="xs:integer?">
            <fos:arg name="value" type="xs:date?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the month component of an <code>xs:date</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> between
            <code>1</code> and <code>12</code>, both
            inclusive, representing the month component in the local value of <code>$value</code>.
         </p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>month-from-date(
  xs:date("1999-05-31-05:00")
)</eg></fos:expression>
               <fos:result>5</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>month-from-date(
  xs:date("2000-01-01+05:00")
)</eg></fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="day-from-date" prefix="fn">
      <fos:signatures>
         <fos:proto name="day-from-date" return-type="xs:integer?">
            <fos:arg name="value" type="xs:date?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the day component of an <code>xs:date</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> between
            <code>1</code> and <code>31</code>, both
            inclusive, representing the day component in the localized value of
            <code>$value</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>day-from-date(
  xs:date("1999-05-31-05:00")
)</eg></fos:expression>
               <fos:result>31</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>day-from-date(
  xs:date("2000-01-01+05:00")
)</eg></fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="timezone-from-date" prefix="fn">
      <fos:signatures>
         <fos:proto name="timezone-from-date" return-type="xs:dayTimeDuration?">
            <fos:arg name="value" type="xs:date?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the timezone component of an <code>xs:date</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns the timezone component of <code>$value</code>, if any. If
            <code>$value</code> has a timezone component, then the result is an
               <code>xs:dayTimeDuration</code> that indicates deviation from UTC; its value may
            range from +14:00 to -14:00 hours, both inclusive. If <code>$value</code> has no timezone
            component, the result is the empty sequence.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>timezone-from-date(
  xs:date("1999-05-31-05:00")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("-PT5H")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>timezone-from-date(
  xs:date("2000-06-12Z")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("PT0S")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="hours-from-time" prefix="fn">
      <fos:signatures>
         <fos:proto name="hours-from-time" return-type="xs:integer?">
            <fos:arg name="value" type="xs:time?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the hours component of an <code>xs:time</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> between
            <code>0</code> and <code>23</code>, both
            inclusive, representing the value of the hours component in the local value of
            <code>$value</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>Assume that the dynamic context provides an implicit timezone value of
                  <code>-05:00</code>. </p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>hours-from-time(xs:time("11:23:00"))</fos:expression>
               <fos:result>11</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>hours-from-time(xs:time("21:23:00"))</fos:expression>
               <fos:result>21</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>hours-from-time(xs:time("01:23:00+05:00"))</fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>hours-from-time(
  adjust-time-to-timezone(
    xs:time("01:23:00+05:00"),
    xs:dayTimeDuration("PT0S")
  )
)</eg></fos:expression>
               <fos:result>20</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>hours-from-time(xs:time("24:00:00"))</fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="minutes-from-time" prefix="fn">
      <fos:signatures>
         <fos:proto name="minutes-from-time" return-type="xs:integer?">
            <fos:arg name="value" type="xs:time?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the minutes component of an <code>xs:time</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:integer</code> value between <code>0</code>
            and <code>59</code>, both inclusive, representing the value of the minutes component
            in the local value of <code>$value</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>minutes-from-time(xs:time("13:00:00Z"))</fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="seconds-from-time" prefix="fn">
      <fos:signatures>
         <fos:proto name="seconds-from-time" return-type="xs:decimal?">
            <fos:arg name="value" type="xs:time?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the seconds component of an <code>xs:time</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:decimal</code> value greater than or equal
            to zero and less than 60, representing the seconds and fractional seconds in the local
            value of <code>$value</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>seconds-from-time(xs:time("13:20:10.5"))</fos:expression>
               <fos:result>10.5</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="timezone-from-time" prefix="fn">
      <fos:signatures>
         <fos:proto name="timezone-from-time" return-type="xs:dayTimeDuration?">
            <fos:arg name="value" type="xs:time?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the timezone component of an <code>xs:time</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Otherwise, the function returns the timezone component of <code>$value</code>, if any. If
            <code>$value</code> has a timezone component, then the result is an
               <code>xs:dayTimeDuration</code> that indicates deviation from UTC; its value may
            range from +14:00 to -14:00 hours, both inclusive. If <code>$value</code> has no timezone
            component, the result is the empty sequence.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>timezone-from-time(xs:time("13:20:00-05:00"))</fos:expression>
               <fos:result>xs:dayTimeDuration("-PT5H")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>timezone-from-time(xs:time("13:20:00"))</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="adjust-dateTime-to-timezone" prefix="fn">
      <fos:signatures>
         <fos:proto name="adjust-dateTime-to-timezone" return-type="xs:dateTime?">
            <fos:arg name="value" type="xs:dateTime?"/>
            <fos:arg name="timezone" type="xs:dayTimeDuration?" default="fn:implicit-timezone()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Adjusts an <code>xs:dateTime</code> value to a specific timezone, or to no timezone at
            all.</p>
      </fos:summary>
      <fos:rules>
         <p> If <code>$timezone</code> is not specified, then the effective value of
               <code>$timezone</code> is the value of the implicit timezone in the dynamic
            context.</p>
         <p> If <code>$value</code> is the empty sequence, then the function returns the empty
            sequence.</p>
         <p> If <code>$value</code> does not have a timezone component and <code>$timezone</code> is
            the empty sequence, then the result is <code>$value</code>.</p>
         <p> If <code>$value</code> does not have a timezone component and <code>$timezone</code> is
            not the empty sequence, then the result is <code>$value</code> with <code>$timezone</code>
            as the timezone component.</p>
         <p> If <code>$value</code> has a timezone component and <code>$timezone</code> is the empty
            sequence, then the result is the local value of <code>$value</code> without its timezone
            component.</p>
         <p> If <code>$value</code> has a timezone component and <code>$timezone</code> is not the
            empty sequence, then the result is the <code>xs:dateTime</code> value that is equal to
            <code>$value</code> and that has a timezone component equal to
            <code>$timezone</code>.</p>
      </fos:rules>
      <fos:errors>
         <p> A dynamic error is raised <errorref class="DT" code="0003"
               /> if <code>$timezone</code>
            is less than <code>-PT14H</code> or greater than <code>PT14H</code> or is not an
            integral number of minutes.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <p> Assume the dynamic context provides an implicit timezone of <code>-05:00
                  (-PT5H0M)</code>.</p>
         </fos:example>
         <fos:variable name="tz-10" id="v-adjust-dateTime-to-timezone-tz10"
            select="xs:dayTimeDuration(&quot;-PT10H&quot;)"/>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression><eg>adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00')
)</eg></fos:expression>
               <fos:result>xs:dateTime('2002-03-07T10:00:00-05:00')</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-adjust-dateTime-to-timezone-tz10">
               <fos:expression><eg>adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00-07:00')
)</eg></fos:expression>
               <fos:result>xs:dateTime('2002-03-07T12:00:00-05:00')</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-adjust-dateTime-to-timezone-tz10">
               <fos:expression><eg>adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00'),
  $tz-10
)</eg></fos:expression>
               <fos:result>xs:dateTime('2002-03-07T10:00:00-10:00')</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-adjust-dateTime-to-timezone-tz10">
               <fos:expression><eg>adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00-07:00'),
  $tz-10
)</eg></fos:expression>
               <fos:result>xs:dateTime('2002-03-07T07:00:00-10:00')</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00-07:00'),
  xs:dayTimeDuration("PT10H")
)</eg></fos:expression>
               <fos:result>xs:dateTime('2002-03-08T03:00:00+10:00')</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T00:00:00+01:00'),
  xs:dayTimeDuration("-PT8H")
)</eg></fos:expression>
               <fos:result>xs:dateTime('2002-03-06T15:00:00-08:00')</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00'),
  ()
)</eg></fos:expression>
               <fos:result>xs:dateTime('2002-03-07T10:00:00')</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00-07:00'),
  ()
)</eg></fos:expression>
               <fos:result>xs:dateTime('2002-03-07T10:00:00')</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="adjust-date-to-timezone" prefix="fn">
      <fos:signatures>
         <fos:proto name="adjust-date-to-timezone" return-type="xs:date?">
            <fos:arg name="value" type="xs:date?"/>
            <fos:arg name="timezone" type="xs:dayTimeDuration?" default="fn:implicit-timezone()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Adjusts an <code>xs:date</code> value to a specific timezone, or to no timezone at all;
            the result is the date in the target timezone that contains the starting instant of the
            supplied date.</p>
      </fos:summary>
      <fos:rules>
         <p> If <code>$timezone</code> is not specified, then the effective value of
               <code>$timezone</code> is the value of the implicit timezone in the dynamic
            context.</p>
         <p> If <code>$value</code> is the empty sequence, then the function returns the empty
            sequence.</p>
         <p> If <code>$value</code> does not have a timezone component and <code>$timezone</code> is
            the empty sequence, then the result is <code>$value</code>.</p>
         <p> If <code>$value</code> does not have a timezone component and <code>$timezone</code> is
            not the empty sequence, then the result is <code>$value</code> with <code>$timezone</code>
            as the timezone component.</p>
         <p> If <code>$value</code> has a timezone component and <code>$timezone</code> is the empty
            sequence, then the result is the local value of <code>$value</code> without its timezone
            component.</p>
         <p> If <code>$value</code> has a timezone component and <code>$timezone</code> is not the
            empty sequence, then the function returns the value of the expression:</p>
         <ulist>
            <item>
               <p>Let <code>$dt</code> be the value of <code>fn:dateTime($arg,
                     xs:time('00:00:00'))</code>.</p>
            </item>
            <item>
               <p>Let <code>$adt</code> be the value of <code>fn:adjust-dateTime-to-timezone($dt,
                     $timezone)</code></p>
            </item>
            <item>
               <p>The function returns the value of <code>xs:date($adt)</code></p>
            </item>
         </ulist>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DT" code="0003"
               /> if <code>$timezone</code>
            is less than <code>-PT14H</code> or greater than <code>PT14H</code> or is not an
            integral number of minutes.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <p>Assume the dynamic context provides an implicit timezone of <code>-05:00
                  (-PT5H0M)</code>.</p>
         </fos:example>
         <fos:variable id="v-adjust-date-to-timezone-tz10" name="tz-10"
            select="xs:dayTimeDuration(&quot;-PT10H&quot;)"/>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression><eg>adjust-date-to-timezone(
  xs:date("2002-03-07")
)</eg></fos:expression>
               <fos:result>xs:date("2002-03-07-05:00")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression><eg>adjust-date-to-timezone(
  xs:date("2002-03-07-07:00")
)</eg></fos:expression>
               <fos:result>xs:date("2002-03-07-05:00")</fos:result>
               <fos:postamble><code>$value</code> is converted to
                     <code>xs:dateTime("2002-03-07T00:00:00-07:00")</code>. This is adjusted to the
                  implicit timezone, giving <code>"2002-03-07T02:00:00-05:00"</code>.
               </fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-adjust-date-to-timezone-tz10">
               <fos:expression><eg>adjust-date-to-timezone(
  xs:date("2002-03-07"),
  $tz-10
)</eg></fos:expression>
               <fos:result>xs:date("2002-03-07-10:00")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-adjust-date-to-timezone-tz10">
               <fos:expression><eg>adjust-date-to-timezone(
  xs:date("2002-03-07-07:00"),
  $tz-10
)</eg></fos:expression>
               <fos:result>xs:date("2002-03-06-10:00")</fos:result>
               <fos:postamble><code>$value</code> is converted to
                  <code>xs:dateTime("2002-03-07T00:00:00-07:00")</code>.
                  This is adjusted to the given timezone,
                  giving <code>"2002-03-06T21:00:00-10:00"</code>. </fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>adjust-date-to-timezone(
  xs:date("2002-03-07"),
  ()
)</eg></fos:expression>
               <fos:result>xs:date("2002-03-07")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>adjust-date-to-timezone(
  xs:date("2002-03-07-07:00"),
  ()
)</eg></fos:expression>
               <fos:result>xs:date("2002-03-07")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="adjust-time-to-timezone" prefix="fn">
      <fos:signatures>
         <fos:proto name="adjust-time-to-timezone" return-type="xs:time?">
            <fos:arg name="value" type="xs:time?"/>
            <fos:arg name="timezone" type="xs:dayTimeDuration?" default="fn:implicit-timezone()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Adjusts an <code>xs:time</code> value to a specific timezone, or to no timezone at
            all.</p>
      </fos:summary>
      <fos:rules>
         <p> If <code>$timezone</code> is not specified, then the effective value of
               <code>$timezone</code> is the value of the implicit timezone in the dynamic
            context.</p>
         <p> If <code>$value</code> is the empty sequence, then the function returns the empty
            sequence.</p>
         <p> If <code>$value</code> does not have a timezone component and <code>$timezone</code> is
            the empty sequence, then the result is <code>$value</code>.</p>
         <p> If <code>$value</code> does not have a timezone component and <code>$timezone</code> is
            not the empty sequence, then the result is <code>$value</code> with <code>$timezone</code>
            as the timezone component.</p>
         <p> If <code>$value</code> has a timezone component and <code>$timezone</code> is the empty
            sequence, then the result is the localized value of <code>$value</code> without its
            timezone component.</p>
         <p> If <code>$value</code> has a timezone component and <code>$timezone</code> is not the
            empty sequence, then:</p>
         <ulist>
            <item>
               <p>Let <code>$dt</code> be the <code>xs:dateTime</code> value
                  <code>fn:dateTime(xs:date('1972-12-31'), $value)</code>.</p>
            </item>
            <item>
               <p>Let <code>$adt</code> be the value of <code>fn:adjust-dateTime-to-timezone($dt,
                     $timezone)</code>
               </p>
            </item>
            <item>
               <p>The function returns the <code>xs:time</code> value
                  <code>xs:time($adt)</code>.</p>
            </item>
         </ulist>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DT" code="0003"
               /> if <code>$timezone</code>
            is less than <code>-PT14H</code> or greater than <code>PT14H</code> or if does not
            contain an integral number of minutes.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <p>Assume the dynamic context provides an implicit timezone of <code>-05:00
                  (-PT5H0M)</code>.</p>
         </fos:example>
         <fos:variable id="v-adjust-time-to-timezone-tz10" name="tz-10"
            select="xs:dayTimeDuration(&quot;-PT10H&quot;)"/>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression><eg>adjust-time-to-timezone(
  xs:time("10:00:00")
)</eg></fos:expression>
               <fos:result>xs:time("10:00:00-05:00")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>adjust-time-to-timezone(
  xs:time("10:00:00-07:00")
)</eg></fos:expression>
               <fos:result>xs:time("12:00:00-05:00")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-adjust-time-to-timezone-tz10">
               <fos:expression><eg>adjust-time-to-timezone(
  xs:time("10:00:00"),
  $tz-10
)</eg></fos:expression>
               <fos:result>xs:time("10:00:00-10:00")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-adjust-time-to-timezone-tz10">
               <fos:expression><eg>adjust-time-to-timezone(
  xs:time("10:00:00-07:00"),
  $tz-10
)</eg></fos:expression>
               <fos:result>xs:time("07:00:00-10:00")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>adjust-time-to-timezone(
  xs:time("10:00:00"),
  ()
)</eg></fos:expression>
               <fos:result>xs:time("10:00:00")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>adjust-time-to-timezone(
  xs:time("10:00:00-07:00"),
  ()
)</eg></fos:expression>
               <fos:result>xs:time("10:00:00")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>adjust-time-to-timezone(
  xs:time("10:00:00-07:00"),
  xs:dayTimeDuration("PT10H")
)</eg></fos:expression>
               <fos:result>xs:time("03:00:00+10:00")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="subtract-dateTimes" prefix="op">
      <fos:signatures>
         <fos:proto name="subtract-dateTimes" return-type="xs:dayTimeDuration">
            <fos:arg name="arg1" type="xs:dateTime"/>
            <fos:arg name="arg2" type="xs:dateTime"/>
         </fos:proto>
      </fos:signatures>

      <fos:opermap operator="-" types="xs:dateTime numeric"
            >Defines the semantics of the <code>-</code>
         operator when applied to two <code>xs:dateTime</code> values.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an <code>xs:dayTimeDuration</code> representing the amount of elapsed time
            between the instants <code>arg2</code> and <code>arg1</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If either <code>$arg1</code> or <code>$arg2</code> do not contain an explicit timezone
            then, for the purpose of the operation, the implicit timezone provided by the dynamic
            context (See <xspecref
               spec="XP31" ref="id-xp-evaluation-context-components"
            />.) is
            assumed to be present as part of the value.</p>
         <p>The function returns the elapsed time between the date/time instant <code>arg2</code>
            and the date/time instant <code>arg1</code>, computed according to the algorithm given
            in Appendix E of <bibref
               ref="xmlschema-2"
               />, and expressed as a
               <code>xs:dayTimeDuration</code>.</p>
         <p>If the normalized value of <code>$arg1</code> precedes in time the normalized value of
               <code>$arg2</code>, then the returned value is a negative duration.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>Assume that the dynamic context provides an implicit timezone value of
                  <code>-05:00</code>.</p>
         </fos:example>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression><eg>op:subtract-dateTimes(
  xs:dateTime("2000-10-30T06:12:00"),
  xs:dateTime("1999-11-28T09:00:00Z")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("P337DT2H12M")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="subtract-dates" prefix="op">
      <fos:signatures>
         <fos:proto name="subtract-dates" return-type="xs:dayTimeDuration">
            <fos:arg name="arg1" type="xs:date"/>
            <fos:arg name="arg2" type="xs:date"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="-" types="xs:date numeric"
            >Defines the semantics of the <code>-</code> operator
         when applied to two <code>xs:date</code> values.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:dayTimeDuration</code> that corresponds to the elapsed time between
            the starting instant of <code>$arg2</code> and the starting instant of
               <code>$arg2</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If either <code>$arg1</code> or <code>$arg2</code> do not contain an explicit timezone
            then, for the purpose of the operation, the implicit timezone provided by the dynamic
            context (See <xspecref
               spec="XP31" ref="id-xp-evaluation-context-components"
            />.) is
            assumed to be present as part of the value.</p>
         <p>The starting instant of an <code>xs:date</code> is the <code>xs:dateTime</code> at
               <code>00:00:00</code> on that date. </p>
         <p>The function returns the result of subtracting the two starting instants using
               <code>op:subtract-dateTimes</code>.</p>
         <p>If the starting instant of <code>$arg1</code> precedes in time the starting instant of
               <code>$arg2</code>, then the returned value is a negative duration.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>Assume that the dynamic context provides an implicit timezone value of
               <code>Z</code>. </p>
         </fos:example>
         <fos:example>
            <fos:test implicit-timezone="PT0S">
               <fos:expression><eg>op:subtract-dates(
  xs:date("2000-10-30"),
  xs:date("1999-11-28")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("P337D")</fos:result>
               <fos:postamble>The normalized values of the two starting instants are <code>{2000,
                     10, 30, 0, 0, 0, PT0S}</code> and <code>{1999, 11, 28, 0, 0, 0,
                  PT0S}</code>.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Now assume that the dynamic context provides an implicit timezone value of
                  <code>+05:00</code>.</p>
         </fos:example>
         <fos:example>
            <fos:test implicit-timezone="PT5H">
               <fos:expression><eg>op:subtract-dates(
  xs:date("2000-10-30"),
  xs:date("1999-11-28Z")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("P336DT19H")</fos:result>
               <fos:postamble> The normalized values of the two starting instants are <code>{2000,
                     10, 29, 19, 0, 0, PT0S}</code> and <code>{1999, 11, 28, 0, 0, 0,
                  PT0S}</code>.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-dates(
  xs:date("2000-10-15-05:00"),
  xs:date("2000-10-10+02:00")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("P5DT7H")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="subtract-times" prefix="op">
      <fos:signatures>
         <fos:proto name="subtract-times" return-type="xs:dayTimeDuration">
            <fos:arg name="arg1" type="xs:time"/>
            <fos:arg name="arg2" type="xs:time"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="-" types="xs:time numeric"
            >Defines the semantics of the <code>-</code> operator
         when applied to two <code>xs:time</code> values.</fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:dayTimeDuration</code> that corresponds to the elapsed time between
            the values of <code>$arg2</code> and <code>$arg1</code> treated as times on the same
            date.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of the expression:</p>
         <eg xml:space="preserve">op-subtract-dateTimes(
        dateTime(xs:date('1972-12-31'), $arg1),
        dateTime(xs:date('1972-12-31'), $arg2))</eg>
      </fos:rules>
      <fos:notes>
         <p>Any other reference date would work equally well.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>Assume that the dynamic context provides an implicit timezone value of
                  <code>-05:00</code>. Assume, also, that the date components of the reference
                  <code>xs:dateTime</code> correspond to <code>"1972-12-31"</code>.</p>
         </fos:example>
         <fos:example>
            <fos:test implicit-timezone="-PT5H">
               <fos:expression><eg>op:subtract-times(
  xs:time("11:12:00Z"),
  xs:time("04:00:00")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("PT2H12M")</fos:result>
               <fos:postamble>This is obtained by subtracting from the <code>xs:dateTime</code>
                  value <code>{1972, 12, 31, 11, 12, 0, PT0S}</code> the <code>xs:dateTime</code>
                  value <code>{1972, 12, 31, 9, 0, 0, PT0S}</code>.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-times(
  xs:time("11:00:00-05:00"),
  xs:time("21:30:00+05:30")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("PT0S")</fos:result>
               <fos:postamble>The two <code>xs:dateTime</code> values are <code>{1972, 12, 31, 11,
                     0, 0, -PT5H}</code> and <code>{1972, 12, 31, 21, 30, 0, PT5H30M}</code>. These
                  normalize to <code>{1972, 12, 31, 16, 0, 0, PT0S}</code> and <code>{1972, 12, 31,
                     16, 0, 0, PT0S}</code>. </fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-times(
  xs:time("17:00:00-06:00"),
  xs:time("08:00:00+09:00")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("P1D")</fos:result>
               <fos:postamble>The two normalized <code>xs:dateTime</code> values are <code>{1972,
                     12, 31, 23, 0, 0, PT0S}</code> and <code>{1972, 12, 30, 23, 0, 0,
                  PT0S}</code>.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-times(
  xs:time("24:00:00"),
  xs:time("23:59:59")
)</eg></fos:expression>
               <fos:result>xs:dayTimeDuration("-PT23H59M59S")</fos:result>
               <fos:postamble>The two normalized <code>xs:dateTime</code> values are <code>{1972,
                     12, 31, 0, 0, 0, ()}</code> and <code>{1972, 12, 31, 23, 59, 59.0,
                  ()}</code>.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="add-yearMonthDuration-to-dateTime" prefix="op">
      <fos:signatures>
         <fos:proto name="add-yearMonthDuration-to-dateTime" return-type="xs:dateTime">
            <fos:arg name="arg1" type="xs:dateTime"/>
            <fos:arg name="arg2" type="xs:yearMonthDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="+" types="xs:dateTime xs:yearMonthDuration numeric"
            >Defines the
         semantics of the <code>+</code> operator when applied to an <code>xs:dateTime</code> and an
            <code>xs:yearMonthDuration</code> value. </fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:dateTime</code> that is a given duration after a specified
               <code>xs:dateTime</code> (or before, if the duration is negative).</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of adding <code>$arg2</code> to the value of
               <code>$arg1</code> using the algorithm described in Appendix E of <bibref
               ref="xmlschema-2"
               />, disregarding the rule about leap seconds. If <code>$arg2</code>
            is negative, then the result <code>xs:dateTime</code> precedes <code>$arg1</code>.</p>
         <p>The result has the same timezone as <code>$arg1</code>. If <code>$arg1</code> has no
            timezone, the result has no timezone. </p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:add-yearMonthDuration-to-dateTime(
  xs:dateTime("2000-10-30T11:12:00"),
  xs:yearMonthDuration("P1Y2M")
)</eg></fos:expression>
               <fos:result>xs:dateTime("2001-12-30T11:12:00")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="add-dayTimeDuration-to-dateTime" prefix="op">
      <fos:signatures>
         <fos:proto name="add-dayTimeDuration-to-dateTime" return-type="xs:dateTime">
            <fos:arg name="arg1" type="xs:dateTime"/>
            <fos:arg name="arg2" type="xs:dayTimeDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="+" types="xs:dateTime xs:dayTimeDuration numeric"
            >Defines the semantics
         of the <code>+</code> operator when applied to an <code>xs:dateTime</code> and an
            <code>xs:dayTimeDuration</code> value. </fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:dateTime</code> that is a given duration after a specified
               <code>xs:dateTime</code> (or before, if the duration is negative).</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of adding <code>$arg2</code> to the value of
               <code>$arg1</code> using the algorithm described in Appendix E of <bibref
               ref="xmlschema-2"
               />, disregarding the rule about leap seconds. If <code>$arg2</code>
            is negative, then the result <code>xs:dateTime</code> precedes <code>$arg1</code>.</p>
         <p>The result has the same timezone as <code>$arg1</code>. If <code>$arg1</code> has no
            timezone, the result has no timezone. </p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:add-dayTimeDuration-to-dateTime(
  xs:dateTime("2000-10-30T11:12:00"),
  xs:dayTimeDuration("P3DT1H15M")
)</eg></fos:expression>
               <fos:result>xs:dateTime("2000-11-02T12:27:00")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="subtract-yearMonthDuration-from-dateTime" prefix="op">
      <fos:signatures>
         <fos:proto name="subtract-yearMonthDuration-from-dateTime" return-type="xs:dateTime">
            <fos:arg name="arg1" type="xs:dateTime"/>
            <fos:arg name="arg2" type="xs:yearMonthDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="-" types="xs:dateTime xs:yearMonthDuration numeric"
            >Defines the
         semantics of the <code>-</code> operator when applied to an <code>xs:dateTime</code> and an
            <code>xs:yearMonthDuration</code> value. </fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:dateTime</code> that is a given duration before a specified
               <code>xs:dateTime</code> (or after, if the duration is negative).</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the <code>xs:dateTime</code> computed by negating
               <code>$arg2</code> and adding the result to <code>$arg1</code> using the
            function <code>op:add-yearMonthDuration-to-dateTime</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-yearMonthDuration-from-dateTime(
  xs:dateTime("2000-10-30T11:12:00"),
  xs:yearMonthDuration("P1Y2M")
)</eg></fos:expression>
               <fos:result>xs:dateTime("1999-08-30T11:12:00")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="subtract-dayTimeDuration-from-dateTime" prefix="op">
      <fos:signatures>
         <fos:proto name="subtract-dayTimeDuration-from-dateTime" return-type="xs:dateTime">
            <fos:arg name="arg1" type="xs:dateTime"/>
            <fos:arg name="arg2" type="xs:dayTimeDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="-" types="xs:dateTime xs:dayTimeDuration numeric"
            >Defines the semantics
         of the <code>-</code> operator when applied to an <code>xs:dateTime</code> an and
            <code>xs:dayTimeDuration</code> values</fos:opermap>
      <fos:summary>
         <p>Returns the <code>xs:dateTime</code> that is a given duration before a specified
               <code>xs:dateTime</code> (or after, if the duration is negative).</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the <code>xs:dateTime</code> computed by negating
               <code>$arg2</code> and adding the result to <code>$arg1</code> using the
            function <code>op:add-dayTimeDuration-to-dateTime</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-dayTimeDuration-from-dateTime(
  xs:dateTime("2000-10-30T11:12:00"),
  xs:dayTimeDuration("P3DT1H15M")
)</eg></fos:expression>
               <fos:result>xs:dateTime("2000-10-27T09:57:00")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="add-yearMonthDuration-to-date" prefix="op">
      <fos:signatures>
         <fos:proto name="add-yearMonthDuration-to-date" return-type="xs:date">
            <fos:arg name="arg1" type="xs:date"/>
            <fos:arg name="arg2" type="xs:yearMonthDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="+" types="xs:date xs:yearMonthDuration numeric"
            >Defines the semantics
         of the <code>+</code> operator when applied to an <code>xs:date</code> and an
            <code>xs:yearMonthDuration</code> value. </fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:date</code> that is a given duration after a specified
               <code>xs:date</code> (or before, if the duration is negative).</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of casting <code>$arg1</code> to an
               <code>xs:dateTime</code>, adding <code>$arg2</code> using the function
               <code>op:add-yearMonthDuration-to-dateTime</code>, and casting the result back to an
               <code>xs:date</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:add-yearMonthDuration-to-date(
  xs:date("2000-10-30"),
  xs:yearMonthDuration("P1Y2M")
)</eg></fos:expression>
               <fos:result>xs:date("2001-12-30")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="add-dayTimeDuration-to-date" prefix="op">
      <fos:signatures>
         <fos:proto name="add-dayTimeDuration-to-date" return-type="xs:date">
            <fos:arg name="arg1" type="xs:date"/>
            <fos:arg name="arg2" type="xs:dayTimeDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="+" types="xs:date xs:dayTimeDuration numeric"
            >Defines the semantics of
         the <code>+</code> operator when applied to an <code>xs:date</code> and an
            <code>xs:dayTimeDuration</code> value. </fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:date</code> that is a given duration after a specified
               <code>xs:date</code> (or before, if the duration is negative).</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of casting <code>$arg1</code> to an
               <code>xs:dateTime</code>, adding <code>$arg2</code> using the function
               <code>op:add-dayTimeDuration-to-dateTime</code>, and casting the result back to an
               <code>xs:date</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:add-dayTimeDuration-to-date(
  xs:date("2004-10-30Z"),
  xs:dayTimeDuration("P2DT2H30M0S")
)</eg></fos:expression>
               <fos:result>xs:date("2004-11-01Z")</fos:result>
               <fos:postamble> The starting instant of the first argument is the
                     <code>xs:dateTime</code> value <code>{2004, 10, 30, 0, 0, 0, PT0S}</code>.
                  Adding the second argument to this gives the <code>xs:dateTime</code> value
                     <code>{2004, 11, 1, 2, 30, 0, PT0S}</code>. The time components are then
                  discarded. </fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="subtract-yearMonthDuration-from-date" prefix="op">
      <fos:signatures>
         <fos:proto name="subtract-yearMonthDuration-from-date" return-type="xs:date">
            <fos:arg name="arg1" type="xs:date"/>
            <fos:arg name="arg2" type="xs:yearMonthDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="-" types="xs:date xs:yearMonthDuration numeric"
            >Defines the semantics
         of the <code>-</code> operator when applied to an <code>xs:date</code> and an
            <code>xs:yearMonthDuration</code> value. </fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:date</code> that is a given duration before a specified
               <code>xs:date</code> (or after, if the duration is negative).</p>
      </fos:summary>
      <fos:rules>
         <p>Returns the <code>xs:date</code> computed by negating <code>$arg2</code> and adding the
            result to <code>$arg1</code> using the function
               <code>op:add-yearMonthDuration-to-date</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-yearMonthDuration-from-date(
  xs:date("2000-10-30"),
  xs:yearMonthDuration("P1Y2M")
)</eg></fos:expression>
               <fos:result>xs:date("1999-08-30")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-yearMonthDuration-from-date(
  xs:date("2000-02-29Z"),
  xs:yearMonthDuration("P1Y")
)</eg></fos:expression>
               <fos:result>xs:date("1999-02-28Z")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-yearMonthDuration-from-date(
  xs:date("2000-10-31-05:00"),
  xs:yearMonthDuration("P1Y1M")
)</eg></fos:expression>
               <fos:result>xs:date("1999-09-30-05:00")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="subtract-dayTimeDuration-from-date" prefix="op">
      <fos:signatures>
         <fos:proto name="subtract-dayTimeDuration-from-date" return-type="xs:date">
            <fos:arg name="arg1" type="xs:date"/>
            <fos:arg name="arg2" type="xs:dayTimeDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="-" types="xs:date xs:dayTimeDuration numeric"
            >Defines the semantics of
         the <code>-</code> operator when applied to an <code>xs:date</code> and an
            <code>xs:dayTimeDuration</code>. </fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:date</code> that is a given duration before a specified
               <code>xs:date</code> (or after, if the duration is negative).</p>
      </fos:summary>
      <fos:rules>
         <p>Returns the <code>xs:date</code> computed by negating <code>$arg2</code> and adding the
            result to <code>$arg1</code> using the function
               <code>op:add-dayTimeDuration-to-date</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-dayTimeDuration-from-date(
  xs:date("2000-10-30"),
  xs:dayTimeDuration("P3DT1H15M")
)</eg></fos:expression>
               <fos:result>xs:date("2000-10-26")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="add-dayTimeDuration-to-time" prefix="op">
      <fos:signatures>
         <fos:proto name="add-dayTimeDuration-to-time" return-type="xs:time">
            <fos:arg name="arg1" type="xs:time"/>
            <fos:arg name="arg2" type="xs:dayTimeDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="+" types="xs:time xs:dayTimeDuration numeric"
            >Defines the semantics of
         the <code>+</code> operator when applied to an <code>xs:time</code> and an
            <code>xs:dayTimeDuration</code> value.</fos:opermap>
      <fos:summary>
         <p>Returns the <code>xs:time</code> value that is a given duration after a specified
               <code>xs:time</code> (or before, if the duration is negative or causes wrap-around
            past midnight)</p>
      </fos:summary>
      <fos:rules>
         <p>First, the days component in the canonical lexical representation of <code>$arg2</code>
            is set to zero (0) and the value of the resulting <code>xs:dayTimeDuration</code> is
            calculated. Alternatively, the value of <code>$arg2</code> modulus 86,400 is used as the
            second argument. This value is added to the value of <code>$arg1</code> converted to an
               <code>xs:dateTime</code> using a reference date such as <code>1972-12-31</code>, and
            the time component of the result is returned. Note that the <code>xs:time</code>
            returned may occur in a following or preceding day and may be less than
               <code>$arg1</code>.</p>
         <p>The result has the same timezone as <code>$arg1</code>. If <code>$arg1</code> has no
            timezone, the result has no timezone.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:add-dayTimeDuration-to-time(
  xs:time("11:12:00"),
  xs:dayTimeDuration("P3DT1H15M")
)</eg></fos:expression>
               <fos:result>xs:time("12:27:00")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:add-dayTimeDuration-to-time(
  xs:time("23:12:00+03:00"),
  xs:dayTimeDuration("P1DT3H15M")
)</eg></fos:expression>
               <fos:result>xs:time("02:27:00+03:00")</fos:result>
               <fos:postamble>That is, <code>{0, 0, 0, 2, 27, 0, PT3H}</code></fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="subtract-dayTimeDuration-from-time" prefix="op">
      <fos:signatures>
         <fos:proto name="subtract-dayTimeDuration-from-time" return-type="xs:time">
            <fos:arg name="arg1" type="xs:time"/>
            <fos:arg name="arg2" type="xs:dayTimeDuration"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="-" types="xs:time xs:dayTimeDuration numeric"
            >Defines the semantics of
         the <code>-</code> operator when applied to an <code>xs:time</code> and an
            <code>xs:dayTimeDuration</code> value. </fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the <code>xs:time</code> value that is a given duration before a specified
               <code>xs:time</code> (or after, if the duration is negative or causes wrap-around
            past midnight)</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of negating <code>$arg2</code> and adding the result to
               <code>$arg1</code> using the function <code>op:add-dayTimeDuration-to-time</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-dayTimeDuration-from-time(
  xs:time("11:12:00"),
  xs:dayTimeDuration("P3DT1H15M")
)</eg></fos:expression>
               <fos:result>xs:time("09:57:00")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>op:subtract-dayTimeDuration-from-time(
  xs:time("08:20:00-05:00"),
  xs:dayTimeDuration("P23DT10H10M")
)</eg></fos:expression>
               <fos:result>xs:time("22:10:00-05:00")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="format-dateTime" prefix="fn">
      <fos:signatures>
         <fos:proto name="format-dateTime" return-type="xs:string?">
            <fos:arg name="value" type="xs:dateTime?"/>
            <fos:arg name="picture" type="xs:string"/>
            <fos:arg name="language" type="xs:string?" default="()"/>
            <fos:arg name="calendar" type="xs:string?" default="()"/>
            <fos:arg name="place" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="default-calendar default-language default-place implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="5">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone namespaces">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a string containing an <code>xs:dateTime</code> value formatted for display.</p>
      </fos:summary>
      <fos:rules>
         <p>See <specref ref="rules-for-datetime-formatting"/>.</p>
      </fos:rules>
      <fos:history>
         <fos:version>The 3rd, 4th, and 5th arguments are now optional; previously the function required either 2 or 5 arguments.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="format-date" prefix="fn">
      <fos:signatures>
         <fos:proto name="format-date" return-type="xs:string?">
            <fos:arg name="value" type="xs:date?"/>
            <fos:arg name="picture" type="xs:string"/>
            <fos:arg name="language" type="xs:string?" default="()"/>
            <fos:arg name="calendar" type="xs:string?" default="()"/>
            <fos:arg name="place" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="default-calendar default-language default-place implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="5">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone namespaces">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a string containing an <code>xs:date</code> value formatted for display.</p>
      </fos:summary>
      <fos:rules>
         <p>See <specref ref="rules-for-datetime-formatting"/>.</p>
      </fos:rules>
      <fos:history>
         <fos:version>The 3rd, 4th, and 5th arguments are now optional; previously the function required either 2 or 5 arguments.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="format-time" prefix="fn">
      <fos:signatures>
         <fos:proto name="format-time" return-type="xs:string?">
            <fos:arg name="value" type="xs:time?"/>
            <fos:arg name="picture" type="xs:string"/>
            <fos:arg name="language" type="xs:string?" default="()"/>
            <fos:arg name="calendar" type="xs:string?" default="()"/>
            <fos:arg name="place" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="default-calendar default-language default-place implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="5">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone namespaces">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a string containing an <code>xs:time</code> value formatted for display.</p>
      </fos:summary>
      <fos:rules>
         <p>See <specref ref="rules-for-datetime-formatting"/>.</p>
      </fos:rules>
      <fos:history>
         <fos:version>The 3rd, 4th, and 5th arguments are now optional; previously the function required either 2 or 5 arguments.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="parse-ietf-date" prefix="fn">
      <fos:signatures>
         <fos:proto name="parse-ietf-date" return-type="xs:dateTime?">
            <fos:arg name="value" type="xs:string?" example="'Wed, 06 Jun 1994 07:29:35 GMT'"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>

      <fos:summary>
         <p>Parses a string containing the date and time in IETF format, returning the corresponding
               <code>xs:dateTime</code> value.</p>
      </fos:summary>
      <fos:rules>
         <p>The function accepts a string matching the production <code>input</code> in the
            following grammar:</p>
         <table role="scrap">
           <tbody>
            <tr>
               <td>
                  <code>input</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>S? (dayname ","? S)? ((datespec S time) | asctime) S?</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>dayname</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>"Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun" | "Monday | "Tuesday"
                     | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday"</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>datespec</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>daynum dsep monthname dsep year</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>asctime</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>monthname dsep daynum S time S year</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>dsep</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>S | (S? "-" S?)</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>daynum</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>digit digit?</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>year</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>digit digit (digit digit)?</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>digit</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>[0-9]</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>monthname</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>"Jan" | "Feb" | "Mar" | "Apr" | "May" | "Jun" | "Jul" | "Aug" | "Sep" |
                     "Oct" | "Nov" | "Dec"</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>time</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>hours ":" minutes (":" seconds)? (S? timezone)?</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>hours</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <phrase><code>digit digit?</code></phrase>
               </td>
            </tr>
            <tr>
               <td>
                  <code>minutes</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>digit digit</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>seconds</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>digit digit ("." digit+)?</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>timezone</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>tzname | tzoffset (S? "(" S? tzname S? ")")?</code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>tzname</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>"UT" | "UTC" | "GMT" | "EST" | "EDT" | "CST" | "CDT" | "MST" | "MDT" | "PST"
                     | "PDT" </code>
               </td>
            </tr>
            <tr>
               <td>
                  <code>tzoffset</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <phrase><code>("+"|"-") hours ":"? minutes?</code></phrase>
               </td>
            </tr>
            <tr>
               <td>
                  <code>S</code>
               </td>
               <td>
                  <code>::=</code>
               </td>
               <td>
                  <code>(x09 | x0A | x0D | x20)+</code>
               </td>
            </tr>
          </tbody>
         </table>

         <p>The input is case-insensitive: upper-case and lower-case distinctions in the above
            grammar show the conventional usage, but otherwise have no significance.</p>
         <p>If the input is an empty sequence, the result is an empty sequence.</p>
         <p>The <code>dayname</code>, if present, is ignored.</p>
         <p>The <code>daynum</code>, <code>monthname</code>, and <code>year</code> supply the day,
            month, and year of the resulting <code>xs:dateTime</code> value. A two-digit year
               <rfc2119>must</rfc2119> have 1900 added to it. A year such as 0070 is to be treated
            as given; negative years are not permitted.</p>
         <p>The <code>hours</code>, <code>minutes</code>, and <code>seconds</code> (including
            fractional seconds) values supply the corresponding components of the resulting
               <code>xs:dateTime</code> value; if the <code>seconds</code> value 
            <phrase>or the fractional seconds value</phrase> is absent then zero
            is assumed.</p>
         <p>If both a <code>tzoffset</code> and a <code>tzname</code> are supplied then the
               <code>tzname</code> is ignored.</p>
         <p>If a <code>tzoffset</code> is supplied then this defines the hours and minutes parts of the timezone offset:</p>
         <ulist>
            <item>
               <p>If it contains a colon, this separates the hours part from the minutes part.</p>
            </item>
            <item>
               <p>Otherwise, the grammar allows a sequence of from one to four digits. These are interpreted
            as <code>H</code>, <code>HH</code>, <code>HMM</code>, or <code>HHMM</code> respectively, where <code>H</code>
            or <code>HH</code> is the hours part, and <code>MM</code> (if present) is the minutes part.</p>
            </item>
            <item><p>If the minutes part is absent it defaults to <code>00</code>.</p></item>
         </ulist>

         <p>If a <code>tzname</code> is supplied with no <code>tzoffset</code> then it is translated
            to a timezone offset as follows:</p>
         <table role="data">
            <thead>
               <tr>
                  <th>tzname</th>
                  <th>Offset</th>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <td>UT, UTC, GMT</td>
                  <td>00:00</td>
               </tr>
               <tr>
                  <td>EST</td>
                  <td>-05:00</td>
               </tr>
               <tr>
                  <td>EDT</td>
                  <td>-04:00</td>
               </tr>
               <tr>
                  <td>CST</td>
                  <td>-06:00</td>
               </tr>
               <tr>
                  <td>CDT</td>
                  <td>-05:00</td>
               </tr>
               <tr>
                  <td>MST</td>
                  <td>-07:00</td>
               </tr>
               <tr>
                  <td>MDT</td>
                  <td>-06:00</td>
               </tr>
               <tr>
                  <td>PST</td>
                  <td>-08:00</td>
               </tr>
               <tr>
                  <td>PDT</td>
                  <td>-07:00</td>
               </tr>
            </tbody>
         </table>
         <p>If neither a <code>tzoffset</code> nor <code>tzname</code> is supplied, a timezone
            offset of <code>00:00</code> is assumed.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref spec="FO" class="RG" code="0010"
            /> if the input does
            not match the grammar, or if the resulting date/time value is invalid
            (for example, <code>"31 February"</code>).</p>
      </fos:errors>
      <fos:notes>
         <p>The <code>parse-ietf-date</code> function attempts to interpret its input as a date
            in any of the three formats specified by HTTP <bibref
               ref="rfc2616"/>.</p>

         <p>These formats are used widely on the Internet to represent timestamps, and were
            specified in:</p>
         <ulist>
            <item><p><bibref ref="rfc822"/> (electronic mail), extended in <bibref ref="rfc1123"
               /> to allow four-digit years;</p></item>
            <item><p><bibref ref="rfc850"/> (Usenet Messages), obsoleted by <bibref ref="rfc1036"
               />;</p></item>
            <item><p>POSIX <code>asctime()</code> format</p></item>
         </ulist>
         <p><bibref ref="rfc2616"
            /> (HTTP) officially uses a subset of those three formats restricted to GMT.</p>

         <p>The grammar for this function is slightly more liberal than the RFCs (reflecting the internet tradition of being liberal in what is accepted).
            For example the function:</p>

         <olist>
            <item>
               <p>Accepts a single-digit value where appropriate in place of a two-digit value with a leading zero (so
                  <code>"Wed 1 Jun"</code> is acceptable in place of <code>"Wed 01 Jun"</code>,
                  <phrase>and the timezone offset <code>"-5:00"</code> is equivalent to <code>"-05:00"</code>)</phrase></p>
            </item>
            <item>
               <p>Accepts one or more whitespace characters (x20, x09, x0A, x0D) wherever a single
                  space is required, and allows whitespace to be omitted where it is not required
                  for parsing</p>
            </item>
            <item>
               <p>Accepts and ignores whitespace characters (x20, x09, x0A, x0D) at the start or end
                  of the string.</p>
            </item>
         </olist>

         <p>In new protocols IETF recommends the format of <bibref ref="rfc3339"
               /> which is based on a profile of
            ISO 8601 similar to that already used in XPath and XSD, but the “approximate” <bibref
               ref="rfc822"/>
            format described here is very widely used.</p>

         <p>An <bibref ref="rfc1123"
               /> date can be generated approximately using <code>fn:format-dateTime</code> with a picture
            string of <code>"[FNn3], [D01] [MNn3] [Y04] [H01]:[m01]:[s01] [Z0000]"</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>parse-ietf-date("Wed, 06 Jun 1994 07:29:35 GMT")</fos:expression>
               <fos:result>xs:dateTime("1994-06-06T07:29:35Z")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-ietf-date("Wed, 6 Jun 94 07:29:35 GMT")</fos:expression>
               <fos:result>xs:dateTime("1994-06-06T07:29:35Z")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-ietf-date("Wed Jun 06 11:54:45 EST 2013")</fos:expression>
               <fos:result>xs:dateTime("2013-06-06T11:54:45-05:00")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-ietf-date("Sunday, 06-Nov-94 08:49:37 GMT")</fos:expression>
               <fos:result>xs:dateTime("1994-11-06T08:49:37Z")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-ietf-date("Wed, 6 Jun 94 07:29:35 +0500")</fos:expression>
               <fos:result>xs:dateTime("1994-06-06T07:29:35+05:00")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>

   </fos:function>

   <fos:function name="resolve-QName" prefix="fn">
      <fos:signatures>
         <fos:proto name="resolve-QName" return-type="xs:QName?">
            <fos:arg name="value" type="xs:string?"/>
            <fos:arg name="element" type="element()" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an <code>xs:QName</code> value (that is, an expanded-QName) by taking an
               <code>xs:string</code> that has the lexical form of an <code>xs:QName</code> (a
            string in the form <code>"prefix:local-name"</code> or <code>"local-name"</code>)
            and resolving it using the in-scope namespaces for a given element.</p>
      </fos:summary>
      <fos:rules>

         <p>If <code>$value</code> is the empty sequence, returns the empty sequence.</p>
         <p>More specifically, the function searches the namespace bindings of <code>$element</code>
            for a binding whose name matches the prefix of <code>$value</code>, or the zero-length
            string if it has no prefix, and returns an expanded-QName whose local name is taken
            from the supplied <code>$value</code>, and whose namespace URI is taken from the string
            value of the namespace binding.</p>

         <p>If the <code>$value</code> has no prefix, and there is no namespace binding for
               <code>$element</code> corresponding to the default (unnamed) namespace, then the
            resulting expanded-QName has no namespace part.</p>
         <p>The prefix (or absence of a prefix) in the supplied <code>$value</code> argument is
            retained in the returned expanded-QName, as described in <xspecref
               spec="DM40" ref="terminology"/>.</p>

      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="CA" code="0002"
               /> if <code>$value</code> does
            not have the correct lexical form for an instance of <code>xs:QName</code>.</p>
         <p>A dynamic error is raised <errorref class="NS" code="0004"
               /> if <code>$value</code> has
            a prefix and there is no namespace binding for <code>$element</code> that matches this
            prefix.</p>
      </fos:errors>
      <fos:notes>
         <p>Sometimes the requirement is to construct an <code>xs:QName</code> without using the
            default namespace. This can be achieved by writing:</p>
         <eg xml:space="preserve"> if (contains($value, ":")) then resolve-QName($value, $element) else
            QName("", $value)</eg>
         <p>If the requirement is to construct an <code>xs:QName</code> using the namespaces in the
            static context, then the <code>xs:QName</code> constructor should be used.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>Assume that the element bound to <code>$element</code> has a single namespace binding
               bound to the prefix <code>eg</code>.</p>
         </fos:example>

         <fos:example>
            <p>
               <code>fn:resolve-QName("hello", $element)</code> returns a QName with local name
               <code>"hello"</code> that is in no namespace.</p>
         </fos:example>
         <fos:example>
            <p>
               <code>fn:resolve-QName("eg:myFunc", $element)</code> returns an <code>xs:QName</code>
               whose namespace URI is specified by the namespace binding corresponding to the prefix
               <code>"eg"</code> and whose local name is <code>"myFunc"</code>.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="QName" prefix="fn">
      <fos:signatures>
         <fos:proto name="QName" return-type="xs:QName">
            <fos:arg name="uri" type="xs:string?"/>
            <fos:arg name="qname" type="xs:string"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an <code>xs:QName</code> value formed using a supplied namespace URI and lexical QName.</p>
      </fos:summary>
      <fos:rules>

         <p>The namespace URI in the returned QName is taken from <code>$uri</code>. If
               <code>$uri</code> is the zero-length string or the empty sequence, it represents
            “no namespace”.</p>
         <p>The prefix (or absence of a prefix) in <code>$qname</code> is retained in the
            returned <code>xs:QName</code> value.</p>
         <p>The local name in the result is taken from the local part of
            <code>$qname</code>.</p>

      </fos:rules>
      <fos:errors>
 
           <p>A dynamic error is raised <errorref class="CA" code="0002"
               /> if <code>$qname</code>
            does not have the correct lexical form for an instance of <code>xs:QName</code>.</p>
           <p>A dynamic error is raised <errorref class="CA" code="0002"
               /> if <code>$uri</code>
            is the zero-length string or the empty sequence, and the value of
               <code>$qname</code> contains a colon (<code>:</code>).</p>
           <p>A dynamic error <rfc2119>may</rfc2119> be raised <errorref class="CA" code="0002"
               /> if
               <code>$uri</code> is not a valid URI (XML Namespaces 1.0) or IRI (XML Namespaces
            1.1). </p>

      </fos:errors>

      <fos:examples>
 
         <fos:example>
            <p>
               <code>fn:QName("http://www.example.com/example", "person")</code> returns an
               <code>xs:QName</code> with namespace URI <code>"http://www.example.com/example"</code>,
               local name <code>"person"</code> and prefix <code>""</code>.</p>
            <p>
               <code>fn:QName("http://www.example.com/example", "ht:person")</code> returns an
               <code>xs:QName</code> with namespace URI <code>"http://www.example.com/example"</code>,
               local name <code>"person"</code> and prefix <code>"ht"</code>.</p>
            
         </fos:example>

      </fos:examples>

   </fos:function>
   <fos:function name="parse-QName" prefix="fn" diff="add" at="B">
      <fos:signatures>
         <fos:proto name="parse-QName" return-type="xs:QName">
            <fos:arg name="value" type="xs:string"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="namespaces">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an <code>xs:QName</code> value formed by parsing an EQName.</p>
      </fos:summary>
      <fos:rules>

            <p>Leading and trailing whitespace in <code>$value</code> is stripped.</p>
            <p>If the resulting <code>$value</code> is castable to <code>xs:NCName</code>,
               the result is <code>fn:QName("", $value)</code>: that is, a QName in no namespace.</p>
            <p>Otherwise, if the resulting <code>$value</code> is in the lexical space of <code>xs:QName</code>
               (that is, if it is in the form <code>prefix:local</code>), the result is <code>xs:QName($value)</code>.
               Note that this result depends on the in-scope prefixes in the static context, and may result in
               various error conditions.</p>
            <p>Otherwise, if the resulting <code>$value</code> takes the form of an
               XPath <xnt spec="XP40" ref="BracedURILiteral">BracedURILiteral</xnt>
               (that is, <code>Q{uri}local</code>, where the <code>uri</code> part may be zero-length),
               then the result is <code>fn:QName(uri, local)</code>.</p>
            <p>The rules used for parsing a <xnt spec="XP40" ref="BracedURILiteral"/> within a 
            <xnt spec="XP40" ref="URIQualifiedName">URIQualifiedName</xnt> are the XPath rules,
                  not the XQuery rules (the XQuery rules require special characters such as <code>&lt;</code>
                  and <code>&amp;</code> to be escaped).</p>
         
      </fos:rules>
      <fos:errors>

            <p>A dynamic error is raised <errorref class="CA" code="0002"/>
               if the supplied value of <code>$value</code>, after whitespace normalization,
               does not match the XPath production <xspecref spec="XP40" ref="EQName">EQName</xspecref></p>
            <p>A dynamic error is raised <errorref class="NS" code="0004"/> if
               the supplied value of <code>$value</code>, after whitespace normalization,
               is in the form <code>prefix:local</code> (with a non-absent prefix), and
               the prefix cannot be resolved to a namespace URI using the in-scope namespace
               bindings from the static context.</p>
      </fos:errors>
      
      <fos:examples>
         <fos:example>
            <p>
               <code>fn:parse-QName("Q{http://www.example.com/example}person")</code> returns an
               <code>xs:QName</code> with namespace URI <code>"http://www.example.com/example"</code>,
               local name <code>"person"</code> and prefix <code>""</code>.</p>
            <p>
               <code>fn:parse-QName("person")</code> returns an
               <code>xs:QName</code> with absent namespace URI, local
               name <code>"person"</code> and prefix <code>""</code>.</p>
            <p>
               <code>fn:parse-QName("Q{}person")</code> returns an
               <code>xs:QName</code> with absent namespace URI, local
               name <code>"person"</code> and prefix <code>""</code>.</p>
            <p>
               <code>fn:parse-QName("p:person")</code> returns an
               <code>xs:QName</code> with namespace URI obtained from the static context, local
               name <code>"person"</code> and prefix <code>"p"</code>
               (The result is the same as <code>xs:QName("p:person")</code>).</p>
         </fos:example>

      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New function, accepted 2022-11-18</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="expanded-QName" prefix="fn" diff="add" at="B">
      <fos:signatures>
         <fos:proto name="expanded-QName" return-type="xs:string?">
            <fos:arg name="value" type="xs:QName?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a string representation of an <code>xs:QName</code> in the format <code>Q{uri}local</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, returns the empty sequence.</p>
         <p>The result is a string in the format <code>Q{uri}local</code>, where:</p>
         <ulist>
            <item><p><code>uri</code> 
               is the result of <code>fn:string(fn:namespace-uri-from-QName($value))</code>
               (which will be a zero-length string if the QName is in no namespace), and </p></item>
            <item><p><code>local</code> is the result of 
               <code>fn:local-name-from-QName($value)</code>.</p></item>
         </ulist>
         <p>There is no escaping of special characters in the namespace URI. If the namespace URI
            contains curly braces, the resulting string will not be a valid 
            <xnt spec="XP40" ref="BracedURILiteral">BracedURILiteral</xnt>.</p>
      </fos:rules>
 
      
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>QName("http:/example.com", "person")
=> expanded-QName()</eg></fos:expression>
               <fos:result>"Q{http://example.com}person"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>QName("", "person")
=> expanded-QName()</eg></fos:expression>
               <fos:result>"Q{}person"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New function, accepted 2022-11-15.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="QName-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="QName-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:QName"/>
            <fos:arg name="arg2" type="xs:QName"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="xs:QName numeric" other-operators="ne"
            >Defines the semantics
         of the <code>eq</code> and <code>ne</code> operators when applied to two values of type <code>xs:QName</code>. </fos:opermap>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if two supplied QNames have the same namespace URI and the
            same local part.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>true</code> if the namespace URIs of <code>$arg1</code> and
               <code>$arg2</code> are equal and the local names of <code>$arg1</code> and
               <code>$arg2</code> are equal.</p>
         <p>Otherwise, the function returns <code>false</code>.</p>
         <p>The namespace URI parts are considered equal if they are both <xtermref ref="dt-absent"
               spec="DM40"
               >absent</xtermref>, or if they are both present and equal under the rules
            of the <code>fn:codepoint-equal</code> function.</p>
         <p>The local parts are also compared under the rules of the <code>fn:codepoint-equal</code>
            function.</p>
      </fos:rules>
      <fos:notes>
         <p>The prefix parts of <code>$arg1</code> and <code>$arg2</code>, if any, are ignored.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="prefix-from-QName" prefix="fn">
      <fos:signatures>
         <fos:proto name="prefix-from-QName" return-type="xs:NCName?">
            <fos:arg name="value" type="xs:QName?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the prefix component of the supplied QName.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence the function returns the empty sequence.</p>
         <p>If <code>$value</code> has no prefix component the function returns the empty
            sequence.</p>
         <p>Otherwise, the function returns an <code>xs:NCName</code> representing the prefix
            component of <code>$value</code>.</p>
      </fos:rules>
   </fos:function>
   <fos:function name="local-name-from-QName" prefix="fn">
      <fos:signatures>
         <fos:proto name="local-name-from-QName" return-type="xs:NCName?">
            <fos:arg name="value" type="xs:QName?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the local part of the supplied QName.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:NCName</code> representing the local part of
            <code>$value</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>local-name-from-QName(
  QName("http://www.example.com/example", "person")
)</eg></fos:expression>
               <fos:result>"person"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="namespace-uri-from-QName" prefix="fn">
      <fos:signatures>
         <fos:proto name="namespace-uri-from-QName" return-type="xs:anyURI?">
            <fos:arg name="value" type="xs:QName?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the namespace URI part of the supplied QName.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence the function returns the empty sequence.</p>
         <p>Otherwise, the function returns an <code>xs:anyURI</code> representing the namespace URI
            part of <code>$value</code>.</p>
         <p>If <code>$value</code> is in no namespace, the function returns the zero-length
               <code>xs:anyURI</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>namespace-uri-from-QName(
  QName("http://www.example.com/example", "person")
)</eg></fos:expression>
               <fos:result>xs:anyURI("http://www.example.com/example")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="namespace-uri-for-prefix" prefix="fn">
      <fos:signatures>
         <fos:proto name="namespace-uri-for-prefix" return-type="xs:anyURI?">
            <fos:arg name="value" type="union(xs:NCName, enum(''))?"/>
            <fos:arg name="element" type="element()" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the namespace URI of one of the in-scope namespaces for <code>$element</code>,
            identified by its namespace prefix.</p>
      </fos:summary>
      <fos:rules>
         <p diff="chg" at="A"
               >The function returns the result of the expression <code>map:get(fn:in-scope-namespaces($element), string($value))</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:variable name="e" id="v-namespace-uri-for-prefix-e"><![CDATA[
<z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two">
  <b xmlns=""/>
</z:a>]]></fos:variable>
         <fos:example>
            <fos:test use="v-namespace-uri-for-prefix-e">
               <fos:expression>namespace-uri-for-prefix("z", $e)</fos:expression>
               <fos:result>"http://example.org/two"</fos:result>
            </fos:test>
            <fos:test use="v-namespace-uri-for-prefix-e">
               <fos:expression>namespace-uri-for-prefix("", $e)</fos:expression>
               <fos:result>"http://example.org/one"</fos:result>
            </fos:test>
            <fos:test use="v-namespace-uri-for-prefix-e">
               <fos:expression>namespace-uri-for-prefix((), $e)</fos:expression>
               <fos:result>"http://example.org/one"</fos:result>
            </fos:test>
            <fos:test use="v-namespace-uri-for-prefix-e">
               <fos:expression>namespace-uri-for-prefix("xml", $e)</fos:expression>
               <fos:result>"http://www.w3.org/XML/1998/namespace"</fos:result>
            </fos:test>

         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Reformulated in 4.0, so it is now defined in terms of the new
            <code>fn:in-scope-namespaces</code> function; the semantics are unchanged.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="in-scope-namespaces" prefix="fn" diff="add" at="A">
      <fos:signatures>
         <fos:proto name="in-scope-namespaces"
            return-type="map(union(xs:NCName, enum('')), xs:anyURI)">
            <fos:arg name="element" type="element()" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the in-scope namespaces of an element node, as a map.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns a map representing the prefixes of the in-scope
            namespaces for <code>$element</code>. The map contains one entry
         for each in-scope namespace: the key of the entry is the namespace
         prefix or a zero-length string, and the corresponding value is the namespace URI.</p>

         <p>For namespace bindings that have a prefix, the key represents the prefix as an
            instance of <code>xs:NCName</code>. For the default namespace, which has no prefix, the key is
            the zero-length string as an instance of <code>xs:string</code>.</p>



      </fos:rules>
      <fos:notes>
         <p>The XML namespace is in scope for every element, so the result will always include an entry
            with key <code>"xml"</code> and corresponding value <code>http://www.w3.org/XML/1998/namespace</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="e" id="v-in-scope-namespaces-e"><![CDATA[
<z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two">
  <b xmlns=""/>
</z:a>]]></fos:variable>
         <fos:example>
            <fos:test use="v-in-scope-namespaces-e">
               <fos:expression>in-scope-namespaces($e)</fos:expression>
               <fos:result>map{"": "http://example.org/one", "z": "http://example.org/two",
                  "xml": "http://www.w3.org/XML/1998/namespace"}</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-09-20. Note that the function signature uses notation
         that is not yet accepted.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="in-scope-prefixes" prefix="fn">
      <fos:signatures>
         <fos:proto name="in-scope-prefixes" return-type="xs:string*">
            <fos:arg name="element" type="element()" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic-wrt-ordering</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the prefixes of the in-scope namespaces for an element node.</p>
      </fos:summary>
      <fos:rules>
         <p diff="chg" at="A"
               >The function returns the result of the expression
            <code>map:keys(fn:in-scope-namespaces($element))</code> (but in no defined order).</p>

      </fos:rules>
      <fos:notes>
         <p>The XML namespace is in scope for every element, so the result will always include the string <code>"xml"</code>.</p>
      </fos:notes>
      <fos:history>
         <fos:version version="4.0">Reformulated in 4.0, so it is now defined in terms of the new
            <code>fn:in-scope-namespaces</code> function; the semantics are unchanged.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="hexBinary-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="hexBinary-equal" return-type="xs:boolean">
            <fos:arg name="value1" type="xs:hexBinary"/>
            <fos:arg name="value2" type="xs:hexBinary"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="xs:hexBinary" other-operators="ne"
            >Defines the semantics of
         the <code>eq</code> and <code>ne</code> operators when applied to two <code>xs:hexBinary</code>
         values.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if two <code>xs:hexBinary</code> values contain the same octet
            sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>true</code> if <code>$value1</code> and <code>$value2</code>
            are of the same length, measured in binary octets, and contain the same octets in the
            same order. Otherwise, it returns <code>false</code>. </p>
      </fos:rules>
   </fos:function>
   <fos:function name="hexBinary-less-than" prefix="op">
      <fos:signatures>
         <fos:proto name="hexBinary-less-than" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:hexBinary"/>
            <fos:arg name="arg2" type="xs:hexBinary"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="lt" types="xs:hexBinary" other-operators="ge"
            >Defines the semantics of
         the <code>lt</code> operator when applied to two <code>xs:hexBinary</code> values. Also used in the
         definition of the <code>ge</code> operator.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if the first argument is less than the second.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>true</code> if any of the following conditions is <code>true</code>:</p>
         <olist>
            <item>
               <p><code>$arg1</code> is zero-length (contains no octets) and <code>$arg2</code> is
                  not zero-length.</p>
            </item>
            <item>
               <p>Neither argument is zero-length, and the first octet of <code>$arg1</code> is less
                  than the first octet of <code>$arg2</code>, treating the value of the octet as an
                  unsigned integer in the range 0 to 255.</p>
            </item>
            <item>
               <p>Neither argument is zero-length, the first octet of <code>$arg1</code> is equal to
                  the first octet of <code>$arg2</code>, and the <code>xs:hexBinary</code> value
                  formed by taking all octets of <code>arg1</code> after the first is less than the
                     <code>xs:hexBinary</code> value formed by taking all octets of
                     <code>arg2</code> after the first.</p>
            </item>
         </olist>

         <p>Otherwise, the function returns <code>false</code>.</p>
      </fos:rules>
   </fos:function>

   <fos:function name="base64Binary-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="base64Binary-equal" return-type="xs:boolean">
            <fos:arg name="value1" type="xs:base64Binary"/>
            <fos:arg name="value2" type="xs:base64Binary"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="xs:base64Binary" other-operators="ne"
            >Defines the semantics
         of the <code>eq</code> and <code>ne</code> operators when applied to two <code>xs:base64Binary</code>
         values.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if two <code>xs:base64Binary</code> values contain the same octet
            sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>true</code> if <code>$value1</code> and <code>$value2</code>
            are of the same length, measured in binary octets, and contain the same octets in the
            same order. Otherwise, it returns <code>false</code>. </p>
      </fos:rules>
   </fos:function>
   <fos:function name="base64Binary-less-than" prefix="op">
      <fos:signatures>
         <fos:proto name="base64Binary-less-than" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:base64Binary"/>
            <fos:arg name="arg2" type="xs:base64Binary"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="lt" types="xs:base64Binary" other-operators="ge"
            >Defines the semantics
         of the <code>lt</code> operator when applied to two <code>xs:base64Binary</code> values. Also used in
         the definition of the <code>ge</code> operator.</fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if the first argument is less than the second.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>true</code> if any of the following conditions is <code>true</code>:</p>
         <olist>
            <item>
               <p><code>$arg1</code> is zero-length (contains no octets) and <code>$arg2</code> is
                  not zero-length.</p>
            </item>
            <item>
               <p>Neither argument is zero-length, and the first octet of <code>$arg1</code> is less
                  than the first octet of <code>$arg2</code>, treating the value of the octet as an
                  unsigned integer in the range 0 to 255.</p>
            </item>
            <item>
               <p>Neither argument is zero-length, the first octet of <code>$arg1</code> is equal to
                  the first octet of <code>$arg2</code>, and the <code>xs:base64Binary</code> value
                  formed by taking all octets of <code>arg1</code> after the first is less than the
                     <code>xs:base64Binary</code> value formed by taking all octets of
                     <code>arg2</code> after the first.</p>
            </item>
         </olist>

         <p>Otherwise, the function returns <code>false</code>.</p>
      </fos:rules>
   </fos:function>

   <fos:function name="NOTATION-equal" prefix="op">
      <fos:signatures>
         <fos:proto name="NOTATION-equal" return-type="xs:boolean">
            <fos:arg name="arg1" type="xs:NOTATION"/>
            <fos:arg name="arg2" type="xs:NOTATION"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="eq" types="xs:NOTATION numeric" other-operators="ne"
            >Defines the
         semantics of the <code>eq</code> and <code>ne</code> operators when applied to two values of type
            <code>xs:NOTATION</code>. </fos:opermap>
      <fos:summary>
         <p>Returns <code>true</code> if the two <code>xs:NOTATION</code> values have the same
            namespace URI and the same local part.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>true</code> if the namespace URIs of <code>$arg1</code> and
               <code>$arg2</code> are equal and the local names of <code>$arg1</code> and
               <code>$arg2</code> are equal.</p>
         <p>Otherwise, the function returns <code>false</code>.</p>
         <p>The namespace URI parts are considered equal if they are both <xtermref ref="dt-absent"
               spec="DM40"
               >absent</xtermref>, or if they are both present and equal under the rules
            of the <code>fn:codepoint-equal</code> function.</p>
         <p>The local parts are also compared under the rules of the <code>fn:codepoint-equal</code>
            function.</p>
      </fos:rules>
      <fos:notes>
         <p>The prefix parts of <code>$arg1</code> and <code>$arg2</code>, if any, are ignored.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="name" prefix="fn">
      <fos:signatures>
         <fos:proto name="name" return-type="xs:string">
            <fos:arg name="node" type="node()?" default="." usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the name of a node, as an <code>xs:string</code> that is either the zero-length
            string, or has the lexical form of an <code>xs:QName</code>. </p>
      </fos:summary>
      <fos:rules>
         <p>If the argument is omitted, it defaults to the context item (<code>.</code>).<phrase diff="del" at="2022-11-29"> The
            behavior of the function if the argument is omitted is exactly the same as if the
            context item had been passed as the argument.</phrase></p>
         <p>If the argument is supplied and is the empty sequence, the function returns the
            zero-length string.</p>
         <p>If the node identified by <code>$node</code> has no name (that is, if it is a document
            node, a comment, a text node, or a namespace node having no name), the function returns
            the zero-length string.</p>
         <p>Otherwise, the function returns the value of the expression
               <code>fn:string(fn:node-name($node))</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>

      </fos:errors>
      <fos:notes>
         <p>Because the result depends on the choice of namespace prefixes in the source document,
         it is not good practice to use the result of this function for anything other than display
         purposes. For example, the test <code>name(.) = 'my:profile'</code> will fail if the source
         document uses an unexpected namespace prefix. Such a test (assuming it relates to an element node) 
         is better written as <code>boolean(self::my:profile)</code>.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="local-name" prefix="fn">
      <fos:signatures>
         <fos:proto name="local-name" return-type="xs:string">
            <fos:arg name="node" type="node()?" default="." usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the local part of the name of <code>$node</code> as an <code>xs:string</code>
            that is either the zero-length string, or has the lexical form of an
               <code>xs:NCName</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>If the argument is omitted, it defaults to the context item (<code>.</code>).<phrase diff="del" at="2022-11-29"> The
            behavior of the function if the argument is omitted is exactly the same as if the
            context item had been passed as the argument.</phrase></p>
         <p>If the argument is supplied and is the empty sequence, the function returns the
            zero-length string.</p>
         <p>If the node identified by <code>$node</code> has no name (that is, if it is a document
            node, a comment, a text node, or a namespace node having no name), the function returns
            the zero-length string.</p>
         <p>Otherwise, the function returns the local part of the expanded-QName of the node
            identified by <code>$node</code>, as determined by the <code>dm:node-name</code> accessor
            defined in <xspecref
               spec="DM40" ref="dm-node-name"
               />). This will be an
               <code>xs:string</code> whose lexical form is an <code>xs:NCName</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>

      </fos:errors>
   </fos:function>
   <fos:function name="namespace-uri" prefix="fn">
      <fos:signatures>
         <fos:proto name="namespace-uri" return-type="xs:anyURI">
            <fos:arg name="node" type="node()?" default="." usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the namespace URI part of the name of <code>$node</code>, as an
               <code>xs:anyURI</code> value.</p>
      </fos:summary>
      <fos:rules>
         <p>If the argument is omitted, it defaults to the context node (<code>.</code>). <phrase diff="del" at="2022-11-29">The
            behavior of the function if the argument is omitted is exactly the same as if the
            context item had been passed as the argument.</phrase></p>
         <p>If the node identified by <code>$node</code> is neither an element nor an attribute node,
            or if it is an element or attribute node whose expanded-QName (as determined by the
               <code>dm:node-name</code> accessor in the <xspecref
               spec="DM40" ref="dm-node-name"
               />)
            is in no namespace, then the function returns the zero-length <code>xs:anyURI</code>
            value.</p>
         <p>Otherwise, the result will be the namespace URI part of the expanded-QName of the node
            identified by <code>$node</code>, as determined by the <code>dm:node-name</code> accessor
            defined in <xspecref
               spec="DM40" ref="dm-node-name"
               />), returned as an
               <code>xs:anyURI</code> value.</p>
      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>
      </fos:errors>
   </fos:function>
   <fos:function name="number" prefix="fn">
      <fos:signatures>
         <fos:proto name="number" return-type="xs:double">
            <fos:arg name="value" type="xs:anyAtomicType?" default="."/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the value indicated by <code>$value</code> or, if <code>$value</code> is not
            specified, the context item after atomization, converted to an <code>xs:double</code>.
         </p>
      </fos:summary>
      <fos:rules>
         <p>Calling the zero-argument version of the function is defined to give the same result as
            calling the single-argument version with the context item (<code>.</code>). That is,
               <code>fn:number()</code> is equivalent to <code>fn:number(.)</code>, as defined by
            the rules that follow.</p>
         <p>If <code>$value</code> is the empty sequence or if <code>$value</code> cannot be converted
            to an <code>xs:double</code>, the <code>xs:double</code> value <code>NaN</code> is
            returned. </p>
         <p>Otherwise, <code>$value</code> is converted to an <code>xs:double</code> following the
            rules of <specref
               ref="casting-to-double"
               />. If the conversion to <code>xs:double</code>
            fails, the <code>xs:double</code> value <code>NaN</code> is returned.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <xerrorref spec="XP" class="DY" code="0002" type="dynamic"
               />
            if <code>$value</code> is omitted and the context item is <xtermref
               ref="dt-absent" spec="DM40">absent</xtermref>.</p>
         <p>As a consequence of the rules given above, a type error occurs if the context item
            cannot be atomized, or if the result of atomizing the context item is a sequence
            containing more than one atomic value.</p>
         <!-- bug 16745 -->
      </fos:errors>
      <fos:notes>
         <p>XSD 1.1 allows the string <code>+INF</code> as a representation of positive infinity;
            XSD 1.0 does not. It is <termref
               def="implementation-defined"
            >implementation-defined</termref> whether XSD 1.1 is
            supported.</p>
         <p>Generally <code>fn:number</code> returns <code>NaN</code> rather than raising a dynamic
            error if the argument cannot be converted to <code>xs:double</code>. However, a type
            error is raised in the usual way if the supplied argument cannot be atomized or if the
            result of atomization does not match the required argument type.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test use="v-po v-item1">
               <fos:expression>number($item1/quantity)</fos:expression>
               <fos:result>5.0e0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-po v-item2">
               <fos:expression>number($item2/description)</fos:expression>
               <fos:result>xs:double('NaN')</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Assume that the context item is the <code>xs:string</code> value <code>"15"</code>.
               Then <code>fn:number()</code> returns <code>1.5e1</code>.</p>
         </fos:example>
      </fos:examples>

   </fos:function>
   <fos:function name="lang" prefix="fn">
      <fos:signatures>
         <fos:proto name="lang" return-type="xs:boolean">
            <fos:arg name="language" type="xs:string?"/>
            <fos:arg name="node" type="node()" default="." usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>This function tests whether the language of <code>$node</code>, or the context item if
            the second argument is omitted, as specified by <code>xml:lang</code> attributes is the
            same as, or is a sublanguage of, the language specified by <code>$language</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>The behavior of the function if the second argument is omitted is exactly the same as if
            the context item (<code>.</code>) had been passed as the second argument.</p>
         <p>The language of the argument <code>$node</code>, or the context item if the second
            argument is omitted, is determined by the value of the <code>xml:lang</code> attribute
            on the node, or, if the node has no such attribute, by the value of the
               <code>xml:lang</code> attribute on the nearest ancestor of the node that has an
               <code>xml:lang</code> attribute. If there is no such ancestor, then the function
            returns <code>false</code>. </p>

         <p>If <code>$language</code> is the empty sequence it is interpreted as the zero-length
            string.</p>
         <p>The relevant <code>xml:lang</code> attribute is determined by the value of the XPath
            expression:</p>
         <eg xml:space="preserve">(ancestor-or-self::*/@xml:lang)[last()]</eg>
         <p>If this expression returns an empty sequence, the function returns <code>false</code>. </p>
         <p>Otherwise, the function returns <code>true</code> if and only if, based on a caseless
            default match as specified in section 3.13 of <bibref
               ref="Unicode"/>, either:</p>
         <olist>
            <item>
               <p>
                  <code>$language</code> is equal to the string-value of the relevant
                     <code>xml:lang</code> attribute, or</p>
            </item>
            <item>
               <p>
                  <code>$language</code> is equal to some substring of the string-value of the
                  relevant <code>xml:lang</code> attribute that starts at the start of the
                  string-value and ends immediately before a hyphen, <code>-</code>
                  (HYPHEN-MINUS, <code>#x002D</code>).</p>
            </item>
         </olist>
      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <p>The expression <code>fn:lang("en")</code> would return <code>true</code> if the
               context node were any of the following four elements:</p>
            <ulist>
               <item>
                  <p>
                     <code>&lt;para xml:lang="en"/&gt;</code>
                  </p>
               </item>
               <item>
                  <p>
                     <code>&lt;div xml:lang="en"&gt;&lt;para&gt;And now, and
                        forever!&lt;/para&gt;&lt;/div&gt;</code>
                  </p>
               </item>
               <item>
                  <p>
                     <code>&lt;para xml:lang="EN"/&gt;</code>
                  </p>
               </item>
               <item>
                  <p>
                     <code>&lt;para xml:lang="en-us"/&gt;</code>
                  </p>
               </item>
            </ulist>
         </fos:example>
         <fos:example>
            <p>The expression <code>fn:lang("fr")</code> would return <code>false</code> if the
               context node were <code>&lt;para xml:lang="EN"/&gt;</code>
            </p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="path" prefix="fn">
      <fos:signatures>
         <fos:proto name="path" return-type="xs:string?">
            <fos:arg name="node" type="node()?" default="." usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a path expression that can be used to select the supplied node relative to the
            root of its containing document.</p>
      </fos:summary>
      <fos:rules>
         <p>The behavior of the function if the argument is omitted is exactly the same as if the
            context item (<code>.</code>) had been passed as the argument.</p>
         <p>If <code>$node</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>If <code>$node</code> is a document node, the function returns the string
               <code>"/"</code>.</p>
         <p>Otherwise, the function returns a string that consists of a sequence of steps, one
            for each ancestor-or-self of <code>$node</code> other than the root node. This string is
            prefixed by <code>"Q{http://www.w3.org/2005/xpath-functions}root()"</code> if the root
            node is not a document node. Each step consists of the character <code>"/"</code>
            followed by a string whose form depends on the kind of node selected by that step, as
            follows:</p>

         <olist>
            <item>
               <p>For an element node,
                        <code>Q{<emph>uri</emph>}<emph>local</emph>[<emph>position</emph>]</code>,
                  where <code><emph>uri</emph></code> is the namespace URI of the node name or the
                  empty string if the node is in no namespace, <code><emph>local</emph></code> is
                  the local part of the node name, and <code><emph>position</emph></code> is an
                  integer representing the position of the selected node among its like-named
                  siblings.</p>
            </item>
            <item>
               <p>For an attribute node:</p>
               <olist>
                  <item>
                     <p>if the node is in no namespace, <code>@<emph>local</emph></code>, where
                              <code><emph>local</emph></code> is the local part of the node name</p>
                  </item>
                  <item>
                     <p>otherwise, <code>@Q{<emph>uri</emph>}<emph>local</emph></code>, where
                              <code><emph>uri</emph></code> is the namespace URI of the node name,
                        and <code><emph>local</emph></code> is the local part of the node name</p>
                  </item>
               </olist>
            </item>
            <item>
               <p>For a text node: <code>text()[<emph>position</emph>]</code> where
                        <code><emph>position</emph></code> is an integer representing the position
                  of the selected node among its text node siblings</p>
            </item>
            <item>
               <p>For a comment node: <code>comment()[<emph>position</emph>]</code> where
                        <code><emph>position</emph></code> is an integer representing the position
                  of the selected node among its comment node siblings</p>
            </item>
            <item>
               <p>For a processing-instruction node:
                        <code>processing-instruction(<emph>local</emph>)[<emph>position</emph>]</code>
                  where <code><emph>local</emph></code> is the name of the processing instruction
                  node and <code><emph>position</emph></code> is an integer representing the
                  position of the selected node among its like-named processing-instruction node
                  siblings</p>
            </item>
            <item>
               <p>For a namespace node:</p>
               <olist>
                  <item>
                     <p>If the namespace node has a name:
                           <code>namespace::<emph>prefix</emph></code>, where
                              <code><emph>prefix</emph></code> is the local part of the name of the
                        namespace node (which represents the namespace prefix).</p>
                  </item>
                  <item>
                     <p>If the namespace node has no name (that is, it represents the default
                        namespace):
                           <code>namespace::*[Q{http://www.w3.org/2005/xpath-functions}local-name()=""]</code></p>
                  </item>
               </olist>
            </item>
         </olist>

      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>
      </fos:errors>
      <fos:examples>
         <fos:variable name="e" id="v-path-e"><![CDATA[
document {            
<p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller">
Freude, schöner Götterfunken,<br/>
Tochter aus Elysium,<br/>
Wir betreten feuertrunken,<br/>
Himmlische, dein Heiligtum.</p>}]]>
         </fos:variable>
         <fos:example>
            <fos:test use="v-path-e">
               <fos:expression>path($e)</fos:expression>
               <fos:result>'/'</fos:result>
            </fos:test>
            <fos:test use="v-path-e">
               <fos:expression>path($e/*:p)</fos:expression>
               <fos:result>'/Q{http://example.com/one}p[1]'</fos:result>
            </fos:test>
            <fos:test use="v-path-e">
               <fos:expression>path($e/*:p/@xml:lang)</fos:expression>
               <fos:result>'/Q{http://example.com/one}p[1]/@Q{http://www.w3.org/XML/1998/namespace}lang'</fos:result>
            </fos:test>
            <fos:test use="v-path-e">
               <fos:expression>path($e/*:p/@author)</fos:expression>
               <fos:result>'/Q{http://example.com/one}p[1]/@author'</fos:result>
            </fos:test>
            <fos:test use="v-path-e">
               <fos:expression>path($e/*:p/*:br[2])</fos:expression>
               <fos:result>'/Q{http://example.com/one}p[1]/Q{http://example.com/one}br[2]'</fos:result>
            </fos:test>
            <fos:test use="v-path-e">
               <fos:expression><eg>path(
  $e//text()[
    starts-with(normalize-space(), 'Tochter')
  ]
)</eg></fos:expression>
               <fos:result>'/Q{http://example.com/one}p[1]/text()[2]'</fos:result>
            </fos:test>
         </fos:example>
         <fos:variable name="emp" id="v-path-emp" as="element()"><![CDATA[
  <employee xml:id="ID21256">
     <empnr>E21256</empnr>
     <first>John</first>
     <last>Brown</last>
  </employee>]]>
         </fos:variable>
         <fos:example>
            <fos:test use="v-path-emp">
               <fos:expression>path($emp)</fos:expression>
               <fos:result>'Q{http://www.w3.org/2005/xpath-functions}root()'</fos:result>
            </fos:test>
            <fos:test use="v-path-emp">
               <fos:expression>path($emp/@xml:id)</fos:expression>
               <fos:result>'Q{http://www.w3.org/2005/xpath-functions}root()/@Q{http://www.w3.org/XML/1998/namespace}id'</fos:result>
            </fos:test>
            <fos:test use="v-path-emp">
               <fos:expression>path($emp/empnr)</fos:expression>
               <fos:result>'Q{http://www.w3.org/2005/xpath-functions}root()/Q{}empnr[1]'</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="root" prefix="fn">
      <fos:signatures>
         <fos:proto name="root" return-type="node()?">
            <fos:arg name="node" type="node()?" default="." usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
         <fos:property>special-streaming-rules</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         <fos:property>special-streaming-rules</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the root of the tree to which <code>$node</code> belongs. This will usually, but
            not necessarily, be a document node.</p>
      </fos:summary>
      <fos:rules>
         <p>If the function is called without an argument, the context item (<code>.</code>) is used
            as the default argument.<phrase diff="del" at="2022-11-29"> The behavior of the function if the argument is omitted is
            exactly the same as if the context item had been passed as the argument.</phrase></p>

         <p>The function returns the value of the expression
               <code>($arg/ancestor-or-self::node())[1]</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <p>These examples use some variables which could be defined in <bibref ref="xquery-40"
               />
               as:</p>
         </fos:example>
         <fos:example>
            <eg xml:space="preserve">let $i := &lt;tool&gt;wrench&lt;/tool&gt;
let $o := &lt;order&gt; {$i} &lt;quantity&gt;5&lt;/quantity&gt; &lt;/order&gt;
let $odoc := document {$o}
let $newi := $o/tool</eg>
         </fos:example>
         <fos:example>
            <p>Or they could be defined in <bibref ref="xslt-40"/> as:</p>
         </fos:example>
         <fos:example>
            <eg xml:space="preserve">&lt;xsl:variable name="i" as="element()"&gt;
  &lt;tool&gt;wrench&lt;/tool&gt;
&lt;/xsl:variable&gt;

&lt;xsl:variable name="o" as="element()"&gt;
  &lt;order&gt;
    &lt;xsl:copy-of select="$i"/&gt;
    &lt;quantity&gt;5&lt;/quantity&gt;
  &lt;/order&gt;
&lt;/xsl:variable&gt;

&lt;xsl:variable name="odoc"&gt;
  &lt;xsl:copy-of select="$o"/&gt;
&lt;/xsl:variable&gt;

&lt;xsl:variable name="newi" select="$o/tool"/&gt;</eg>
         </fos:example>
         <fos:example>
            <p><code>fn:root($i)</code> returns the element node <code>$i</code>
            </p>
         </fos:example>
         <fos:example>
            <p><code>fn:root($o/quantity)</code> returns the element node <code>$o</code>
            </p>
         </fos:example>
         <fos:example>
            <p><code>fn:root($odoc//quantity)</code> returns the document node <code>$odoc</code>
            </p>
         </fos:example>
         <fos:example>
            <p><code>fn:root($newi)</code> returns the element node <code>$o</code>
            </p>
         </fos:example>
         <fos:example>
            <p>The final three examples could be made type-safe by wrapping their operands with
                  <code>fn:exactly-one()</code>.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="has-children" prefix="fn">
      <fos:signatures>
         <fos:proto name="has-children" return-type="xs:boolean">
            <fos:arg name="node" type="node()?" default="." usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the supplied node has one or more child nodes (of any kind).</p>
      </fos:summary>
      <fos:rules>
         <p>If the argument is omitted, it defaults to the context item (<code>.</code>).<phrase diff="del" at="2022-11-29"> The
            behavior of the function if the argument is omitted is exactly the same as if the
            context item had been passed as the argument.</phrase></p>
         <p>Provided that the supplied argument <code>$node</code> matches the expected type
               <code>node()?</code>, the result of the function call
               <code>fn:has-children($node)</code> is defined to be the same as the result of the
            expression <code>fn:exists($node/child::node())</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>

      </fos:errors>
      <fos:notes>
         <p>If <code>$node</code> is an empty sequence the result is <code>false</code>.</p>
         <p>The motivation for this function is to support streamed evaluation. According to the
            streaming rules in <bibref
               ref="xslt-40"/>, the following construct is not
            streamable:</p>
         <eg><![CDATA[
<xsl:if test="exists(row)">
  <ulist>
    <xsl:for-each select="row">
       <item><xsl:value-of select="."/></item>
    </xsl:for-each>
  </ulist>
</xsl:if>  
]]></eg>
         <p>This is because it makes two downward selections to read the child <code>row</code>
            elements. The use of <code>fn:has-children</code> in the <code>xsl:if</code> conditional
            is intended to circumvent this restriction.</p>
         <p>Although the function was introduced to support streaming use cases, it has general
            utility as a convenience function.</p>
      </fos:notes>

   </fos:function>
   <fos:function name="innermost" prefix="fn">
      <fos:signatures>
         <fos:proto name="innermost" return-type="node()*">
            <fos:arg name="nodes" type="node()*" usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         <fos:property>special-streaming-rules</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns every node within the input sequence that is not an ancestor of another member
            of the input sequence; the nodes are returned in document order with duplicates
            eliminated.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the function call <code>fn:innermost($nodes)</code> is defined to be
            equivalent to the result of the expression:</p>
         <eg>$nodes except $nodes/ancestor::node()</eg>
         <p>That is, the function takes as input a sequence of nodes, and returns every node within
            the sequence that is not an ancestor of another node within the sequence; the nodes are
            returned in document order with duplicates eliminated.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <p>If the source document contains nested sections represented by <code>div</code>
               elements, the expression <code>innermost(//div)</code> returns those <code>div</code>
               elements that do not contain further <code>div</code> elements.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="outermost" prefix="fn">
      <fos:signatures>
         <fos:proto name="outermost" return-type="node()*">
            <fos:arg name="nodes" type="node()*" usage="transmission"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         <fos:property>special-streaming-rules</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns every node within the input sequence that has no ancestor that is itself a
            member of the input sequence; the nodes are returned in document order with duplicates
            eliminated.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the function call <code>fn:outermost($nodes)</code> is defined to be
            equivalent to the result of the expression:</p>
         <eg>$nodes[not(ancestor::node() intersect $nodes)]/.</eg>
         <!--bug 17029-->
         <p>That is, the function takes as input a sequence of nodes, and returns every node within
            the sequence that does not have another node within the sequence as an ancestor; the
            nodes are returned in document order with duplicates eliminated.</p>
      </fos:rules>
      <fos:notes>
         <p>The formulation <code>$nodes except $nodes/descendant::node()</code> might appear to be
            simpler, but does not correctly account for attribute nodes, as these are not
            descendants of their parent element.</p>
         <p>The motivation for the function was based on XSLT streaming use cases. There are cases
            where the <bibref
               ref="xslt-40"
               /> streaming rules allow the construct
               <code>outermost(//section)</code> but do not allow <code>//section</code>; the
            function can therefore be useful in cases where it is known that sections will not be
            nested, as well as cases where the application actually wishes to process all sections
            except those that are nested within another.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>If the source document contains nested sections represented by <code>div</code>
               elements, the expression <code>outermost(//div)</code> returns those <code>div</code>
               elements that are not contained within further <code>div</code> elements.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="index-of" prefix="fn">
      <fos:signatures>
         <fos:proto name="index-of" return-type="xs:integer*">
            <fos:arg name="input" type="xs:anyAtomicType*"/>
            <fos:arg name="search" type="xs:anyAtomicType"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence of positive integers giving the positions within the sequence
               <code>$input</code> of items that are equal to <code>$search</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns a sequence of positive integers giving the positions within the
            sequence <code>$input</code> of items that are equal to <code>$search</code>.</p>
         <p>The collation used by this function is determined according to the rules in <specref
               ref="choosing-a-collation"
            />. This collation is used when string comparison is
            required.</p>
         <p>The items in the sequence <code>$input</code> are compared with <code>$search</code> under
            the rules for the <code>eq</code> operator. Values of type <code>xs:untypedAtomic</code>
            are compared as if they were of type <code>xs:string</code>. Values that cannot be
            compared, because the <code>eq</code> operator is not defined for their types, are
            considered to be distinct. If an item compares equal, then the position of that item in
            the sequence <code>$input</code> is included in the result.</p>
         <p>The first item in a sequence is at position 1, not position 0.</p>
         <p>The result sequence is in ascending numeric order.</p>
      </fos:rules>
      <fos:notes>
         <p>If <code>$input</code> is the empty sequence, or if no item in
            <code>$input</code> matches <code>$search</code>, then the function returns the empty
            sequence.</p>
         <p>No error occurs if non-comparable values are encountered. So when comparing two atomic
            values, the effective boolean value of <code>fn:index-of($a, $b)</code> is <code>true</code> if
               <code>$a</code> and <code>$b</code> are equal, <code>false</code> if they are not equal or not
            comparable.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>index-of((10, 20, 30, 40), 35)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>index-of((10, 20, 30, 30, 20, 10), 20)</fos:expression>
               <fos:result>(2, 5)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>index-of(
  ("a", "sport", "and", "a", "pastime"),
  "a"
)</eg></fos:expression>
               <fos:result>(1, 4)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>index-of(current-date(), 23)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>index-of([1, [5, 6], [6, 7]], 6)</fos:expression>
               <fos:result>(3, 4)</fos:result>
               <fos:postamble>The array is atomized to a sequence of five integers</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>If <code>@a</code> is an attribute of type <code>xs:NMTOKENS</code> whose string
               value is <code>"red green blue"</code>, and whose typed value is therefore
                  <code>("red", "green", "blue")</code>, then <code>fn:index-of(@a, "blue")</code>
               returns <code>3</code>. This is because the function calling mechanism atomizes the
               attribute node to produce a sequence of three <code>xs:NMTOKEN</code> values.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="empty" prefix="fn">
      <fos:signatures>
         <fos:proto name="empty" return-type="xs:boolean">
            <fos:arg name="input" type="item()*" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the argument is the empty sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$input</code> is the empty sequence, the function returns
               <code>true</code>; otherwise, the function returns <code>false</code>. </p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>empty((1,2,3)[10])</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>empty(remove(("hello", "world"), 1))</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>empty([])</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>empty(map{})</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>empty("")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Assuming <code>$in</code> is an element with no children:</p>
            <eg>
let $break := &lt;br/&gt;
return empty($break)
            </eg>
            <p>The result is <code>false()</code>.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="exists" prefix="fn">
      <fos:signatures>
         <fos:proto name="exists" return-type="xs:boolean">
            <fos:arg name="input" type="item()*" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the argument is a non-empty sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$input</code> is a non-empty sequence, the function returns
               <code>true</code>; otherwise, the function returns <code>false</code>. </p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>exists(remove(("hello"), 1))</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>exists(remove(("hello", "world"), 1))</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>exists([])</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>exists(map{})</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>exists("")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Assuming <code>$in</code> is an element with no children:</p>
            <eg>
let $break := &lt;br/>
return exists($break)
            </eg>
            <p>The result is <code>true()</code>.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="distinct-values" prefix="fn">
      <fos:signatures>
         <fos:proto name="distinct-values" return-type="xs:anyAtomicType*">
            <fos:arg name="values" type="xs:anyAtomicType*"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="1">
         <fos:property>nondeterministic-wrt-ordering</fos:property>
         <fos:property dependency="collations implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the values that appear in a sequence, with duplicates eliminated.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the sequence that results from removing from <code>$values</code> all
            but one of a set of values that are considered equal to one another. 
            <phrase>Two items <var>$J</var> and <var>$K</var> in the input sequence 
               (after atomization, as required by the function signature)
            are considered equal if <code>fn:deep-equal($J, $K, $coll)</code> is <code>true</code>,
            where <code>$coll</code> is the collation selected according to the rules in <specref
                  ref="choosing-a-collation"
            />.</phrase> This collation is used when string comparison is
            required.</p>


         <p>The order in which the sequence of values is returned is <termref
               def="implementation-dependent">implementation-dependent</termref>.</p>

         <p>Which value of a set of values that compare equal is returned is <termref
               def="implementation-dependent">implementation-dependent</termref>. </p>
         <p diff="del" at="A"
               >If the input sequence contains values of different numeric types that differ from each
            other by small amounts, then the eq operator is not transitive, because of rounding
            effects occurring during type promotion. In the situation where the input contains three
            values <code>A</code>, <code>B</code>, and <code>C</code> such that <code>A eq B</code>,
               <code>B eq C</code>, but <code>A ne C</code>, then the number of items in the result
            of the function (as well as the choice of which items are returned) is <termref
               def="implementation-dependent"
            >implementation-dependent</termref>, subject only to the constraints that (a) no two
            items in the result sequence compare equal to each other, and (b) every input item that
            does not appear in the result sequence compares equal to some item that does appear in
            the result sequence.</p>

         <p diff="del" at="A">For example, this arises when computing:</p>

         <eg diff="del" at="A"><![CDATA[    distinct-values(
            (xs:float('1.0'),
            xs:decimal('1.0000000000100000000001',
            xs:double('1.00000000001'))]]></eg>

         <p diff="del" at="A"
               >because the values of type <code>xs:float</code> and <code>xs:double</code> both compare
            equal to the value of type <code>xs:decimal</code> but not equal to each other. </p>
      </fos:rules>
      <fos:notes>
         <p>If <code>$values</code> is the empty sequence, the function returns the empty sequence.</p>

         <p>Values of type <code>xs:untypedAtomic</code> are compared as if they were of type
            <code>xs:string</code>.</p>
         <p>Values that cannot be compared, because the <code>eq</code> operator is not defined for
            their types, are considered to be distinct.</p>

         <p>For <code>xs:float</code> and <code>xs:double</code> values, positive zero is equal to
            negative zero and, although <code>NaN</code> does not equal itself, if <code>$values</code>
            contains multiple <code>NaN</code> values a single <code>NaN</code> is returned.</p>
         <p> If <code>xs:dateTime</code>, <code>xs:date</code> or <code>xs:time</code> values do not
            have a timezone, they are considered to have the implicit timezone provided by the
            dynamic context for the purpose of comparison. Note that <code>xs:dateTime</code>,
            <code>xs:date</code> or <code>xs:time</code> values can compare equal even if their
            timezones are different.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>distinct-values((1, 2.0, 3, 2))</fos:expression>
               <fos:result allow-permutation="true">(1, 3, 2.0)</fos:result>
               <fos:postamble>The result may include either the <code>xs:integer</code> 2 or the <code>xs:decimal</code> 2.0</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>distinct-values((
  xs:untypedAtomic("cherry"),
  xs:untypedAtomic("plum"),
  xs:untypedAtomic("plum")
))</eg></fos:expression>
               <fos:result allow-permutation="true"
                  >(xs:untypedAtomic("cherry"),
                  xs:untypedAtomic("plum"))</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="duplicate-values" prefix="fn">
      <fos:signatures>
         <fos:proto name="duplicate-values" return-type="xs:anyAtomicType*">
            <fos:arg name="values" type="xs:anyAtomicType*"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="1">
         <fos:property>nondeterministic-wrt-ordering</fos:property>
         <fos:property dependency="collations implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the values that appear in a sequence more than once.</p>
      </fos:summary>
      <fos:rules>
         <p>The items of <code>$values</code> are compared against each other, according to the
            rules of <code>fn:distinct-values</code> and with <code>$coll</code> as the collation
            selected according to the rules in <specref ref="choosing-a-collation"/>.</p>
         <p>From each resulting set of values that are considered equal, one value will be
            returned if the set contains more than one value.</p>
         <p>The order in which the sequence of values is returned is <termref
               def="implementation-dependent">implementation-dependent</termref>.</p>
         <p>Which value of a set of values that compare equal is returned is <termref
               def="implementation-dependent">implementation-dependent</termref>. </p>
      </fos:rules>
      
      <fos:notes>
         <p>The effect of the function is equivalent to the following XSLT expression:</p>
         <eg><![CDATA[
<xsl:for-each-group select="$values" group-by="." collation="{$collation}">
  <xsl:sequence select="current-group()[2]"/>
</xsl:for-each>
]]></eg>
         <p>The following XQuery expression is equivalent if no collation is specified
(<code>group by</code> requires collation URIs to be static):</p>
         <eg>
for $group in $values
group by $value := $group
where count($group) > 1
return $value
         </eg>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>duplicate-values((1, 2, 3, 1.0, 1e0))</fos:expression>
               <fos:result>1</fos:result>
               <fos:postamble>The result may be the <code>xs:integer</code>, <code>xs:decimal</code>
                 or <code>xs:decimal</code> value of the input sequence.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>duplicate-values(1 to 100)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><![CDATA[duplicate-values(('1', <x>1</x>, '2', 2))]]></fos:expression>
              <fos:result>"1"</fos:result>
               <fos:postamble>The string <code>"1"</code> and the untyped value of the
                  element node are considered equal, whereas the string <code>"2"</code>
                  and the integer are considered unequal.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Raise an error for duplicates in an ID sequence:</p>
               <eg>let $ids := duplicate-values(//@id)
where exists($ids)
return error((), 'Duplicate IDs found: ' || string-join($ids, ', '))</eg>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="identity" prefix="fn">
      <fos:signatures>
         <fos:proto name="identity" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns its argument value.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>$input</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>The function is useful in contexts where a function must be supplied, but no processing is required.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>identity(0)</fos:expression>
               <fos:result>(0)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>identity(1 to 10)</fos:expression>
               <fos:result>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><![CDATA[parse-xml('<a/>') ! (identity(/) is /)]]></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>If the argument is a node, the function returns the identical node, not a copy</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>identity(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-09-20.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="insert-before" prefix="fn">
      <fos:signatures>
         <fos:proto name="insert-before" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="transmission"/>
            <fos:arg name="position" type="xs:integer"/>
            <fos:arg name="insert" type="item()*" usage="transmission"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence constructed by inserting an item or a sequence of items at a given
            position within an existing sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>The value returned by the function consists of all items of <code>$input</code> whose
            1-based position is less than <code>$position</code>, followed by all items of
               <code>$insert</code>, followed by the remaining elements of <code>$input</code>, in
            that order. </p>
      </fos:rules>
      <fos:notes>
         <p>If <code>$input</code> is the empty sequence, <code>$insert</code> is returned. If
               <code>$insert</code> is the empty sequence, <code>$input</code> is returned.</p>
         <p>If <code>$position</code> is less than one (1), the first position, the effective value
            of <code>$position</code> is one (1). If <code>$position</code> is greater than the
            number of items in <code>$input</code>, then the effective value of
               <code>$position</code> is equal to the number of items in <code>$input</code> plus
            1. </p>
         <p>The value of <code>$input</code> is not affected by the sequence construction.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable id="v-insert-before-abc" name="abc"
            select="(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)"/>
         <fos:example>
            <fos:test use="v-insert-before-abc">
               <fos:expression>insert-before($abc, 0, "z")</fos:expression>
               <fos:result>("z", "a", "b", "c")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-insert-before-abc">
               <fos:expression>insert-before($abc, 1, "z")</fos:expression>
               <fos:result>("z", "a", "b", "c")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-insert-before-abc">
               <fos:expression>insert-before($abc, 2, "z")</fos:expression>
               <fos:result>("a", "z", "b", "c")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-insert-before-abc">
               <fos:expression>insert-before($abc, 3, "z")</fos:expression>
               <fos:result>("a", "b", "z", "c")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-insert-before-abc">
               <fos:expression>insert-before($abc, 4, "z")</fos:expression>
               <fos:result>("a", "b", "c", "z")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="remove" prefix="fn">
      <fos:signatures>
         <fos:proto name="remove" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="transmission"/>
            <fos:arg name="positions" type="xs:integer*"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a new sequence containing all the items of <code>$input</code> <phrase diff="chg" at="2023-01-17">except those
            at specified positions</phrase>.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns a sequence consisting of all items of <code>$input</code> <phrase diff="chg" at="2023-01-17">whose
            1-based position is not equal to any of the integers in <code>$positions</code>. </phrase></p>
         <p diff="add" at="2023-01-17">More formally, the function returns the result of the expression <code>$input[not(position() = $positions)]</code>.</p>
      </fos:rules>
      <fos:notes>
         <p diff="chg" at="2023-01-17">Any integer in <code>$positions</code> that is less than 1 or greater than the number of items in
               <code>$input</code> is effectively ignored.</p>
         <p>If <code>$input</code> is the empty sequence, the empty sequence is returned.</p>
         <p diff="add" at="2023-01-17">If <code>$positions</code> is an empty sequence, the input sequence <code>$input</code> is returned unchanged.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable id="v-remove-abc" name="abc"
            select="(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)"/>
         <fos:example>
            <fos:test use="v-remove-abc">
               <fos:expression>remove($abc, 0)</fos:expression>
               <fos:result>("a", "b", "c")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-remove-abc">
               <fos:expression>remove($abc, 1)</fos:expression>
               <fos:result>("b", "c")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-remove-abc">
               <fos:expression>remove($abc, 6)</fos:expression>
               <fos:result>("a", "b", "c")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-remove-abc">
               <fos:expression>remove((), 3)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-remove-abc">
               <fos:expression>remove($abc, 2 to 3)</fos:expression>
               <fos:result>"a"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-remove-abc">
               <fos:expression>remove($abc, ())</fos:expression>
               <fos:result>("a", "b", "c")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Changed in 4.0: the second argument can now be a sequence of integers.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="head" prefix="fn">
      <fos:signatures>
         <fos:proto name="head" return-type="item()?">
            <fos:arg name="input" type="item()*" usage="transmission"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the first item in a sequence. </p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the value of the expression <code>$input[1]</code></p>
      </fos:rules>
      <fos:notes>
         <p>If <code>$input</code> is the empty sequence, the empty sequence is returned. Otherwise
            the first item in the sequence is returned.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>head(1 to 5)</fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>head(("a", "b", "c"))</fos:expression>
               <fos:result>"a"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>head(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>head([1,2,3])</fos:expression>
               <fos:result>[1,2,3]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   
   <fos:function name="tail" prefix="fn">
      <fos:signatures>
         <fos:proto name="tail" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="transmission"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns all but the first item in a sequence. </p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the value of the expression <code>subsequence($input, 2)</code></p>
      </fos:rules>
      <fos:notes>
         <p>If <code>$input</code> is the empty sequence, or a sequence containing a single item, then
            the empty sequence is returned. </p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>tail(1 to 5)</fos:expression>
               <fos:result>(2, 3, 4, 5)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>tail(("a", "b", "c"))</fos:expression>
               <fos:result>("b", "c")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>tail("a")</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>tail(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>tail([1,2,3])</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   
   <fos:function name="trunk" prefix="fn">
      <fos:signatures>
         <fos:proto name="trunk" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="transmission"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns all but the last item in a sequence. </p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the value of the expression <code>fn:remove($input, count($input))</code></p>
      </fos:rules>
      <fos:notes>
         <p>If <code>$input</code> is the empty sequence, or a sequence containing a single item, then
            the empty sequence is returned. </p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>trunk(1 to 5)</fos:expression>
               <fos:result>(1, 2, 3, 4)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>trunk(("a", "b", "c"))</fos:expression>
               <fos:result>("a", "b")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>trunk("a")</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>trunk(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>trunk([1,2,3])</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="replicate" prefix="fn">
      <fos:signatures>
         <fos:proto name="replicate" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="navigation"/>
            <fos:arg name="count" type="xs:nonNegativeInteger"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Produces multiple copies of a sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the value of <code>(1 to $count) ! $input</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>If <code>$input</code> is the empty sequence, the empty sequence is returned.</p>
         <p>The <code>$count</code> argument is declared as <code>xs:nonNegativeInteger</code>,
         which means that a type error occurs if it is called with a negative value.</p>
         <p>If the input sequence contains nodes, these are not copied: instead, the result sequence contains
         multiple references to the same node. So, for example, <code>fn:count(fn:replicate(/, 6)|())</code>
         returns <code>1</code>, because the <code>fn:replicate</code> call creates duplicates, and the
            union operation eliminates them.</p>
         <p>[TODO: the use of type <code>xs:nonNegativeInteger</code> for the second argument
         assumes we will accept the proposal to allow downcasting in the coercion rules for
         function arguments. MHK 2022-10-04.]</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>replicate(0, 6)</fos:expression>
               <fos:result>(0, 0, 0, 0, 0, 0)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>replicate(("A", "B", "C"), 3)</fos:expression>
               <fos:result>("A", "B", "C", "A", "B", "C", "A", "B", "C")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>replicate((), 5)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>replicate(("A", "B", "C"), 1)</fos:expression>
               <fos:result>("A", "B", "C")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>replicate(("A", "B", "C"), 0)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>        
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-10-04.</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="intersperse" prefix="fn">
      <fos:signatures>
         <fos:proto name="intersperse" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="navigation"/>
            <fos:arg name="separator" type="item()*" usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Inserts a separator between adjacent items in a sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the value of <code>head($input), tail($input) ! ($separator, .)</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>If <code>$input</code> contains less than two items then it is returned unchanged.</p>
         <p>If <code>$separator</code> is the empty sequence then <code>$input</code> is returned unchanged.</p>
         <p>For example, in XQuery, <code>fn:intersperse(para, &lt;hr/>)</code> would insert
         an empty <code>hr</code> element between adjacent paragraphs.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>intersperse(1 to 5, "|")</fos:expression>
               <fos:result>(1, "|", 2, "|" , 3, "|", 4, "|", 5)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>intersperse((), "|")</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>intersperse("A", "|")</fos:expression>
               <fos:result>"A"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>intersperse(1 to 5, ())</fos:expression>
               <fos:result>(1, 2, 3, 4, 5)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>intersperse(1 to 5, ("⅓", "⅔"))</fos:expression>
               <fos:result>(1, "⅓", "⅔", 2, "⅓", "⅔", 3, "⅓", "⅔", 4, "⅓", "⅔", 5)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-09-27.</fos:version>
      </fos:history>
   </fos:function>
   
   
   <fos:function name="foot" prefix="fn">
      <fos:signatures>
         <fos:proto name="foot" return-type="item()?">
            <fos:arg name="input" type="item()*" usage="transmission"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the last item in a sequence. </p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the value of the expression <code>$input[position() = last()]</code></p>
      </fos:rules>
      <fos:notes>
         <p>If <code>$input</code> is the empty sequence the empty sequence is returned. </p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>foot(1 to 5)</fos:expression>
               <fos:result>(5)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>foot(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0.</fos:version>
      </fos:history>
   </fos:function>
 

   <fos:function name="reverse" prefix="fn">
      <fos:signatures>
         <fos:proto name="reverse" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         <fos:property>special-streaming-rules</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Reverses the order of items in a sequence. </p>
      </fos:summary>
      <fos:rules>
         <p>The function returns a sequence containing the items in <code>$input</code> in reverse
            order.</p>
      </fos:rules>
      <fos:notes>
         <p>If <code>$input</code> is the empty sequence, the empty sequence is returned. </p>
      </fos:notes>
      <fos:examples>
         <fos:variable id="v-reverse-abc" name="abc"
            select="(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)"/>
         <fos:example>
            <fos:test use="v-reverse-abc">
               <fos:expression>reverse($abc)</fos:expression>
               <fos:result>("c", "b", "a")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>reverse(("hello"))</fos:expression>
               <fos:result>("hello")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>reverse(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>reverse([1,2,3])</fos:expression>
               <fos:result>[1,2,3]</fos:result>
               <fos:postamble>The input is a sequence containing a single item (the array)</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>reverse(([1,2,3],[4,5,6]))</fos:expression>
               <fos:result>([4,5,6],[1,2,3])</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="subsequence" prefix="fn">
      <fos:signatures>
         <fos:proto name="subsequence" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="transmission"/>
            <fos:arg name="start" type="xs:double"/>
            <fos:arg name="length" type="xs:double?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the contiguous sequence of items in <code>$input</code>
            beginning at the position indicated by <code>$start</code> and
            continuing for the number of items indicated by <code>$length</code>. </p>
      </fos:summary>
      <fos:rules>
         <p>In the two-argument case <phrase diff="add" at="2022-12-19">(or where the 
            third argument is an empty sequence),</phrase> the function returns:</p>
         <eg xml:space="preserve">$input[round($start) le position()]</eg>
         <p>In the three-argument case, the function returns:</p>
         <eg xml:space="preserve">$input[round($start) le position() 
         and position() lt round($start) + round($length)]</eg>

      </fos:rules>
      <fos:notes>
         <p>The first item of a sequence is located at position 1, not position 0.</p>
         <p>If <code>$input</code> is the empty sequence, the empty sequence is returned.</p>

         <p>In the two-argument case, the function returns a sequence comprising those items of 
            <code>$input</code> whose 1-based position  
            is greater than or equal to <code>$start</code> (rounded to an integer). 
            No error occurs if <code>$start</code> is zero or negative.</p>

         <p>In the three-argument case, The function returns a sequence comprising those items of 
            <code>$input</code> whose 1-based position  
            is greater than or equal to <code>$start</code> (rounded to an integer), and 
            less than the sum of <code>$start</code> and <code>$length</code> (both rounded to integers). 
            No error occurs if <code>$start</code> is zero or negative, or if <code>$start</code> 
            plus <code>$length</code> exceeds the number of items in the sequence, or if 
            <code>$length</code> is negative.</p>


         <p>As a consequence of the general rules, if <code>$start</code> is
               <code>-INF</code> and <code>$length</code> is <code>+INF</code>, then
               <code>fn:round($start) + fn:round($length)</code> is <code>NaN</code>; since
               <code>position() lt NaN</code> always returns <code>false</code>, the result is an empty sequence.</p>

         <p>The reason the function accepts arguments of type <code>xs:double</code> is that many
            computations on untyped data return an <code>xs:double</code> result; and the reason for
            the rounding rules is to compensate for any imprecision in these floating-point
            computations.</p>
      </fos:notes>

      <fos:examples>
         <fos:variable name="seq" id="v-reverse-seq"
            select="(&quot;item1&quot;, &quot;item2&quot;, &quot;item3&quot;, &quot;item4&quot;, &quot;item5&quot;)"/>
         <fos:example>
            <fos:test use="v-reverse-seq">
               <fos:expression>subsequence($seq, 4)</fos:expression>
               <fos:result>("item4", "item5")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-reverse-seq">
               <fos:expression>subsequence($seq, 3, 2)</fos:expression>
               <fos:result>("item3", "item4")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   
   <fos:function name="items-at" prefix="fn">
      <fos:signatures>
         <fos:proto name="items-at" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="transmission"/>
            <fos:arg name="at" type="xs:integer*"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence containing the items from <code>$input</code>
            at positions defined by <code>$at</code>, in the order specified. </p>
      </fos:summary>
      <fos:rules>
         <p>Returns the value of <code>$at ! fn:subsequence($input, ., 1)</code></p>
      </fos:rules>
      <fos:notes>
         <p>The effect of the function is to return those items from <code>$items</code>
         at the positions given by the integers in <code>$at</code>, in the order
         represented by the integers in <code>$at</code>.</p>
         <p>In the simplest case where <code>$at</code> is a single integer,
         <code>fn:items-at($input, 3)</code> returns the same result as <code>$input[3]</code>.</p>
         <p>Compared with a simple positional filter expression, the function is useful because:</p>
         <olist>
            <item><p>It can select items at multiple positions, and unlike <code>fn:subsequence</code>,
            these do not need to be contiguous.</p></item>
            <item><p>The <code>$at</code> expression can depend on the focus.</p></item>
            <item><p>The order of the returned items can differ from their order in the <code>$input</code> sequence.</p></item>
         </olist>
         <p>If any integer in <code>$at</code> is outside the range <code>1 to count($input)</code>, that integer
         is effectively ignored: no error occurs.</p>
         <p>If either of the arguments is an empty sequence, the result is an empty sequence.</p>
      </fos:notes>
      
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>items-at(11 to 20, 4)</fos:expression>
               <fos:result>14</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-at(11 to 20, 4 to 6)</fos:expression>
               <fos:result>14, 15, 16</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-at(11 to 20, (7, 3))</fos:expression>
               <fos:result>17, 13</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-at(11 to 20, index-of(("a", "b", "c"), "b"))</fos:expression>
               <fos:result>12</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-at(characters("quintessential"), (4, 8, 3))</fos:expression>
               <fos:result>("n", "s", "i")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-at((), 832)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-at((), ())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>           
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0 (see issue 213)</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="slice" prefix="fn">
      <fos:signatures>
         <fos:proto name="slice" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="transmission"/>
            <fos:arg name="start" type="xs:integer?" default="()"/>
            <fos:arg name="end" type="xs:integer?" default="()"/>
            <fos:arg name="step" type="xs:integer?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence containing selected items from a supplied input sequence based on their position.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$input</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>Let <code>$S</code> be the first of the following that applies:</p>
         <ulist>
            <item><p>If <code>$start</code> is absent, empty, or zero, then 1.</p></item>
            <item><p>If <code>$start</code> is negative, then <code>fn:count($input) + $start + 1</code>.</p></item>
            <item><p>Otherwise, <code>$start</code>.</p></item>
         </ulist>
         <p>Let <code>$E</code> be the first of the following that applies:</p>
         <ulist>
            <item><p>If <code>$end</code> is absent, empty, or zero, then <code>fn:count($input)</code>.</p></item>
            <item><p>If <code>$end</code> is negative, then <code>fn:count($input) + $end + 1</code>.</p></item>
            <item><p>Otherwise, <code>$end</code>.</p></item>
         </ulist>
         <p>Let <code>$STEP</code> be the first of the following that applies:</p>
         <ulist>
            <item><p>If <code>$step</code> is absent, empty, or zero, then:</p>
            <ulist>
               <item><p>If <code>$E ge $S</code>, then +1</p></item>
               <item><p>Otherwise -1</p></item>
            </ulist>
            </item>
            <item><p>Otherwise, <code>$step</code>.</p></item>
         </ulist>
         <p>If <code>$STEP</code> is negative, the function returns 
            <code>$input => fn:reverse() => fn:slice(-$S, -$E, -$STEP)</code>.</p>
         <!-- So slice((a,b,c,d,e,f), 5, 3, -1) ==> slice(reverse(f,e,d,c,b,a), -5, -3, 1) ==> (e,d,c) --> 
         <p>Otherwise the function returns the result of the expression:</p>
         <eg>$input[position() ge $S and position() le $E and (position() - $S) mod $STEP eq 0]</eg>
         
      </fos:rules>
      <fos:notes>
         <p>The function is inspired by the slice operators in Javascript and Python, but it differs
         in detail to accommodate the tradition of 1-based addressing in XPath. The end position is
         inclusive rather than exclusive, so that in the simple case where <code>$start</code> and
            <code>$end</code> are positive and <code>$end > $start</code>, 
            <code>fn:slice($in, $start, $end)</code>
         returns the same result as <code>$in[position() = $start to $end]</code>.</p>
      </fos:notes>
      
      <fos:examples>
         <fos:variable name="in" id="v-slice" as="xs:string*" select="('a', 'b', 'c', 'd', 'e')"/>
         <fos:example>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := 2, end := 4)</fos:expression>
               <fos:result>("b", "c", "d")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := 2)</fos:expression>
               <fos:result>("b", "c", "d", "e")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, end := 2)</fos:expression>
               <fos:result>("a", "b")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := 3, end := 3)</fos:expression>
               <fos:result>("c")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := 4, end := 3)</fos:expression>
               <fos:result>("d", "c")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := 2, end := 5, step := 2)</fos:expression>
               <fos:result>("b", "d")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := 5, end := 2, step := -2)</fos:expression>
               <fos:result>("e", "c")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := 2, end := 5, step := -2)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := 5, end := 2, step := 2)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in)</fos:expression>
               <fos:result>("a", "b", "c", "d", "e")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := -1)</fos:expression>
               <fos:result>("e")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := -3)</fos:expression>
               <fos:result>("c", "d", "e")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, end := -2)</fos:expression>
               <fos:result>("a", "b", "c", "d")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := 2, end := -2)</fos:expression>
               <fos:result>("b", "c", "d")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := -2, end := 2)</fos:expression>
               <fos:result>("d", "c", "b")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := -4, end := -2)</fos:expression>
               <fos:result>("b", "c", "d")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := -2, end := -4)</fos:expression>
               <fos:result>("d", "c", "b")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := -4, end := -2, step := 2)</fos:expression>
               <fos:result>("b", "d")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice($in, start := -2, end := -4, step := -2)</fos:expression>
               <fos:result>("d", "b")</fos:result>
            </fos:test>
            <fos:test use="v-slice">
               <fos:expression>slice(("a", "b", "c", "d"), 0)</fos:expression>
               <fos:result>("a", "b", "c", "d")</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed for 4.0; not yet reviewed.</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="starts-with-sequence" prefix="fn">
      <fos:signatures>
         <fos:proto name="starts-with-sequence" return-type="xs:boolean">
            <fos:arg name="input" type="item()*" usage="transmission"/>
            <fos:arg name="subsequence" type="item()*" usage="transmission"/>
            <fos:arg name="compare" type="function(item(), item()) as xs:boolean" default="fn:deep-equal#2"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Determines whether one sequence starts with another, using a supplied callback function to compare items.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function returns <code>true</code> if <code>$input</code> starts with <code>$subsequence</code>,
         when items are compared using the supplied (or default) <code>$compare</code> function.</p>
         <p>More formally, the function returns the value of the expression:</p>
         <eg><![CDATA[count($input) ge count($subsequence) 
and all(for-each-pair($input, $subsequence, $compare))]]></eg>
      </fos:rules>
      <fos:notes>
         <p>There is no requirement that the <code>$compare</code> function should have the traditional qualities
            of equality comparison. The result is well-defined, for example, even if <code>$compare</code> is not transitive
         or not symmetric.</p>
      </fos:notes>

      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>starts-with-sequence((), ())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>    
            <fos:test>
               <fos:expression>starts-with-sequence(1 to 10, 1 to 5)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>starts-with-sequence(1 to 10, ())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>starts-with-sequence(1 to 10, 1 to 10)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>starts-with-sequence(1 to 10, 1)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>starts-with-sequence(
  1 to 10,
  101 to 105,
  function($x, $y) { $x mod 100 = $y mod 100 }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>starts-with-sequence(
  ("A", "B", "C"),
  ("a", "b"),
  function($x, $y) {
    compare(
      $x,
      $y,
      "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
    ) eq 0
  }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg><![CDATA[let $p := parse-xml("<doc><chap><p/><p/></chap></doc>")//p[2]
return starts-with-sequence(
  $p/ancestor::*[1],
  $p/parent::*,
  op("is")
)]]></eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>       
            <fos:test>
               <fos:expression>starts-with-sequence(10 to 20, 1 to 5, op("gt"))</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>starts-with-sequence(
  ("Alpha", "Beta", "Gamma"),
  ("A", "B"),
  starts-with#2
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>starts-with-sequence(
  ("Alpha", "Beta", "Gamma", "Delta"),
  1 to 3,
  function($x, $y) { ends-with($x, 'a' ) }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>True because the first three items in the input sequence end with <code>"a"</code>.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-11-01</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="ends-with-sequence" prefix="fn">
      <fos:signatures>
         <fos:proto name="ends-with-sequence" return-type="xs:boolean">
            <fos:arg name="input" type="item()*" usage="transmission"/>
            <fos:arg name="subsequence" type="item()*" usage="transmission"/>
            <fos:arg name="compare" type="function(item(), item()) as xs:boolean" default="fn:deep-equal#2"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Determines whether one sequence ends with another, using a supplied callback function to compare items.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function returns <code>true</code> if <code>$input</code> ends with <code>$subsequence</code>,
            when items are compared using the supplied (or default) <code>$compare</code> function.</p>
         <p>More formally, the function returns the value of the expression:</p>
         <eg><![CDATA[starts-with-sequence(reverse($input), reverse($subsequence), $compare)]]></eg>
      </fos:rules>
      <fos:notes>
         <p>There is no requirement that the <code>$compare</code> function should have the traditional qualities
            of equality comparison. The result is well-defined, for example, even if <code>$compare</code> is not transitive
            or not symmetric.</p>
      </fos:notes>
      
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>ends-with-sequence((), ())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>    
            <fos:test>
               <fos:expression>ends-with-sequence(1 to 10, 5 to 10)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>ends-with-sequence(1 to 10, ())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>ends-with-sequence(1 to 10, 1 to 10)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>ends-with-sequence(1 to 10, 10)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>ends-with-sequence(
  1 to 10,
  108 to 110,
  function($x, $y) { $x mod 100 = $y mod 100 }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>ends-with-sequence(
  ("A", "B", "C"),
  ("b", "c"),
  function($x, $y) {
    compare(
      $x,
      $y,
      "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
    ) eq 0
  }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg><![CDATA[let $p := parse-xml("<doc><chap><p/><p/></chap></doc>")//p[2]
return ends-with-sequence(
  $p/ancestor::node()[last()],
  $p/root(),
  op("is")
)]]></eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>       
            <fos:test>
               <fos:expression>ends-with-sequence(10 to 20, 1 to 5, op("gt"))</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>ends-with-sequence(
  ("Alpha", "Beta", "Gamma"),
  ("B", "G"),
  starts-with#2
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>ends-with-sequence(
  ("Alpha", "Beta", "Gamma", "Delta"),
  1 to 2,
  function($x, $y) { string-length($x) eq 5 }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>True because the last two items in the input sequence have a string length of 5.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-11-01</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="contains-sequence" prefix="fn">
      <fos:signatures>
         <fos:proto name="contains-sequence" return-type="xs:boolean">
            <fos:arg name="input" type="item()*" usage="transmission"/>
            <fos:arg name="subsequence" type="item()*" usage="transmission"/>
            <fos:arg name="compare" type="function(item(), item()) as xs:boolean" default="fn:deep-equal#2"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Determines whether one sequence contains another as a contiguous subsequence, using a supplied callback function to compare items.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function returns <code>true</code> if <code>$input</code> contains a consecutive subsequence matching <code>$subsequence</code>,
            when items are compared using the supplied (or default) <code>$compare</code> function.</p>
         <p>More formally, the function returns the value of the expression:</p>
         <eg><![CDATA[if (starts-with-sequence($input, $subsequence, $compare))
then true()
else if (empty($input))
     then false()
     else contains-sequence(tail($input, $subsequence, $compare))]]></eg>
      </fos:rules>
      <fos:notes>
         <p>There is no requirement that the <code>$compare</code> function should have the traditional qualities
            of equality comparison. The result is well-defined, for example, even if <code>$compare</code> is not transitive
            or not symmetric.</p>
      </fos:notes>
      
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>contains-sequence((), ())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>    
            <fos:test>
               <fos:expression>contains-sequence(1 to 10, 3 to 6)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>contains-sequence(1 to 10, (2, 4, 6))</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>contains-sequence(1 to 10, ())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>contains-sequence(1 to 10, 1 to 10)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>contains-sequence(1 to 10, 5)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>contains-sequence(
  1 to 10,
  103 to 105,
  function($x, $y) { $x mod 100 = $y mod 100 }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>contains-sequence(
  ("A", "B", "C", "D"),
  ("b", "c"),
  function($x, $y) {
    compare(
      $x,
      $y,
      "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
    ) eq 0
  }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg><![CDATA[let $chap := parse-xml("<doc><chap><h1/><p/><p/><footnote/></chap></doc>")//chap
return contains-sequence(
  $chap ! child::*,
  $chap ! child::p,
  op("is")
)]]></eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>True because the <code>p</code> children of the <code>chap</code> element form a contiguous subsequence.</fos:postamble>
            </fos:test>       
            <fos:test>
               <fos:expression>contains-sequence(10 to 20, (5, 3, 1), op("gt"))</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>contains-sequence(
  ("Alpha", "Beta", "Gamma", "Delta"), ("B", "G"),
  starts-with#2
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>contains-sequence(
  ("Zero", "Alpha", "Beta", "Gamma", "Delta", "Epsilon"),
  1 to 4,
  function($x, $y) { ends-with($x, 'a') }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>True because there is a run of 4 consecutive items ending in <code>"a"</code>.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-11-01</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="unordered" prefix="fn">
      <fos:signatures>
         <fos:proto name="unordered" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="transmission"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic-wrt-ordering</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the items of <code>$input</code> in an <termref
               def="implementation-dependent">implementation-dependent</termref> order.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the items of <code>$input</code> in an <termref
               def="implementation-dependent">implementation-dependent</termref> order.</p>
      </fos:rules>
      <fos:notes>
         <p>Query optimizers may be able to do a better job if the order of the output sequence is
            not specified. For example, when retrieving prices from a purchase order, if an index
            exists on prices, it may be more efficient to return the prices in index order rather
            than in document order.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>unordered((1, 2, 3, 4, 5))</fos:expression>
               <fos:result allow-permutation="true">(1, 2, 3, 4, 5)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="void" prefix="fn">
      <fos:signatures>
         <fos:proto name="void" return-type="empty-sequence()">
            <fos:arg name="input" type="item()*"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Absorbs the argument.</p>
      </fos:summary>
      <fos:rules>
         <p>The function absorbs the supplied <code>$input</code> argument and
            returns an empty sequence.</p>
      </fos:rules>
      <fos:notes>
         <p>The function can be used to discard unneeded output of expressions
            (functions, third-party libraries, etc.).</p>
         <p>It can also be used to discard results during development.</p>
         <p>The function is utilized by built-in functions such as <code>map:get</code>
            to return an empty sequence for arbitrary input.</p>
         <p>It is <termref def="implementation-dependent">implementation-dependent</termref>
            whether the supplied argument is evaluated or ignored. An implementation may decide to
            evaluate <termref def="dt-nondeterministic">nondeterministic</termref> expressions and
            ignore deterministic ones.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>void(1 to 1000000)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:get(array { 1, 2, 3 }, 4, void#1)</fos:expression>
               <fos:result>()</fos:result>
               <fos:postamble>Without the third argument, an error would be raised</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression>for $f in (identity#1, void#1) return $f(123)</fos:expression>
               <fos:result>123</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Approved.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="zero-or-one" prefix="fn">
      <fos:signatures>
         <fos:proto name="zero-or-one" return-type="item()?">
            <fos:arg name="input" type="item()*" usage="transmission"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>input</code> if it contains zero or one items. Otherwise, raises an
            error.</p>
      </fos:summary>
      <fos:rules>
         <p>Except in error cases, the function returns <code>$input</code> unchanged.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="RG" code="0003"
            /> if <code>$input</code>
            contains more than one item.</p>
      </fos:errors>
   </fos:function>

   <fos:function name="one-or-more" prefix="fn">
      <fos:signatures>
         <fos:proto name="one-or-more" return-type="item()+">
            <fos:arg name="input" type="item()*" usage="transmission"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>$input</code> if it contains one or more items. Otherwise, raises an error.
         </p>
      </fos:summary>
      <fos:rules>
         <p>Except in error cases, the function returns <code>$input</code> unchanged.</p>

      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="RG" code="0004"
         /> if <code>$input</code> is an
            empty sequence.</p>
      </fos:errors>
   </fos:function>
   <fos:function name="exactly-one" prefix="fn">
      <fos:signatures>
         <fos:proto name="exactly-one" return-type="item()">
            <fos:arg name="input" type="item()*" usage="transmission"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>$input</code> if it contains exactly one item. Otherwise, raises an error.
         </p>
      </fos:summary>
      <fos:rules>
         <p>Except in error cases, the function returns <code>$input</code> unchanged.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="RG" code="0005"
         /> if <code>$input</code> is an
            empty sequence or a sequence containing more than one item.</p>
      </fos:errors>
   </fos:function>
   <fos:function name="deep-equal" prefix="fn" diff="chg" at="2023-01-25">
      <fos:signatures>
         <fos:proto name="deep-equal" return-type="xs:boolean">
            <fos:arg name="input1" type="item()*" usage="absorption"/>
            <fos:arg name="input2" type="item()*" usage="absorption"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
            <fos:arg name="options" type="map(*)" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="4">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p> This function assesses whether two sequences are deep-equal to each other. To be
            deep-equal, they must contain items that are pairwise deep-equal; and for two items to
            be deep-equal, they must either be atomic values that compare equal, or nodes of the
            same kind, with the same name, whose children are deep-equal<phrase>,
               or maps with matching entries, or arrays with matching members.</phrase></p>
      </fos:summary>
      <fos:rules>
         <p>The <code>$collation</code> argument identifies a collation which is used at all levels
            of recursion when strings are compared (but not when names are compared), according to
            the rules in <specref ref="choosing-a-collation"/>. If the argument is not supplied,
            or if it is empty, then the default collation from the 
            <phrase diff="chg" at="2023-05-19">dynamic</phrase> context of the caller is used.</p>
         <p>The <code>$options</code> argument, if present, defines additional parameters controlling
            how the comparison is done. The <termref def="option-parameter-conventions"
               >option parameter conventions</termref> apply.</p>
         <p>If the two sequences are both empty, the function returns <code>true</code>.</p>
         <p>If the two sequences are of different lengths, the function returns
            <code>false</code>.</p>
         <p>If the two sequences are of the same length, the function returns <code>true</code> if
            and only if every item in the sequence <code>$input1</code> is deep-equal to the
            item at the same position in the sequence <code>$input2</code>. The rules for
            deciding whether two items are deep-equal appear below.</p>
         

            <p>The entries that may appear in the <code>$options</code> map are as follows. The detailed rules
               for the interpretation of each option appear later.</p>
            
            <fos:options>
               <fos:option key="base-uri">
                  <fos:meaning>Determines whether the <code>base-uri</code> of a node is significant.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="comments">
                  <fos:meaning>Determines whether comments are significant.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="debug">
                  <fos:meaning>Requests diagnostics in the case where the function returns <code>false</code>.
                     When this option is set and the two inputs are found to be not equal, the implementation
                     <rfc2119>should</rfc2119> output messages (in an implementation-dependent format and to
                     an implementation-dependent destination) indicating the nature of the differences that
                     were found.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="false-on-error">
                  <fos:meaning>If <code>true</code>, then in the event of a dynamic error occurring in the course of
                     the comparison, the function will return <code>false</code> rather than throwing the error. (This option does
                     not affect the handling of errors in the supplied values of the <code>$collation</code>
                     and <code>$options</code> arguments.)
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="id-property">
                  <fos:meaning>Determines whether the <code>id</code> property of elements and attributes is significant.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="idrefs-property">
                  <fos:meaning>Determines whether the <code>idrefs</code> property of elements and attributes is significant.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="in-scope-namespaces">
                  <fos:meaning>Determines whether the in-scope namespaces of elements are significant.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="namespace-prefixes">
                  <fos:meaning>Determines whether namespace prefixes in <code>xs:QName</code> values (particularly
                     the names of elements and attributes) are significant.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="nilled-property">
                  <fos:meaning>Determines whether the <code>nilled</code> property of elements and attributes is significant.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="normalization-form">
                  <fos:meaning>If present, indicates that text and attributes are converted to the specified
                     Unicode normalization form prior to comparison. The value is as for the corresponding
                     argument of <code>fn:normalize-unicode</code>.
                  </fos:meaning>
                  <fos:type>xs:string?</fos:type>
                  <fos:default>()</fos:default>
               </fos:option>              
               <fos:option key="processing-instructions">
                  <fos:meaning>Determines whether processing instructions are significant.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="timezones">
                  <fos:meaning>Determines whether timezones in date/time values are significant.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="type-annotations">
                  <fos:meaning>Determines whether type annotations are significant.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>false</fos:default>
               </fos:option>
               <fos:option key="type-variety">
                  <fos:meaning>Determines whether the variety of the type annotation of an element 
                     (whether it has complex content or simple content) is significant.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>true</fos:default>
               </fos:option>
               <fos:option key="typed-values">
                  <fos:meaning>Determines whether nodes are compared using their typed values rather than
                     their string values.
                  </fos:meaning>
                  <fos:type>xs:boolean</fos:type>
                  <fos:default>true</fos:default>
               </fos:option>
               <fos:option key="unordered-elements">
                  <fos:meaning>A list of QNames of elements considered to be unordered: that is, their child
                     elements may appear in any order.
                  </fos:meaning>
                  <fos:type>xs:QName*</fos:type>
                  <fos:default>()</fos:default>
               </fos:option>
               <fos:option key="whitespace">
                  <fos:meaning><phrase diff="chg" at="2023-03-13">Determines the extent to which whitespace 
                     is treated as significant. The value
                     <code>preserve</code> retains all whitespace. The value <code>strip</code> ignores text nodes
                     consisting entirely of whitespace.
                     The value <code>normalize</code> ignores whitespace text nodes in the same way as
                     the <code>strip</code> option, and additionally compares text and attribute nodes after 
                     normalizing whitespace in accordance with the rules of the <code>fn:normalize-space</code> 
                     function. The detailed rules, given below, also take into account type annotations and 
                     <code>xml:space</code> attributes.
                  </phrase>
                  </fos:meaning>
                  <fos:type>enum("preserve", "strip", "normalize")</fos:type>
                  <fos:default>preserve</fos:default>
               </fos:option>
            </fos:options>
         
         <note><p>As a general rule for boolean options (but not invariably), the value <code>true</code> indicates 
            that the comparison is more strict. </p></note>

         <p>In the following rules, where a recursive call on <code>fn:deep-equal</code> is made, this is assumed
         to use the same values of <code>$collation</code> and <code>$options</code> as the original call.</p>
         
         <p>The rules reference a function <code>equal-strings</code> which compares two strings as follows:</p>
         
         <olist>
            <item><p>If the <code>whitespace</code> option is set to <code>normalize</code>, then each string is processed
               by calling the <code>fn:normalize-space</code> function.</p></item>
            <item><p>If the <code>normalization-form</code> option is present, each string is then normalized
            by calling the <code>fn:normalize-unicode</code> function, supplying the specified normalization
            form.</p></item>           
            <item><p>The two strings are then compared for equality under the requested <code>$collation</code>.</p></item>
         </olist>
         
         <p>More formally, the <code>equal-strings</code> function can be expressed as follows:</p>
         
         <eg><![CDATA[function($s1 as xs:string, $s2 as xs:string, 
  $collation as xs:string, $options as map(*)
) as xs:boolean {
  let $n1 := if ($options?whitespace = "normalize"))
             then normalize-unicode(?, $options?normalization-form) 
             else identity#1,
  $n2 := if ($options?normalize-space)
             then normalize-space#1 
             else identity#1               
}
return compare($n1($n2($s1)), $n1($n2($s2)), $collation) eq 0    
}]]></eg>
         
         <p>The rules for deciding whether two items <code>$i1</code> and <code>$i2</code> are deep-equal
            are as follows. The two items are deep-equal
            if one or more of the following conditions are true:</p>
         <olist>
            <item>
               <p>All of the following conditions are true:</p>
               <olist>
                  <item>
                     <p><code>$i1</code> is an atomic value.</p></item>
                  <item>
                     <p><code>$i2</code> is an atomic value.</p></item>
                  <item>
                     <p>Either the <code>type-annotations</code> option is <code>false</code>, or both atomic values have
                     the same type annotation.</p>
                  </item>
                  <item>
                     <p>One of the following conditions is true:</p>
                     <olist>
                        <item><p>If both <code>$i1</code> and <code>$i2</code> are instances of
                           <code>xs:string</code> or <code>xs:untypedAtomic</code>,
                           <code>equal-strings($i1, $i2, $collation, $options)</code>
                           returns <code>true</code>.
                        </p></item>
                        <item><p>If both <code>$i1</code> and <code>$i2</code> are instances of
                           <code>xs:date</code>, <code>xs:time</code> or <code>xs:dateTime</code>,
                           <code>$i1 eq $i2</code>
                           returns <code>true</code>.
                        </p></item>
                        <item><p>Otherwise, <code>fn:atomic-equal($i1, $i2)</code>
                           returns <code>true</code>.
                        </p></item>
                     </olist>
                     <note><p>If <code>$i1</code> and <code>$i2</code> are not comparable, that is,
                        if the expression <code>($i1 eq $i2)</code> would raise an error, then the function
                     returns <code>false</code>; it does not report an error.</p></note>
                  </item>
                  
                  <item>
                     <p>One of the following conditions is true:</p>
                     <olist>
                        <item><p>Option <code>namespace-prefixes</code> is <code>false</code>.</p></item>
                        <item><p>Neither <code>$i1</code> nor <code>$i2</code> is of type
                        <code>xs:QName</code> or <code>xs:NOTATION</code>.</p></item>
                        <item><p><code>$i1</code> and <code>$i2</code> are qualified names with the same namespace prefix.</p></item>
                     </olist>
                  </item>
                  <item>
                     <p>One of the following conditions is true:</p>
                     <olist>
                        <item><p>Option <code>timezones</code> is <code>false</code>.</p></item>
                        <item><p>Neither <code>$i1</code> nor <code>$i2</code> is of type
                           <code>xs:date</code>, <code>xs:time</code>, <code>xs:dateTime</code>, 
                           <code>xs:gYear</code>, <code>xs:gYearMonth</code>, <code>xs:gMonth</code>, 
                           <code>xs:gMonthDay</code>, or <code>xs:gDay</code>.</p></item>
                        <item><p>Neither <code>$i1</code> nor <code>$i2</code> has a timezone component.</p></item>
                        <item><p>Both <code>$i1</code> and <code>$i2</code> have a timezone component and the
                        timezone components are equal.</p></item>
                     </olist>
                  </item>
               </olist>
            </item>
            <item>
               <p>All of the following conditions are true:</p>
               <olist>
                  <item>
                     <p><code>$i1</code> is a map.</p>
                  </item>
                  <item>
                     <p><code>$i2</code> is a map.</p>
                  </item>
                  <item>
                     <p>Both maps have the same number of entries.</p>
                  </item>
                  <item>
                     <p>For every entry in the first map, there is an entry in the second map that:</p>
                     <olist>
                        <item>
                           <p>has the <termref def="dt-same-key"
                              >same key</termref> (note that the
                              collation is not used when comparing keys), and </p>
                        </item>
                        <item>
                           <p>has the same associated value (compared using the <code>fn:deep-equal</code>
                              function, recursively).</p>
                        </item>
                     </olist>
                  </item>
               </olist>
             </item>
            <item>
               <p>All the following conditions are true:</p>
               <olist>
                  <item><p><code>$i1</code> is an array.</p></item>
                  <item><p><code>$i2</code> is an array.</p></item>
                  <item>
                     <p>Both arrays have the same number of members (<code>array:size($i1) eq
                           array:size($i2)</code>).</p>
                  </item>
                  <item>
                     <p>Members in the same position of both arrays are deep-equal to each other: that is,
                           <code>every $p in 1 to array:size($i1) satisfies deep-equal($i1($p), $i2($p),
                           $collation, $options).</code></p>
                  </item>
               </olist>
            </item>
            <item diff="add" at="2023-05-25">
               <p>All the following conditions are true:</p>
               <olist>
                  <item><p><code>$i1</code> is a function item and is not a map or array.</p></item>
                  <item><p><code>$i2</code> is a function item and is not a map or array.</p></item>
                  <item><p><code>$i1</code> and <code>$i2</code> have the same function identity.
                     The concept of function identity is explained in <xspecref spec="DM40" ref="function-items"/>.</p></item>                 
               </olist>
            </item>
            <item>
               <p>All the following conditions are true:</p>
               <olist>
                  <item><p><code>$i1</code> is a node.</p></item>
                  <item><p><code>$i2</code> is a node.</p></item>
                  <item><p>Both nodes have the same node kind.</p></item>
                  <item><p>Either the <code>base-uri</code> option is <code>false</code>, or both nodes have the same value
                     for their base URI property, or both nodes have an absent base URI.</p></item>
                  <item><p>Let <code>significant-children($parent)</code> be the sequence of nodes obtained by applying the following
                  steps to the children of <code>$parent</code>, in turn:</p>
                     <olist>
                        <item><p>Comment nodes are discarded if the option <code>comments</code> is <code>false</code>.</p></item>
                        <item><p>Processing instruction nodes are discarded if the option <code>processing-instructions</code> is <code>false</code>.</p></item>
                        <item><p>Adjacent text nodes are merged.</p></item>
                        <item><p>Whitespace-only text nodes are discarded if both the following conditions are true:</p>
                           <olist>
                              <item>
                                 <p>Either:</p>
                                 <olist>
                                    <item>
                                       <p>The option <code>whitespace</code> is set to <code>strip</code>
                                          or <code>normalize</code>; or</p>
                                    </item>
                                    <item>
                                       <p><code>$parent</code> is a schema-validated element node whose type annotation 
                                          is a complex type with an element-only or empty content model.</p>
                                    </item>
                                 </olist>
                              </item>
                              <item><p>The text node is not within the scope
                              of an element that has the attribute <code>xml:space="preserve"</code>.</p></item>
                           </olist>
                        </item>
                     </olist>
                  
                  </item>
                  <item>
                     <p>One of the following conditions is true.</p>
                     <olist>
                        <item>
                           <p>Both nodes are document nodes, and the sequence <code>significant-children($i1)</code> 
                              is deep-equal to the sequence <code>significant-children($i2)</code>.</p>
                        </item>
                        <item>
                           <p>Both nodes are element nodes, and all the following conditions are true:</p>
                           <olist>
                              <item>
                                 <p>The two nodes have the same name, that is <code>(node-name($i1) eq
                                    node-name($i2))</code>.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>namespace-prefixes</code> is <code>false</code>, or both element
                                    names have the same prefix.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>in-scope-namespaces</code> is <code>false</code>, or both element
                                    nodes have the same in-scope namespace bindings.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>type-annotations</code> is <code>false</code>, or both
                                    element nodes have the same type annotation.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>id-property</code> is <code>false</code>, or both element
                                    nodes have the same value for their <code>is-id</code> property.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>idrefs-property</code> is <code>false</code>, or both element
                                    nodes have the same value for their <code>is-idrefs</code> property.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>nilled-property</code> is <code>false</code>, or both element
                                    nodes have the same value for their <code>nilled</code> property.</p>
                              </item>
                              <item>
                                 <p>One of the following conditions is true:</p>
                                 <olist>
                                    <item><p>The option <code>type-variety</code> is <code>false</code>.</p></item>
                                    <item><p>Both nodes are annotated as having simple content.
                                       For this purpose <term>simple content</term>
                                       means either a simple type or a complex type with simple content.</p></item>
                                    <item><p>Both nodes are annotated as having complex content. For this purpose 
                                       <term>complex content</term> means a complex type whose variety is mixed, element-only, or
                                       empty.</p></item>
                                 </olist>
                                 <note>
                                    <p>It is a consequence of this rule that, by default, validating a document <var>D</var>
                                       against a schema will usually (but not necessarily) result in a document
                                       that is not deep-equal to <var>D</var>. The exception is when the schema
                                       allows all elements to have mixed content.</p>
                                 </note>
                                 
                              </item>
                              <item>
                                 <p>The two nodes have the same number of attributes, and for every attribute
                                    <code>$a1</code> in <code>$i1/@*</code> there exists an attribute
                                    <code>$a2</code> in <code>$i2/@*</code> such that <code>$a1</code> and
                                    <code>$a2</code> are deep-equal.</p>
                              </item>
                              <item>
                                 <p> One of the following conditions holds:</p>
                                 <olist>
                                    <item>
                                       <p>Both element nodes are annotated as having simple content (as defined
                                          above), the <code>typed-values</code> option is <code>true</code>, 
                                          and the typed value of <code>$i1</code> is deep-equal
                                          to the typed value of <code>$i2</code>.</p>
                                       <note><p>The typed value of an element node is used only when the element
                                       has simple content, which means that no error can occur as a result
                                       of atomizing a node with no typed value.</p></note>
                                    </item>
                                    <item>
                                       <p>Both element nodes are annotated as having simple content (as defined
                                          above), the <code>typed-values</code> option is <code>false</code>, 
                                          and the <code>equal-strings</code> function returns <code>true</code> when
                                          applied to the string value of <code>$i1</code> 
                                          and the string value of <code>$i2</code>.</p>
                                    </item>
                                    <item>
                                       <p>Both element nodes have a type annotation that is a complex type with
                                          element-only, mixed, or empty content,
                                          the (common) element name is not present in the <code>unordered-elements</code> option,
                                          and the sequence <code>significant-children($i1)</code> is
                                          deep-equal to the sequence <code>significant-children($i2)</code>.</p>
                                    </item>
                                    <item>
                                       <p>Both element nodes have a type annotation that is a complex type with
                                          element-only, mixed, or empty content,
                                          the (common) element name is present in the <code>unordered-elements</code> option,
                                          and the sequence <code>significant-children($i1)</code> is
                                          deep-equal to some permutation of the sequence <code>significant-children($i2)</code>.</p>
                                       <note>
                                          <p>Elements annotated as <code>xs:untyped</code> fall into this category.</p>
                                          <p>Including an element name in the <code>unordered-elements</code> list is unlikely
                                          to be useful except when the relevant elements have element-only content, but
                                          this is not a requirement: the rules apply equally to elements with mixed content,
                                          or even (trivially) to elements with empty content.</p>
                                       </note>
                                    </item>
                                 </olist>
                              </item>
                           </olist>
                        </item>
  
                        <item>
                           <p>Both nodes are attribute nodes, and all the following conditions are true:</p>
                           <olist>
      
                              <item>
                                 <p>The two attribute nodes have the same name, that is <code>(node-name($i1) eq
                                       node-name($i2))</code>.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>namespace-prefixes</code> is <code>false</code>, or both
                                 attribute names have the same prefix.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>type-annotations</code> is <code>false</code>, or both
                                 attribute nodes have the same type annotation.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>id-property</code> is <code>false</code>, or both attribute nodes
                                    have the same value for their <code>is-id</code> property.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>idrefs-property</code> is <code>false</code>, or both attribute nodes
                                    have the same value for their <code>is-idrefs</code> property.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>typed-value</code> is <code>false</code>, or 
                                    the typed value of <code>$i1</code> is deep-equal to the typed value of
                                       <code>$i2</code>.</p>
                              </item>
                              <item>
                                 <p>Either the option <code>typed-value</code> is <code>true</code>, or 
                                    the <code>equal-strings</code> function returns <code>true</code> 
                                    when applied to the string value of <code>$i1</code> 
                                    and the string value of <code>$i2</code>.</p>
                              </item>
                              
                           </olist>
                        </item>

                        <item>
                           <p>Both nodes are processing instruction nodes, and all the following conditions are true:</p>
                              <olist>
                                 <item>
                                    <p>The two nodes have the same name, that is <code>(node-name($i1) eq
                                          node-name($i2))</code>.</p>
                                 </item>
                                 <item>
                                    <p>The <code>equal-strings</code> function returns <code>true</code> when applied to 
                                       the string value of <code>$i1</code> 
                                       and the string value of <code>$i2</code>.</p>
                                 </item>
                              </olist>
                        </item>
                        <item>
                           <p>Both nodes are namespace nodes, and all the following conditions are true:</p>
                           <olist>
                              <item>
                                 <p>The two nodes either have the same name or are both nameless, that is
                                    <code>fn:deep-equal(node-name($i1), node-name($i2))</code>.</p>
                              </item>
                              <item>
                                 <p>The string value of <code>$i1</code> is equal to the string value of
                                    <code>$i2</code> when compared using the Unicode codepoint collation.</p>
                              </item>
                           </olist>
                           <note><p>Namespace nodes are not considered directly unless they appear in the top-level sequences
                           passed explicitly to the <code>fn:deep-equal</code> function.</p></note>
                        </item>
                        <item>
                           <p>Both nodes are comment nodes, and the <code>equal-strings</code> function 
                              returns <code>true</code> when applied to their string values.</p>
                        </item>
                        <item>
                           <p>Both nodes are text nodes, and the <code>equal-strings</code> function 
                              returns <code>true</code> when applied to their string values.</p>
                          
                        </item>
                  </olist>
                  </item>
                  
               </olist>
            </item>
         </olist>
         <p>In all other cases the result is <code>false</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>A type error is raised <errorref class="TY" code="0015" type="type"
               /> if either input
            sequence contains a function item <phrase>that is not a map or
               array</phrase>. </p>
         <p>However, the above error is not raised if the <code>false-on-error</code> option is
         <code>true</code>; in this case, the function returns <code>false</code> rather than raising an error.</p>
         <p>A type error is raised <xerrorref spec="XP" class="TY"
            code="0004" type="type"/> if the value of 
            <code>$options</code> includes an entry whose key is defined 
            in this specification, and whose value is not of the permitted type for that key.</p>
         <p>A dynamic error is raised <errorref spec="FO" class="JS" code="0005"
         /> if the value of 
            <code>$options</code> includes an entry whose key is defined 
            in this specification, and whose value is not a permitted value for that key.</p>
      </fos:errors>
      <fos:notes>
         <p>By default, whitespace in text nodes and attribute is considered significant. There are various ways
         whitespace differences can be ignored:</p>
         <ulist>
            <item><p>If nodes have been schema-validated, setting the <code>typed-values</code> 
               option to true causes the typed values rather
               than the string values to be compared. This will typically cause whitespace to be ignored
               except where the type of the value is <code>xs:string</code>.</p></item>
            <item><p>Setting the <code>whitespace</code> option to <code>normalize</code> causes all
            text and attribute nodes to have leading and trailing whitespace removed, and intermediate
            whitespace reduced to a single character.</p></item>
         </ulist>
         <p>By default, two nodes are not required to have the same type annotation, and they are not
            required to have the same in-scope namespaces. They may also differ in their parent,
            their base URI, and the values returned by the <code>is-id</code> and
               <code>is-idrefs</code> accessors (see <xspecref
               spec="DM40" ref="dm-is-id"/> and
               <xspecref spec="DM40"
               ref="dm-is-idrefs"
            />). The order of children is significant,
            but the order of attributes is insignificant. </p>
         <p>By default, the contents of comments and processing instructions are significant only if these nodes
            appear directly as items in the two sequences being compared. The content of a comment
            or processing instruction that appears as a descendant of an item in one of the
            sequences being compared does not affect the result. However, the presence of a comment
            or processing instruction, if it causes a text node to be split into two text nodes, may
            affect the result.</p>
         <p>Comparing items of different kind (for example, comparing an atomic
            value to a node, or a map to an array, or an integer to an <code>xs:date</code>) returns <code>false</code>, 
            it does not return an error. So
            the result of <code>fn:deep-equal(1, current-dateTime())</code> is <code>false</code>.</p>
         <p>Comparing a function (other than a map or array) to any other value raises a type error,
         unless the error is suppressed using the <code>false-on-error</code> option.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="at" id="v-deep-equal-at" as="element()"><![CDATA[<attendees>
  <name last="Parker" first="Peter"/>
  <name last="Barker" first="Bob"/>
  <name last="Parker" first="Peter"/>
</attendees>]]></fos:variable>
         <fos:example>
            <fos:test use="v-deep-equal-at">
               <fos:expression>deep-equal($at, $at/*)</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-deep-equal-at">
               <fos:expression>deep-equal($at/name[1], $at/name[2])</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-deep-equal-at">
               <fos:expression>deep-equal($at/name[1], $at/name[3])</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-deep-equal-at">
               <fos:expression>deep-equal($at/name[1], 'Peter Parker')</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>deep-equal(map{1:'a', 2:'b'}, map{2:'b', 1:'a'})</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>deep-equal([1, 2, 3], [1, 2, 3])</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>deep-equal((1, 2, 3), [1, 2, 3])</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg><![CDATA[deep-equal(
    parse-xml("<a xmlns='AA'/>"),
    parse-xml("<p:a xmlns:p='AA'/>"))]]></eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>By default, namespace prefixes are ignored</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg><![CDATA[deep-equal(
    parse-xml("<a xmlns='AA'/>"),
    parse-xml("<p:a xmlns:p='AA'/>"),
    options := map{'namespace-prefixes':true()})]]></eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble>False because the namespace prefixes differ</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg><![CDATA[deep-equal(
    parse-xml("<a xmlns='AA'/>"),
    parse-xml("<p:a xmlns:p='AA'/>"),
    options := map{'in-scope-namespaces':true()})]]></eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble>False because the in-scope namespace bindings differ</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg><![CDATA[deep-equal(
    parse-xml("<a><b/><c/></a>"),
    parse-xml("<a><c/><b/></a>"))]]></eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble>By default, order of elements is significant</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg><![CDATA[deep-equal(
    parse-xml("<a><b/><c/></a>"),
    parse-xml("<a><c/><b/></a>"),
    options := map{'unordered-elements': parse-QName('a')})]]></eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>The <code>unordered-elements</code> option means that the ordering of the children
               of <code>a</code> is ignored.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg><![CDATA[deep-equal(
    parse-xml(
      "<para style='bold'><span>x</span></para>"),
    parse-xml(
      "<para style=' bold'> <span>x</span></para>"))]]></eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble>By default, both the leading whitespace in the <code>style</code> attribute
                  and the whitespace text node preceding the <code>span</code> element are significant.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg><![CDATA[deep-equal(
    parse-xml(
      "<para style='bold'><span>x</span></para>"),
    parse-xml(
      "<para style=' bold'> <span>x</span></para>"),
    options := map{'whitespace': 'normalize'})]]></eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble>The <code>whitespace</code> option causes both the leading space
                  in the attribute value and the whitespace preceding the 
                  <code>span</code> element to be ignored.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
      
      <fos:history>
         <fos:version version="4.0">Options parameter added. Approved in principle on 2023-01-31, subject
            to further review.</fos:version>
      </fos:history>
   </fos:function>
   
   
   
   <fos:function name="count" prefix="fn">
      <fos:signatures>
         <fos:proto name="count" return-type="xs:integer">
            <fos:arg name="input" type="item()*" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the number of items in a sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the number of items in <code>$input</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>returns <code>0</code>.if <code>$input</code> is the empty sequence.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="seq1" id="v-count-seq1" select="($item1, $item2)"/>
         <fos:variable name="seq2" id="v-count-seq2" select="(98.5, 98.3, 98.9)"/>
         <fos:variable name="seq3" id="v-count-seq3" select="()"/>
         <fos:example>
            <fos:test use="v-po v-item1 v-item2 v-count-seq1">
               <fos:expression>count($seq1)</fos:expression>
               <fos:result>2</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-count-seq3">
               <fos:expression>count($seq3)</fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-count-seq2">
               <fos:expression>count($seq2)</fos:expression>
               <fos:result>3</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-count-seq2">
               <fos:expression>count($seq2[. &gt; 100])</fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>count([])</fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>count([1,2,3])</fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="avg" prefix="fn">
      <fos:signatures>
         <fos:proto name="avg" return-type="xs:anyAtomicType?">
            <fos:arg name="values" type="xs:anyAtomicType*" usage="absorption"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the average of the values in the input sequence <code>$values</code>, that is, the
            sum of the values divided by the number of values.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$values</code> is the empty sequence, the empty sequence is returned.</p>
         <p>If <code>$values</code> contains values of type <code>xs:untypedAtomic</code> they are cast
            to <code>xs:double</code>. </p>
         <p>Duration values must either all be <code>xs:yearMonthDuration</code> values or must all
            be <code>xs:dayTimeDuration</code> values. For numeric values, the numeric promotion
            rules defined in <specref
               ref="op.numeric"
               /> are used to promote all values to a single
            common type. After these operations, <code>$values</code> must satisfy the following condition:</p>
         <p>There must be a type <var>T</var> such that:</p>
         <olist>
            <item><p>every item in <code>$values</code> is an instance of <var>T</var>.</p></item>
            <item><p><var>T</var> is one of <code>xs:double</code>, <code>xs:float</code>,
                  <code>xs:decimal</code>, <code>xs:yearMonthDuration</code>, or
                  <code>xs:dayTimeDuration</code>.</p></item>
         </olist>


         <p>The function returns the average of the values as <code>sum($values) div
            count($values)</code>; but the implementation may use an otherwise equivalent algorithm
            that avoids arithmetic overflow.</p>

      </fos:rules>
      <fos:errors>
         <p>A type error is raised <errorref class="RG" code="0006"
            /> if the input sequence contains
            items of incompatible types, as described above.</p>
      </fos:errors>
      <fos:examples>
         <fos:variable id="v-avg-d1" name="d1" select="xs:yearMonthDuration(&quot;P20Y&quot;)"/>
         <fos:variable id="v-avg-d2" name="d2" select="xs:yearMonthDuration(&quot;P10M&quot;)"/>
         <fos:variable id="v-avg-seq3" name="seq3" select="(3, 4, 5)"/>
         <fos:example>
            <fos:test use="v-avg-seq3">
               <fos:expression>avg($seq3)</fos:expression>
               <fos:result>4.0</fos:result>
               <fos:postamble>The result is of type <code>xs:decimal</code>.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-avg-d1 v-avg-d2">
               <fos:expression>avg(($d1, $d2))</fos:expression>
               <fos:result>xs:yearMonthDuration("P10Y5M")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>avg(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>avg((xs:float('INF'), xs:float('-INF')))</fos:expression>
               <fos:result>xs:float('NaN')</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-avg-seq3">
               <fos:expression>avg(($seq3, xs:float('NaN')))</fos:expression>
               <fos:result>xs:float('NaN')</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p><code>fn:avg(($d1, $seq3))</code> raises a type error <errorref class="RG"
                  code="0006"/>. </p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="max" prefix="fn">
      <fos:signatures>
         <fos:proto name="max" return-type="xs:anyAtomicType?">
            <fos:arg name="values" type="xs:anyAtomicType*"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a value that is equal to the highest value appearing in the input sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>The following conversions are applied to the input sequence <code>$values</code>, in order:</p>
         <olist>
            <item>
               <p>Values of type <code>xs:untypedAtomic</code> in <code>$values</code> are cast to
                     <code>xs:double</code>.</p>
            </item>
            <item>
               <p>If the resulting sequence contains values that are instances of more than one primitive type
                  (meaning the 19 primitive types defined in <bibref
                     ref="xmlschema11-2"/>), then:
               </p>
               <olist>
                  <item>
                     <p>If each value is an instance of one of the types <code>xs:string</code> or <code>xs:anyURI</code>,
                  then all the values are cast to type <code>xs:string</code>.</p>
                  </item>
                  <item>
                     <p>If each value is an instance of one of the types <code>xs:decimal</code> or <code>xs:float</code>,
                     then all the values are cast to type <code>xs:float</code>.</p>
                  </item>
                  <item>
                     <p>If each value is an instance of one of the types <code>xs:decimal</code>, <code>xs:float</code>,
                     or <code>xs:double</code>, then all the values are cast to type <code>xs:double</code>.</p>
                  </item>
                  <item>
                     <p>Otherwise, a type error is raised <errorref class="RG" code="0006"/>.</p>
                  </item>
               </olist>
               <note>
                  <p>The primitive type of an <code>xs:integer</code> value for this purpose is <code>xs:decimal</code>.</p>
               </note>
            </item>

         </olist>
         <p>The items in the resulting sequence may be reordered in an arbitrary order. The
            resulting sequence is referred to below as the converted sequence. The function returns
            an item from the converted sequence rather than the input sequence. </p>
         <p>If the converted sequence is empty, the function returns the empty sequence.</p>
         <p>All items in the converted sequence must be derived from a single base type for which
            the <code>le</code> operator is defined. In addition, the values in the sequence must
            have a total order. If date/time values do not have a timezone, they are considered to
            have the implicit timezone provided by the dynamic context for the purpose of
            comparison. Duration values must either all be <code>xs:yearMonthDuration</code> values
            or must all be <code>xs:dayTimeDuration</code> values.</p>
         <p>If the converted sequence contains the value <code>NaN</code>, the value
               <code>NaN</code> is returned 
            <phrase>(as an <code>xs:float</code> or <code>xs:double</code> as appropriate)</phrase>.</p>
         <p>If the items in the converted sequence are of type <code>xs:string</code> or types
            derived by restriction from <code>xs:string</code>, then the determination of the item
            with the smallest value is made according to the collation that is used. If the type of
            the items in the converted sequence is not <code>xs:string</code> and
               <code>$collation</code> is specified, the collation is ignored.</p>
         <p>The collation used by this function is determined according to the rules in <specref
               ref="choosing-a-collation"/>.</p>
         <p>The function returns the result of the expression:</p>
         <eg xml:space="preserve">
   if (every $v in $c satisfies $c[1] ge $v)
   then $c[1] 
   else max(tail($c))</eg>
         <p>evaluated with <code>$collation</code> as the default collation if specified, and with
               <code>$c</code> as the converted sequence.</p>

      </fos:rules>
      <fos:errors>
         <p>A type error is raised <errorref class="RG" code="0006"
            /> if the input sequence contains
            items of incompatible types, as described above.</p>
      </fos:errors>
      <fos:notes>
         <p>Because the rules allow the sequence to be reordered, if there are two or more items that are
            “equal highest”, the specific item whose value is returned is <termref
               def="implementation-dependent"
               >implementation-dependent</termref>. This can arise for example if two different strings
            compare equal under the selected collation, or if two different <code>xs:dateTime</code>
            values compare equal despite being in different timezones.</p>
         <p>If the converted sequence contains exactly one value then that value is returned.</p>
         <p>The default type when the <code>fn:max</code> function is applied to
               <code>xs:untypedAtomic</code> values is <code>xs:double</code>. This differs from the
            default type for operators such as <code>gt</code>, and for sorting in XQuery and XSLT,
            which is <code>xs:string</code>.</p>
         <p>The rules for the dynamic type of the result are stricter in version 3.1 of the specification than
         in earlier versions. For example, if all the values in the input sequence belong to types derived from
         <code>xs:integer</code>, version 3.0 required only that the result be an instance
         of the least common supertype of the types present in the input sequence; Version 3.1
         requires that the returned value retains its original type. This does not apply, however, where type promotion
         is needed to convert all the values to a common primitive type.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>max((3,4,5))</fos:expression>
               <fos:result>5</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>max([3,4,5])</fos:expression>
               <fos:result>5</fos:result>
               <fos:postamble>Arrays are atomized</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>max((xs:integer(5), xs:float(5.0), xs:double(0)))</fos:expression>
               <fos:result>xs:double(5.0e0)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>max((current-date(), xs:date("2100-01-01")))</fos:expression>
               <fos:result>xs:date("2100-01-01")</fos:result>
               <fos:postamble>Assuming that the current date is during the 21st
                  century.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>max(("a", "b", "c"))</fos:expression>
               <fos:result>"c"</fos:result>
               <fos:postamble>Assuming a typical default collation.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <p><code>fn:max((3,4,"Zero"))</code> raises a type error <errorref class="RG"
                  code="0006"/>. </p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="min" prefix="fn">
      <fos:signatures>
         <fos:proto name="min" return-type="xs:anyAtomicType?">
            <fos:arg name="values" type="xs:anyAtomicType*"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations static-base-uri implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a value that is equal to the lowest value appearing in the input sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>The following rules are applied to the input sequence:</p>
         <ulist>
            <item>
               <p>Values of type <code>xs:untypedAtomic</code> in <code>$values</code> are cast to
                     <code>xs:double</code>.</p>
            </item>
            <item>
               <p>If the resulting sequence contains values that are instances of more than one primitive type
                  (meaning the 19 primitive types defined in <bibref
                     ref="xmlschema11-2"/>), then:
               </p>
               <olist>
                  <item>
                     <p>If each value is an instance of one of the types <code>xs:string</code> or <code>xs:anyURI</code>,
                     then all the values are cast to type <code>xs:string</code>.</p>
                  </item>
                  <item>
                     <p>If each value is an instance of one of the types <code>xs:decimal</code> or <code>xs:float</code>,
                     then all the values are cast to type <code>xs:float</code>.</p>
                  </item>
                  <item>
                     <p>If each value is an instance of one of the types <code>xs:decimal</code>, <code>xs:float</code>,
                     or <code>xs:double</code>, then all the values are cast to type <code>xs:double</code>.</p>
                  </item>
                  <item>
                     <p>Otherwise, a type error is raised <errorref class="RG" code="0006"/>.</p>
                  </item>
               </olist>
               <note>
                  <p>The primitive type of an <code>xs:integer</code> value for this purpose is <code>xs:decimal</code>.</p>
               </note>
            </item>
         </ulist>
         <p>The items in the resulting sequence may be reordered in an arbitrary order. The
            resulting sequence is referred to below as the converted sequence. The function returns
            an item from the converted sequence rather than the input sequence. </p>
         <p>If the converted sequence is empty, the empty sequence is returned.</p>
         <p>All items in the converted sequence must be derived from a single base type for which
            the <code>le</code> operator is defined. In addition, the values in the sequence must
            have a total order. If date/time values do not have a timezone, they are considered to
            have the implicit timezone provided by the dynamic context for the purpose of
            comparison. Duration values must either all be <code>xs:yearMonthDuration</code> values
            or must all be <code>xs:dayTimeDuration</code> values.</p>
         <p>If the converted sequence contains the value <code>NaN</code>, the value
               <code>NaN</code> is returned
            <phrase>(as an <code>xs:float</code> or <code>xs:double</code> as appropriate)</phrase>.</p>
         <p>If the items in the converted sequence are of type <code>xs:string</code> or types
            derived by restriction from <code>xs:string</code>, then the determination of the item
            with the smallest value is made according to the collation that is used. If the type of
            the items in the converted sequence is not <code>xs:string</code> and
               <code>$collation</code> is specified, the collation is ignored.</p>
         <p>The collation used by this function is determined according to the rules in <specref
               ref="choosing-a-collation"/>.</p>
         <p>The function returns the result of the expression:</p>
         <eg xml:space="preserve">
   if (every $v in $c satisfies $c[1] le $v) 
   then $c[1] 
   else min(tail($c))</eg>
         <p>evaluated with <code>$collation</code> as the default collation if specified, and with
               <code>$c</code> as the converted sequence.</p>

      </fos:rules>
      <fos:errors>
         <p>A type error is raised <errorref class="RG" code="0006"
            /> if the input sequence contains
            items of incompatible types, as described above.</p>
      </fos:errors>
      <fos:notes>
         <p>Because the rules allow the sequence to be reordered, if there are two or items that are
            “equal lowest”, the specific item whose value is returned is <termref
               def="implementation-dependent"
               >implementation-dependent</termref>. This can arise for example if two different strings
            compare equal under the selected collation, or if two different <code>xs:dateTime</code>
            values compare equal despite being in different timezones.</p>
         <p>If the converted sequence contains exactly one value then that value is returned.</p>
         <p>The default type when the <code>fn:min</code> function is applied to
               <code>xs:untypedAtomic</code> values is <code>xs:double</code>. This differs from the
            default type for operators such as <code>lt</code>, and for sorting in XQuery and XSLT,
            which is <code>xs:string</code>.</p>
         <p>The rules for the dynamic type of the result are stricter in version 3.1 of the specification than
            in earlier versions. For example, if all the values in the input sequence belong to types derived from
            <code>xs:integer</code>, version 3.0 required only that the result be an instance
            of the least common supertype of the types present in the input sequence; Version 3.1
            requires that the returned value retains its original type. This does not apply, however, where type promotion
            is needed to convert all the values to a common primitive type.</p>

      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>min((3,4,5))</fos:expression>
               <fos:result>3</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>min([3,4,5])</fos:expression>
               <fos:result>3</fos:result>
               <fos:postamble>Arrays are atomized</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>min((xs:integer(5), xs:float(5), xs:double(10)))</fos:expression>
               <fos:result>xs:double(5.0e0)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p><code>fn:min((xs:float(0.0E0), xs:float(-0.0E0)))</code> can return either positive
               or negative zero. The two items are equal, so it is <termref
                  def="implementation-dependent"
               >implementation-dependent</termref> which is returned.</p>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>min((current-date(), xs:date("1900-01-01")))</fos:expression>
               <fos:result>xs:date("1900-01-01")</fos:result>
               <fos:postamble>Assuming that the current date is set to a reasonable
                  value.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>min(("a", "b", "c"))</fos:expression>
               <fos:result>"a"</fos:result>
               <fos:postamble>Assuming a typical default collation.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <p><code>fn:min((3,4,"Zero"))</code> raises a type error <errorref class="RG"
                  code="0006"/>. </p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="sum" prefix="fn">
      <fos:signatures>
         <fos:proto name="sum" return-type="xs:anyAtomicType?">
            <fos:arg name="values" type="xs:anyAtomicType*"/>
            <fos:arg name="zero" type="xs:anyAtomicType?" default="0"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a value obtained by adding together the values in <code>$values</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>Any values of type <code>xs:untypedAtomic</code> in <code>$values</code> are cast to
               <code>xs:double</code>. The items in the resulting sequence may be reordered in an
            arbitrary order. The resulting sequence is referred to below as the converted
            sequence.</p>
         <p diff="chg" at="2023-01-17">If the converted sequence is empty, then the function returns
            the value of the argument <code>$zero</code>, which defaults to 
            the <code>xs:integer</code> value <code>0</code>.</p>
         <p>If the converted sequence contains the value <code>NaN</code>, <code>NaN</code> is
            returned.</p>
         <p>All items in <code>$values</code> must be numeric or derived from a single base type. In
            addition, the type must support addition. Duration values must either all be
               <code>xs:yearMonthDuration</code> values or must all be
               <code>xs:dayTimeDuration</code> values. For numeric values, the numeric promotion
            rules defined in <specref
               ref="op.numeric"
               /> are used to promote all values to a single
            common type. The sum of a sequence of integers will therefore be an integer, while the
            sum of a numeric sequence that includes at least one <code>xs:double</code> will be an
               <code>xs:double</code>. </p>
         <p>The result of the function is the value of the
            expression:</p>
         <eg xml:space="preserve">
if (count($c) eq 0) then
    $zero
else if (count($c) eq 1) then
    $c[1]
else
    $c[1] + sum(subsequence($c, 2))</eg>
         <p>where <code>$c</code> is the converted sequence.</p>
         <p>The result of the function <phrase diff="chg" at="2023-01-17">when a single argument is supplied</phrase> is the result of the expression:
               <code>fn:sum($arg, 0)</code>.</p>

      </fos:rules>
      <fos:errors>
         <p>A type error is raised <errorref class="RG" code="0006"
            /> if the input sequence contains
            items of incompatible types, as described above.</p>

      </fos:errors>
      <fos:notes>
         <p>The second argument allows an appropriate value to be defined to represent the sum of an
            empty sequence. For example, when summing a sequence of durations it would be
            appropriate to return a zero-length duration of the appropriate type. This argument is
            necessary because a system that does dynamic typing cannot distinguish “an empty
            sequence of integers", for example, from “an empty sequence of durations”.</p>
         <p diff="add" at="2023-01-17">The explicit or implicit value of 
            the <code>$zero</code> argument is used only when the input sequence is empty, not
            when a non-empty sequence sums to zero. For example, <code>sum((-1, +1), xs:double('NaN'))</code>
            returns the <code>xs:integer</code> value <code>0</code>, not <code>NaN</code>.</p>
         <p> If the converted sequence contains exactly one value then that value is returned.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="d1" id="v-sum-d1" select="xs:yearMonthDuration(&quot;P20Y&quot;)"/>
         <fos:variable name="d2" id="v-sum-d2" select="xs:yearMonthDuration(&quot;P10M&quot;)"/>
         <fos:variable name="seq1" id="v-sum-seq1" select="($d1, $d2)"/>
         <fos:variable name="seq3" id="v-sum-seq3" select="(3, 4, 5)"/>
         <fos:example>
            <fos:test use="v-sum-d1 v-sum-d2">
               <fos:expression>sum(($d1, $d2))</fos:expression>
               <fos:result>xs:yearMonthDuration("P20Y10M")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-sum-d1 v-sum-d2 v-sum-seq1">
               <fos:expression><eg>sum(
  $seq1[. lt xs:yearMonthDuration('P3M')],
  xs:yearMonthDuration('P0M')
)</eg></fos:expression>
               <fos:result>xs:yearMonthDuration("P0M")</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-sum-seq3">
               <fos:expression>sum($seq3)</fos:expression>
               <fos:result>12</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>sum(())</fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>sum((),())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>sum((1 to 100)[. lt 0], 0) </fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-sum-d1 v-sum-d2">
               <fos:expression>sum(($d1, $d2), "ein Augenblick")</fos:expression>
               <fos:result>xs:yearMonthDuration("P20Y10M")</fos:result>
               <fos:postamble>There is no requirement that the <code>$zero</code> value should be
                  the same type as the items in <code>$value</code>, or even that it should belong to
                  a type that supports addition.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>sum([1, 2, 3])</fos:expression>
               <fos:result>6</fos:result>
               <fos:postamble>Atomizing an array returns the sequence obtained by atomizing its members.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>sum([[1, 2], [3, 4]])</fos:expression>
               <fos:result>10</fos:result>
               <fos:postamble>Atomizing an array returns the sequence obtained by atomizing its members.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <p><code>fn:sum(($d1, 9E1))</code> raises a type error <errorref class="RG" code="0006"
               />. </p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <!--<fos:function name="to" prefix="op">
      <fos:signatures>
         <fos:proto name="to" return-type="xs:integer*">
            <fos:arg name="firstval" type="xs:integer"/>
            <fos:arg name="lastval" type="xs:integer"/>
         </fos:proto>
      </fos:signatures>
      <fos:opermap operator="to" types="xs:integer xs:integer">Defines the semantics of the <code>to</code>
         operator when applied to two integer arguments.</fos:opermap>
      <fos:summary>
         <p>Returns a sequence of consecutive integers in a given range.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the sequence containing every <code>xs:integer</code> whose value
            is between the value of <code>$firstval</code> (inclusive) and the value of
               <code>$lastval</code> (inclusive), in monotonic increasing order.</p>
         <p>If the value of the first operand is greater than the value of the second, the function
            returns the empty sequence.</p>
         <p>If the values of the two operands are equal, the function returns a sequence containing
            a single <code>xs:integer</code> equal to that value.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>1 to 3</fos:expression>
               <fos:result>(1, 2, 3)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>3 to 1</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>5 to 5</fos:expression>
               <fos:result>5</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>-->
   <fos:function name="id" prefix="fn">
      <fos:signatures>
         <fos:proto name="id" return-type="element()*">
            <fos:arg name="values" type="xs:string*"/>
            <fos:arg name="node" type="node()" default="." usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the sequence of element nodes that have an <code>ID</code> value matching the
            value of one or more of the <code>IDREF</code> values supplied in <code>$values</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns a sequence, in document order with duplicates eliminated,
            containing every element node <code>E</code> that satisfies all the following
            conditions:</p>
         <olist>
            <item>
               <p>
                  <code>E</code> is in the target document. The target document is the document
                  containing <code>$node</code>, or the document containing the context item
                     (<code>.</code>) if the second argument is omitted. The behavior of the
                  function if <code>$node</code> is omitted is exactly the same as if the context
                  item had been passed as <code>$node</code>.</p>
            </item>
            <item>
               <p><code>E</code> has an <code>ID</code> value equal to one of the candidate
                     <code>IDREF</code> values, where:</p>
               <ulist>
                  <item>
                     <p> An element has an <code>ID</code> value equal to <code>V</code> if either
                        or both of the following conditions are true:</p>
                     <ulist>
                        <item>
                           <p>The <code>is-id</code> property (See <xspecref spec="DM40"
                                 ref="dm-is-id"
                                 />.) of the element node is <code>true</code>, and the typed value
                              of the element node is equal to <code>V</code> under the rules of the
                                 <code>eq</code> operator using the Unicode codepoint collation
                                 (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p>
                        </item>
                        <item>
                           <p>The element has an attribute node whose <code>is-id</code> property
                              (See <xspecref
                                 spec="DM40" ref="dm-is-id"
                                 />.) is <code>true</code> and whose typed
                              value is equal to <code>V</code> under the rules of the
                                 <code>eq</code> operator using the Unicode code point collation
                                 (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p> Each <code>xs:string</code> in <code>$values</code> is parsed as if it were of
                        type <code>IDREFS</code>, that is, each <code>xs:string</code> in
                        <code>$values</code> is treated as a whitespace-separated sequence of
                        tokens, each acting as an <code>IDREF</code>. These tokens are then included
                        in the list of candidate <code>IDREF</code>s. If any of the tokens is not a
                        lexically valid <code>IDREF</code> (that is, if it is not lexically an
                           <code>xs:NCName</code>), it is ignored. Formally, the candidate
                           <code>IDREF</code> values are the strings in the sequence given by the
                        expression:</p>
                     <eg xml:space="preserve">for $s in $values return 
    tokenize(normalize-space($s), ' ')[. castable as xs:IDREF]</eg>

                  </item>
               </ulist>
            </item>
            <item>
               <p>If several elements have the same <code>ID</code> value, then <code>E</code> is
                  the one that is first in document order.</p>
            </item>
         </olist>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DC" code="0001" type="dynamic"
               /> if
               <code>$node</code>, or the context item if the second argument is absent, is a node
            in a tree whose root is not a document node.</p>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>

      </fos:errors>
      <fos:notes>
         <p>The effect of this function is anomalous in respect of element nodes with the
               <code>is-id</code> property. For legacy reasons, this function returns the element
            that has the <code>is-id</code> property, whereas it would be more appropriate to return
            its parent, that being the element that is uniquely identified by the ID. A new function
               <code>fn:element-with-id</code> has been introduced with the desired
            behavior.</p>

         <p> If the data model is constructed from an Infoset, an attribute will have the
               <code>is-id</code> property if the corresponding attribute in the Infoset had an
            attribute type of <code>ID</code>: typically this means the attribute was declared as an
               <code>ID</code> in a DTD.</p>
         <!--Text replaced by erratum E13 change 1"-->
         <p> If the data model is constructed from a PSVI, an element or attribute will have the
               <code>is-id</code> property if its typed value is a single atomic value of type
               <code>xs:ID</code> or a type derived by restriction from <code>xs:ID</code>.</p>
         <!--End of text replaced by erratum E13-->
         <p> No error is raised in respect of a candidate <code>IDREF</code> value that does not
            match the <code>ID</code> of any element in the document. If no candidate
               <code>IDREF</code> value matches the <code>ID</code> value of any element, the
            function returns the empty sequence.</p>
         <p> It is not necessary that the supplied argument should have type <code>xs:IDREF</code>
            or <code>xs:IDREFS</code>, or that it should be derived from a node with the
               <code>is-idrefs</code> property.</p>
         <p> An element may have more than one <code>ID</code> value. This can occur with synthetic
            data models or with data models constructed from a PSVI where the element and one of its
            attributes are both typed as <code>xs:ID</code>.</p>
         <p> If the source document is well-formed but not valid, it is possible for two or more
            elements to have the same <code>ID</code> value. In this situation, the function will
            select the first such element.</p>
         <p> It is also possible in a well-formed but invalid document to have an element or
            attribute that has the <code>is-id</code> property but whose value does not conform to
            the lexical rules for the <code>xs:ID</code> type. Such a node will never be selected by
            this function.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="emp" id="v-id-emp" as="document-node()"><![CDATA[
        validate lax{    
          document{
            <employee xml:id="ID21256"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                      xmlns:xs="http://www.w3.org/2001/XMLSchema">
               <empnr xsi:type="xs:ID">E21256</empnr>
               <first>John</first>
               <last>Brown</last>
            </employee>
          }
        }]]>
         </fos:variable>
         <fos:example>
            <fos:test xslt-version="3.0" use="v-id-emp">
               <fos:expression>$emp/id('ID21256')/name()</fos:expression>
               <fos:result>"employee"</fos:result>
               <fos:postamble>The <code>xml:id</code> attribute has the <code>is-id</code> property,
                  so the employee element is selected.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0" use="v-id-emp">
               <fos:expression>$emp/id('E21256')/name()</fos:expression>
               <fos:result>"empnr"</fos:result>
               <fos:postamble>Assuming the <code>empnr</code> element is given the type
                     <code>xs:ID</code> as a result of schema validation, the element will have the
                     <code>is-id</code> property and is therefore selected. Note the difference from
                  the behavior of <code>fn:element-with-id</code>.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="element-with-id" prefix="fn">
      <fos:signatures>
         <fos:proto name="element-with-id" return-type="element()*">
            <fos:arg name="values" type="xs:string*"/>
            <fos:arg name="node" type="node()" default="." usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p> Returns the sequence of element nodes that have an <code>ID</code> value matching the
            value of one or more of the <code>IDREF</code> values supplied in <code>$values</code>.</p>
      </fos:summary>
      <fos:rules>

         <note>
            <p>The effect of this function is identical to <code>fn:id</code> in respect of
               elements that have an attribute with the <code>is-id</code> property. However, it
               behaves differently in respect of element nodes with the <code>is-id</code> property.
               Whereas the <code>fn:id</code> function, for legacy reasons, returns the element that has the
                  <code>is-id</code> property, this function returns the element identified by the ID,
               which is the parent of the element having the <code>is-id</code> property.</p>
         </note>
         <p>The function returns a sequence, in document order with duplicates eliminated,
            containing every element node <code>E</code> that satisfies all the following
            conditions:</p>
         <olist>
            <item>
               <p>
                  <code>E</code> is in the target document. The target document is the document
                  containing <code>$node</code>, or the document containing the context item
                     (<code>.</code>) if the second argument is omitted. The behavior of the
                  function if <code>$node</code> is omitted is exactly the same as if the context
                  item had been passed as <code>$node</code>.</p>
            </item>
            <item>
               <p><code>E</code> has an <code>ID</code> value equal to one of the candidate
                     <code>IDREF</code> values, where:</p>
               <ulist>
                  <item>
                     <p> An element has an <code>ID</code> value equal to <code>V</code> if either
                        or both of the following conditions are true:</p>
                     <ulist>
                        <item>
                           <p>The element has an child element node whose <code>is-id</code>
                              property (See <xspecref
                                 spec="DM40" ref="dm-is-id"
                                 />.) is <code>true</code> and
                              whose typed value is equal to <code>V</code> under the rules of the
                                 <code>eq</code> operator using the Unicode code point collation
                                 (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p>
                        </item>
                        <item>
                           <p>The element has an attribute node whose <code>is-id</code> property
                              (See <xspecref
                                 spec="DM40" ref="dm-is-id"
                                 />.) is <code>true</code> and whose typed
                              value is equal to <code>V</code> under the rules of the
                                 <code>eq</code> operator using the Unicode code point collation
                                 (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>Each <code>xs:string</code> in <code>$values</code> is parsed as if it were of
                        type <code>IDREFS</code>, that is, each <code>xs:string</code> in
                        <code>$values</code> is treated as a whitespace-separated sequence of
                        tokens, each acting as an <code>IDREF</code>. These tokens are then included
                        in the list of candidate <code>IDREF</code>s. If any of the tokens is not a
                        lexically valid <code>IDREF</code> (that is, if it is not lexically an
                           <code>xs:NCName</code>), it is ignored. Formally, the candidate
                           <code>IDREF</code> values are the strings in the sequence given by the
                        expression:</p>
                     <eg xml:space="preserve">for $s in $arg return 
   tokenize(normalize-space($s), ' ')[. castable as xs:IDREF]</eg>
                  </item>
               </ulist>
            </item>
            <item>
               <p> If several elements have the same <code>ID</code> value, then <code>E</code> is
                  the one that is first in document order.</p>
            </item>
         </olist>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DC" code="0001" type="dynamic"
               /> if <code>$node</code>, or the context item if the second argument is omitted, is a node
            in a tree whose root is not a document node.</p>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>, dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>

      </fos:errors>
      <fos:notes>
         <p>This function is equivalent to the <code>fn:id</code> function except when dealing with
            ID-valued element nodes. Whereas the <code>fn:id</code> function selects the element
            containing the identifier, this function selects its parent.</p>
         <p>If the data model is constructed from an Infoset, an attribute will have the
               <code>is-id</code> property if the corresponding attribute in the Infoset had an
            attribute type of <code>ID</code>: typically this means the attribute was declared as an
               <code>ID</code> in a DTD.</p>
         <!--Text replaced by erratum E13 change 1"-->
         <p> If the data model is constructed from a PSVI, an element or attribute will have the
               <code>is-id</code> property if its typed value is a single atomic value of type
               <code>xs:ID</code> or a type derived by restriction from <code>xs:ID</code>.</p>
         <!--End of text replaced by erratum E13-->
         <p> No error is raised in respect of a candidate <code>IDREF</code> value that does not
            match the <code>ID</code> of any element in the document. If no candidate
               <code>IDREF</code> value matches the <code>ID</code> value of any element, the
            function returns the empty sequence.</p>
         <p> It is not necessary that the supplied argument should have type <code>xs:IDREF</code>
            or <code>xs:IDREFS</code>, or that it should be derived from a node with the
               <code>is-idrefs</code> property.</p>
         <p> An element may have more than one <code>ID</code> value. This can occur with synthetic
            data models or with data models constructed from a PSVI where the element and one of its
            attributes are both typed as <code>xs:ID</code>.</p>
         <p> If the source document is well-formed but not valid, it is possible for two or more
            elements to have the same <code>ID</code> value. In this situation, the function will
            select the first such element.</p>
         <p> It is also possible in a well-formed but invalid document to have an element or
            attribute that has the <code>is-id</code> property but whose value does not conform to
            the lexical rules for the <code>xs:ID</code> type. Such a node will never be selected by
            this function.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="emp" as="element()" id="v-element-with-id-emp"><![CDATA[
         validate lax{    
          document{
            <employee xml:id="ID21256"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                      xmlns:xs="http://www.w3.org/2001/XMLSchema">
               <empnr xsi:type="xs:ID">E21256</empnr>
               <first>John</first>
               <last>Brown</last>
            </employee>
          }
        }]]>
         </fos:variable>
         <fos:example>
            <fos:test xslt-version="3.0" use="v-element-with-id-emp">
               <fos:expression>$emp/element-with-id('ID21256')/name()</fos:expression>
               <fos:result>"employee"</fos:result>
               <fos:postamble>The <code>xml:id</code> attribute has the <code>is-id</code> property,
                  so the employee element is selected.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0" use="v-element-with-id-emp">
               <fos:expression>$emp/element-with-id('E21256')/name()</fos:expression>
               <fos:result>"employee"</fos:result>
               <fos:postamble>Assuming the <code>empnr</code> element is given the type
                     <code>xs:ID</code> as a result of schema validation, the element will have the
                     <code>is-id</code> property and is therefore its parent is selected. Note the
                  difference from the behavior of <code>fn:id</code>.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="idref" prefix="fn">
      <fos:signatures>
         <fos:proto name="idref" return-type="node()*">
            <fos:arg name="values" type="xs:string*"/>
            <fos:arg name="node" type="node()" default="." usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the sequence of element or attribute nodes with an <code>IDREF</code> value
            matching the value of one or more of the <code>ID</code> values supplied in
               <code>$values</code>.</p>
      </fos:summary>
      <fos:rules>
         <p> The function returns a sequence, in document order with duplicates eliminated,
            containing every element or attribute node <code>$N</code> that satisfies all the
            following conditions:</p>
         <olist>
            <item>
               <p><code>$N</code> is in the target document. The target document is the document
                  containing <code>$node</code> or the document containing the context item
                     (<code>.</code>) if the second argument is omitted. The behavior of the
                  function if <code>$node</code> is omitted is exactly the same as if the context
                  item had been passed as <code>$node</code>.</p>
            </item>
            <item>
               <p><code>$N</code> has an <code>IDREF</code> value equal to one of the candidate
                     <code>ID</code> values, where:</p>
               <ulist>
                  <item>
                     <p>A node <code>$N</code> has an <code>IDREF</code> value equal to
                           <code>V</code> if both of the following conditions are true:</p>
                     <ulist>
                        <item>
                           <p>The <code>is-idrefs</code> property (see <xspecref spec="DM40"
                                 ref="dm-is-idrefs"/>) of <code>$N</code> is <code>true</code>.</p>
                        </item>
                        <item>
                           <p>The sequence <!--Text replaced by erratum E29 change 1"--></p>
                           <eg xml:space="preserve">tokenize(normalize-space(string($N)), ' ')</eg>
                           <!--End of text replaced by erratum E29-->
                           <p>contains a string that is
                              equal to <code>V</code> under the rules of the <code>eq</code>
                              operator using the Unicode code point collation
                                 (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>Each <code>xs:string</code> in <code>$values</code> is parsed as if it were of
                        lexically of type <code>xs:ID</code>. These <code>xs:string</code>s are then
                        included in the list of candidate <code>xs:ID</code>s. If any of the strings
                        in <code>$values</code> is not a lexically valid <code>xs:ID</code> (that is,
                        if it is not lexically an <code>xs:NCName</code>), it is ignored. More
                        formally, the candidate <code>ID</code> values are the strings in the
                        sequence:</p>
                     <eg xml:space="preserve">$values[. castable as xs:NCName]</eg>
                  </item>
               </ulist>
            </item>
         </olist>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DC" code="0001" type="dynamic"
               /> if
               <code>$node</code>, or the context item if the second argument is omitted, is a node
            in a tree whose root is not a document node. </p>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>

      </fos:errors>
      <fos:notes>
         <p> An element or attribute typically acquires the <code>is-idrefs</code> property by being
            validated against the schema type <code>xs:IDREF</code> or <code>xs:IDREFS</code>, or
            (for attributes only) by being described as of type <code>IDREF</code> or
               <code>IDREFS</code> in a DTD.</p>
         <p>Because the function is sensitive to the way in which the data model
         is constructed, calls on this function are not always interoperable.</p>
         <p> No error is raised in respect of a candidate <code>ID</code> value that does not match
            the <code>IDREF</code> value of any element or attribute in the document. If no
            candidate <code>ID</code> value matches the <code>IDREF</code> value of any element or
            attribute, the function returns the empty sequence.</p>
         <p> It is possible for two or more nodes to have an <code>IDREF</code> value that matches a
            given candidate <code>ID</code> value. In this situation, the function will return all
            such nodes. However, each matching node will be returned at most once, regardless how
            many candidate <code>ID</code> values it matches.</p>
         <p> It is possible in a well-formed but invalid document to have a node whose
               <code>is-idrefs</code> property is <code>true</code> but that does not conform to the lexical
            rules for the <code>xs:IDREF</code> type. The effect of the above rules is that
            ill-formed candidate <code>ID</code> values and ill-formed <code>IDREF</code> values are
            ignored.</p>
         <p>If the data model is constructed from a PSVI, the typed value of a node that has the
               <code>is-idrefs</code> property will contain at least one atomic value of type
               <code>xs:IDREF</code> (or a type derived by restriction from <code>xs:IDREF</code>).
            It may also contain atomic values of other types. These atomic values are treated as
            candidate <code>ID</code> values <phrase>if two conditions are met: their lexical form must be valid as an
               <code>xs:NCName</code>, and there must be at least one instance of <code>xs:IDREF</code>
            in the typed value of the node. If these conditions are not satisfied, such values are ignored.</phrase></p>

      </fos:notes>
      <fos:examples>
         <fos:variable name="emp" as="element()" id="v-idref-emp"><![CDATA[
      validate lax {  
        document {    
          <employees xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                     xmlns:xs="http://www.w3.org/2001/XMLSchema">  
            <employee xml:id="ID21256">
               <empnr xsi:type="xs:ID">E21256</empnr>
               <first>Anil</first>
               <last>Singh</last>
               <deputy xsi:type="xs:IDREF">E30561</deputy>
            </employee>
            <employee xml:id="ID30561">
               <empnr xsi:type="xs:ID">E30561</empnr>
               <first>John</first>
               <last>Brown</last>
               <manager xsi:type="xs:IDREF">ID21256</manager>
            </employee>
          </employees>
        }
      }]]>
         </fos:variable>
         <fos:example>
            <fos:test xslt-version="3.0" use="v-idref-emp">
               <fos:expression><eg>$emp/(
  element-with-id('ID21256')/@xml:id => idref()
)/ancestor::employee/last
=> string()</eg></fos:expression>
               <fos:result>"Brown"</fos:result>
               <fos:postamble>Assuming that <code>manager</code> has the is-idref property, the call on <code>fn:idref</code> selects
                  the <code>manager</code> element. If, instead, the <code>manager</code> had a <code>ref</code>
               attribute with the is-idref property, the call on <code>fn:idref</code> would select the attribute node.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test xslt-version="3.0" use="v-idref-emp">
               <fos:expression><eg>$emp/(
  element-with-id('E30561')/empnr => idref()
)/ancestor::employee/last
=> string()</eg></fos:expression>
               <fos:result>"Singh"</fos:result>
               <fos:postamble>Assuming that <code>employee/deputy</code> has the is-idref property, the call on <code>fn:idref</code> selects
                  the <code>deputy</code> element.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="doc" prefix="fn">
      <fos:signatures>
         <fos:proto name="doc" return-type="document-node()?">
            <fos:arg name="href" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="available-documents static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Retrieves a document using a URI supplied as an <code>xs:string</code>, and returns the
            corresponding document node.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$href</code> is the empty sequence, the result is an empty sequence.</p>
         <p>If <code>$href</code> is a relative URI reference, it is resolved relative to the value
            of the <term>static base URI</term> property from the static context. The resulting absolute URI is
            promoted to an <code>xs:string</code>.</p>
         <p>If the <term>available documents</term> described in <xspecref spec="XP31"
               ref="eval_context"
            /> provides a mapping from this string to a document node, the
            function returns that document node.</p>
         <p>The URI may include a fragment identifier.</p>
         <p>By default, this function is <termref def="dt-deterministic"
            >deterministic</termref>. Two
            calls on this function return the same document node if the same URI Reference (after
            resolution to an absolute URI Reference) is supplied to both calls. Thus, the following
            expression (if it does not raise an error) will always return <code>true</code>:</p>
         <eg xml:space="preserve">doc("foo.xml") is doc("foo.xml")</eg>
         <p>However, for performance reasons, implementations may provide a user option to evaluate
            the function without a guarantee of determinism. The manner in which any such option is
            provided is implementation-defined. If the user has not selected such an option, a call
            of the function must either return a deterministic result or must raise a dynamic error
               <errorref
               class="DC" code="0003"/>.</p>

         <note>
            <p>If <code>$href</code> is read from a source document, it is generally appropriate to
               resolve it relative to the base URI property of the relevant node in the source
               document. This can be achieved by calling the <code>fn:resolve-uri</code> function,
               and passing the resulting absolute URI as an argument to the <code>fn:doc</code>
               function.</p>
         </note>
         <p>If two calls to this function supply different absolute URI References as arguments, the
            same document node may be returned if the implementation can determine that the two
            arguments refer to the same resource.</p>
         <p> By defining the semantics of this function in terms of a string-to-document-node
            mapping in the dynamic context, the specification is acknowledging that the results of
            this function are outside the purview of the language specification itself, and depend
            entirely on the run-time environment in which the expression is evaluated. This run-time
            environment includes not only an unpredictable collection of resources (“the web”), but
            configurable machinery for locating resources and turning their contents into document
            nodes within the XPath data model. Both the set of resources that are reachable, and the
            mechanisms by which those resources are parsed and validated, are <termref
               def="implementation-dependent">implementation-dependent</termref>.</p>
         <p> One possible processing model for this function is as follows. The resource identified
            by the URI Reference is retrieved. If the resource cannot be retrieved, a dynamic error
            is raised <errorref
               class="DC" code="0002"
               />. The data resulting from the retrieval
            action is then parsed as an XML document and a tree is constructed in accordance with
            the <bibref
               ref="xpath-datamodel-30"
               />. If the top-level media type is known and is
            <code>"text"</code>, the content is parsed in the same way as if the media type were text/xml;
            otherwise, it is parsed in the same way as if the media type were application/xml. If
            the contents cannot be parsed successfully, a dynamic error is raised <errorref
               class="DC" code="0002"
            />. Otherwise, the result of the function is the document node
            at the root of the resulting tree. This tree is then optionally validated against a
            schema.</p>
         <p>Various aspects of this processing are <termref def="implementation-defined"
               >implementation-defined</termref>.
            Implementations may provide external configuration options that allow any aspect of the
            processing to be controlled by the user. In particular:</p>
         <ulist>
            <item>
               <p>The set of URI schemes that the implementation recognizes is
                  implementation-defined. Implementations may allow the mapping of URIs to resources
                  to be configured by the user, using mechanisms such as catalogs or user-written
                  URI handlers.</p>
            </item>
            <item>
               <p>The handling of non-XML media types is implementation-defined. Implementations may
                  allow instances of the data model to be constructed from non-XML resources, under
                  user control.</p>
            </item>
            <item>
               <p>It is <termref def="implementation-defined"
                  >implementation-defined</termref> whether DTD validation and/or schema
                  validation is applied to the source document.</p>
            </item>
            <item>
               <p>Implementations may provide user-defined error handling options that allow
                  processing to continue following an error in retrieving a resource, or in parsing
                  and validating its content. When errors have been handled in this way, the
                  function may return either an empty sequence, or a fallback document provided by
                  the error handler.</p>
            </item>
            <item>
               <p>Implementations may provide user options that relax the requirement for the
                  function to return deterministic results.</p>
            </item>
            <item>
               <p>The effect of a fragment identifier in the supplied URI 
                  is <termref
                     def="implementation-defined"
                  >implementation-defined</termref>. One possible interpretation
               is to treat the fragment identifier as an ID attribute value, and to return a document
               node having the element with the selected ID value as its only child.</p>
            </item>
         </ulist>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error <rfc2119>may</rfc2119> be raised <errorref class="DC" code="0005"
               /> if
               <code>$href</code> is not a valid URI <phrase>reference</phrase>.</p>
         <p>A dynamic error is raised <errorref class="DC" code="0002"
            /> if a relative URI reference
         is supplied, and the base-URI property in the static context is absent.</p>
         <p>A dynamic error is raised <errorref class="DC" code="0002"
               /> if the <term>available
               documents</term> provides no mapping for the absolutized URI.</p>
         <p>A dynamic error is raised <errorref class="DC" code="0002"
            /> if the resource cannot be
            retrieved or cannot be parsed successfully as XML.</p>
         <p>A dynamic error is raised <errorref class="DC" code="0003"
            /> if the implementation is
            not able to guarantee that the result of the function will be deterministic, and the
            user has not indicated that an unstable result is acceptable.</p>
      </fos:errors>
   </fos:function>
   <fos:function name="doc-available" prefix="fn">
      <fos:signatures>
         <fos:proto name="doc-available" return-type="xs:boolean">
            <fos:arg name="href" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="available-documents static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>The function returns <code>true</code> if and only if the function call <code>fn:doc($href)</code>
            would return a document node.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$href</code> is an empty sequence, this function returns <code>false</code>.</p>
         <p>If a call on <code>fn:doc($href)</code> would return a document node, this function
            returns <code>true</code>.</p>
         <p>In all other cases this function returns <code>false</code>. <phrase>This
         includes the case where <phrase>an invalid URI is supplied, and also the case where </phrase>
            a valid relative URI reference is supplied, and cannot be resolved,
         for example because the static base URI is absent.</phrase></p>
         <p>If this function returns <code>true</code>, then calling <code>fn:doc($href)</code>
            within the same <termref
               def="execution-scope"
               /> must return a document node. However,
            if nondeterministic processing has been selected for the <code>fn:doc</code> function,
            this guarantee is lost.</p>
      </fos:rules>
   </fos:function>
   <fos:function name="collection" prefix="fn">
      <fos:signatures>
         <fos:proto name="collection" return-type="item()*">
            <fos:arg name="uri" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="available-collections static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence of items identified by a
            collection URI; or a default collection if no URI is supplied.</p>
      </fos:summary>
      <fos:rules>
         <p>This function takes an <code>xs:string</code> as argument and returns a sequence of
            <phrase>items</phrase> obtained by interpreting <code>$uri</code> as an <code>xs:anyURI</code> and
            resolving it according to the mapping specified in <term>available 
               collections</term> described in <xspecref
               spec="XP31" ref="id-xp-evaluation-context-components"/>.</p>
         <p>If <phrase><term>available collections</term></phrase> provides a mapping from this string to a
            sequence of items, the function returns that sequence. If <term>available 
               collections</term> maps the string to an empty sequence, then the function returns an
            empty sequence.</p>
         <p>If <code>$uri</code> is not specified, the function returns the sequence of <phrase>items</phrase> in
            the default collection in the dynamic context. See <xspecref
               spec="XP31" ref="id-xp-evaluation-context-components"/>. </p>
         <p>If <code>$uri</code> is a relative <code>xs:anyURI</code>, it is resolved
            against the value of the base-URI property from the static context. </p>
         <p>If <code>$uri</code> is the empty sequence, the function behaves as if it had been
            called without an argument. See above.</p>
         <p>By default, this function is <termref def="dt-deterministic"
               >deterministic</termref>. This
            means that repeated calls on the function with the same argument will return the same
            result. However, for performance reasons, implementations may provide a user option to
            evaluate the function without a guarantee of determinism. The manner in which any such
            option is provided is <termref
               def="implementation-defined"
               >implementation-defined</termref>. If the user has not
            selected such an option, a call to this function must either return a deterministic
            result or must raise a dynamic error <errorref
               class="DC" code="0003"/>.</p>
         <p>There is no requirement that <phrase>any nodes in the result</phrase> should be in document order, nor is
            there a requirement that the result should contain no duplicates.</p>


      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DC" code="0002"
               /> if no URI is supplied and
            the value of the default collection is <xtermref
               ref="dt-absent" spec="DM40">absent</xtermref>.</p>
         <p>A dynamic error is raised <errorref class="DC" code="0002"
            /> if a relative URI reference
            is supplied, and the base-URI property in the static context is absent.</p>
         <p>A dynamic error is raised <errorref class="DC" code="0002"
               /> if <term>available node
               collections</term> provides no mapping for the absolutized URI.</p>
         <p>A dynamic error <phrase><rfc2119>may</rfc2119> be</phrase> raised <errorref class="DC"
               code="0004"/> if <code>$uri</code> is not
            a valid <code>xs:anyURI</code>.</p>
      </fos:errors>
      <fos:notes>
         <p>In earlier versions of this specification, the primary use for the <code>fn:collection</code> function
         was to retrieve a collection of XML documents, perhaps held as lexical XML in operating
         system filestore, or perhaps held in an XML database. In this release the concept has
         been generalised to allow other resources to be retrieved: for example JSON documents might
         be returned as arrays or maps, non-XML text files might be returned as strings, and binary
         files might be returned as instances of <code>xs:base64Binary</code>.</p>
         <p>The abstract concept of a collection might be realized in different ways by different
            implementations, and the ways in which URIs map to collections can be equally variable. 
            Specifying resources using URIs is
            useful because URIs are dynamic, can be parameterized, and do not rely on an external
            environment.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="uri-collection" prefix="fn">
      <fos:signatures>
         <fos:proto name="uri-collection" return-type="xs:anyURI*">
            <fos:arg name="uri" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="available-uri-collections static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence of <code>xs:anyURI</code> values representing the URIs in a URI
            collection.</p>
      </fos:summary>
      <fos:rules>
         <p>The zero-argument form of the function returns the URIs in the <term>default URI
               collection</term> described in <xspecref
               spec="XP31" ref="id-xp-evaluation-context-components"/>.</p>
         <p>If <code>$uri</code> is a relative <code>xs:anyURI</code>, it is resolved
            against the value of the base-URI property from the static context. </p>
         <p>If <code>$uri</code> is the empty sequence, the function behaves as if it had been
            called without an argument. See above.</p>
         <p>The single-argument form of the function returns the sequence of URIs corresponding to
            the supplied URI in the <term>available URI collections</term> described in
               <xspecref
               spec="XP31" ref="id-xp-evaluation-context-components"/>.</p>
         <p>By default, this function is <termref def="dt-deterministic"
               >deterministic</termref>. This
            means that repeated calls on the function with the same argument will return the same
            result. However, for performance reasons, implementations may provide a user option to
            evaluate the function without a guarantee of determinism. The manner in which any such
            option is provided is <termref
               def="implementation-defined"
               >implementation-defined</termref>. If the user has not
            selected such an option, a call to this function must either return a deterministic
            result or must raise a dynamic error <errorref
               class="DC" code="0003"/>.</p>
         <p>There is no requirement that the URIs returned by this function should all be distinct,
            and no assumptions can be made about the order of URIs in the sequence, unless the
            implementation defines otherwise.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DC" code="0002"
               /> if no URI is supplied (that
            is, if the function is called with no arguments, or with a single argument that
            evaluates to an empty sequence), and the value of the default resource collection is
               <xtermref
               ref="dt-absent" spec="DM40">absent</xtermref>.</p>
         <p>A dynamic error is raised <errorref class="DC" code="0002"
            /> if a relative URI reference
            is supplied, and the base-URI property in the static context is absent.</p>
         <p>A dynamic error is raised <errorref class="DC" code="0002"
               /> if <term>available resource
               collections</term> provides no mapping for the absolutized URI.</p>
         <p>A dynamic error <phrase><rfc2119>may</rfc2119> be</phrase> raised <errorref class="DC"
               code="0004"/> if <code>$uri</code> is not
            a valid <code>xs:anyURI</code>.</p>
      </fos:errors>
      <fos:notes>
         <p>In some implementations, there might be a close relationship between <term>collections</term> (as retrieved
         by the <code>fn:collection</code> function), and <term>URI collections</term> (as retrieved by this function).
         For example, a collection might return XML documents, and the corresponding URI collection might return
         the URIs of those documents. However, this specification does not impose such a close relationship. For example, there
         may be collection URIs accepted by one of the two functions and not by the other; a collection might contain
         items that do not have any URI; or a URI collection might contain URIs that cannot be dereferenced to return any 
         resource.</p>

         <p>Thus, some implementations might ensure that calling <code>fn:uri-collection</code> and then
            applying <code>fn:doc</code> to each of the returned URIs delivers the same result as
            calling <code>fn:collection</code> with the same argument; however, this is not
            guaranteed.</p>

         <p>In the case where <code>fn:uri-collection</code> returns the URIs of resources that
            could also be retrieved directly using <code>fn:collection</code>, there are several reasons why it 
            might be appropriate to use this function in preference
            to the <code>fn:collection</code> function. For example:</p>

         <ulist>
            <item>
               <p>It allows different URIs for different kinds of resource to be dereferenced in
                  different ways: for
                  example, the returned URIs might be referenced using the
                     <code>fn:unparsed-text</code> function rather than the <code>fn:doc</code>
                  function.</p>
            </item>
            <item>
               <p>In XSLT 3.0 it allows the documents in a collection to be processed in streaming mode using the
                     <code>xsl:stream</code> instruction.</p>
            </item>
            <item>
               <p>It allows recovery from failures to read, parse, or validate individual documents,
                  by calling the <code>fn:doc</code> (or other dereferencing) function within the scope of try/catch.</p>
            </item>
            <item>
               <p>It allows selection of which documents to read based on their URI, for example
                  they can be filtered to select those whose URIs end in <code>.xml</code>, or those
                  that use the <code>https</code> scheme.</p>
            </item>
            <item>
               <p>An application might choose to limit the number of URIs processed in a single run,
                  for example it might process only the first 50 URIs in the collection; or it might
                  present the URIs to the user and allow the user to select which of them need to be
                  further processed.</p>
            </item>
            <item>
               <p>It allows the URIs to be modified before they are dereferenced, for example by
                  adding or removing query parameters, or by redirecting the request to a local
                  cache or to a mirror site.</p>
            </item>
         </ulist>

         <p>For some of these use cases, this assumes that the cost of calling
               <code>fn:collection</code> might be significant (for example, it might involving
            retrieving all the documents in the collection over the network and parsing them). This
            will not necessarily be true of all implementations.</p>






      </fos:notes>
   </fos:function>
   <fos:function name="unparsed-text" prefix="fn">
      <fos:signatures>
         <fos:proto name="unparsed-text" return-type="xs:string?">
            <fos:arg name="href" type="xs:string?"/>
            <fos:arg name="encoding" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>The <code>fn:unparsed-text</code> function reads an external resource (for example, a
            file) and returns a string representation of the resource.</p>
      </fos:summary>
      <fos:rules>
         <p>The <code>$href</code> argument <rfc2119>must</rfc2119> be a string in the form of a URI
            reference, which <rfc2119>must</rfc2119> contain no fragment identifier, and
               <rfc2119>must</rfc2119> identify a resource for which a string representation is
            available. If the URI is a relative URI reference, then it is resolved relative to the
            <term>static base URI</term> property from the static context.</p>
         <p>The mapping of URIs to the string representation of a resource is the mapping defined in
            the <xtermref
               spec="XP31" ref="dt-available-text-resources"
               >available text
               resources</xtermref> component of the dynamic context.</p>
         <p>If the <code>$href</code> argument is an empty sequence, the function
            returns an empty sequence.</p>
         <p>The <code>$encoding</code> argument, if present 
            <phrase diff="add" at="2022-12-19"> and non-empty</phrase>, is the name of an encoding. The values
            for this attribute follow the same rules as for the <code>encoding</code> attribute in
            an XML declaration. The only values which every
            implementation is <rfc2119>required</rfc2119> to recognize are
               <code>utf-8</code> and <code>utf-16</code>.</p>
         <p>The encoding of the external resource is determined as follows:</p>
         <olist>
            <item>
               <p>external encoding information is used if available, otherwise</p>
            </item>
            <item>
               <p>if the media type of the resource is <code>text/xml</code> or
                     <code>application/xml</code> (see <bibref
                     ref="rfc2376"
                     />), or if it matches
                  the conventions <code>text/*+xml</code> or <code>application/*+xml</code> (see
                     <bibref
                     ref="rfc7303"
                     /> and/or its successors), then the encoding is recognized
                  as specified in <bibref
                     ref="xml"/>, otherwise</p>
            </item>
            <item>
               <p>the <code>$encoding</code> argument is used if present, otherwise</p>
            </item>
            <item>
               <p>the processor <rfc2119>may</rfc2119> use <termref def="implementation-defined"
                     >implementation-defined</termref> heuristics to determine the likely encoding,
                  otherwise</p>
            </item>
            <item>
               <p>UTF-8 is assumed.</p>
            </item>
         </olist>
         <p>The result of the function is a string containing the string representation of the
            resource retrieved using the URI.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="UT" code="1170"
               /> if the <code>$href</code> argument
            contains a fragment identifier, <phrase>or if it cannot be resolved
            to an absolute URI (for example, because the base-URI property in the static context is absent), 
            </phrase>or if it cannot be used to retrieve the string
            representation of a resource. </p>
         <p diff="chg" at="2023-06-12">A dynamic error is raised <errorref class="UT" code="1190"
            /> if the value of the
            <code>$encoding</code> argument is not a valid encoding name, if the
            processor does not support the specified encoding, if
            the string representation of the retrieved resource contains octets that cannot be
            decoded into Unicode <termref def="character">characters</termref> using the specified
            encoding, or if the resulting characters are not
            <termref def="dt-permitted-character">permitted character</termref>.</p>
         <p>A dynamic error is raised <errorref class="UT" code="1200"
            /> if <code>$encoding</code>
            is absent and the processor cannot infer the
            encoding using external information and the encoding is not UTF-8.</p>
      </fos:errors>

      <fos:notes>
         <p>If it is appropriate to use a base URI other than the dynamic base URI (for example,
            when resolving a relative URI reference read from a source document) then it is
            advisable to resolve the relative URI reference using the <code>fn:resolve-uri</code>
            function before passing it to the <code>fn:unparsed-text</code> function.</p>
         <p>There is no essential relationship between the sets of URIs accepted by the two
            functions <code>fn:unparsed-text</code> and <code>fn:doc</code> (a URI accepted by one
            may or may not be accepted by the other), and if a URI is accepted by both there is no
            essential relationship between the results (different resource representations are
            permitted by the architecture of the web).</p>
         <p>There are no constraints on the MIME type of the resource.</p>


         <p>The fact that the resolution of URIs is defined by a mapping in the dynamic context
            means that in effect, various aspects of the behavior of this function are <termref
               def="implementation-defined"
            >implementation-defined</termref>. Implementations may provide external configuration
            options that allow any aspect of the processing to be controlled by the user. In
            particular:</p>
         <ulist>
            <item>
               <p>The set of URI schemes that the implementation recognizes is
                  implementation-defined. Implementations may allow the mapping of URIs to resources
                  to be configured by the user, using mechanisms such as catalogs or user-written
                  URI handlers.</p>
            </item>
            <item>
               <p>The handling of media types is implementation-defined.</p>
            </item>

            <item>
               <p>Implementations may provide user-defined error handling options that allow
                  processing to continue following an error in retrieving a resource, or in reading
                  its content. When errors have been handled in this way, the function may return a
                  fallback document provided by the error handler.</p>
            </item>
            <item>
               <p>Implementations may provide user options that relax the requirement for the
                  function to return deterministic results.</p>
            </item>
         </ulist>

         <p>The rules for determining the encoding are chosen for consistency with <bibref
               ref="xinclude"
            />. Files with an XML media type are treated specially because there
            are use cases for this function where the retrieved text is to be included as unparsed
            XML within a CDATA section of a containing document, and because processors are likely
            to be able to reuse the code that performs encoding detection for XML external
            entities.</p>
         <p>If the text file contains characters such as <code>&lt;</code> and <code>&amp;</code>,
            these will typically be output as <code>&amp;lt;</code> and <code>&amp;amp;</code> if
            the string is serialized as XML or HTML. If these characters actually represent markup
            (for example, if the text file contains HTML), then an XSLT stylesheet can attempt to
            write them as markup to the output file using the <code>disable-output-escaping</code>
            attribute of the <code>xsl:value-of</code> instruction. Note, however, that XSLT
            implementations are not required to support this feature.</p>
      </fos:notes>



      <!--
      <imp-def-feature>The set of encodings recognized by the
         <function>unparsed-text</function> function, other than <code>utf-8</code> and
         <code>utf-16</code>, is <termref def="implementation-defined"
            >implementation-defined</termref>.</imp-def-feature>
      
      <imp-def-feature>If no encoding is specified on a call to the
         <function>unparsed-text</function> function, the processor
         <rfc2119>may</rfc2119> use <termref def="implementation-defined"
            >implementation-defined</termref> heuristics to determine the likely
         encoding.</imp-def-feature>-->

      <fos:examples>
         <fos:example>
            <p>This XSLT example attempts to read a file containing “boilerplate” HTML and copy it
               directly to the serialized output file:</p>
            <eg xml:space="preserve"><![CDATA[<xsl:output method="html"/>

<xsl:template match="/">
  <xsl:value-of select="unparsed-text('header.html', 'iso-8859-1')"
                disable-output-escaping="yes"/>
  <xsl:apply-templates/>
  <xsl:value-of select="unparsed-text('footer.html', 'iso-8859-1')"
                disable-output-escaping="yes"/>
</xsl:template>
]]></eg>
         </fos:example>
      </fos:examples>

   </fos:function>
   <fos:function name="unparsed-text-lines" prefix="fn">
      <fos:signatures>
         <fos:proto name="unparsed-text-lines" return-type="xs:string*">
            <fos:arg name="href" type="xs:string?"/>
            <fos:arg name="encoding" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>The <code>fn:unparsed-text-lines</code> function reads an external resource (for
            example, a file) and returns its contents as a sequence of strings, one for each line of
            text in the string representation of the resource.</p>
      </fos:summary>
      <fos:rules>
         <p>The <code>unparsed-text-lines</code> function reads an external resource (for example, a
            file) and returns its string representation as a sequence of strings, separated at
            newline boundaries. </p>
         <p>The result of the single-argument function is the same as the result of the expression
               <code>fn:tokenize(fn:unparsed-text($href), '\r\n|\r|\n')[not(position()=last() and
               .='')]</code>. The result of the two-argument function is the same as the result of
            the expression <code>fn:tokenize(fn:unparsed-text($href, $encoding),
               '\r\n|\r|\n')[not(position()=last() and .='')]</code>. </p>
         <p>The result is thus a sequence of strings containing the text of the resource retrieved
            using the URI, each string representing one line of text. Lines are separated by one of
            the sequences x0A, x0D, or x0Dx0A. The characters representing the newline are not
            included in the returned strings. If there are two adjacent newline sequences, a
            zero-length string will be returned to represent the empty line; but if the external
            resource ends with the sequence x0A, x0D, or x0Dx0A, the result will be as if this final
            line ending were not present.</p>
      </fos:rules>
      <fos:errors>
         <p>Error conditions are the same as for the <code>fn:unparsed-text</code> function.</p>

      </fos:errors>

      <fos:notes>
         <p>See the notes for <code>fn:unparsed-text</code>.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="unparsed-text-available" prefix="fn">
      <fos:signatures>
         <fos:proto name="unparsed-text-available" return-type="xs:boolean">
            <fos:arg name="href" type="xs:string?"/>
            <fos:arg name="encoding" type="xs:string?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Because errors in evaluating the <code>fn:unparsed-text</code> function are
            non-recoverable, these two functions are provided to allow an application to determine
            whether a call with particular arguments would succeed.</p>
      </fos:summary>
      <fos:rules>
         <p>The <code>fn:unparsed-text-available</code> function determines whether a call
            on the <code>fn:unparsed-text</code> function with identical arguments would
            return a string.</p>
         <p>If the first argument is an empty sequence, the function returns <code>false</code>. </p>
         <p>In other cases, the function returns <code>true</code> if a call on
               <code>fn:unparsed-text</code> with the same arguments would succeed, and
            <code>false</code> if a call on <code>fn:unparsed-text</code> with the same arguments would
            fail with a non-recoverable dynamic error.</p>
         <p>The functions <code>fn:unparsed-text</code> and
               <code>fn:unparsed-text-available</code> have the same requirement for
               <termref
               def="dt-deterministic"
               >determinism</termref> as the functions
               <code>fn:doc</code> and <code>fn:doc-available</code>. This means that unless the
            user has explicitly stated a requirement for a reduced level of determinism, either of
            these functions if called twice with the same arguments during the course of a
            transformation <rfc2119>must</rfc2119> return the same results each time; moreover, the
            results of a call on <code>fn:unparsed-text-available</code>
            <rfc2119>must</rfc2119> be consistent with the results of a subsequent call on
               <code>unparsed-text</code> with the same arguments.</p>
      </fos:rules>
      <fos:notes>
         <p>This requires that the <code>fn:unparsed-text-available</code> function should
            actually attempt to read the resource identified by the URI, and check that it is
            correctly encoded and contains no characters that are invalid in XML. Implementations
            may avoid the cost of repeating these checks for example by caching the validated
            contents of the resource, to anticipate a subsequent call on the
               <code>fn:unparsed-text</code> or <code>fn:unparsed-text-lines</code>
            function. Alternatively, implementations may be able to rewrite an expression such as
               <code>if (unparsed-text-available(A)) then unparsed-text(A) else ...</code> to
            generate a single call internally.</p>
         <p>Since the function <code>fn:unparsed-text-lines</code> succeeds or fails under
            exactly the same circumstances as <code>fn:unparsed-text</code>, the
               <code>fn:unparsed-text-available</code> function may equally be used to test
            whether a call on <code>fn:unparsed-text-lines</code> would succeed.</p>

      </fos:notes>

   </fos:function>
   <fos:function name="environment-variable" prefix="fn">
      <fos:signatures>
         <fos:proto name="environment-variable" return-type="xs:string?">
            <fos:arg name="name" type="xs:string"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="environment-variables">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the value of a system environment variable, if it exists.</p>
      </fos:summary>
      <fos:rules>
         <p>The set of available <xtermref spec="XP31" ref="dt-environment-variables"
               >environment
               variables</xtermref> is a set of (name, value) pairs forming part of the dynamic
            context, in which the name is unique within the set of pairs. The name and value are
            arbitrary strings.</p>
         <p>If the <code>$name</code> argument matches the name of one of these pairs, the function
            returns the corresponding value.</p>
         <p>If there is no environment variable with a matching name, the function returns the empty
            sequence.</p>
         <p>The collation used for matching names is <termref def="implementation-defined"
               >implementation-defined</termref>, but
            must be the same as the collation used to ensure that the names of all environment
            variables are unique.</p>
         <p>The function is <termref def="dt-deterministic"
               >deterministic</termref>, which means
            that if it is called several times within the same <termref
               def="execution-scope"
            >execution scope</termref>, with the same arguments, it must return the same
            result.</p>
      </fos:rules>
      <fos:notes>
         <p>On many platforms, the term “environment variable” has a natural meaning in terms of
            facilities provided by the operating system. This interpretation of the concept does not
            exclude other interpretations, such as a mapping to a set of configuration parameters in
            a database system.</p>
         <p>Environment variable names are usually case sensitive. Names are usually of the form
               <code>(letter|_) (letter|_|digit)*</code>, but this varies by platform.</p>
         <p>On some platforms, there may sometimes be multiple environment variables with the same
            name; in this case, it is implementation-dependent as to which is returned; see for
            example <bibref
               ref="POSIX.1-2008"
               /> (Chapter 8, Environment Variables). Implementations
               <rfc2119>may</rfc2119> use prefixes or other naming conventions to disambiguate the
            names.</p>
         <p>The requirement to ensure that the function is deterministic means in practice that the
            implementation must make a snapshot of the environment variables at some time during
            execution, and return values obtained from this snapshot, rather than using live values
            that are subject to change at any time.</p>
         <p>Operating system environment variables may be associated with a particular process,
            while queries and stylesheets may execute across multiple processes (or multiple
            machines). In such circumstances implementations <rfc2119>may</rfc2119> choose to
            provide access to the environment variables associated with the process in which the
            query or stylesheet processing was initiated.</p>
         <p>Security advice: Queries from untrusted sources should not be permitted unrestricted
            access to environment variables. For example, the name of the account under which the
            query is running may be useful information to a would-be intruder. An implementation may
            therefore choose to restrict access to the environment, or may provide a facility to
            make <code>fn:environment-variable</code> always return the empty sequence.</p>

      </fos:notes>
   </fos:function>
   <fos:function name="available-environment-variables" prefix="fn">
      <fos:signatures>
         <fos:proto name="available-environment-variables" return-type="xs:string*"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="environment-variables">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a list of environment variable names that are suitable for passing to
               <code>fn:environment-variable</code>, as a (possibly empty) sequence of strings.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns a sequence of strings, being the names of the environment variables
            in the dynamic context in some <termref
               def="implementation-dependent">implementation-dependent</termref> order.</p>
         <p>The function is <termref def="dt-deterministic"
            >deterministic</termref>: that is, the
            set of available environment variables does not vary during evaluation.</p>
      </fos:rules>
      <fos:notes>
         <p>The function returns a list of strings, containing no duplicates.</p>
         <p>It is intended that the strings in this list should be suitable for passing to
               <code>fn:environment-variable</code>.</p>

         <p>See also the note on security under the definition of the
               <code>fn:environment-variable</code> function. If access to environment variables has
            been disabled, <code>fn:available-environment-variables</code> always returns the empty
            sequence.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="generate-id" prefix="fn">
      <fos:signatures>
         <fos:proto name="generate-id" return-type="xs:string">
            <fos:arg name="node" type="node()?" usage="inspection" default="."/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="0">
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
      </fos:properties>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>This function returns a string that uniquely identifies a given node. </p>
      </fos:summary>
      <fos:rules>
         <p>If the argument is omitted, it defaults to the context item (<code>.</code>).<phrase diff="del" at="2022-11-29"> The
            behavior of the function if the argument is omitted is exactly the same as if the
            context item had been passed as the argument.</phrase></p>
         <p>If the argument is the empty sequence, the result is the zero-length string.</p>
         <p>In other cases, the function returns a string that uniquely identifies a given node.
            <phrase>More formally, it is guaranteed that within a single
             <termref
                  def="execution-scope"
                  >execution scope</termref>, 
               <code>fn:codepoint-equal(fn:generate-id($N), fn:generate-id($M))</code> returns <code>true</code> 
               if and only if <code>($M is $N)</code> returns <code>true</code>.</phrase></p>

         <p>The returned identifier <rfc2119>must</rfc2119> consist of ASCII alphanumeric characters
            and <rfc2119>must</rfc2119> start with an alphabetic character. Thus, the string is
            syntactically an XML name.</p>

      </fos:rules>
      <fos:errors>
         <p>The following errors may be raised when <code>$node</code> is omitted:</p>
         <ulist>
            <item>
               <p>If the context item is <xtermref ref="dt-absent" spec="DM40"
                     >absent</xtermref>,
                  dynamic error <xerrorref spec="XP"
                     class="DY" code="0002" type="dynamic"/></p>
            </item>
            <item>
               <p>If the context item is not a node, type error <xerrorref spec="XP" class="TY"
                     code="0004" type="type"/>.</p>
            </item>
         </ulist>

      </fos:errors>
      <fos:notes>
         <p>An implementation is free to generate an identifier in any convenient way provided that
            it always generates the same identifier for the same node and that different identifiers
            are always generated from different nodes. An implementation is under no obligation to
            generate the same identifiers each time a document is transformed or queried.</p>
         <p>There is no guarantee that a generated unique identifier will be distinct from any
            unique IDs specified in the source document.</p>
         <p>There is no inverse to this function; it is not directly possible to find the node with
            a given generated ID. Of course, it is possible to search a given sequence of nodes
            using an expression such as <code>$nodes[generate-id()=$id]</code>.</p>
         <p>It is advisable, but not required, for implementations to generate IDs that are distinct
            even when compared using a case-blind collation.</p>

      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>The primary use case for this function is to generate hyperlinks. For example, when
               generating HTML, an anchor for a given section <code>$sect</code> can be generated by
               writing (in either XSLT or XQuery):</p>
            <p>
               <code><![CDATA[<a name="{fn:generate-id($sect)}"/>]]></code>
            </p>
            <p>and a link to that section can then be produced with code such as:</p>
            <p>
               <code><![CDATA[see <a href="#{fn:generate-id($sect)}">here</a>]]></code>
            </p>
            <p>Note that anchors generated in this way will not necessarily be the same each time a
               document is republished.</p>

         </fos:example>
         <fos:example>
            <p>Since the keys in a map must be atomic values, it is possible to use generated IDs
               as surrogates for nodes when constructing a map. For example, in some implementations,
               testing whether a node <code>$N</code> is a member of a large node-set <code>$S</code>
               using the expression <code>fn:exists($N intersect $S)</code> may be expensive; there
               may then be performance benefits in creating a map:</p>
            <p>
               <code>let $SMap := map:merge($S!map{fn:generate-id(.) : .})</code>
            </p>
            <p>and then testing for membership of the node-set using:</p>
            <p>
               <code>map:contains($SMap, generate-id($N))</code>
            </p>
         </fos:example>
      </fos:examples>
   </fos:function>
   
   <!--<fos:function name="parcel"  prefix="fn">
      <fos:signatures>
         <fos:proto name="parcel" return-type="item()">
            <fos:arg name="input" type="item()*"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Wraps the input sequence into a single item.</p>
      </fos:summary>
      <fos:rules>
         
         <p>The result of the function is a <i>parcel</i>. A parcel is a single item,
         but its exact form is implementation-dependent. The only guaranteed operations
         that apply to parcels are the <code>fn:unparcel</code> and <code>array:of-members</code>
         functions.</p>
         
         
      </fos:rules>
      
      <fos:notes>
         <p>The main use case for this function is for temporary values used while constructing
         or deconstructing arrays using the <code>array:of-members</code> and <code>array:members</code>
         functions, and higher-level constructs that may be defined in terms of these primitives
         in XSLT or XQuery. The <code>array:of-members</code> function constructs an array from a sequence
         of parcels, and the <code>array:members</code> function does the reverse.</p>
         <p>Applications may also choose to use parcels to represent nested sequences directly,
         without converting these to arrays. However, there are few operations available on parcels
         unless they are first converted to something else.</p>
         <p>Implementations might choose to represent parcels in a number of ways, for example
         as arrays, as zero-arity functions, as singleton maps with a system-defined key value,
         or using some custom type outside the standard type system.</p>
         <p>Implementations might choose to use a more specific result type for the result
         of this function, to improve type-checking of expressions that use the result of the function.</p>
         <p>A more specific result type may be defined in a later version of this specification.</p>
      </fos:notes>
      
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>unparcel(parcel(1 to 5))</fos:expression>
               <fos:result>(1, 2, 3 ,4, 5)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:of-members((parcel(1 to 3), parcel(10 to 13))</fos:expression>
               <fos:result>[(1, 2, 3), (10, 11, 12, 13)]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:of-members(tokenize("A long hot summer") ! parcel((position(), .)))</fos:expression>
               <fos:result>[(1,"A"), (2,"long"), (3,"hot"), (4,"summer")]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>-->
   
   <fos:function name="parse-xml" prefix="fn">
      <fos:signatures>
         <fos:proto name="parse-xml" return-type="document-node(element(*))?">
            <fos:arg name="value" type="xs:string?" example="'&lt;a/&gt;'"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic</fos:property>
         <fos:property dependency="static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>This function takes as input an XML document represented as a string, and returns the
            document node at the root of an XDM tree representing the parsed document.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>The precise process used to construct the XDM instance is <termref
               def="implementation-defined"
            >implementation-defined</termref>. In particular, it is implementation-defined whether
            DTD and/or schema validation is invoked, and it is implementation-defined whether an XML
            1.0 or XML 1.1 parser is used.</p>
         <p>The <term>static base URI</term> property from the static context of the <code>fn:parse-xml</code>
            function call is used both as the base URI used by the XML parser to resolve relative
            entity references within the document, and as the base URI of the document node that is
            returned.</p>
         <p>The document URI of the returned node is <xtermref ref="dt-absent" spec="DM40">absent</xtermref>.</p>
         <p>The function is <emph>not</emph>
            <termref def="dt-deterministic"
               >deterministic</termref>: that is, if the function is called
            twice with the same arguments, it is <termref
               def="implementation-dependent"
            >implementation-dependent</termref> whether the same node is returned on both
            occasions.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DC" code="0006"
               /> if the content of
               <code>$value</code> is not a well-formed and namespace-well-formed XML document.</p>
         <p>A dynamic error is raised <errorref class="DC" code="0006"
               /> if DTD-based validation is
            carried out and the content of <code>$value</code> is not valid against its DTD.</p>
      </fos:errors>
      <fos:notes>
         <p>Since the XML document is presented to the parser as a string, rather than as a sequence
            of octets, the encoding specified within the XML declaration has no meaning. If the XML
            parser accepts input only in the form of a sequence of octets, then the processor must
            ensure that the string is encoded as octets in a way that is consistent with rules used
            by the XML parser to detect the encoding.</p>
         <p>The primary use case for this function is to handle input documents that contain nested
            XML documents embedded within CDATA sections. Since the content of the CDATA section are
            exposed as text, the receiving query or stylesheet may pass this text to the
               <code>fn:parse-xml</code> function to create a tree representation of the nested
            document.</p>
         <p>Similarly, nested XML within comments is sometimes encountered, and lexical XML is
            sometimes returned by extension functions, for example, functions that access web
            services or read from databases.</p>
         <p>A use case arises in XSLT where there is a need to preprocess an input document before
            parsing. For example, an application might wish to edit the document to remove its
            DOCTYPE declaration. This can be done by reading the raw text using the
               <code>fn:unparsed-text</code> function, editing the resulting string, and then
            passing it to the <code>fn:parse-xml</code> function.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>The expression <code>fn:parse-xml("&lt;alpha>abcd&lt;/alpha>")</code> returns a newly
               created document node, having an <code>alpha</code> element as its only child; the
                  <code>alpha</code> element in turn is the parent of a text node whose string value
               is <code>"abcd"</code>.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="parse-xml-fragment" prefix="fn">
      <fos:signatures>
         <fos:proto name="parse-xml-fragment" return-type="document-node()?">
            <fos:arg name="value" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic</fos:property>
         <fos:property dependency="static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>This function takes as input an XML external entity represented as a string, and returns
            the document node at the root of an XDM tree representing the parsed document
            fragment.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>The input must be a namespace-well-formed external general parsed entity. More
            specifically, it must be a string conforming to the production rule <xnt
               spec="XML" ref="NT-extParsedEnt">extParsedEnt</xnt> in <bibref ref="xml"
               />, it must contain
            no entity references other than references to predefined entities, and it must satisfy
            all the rules of <bibref
               ref="xml-names"
            /> for namespace-well-formed documents with
            the exception that the rule requiring it to be a well-formed document is replaced by the
            rule requiring it to be a well-formed external general parsed entity.</p>
         <p>The string is parsed to form a sequence of nodes which become children of the new
            document node, in the same way as the content of any element is converted into a
            sequence of children for the resulting element node.</p>
         <p>Schema validation is <emph>not</emph> invoked, which means that the nodes in the
            returned document will all be untyped.</p>
         <p>The precise process used to construct the XDM instance is <termref
               def="implementation-defined"
            >implementation-defined</termref>. In particular, it is implementation-defined whether
            an XML 1.0 or XML 1.1 parser is used.</p>
         <p>The <term>static base URI</term> from the static context of the <code>fn:parse-xml-fragment</code>
            function call is used as the base URI of the document node that is returned.</p>
         <p>The document URI of the returned node is <xtermref ref="dt-absent" spec="DM40">absent</xtermref>.</p>
         <p>The function is <emph>not</emph>
            <termref def="dt-deterministic"
               >deterministic</termref>: that is, if the function is called
            twice with the same arguments, it is <termref
               def="implementation-dependent"
            >implementation-dependent</termref> whether the same node is returned on both
            occasions.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DC" code="0006"
               /> if the content of
               <code>$value</code> is not a well-formed external general parsed entity, if it contains
            entity references other than references to predefined entities, or if a document that
            incorporates this well-formed parsed entity would not be namespace-well-formed.</p>
      </fos:errors>
      <fos:notes>
         <p>See also the notes for the <code>fn:parse-xml</code> function.</p>
         <p>The main differences between <code>fn:parse-xml</code> and
               <code>fn:parse-xml-fragment</code> are that for <code>fn:parse-xml</code>, the
            children of the resulting document node must contain exactly one element node and no
            text nodes, wheras for <code>fn:parse-xml-fragment</code>, the resulting document node
            can have any number (including zero) of element and text nodes among its children. An
            additional difference is that the <emph>text declaration</emph> at the start of an
            external entity has slightly different syntax from the <emph>XML declaration</emph> at
            the start of a well-formed document.</p>
         <p>Note that all whitespace outside the <emph>text declaration</emph> is significant,
            including whitespace that precedes the first element node.</p>
         <p>One use case for this function is to handle XML fragments stored in databases, which
            frequently allow zero-or-more top level element nodes. Another use case is to parse the
            contents of a <code>CDATA</code> section embedded within another XML document.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>The expression
                  <code>fn:parse-xml-fragment("&lt;alpha>abcd&lt;/alpha>&lt;beta>abcd&lt;/beta>")</code>
               returns a newly created document node, having two elements named <code>alpha</code>
               and <code>beta</code> as its children; each of these elements in turn is the parent
               of a text node.</p>
            <p>The expression <code>fn:parse-xml-fragment("He was &lt;i>so&lt;/i> kind")</code>
               returns a newly created document node having three children: a text node whose string
               value is <code>"He was "</code>, an element node named <code>i</code> having a child
               text node with string value <code>"so"</code>, and a text node whose string value is
                  <code>" kind"</code>.</p>
            <p>The expression <code>fn:parse-xml-fragment("")</code> returns a document node having
               no children.</p>
            <p>The expression <code>fn:parse-xml-fragment(" ")</code> returns a document node whose
               children comprise a single text node whose string value is a single space.</p>
            <p>The expression <code>fn:parse-xml-fragment('&lt;?xml version="1.0" encoding="utf8"
                  standalone="yes"?>&lt;a/>')</code> results in a dynamic error <errorref
                  class="DC" code="0006"
                  /> because the <code>standalone</code> keyword is not permitted in the text
               declaration that appears at the start of an external general parsed entity. (Thus, it
               is not the case that any input accepted by the <code>fn:parse-xml</code> function
               will also be accepted by <code>fn:parse-xml-fragment</code>.)</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="serialize" prefix="fn">
      <fos:signatures>
         <fos:proto name="serialize" return-type="xs:string">
            <fos:arg name="input" type="item()*" usage="absorption"/>
            <fos:arg name="options" type="item()?" usage="absorption" default="()" example="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>This function serializes the supplied input sequence <code>$input</code> as described in
               <bibref
               ref="xslt-xquery-serialization-31"
            />, returning the serialized representation
            of the sequence as a string.</p>
      </fos:summary>
      <fos:rules>
         <p>The value of the first argument <code>$input</code> acts as the input sequence to the serialization process,
            which starts with sequence normalization.</p>

         <p>The second argument <code>$options</code>, if present, provides serialization parameters. These may be supplied in either 
         of two forms:</p>

         <olist>
            <item>
               <p>As an <code>output:serialization-parameters</code>
               element, having the format described in <xspecref
                     spec="SER31" ref="serparams-in-xdm-instance"
                     />. In this case the type of the supplied
               argument must match the required type <code>element(output:serialization-parameters)</code>.</p>
            </item>
            <item>
               <p>As a map. In this case the type of the supplied argument must match the required type <code>map(*)</code></p>
            </item>
         </olist>

         <p>The single-argument version of this function has the same effect as the two-argument
            version called with <code>$options</code> set to an empty sequence. This in turn is the
            same as the effect of passing an <code>output:serialization-parameters</code> element
            with no child elements.</p>

         <p>The final stage of serialization, that is, encoding, is skipped. If the serializer does
            not allow this phase to be skipped, then the sequence of octets returned by the
            serializer is decoded into a string by reversing the character encoding performed in the
            final stage.</p>

         <p>If the second argument is omitted, or is supplied in the form of an <code>output:serialization-parameters</code>
         element, then the values of any serialization parameters that are not explicitly specified is <termref
               def="implementation-defined"
            >implementation-defined</termref>,
         and may depend on the context.</p>

         <p>If the second argument is supplied as a map, then the <termref
               def="option-parameter-conventions"
            >option parameter conventions</termref>
         apply. In this case:</p>

         <olist>
            <item>
               <p>Each entry in the map defines one serialization parameter.</p>
            </item>
            <item>
               <p>The key of the entry is an <code>xs:string</code> value in the cases of parameter names defined in these specifications, or an
            <code>xs:QName</code> (with non-absent namespace) in the case of implementation-defined serialization parameters.</p>
            </item>
            <item>
               <p>The required type of each parameter, and its default value, are defined by the following table. The default
            value is used when the map contains no entry for the parameter in question, and also when an entry is present, with the
            empty sequence as its value. The table also indicates how the value of the map entry is to be interpreted in cases
            where further explanation is needed.</p>
            </item>
         </olist>
         <!--<item><p>The value part of the entry has a required type defined by the following rules, which are organized according to the type
               defined for the parameter in the schema for serialization parameters:</p>
               <olist>
                  <item><p>Where the type is <code>yes-no-type</code>, then an <code>xs:boolean</code> value
                  where <code>true</code> represents <code>"yes"</code> and <code>false</code> represents <code>"no"</code>.</p></item>
                  <item><p>Where the type is <code>yes-no-omit-type</code>, then an optional <code>xs:boolean</code> value
                     where <code>true</code> represents <code>"yes"</code>, <code>false</code> represents <code>"no"</code>, and the empty sequence represents <code>"omit"</code>.</p></item>
                  <item><p>For any other type derived from <code>xs:string</code>, an instance of <code>xs:string</code> that is
                  castable to the required type.</p></item>
                  <item><p>For the union type <code>method-type</code>, an instance of either <code>xs:string</code> or <code>xs:QName</code>
                  as appropriate.</p></item>
                  <item><p>For <code>decimal-param-type</code>, an instance of <code>xs:decimal</code>.</p></item>
                  <item><p>For <code>QNames-type</code>, either a sequence or an array of <code>xs:QName</code> values.</p></item>
                  <item><p>For the <code>use-character-maps</code> parameter, a map, whose keys are the characters to be mapped (as <code>xs:string</code> instances), and whose
                     corresponding values are the strings to be substituted for these characters. The <termref def="option-parameter-conventions">option parameter conventions</termref>
                  apply recursively to this nested map.</p></item>
               </olist>
               <note><p>If the supplied value is of the wrong type for the particular parameter, for example if the value of <code>indent</code>
                  is a string rather than a boolean, then as defined by the <termref def="option-parameter-conventions">option parameter conventions</termref>,
                  a type error <xerrorref spec="XP" class="TY" code="0004"/> is raised. 
                  If the value is of the correct type, but does not satisfy the rules for that
                  parameter defined in <bibref ref="xslt-xquery-serialization-31"/>, then a dynamic error 
                  <xerrorref spec="SER31" class="PM" code="0016"/> is raised.
               </p></note>
            </item>
            <item><p>If no entry is present in the map for a particular serialization parameter name, then that parameter takes a default value as defined in the
            following table:</p>-->
         <table role="no-code-break data">
            <thead>
               <tr>
                  <th>Parameter</th>
                  <th>Required type</th>
                  <th>Interpretation</th>
                  <th>Default Value</th>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <td>
                     <code>allow-duplicate-names</code>
                  </td>
                  <td>
                     <code>xs:boolean?</code>
                  </td>
                  <td><code>true()</code> means <code>"yes"</code>, <code>false()</code> means <code>"no"</code></td>
                  <td>
                     <code>no</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>byte-order-mark</code>
                  </td>
                  <td>
                     <code>xs:boolean?</code>
                  </td>
                  <td><code>true()</code> means <code>"yes"</code>, <code>false()</code> means <code>"no"</code></td>
                  <td>
                     <code>no</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>cdata-section-elements</code>
                  </td>
                  <td>
                     <code>xs:QName*</code>
                  </td>
                  <td/>
                  <td>
                     <code>()</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>doctype-public</code>
                  </td>
                  <td>
                     <code>xs:string?</code>
                  </td>
                  <td>Zero-length string and <code>()</code> both represent <code>"absent"</code></td>
                  <td>absent</td>
               </tr>
               <tr>
                  <td>
                     <code>doctype-system</code>
                  </td>
                  <td>
                     <code>xs:string?</code>
                  </td>
                  <td>Zero-length string and <code>()</code> both represent <code>"absent"</code></td>
                  <td>absent</td>
               </tr>
               <tr>
                  <td>
                     <code>encoding</code>
                  </td>
                  <td>
                     <code>xs:string?</code>
                  </td>
                  <td/>
                  <td>
                     <code>utf-8</code>
                  </td>
               </tr>
               <tr diff="add" at="2023-03-31">
                  <td>
                     <code>escape-solidus</code>
                  </td>
                  <td>
                     <code>xs:boolean?</code>
                  </td>
                  <td><code>true()</code> means <code>"yes"</code>, <code>false()</code> means <code>"no"</code></td>
                  <td>
                     <code>yes</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>escape-uri-attributes</code>
                  </td>
                  <td>
                     <code>xs:boolean?</code>
                  </td>
                  <td><code>true()</code> means <code>"yes"</code>, <code>false()</code> means <code>"no"</code></td>
                  <td>
                     <code>yes</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>html-version</code>
                  </td>
                  <td>
                     <code>xs:decimal?</code>
                  </td>
                  <td/>
                  <td>
                     <code>5</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>include-content-type</code>
                  </td>
                  <td>
                     <code>xs:boolean?</code>
                  </td>
                  <td><code>true()</code> means <code>"yes"</code>, <code>false()</code> means <code>"no"</code></td>
                  <td>
                     <code>yes</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>indent</code>
                  </td>
                  <td>
                     <code>xs:boolean?</code>
                  </td>
                  <td><code>true()</code> means <code>"yes"</code>, <code>false()</code> means <code>"no"</code></td>
                  <td>
                     <code>no</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>item-separator</code>
                  </td>
                  <td>
                     <code>xs:string?</code>
                  </td>
                  <td/>
                  <td>absent</td>
               </tr>
               <tr>
                  <td>
                     <code>json-node-output-method</code>
                  </td>
                  <td>
                     <code>union(xs:string, xs:QName)?</code>
                  </td>
                  <td>See Notes 1, 2</td>
                  <td>
                     <code>xml</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>media-type</code>
                  </td>
                  <td>
                     <code>xs:string?</code>
                  </td>
                  <td/>
                  <td>(a media type suitable for the chosen <code>method</code>)</td>
               </tr>
               <tr>
                  <td>
                     <code>method</code>
                  </td>
                  <td>
                     <code>union(xs:string, xs:QName)?</code>
                  </td>
                  <td>See Notes 1, 2</td>
                  <td>
                     <code>xml</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>normalization-form</code>
                  </td>
                  <td>
                     <code>xs:string?</code>
                  </td>
                  <td/>
                  <td>
                     <code>none</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>omit-xml-declaration</code>
                  </td>
                  <td>
                     <code>xs:boolean?</code>
                  </td>
                  <td><code>true()</code> means <code>"yes"</code>, <code>false()</code> means <code>"no"</code></td>
                  <td>
                     <code>yes</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>standalone</code>
                  </td>
                  <td>
                     <code>xs:boolean?</code>
                  </td>
                  <td><code>true()</code> means <code>"yes"</code>, <code>false()</code> means <code>"no"</code>, <code>()</code> means <code>"omit"</code></td>
                  <td>
                     <code>omit</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>suppress-indentation</code>
                  </td>
                  <td>
                     <code>xs:QName*</code>
                  </td>
                  <td/>
                  <td>
                     <code>()</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>undeclare-prefixes</code>
                  </td>
                  <td>
                     <code>xs:boolean?</code>
                  </td>
                  <td><code>true()</code> means <code>"yes"</code>, <code>false()</code> means <code>"no"</code></td>
                  <td>
                     <code>no</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>use-character-maps</code>
                  </td>
                  <td>
                     <code>map(xs:string, xs:string)?</code>
                  </td>
                  <td>See Note 3</td>
                  <td>
                     <code>map{}</code>
                  </td>
               </tr>
               <tr>
                  <td>
                     <code>version</code>
                  </td>
                  <td>
                     <code>xs:string?</code>
                  </td>
                  <td/>
                  <td>
                     <code>1.0</code>
                  </td>
               </tr>
            </tbody>
         </table>

         <p>Notes to the table:</p>

         <olist>
            <item>
               <p>The notation <code>union(A, B)</code> is used to represent a union type whose member types are <code>A</code>
            and <code>B</code>.</p>
            </item>
            <item>
               <p>If an <code>xs:QName</code> is supplied <phrase>for the <code>method</code> or <code>json-node-output-method</code> 
               options,</phrase> then it must have a non-absent namespace URI. This
            means that system-defined serialization methods such as <code>xml</code> and <code>json</code>
            are defined as strings, not as <code>xs:QName</code> values.</p>
            </item>
            <item>
               <p><phrase>For the <code>use-character-maps</code> option</phrase>, the value is a map, whose keys 
               are the characters to be mapped (as <code>xs:string</code> instances),
            and whose corresponding values are the strings to be substituted for these characters. 
            </p>
            </item>
         </olist>

      </fos:rules>
      <fos:errors>
         <p>A type error <xerrorref spec="XP" class="TY" code="0004"
               /> occurs if the <code>$options</code> argument
            is present and does not match either of the types <code>element(output:serialization-parameters)?</code>
         or <code>map(*)</code>.</p>
         <note>
            <p>This is defined as a type error so that it can be enforced via the function signature by implementations
         that generalize the type system in a suitable way.</p>
         </note>
         <p>If the host language makes serialization an optional feature and the implementation does
            not support serialization, then a dynamic error <errorref
               class="DC" code="0010"/> is
            raised.</p>
         <p>When the second argument is supplied as a map, 
            and the supplied value is of the wrong type for the particular parameter, for example if the value of <code>indent</code>
         is a string rather than a boolean, then as defined by the <termref
               def="option-parameter-conventions"
               >option parameter conventions</termref>,
         a type error <xerrorref spec="XP"
               class="TY" code="0004"
               /> is raised. 
         If the value is of the correct type, but does not satisfy the rules for that
         parameter defined in <bibref
               ref="xslt-xquery-serialization-31"/>, then a dynamic error 
         <xerrorref
               spec="SER31" class="PM" code="0016"
               /> is raised. (For example, this occurs if the map supplied to
         <code>use-character-maps</code> includes a key that is a string whose length is not one (1)).</p>
         <p>If any serialization error occurs, including the detection of an invalid value for a
            serialization parameter as described above, this results in the <code>fn:serialize</code> call failing with
            a dynamic error.</p>
      </fos:errors>
      <fos:notes>
         <p>One use case for this function arises when there is a need to construct an XML document
            containing nested XML documents within a CDATA section (or on occasions within a
            comment). See <code>fn:parse-xml</code> for further details.</p>
         <p>Another use case arises when there is a need to call an extension function that expects
            a lexical XML document as input.</p>
         <p>Another use case for this function is serializing instances of the data model into a human
            readable format for the purposes of debugging. Using the <xspecref
               spec="SER31" ref="adaptive-output"
            /> by specifying it as the output method defined in the second argument via 
            <code>output:serialization-parameters</code>, allows for serializing any valid
            XDM instance without raising a serialization error.</p>
         <p>There are also use cases where the application wants to post-process the output of a
            query or transformation, for example by adding an internal DTD subset, or by inserting
            proprietary markup delimiters such as the <code>&lt;% ... %&gt;</code> used by some
            templating languages.</p>
         <p>The ability to specify the serialization parameters in an <code>output:serialization-parameters</code>
         element provides backwards compatibility with the 3.0 version of this specification; the ability to
         use a map takes advantage of new features in the 3.1 version. The default parameter values are
         implementation-defined when an <code>output:serialization-parameters</code>
            element is used (or when the argument is omitted), but are fixed by this specification in the
         case where a map (including an empty map) is supplied for the argument.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>Given the variables:</p>
         </fos:example>
         <fos:variable name="params" as="element()" id="v-serialize-params"><![CDATA[
<output:serialization-parameters 
        xmlns:output="http://www.w3.org/2010/xslt-xquery-serialization">
  <output:omit-xml-declaration value="yes"/>
</output:serialization-parameters>]]>
         </fos:variable>
         <fos:variable name="data" as="element()" id="v-serialize-data"><![CDATA[
<a b="3"/>]]>
         </fos:variable>
         <fos:example>
            <p>The following call might produce the output shown:</p>
         </fos:example>
         <fos:example>
            <fos:test use="v-serialize-data v-serialize-params">
               <fos:expression><![CDATA[serialize($data, $params)]]></fos:expression>
               <fos:result><![CDATA['<a b="3"/>']]></fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The following call would also produce the output shown (though the second argument could equally well be supplied
               as an empty map (<code>map{}</code>), since both parameters are given their default values):</p>
         </fos:example>
         <fos:example>
            <fos:test use="v-serialize-data">
               <fos:expression><eg><![CDATA[serialize(
  $data,
  map { "method": "xml", "omit-xml-declaration": true() }
)]]></eg></fos:expression>
               <fos:result><![CDATA['<a b="3"/>']]></fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The expression <code>fn:serialize(map{"a":"AB", "b": "BC"}, map{"method":"adaptive"})</code> returns <code>"map{"a":"AB","b":"BC"}"</code></p>
            <p>The expression <code>fn:serialize(array{"a",3, attribute test {"true"}}, map{"method":"adaptive"})</code> returns <code>"["a",3,test="true"]"</code></p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="parse-html" prefix="fn">
      <fos:signatures>
         <fos:proto name="parse-html" return-type="document-node(element(*:html))?">
            <fos:arg name="html" type="union(xs:string, xs:hexBinary, xs:base64Binary)?"/>
            <fos:arg name="options" type-ref="parse-html-options"
                     default="map{
                                 &quot;method&quot;:&quot;html&quot;,
                                 &quot;html-version&quot;:&quot;5&quot;,
                                 &quot;encoding&quot;:&quot;utf-8&quot;
                              }"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>This function takes as input an HTML document represented as a string, and returns the
            document node at the root of an XDM tree representing the parsed document.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$html</code> is the empty sequence, the function returns the empty sequence.</p>
         <p>The <code>method</code> key of <code>$options</code> specifies the parsing algorithm,
            application, or library to use to construct the XDM nodes from the parsed HTML document.</p>
         <p>If the type of <code>$html</code> is an <code>xs:string</code>, the encoding is determined
            in a way consistent with <bibref ref="html5"/> section 13.2.3.1, <emph>Parsing with a
            known character encoding</emph>. The specific character encoding is
            <termref def="implementation-dependent"/>.</p>
         <note>
            <p>The HTML specification uses this for when the encoding of the input byte stream is
               known for certain, such as when the byte stream has already been decoded.</p>
            <p>This means that an implementation should set the encoding to the encoding of the
               underlying string representation. For example, a Java program could specify the
               encoding as UTF-16. If the implementation supports passing native string values
               then that can be used instead of using a byte stream and encoding.</p>
            <p>Be aware that the WHATWG Encoding specification defines the ISO 8859-1 (latin1)
               and ASCII encodings as aliases of the windows-1252 encoding.</p>
         </note>
         <p>If the type of <code>$html</code> is a sequence of octets (<code>xs:hexBinary</code> or
            <code>xs:base64Binary</code>), the encoding is determined in a way consistent with
            <bibref ref="html5"/> section 13.2.3.2, <emph>Determining the character encoding</emph>.
            The <code>encoding</code> key of <code>$options</code> is used in step 2 as the user
            instructing the user agent to override the document’s character encoding with the
            specified encoding.</p>
         <p>For any given <code>method</code> key of <code>$options</code> the implementation must
            use a parser and validator consistent with the <code>html-version</code> key of
            <code>$options</code>.</p>
         <table border="0" role="data">
            <caption>Valid method and html version combinations</caption>
            <thead>
               <tr>
                  <th>method</th>
                  <th>html-version</th>
                  <th>Description</th>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <td>html</td>
                  <td>3, 3.2, 4, 4.01</td>
                  <td>An <termref def="implementation-dependent"/> parsing algorithm, tree construction,
                     and validation consistent with the specified HTML version.</td>
               </tr>
               <tr>
                  <td>html</td>
                  <td>5, 5.0, 5.1, 5.2</td>
                  <td>An HTML5 conformant parsing algorithm, tree construction, and validation consistent
                     with the specified HTML version. An implementation may choose to use <code>LS</code>
                     for all these HTML versions.</td>
               </tr>
               <tr>
                  <td>html</td>
                  <td>LS</td>
                  <td>A parsing algorithm, tree construction, and validation consistent with the
                     <bibref ref="html5"/>.</td>
               </tr>
               <tr>
                  <td>xhtml</td>
                  <td>1.0, 1.1</td>
                  <td>
                     <p>An implementation may choose to use an XML parser to directly construct the
                        XDM nodes, and then use an <termref def="implementation-dependent"/> validation
                        mechanism (such as DTD or XMLSchema) to validate the XHTML DOM tree.</p>
                     <p>An implementation may also choose to use <bibref ref="html5"/> for all these
                        XHTML versions, or some other HTML parser capable of processing XHTML
                        documents.</p>
                  </td>
               </tr>
               <tr>
                  <td>*</td>
                  <td>*</td>
                  <td>
                     <p>An <termref def="implementation-defined"/> parsing algorithm, tree construction,
                     and validation consistent with the specified HTML version.</p>
                     <example>
                        <p>This allows an implementation to provide their own method, html-version
                           combinations. For example, an implementation could use the values
                           <code>"whatwg"</code> and <code>"2023-01-28"</code> for an implementation of the WHATWG HTML Living
                           Standard at a given date.</p>
                     </example>
                  </td>
               </tr>
            </tbody>
         </table>
         <p>The <specref ref="html"/> section defines a mapping between the constructed HTML DOM
            tree and an XDM tree. It is <termref def="implementation-dependent"/> how this mapping
            occurs.</p>
         <p>The function is <emph>not</emph> <termref def="dt-deterministic">deterministic</termref>:
            that is, if the function is called twice with the same arguments, it is
            <termref def="implementation-dependent"/> whether the same node is returned on both
            occasions.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="DC" code="0011"/> if the content of
            <code>$html</code> is not a well-formed HTML document.</p>
         <p>A dynamic error is raised <errorref class="DC" code="0012"/> if the <code>method</code>
            key of <code>$options</code> is not supported by the implementation.</p>
         <p>A dynamic error is raised <errorref class="DC" code="0012"/> if a key passed to
            <code>$options</code>, or the value of that key, is not supported by the implementation.</p>
      </fos:errors>
      <fos:notes>
         <p>If the HTML parser accepts a string as the input then that may be used directly when
            <code>$html</code> is an <code>xs:string</code> instead of converting the string to
            a sequence of octets in an <termref def="implementation-dependent"/> encoding. The HTML
            parser must not perform character encoding processing on that input, treating the HTML
            string as being in a known character encoding that matches the encoding of the string.</p>
         <p>The mapping from the HTML document to the XDM nodes can be done in several ways:</p>
         <olist>
            <item>
               <p>An implementation could construct the XDM nodes directly in the HTML tree construction
                  step of the HTML parsing algorithm.</p>
            </item>
            <item>
               <p>An implementation could take the DOM tree and interfaces generated by the HTML parser
                  and adapt those to the XDM accessors. The <specref ref="html"/> section defines this
                  for the <bibref ref="dom-ls"/> specification.</p>
            </item>
            <item>
               <p>An implementation could traverse the HTML document returned by the parsing algorithm
                  and create the corresponding XDM nodes.</p>
            </item>
         </olist>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>The expression <code>parse-html(())</code> returns <code>()</code>.</p>
            <p>The expression <code>parse-html("&lt;p>Hello&lt;/p>")</code> returns an XDM
               document node for a HTML document with a single paragraph within the body element.</p>
            <p>The expression <code>parse-html("&lt;p>Hi&lt;/p>", method:=&quot;html&quot;)</code>
               is equivalent to <code>parse-html("&lt;p>Hi&lt;/p>")</code>.</p>
            <p>The expression <code>parse-html($html, method:=&quot;tidy&quot;)</code> could use
               the <emph>tidy</emph> application or library to parse <code>$html</code> if supported
               by the implementation. Otherwise an <errorref class="DC" code="0012"/> error is raised.</p>
            <p>The expression <code>parse-html($html, method:=&quot;tagsoup&quot;, nons:=true())</code>
               could use the <emph>tagsoup</emph> application to parse <code>$html</code> if supported
               by the implementation, passing the <code>--nons</code> argument to the application.</p>
            <p>[TODO: The examples depend on keyword arguments.]</p>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2023-01-10.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="position" prefix="fn">
      <fos:signatures>
         <fos:proto name="position" return-type="xs:integer"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
         <fos:property>special-streaming-rules</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the context position from the dynamic context.</p>
      </fos:summary>
      <fos:rules>
         <p>Returns the context position from the dynamic context. (See <xspecref spec="XP31"
               ref="id-xp-evaluation-context-components"/>.)</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <xerrorref spec="XP" class="DY" code="0002" type="type"
               /> if
            the context item is <xtermref ref="dt-absent" spec="DM40"
               >absent</xtermref>.</p>
      </fos:errors>
   </fos:function>
   <fos:function name="last" prefix="fn">
      <fos:signatures>
         <fos:proto name="last" return-type="xs:integer"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
         <fos:property>special-streaming-rules</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the context size from the dynamic context.</p>
      </fos:summary>
      <fos:rules>
         <p>Returns the context size from the dynamic context. (See <xspecref spec="XP31"
               ref="id-xp-evaluation-context-components"/>.)</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <xerrorref spec="XP" class="DY" code="0002" type="type"
               /> if
            the context <phrase>size</phrase> is <xtermref ref="dt-absent"
               spec="DM40">absent</xtermref>.</p>
      </fos:errors>
      <fos:notes>
         <p>Under most circumstances, the context size is absent only if the context item is absent. However, XSLT 3.0 with
         streaming defines situations in which the context item and context position are known, but the context size is unknown.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>(1 to 20)[last() - 1]</fos:expression>
               <fos:result>19</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="current-dateTime" prefix="fn">
      <fos:signatures>
         <fos:proto name="current-dateTime" return-type="xs:dateTimeStamp"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the current date and time (with timezone).</p>
      </fos:summary>
      <fos:rules>
         <p>Returns the current dateTime (with timezone) from the dynamic context. (See <xspecref
               spec="XP31" ref="id-xp-evaluation-context-components"
               />.) This is an
               <code>xs:dateTime</code> that is current at some time during the evaluation of a
            query or transformation in which <code>fn:current-dateTime</code> is executed.</p>
         <p>This function is <termref def="dt-deterministic"
               />. The precise instant during the query
            or transformation represented by the value of <code>fn:current-dateTime()</code> is
            <termref
               def="implementation-dependent">implementation-dependent</termref>.</p>
         <p>If the implementation supports data types from XSD 1.1 then the returned value will be
            an instance of <code>xs:dateTimeStamp</code>. Otherwise, the only guarantees are that it
            will be an instance of <code>xs:dateTime</code> and will have a timezone component.</p>
      </fos:rules>
      <fos:notes>
         <p>The returned <code>xs:dateTime</code> will always have an associated timezone, which
            will always be the same as the implicit timezone in the dynamic context</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p><code>fn:current-dateTime()</code> returns an <code>xs:dateTimeStamp</code>
               corresponding to the current date and time. For example, a call of
                  <code>fn:current-dateTime()</code> might return
                  <code>2004-05-12T18:17:15.125Z</code> corresponding to the current time on May 12,
               2004 in timezone <code>Z</code>. </p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="current-date" prefix="fn">
      <fos:signatures>
         <fos:proto name="current-date" return-type="xs:date"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the current date.</p>
      </fos:summary>
      <fos:rules>
         <p>Returns <code>xs:date(fn:current-dateTime())</code>. This is an <code>xs:date</code>
            (with timezone) that is current at some time during the evaluation of a query or
            transformation in which <code>fn:current-date</code> is executed.</p>
         <p>This function is <termref def="dt-deterministic"
               />. The precise instant during the query
            or transformation represented by the value of <code>fn:current-date</code> is <termref
               def="implementation-dependent">implementation-dependent</termref>.</p>
      </fos:rules>
      <fos:notes>
         <p>The returned date will always have an associated timezone, which will always be the same
            as the implicit timezone in the dynamic context</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p><code>fn:current-date()</code> returns an <code>xs:date</code> corresponding to the
               current date. For example, a call of <code>fn:current-date()</code> might return
                  <code>2004-05-12+01:00</code>. </p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="current-time" prefix="fn">
      <fos:signatures>
         <fos:proto name="current-time" return-type="xs:time"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the current time.</p>
      </fos:summary>
      <fos:rules>
         <p>Returns <code>xs:time(fn:current-dateTime())</code>. This is an <code>xs:time</code>
            (with timezone) that is current at some time during the evaluation of a query or
            transformation in which <code>fn:current-time</code> is executed.</p>
         <p>This function is <termref def="dt-deterministic"
               />. The precise instant during the query
            or transformation represented by the value of <code>fn:current-time()</code> is <termref
               def="implementation-dependent">implementation-dependent</termref>.</p>
      </fos:rules>
      <fos:notes>
         <p>The returned time will always have an associated timezone, which will always be the same
            as the implicit timezone in the dynamic context</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p><code>fn:current-time()</code> returns an <code>xs:time</code> corresponding to the
               current time. For example, a call of <code>fn:current-time()</code> might return
                  <code>23:17:00.000-05:00</code>. </p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="implicit-timezone" prefix="fn">
      <fos:signatures>
         <fos:proto name="implicit-timezone" return-type="xs:dayTimeDuration"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="implicit-timezone">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the value of the implicit timezone property from the dynamic context. </p>
      </fos:summary>
      <fos:rules>
         <p>Returns the value of the implicit timezone property from the dynamic context. Components
            of the dynamic context are described in <xspecref
               spec="XP31" ref="id-xp-evaluation-context-components"/>.</p>
      </fos:rules>
   </fos:function>
   <fos:function name="default-collation" prefix="fn">
      <fos:signatures>
         <fos:proto name="default-collation" return-type="xs:string"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the value of the default collation property from the <phrase diff="chg" at="2023-05-19">dynamic</phrase> context. </p>
      </fos:summary>
      <fos:rules>
         <p>Returns the value of the default collation property from the 
            <phrase diff="chg" at="2023-05-19">dynamic</phrase> context context. Components
            of the dynamic context are described in <xspecref
               spec="XP31" ref="id-xp-dynamic-context-components"/>.</p>
      </fos:rules>
      <fos:notes>
         <p>The default collation property can never be absent. If it is not explicitly defined, a
            system defined default can be invoked. If this is not provided, the Unicode codepoint
            collation (<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>) is
            used. </p>
         <p diff="add" at="2023-05-19">In most cases, the default collation is known statically,
         and a call on this function can therefore be pre-evaluated during static analysis. The only
         notable exception is when a call on <code>default-collation()</code> is used to define
         the default value of a parameter to a user-defined function. In this case it is interpreted
         as a reference to the default collation in the context of the relevant function call,
         which may differ from the default collation of the function definition.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="default-language" prefix="fn">
      <fos:signatures>
         <fos:proto name="default-language" return-type="xs:language"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="default-language">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the value of the default language property from the dynamic context. </p>
      </fos:summary>
      <fos:rules>
         <p>Returns the value of the default language property from the dynamic context. Components
            of the dynamic context are described in <xspecref
               spec="XP31" ref="eval_context"/>.</p>
      </fos:rules>
      <fos:notes>
         <p>The default language property can never be absent. The functions <code>fn:format-integer</code>,
         <code>fn:format-date</code>, <code>fn:format-time</code>, and <code>fn:format-dateTime</code>
         are defined to use the default language if no explicit language is supplied. The default language
         may play a role in selection of a default collation, but this is not a requirement.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="static-base-uri" prefix="fn">
      <fos:signatures>
         <fos:proto name="static-base-uri" return-type="xs:anyURI?"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p diff="chg" at="2023-05-19">This function returns the value of the <term>executable base URI</term> property from the dynamic
            context.</p>
      </fos:summary>
      <fos:rules>
         <p diff="chg" at="2023-05-19">The function (despite its name) 
            returns the value of the <term>executable base URI</term> property from the dynamic context.
            If the property is absent, the empty sequence is returned.</p>
         <p diff="chg" at="2023-05-19">Components of the dynamic context are described in <xspecref spec="XP31"
               ref="dynamic_context"/> .</p>
      </fos:rules>
      <fos:notes>
         <p>The executable base URI will in many cases be the same as the static base URI in the static context.
            However, XQuery and XSLT give an implementation freedom to use different base URIs during
            the static analysis phase and the dynamic evaluation phase, that is, for retrieval of compile-time
            and run-time resources respectively. This is appropriate when the implementation allows
            the output of static analysis (a “compiled” query or stylesheet) to be deployed for execution
            to a different location from the one where static analysis took place. In this situation, the
               <code>fn:static-base-uri</code> function should return a URI suitable for locating
            resources needed during dynamic evaluation.</p>
         <p>If a call on the <code>fn:static-base-uri</code> function appears within the expression used
         to define the value of an optional parameter to a user-defined function, then the value supplied
         to the function (if the argument is omitted) will be the executable base URI from the dynamic
         context of the function caller. This allows such a function to resolve relative URIs supplied
         in other parameters to the same function.</p>
      </fos:notes>
   </fos:function>
   <fos:function name="function-lookup" prefix="fn">
      <fos:signatures>
         <fos:proto name="function-lookup" return-type="function(*)?">
            <fos:arg name="name" type="xs:QName"/>
            <fos:arg name="arity" type="xs:integer"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
         
         <fos:property>special-streaming-rules</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <phrase diff="chg" at="2023-05-26">a function item</phrase> having a given name and arity, if there is one.</p>
      </fos:summary>
      <fos:rules>
         <p diff="chg" at="2023-05-26">A call to <code>fn:function-lookup</code> starts by looking for a 
            <xtermref spec="XP40" ref="dt-function-definition">function definition</xtermref>
             in the named functions component of the dynamic context
            (specifically, the dynamic context of the call to <code>fn:function-lookup</code>),
            using the expanded QName supplied as <code>$name</code> and the arity supplied as
            <code>$arity</code>. There can be at most one such function definition.</p>
         
         <p>If no function definition can be identified (by name and arity), then an empty sequence
            is returned.</p>
         
         <p diff="chg" at="2023-05-26">If a function definition is identified, then a function item is obtained from the function
         definition using the same rules as for evaluation of a named function reference 
         (see <xspecref spec="XP40" ref="id-named-function-ref"/>). The captured context of
         the returned function item (if it is context dependent) is the static and dynamic context of 
         the call on <code>fn:function-lookup</code>.</p>

 
         <p>If the arguments to <code>fn:function-lookup</code> identify a function that is present
            in the static context of the function call, the function will always return the same
            function that a static reference to this function would bind to. If there is no such
            function in the static context, then the results depend on what is present in the
            dynamic context, which is <termref
               def="implementation-defined">implementation-defined</termref>.</p>



      </fos:rules>

      <fos:notes>
         <p>This function can be useful where there is a need to make a dynamic decision on which of
            several statically known functions to call. It can thus be used as a substitute for
            polymorphism, in the case where the application has been designed so several functions
            implement the same interface.</p>
         <p>The function can also be useful in cases where a query or stylesheet module is written
            to work with alternative versions of a library module. In such cases the author of the
            main module might wish to test whether an imported library module contains or does not
            contain a particular function, and to call a function in that module only if it is
            available in the version that was imported. A static call would cause a static error if
            the function is not available, whereas getting the function using
               <code>fn:function-lookup</code> allows the caller to take fallback action in this
            situation. </p>
         <p>If the function that is retrieved by <code>fn:function-lookup</code> is <termref
               def="dt-context-dependent"
               >context-dependent</termref>, that is, if it has
            dependencies on the static or dynamic context of its caller, the context that applies is
            the static and/or dynamic context of the call to the <code>fn:function-lookup</code>
            function itself. The context thus effectively forms part of the closure of the returned
            function. In practice this applies only where the target of
               <code>fn:function-lookup</code> is a built-in function, because user-defined
            functions never depend on the static or dynamic context of the function call. The rule
            applies recursively, since <code>fn:function-lookup</code> is itself a context-dependent
            built-in function. </p>
         <p diff="add" at="2023-05-26">However, the static and dynamic context of the call to <code>fn:function-lookup</code>
            may play a role even when the selected function definition is not itself context dependent,
            if the expressions used to establish default parameter values are context dependent.</p>
         <p diff="add" at="2023-05-26">The function identity is determined in the same way as for
         a named function reference. Specifically, if there is no context dependency, two calls
         on <code>fn:function-lookup</code> with the same name and arity must return the same function.</p>
         <p>These specifications do not define any circumstances in which the dynamic context will
            contain functions that are not present in the static context, but neither do they rule
            this out. For example an API <rfc2119>may</rfc2119> provide the ability to add functions
            to the dynamic context. Equally, these specifications do not define any mechanism for
            creating context-dependent functions other than the built-in context-dependent
            functions, but neither do they rule out the existence of such functions. </p>
         
         <p>The mere fact that a function exists and has a name does not of itself mean that the
         function is present in the dynamic context. For example, functions obtained through
         use of the <code>fn:load-xquery-module</code> function are not added to the dynamic context.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>function-lookup(xs:QName('fn:substring'), 2)('abcd', 2)</fos:expression>
               <fos:result>'bcd'</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The expression <code>(fn:function-lookup(xs:QName('xs:dateTimeStamp'), 1),
                  xs:dateTime#1)[1] ('2011-11-11T11:11:11Z')</code> returns an
                  <code>xs:dateTime</code> value set to the specified date, time, and timezone; if
               the implementation supports XSD 1.1 then the result will be an instance of the
               derived type <code>xs:dateTimeStamp</code>. The query is written to ensure that no
               failure occurs when the implementation does not recognize the type
                  <code>xs:dateTimeStamp</code>.</p>
         </fos:example>
         <fos:example>
            <p>The expression
         <eg>let $f := function-lookup(xs:QName('zip:binary-entry'), 2)
return if (exists($f)) then $f($href, $entry) else ()</eg>
returns the result of
               calling <code>zip:binary-entry($href, $entry)</code> if the function is available, or
               an empty sequence otherwise.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="function-name" prefix="fn">
      <fos:signatures>
         <fos:proto name="function-name" return-type="xs:QName?">
            <fos:arg name="function" type="function(*)"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns the name of the function identified by a function item.</p>
      </fos:summary>
      <fos:rules>
         <p>If <code>$function</code> refers to a named function, <code>fn:function-name($func)</code>
            returns the name of that function.</p>
         <p>Otherwise (<code>$function</code> refers to an anonymous function),
               <code>fn:function-name($function)</code> returns an empty sequence.</p>
         <p>The prefix part of the returned QName is <termref def="implementation-dependent"
               >implementation-dependent</termref>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>function-name(substring#2)</fos:expression>
               <fos:result>QName("http://www.w3.org/2005/xpath-functions", "fn:substring")</fos:result>
               <fos:postamble>The namespace prefix of the returned QName is not predictable.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>function-name(function($node) { count($node/*) })</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>

      </fos:examples>
   </fos:function>
   <fos:function name="function-arity" prefix="fn">
      <fos:signatures>
         <fos:proto name="function-arity" return-type="xs:integer">
            <fos:arg name="function" type="function(*)"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns the arity of the function identified by a function item.</p>
      </fos:summary>
      <fos:rules>
         <p>The <code>fn:function-arity</code> function returns the arity (number of arguments) of
            the function identified by <code>$function</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>function-arity(substring#2)</fos:expression>
               <fos:result>2</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>function-arity(function($node) { name($node) })</fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>let $initial := substring(?, 1, 1)
return function-arity($initial)</eg></fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="function-annotations" prefix="fn">
      <fos:signatures>
         <fos:proto name="function-annotations" return-type="map(xs:QName, xs:anyAtomicType*)">
            <fos:arg name="function" type="function(*)"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the annotations of the function identified by a function item.</p>
      </fos:summary>
      <fos:rules>
         <p>The <code>fn:function-annotations</code> function returns the annotations of
            the function identified by <code>$function</code> as a map.
            For each annotation, a map entry is returned: The key is the name of the annotation.
            The value is a sequence comprising the annotation values, or an empty sequence
            if the annotation has no values.
            If a function (for example, a built-in function) has no annotations,
            an empty map is returned.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>
declare %private function local:inc($c) { $c + 1 };
function-annotations(local:inc#1)</eg></fos:expression>
               <fos:result>map { Q{http://www.w3.org/2012/xquery}private: () }</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>
let $old := %local:deprecated('0.1', '0.2') function() {}
let $ann := function-annotations($old)
return map:keys($ann) || ': ' || string-join(map:values($ann), ', ')
</eg></fos:expression>
               <fos:result>local:deprecated: 0.1, 0.2</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>function-annotations(true#0)</fos:expression>
               <fos:result>map { }</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="for-each" prefix="fn">
      <fos:signatures>
         <fos:proto name="for-each" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="navigation"/>
            <fos:arg name="action" type="function(item()) as item()*" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Applies the function item <code>$action</code> to every item from the sequence <var>$input</var>
            in turn, returning the concatenation of the resulting sequences in order.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the function is equivalent to the following implementation in XQuery:</p>
         <eg><![CDATA[
declare function for-each($input, $action) {
  if (empty($input))
  then ()
  else ($action(head($input)), for-each(tail($input), $action))
};]]></eg>
         <p>or its equivalent in XSLT:</p>
         <eg><![CDATA[
<xsl:function name="for-each">
  <xsl:param name="iinput"/>
  <xsl:param name="action"/>
  <xsl:if test="exists($input)">
    <xsl:sequence select="$action(head($input)), for-each(tail($input), $action)"/>
  </xsl:if>
</xsl:function>]]>
         </eg>
      </fos:rules>
      <fos:notes>
         <p>The function call <code>fn:for-each($SEQ, $F)</code> is equivalent to the expression
               <code>for $i in $SEQ return $F($i)</code>, assuming that ordering mode is
               <code>ordered</code>.</p>
         <p diff="add" at="2023-02-20">See also <code>array:build</code>, which provides similar functionality for the
         case where the input is a sequence rather than an array.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>for-each(1 to 5, function($a) { $a * $a })</fos:expression>
               <fos:result>(1, 4, 9, 16, 25)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>for-each(
  ("john", "jane"),
  string-to-codepoints#1
)</eg></fos:expression>
               <fos:result>(106, 111, 104, 110, 106, 97, 110, 101)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>for-each(("23", "29"), xs:int#1)</fos:expression>
               <fos:result>(23, 29)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="filter" prefix="fn">
      <fos:signatures>
         <fos:proto name="filter" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="navigation"/>
            <fos:arg name="predicate" type="function(item()) as xs:boolean" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns those items from the sequence <code>$input</code> for which the supplied function
               <code>$predicate</code> returns <code>true</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the function is equivalent to the following implementation in XQuery:</p>
         <eg><![CDATA[
declare function filter(
        $input as item()*,
        $predicate as function(item()) as xs:boolean)
        as item()* {
  if (empty($input))
  then ()
  else (head($input)[$predicate(.) eq true()], 
        filter(tail($input), $predicate)
       )
};]]></eg>
         <p>or its equivalent in XSLT:</p>
         <eg><![CDATA[
<xsl:function name="filter" as="item()*">
  <xsl:param name="input" as="item()*"/>
  <xsl:param name="predicate" as="function(item()) as xs:boolean"/>
  <xsl:if test="exists($input)">
    <xsl:sequence select="head($input)[$f(.) eq true()], filter(tail($input), $f)"/>
  </xsl:if>
</xsl:function>]]>
         </eg>
      </fos:rules>
      <fos:errors>
         <p>As a consequence of the function signature and the function calling rules, a type error
            occurs if the supplied function <code>$predicate</code> returns anything other than a single
               <code>xs:boolean</code> item; there is no conversion to an effective boolean
            value.</p>
      </fos:errors>
      <fos:notes>
         <p>The function call <code>fn:filter($SEQ, $F)</code> has a very similar effect to the
            expression <code>$SEQ[$F(.)]</code>. There are some differences, however. In the case of
               <code>fn:filter</code>, the function <code>$F</code> is required to return a boolean;
            there is no special treatment for numeric predicate values, and no conversion to an
            effective boolean value. Also, with a filter expression <code>$SEQ[$F(.)]</code>, the
            focus within the predicate is different from that outside; this means that the use of a
            context-sensitive function such as <code>fn:lang#1</code> will give different results in
            the two cases.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>filter(1 to 10, function($a) {$a mod 2 = 0})</fos:expression>
               <fos:result>(2, 4, 6, 8, 10)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>filter((), lang("en", ?))</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="fold-left" prefix="fn">
      <fos:signatures>
         <fos:proto name="fold-left" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="navigation"/>
            <fos:arg name="zero" type="item()*"/>
            <fos:arg name="action" type="function(item()*, item()) as item()*" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Processes the supplied sequence from left to right, applying the supplied function
            repeatedly to each item in turn, together with an accumulated result value.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the function is equivalent to the following implementation in XQuery:</p>
         <eg><![CDATA[
declare function fold-left(
        $input as item()*,
        $zero as item()*,
        $action as function(item()*, item()) as item()*) 
        as item()* {
  if (empty($input))
  then $zero
  else fold-left(tail($input), $action($zero, head($input)), $action)
};]]></eg>
         <p>or its equivalent in XSLT:</p>
         <eg><![CDATA[
<xsl:function name="fold-left" as="item()*">
  <xsl:param name="input" as="item()*"/>
  <xsl:param name="zero" as="item()*"/>
  <xsl:param name="action" as="function(item()*, item()) as item()*"/>
  <xsl:choose>
    <xsl:when test="empty($input)">
      <xsl:sequence select="$zero"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:sequence select="fold-left(tail($input), $action($zero, head($input)), $action)"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>]]>
         </eg>
      </fos:rules>
      <fos:errors>
         <p>As a consequence of the function signature and the function calling rules, a type error
            occurs if the supplied function <code>$action</code> cannot be applied to two arguments, where
            the first argument is either the value of <code>$zero</code> or the result of a previous
            application of <code>$action</code>, and the second 
            is any single item from the sequence <code>$input</code>.</p>
      </fos:errors>
      <fos:notes>
         <p>This operation is often referred to in the functional programming literature as
            “folding” or “reducing” a sequence. It takes a function that operates on a pair of
            values, and applies it repeatedly, with an accumulated result as the first argument, and
            the next item in the sequence as the second argument. The accumulated result is
            initially set to the value of the <code>$zero</code> argument, which is conventionally a
            value (such as zero in the case of addition, one in the case of multiplication, or a
            zero-length string in the case of string concatenation) that causes the function to
            return the value of the other argument unchanged.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>fold-left(
  1 to 5,
  0,
  function($a, $b) { $a + $b }
)</eg></fos:expression>
               <fos:result>15</fos:result>
               <fos:postamble>This returns the sum of the items in the sequence</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>fold-left(
  (2,3,5,7),
  1,
  function($a, $b) { $a * $b }
)</eg></fos:expression>
               <fos:result>210</fos:result>
               <fos:postamble>This returns the product of the items in the sequence</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>fold-left(
  (true(), false(), false()),
  false(),
  function($a, $b) { $a or $b }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>This returns <code>true</code> if any item in the sequence has an effective boolean
                  value of <code>true</code></fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>fold-left(
  (true(), false(), false()),
  false(),
  function($a, $b) { $a and $b }
)</eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble>This returns <code>true</code> only if every item in the sequence has an effective
                  boolean value of <code>true</code></fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>fold-left(
  1 to 5,
  (),
  function($a, $b) { $b, $a }
)</eg></fos:expression>
               <fos:result>(5,4,3,2,1)</fos:result>
               <fos:postamble>This reverses the order of the items in a sequence</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>fold-left(
  1 to 5,
  "",
  concat(?, ".", ?)
)</eg></fos:expression>
               <fos:result>".1.2.3.4.5"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>fold-left(
  1 to 5,
  "$zero",
  concat("$f(", ?, ", ", ?, ")")
)</eg></fos:expression>
               <fos:result>"$f($f($f($f($f($zero, 1), 2), 3), 4), 5)"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>fold-left(
  1 to 5,
  map { },
  function($map, $n) { map:put($map, $n, $n * 2) }
)</eg></fos:expression>
               <fos:result>map{1:2, 2:4, 3:6, 4:8, 5:10}</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="fold-right" prefix="fn">
      <fos:signatures>
         <fos:proto name="fold-right" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="navigation"/>
            <fos:arg name="zero" type="item()*"/>
            <fos:arg name="action" type="function(item(), item()*) as item()*" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
         <fos:property>special-streaming-rules</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Processes the supplied sequence from right to left, applying the supplied function
            repeatedly to each item in turn, together with an accumulated result value.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the function is equivalent to the following implementation in XQuery:</p>
         <eg><![CDATA[
declare function fold-right(
        $input as item()*, 
        $zero as item()*, 
        $action as function(item(), item()*) as item()*) 
        as item()* {
  if (empty($input))
  then $zero
  else $action(head($input), fold-right(tail($input), $zero, $action))
};]]></eg>
         <p>or its equivalent in XSLT:</p>
         <eg><![CDATA[
<xsl:function name="fold-right" as="item()*">
  <xsl:param name="input" as="item()*"/>
  <xsl:param name="zero" as="item()*"/>
  <xsl:param name="action" as="function(item(), item()*) as item()*"/>
  <xsl:choose>
    <xsl:when test="empty($input)">
      <xsl:sequence select="$zero"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:sequence select="$action(head($input), fold-right(tail($input), $zero, $action))"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>]]>
         </eg>
      </fos:rules>
      <fos:errors>
         <p>As a consequence of the function signature and the function calling rules, a type error
            occurs if the supplied function <code>$action</code> cannot be applied to two arguments, where
            the first argument is any item in the sequence <code>$input</code>, and the second is either
            the value of <code>$zero</code> or the result of a previous application of
            <code>$action</code>.</p>

      </fos:errors>
      <fos:notes>
         <p>This operation is often referred to in the functional programming literature as
            “folding” or “reducing” a sequence. It takes a function that operates on a pair of
            values, and applies it repeatedly, with the next item in the sequence as the first
            argument, and the result of processing the remainder of the sequence as the second
            argument. The accumulated result is initially set to the value of the <code>$zero</code>
            argument, which is conventionally a value (such as zero in the case of addition, one in
            the case of multiplication, or a zero-length string in the case of string concatenation)
            that causes the function to return the value of the other argument unchanged.</p>
         <p>In cases where the function performs an associative operation on its two arguments (such
            as addition or multiplication), <code>fn:fold-right</code> produces the same result as
               <code>fn:fold-left</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>fold-right(
  1 to 5,
  0,
  function($a, $b) { $a + $b }
)</eg></fos:expression>
               <fos:result>15</fos:result>
               <fos:postamble>This returns the sum of the items in the sequence</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>fold-right(
  1 to 5,
  "",
  concat(?, ".", ?)
)</eg></fos:expression>
               <fos:result>"1.2.3.4.5."</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>fold-right(
  1 to 5,
  "$zero",
  concat("$f(", ?, ", ", ?, ")")
)</eg></fos:expression>
               <fos:result>"$f(1, $f(2, $f(3, $f(4, $f(5, $zero)))))"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   
       <fos:function name="chain" prefix="fn">
        <fos:signatures>
            <fos:proto name="chain" return-type="item()*">
                <fos:arg name="input" type="item()*"/>
                <fos:arg name="functions" type="function(*)*"/>
            </fos:proto>
        </fos:signatures>
        <fos:properties>
            <fos:property>deterministic</fos:property>
            <fos:property>context-independent</fos:property>
            <fos:property>focus-independent</fos:property>
        </fos:properties>
        <fos:summary>
            <p>
                Applies from left to right on an initial argument a chain of functions provided in a sequence.
            </p>
        </fos:summary>
        <fos:rules>
            <p>Informally, the function behaves as follows:</p>
            <olist>
                <item>
                    <p>
                        If <code>$functions</code> is empty, then <code>$input</code> is returned. Else,
                    </p>
                </item>
                <item>
                    <p>
                        The first function in <code>$functions</code> is applied on the provided
                        <code>$input</code>.
                    </p>
                </item>
                <item>
                    <p>
                        Then the next function in <code>$functions</code> (if such exists), is applied on the result,
                        and so on...
                    </p>
                </item>
                <item>
                    <p>
                        Finally the last function in <code>$functions</code> is applied on the latest-result obtained so far,
                        and the result of this final function application is the result of calling <code>fn:chain($input, $functions)</code> .
                    </p>
                </item>
            </olist>
            <p>More formally, the function is equivalent to the following implementation in XPath:</p>
            <eg>
<![CDATA[let $apply := function($x, $f) 
               {fn:apply($f, 
                         if(function-arity($f) eq 1) then [$x]
                            else if(not($x instance of array(*))) then array{$x}
                                                                  else $x
                        )
                },
    $chain := function($x as item()*, $funs as function(*)*) as item()*
                  {
                    fold-left($funs, $x, $apply)
                  }
         ]]>
            </eg>
        </fos:rules>

        <fos:notes>
                <olist>
                    <item>
                        <p>
                            Contrary to the right-to-left evaluation of function-composition as defined in Math, here the functions in
                            <code>$functions</code> are evaluated in their order from left-to-right (the first function is evaluated first,
                            then the second,..., and the last function is evaluated last).
                        </p>
                    </item>
                    <item>
                        <p>
                            It is not a requirement that every function in <code>$functions</code> must have arity of one.
                            In fact, each of these functions can have any arity.
                        </p>
                    </item>
                    <item>
                        <p>
                            For a function with arity <code>N</code>, greater than <code>1</code>,
                            the result produced by the application of the previous function must be either a sequence
                            with <code>N</code> items, or, if some of the parameters of the function could be sequences themselves,
                            then an array with<code>N</code> members, and each of these <code>N</code> members is passed
                            by the implementation in the function call as the corresponding argument of this function.
                        </p>
                    </item>
                    <item>
                        <p>
                            A consequence of the provided rules is that a type error occurs if the current result does not match the arity 
                            and the type(s) of the argument(s) of the next function in the chain,
                            that is, it is a sequence or an array of <code>M</code> items/members and <code>M ne function-arity(current-function)</code>
                            or the items /members of the current result cannot be coerced to the required types of the arguments of the next function.
                        </p>
                    </item>
                    <item>
                        <p>
                            In very simple cases, when it may be possible to use short and meaningful static expressions, one could consider 
                            using chaining provided via the arrow operators. 
                            In all such cases one should carefully consider the fact that any such desicion could result in longer and less-understandable
                            expressions, would involve one or more operators (not needed if <code>fn:chain</code> is used, and the loss of reusability)
                        </p>
                    </item>
                </olist>
         <p>
            In the following examples it is assumed that these definitions are in scope:
            <!--<fos:expression>-->
            <eg>
<![CDATA[(: The functions below: $incr, $times, $doubleAll, and $range, etc... 
   are needed only for the following examples :)
let $incr := function($x) {op("+")($x, ?)},
    $times := function($y) {op("*")($y,  ?)},
    $doubleAll := function($nums as xs:numeric*) {$nums ! op("*")(., 2)},
    $appendAll := function($strings as xs:string*, $addage as xs:string) 
                {$strings ! concat#2(., $addage)},
    $makeUpperAll := function($strings as xs:string*) {$strings ! upper-case(.)},
    $countAll := function($ar as array(*)) 
                {for $i in 1 to array:size($ar) return count($ar($i))},
    $product3 := function($x, $y, $z) {  $x * $y * $z},
    $range := function($n as xs:integer) {1 to $n}
    ]]>
            </eg>
            <!--</fos:expression>-->
         </p>
      </fos:notes>
            <fos:examples>
                <fos:variable name="incr" id="chain-variable-incr"><![CDATA[
                function($x) {op("+")($x, ?)}
                ]]></fos:variable>
                <fos:variable name="doubleAll" id="chain-variable-doubleAll"><![CDATA[
                function($nums as xs:numeric*) {$nums ! op("*")(., 2)}
                ]]></fos:variable>
                <fos:variable name="times" id="chain-variable-times"><![CDATA[
                function($y) {op("*")($y,  ?)}
                ]]></fos:variable>
                <fos:variable name="appendAll" id="chain-variable-appendAll"><![CDATA[
                function($strings as xs:string*, $addage as xs:string) 
                {$strings ! concat#2(., $addage)}
                ]]></fos:variable>
                <fos:variable name="makeUpperAll" id="chain-variable-makeUpperAll"><![CDATA[
                function($strings as xs:string*) {$strings ! upper-case(.)}
                ]]></fos:variable>
                <fos:variable name="countAll" id="chain-variable-countAll"><![CDATA[
                function($ar as array(*)) 
                {for $i in 1 to array:size($ar) return count($ar($i))}
                ]]></fos:variable>
                <fos:variable name="product3" id="chain-variable-product3"><![CDATA[
                function($x, $y, $z) {  $x * $y * $z}
                ]]></fos:variable>
                <fos:variable name="range" id="chain-variable-range"><![CDATA[
                function($n as xs:integer) {1 to $n}
                ]]></fos:variable>
                <fos:example>
                    <fos:test  use="chain-variable-incr chain-variable-doubleAll">
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( (2, 3), ($doubleAll, op("+"), $incr(3)))
                                ]]></eg>
                            </fos:expression>
                        <fos:result>13</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( (2, 3), ($doubleAll, sum#1, $incr(3)))
                                ]]></eg>
                            </fos:expression>
                        <fos:result>13</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( (2, 3), (op("+"), $incr(3)))
                                ]]></eg>
                            </fos:expression>
                        <fos:result>8</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( (2, 3), (sum#1, $incr(3)))
                                ]]></eg>
                            </fos:expression>
                        <fos:result>8</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( [1, (), 2, 3], (array:size#1, $incr(3)) )
                                ]]></eg>
                            </fos:expression>
                        <fos:result>7</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( (1, 2, 3), (count#1, $incr(3)) )
                                ]]></eg>
                            </fos:expression>
                        <fos:result>6</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( [1, 2, 3], (count#1, $incr(3)) )
                                ]]></eg>
                            </fos:expression>
                        <fos:result>4</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( 5, ($range, $doubleAll, sum#1) )
                                ]]></eg>
                            </fos:expression>
                        <fos:result>30</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( 2, ($range, $doubleAll, op("*")) )
                                ]]></eg>
                            </fos:expression>
                        <fos:result>8</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( [(1,2,3), ()], ($countAll, op("+")) )
                                ]]></eg>
                            </fos:expression>
                        <fos:result>3</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( [(1,2,3), (), (5, 6)], ($countAll, sum#1) )
                                ]]></eg>
                            </fos:expression>
                        <fos:result>5</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( [(1,2,3), (), (5, 6)], ($countAll, $product3) )
                                ]]></eg>
                            </fos:expression>
                        <fos:result>0</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( "abra cadabra", (tokenize#2(?, " "), string-join#2(?, "+")) )
                                ]]></eg>
                            </fos:expression>
                        <fos:result>"abra+cadabra"</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( "The cat sat on the mat", 
       ( tokenize#2(?, " "), 
         $appendAll(?, "."), 
         $makeUpperAll, 
         string-join#2(?, " ") 
        ) 
     )]]></eg>
                            </fos:expression>
                        <fos:result>"THE. CAT. SAT. ON. THE. MAT."</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                    <fos:test>
                        <fos:expression>
                            <eg>
                                <![CDATA[
chain( (
         chain( ("A    long   message   ", "   long "), 
                (head#1, normalize-space#1, normalize-unicode#1) ),
         chain( ("A    long   message   ", "   long "),  
                (tail#1, normalize-space#1, normalize-unicode#1) )
       ),
      (contains#2)
    )]]></eg>
                            </fos:expression>
                        <fos:result>true()</fos:result>
                    </fos:test>
                </fos:example>
                <fos:example>
                   <fos:test>
                      <fos:expression>
                         <eg>
                            <![CDATA[
chain(3, (array:append([1], ?), op("+")))                        
                         ]]>
                         </eg>
                      </fos:expression>
                      <fos:result>4</fos:result>
                   </fos:test>
                </fos:example>
                <fos:example>
                  <fos:test>
                    <fos:expression>
                       <eg>
                          <![CDATA[
chain( (), true#0)
    ]]></eg>
                    </fos:expression>
                    <fos:result>true()</fos:result>                   
                  </fos:test>
                </fos:example>
                <fos:example>
                  <fos:test>
                    <fos:expression>
                      <eg>
                        <![CDATA[
chain((1, 2, 3), $product3) 
    ]]></eg>
                    </fos:expression>
                    <fos:result>6</fos:result>
                  </fos:test>
                </fos:example>
                <fos:example>
                  <fos:test>
                    <fos:expression>
                      <eg>
                        <![CDATA[
chain((1, 2, 3), ($product3, $product3)) 
    ]]></eg>
                    </fos:expression>
                    <fos:result>Raises a type error ([FOAP0001]) because only 1 argument is supplied to the second function in the chain, but it needs 3 arguments</fos:result>
                  </fos:test>
                </fos:example>
                <fos:example>
                  <fos:test>
                    <fos:expression>
                      <eg>
                        <![CDATA[
chain((1, 2, 3, 4), $product3) 
    ]]></eg>
                    </fos:expression>
                    <fos:result>Raises a type error ([FOAP0001]) because 4 arguments are supplied to the function but it needs 3 arguments</fos:result>
                  </fos:test>
                </fos:example>
            </fos:examples>
        </fos:function>


   <fos:function name="iterate-while" prefix="fn">
      <fos:signatures>
         <fos:proto name="iterate-while" return-type="item()*">
            <fos:arg name="input" type="item()*"/>
            <fos:arg name="predicate" type="function(item()*) as xs:boolean" example="false#0"/>
            <fos:arg name="action" type="function(item()*) as item()*"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Processes a supplied value repeatedly, continuing while some condition remains true,
            and returning the first value that does not satisfy the condition.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function behaves as follows:</p>
         <olist>
            <item>
               <p>The supplied <code>$input</code> value is tested against the supplied
                  <code>$predicate</code>.</p>
            </item>
            <item>
               <p>If the result of the predicate is <code>true</code>, <code>$action($input)</code>
                  is evaluated, the resulting value is used as a new <code>$input</code>, and the
                  process repeats from step 1.</p>
            </item>
            <item>
               <p>If the result of the predicate is <code>false</code>, the function returns the
                  value of <code>$input</code>.</p>
            </item>
         </olist>
         <p>More formally, the function is equivalent to the following implementation in XQuery:</p>
         <eg><![CDATA[
declare function fn:iterate-while(
  $input     as item()*,
  $predicate as function(item()*) as xs:boolean,
  $action    as function(item()*) as item()*
) as item()* {
  if ($predicate($input)) then (
    fn:iterate-while($action($input), $predicate, $action)
  ) else (
    $input
  )
};]]></eg>
      </fos:rules>
      <fos:notes>
         <p>While-loops are very common in procedural programming languages, and this function
            provides a way to write functionally clean and interruptible iterations without
            side-effects. An initial value is tested and replaced by new values until it matches
            a given condition. Depending on the use case, the value can be a simple atomic item
            or an arbitrarily complex data structure.</p>
         <p>Note that, just as when writing recursive functions, it is easy to construct infinite
            loops.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg><![CDATA[iterate-while(
  2,
  function { . < 100 },
  function { . * . }
)]]></eg></fos:expression>
               <fos:result>256</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg><![CDATA[let $input := (0 to 4, 6 to 10)
return iterate-while(
  0, 
  function($n) { $n = $input }, 
  function($n) { $n + 1 }
)]]></eg></fos:expression>
               <fos:result>5</fos:result>
               <fos:postamble>This returns the first positive number missing in a sequence.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg><![CDATA[iterate-while(
  1 to 9,
  function($seq) { head($seq) < 5 },
  function($seq) { tail($seq) }
)]]></eg></fos:expression>
               <fos:result>(5, 6, 7, 8, 9)</fos:result>
               <fos:postamble>The first number of a sequence is removed as long as it is smaller than 5.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg><![CDATA[let $input := 3936256
return iterate-while(
  $input,
  function($result) { abs($result * $result - $input) >= 0.0000000001 },
  function($guess) { ($guess + $input div $guess) div 2 }
) => round(5)]]></eg></fos:expression>
               <fos:result>1984</fos:result>
               <fos:postamble>This computes the square root of a number.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The following example generates random doubles. It is interrupted once a number
               exceeds a given limit:</p>
            <eg><![CDATA[
let $r := random-number-generator()
let $map := iterate-while(
  $r,
  function($r) {
    $r?number < 0.8
  },
  function($r) {
    map:put($r?next(), 'numbers', ($r?numbers, $r?number))
  }
)
return $map?numbers
            ]]></eg>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Approved.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="for-each-pair" prefix="fn">
      <fos:signatures>
         <fos:proto name="for-each-pair" return-type="item()*">
            <fos:arg name="input1" type="item()*" usage="navigation"/>
            <fos:arg name="input2" type="item()*" usage="navigation"/>
            <fos:arg name="action" type="function(item(), item()) as item()*" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Applies the function item <code>$action</code> to successive pairs of items taken one from
               <code>$input1</code> and one from <code>$input2</code>, returning the concatenation of the
            resulting sequences in order.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the function is equivalent to the following implementation in XQuery:</p>
         <eg><![CDATA[
declare function fn:for-each-pair($input1, $input2, $action)
{
   if(fn:exists($input1) and fn:exists($input2)) 
   then (
     $action(fn:head($input1), fn:head($input2)),
     fn:for-each-pair(fn:tail($input1), fn:tail($input2), $action)
   )
   else ()
};]]></eg>
         <p>or its equivalent in XSLT:</p>
         <eg><![CDATA[
<xsl:function name="fn:for-each-pair">
  <xsl:param name="input1"/>
  <xsl:param name="input2"/>
  <xsl:param name="action"/>
  <xsl:if test="fn:exists($input1) and fn:exists($input2)">
    <xsl:sequence select="$action(fn:head($input1), fn:head($input2))"/>
    <xsl:sequence select="fn:for-each-pair(fn:tail($input1), fn:tail($input2), $action)"/>
  </xsl:if>
</xsl:function>]]>
         </eg>
      </fos:rules>
      <fos:notes>
         <p>If one sequence is longer than the other, excess items in the longer sequence are ignored.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>for-each-pair(
  ("a", "b", "c"),
  ("x", "y", "z"),
  concat#2
)</eg></fos:expression>
               <fos:result>("ax", "by", "cz")</fos:result>
            </fos:test>
         </fos:example>
         <!--<fos:example>
            <fos:test>
               <fos:expression><![CDATA[for-each-pair(function($a, $b) { <e a="{$a}" b="{$b}"/> }, (1 to 3), ("x", "y", "z"))]]></fos:expression>
               <fos:result as="element()*"><![CDATA[(<e a="1" b="x"/>, <e a="2" b="y"/>, <e a="3" b="z"/>)]]></fos:result>
               <fos:postamble>This example uses XQuery syntax</fos:postamble>
            </fos:test>
         </fos:example>-->
         <fos:example>
            <fos:test>
               <fos:expression><eg>for-each-pair(
  1 to 5,
  1 to 5,
  function($a, $b) { 10 * $a + $b }
)</eg></fos:expression>
               <fos:result>(11, 22, 33, 44, 55)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>let $s := 1 to 8
return for-each-pair($s, tail($s), function($a, $b) { $a * $b })</eg></fos:expression>
               <fos:result>(2, 6, 12, 20, 30, 42, 56)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="sort" prefix="fn" diff="chg" at="2023-08-15">
      <fos:signatures>
         <fos:proto name="sort" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="navigation"/>
            <fos:arg name="collation" type="xs:string*" usage="absorption" default="fn:default-collation()"/>
            <fos:arg name="key" type="(function(item()) as xs:anyAtomicType*)+" usage="inspection" default="fn:data#1"/>
            <fos:arg name="order" type="enum('ascending', 'descending')*" usage="absorption" default="'ascending'"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
 

      <fos:summary>
         <p>Sorts a supplied sequence, based on the value of one or more supplied sort keys supplied as functions.</p>
      </fos:summary>
      <fos:rules>
         <p>The result of the function is a sequence that contains all the items from <code>$input</code>,
         typically in a different order, the order being defined by one or more <term>sort key definitions</term>.</p>
         
         <p>A <term>sort key definition</term> has three parts:</p>
         
         <olist>
            <item><p>A <term>sort key function</term>, which is applied to each item in the input sequence to
            determine a <term>sort key value</term>.</p></item>
            <item><p>A <term>collation</term>, which is used when comparing <term>sort key values</term>
               that are of type <code>xs:string</code> or <code>xs:untypedAtomic</code>.</p></item>
            <item><p>An <term>order direction</term>, which is <code>ascending</code> or
            <code>descending</code>.</p></item>
         </olist>
         
         <p>The number of sort key definitions is determined by the number of function items supplied
            in the <code>$key</code> argument. If the argument is absent or empty, the default is
            a single sort key definition using the function <code>data#1</code>.</p>
         
         <p>The <code>$n</code>'th sort key definition (where <code>$n</code> counts from one (1))
         is established as follows:</p>
         
         <olist>
            <item><p>The <term>sort key function</term> is <code>$key[$n] otherwise data#1</code>.</p></item>
            <item><p>The <term>collation</term> is <code>$collation[$n] otherwise $collation[last()]
               otherwise default-collation()</code>.
            That is, it is the collation supplied in the corresponding item of the supplied
             <code>$collation</code> argument; or in its absence, the last entry in 
            <code>$collation</code>; or if <code>$collation</code> is absent or empty, the
            default collation from the static context of the caller.</p></item>
            <item><p>The <term>order direction</term> is 
               <code>$order[$n] otherwise $order[last()] otherwise "ascending"</code>.
            That is, it is <code>"ascending"</code> or <code>"descending"</code> according
            to the value of the corresponding item in the supplied <code>$order</code>
            argument; or in its absence, the last entry in <code>$order</code>; or
            if <code>$order</code> is absent or empty, then <code>"ascending"</code>.</p></item>
         </olist>
         
         <p>When comparing values of types other than <code>xs:string</code> or <code>xs:untypedAtomic</code>,
         the corresponding collation is ignored, and no error is reported if the supplied value is
         not a known or valid collation name. If it is necessary to supply such an ignored value
         (for example, in the case where a non-string sort key is followed by another sort key 
         that requires a collation) the empty string can be supplied.</p>
        
         <p>The result of the function is obtained as follows:</p>
         
         <olist>
            <item>
               <p>The result sequence contains the same items as the input sequence <code>$input</code>, 
                  but generally in a different order.</p>
            </item>
            <item>
               <p>The sort key definitions are established as described above.
                  The sort key definitions are in major-to-minor order. That is, the position of two
                  items <code>$A</code> and <code>$B</code> in the result sequence is determined first by the 
                  relative magnitude of their
                  primary sort key values, which are computed by evaluating the <term>sort key function</term> in the 
                  first sort key definition.
                  If those two sort key values are equal, then the position is determined by the relative magnitude
                  of their secondary sort key values, computed by evaluating the 
                  sort key function in the second sort key definition, and so on.</p>              
            </item>
            <item>
               <p>When a pair of corresponding sort key values of <code>$A</code> and <code>$B</code> are 
                  found to be not equal,
                  then <code>$A</code> precedes <code>$B</code> in the result sequence 
                  if both the following conditions are true, or if both conditions are false:</p>
                  <olist>
                     <item>
                        <p>The sort key value for <code>$A</code> is less than the sort key value for <code>$B</code>,
                           as defined below.</p>
                     </item>
                     <item>
                        <p>The <term>order direction</term> in the corresponding sort key definition
                        is <code>"ascending"</code>.</p>
                     </item>
                  </olist>
            </item>
            <item><p>If all the sort key values for <code>$A</code> and <code>$B</code> are pairwise equal, then 
               <code>$A</code> precedes <code>$B</code> in the result sequence if and only if
               <code>$A</code> precedes <code>$B</code> in the input sequence.</p>
               <note><p>That is, the sort is <emph>stable</emph>.</p></note>
            </item>
            <item>
               <p>Each sort key value for a given item is obtained by applying the sort key
               function of the corresponding sort key definition to that item. The result
               of this function is in the general case a sequence of atomic values.
               Two sort key values <code>$a</code> and <code>$b</code> are compared as follows:</p>
               <olist>
                  <item><p>Let <var>$C</var> be the collation in the corresponding
                     sort key definition.</p>
                  </item>
                  <item><p>Let <code>$REL</code> be the result of evaluating <code>op:lexicographic-compare($key($A), $key($B), $C)</code>
                     where <code>op:lexicographic-compare($a, $b, $C)</code> is defined as follows:</p>
                     <eg>if (empty($a) and empty($b)) then 0 
else if (empty($a)) then -1
else if (empty($b)) then +1
else let $rel = op:simple-compare(head($a), head($b), $C)
     return if ($rel eq 0)
            then op:lexicographic-compare(tail($a), tail($b), $C)
            else $rel</eg></item>
                  <item><p>Here <code>op:simple-compare($k1, $k2)</code> is defined as follows:</p>
                     <eg>if ($k1 instance of union(xs:string, xs:anyURI, xs:untypedAtomic)
    and $k2 instance of union(xs:string, xs:anyURI, xs:untypedAtomic))
then compare($k1, $k2, $C)
else if ($k1 eq $k2 or (is-NaN($k1) and is-NaN($k2))) then 0
else if (is-NaN($k1) or $k2 lt $k2) then -1
else +1</eg>
                     <note><p>This raises an error if two keys are not comparable, for example
                        if one is a string and the other is a number, or if both belong to a non-ordered
                        type such as <code>xs:QName</code>.</p></note></item>
                  <item><p>If <code>$REL</code> is zero, then the two sort key values are deemed
                     equal; if <code>$REL</code> is -1 then <code>$a</code> is deemed less than
                     <code>$b</code>, and if <code>$REL</code> is +1 then <code>$a</code> is deemed greater than
                     <code>$b</code></p></item>
               </olist>
            </item>
         </olist>
      </fos:rules>
      <fos:errors>
         <p>If the set of computed sort keys contains values that are not comparable using the <code>lt</code> operator then the sort 
            operation will fail with a type error (<xerrorref
               spec="XP" class="TY" code="0004"/>).
         </p>
      </fos:errors>
      <fos:notes>
         <p>XSLT and XQuery both provide native sorting capability, but earlier releases of XPath provided no sorting functionality
         for use in standalone environments.</p>
         <p>In addition there are cases where this function may be more flexible than the built-in sorting capability for XQuery or XSLT,
         for example when the sort key or collation is chosen dynamically, or when the sort key is a sequence of items rather than a single
         item.</p>
         <p>The results are compatible with the results of XSLT sorting (using <code>xsl:sort</code>) in the case where the sort key evaluates to a sequence of
         length zero or one, given the options <code>stable="yes"</code>.</p>
         <p>The results are compatible with the results of XQuery sorting (using the <code>order by</code> clause) in the case where the sort key evaluates to a sequence of
            length zero or one, given the options <code>stable</code>, <code>ascending</code>, and <code>empty least</code>.</p>
         <p>The function has been enhanced in 4.0 to allow multiple sort keys to be defined, each potentially with
         a different collation, and to allow sorting in descending order.</p>
         <p>The effect of the XQuery option <code>empty least|greatest</code>, which controls
         whether the empty sequence is sorted before or after all other values, can be achieved by adding an
         extra sort key definition that evaluates whether or not the actual sort key is empty (when sorting
         boolean values, <code>false</code> precedes <code>true</code>).</p>
         <p>Supplying too many items in the <code>$collation</code> and/or <code>$order</code> arguments
         is not an error; the excess values are ignored except for type-checking against the function
         signature.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>sort((1, 4, 6, 5, 3))</fos:expression>
               <fos:result>(1, 3, 4, 5, 6)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>sort((1, 4, 4e0, 6, 5, 3), order:="descending")</fos:expression>
               <fos:result>(6, 5, 4, 4e0, 3, 1)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>sort((1, -2, 5, 10, -10, 10, 8), (), abs#1)</fos:expression>
               <fos:result>(1, -2, 5, 8, 10, -10, 10)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>To sort a set of strings <code>$in</code> using Swedish collation:</p>
            <eg>let $SWEDISH := "http://www.w3.org/2013/collation/UCA?lang=se"
return sort($in, $SWEDISH)</eg>
         </fos:example>
         <fos:example>
            <p>To sort a sequence of employees by last name as the major sort key and first name as the minor sort key,
               using the default collation:
            </p>
            <eg>sort($employees, (), fn{name ! (last, first)})</eg>
         </fos:example>
         <fos:example>
            <p>To sort a sequence of employees first by increasing last name (using Swedish collation order)
               and then by decreasing salary:
            </p>
            <eg>let $SWEDISH := "http://www.w3.org/2013/collation/UCA?lang=se"
               return sort($employees, 
                           $SWEDISH, 
                           (fn{name/last}, fn{xs:decimal(salary)}), 
                           ("ascending", "descending"))</eg>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Substantially revised in 4.0 to allow multiple sort
            key definitions.</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="transitive-closure" prefix="fn">
      <fos:signatures>
         <fos:proto name="transitive-closure" return-type="function(node()) as node()*"> 
            <fos:arg name="step" type="function(node()) as node()*"/>
            <fos:arg name="min" type="xs:nonNegativeInteger?" default="1"/>
            <fos:arg name="max" type="xs:positiveInteger?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Given a function <var>F</var> that navigates from one node to other nodes, 
            returns a function that applies <var>F</var> repeatedly.</p>
      </fos:summary>
      <fos:rules>
         
         <p>The argument is a function <code>$step</code> that takes a single node as input, and returns a set of nodes as its result. 
            The result of the <code>fn:transitive-closure</code> function is a function <var>TC</var> that takes a 
            single node <var>N</var> as input, and returns all nodes that can be reached from
            <var>N</var> by applying <code>$step</code> repeatedly between <code>$min</code> and <code>$max</code> times (inclusive).</p>
         
         <p>Although <code>$step</code> may return any sequence of nodes, the result is treated as a set: the order of nodes
            in the sequence is ignored, and duplicates are ignored. The result of calling <var>TC</var> will always be
         a sequence of nodes in document order with no duplicates.</p>
         
         <p>The default value of <code>$min</code>, if the argument is not supplied or is set to an empty sequence,
            is 1 (one). If <code>$min</code> is zero, the result of calling <var>TC</var> will include the argument node
            <var>N</var>. If <code>$min</code> is greater than zero, the result will include <var>N</var> only if 
            <var>N</var> is reachable by a cyclic path involving between <code>$min</code> and <code>$max</code> steps.</p>
         
         <p>The default value of <code>$max</code>, if the argument is not supplied or is set to an empty sequence,
            is unbounded. In this situation the function <var>TC</var> continues execution until no further nodes
            are added to the result set. Note that if the <code>$step</code> function constructs new nodes, this
            can lead to non-termination. Specifying an explicit value for <code>$max</code> guarantees termination.</p>
         
 
    
      </fos:rules>
      <fos:notes>
         <p>Cycles in the data are not a problem, even if <code>$max</code> is unbounded; 
            the function stops searching when it finds no new nodes.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="data" id="transitive-closure-data"><![CDATA[document{<doc>
   <person id="0"/>
   <person id="1" manager="0"/>
   <person id="2" manager="0"/>
   <person id="3" manager="2"/>
   <person id="4" manager="2"/>
   <person id="5" manager="1"/>
   <person id="6" manager="3"/>
   <person id="7" manager="6"/>
   <person id="8" manager="6"/>
</doc>}]]>
         </fos:variable>
         <fos:variable name="direct-reports" id="transitive-closure-reports"><![CDATA[function($p as element(person)) as element(person)* {
   $p/../person[@manager=$p/@id]
}]]>
         </fos:variable>          
         <fos:example>
            <fos:test use="transitive-closure-data">
               <fos:expression><eg>let $tc := transitive-closure($direct-reports)
return $tc($data//person[@id="2"])/string(@id)</eg></fos:expression>
               <fos:result>("3", "4", "6", "7", "8")</fos:result>
            </fos:test>
            <fos:test use="transitive-closure-data">
               <fos:expression><eg>let $tc := transitive-closure($direct-reports, min:=0)
return $tc($data//person[@id="2"])/string(@id)</eg></fos:expression>
               <fos:result>("2", "3", "4", "6", "7", "8")</fos:result>
            </fos:test>   
            <fos:test use="transitive-closure-data">
               <fos:expression><eg>let $tc := transitive-closure($direct-reports, max:=2)
return $tc($data//person[@id="2"])/string(@id)</eg></fos:expression>
               <fos:result>("3", "4", "6")</fos:result>
            </fos:test>               
            <fos:test use="transitive-closure-data">
               <fos:expression><eg>let $tc := transitive-closure(function { child::* })
return $tc($data)/@id/string()</eg></fos:expression>
               <fos:result>("0", "1", "2", "3", "4", "5", "6", "7","8")</fos:result>
               <fos:postamble>The transitive closure of the child axis is the ancestor axis
               if <code>min=1</code>, or the ancestor-or-self axis if <code>min=0</code>.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The following example, given <code>$root</code> as the root of an XSLT stylesheet module, returns the URIs
            of all stylesheet modules reachable using <code>xsl:import</code> and <code>xsl:include</code> declarations:</p>
            <eg>let $tc := transitive-closure(function { document(//(xsl:import|xsl:include)/@href) }) 
return $tc($root) =!> document-uri()</eg>
            <p>This example uses the XSLT-defined <code>document()</code> function.</p>
         </fos:example>
         <fos:example>
            <p>The following example, given <code>$doc</code> as the root of a document consisting of nested sections with paths
               such as <code>article/section/section/section</code>, returns the headings of all level-2 and level-3 sections:</p>
            <eg>let $tc := transitive-closure(function { child::section }, min:=2, max:=3) 
return $tc($doc/article)/head</eg>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="apply" prefix="fn">
      <fos:signatures>
         <fos:proto name="apply" return-type="item()*">
            <fos:arg name="function" type="function(*)"/>
            <fos:arg name="arguments" type="array(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Makes a dynamic call on a function with an argument list supplied in the form of an array.</p>
      </fos:summary>
      <fos:rules>
         <p>The result of the function is obtained by invoking the supplied function <code>$function</code> with arguments
         taken from the members of the supplied array <code>$arguments</code>. The first argument of the function call is the first
         member of <code>$arguments</code>, the second argument is the second member of <code>$array</code>, and so on.</p>
         <p>The arity of the supplied function <code>$function</code> must be the same as the size of the array <code>$array</code>.</p>
         <p>The effect of calling <code>fn:apply($f, [$a, $b, $c, ...])</code> is the same as the effect of the dynamic function call 
            <code>$f($a, $b, $c, ....)</code>. For example, the function conversion rules are applied to the supplied arguments
            in the usual way.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised if the arity of the function <code>$function</code> is not the same as the size of the
            array <code>$array</code> (<errorref
               spec="FO" class="AP" code="0001"/>).
         </p>
      </fos:errors>
      <fos:notes>
         <p>The function is useful where the arity of a function item is not known statically.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>apply(concat#3, ["a", "b", "c"])</fos:expression>
               <fos:result>"abc"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The expression <code>apply($f, array:subarray(["a", "b", "c", "d", "e", "f"], 1, function-arity($f)))</code> 
               calls the supplied function <code>$f</code> supplying the number of arguments required by its arity.</p>
         </fos:example>
      </fos:examples>
   </fos:function>
   
   <fos:function name="op" prefix="fn">
      <fos:signatures>
         <fos:proto name="op" return-type="function(item()*, item()*) as item()*">
            <fos:arg name="operator" type="xs:string"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns a function whose effect is to apply a supplied binary operator to two arguments.</p>
      </fos:summary>
      <fos:rules>
         <p>The supplied operator must be one of:</p>
         <p><code>","</code>, <code>"and"</code>, <code>"or"</code>, <code>"+"</code>,
            <code>"-"</code>, <code>"*"</code>, <code>"div"</code>, <code>"idiv"</code>,
            <code>"mod"</code>, <code>"="</code>, <code>"&lt;"</code>, <code>"&lt;="</code>,
            <code>"&gt;"</code>, <code>">="</code>, <code>"!="</code>, <code>"eq"</code>,
            <code>"lt"</code>, <code>"le"</code>, <code>"gt"</code>, <code>"ge"</code>,
            <code>"ne"</code>, <code>"&lt;&lt;"</code>, <code>"&gt;&gt;"</code>,
            <code>"is"</code>, <code>"||"</code>, <code>"|"</code>, <code>"union"</code>,
            <code>"except"</code>, <code>"intersect"</code>, <code>"to"</code>,
            <code>"otherwise"</code></p>
         <p>The result of calling <code>fn:op("⊙")</code>, where <code>⊙</code> is one of the above operators, is
         the function represented by the XPath expression:</p>
         <p><code>function($x, $y) { $x ⊙ $y }</code></p>
         <p>For example, <code>op("+")</code> returns <code>function($x, $y) { $x + $y }</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised if the supplied argument is not one of the supported operators ([TODO: error code]).
         </p>
      </fos:errors>
      <fos:notes>
         <p>The function is useful in contexts where an arity-2 callback function needs to be supplied, and
            a standard operator meets the requirement.</p>
         <p>For example, the XSLT <code>xsl:map</code> instruction
            has an <code>on-duplicates</code> attribute that expects such a function. Specifying
         <code>on-duplicates="op(',')"</code> is equivalent to specifying 
         <code>on-duplicates="function($x, $y) { $x, $y }</code></p>
         <p>The function is also useful in cases where the choice of operator to apply is
         made dynamically.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>for-each-pair(21 to 25, 1 to 5, op("+"))</fos:expression>
               <fos:result>22, 24, 26, 28, 30</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>for-each-pair(21 to 25, 1 to 5, op("-"))</fos:expression>
               <fos:result>20, 20, 20, 20, 20</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-10-11.</fos:version>
      </fos:history>
   </fos:function>
   <!--<fos:function name="equivalent" prefix="fn" diff="add" at="2023-05-25">
      <fos:signatures>
         <fos:proto name="equivalent" return-type="xs:boolean">
            <fos:arg name="value1" type="item()*"/>
            <fos:arg name="value2" type="item()*"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary><p>Determines whether two values (sequences) are deemed equivalent for the purposes
         of testing set membership.</p></fos:summary>
      <fos:rules>
         <p>Two sequences are equivalent if they have the same number of items and the items are pairwise equivalent.</p>
         <note><p>The empty sequence is equivalent to itself.</p></note>
         <p>Two items <code>$P</code> and <code>$Q</code> are identical if one of the following conditions is true:</p>
         <ulist>
            <item><p>Both <code>$P</code> and <code>$Q</code> are nodes, and <code>$P is $Q</code>.</p></item>
            <item><p>Both <code>$P</code> and <code>$Q</code> are atomic values, and <code>atomic-equal($P, $Q)</code>
               is true.</p></item>
            <item><p>Both <code>$P</code> and <code>$Q</code> are arrays, both have the same number of members,
               and the members are pairwise equivalent.</p></item>
            <item><p>Both <code>$P</code> and <code>$Q</code> are maps, both have the same number of entries,
               and for every key <code>$K</code> contained in <code>$P</code>, the following are true:</p>
                  <ulist>
                     <item><p><code>map:contains($Q, $K)</code></p></item>
                     <item><p><code>equivalent(map:get($P, $K), map:get($Q, $K))</code></p></item>
                  </ulist>
            </item>
            <item><p>Both <code>$P</code> and <code>$Q</code> are function items, neither is a map nor an array,
            and both have the same function identity.</p></item>
         </ulist>
      </fos:rules>
      <fos:notes>
         <p>The <code>equivalent</code> relation (in constrast with other methods of comparing equality) has the
         following characteristics:</p>
         <ulist>
            <item>
               <p>It applies to any values (sequences) and always returns a true/false answer, never an error.</p>
            </item>
            <item>
               <p>It has no context dependencies.</p>
            </item>
            <item>
               <p>It is reflexive (<code>equivalent($A, $B)</code> implies <code>equivalent($B, $A)</code>.</p>
            </item>
            <item>
               <p>It is transitive (<code>equivalent($A, $B) and equivalent($B, $C)</code> implies <code>equivalent($A, $C)</code>.</p>
            </item>
         </ulist>
         <p>There are cases where two items that are deemed equivalent are nevertheless distinguishable:</p>
         <ulist>
            <item><p>For atomic values, the type annotation is disregarded: <code>xs:integer(1)</code>
               and <code>xs:decimal(1.0)</code> are considered equivalent. Moreover, an <code>xs:string</code>
               value is considered equivalent to an <code>xs:untypedAtomic</code> value representing the same
            sequence of characters.</p></item>
            <item><p>Positive and negative zero are considered equivalent.</p></item>
         </ulist>
         <p>The equivalence relation is the one chosen for deciding whether two values can co-exist as keys in a map,
         or as members of a set. [TODO: this anticipates generalization of maps and sets].</p>
      </fos:notes>
   </fos:function>-->
   <fos:function name="atomic-equal" prefix="fn" diff="chg" at="2023-01-25">
      <fos:signatures>
         <fos:proto name="atomic-equal" return-type="xs:boolean">
            <fos:arg name="value1" type="xs:anyAtomicType"/>
            <fos:arg name="value2" type="xs:anyAtomicType"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Determines whether two atomic values are equal, under the rules used for comparing keys in a map.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>fn:atomic-equal</code> is used to compare two atomic values for equality. This function
         has the following properties (which do not all apply to the <code>eq</code> operator):</p>
         <ulist>
            <item><p>Any two atomic values can be compared, regardless of their type.</p></item>
            <item><p>No dynamic error is ever raised (the result is either <code>true</code> or <code>false</code>).</p></item>
            <item><p>The result of the comparison never depends on the static or dynamic context.</p></item>
            <item><p>Every value (including <code>NaN</code>) is equal to itself.</p></item>
            <item><p>The comparison is symmetric: if <var>A</var> equals <var>B</var>, then <var>B</var> equals <var>A</var>.</p></item>
            <item><p>The comparison is transitive: if <var>A</var> equals <var>B</var> and <var>B</var> equals <var>C</var>,
               then <var>A</var> equals <var>C</var>.</p></item>
         </ulist>
         
         <p>The function returns <code>true</code> if and only if one of the following conditions is true:</p>

         <olist>
            <item>
               <p>All of the following conditions are true:</p>
               <olist>
                  <item>
                     <p><code>$value1</code> is an instance of <code>xs:string</code>, <code>xs:anyURI</code>, or <code>xs:untypedAtomic</code></p>
                  </item>
                  <item>
                     <p><code>$value2</code> is an instance of <code>xs:string</code>, <code>xs:anyURI</code>, or <code>xs:untypedAtomic</code></p>
                  </item>
                  <item>
                     <p>
                        <code>fn:codepoint-equal($value1, $value2)</code>
                     </p>
                  </item>
               </olist>
               <note>
                  <p>Strings are compared without any dependency on collations.</p>
               </note>
            </item>
            <item>
               <p>All of the following conditions are true:</p>
               <olist>
                  <item>
                     <p><code>$value1</code> is an instance of <code>xs:decimal</code>, <code>xs:double</code>, or <code>xs:float</code></p>
                  </item>
                  <item>
                     <p><code>$value2</code> is an instance of <code>xs:decimal</code>, <code>xs:double</code>, or <code>xs:float</code></p>
                  </item>
                  <item>
                     <p>One of the following conditions is true:</p>
                     <olist>
                        <item>
                           <p>Both <code>$value1</code> and <code>$value2</code> are <code>NaN</code></p>
                           <note>
                              <p><code>xs:double('NaN')</code> is the same key as <code>xs:float('NaN')</code></p>
                           </note>
                        </item>
                        <item>
                           <p>Both <code>$value1</code> and <code>$value2</code> are positive infinity</p>
                           <note>
                              <p><code>xs:double('INF')</code> is the same key as <code>xs:float('INF')</code></p>
                           </note>
                        </item>
                        <item>
                           <p>Both <code>$value1</code> and <code>$value2</code> are negative infinity</p>
                           <note>
                              <p><code>xs:double('-INF')</code> is the same key as <code>xs:float('-INF')</code></p>
                           </note>
                        </item>
                        <item>
                           <p><code>$value1</code> and <code>$value2</code> when converted to decimal numbers with no rounding or loss of precision
                           are mathematically equal.</p>
                           <note>
                              <p>Every instance of <code>xs:double</code>, <code>xs:float</code>, and <code>xs:decimal</code> can be represented
                              exactly as a decimal number provided enough digits are available both before and after the decimal point. Unlike the <code>eq</code>
                              relation, which converts both operands to <code>xs:double</code> values, possibly losing precision in the process, this
                              comparison is transitive.</p>
                           </note>
                           <note>
                              <p>Positive and negative zero compare equal.</p>
                           </note>
                        </item>
                     </olist>
                  </item>
               </olist>

            </item>

            <item>
               <p>All of the following conditions are true:</p>
               <olist>
                  <item>
                     <p><code>$value1</code> is an instance of <code>xs:date</code>, <code>xs:time</code>, <code>xs:dateTime</code>,
                     <code>xs:gYear</code>, <code>xs:gYearMonth</code>, <code>xs:gMonth</code>, <code>xs:gMonthDay</code>, or <code>xs:gDay</code></p>
                  </item>
                  <item>
                     <p><code>$value2</code> is an instance of <code>xs:date</code>, <code>xs:time</code>, <code>xs:dateTime</code>,
                     <code>xs:gYear</code>, <code>xs:gYearMonth</code>, <code>xs:gMonth</code>, <code>xs:gMonthDay</code>, or <code>xs:gDay</code></p>
                  </item>
                  <item>
                     <p>One of the following conditions is true:</p>
                     <olist>
                        <item>
                           <p>Both <code>$value1</code> and <code>$value2</code> have a timezone</p>
                        </item>
                        <item>
                           <p>Neither <code>$value1</code> nor <code>$value2</code> has a timezone</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>
                        <code>fn:deep-equal($value1, $value2)</code>
                     </p>
                     <note>
                        <p>The use of <code>deep-equal</code> rather than <code>eq</code> ensures that comparing values of different
                  types yields <code>false</code> rather than an error.</p>
                     </note>
                  </item>

               </olist>
               
            </item>
            
            <item>
               <p>All of the following conditions are true:</p>
               <olist>
                  <item>
                     <p><code>$value1</code> is an instance of <code>xs:boolean</code>, <code>xs:hexBinary</code>, <code>xs:base64Binary</code>,
                     <code>xs:duration</code>, <code>xs:QName</code>, or <code>xs:NOTATION</code></p>
                  </item>
                  <item>
                     <p><code>$value2</code> is an instance of <code>xs:boolean</code>, <code>xs:hexBinary</code>, <code>xs:base64Binary</code>,
                     <code>xs:duration</code>, <code>xs:QName</code>, or <code>xs:NOTATION</code></p>
                  </item>
                  <item>
                     <p>
                        <code>fn:deep-equal($value1, $value2)</code>
                     </p>
                     <note>
                        <p>The use of <code>deep-equal</code> rather than <code>eq</code> ensures that comparing values of different
                        types yields <code>false</code> rather than an error.</p>
                     </note>
                  </item>
               </olist>
            </item>
         </olist>

      </fos:rules>

      <fos:notes>
         <p>The internal function <code role="example">op:same-key</code> was introduced in an earlier version of this specification
            for comparing keys within a map.
            In this version of the specification, the functionality is unchanged, but the function is exposed so that it
            is available directly to applications.</p>
         
         <p>The function is used to assess whether two atomic
            values are considered to be duplicates when used as keys in a map. A map cannot
            contain two separate entries whose keys are <term>the same</term> as defined by this function. 
            The function is also used when matching keys in functions such as <code>map:get</code>
            and <code>map:remove</code>.</p>
         
         <p>The rules for comparing keys in a map are chosen to ensure that the comparison is:</p>
         <ulist>
            <item>
               <p><term>Context-free</term>: there is no dependency on the static or dynamic context</p>
            </item>
            <item>
               <p><term>Error-free</term>: any two atomic values can be compared, and the result is either <code>true</code> or <code>false</code>, never an error</p>
            </item>
            <item>
               <p><term>Transitive</term>: if <var>A</var> is the same key as <var>B</var>, and <var>B</var> is the same key as <var>C</var>, 
               then <var>A</var> is the same key as <var>C</var>.</p>
            </item>
         </ulist>
         <p>Two atomic values may be distinguishable even though they are equal under this comparison. For example: they may have
         different type annotations; dates and times may have different timezones; <code>xs:QName</code> values may have different
         prefixes.</p>
         <p>As always, any algorithm that delivers the right result is acceptable. For example, when testing whether an <code>xs:double</code>
         value <var>D</var> is the same key as an <code>xs:decimal</code> value that has <var>N</var> significant digits, it is not
         necessary to know all the digits in the decimal expansion of <var>D</var> to establish the result: computing the first <var>N+1</var> 
            significant digits (or indeed, simply knowing that there are more than <var>N</var> significant digits) is sufficient.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>atomic-equal(3, 3)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>atomic-equal(3, 3e0)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>atomic-equal(xs:double('NaN'), xs:float('NaN'))</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>atomic-equal("a", "a")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>atomic-equal("a", "A")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>atomic-equal("a", xs:untypedAtomic("a"))</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>atomic-equal(
  "https://www.w3.org/",
  xs:anyURI("https://www.w3.org/")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>atomic-equal(12, "12")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed for 4.0; the function is identical to the internal <code>op:same-key</code>
         function in 3.1</fos:version>
      </fos:history>
      
   </fos:function>

   <fos:function name="merge" prefix="map">
      <fos:signatures>
         <fos:proto name="merge" return-type="map(*)">
            <fos:arg name="maps" type="map(*)*" usage="inspection"/>
            <fos:arg name="options" type="map(*)" usage="inspection" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a map that combines the entries from a number of existing maps.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:merge</code>
            <phrase>returns a map</phrase> that
            is formed by combining the contents of the maps supplied in the <code>$maps</code>
            argument.</p>


         <p>Informally, the supplied maps are combined as follows:</p>

         <olist>
            <item>
               <p>There is one entry in the returned map for each distinct key present in the union
                  of the input maps, where two keys are distinct if they are not the <phrase><termref
                        def="dt-same-key">same key</termref></phrase>.</p>
            </item>
            <item>
               <p>If there are duplicate keys, that is, if two or more maps contain entries having the
                  <termref
                     def="dt-same-key"
                     >same key</termref>, then the way this is handled is
                  controlled by the second (<code>$options</code>) argument.</p>
            </item>
         </olist>


         <p>The definitive specification is as follows.</p>

         <olist>
            <item>
               <p>The effect of calling the single-argument function is the same as the effect of
            calling the two-argument function with an empty map as the value of <code>$options</code>.</p>
            </item>
            <item>
               <p>The <code>$options</code> argument can be used to control the way in which duplicate keys are handled.
               The <termref
                     def="option-parameter-conventions"
                  >option parameter conventions</termref> apply.
            </p>
            </item>
            <item>
               <p>The entries that may appear in the <code>$options</code> map are as follows:</p>

               <fos:options>
                  <fos:option key="duplicates">
                     <fos:meaning>Determines the policy for handling duplicate keys: specifically, the action to be
                        taken if two maps in the input sequence <code>$maps</code> contain entries with key values
                        <var>K1</var> and <var>K2</var> where <var>K1</var> and <var>K2</var> are the 
                        <termref
                           def="dt-same-key">same key</termref>.
                     </fos:meaning>
                     <fos:type>xs:string</fos:type>
                     <fos:default>use-first</fos:default>
                     <fos:values>
                        <fos:value value="reject"
                              >
                           An error is raised <errorref class="JS"
                              code="0003"
                           /> if duplicate keys are encountered.
                        </fos:value>
                        <fos:value value="use-first"
                              >
                           If duplicate keys are present, all but the first of a set of duplicates are ignored, 
                           where the ordering is based on the order of maps in the <code>$maps</code> argument.
                        </fos:value>
                        <fos:value value="use-last"
                              >
                           If duplicate keys are present, all but the last of a set of duplicates are ignored, 
                           where the ordering is based on the order of maps in the <code>$maps</code> argument.
                        </fos:value>
                        <fos:value value="use-any"
                              >
                           If duplicate keys are present, all but one of a set of duplicates are ignored, 
                           and it is <termref
                              def="implementation-dependent"
                           >implementation-dependent</termref>
                           which one is retained. 
                        </fos:value>
                        <fos:value value="combine"
                              >
                           If duplicate keys are present, the result map includes an entry for the key whose 
                           associated value is the sequence-concatenation of all the values associated with the key, 
                           retaining order based on the order of maps in the <code>$maps</code> argument.
                           The key value in the result map that corresponds to such a set of duplicates must
                           be the <termref
                              def="dt-same-key"
                              >same key</termref> as each of the duplicates, but it is
                           otherwise unconstrained: for example if the duplicate keys are <code>xs:byte(1)</code>
                           and <code>xs:short(1)</code>, the key in the result could legitimately be <code>xs:long(1)</code>.
                        </fos:value>
                     </fos:values>
                  </fos:option>
               </fos:options>

               <!--<table border="1" cellpadding="1" summary="options for the map:merge function">
                  <thead>
                     <tr>
                        <th>Key</th>
                        <th>Value</th>
                        <th>Meaning</th>
                     </tr>
                  </thead>
                  <tbody>
                     
                     
                     <tr>
                        <td rowspan="6">
                           <code>duplicates</code>
                        </td>
                        <td colspan="2">Determines the policy for handling duplicate keys: specifically, the action to be
                           taken if two maps in the input sequence <code>$maps</code> contain entries with key values
                           <var>K1</var> and <var>K2</var> where <var>K1</var> and <var>K2</var> are the <termref def="dt-same-key">same key</termref>.
                           The required type is <code>xs:string</code>. The default value is <code>use-first</code>.</td>
                     </tr>
                     <tr>
                        <td>
                           <code>reject</code>
                        </td>
                        <td>An error is raised <errorref class="JS" code="0003"/> if duplicate keys are encountered.</td>
                     </tr>
                     <tr>
                        <td>
                           <code>use-first</code>
                        </td>
                        <td>If duplicate keys are present, all but the first of a set of duplicates are ignored, 
                           where the ordering is based on the order of maps in the <code>$maps</code> argument.</td>
                     </tr>
                     <tr>
                        <td>
                           <code>use-last</code>
                        </td>
                        <td>If duplicate keys are present, all but the last of a set of duplicates are ignored, 
                           where the ordering is based on the order of maps in the <code>$maps</code> argument.</td>
                     </tr>
                     <tr>
                        <td>
                           <code>combine</code>
                        </td>
                        <td>If duplicate keys are present, the result map includes an entry for the key whose 
                           associated value is the sequence-concatenation of all the values associated with the key, 
                           retaining order based on the order of maps in the <code>$maps</code> argument.

                           The key value in the result map that corresponds to such a set of duplicates must
                           be the <termref def="dt-same-key">same key</termref> as each of the duplicates, but it is
                           otherwise unconstrained: for example if the duplicate keys are <code>xs:byte(1)</code>
                           and <code>xs:short(1)</code>, the key in the result could legitimately be <code>xs:long(1)</code>.
                        </td>
                     </tr>
                     <tr>
                        <td>
                           <code>use-any</code>
                        </td>
                        <td>If duplicate keys are present, all but one of a set of duplicates are ignored, 
                           and it is <termref def="implementation-dependent">implementation-dependent</termref>
                           which one is retained. 
                        </td>
                     </tr>
                     
                     
                   
                     
                  </tbody>
               </table>-->
            </item>
         </olist>
         <p>The result of the function call <code>map:merge($MAPS, $OPTIONS)</code>
         is defined to be consistent with the result of the expression:</p>

         <eg><![CDATA[
let $FOJS0003 := QName("http://www.w3.org/2005/xqt-errors", "FOJS0003"),

$duplicates-handler := map {
  "use-first":   function($a, $b) {$a},
  "use-last":    function($a, $b) {$b},
  "combine":     function($a, $b) {$a, $b},
  "reject":      function($a, $b) {fn:error($FOJS0003)},
  "use-any": function($a, $b) {fn:random-number-generator()?permute(($a, $b))[1]}
},

$combine-maps := function($A as map(*), $B as map(*), $deduplicator as function(*)) {
    fold-left(map:keys($B), $A, function($z, $k) { 
        if (map:contains($z, $k))
        then map:put($z, $k, $deduplicator($z($k), $B($k)))
        else map:put($z, $k, $B($k))
    })
}
return fold-left($MAPS, map{}, 
    $combine-maps(?, ?, $duplicates-handler(($OPTIONS?duplicates, "use-first")[1]))]]></eg>

         <note>
            <p>By way of explanation, <code>$combine-maps</code> is a function that combines
            two maps by iterating over the keys of the second map, adding each key and its corresponding
            value to the first map as it proceeds. The second call of <code>fn:fold-left</code>
            in the <code>return</code> clause then iterates over the maps supplied in the call
            to <code>map:merge</code>, accumulating a single map that absorbs successive maps
            in the input sequence by calling <code>$combine-maps</code>.</p>


            <p>This algorithm processes the supplied maps in a defined order, but processes the keys within
         each map in implementation-dependent order.</p>

            <p>The use of <code>fn:random-number-generator</code> represents one possible conformant
         implementation for <code>"duplicates":"use-any"</code>, but it is not the only conformant
         implementation and is not intended to be a realistic implementation. The purpose of this
         option is to allow the implementation to use whatever strategy is most efficient; for example,
         if the input maps are processed in parallel, then specifying <code>"duplicates":"use-any"</code>
         means that the implementation does not need to keep track of the original order of the sequence of input
         maps.</p>

         </note>


      </fos:rules>
      <fos:errors>
         <p>An error is raised <errorref spec="FO" class="JS" code="0003"
               /> if the value of 
          <code>$options</code> indicates that duplicates are to be rejected, and a duplicate key is encountered.</p>
         <p>An error is raised <errorref spec="FO" class="JS" code="0005"
               /> if the value of 
          <code>$options</code> includes an entry whose key is defined 
          in this specification, and whose value is not a permitted value for that key.</p>
      </fos:errors>

      <fos:notes>
         <p>If the input is an empty sequence, the result is an empty map.</p>
         <p>If the input is a sequence of length one, the result map is 
            <phrase>indistinguishable from the supplied map</phrase>.</p>
         <p>There is no requirement that the supplied input maps should have the same or compatible
            types. The type of a map (for example <code>map(xs:integer, xs:string)</code>) is
            descriptive of the entries it currently contains, but is not a constraint on how the map
            may be combined with other maps.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="week" id="v-map-merge-week"
            select="map{0:&quot;Sonntag&quot;, 1:&quot;Montag&quot;, 2:&quot;Dienstag&quot;,&#xa;     3:&quot;Mittwoch&quot;, 4:&quot;Donnerstag&quot;, 5:&quot;Freitag&quot;, 6:&quot;Samstag&quot;}"/>
         <fos:example>
            <fos:test>
               <fos:expression>map:merge(())</fos:expression>
               <fos:result>map{}</fos:result>
               <fos:postamble>Returns an empty map</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg>map:merge((
  map:entry(0, "no"),
  map:entry(1, "yes")
))</eg></fos:expression>
               <fos:result>map{0:"no", 1:"yes"}</fos:result>
               <fos:postamble>Returns a map with two entries</fos:postamble>
            </fos:test>
            <fos:test use="v-map-merge-week">
               <fos:expression><eg>map:merge((
  ($week, map { 7: "Unbekannt" })
)</eg></fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag", 7:"Unbekannt"}</fos:result>
               <fos:postamble>The value of the existing map is unchanged; the <phrase>returned map 
                  contains</phrase> all the entries from <code>$week</code>, supplemented with an additional
                  entry.</fos:postamble>
            </fos:test>
            <fos:test use="v-map-merge-week">
               <fos:expression><eg>map:merge(
  ($week, map { 6: "Sonnabend" }),
  map { "duplicates": "use-last" }
)</eg></fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Sonnabend"}</fos:result>
               <fos:postamble>The value of the existing map is unchanged; the returned map
                  contains all the entries from <code>$week</code>, with one entry replaced by a
                  new entry. Both input maps contain an entry with the key <code>6</code>; the
                  one used in the result is the one that comes last in the input
                  sequence.</fos:postamble>
            </fos:test>
            <fos:test use="v-map-merge-week">
               <fos:expression><eg>map:merge(
  ($week, map { 6: "Sonnabend" }),
  map { "duplicates": "use-first" }
)</eg></fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag"}</fos:result>
               <fos:postamble>The value of the existing map is unchanged; the returned map
                  contains all the entries from <code>$week</code>, with one entry replaced by a
                  new entry. Both input maps contain an entry with the key <code>6</code>; the
                  one used in the result is the one that comes first in the input
                  sequence.</fos:postamble>
            </fos:test>
            <fos:test use="v-map-merge-week">
               <fos:expression><eg>map:merge(
  ($week, map { 6: "Sonnabend" }),
  map { "duplicates": "combine" }
)</eg></fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:("Samstag", "Sonnabend")}</fos:result>
               <fos:postamble>The value of the existing map is unchanged; the returned map
                  contains all the entries from <code>$week</code>, with one entry replaced by a
                  new entry. Both input maps contain an entry with the key <code>6</code>; the
                  entry that appears in the result is the sequence-concatenation of the entries
                  in the input maps, retaining order.</fos:postamble>
            </fos:test>

         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="of-pairs" prefix="map">
      <fos:signatures>
         <fos:proto name="of-pairs" return-type="map(*)">
            <fos:arg name="pairs" 
                     type="record(key as xs:anyAtomicType, value as item()*, *)*" 
                     usage="inspection"
                     example="map{'key':'n','value':false()},map{'key':'y','value':true()}"/>
            <fos:arg name="combine" type="function(item()*, item()*) as item()*" usage="inspection" default="fn:op(',')"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a map that combines data from a sequence of 
            <termref def="dt-key-value-pair-map">key-value pair maps</termref>.</p>
      </fos:summary>
      <fos:rules>
         
         <p>The function <code>map:of-pairs</code>
            <phrase>returns a map</phrase> that
            is formed by combining <termref def="dt-key-value-pair-map">key-value pair maps</termref> supplied in the 
            <code>$key-value-pairs</code>
            argument.</p>
         
         <p>The optional <code>$combine</code> argument can be used to define how
         duplicate keys should be handled. The default is to form the sequence concatenation 
         of the corresponding values, retaining their order in the input sequence.</p>
         
         <p>The effect of the function is equivalent to the expression:</p>
         <eg>map:build($key-value-pairs, fn($kvp) { $kvp?key }, fn($kvp) { $kvp?value }, $combine)</eg>


      </fos:rules>
      <fos:errors>
         <p>The function can be made to fail with a dynamic error in the event that
         duplicate keys are present in the input sequence by supplying a <code>$combine</code>
         function that invokes the <code>fn:error</code> function.</p>
      </fos:errors>

      <fos:notes>
         <p>If the input is an empty sequence, the result is an empty map.</p>
         <p>There is no requirement that the supplied key-value pairs should have the same or compatible
            types. The type of a map (for example <code>map(xs:integer, xs:string)</code>) is
            descriptive of the entries it currently contains, but is not a constraint on how the map
            may be combined with other maps.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="week" id="v-map-of-week"
            select="map { 0: &quot;Sonntag&quot;, 1: &quot;Montag&quot;, 2: &quot;Dienstag&quot;,&#xa;     3: &quot;Mittwoch&quot;, 4: &quot;Donnerstag&quot;, 5: &quot;Freitag&quot;, 6 :&quot;Samstag&quot; }"/>
         <fos:example>
            <fos:test>
               <fos:expression>map:of-pairs(())</fos:expression>
               <fos:result>map{}</fos:result>
               <fos:postamble>Returns an empty map</fos:postamble>
            </fos:test>
            <fos:test use="v-map-of-week">
               <fos:expression>map:of-pairs(map:pairs($week))</fos:expression>
               <fos:result>$week</fos:result>
               <fos:postamble>The function <code>map:of-pairs</code> is the inverse of
                  <code>map:pairs</code>.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg><![CDATA[map:of-pairs((
  map { "key": 0, "value": "no" },
  map { "key": 1, "value": "yes" }
))]]></eg></fos:expression>
               <fos:result>map{0:"no", 1:"yes"}</fos:result>
               <fos:postamble>Returns a map with two entries</fos:postamble>
            </fos:test>
            <fos:test use="v-map-of-week">
               <fos:expression><eg>map:of-pairs((
  map:pairs($week),
  map { "key": 7, "value": "Unbekannt" }
))</eg></fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag", 7:"Unbekannt"}</fos:result>
               <fos:postamble>The value of the existing map is unchanged; the returned map 
                  contains all the entries from <code>$week</code>, supplemented with an additional
                  entry.</fos:postamble>
            </fos:test>
            <fos:test use="v-map-of-week">
               <fos:expression><eg>map:of-pairs((
  map:pairs($week),
  map { "key": 6, "value": "Sonnabend" }
))</eg></fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:("Samstag", "Sonnabend")}</fos:result>
               <fos:postamble>The value of the existing map is unchanged; the returned map
                  contains all the entries from <code>$week</code>, with one entry replaced by a
                  new entry. Both input maps contain an entry with the key <code>6</code>; the
                  one used in the result combines the two supplied values into a single sequence.</fos:postamble>
            </fos:test>
            <fos:test use="v-map-of-week">
               <fos:expression><eg>map:of-pairs(
  (map:pairs($week),
   map { "key": 6, "value": "Sonnabend" }),
  function($old, $new)  { $new }
)</eg></fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Sonnabend"}</fos:result>
               <fos:postamble>The value of the existing map is unchanged; the returned map
                  contains all the entries from <code>$week</code>, with one entry replaced by a
                  new entry. Both input maps contain an entry with the key <code>6</code>; the
                  supplied <code>$combine</code> function ensures that the one used in the result 
                  is the one that comes last in the input sequence.</fos:postamble>
            </fos:test>
            <fos:test use="v-map-of-week">
               <fos:expression><eg>map:of-pairs(
  (map:pairs($week),
   map { "key": 6, "value": "Sonnabend" }),
  function($old, $new) { `{$old}|{$new}` }
)</eg></fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag|Sonnabend"}</fos:result>
               <fos:postamble>In the result map, the value for key <code>6</code> is obtained by concatenating the values
                  from the two input maps, with a separator character.</fos:postamble>
            </fos:test>
           

         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="keys" prefix="map">
      <fos:signatures>
         <fos:proto name="keys" return-type="xs:anyAtomicType*">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
            <fos:arg name="predicate" type="function(item()*) as xs:boolean" default="true#0"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic-wrt-ordering</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence containing keys present in a map</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:keys</code> takes any <termref def="dt-map"
               >map</termref>
            as its <code>$map</code> argument. The <code>$predicate</code> function, if
            supplied, takes the value of the corresponding map entry as an argument, and the
            result is a sequence containing the keys of those entries for which the function
            returns <code>true</code> in <termref
               def="implementation-dependent">implementation-dependent</termref> order.</p>
         <p>The function is <term>non-deterministic with respect to ordering</term>
            (see <specref
               ref="properties-of-functions"
            />). This means that two calls with the same argument
            are not guaranteed to produce the results in the same order.</p>
         <p>More formally, the function returns the result of the following expression:</p>
         <eg>
map:for-each(
   $map,
   function($key, $value) {
      if($predicate($value)) { $key }
   }
)
         </eg>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>map:keys(map{1:"yes", 2:"no"})</fos:expression>
               <fos:result allow-permutation="true">(1,2)</fos:result>
               <fos:postamble>The result is in <termref def="implementation-dependent"
                     >implementation-dependent</termref> order.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>
let $numbers := map {
  0: 'zero',
  1: 'one',
  2: 'two',
  3: 'three'
}
return map:keys($numbers, function { . = ('two', 'three') })
               </eg></fos:expression>
               <fos:result>(2, 3)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>
let $square := map:merge(
  (1 to 5) ! map:entry(., . * .)
)
return map:keys($square, function { . &gt; 5 and . &lt; 20 })
               </eg></fos:expression>
               <fos:result>(3, 4)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>
let $birthdays := map {
  'jack': xs:date('1980-12-31'),
  'joel': xs:date('1969-11-10'),
  'john': xs:date('2001-05-05')
}
return map:keys($birthdays, function($date) {
  year-from-date($date) = 1969
})
               </eg></fos:expression>
               <fos:result>"joel"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   
   <fos:function name="values" prefix="map">
      <fos:signatures>
         <fos:proto name="values" return-type="item()*">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic-wrt-ordering</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence containing all the values present in a map, in unpredictable order.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:values</code> takes any <termref def="dt-map"
            >map</termref>
            as its <code>$map</code> argument and returns the values that are present in the map as
            a sequence, in <termref
               def="implementation-dependent">implementation-dependent</termref> order.</p>
         <p>The function is <term>non-deterministic with respect to ordering</term>
            (see <specref
               ref="properties-of-functions"
            />). This means that two calls with the same argument
            are not guaranteed to produce the results in the same order.</p>
         <p>The effect of the function is equivalent to <code>map:for-each($map, fn($k, $v) { $v })</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>map:values(
  map{ 1: "yes", 2: "no" }
)</eg></fos:expression>
               <fos:result allow-permutation="true">("yes", "no")</fos:result>
               <fos:postamble>The result is in <termref def="implementation-dependent"
                  >implementation-dependent</termref> order.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg>map:values(
  map {
    1: ("red", "green"),
    2: ("blue", "yellow"),
    3:()
  }
)</eg></fos:expression>
               <fos:result allow-permutation="true">("red", "green", "blue", "yellow")</fos:result>
               <fos:postamble>The result is in <termref def="implementation-dependent"
                  >implementation-dependent</termref> order.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   
   <fos:function name="entries" prefix="map">
      <fos:signatures>
         <fos:proto name="entries" return-type="map(*)*">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic-wrt-ordering</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence containing all the key-value pairs present in a map, each represented
            as a <termref def="dt-singleton-map"/>.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:entries</code> takes any <termref def="dt-map"
            >map</termref>
            as its <code>$map</code> argument and returns the key-value pairs that are present in the map as
            a sequence of <termref def="dt-singleton-map">singleton maps</termref>, in <termref
               def="implementation-dependent">implementation-dependent</termref> order.</p>
         
         <p>The function is <term>non-deterministic with respect to ordering</term>
            (see <specref
               ref="properties-of-functions"
            />). This means that two calls with the same argument
            are not guaranteed to produce the results in the same order.</p>
         <p>The effect of the function is equivalent to the expression:</p>
         <eg>map:for-each($map, fn($k, $v) { map { $k: $v } })</eg>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>map:entries(
  map { 1: "yes", 2: "no" }
)</eg></fos:expression>
               <fos:result allow-permutation="true">(map{1:"yes"}, map{2:"no"})</fos:result>
               <fos:postamble>The result sequence is in <termref def="implementation-dependent"
                  >implementation-dependent</termref> order.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="pairs" prefix="map">
      <fos:signatures>
         <fos:proto name="pairs" return-type="record(key as xs:anyAtomicType, value as item()*)*">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic-wrt-ordering</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence containing all the key-value pairs present in a map, each represented
         as a <termref def="dt-key-value-pair-map"/>.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:pairs</code> takes any <termref def="dt-map"
            >map</termref>
            as its <code>$map</code> argument and returns the keys that are present in the map as
            a sequence of <termref def="dt-key-value-pair-map">key-value pair maps</termref>, in <termref
               def="implementation-dependent">implementation-dependent</termref> order.</p>
         <p>A key-value pair map is an instance of type <code>record(key as xs:anyAtomicType, value as item()*)</code>:
         that is a map with two entries, one (with key <code>"key"</code>) holding the key,
         and the other (with key <code>"value"</code>) holding the value.</p>
         <p>The function is <term>non-deterministic with respect to ordering</term>
            (see <specref
               ref="properties-of-functions"
            />). This means that two calls with the same argument
            are not guaranteed to produce the results in the same order.</p>
         <p>The effect of the function is equivalent to the expression:</p>
         <eg>map:for-each($map, fn($k, $v) { map { "key": $k, "value": $v } })</eg>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>map:pairs(
  map { 1: "yes", 2: "no" }
)</eg></fos:expression>
               <fos:result allow-permutation="true">(map{"key":1, "value":"yes"}, map{"key":2, "value":"no"})</fos:result>
               <fos:postamble>The result is in <termref def="implementation-dependent"
                  >implementation-dependent</termref> order.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="contains" prefix="map">
      <fos:signatures>
         <fos:proto name="contains" return-type="xs:boolean">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
            <fos:arg name="key" type="xs:anyAtomicType"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Tests whether a supplied map contains an entry for a given key</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:contains</code> returns <code>true</code> if the <termref def="dt-map"
               >map</termref> supplied as <code>$map</code> contains an entry with the <termref
                  def="dt-same-key">same key</termref> as <code>$key</code>; otherwise it returns <code>false</code>.</p>
      </fos:rules>

      <fos:examples>
         <fos:variable name="week" id="v-map-contains-week"
            select="map{0:&quot;Sonntag&quot;, 1:&quot;Montag&quot;, 2:&quot;Dienstag&quot;,&#xa;     3:&quot;Mittwoch&quot;, 4:&quot;Donnerstag&quot;, 5:&quot;Freitag&quot;, 6:&quot;Samstag&quot;}"/>
         <fos:example>
            <fos:test use="v-map-contains-week">
               <fos:expression>map:contains($week, 2)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test use="v-map-contains-week">
               <fos:expression>map:contains($week, 9)</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>map:contains(map{}, "xyz")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>map:contains(map{"xyz":23}, "xyz")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>map:contains(map{"abc":23, "xyz":()}, "xyz")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="get" prefix="map">
      <fos:signatures>
         <fos:proto name="get" return-type="item()*">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
            <fos:arg name="key" type="xs:anyAtomicType"/>
            <fos:arg name="fallback" type="function(xs:anyAtomicType) as item()*" default="void#1"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the value associated with a supplied key in a given map.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:get</code> attempts to find an entry within the <termref
               def="dt-map"
               >map</termref> supplied as <code>$map</code> that has 
            the <termref
               def="dt-same-key"
               >same key</termref> as <code>$key</code>. If there is such an entry, it returns the associated value;
            <phrase diff="chg" at="2022-12-16">if not, it invokes the supplied <code>$fallback</code> function, supplying
            the requested <code>$key</code> value as the argument, and returns the result of this call.
               The default <code>$fallback</code> function always returns an empty sequence.</phrase></p>

      </fos:rules>
      <fos:notes>
         <p>A return value of <code>()</code> from <code>map:get</code> could indicate that
            the key is present in the map with an associated value of <code>()</code>, or it could
            indicate that the key is not present in the map. The two cases can be distinguished by
            calling <code>map:contains</code><phrase diff="add" at="2022-12-16">, or by using
            a <code>$fallback</code> function to return a value known never to appear in the map</phrase>.</p>
         
         <p diff="add" at="2022-12-16">The <code>$fallback</code> function can be used in a number of ways:</p>
         
         <ulist diff="add" at="2022-12-16">
            <item><p>It might return a conventional value such as <code>NaN</code> to indicate that no matching
            key was found.</p></item>
            <item><p>It might raise a dynamic error, by means of a call on <code>fn:error</code>.</p></item>
            <item><p>It might compute a result algorithmically. For example, if the map holds a table of
            abbreviations, such as <code>map{'CA':'Canada', 'UK':'United Kingdom', 'US':'United States'}</code>,
            then specifying <code>fallback := fn:identity#1</code> has the effect that the key value is returned
            unchanged if it is not found in the map.</p></item>
         </ulist>

         <p>Invoking the <termref def="dt-map"
               >map</termref> as a function item has the same effect
            as calling <code>get</code> <phrase diff="add" at="2022-12-16">with no <code>$fallback</code>
            function</phrase>: that is, when <code>$map</code> is a map, the expression
               <code>$map($K)</code> is equivalent to <code>map:get($map, $K)</code>. Similarly, the
            expression <code>map:get(map:get(map:get($map, 'employee'), 'name'), 'first')</code> can
            be written as <code>$map('employee')('name')('first')</code>.</p>

      </fos:notes>
      <fos:examples>
         <fos:variable name="week" id="v-map-get-week"
            select="map{0:&quot;Sonntag&quot;, 1:&quot;Montag&quot;, 2:&quot;Dienstag&quot;,&#xa;     3:&quot;Mittwoch&quot;, 4:&quot;Donnerstag&quot;, 5:&quot;Freitag&quot;, 6:&quot;Samstag&quot;}"/>
         <fos:example>
            <fos:test use="v-map-get-week">
               <fos:expression>map:get($week, 4)</fos:expression>
               <fos:result>"Donnerstag"</fos:result>
            </fos:test>
            <fos:test use="v-map-get-week">
               <fos:expression>map:get($week, 9)</fos:expression>
               <fos:result>()</fos:result>
               <fos:postamble>When the key is not present, the function returns an empty
                  sequence.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression>map:get(map:entry(7,()), 7)</fos:expression>
               <fos:result>()</fos:result>
               <fos:postamble>An empty sequence as the result can also signify that the key is
                  present and the associated value is an empty sequence.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg>map { 1: "single", 2: "double", 3: "triple" }
=> map:get(10, function { . || "-fold" })</eg></fos:expression>
               <fos:result>"10-fold"</fos:result>
               <fos:postamble>The map holds special cases; the fallback function handles other cases.</fos:postamble>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="find" prefix="map">
      <fos:signatures>
         <fos:proto name="find" return-type="array(*)">
            <fos:arg name="input" type="item()*" usage="inspection"/>
            <fos:arg name="key" type="xs:anyAtomicType"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Searches the supplied input sequence and any contained maps and arrays for a map entry with the supplied key,
            and returns the corresponding values.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:find</code> searches the sequence supplied as <code>$input</code>
         looking for map entries whose key is the <termref
               def="dt-same-key"
            >same key</termref>
         as <code>$key</code>. The associated value in any such map entry (each being in general a sequence)
         is returned as a member of the result array.</p>

         <p>The search processes the <code>$input</code> sequence using the following recursively defined rules 
            (any equivalent algorithm may be used provided it delivers
            the same result, respecting those rules that constrain the order of the result):</p>

         <olist>
            <item>
               <p>To process a sequence, process each of its items in order.</p>
            </item>
            <item>
               <p>To process an item that is an array, process each of its members in order 
               (each member is, in general, a sequence).</p>
            </item>
            <item>
               <p>To process an item that is a map, then for each key-value entry (<var>K</var>, <var>V</var>)
               in the map (in <termref
                     def="implementation-dependent"
                  >implementation-dependent</termref> order)
               perform both of the following steps, in order:</p>
               <olist>
                  <item>
                     <p>If <var>K</var> is the <termref def="dt-same-key"
                           >same key</termref> as <code>$key</code>, 
                  then add <var>V</var> as a new member to the end of the result array.</p>
                  </item>
                  <item>
                     <p>Process <var>V</var> (which is, in general, a sequence).</p>
                  </item>
               </olist>
            </item>
            <item>
               <p>To process an item that is neither a map nor an array, do nothing. (Such items are ignored).</p>
            </item>
         </olist>

      </fos:rules>
      <fos:notes>
         <p>If <code>$input</code> is an empty sequence, map, or array, or if the requested <code>$key</code> is not found,
            the result will be a zero-length array.</p>

      </fos:notes>
      <fos:examples>
         <fos:variable name="responses" id="v-map-find-responses"
            select="[map{0:'no', 1:'yes'}, map{0:'non', 1:'oui'}, &#xa;                  map{0:'nein', 1:('ja', 'doch')}]"/>
         <fos:example>
            <fos:test use="v-map-find-responses">
               <fos:expression>map:find($responses, 0)</fos:expression>
               <fos:result>['no', 'non', 'nein']</fos:result>
            </fos:test>
            <fos:test use="v-map-find-responses">
               <fos:expression>map:find($responses, 1)</fos:expression>
               <fos:result>['yes', 'oui', ('ja', 'doch')]</fos:result>
            </fos:test>
            <fos:test use="v-map-find-responses">
               <fos:expression>map:find($responses, 2)</fos:expression>
               <fos:result>[]</fos:result>
            </fos:test>

         </fos:example>
         <fos:variable name="inventory" id="v-map-find-inventory"
            select='map{"name":"car", "id":"QZ123", &#xa;      "parts": [map{"name":"engine", "id":"YW678", "parts":[]}]}'/>
         <fos:example>
            <fos:test use="v-map-find-inventory">
               <fos:expression>map:find($inventory, "parts")</fos:expression>
               <fos:result>[[map{"name":"engine", "id":"YW678", "parts":[]}], []]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="put" prefix="map">
      <fos:signatures>
         <fos:proto name="put" return-type="map(*)">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
            <fos:arg name="key" type="xs:anyAtomicType"/>
            <fos:arg name="value" type="item()*" usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a map containing all the contents of the supplied map, but with an additional entry, which replaces
         any existing entry for the same key.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:put</code> returns <phrase>a <termref def="dt-map"
               >map</termref> that</phrase> contains all entries from the supplied <code>$map</code>,
            with the exception of any entry whose key is the <termref
               def="dt-same-key"
               >same key</termref> as <code>$key</code>, together with a new
         entry whose key is <code>$key</code> and whose associated value is <code>$value</code>.</p>

         <p>The effect of the function call <code>map:put($MAP, $KEY, $VALUE)</code> is equivalent
         to the result of the following steps:</p>

         <olist>
            <item>
               <p>
                  <code>let $MAP2 := map:remove($MAP, $KEY)</code>
               </p>
               <p>This returns a map in which all entries with the same key as <code>$KEY</code> have been removed.</p>
            </item>
            <item>
               <p>Construct and return a map containing:</p>
               <olist>
                  <item>
                     <p>All the entries (key/value pairs) in <code>$MAP2</code>, and</p>
                  </item>
                  <item>
                     <p>The entry <code>map:entry($KEY, $VALUE)</code></p>
                  </item>
               </olist>
            </item>
         </olist>

      </fos:rules>

      <fos:notes>
         <p>There is no requirement that the type of <code>$key</code> and <code>$value</code> be consistent with the types
         of any existing keys and values in the supplied map.</p>

      </fos:notes>

      <fos:examples>
         <fos:variable name="week" id="v-map-put-week"
            select="map{0:&quot;Sonntag&quot;, 1:&quot;Montag&quot;, 2:&quot;Dienstag&quot;,&#xa;       3:&quot;Mittwoch&quot;, 4:&quot;Donnerstag&quot;, 5:&quot;Freitag&quot;, 6:&quot;Samstag&quot;}"/>
         <fos:example>
            <fos:test use="v-map-put-week">
               <fos:expression>map:put($week, 6, "Sonnabend")</fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Sonnabend"}</fos:result>
            </fos:test>
            <fos:test use="v-map-put-week">
               <fos:expression>map:put($week, -1, "Unbekannt")</fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag", -1:"Unbekannt"}</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   
   
   
   <fos:function name="entry" prefix="map">
      <fos:signatures>
         <fos:proto name="entry" return-type="map(*)">
            <fos:arg name="key" type="xs:anyAtomicType"/>
            <fos:arg name="value" type="item()*" usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p><phrase>Returns</phrase> a <termref def="dt-singleton-map"/> that 
            represents a single key-value pair.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:entry</code> returns a <termref def="dt-map"
               >map</termref> which  contains a single
            entry. The key of the entry in the new map is
               <code>$key</code>, and its associated value is <code>$value</code>.</p>


      </fos:rules>
      <fos:notes>
         <p>The function call <code>map:entry(K, V)</code> produces the same result as the
         expression <code>map{K : V}</code>.</p>
         <p>The function <code>map:entry</code> is intended primarily for use in conjunction with
            the function <code>map:merge</code>. For example, a map containing seven entries may be
            constructed like this:</p>

         <eg><![CDATA[
map:merge((
   map:entry("Su", "Sunday"),
   map:entry("Mo", "Monday"),
   map:entry("Tu", "Tuesday"),
   map:entry("We", "Wednesday"),
   map:entry("Th", "Thursday"),
   map:entry("Fr", "Friday"),
   map:entry("Sa", "Saturday")
   ))]]></eg>
         <p>The <code>map:merge</code> function can be used to construct
            a map with a variable number of entries, for example:</p>
         <eg><![CDATA[
map:merge(for $b in //book return map:entry($b/isbn, $b))]]></eg>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>map:entry("M", "Monday")</fos:expression>
               <fos:result>map{"M":"Monday"}</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="pair" prefix="map">
      <fos:signatures>
         <fos:proto name="pair" return-type="record(key as xs:anyAtomicType, value as item()*)">
            <fos:arg name="key" type="xs:anyAtomicType"/>
            <fos:arg name="value" type="item()*" usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p><phrase>Returns</phrase> a <termref def="dt-key-value-pair-map"/> that 
            represents a single key-value pair.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:pair</code> returns a <termref def="dt-map"
            >map</termref> which contains two entries, one (with the key <code>"key"</code>)
            containing <code>$key</code> and the other (with the key <code>"value"</code>)
            containing <code>$value</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>The function call <code>map:pair(K, V)</code> produces the same result as the
         expression <code>map { "key": K, "value": V }</code>.</p>
         <p>The function <code>map:pair</code> is intended primarily for use in conjunction with
            the function <code>map:of-pairs</code>. A map may be constructed like this:</p>

         <eg><![CDATA[
map:of-pairs((
   map:pair("Su", "Sunday"),
   map:pair("Mo", "Monday"),
   map:pair("Tu", "Tuesday"),
   map:pair("We", "Wednesday"),
   map:pair("Th", "Thursday"),
   map:pair("Fr", "Friday"),
   map:pair("Sa", "Saturday")
   ))]]></eg>
         <p>The <code>map:of-pairs</code> function can be used to construct
            a map with a variable number of entries, for example:</p>
         <eg><![CDATA[map:of-pairs(//book ! map:pair(./isbn, .))]]></eg>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>map:pair("M", "Monday")</fos:expression>
               <fos:result>map { "key": "M", "value": "Monday" }</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="remove" prefix="map">
      <fos:signatures>
         <fos:proto name="remove" return-type="map(*)">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
            <fos:arg name="keys" type="xs:anyAtomicType*"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a map containing all the entries from a supplied map, except <phrase>those having a specified key</phrase>.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:remove</code> returns a <termref def="dt-map"
               >map</termref> containing all the entries in <code>$map</code> except for any entry whose key is 
            the <termref
               def="dt-same-key">same key</termref> as <phrase>an item in</phrase>
            <code>$keys</code>.</p>
         <p>No failure occurs <phrase>if an item in <code>$keys</code> does not correspond to any entry in <code>$map</code>;
            that key value is simply ignored</phrase>.</p>
         <p>The effect of the function call <code>map:remove($MAP, $KEY)</code> can be described more formally as the result of the expression below:</p>

         <eg diff="chg" at="2023-01-25"><![CDATA[
map:merge(
  map:for-each($MAP, fn($k, $v) { 
    if (some $key in $KEY satisfies fn:atomic-equal($k, $key))
    then () 
    else map:entry($k, $v)
  })
)]]></eg>
      </fos:rules>

      <fos:examples>
         <fos:variable name="week" id="v-map-remove-week"
            select="map{0:&quot;Sonntag&quot;, 1:&quot;Montag&quot;, 2:&quot;Dienstag&quot;,&#xa;       3:&quot;Mittwoch&quot;, 4:&quot;Donnerstag&quot;, 5:&quot;Freitag&quot;, 6:&quot;Samstag&quot;}"/>
         <fos:example>
            <fos:test use="v-map-remove-week">
               <fos:expression>map:remove($week, 4)</fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 5:"Freitag",
                  6:"Samstag"}</fos:result>
            </fos:test>
            <fos:test use="v-map-remove-week">
               <fos:expression>map:remove($week, 23)</fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag"}</fos:result>
            </fos:test>
            <fos:test use="v-map-remove-week">
               <fos:expression>map:remove($week, (0, 6 to 7))</fos:expression>
               <fos:result>map{1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag"}</fos:result>
            </fos:test>
            <fos:test use="v-map-remove-week">
               <fos:expression>map:remove($week, ())</fos:expression>
               <fos:result>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag",
                  6:"Samstag"}</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   <fos:function name="for-each" prefix="map">
      <fos:signatures>
         <fos:proto name="for-each" return-type="item()*">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
            <fos:arg name="action" type="function(xs:anyAtomicType, item()*) as item()*"
               usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic-wrt-ordering</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Applies a supplied function to every entry in a map, returning the concatenation of the
            results.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:for-each</code> takes any <termref def="dt-map"
               >map</termref> as its <code>$map</code> argument and applies the supplied function
            to each entry in the map, in <termref
               def="implementation-dependent"
            >implementation-dependent</termref> order; the result is the sequence obtained by
            concatenating the results of these function calls.</p>
         <p>The function is <term>non-deterministic with respect to ordering</term>
            (see <specref
               ref="properties-of-functions"
            />). This means that two calls with the same arguments
            are not guaranteed to process the map entries in the same order.</p>
         <p>The function supplied as <code>$action</code> takes two arguments. It is called
            supplying the key of the map entry as the first argument, and the associated value as
            the second argument.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>map:for-each(
  map { 1: "yes", 2: "no" },
  function($k, $v) { $k }
)</eg></fos:expression>
               <fos:result allow-permutation="true">(1,2)</fos:result>
               <fos:postamble>This function call is equivalent to calling <code>map:keys</code>. The
                  result is in implementation-dependent order.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg>distinct-values(
  map:for-each(
    map { 1: "yes", 2: "no" },
    function($k, $v) { $v }
  )
)</eg></fos:expression>
               <fos:result allow-permutation="true">("yes", "no")</fos:result>
               <fos:postamble>This function call returns the distinct values present in the map, in
                  implementation-dependent order.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg>map:merge(
  map:for-each(
    map { "a": 1, "b": 2 },
    function($k, $v) { map:entry($k, $v + 1) }
  )
)</eg></fos:expression>
               <fos:result>map{"a":2, "b":3}</fos:result>
               <fos:postamble>This function call returns a map with the same keys as the input map,
                  with the value of each entry increased by one.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>

            <p>This XQuery example converts the entries in a map to attributes on a newly constructed
                  element node:</p>

            <eg><![CDATA[
let $dimensions := map{'height': 3, 'width': 4, 'depth': 5};
return <box>{
  map:for-each($dimensions, function($k, $v) { attribute { $k } { $v } })
}</box>]]></eg>

            <p>The result is the element <code>&lt;box height="3" width="4"
                  depth="5"/></code>.</p>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="filter" prefix="map">
      <fos:signatures>
         <fos:proto name="filter" return-type="map(*)">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
            <fos:arg name="predicate" type="function(xs:anyAtomicType, item()*) as map(*)"
               usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Selects entries from a map, returning a new map.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:filter</code> takes any <termref def="dt-map"
               >map</termref> as its <code>$map</code> argument and applies the supplied function
            to each entry in the map; the result is a new map containing those entries for which
            the function returns <code>true</code>.</p>

         <p>The function supplied as <code>$predicate</code> takes two arguments. It is called
            supplying the key of the map entry as the first argument, and the associated value as
            the second argument.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>map:filter(
  map { 1: "Sunday", 2: "Monday", 
        3: "Tuesday", 4:"Wednesday",
        5: "Thursday", 6: "Friday", 
        7: "Saturday" },
  function($k, $v) { $k = (1, 7) }
)</eg></fos:expression>
               <fos:result><eg>map{1:"Sunday", 7:"Saturday"}</eg></fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>map:filter(
  map { 1: "Sunday", 2: "Monday", 
        3: "Tuesday", 4: "Wednesday",
        5: "Thursday", 6:"Friday", 
        7:"Saturday" },
  function($k, $v) { $v = ("Saturday", "Sunday") }
)</eg></fos:expression>
               <fos:result><eg>map{1:"Sunday", 7:"Saturday"}</eg></fos:result>
            </fos:test>

         </fos:example>

      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed for 4.0.
            Discussed 2022-09-20; decided to defer acceptance pending ideas for alignment with <code>array:filter</code>.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="replace" prefix="map">
      <fos:signatures>
         <fos:proto name="replace" return-type="map(*)">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
            <fos:arg name="key" type="xs:anyAtomicType" usage="inspection"/>
            <fos:arg name="action" type="function(item()*) as item()*" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns a map based on the contents of an existing map, computing a new value to be associated
            with a supplied key.</p>
      </fos:summary>
      <fos:rules>
         <p>If the supplied <code>$map</code> contains an existing entry for the supplied <code>$key</code>,
         then the returned map contains an entry for that <code>$key</code> whose value is obtained by applying
         the supplied <code>$action</code> to the existing value associated with that key.</p>
         <p>Otherwise, the returned map contains an entry for the supplied <code>$key</code> whose value is
            obtained by applying the supplied <code>$action</code> to an empty sequence.</p>


         <p>The effect of the function call <code>map:replace($MAP, $KEY, $VALUE)</code> is equivalent
            to the result of the expression:</p>

         <eg>if (map:contains($MAP, $KEY)) 
then map:put($MAP, $KEY, $ACTION(map:get($MAP, $KEY)))
else map:put($MAP, $KEY, $ACTION(())</eg>


      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>map:replace(map{1:"alpha", 2:"beta"}, 1, upper-case#1)</fos:expression>
               <fos:result>map { 1: "ALPHA", 2: "beta" }</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>map:replace(map{1:"alpha", 2:"beta"}, 3, upper-case#1)</fos:expression>
               <fos:result>map { 1: "alpha", 2: "beta" 3: "" }</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>fold-left(
  ("a", "b", "c", "a"),
  map { },
  function($map, $key) {
    map:replace($map, $key, function($val) {
      ($val otherwise 0) + 1
    })
  }
)</eg></fos:expression>
               <fos:result>map{"a":2, "b":1, "c":1}</fos:result>
            </fos:test>
         </fos:example>

      </fos:examples>
   </fos:function>

   <fos:function name="substitute" prefix="map">
      <fos:signatures>
         <fos:proto name="substitute" return-type="map(*)">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
            <fos:arg name="action" type="function(xs:anyAtomicType, item()*) as item()*"
               usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Applies a supplied function to every entry in a map, returning a map whose entries
         have the same keys as the input, but (potentially) different associated values.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:substitute</code> takes any <termref def="dt-map"
               >map</termref> as its <code>$map</code> argument and applies the supplied function
            to each entry in the map; the result is a map that associates the original set of key
            values with the results of these function calls.</p>
         <p>The function supplied as <code>$action</code> takes two arguments. It is called
            supplying the key of the map entry as the first argument, and the associated value as
            the second argument.</p>
      </fos:rules>
      <fos:notes>
         <p>The function call <code>map:substitute($m, $f)</code> returns the same result as
         <code>map:merge(map:for-each($m, fn($k, $v) { map:entry($k, $f($k, $v)) }))</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>map:substitute(
  map { 1: true(), 2: false() },
  function($k, $v) { not($v) }
)</eg></fos:expression>
               <fos:result>map{1:false(), 2:true()}</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>map:substitute(
  map { 1: "yes", 2: "no" },
  function($k, $v) { $v || ' (' || $k || ')' }
)</eg></fos:expression>
               <fos:result>map{1:"yes (1)", 2:"no (2)"}</fos:result>
            </fos:test>
         </fos:example>

      </fos:examples>
   </fos:function>

   <fos:function name="build" prefix="map">
      <fos:signatures>
         <fos:proto name="build" return-type="map(*)">
            <fos:arg name="input" type="item()*"/>
            <fos:arg name="key" type="function(item()) as xs:anyAtomicType?" default="fn:identity#1"/>
            <fos:arg name="value" type="function(item()) as item()*" default="fn:identity#1"/>
            <fos:arg name="combine" type="function(item()*, item()*) as item()*" default="fn:op(',')"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns a map that typically contains one entry for each item in a supplied input sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function processes each item in <code>$input</code> in order. It calls the <code>$key</code> function on
            that item to obtain a key value, and the <code>$value</code> function to obtain an associated value.
            If the key is non-empty, then:</p>
         <ulist>
            <item><p>If the key is not already present in the target map, the processor adds a new key-value pair to the map, with that key 
               and that value. </p></item>
            <item><p>If the key is already present, the processor calls the <code>$combine</code> function to combine the existing value 
               for the key with the new value, and replaces the entry with this combined value.</p></item>
         </ulist>
            
         <p>More formally, the result of the function is the result of the following expression:</p>
         
         <eg>
fold-left($input, map{}, fn($map, $next) {
   let $nextKey := $key($next)
   let $nextValue := $value($next)
   return
      if (fn:exists($nextKey))
      then
         if (map:contains($map, $nextKey))
         then map:put($map, $nextKey, $combine($map($nextKey), $nextValue))
         else map:put($map, $nextKey, $nextValue)
      else
         $map
})
         </eg>
      </fos:rules>
      
      <fos:notes>
         <p>Although defined to process the input sequence in order, this is only relevant when combining the entries
            for duplicate keys.</p>
         <p>The default function for both <code>$key</code> and <code>$value</code> is the identity function.
            Although it is permitted to default both, this serves little purpose: usually at least one of these arguments
            will be supplied.</p>
         <p>The default action for combining entries with duplicate keys is to perform a sequence-concatenation of the corresponding values,
            equivalent to the <code>duplicates: combine</code> option on <code>map:merge</code>. Other potentially useful
            functions for combining duplicates include:</p>
         <ulist>
            <item><p><code>fn($a, $b) { $a }</code> Use the first value and discard the remainder</p></item>
            <item><p><code>fn($a, $b) { $b }</code> Use the last value and discard the remainder</p></item>
            <item><p><code>fn:concat(?, ",", ?)</code> Form the string-concatenation of the values, comma-separated</p></item>
            <item><p><code>fn:op('+')</code> Compute the sum of the values</p></item>
         </ulist>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>map:build((), string#1)</fos:expression>
               <fos:result>map{}</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>map:build(1 to 10, function { . mod 3 })</fos:expression>
               <fos:result>map{0: (3, 6, 9), 1: (1, 4, 7, 10), 2: (2, 5, 8)}</fos:result>
               <fos:postamble>Returns a map with one entry for each distinct value of <code>. mod 3</code>. The
                  function to compute the value is the identity function, and duplicates are combined by
                  sequence concatenation.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg>map:build(
  1 to 5,
  value := format-integer(?, "w")
)</eg></fos:expression>
               <fos:result>map{1: "one", 2: "two", 3: "three", 4: "four", 5: "five"}</fos:result>
               <fos:postamble>Returns a map with five entries. The function to compute the key is an identity function, the
                  function to compute the value invokes <code>fn:format-integer</code>.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg>map:build(
  ("January", "February", "March", "April",
   "May", "June", "July", "August", "September",
   "October", "November", "December"),
  substring(?, 1, 1)
)</eg></fos:expression>
               <fos:result>map{"A": ("April", "August"), "D": ("December"), "F": ("February"), "J": ("January", "June", "July"), 
                  "M": ("March", "May"), "N": ("November"), "O": ("October"), "S": ("September")}</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>map:build(
  ("apple", "apricot", "banana",
   "blueberry", "cherry"), 
  substring(?, 1, 1),
  string-length#1,
  op("+")
)</eg></fos:expression>
               <fos:result>map{"a": 12, "b": 15, "c": 6}</fos:result>
               <fos:postamble>Constructs a map where the key is the first character of an input item, and where the corresponding value
                  is the total string-length of the items starting with that character.</fos:postamble>
            </fos:test>
            
            
         </fos:example>
         <fos:example>
            <p>The following expression creates a map whose keys are employee <code>@ssn</code> values, and whose
               corresponding values are the employee nodes:</p>
            <eg>map:build(//employee, fn { @ssn })</eg>
         </fos:example>
         <fos:example>
            <p>The following expression creates a map whose keys are employee <code>@location</code> values, and whose
               corresponding values represent the number of employees at each distinct location. Any employees that
               lack an <code>@location</code> attribute will be excluded from the result.</p>
            <eg>map:build(//employee, fn { @location }, fn { 1 }, op("+"))</eg>
         </fos:example>
         <fos:example>
            <p>The following expression creates a map whose keys are employee <code>@location</code> values, and whose
               corresponding values contain the employee node for the highest-paid employee at each distinct location:</p>
            <eg>map:build(//employee, function { @location }, 
               combine := fn($a, $b) { highest(($a, $b), fn { xs:decimal(@salary) }) })</eg>
         </fos:example>
         <fos:example>
            <p>The following expression creates a map allowing efficient access to every element in a document by means
               of its <code>fn:generate-id</code> value:</p>
            <eg>map:build(//*, generate-id#1)</eg>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Accepted for version 4.0 2022-10-18</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="size" prefix="map">
      <fos:signatures>
         <fos:proto name="size" return-type="xs:integer">
            <fos:arg name="map" type="map(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the number of entries in the supplied map.</p>
      </fos:summary>
      <fos:rules>
         <p>The function <code>map:size</code> takes any <termref def="dt-map"
               >map</termref>
            as its <code>$map</code> argument and returns the number of entries that are present
            in the map.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>map:size(map{})</fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>map:size(map{"true":1, "false":0})</fos:expression>
               <fos:result>2</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>



   <fos:function name="collation-key" prefix="fn">
      <fos:signatures>
         <fos:proto name="collation-key" return-type="xs:base64Binary">
            <fos:arg name="value" type="xs:string"/>
            <fos:arg name="collation" type="xs:string?" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Given a string value and a collation, generates an internal value called a collation key, with the property that
            the matching and ordering of collation keys reflects the matching and ordering of strings under the specified collation.</p>
      </fos:summary>
      <fos:rules>
         <p>Calling the one-argument version of this function is equivalent to calling the
            two-argument version supplying the default collation as the second argument.</p>
         <p>The function returns an <termref def="implementation-dependent"
               >implementation-dependent</termref> 
            value with the property that,
            for any two strings <code>$K1</code> and <code>$K2</code>:</p>
         <ulist>
            <item>
               <p><code>collation-key($K1, $C) eq collation-key($K2, $C)</code> if and only if
                  <code>compare($K1, $K2, $C) eq 0</code></p>
            </item>
            <item>
               <p><code>collation-key($K1, $C) lt collation-key($K2, $C)</code> if and only if
                  <code>compare($K1, $K2, $C) lt 0</code></p>
            </item>
         </ulist>

         <p>The collation used by this function is determined according to the rules in <specref
               ref="choosing-a-collation"
               />. Collation keys are defined as <code>xs:base64Binary</code> values
            to ensure unambiguous and context-free comparison semantics.</p>
         <p>An implementation is free to generate a collation key in any convenient way provided
            that it always generates the same collation key for two strings that are equal under the
            collation, and different collation keys for strings that are not equal. This holds only
            within a single <termref
               def="execution-scope"
            >execution scope</termref>;
            an implementation is under no obligation to generate the same collation keys during a
            subsequent unrelated query or transformation.</p>
         <p>It is possible to define collations that do not have the ability to generate collation
            keys. Supplying such a collation will cause the function to fail. The ability to
            generate collation keys is an <termref
               def="implementation-defined"
            >implementation-defined</termref> property of the
            collation.</p>
      </fos:rules>
      <fos:errors>
         <p>An error is raised <errorref class="CH" code="0004"
            /> if the specified
            collation does not support the generation of collation keys. </p>
      </fos:errors>
      <fos:notes>
         <p>The function is provided primarily for use with maps. If a map is required where
            codepoint equality is inappropriate for comparing keys, then a common technique is to
            normalize the key so that equality matching becomes feasible. There are many ways
            keys can be normalized, for example by use of functions such as
               <code>fn:upper-case</code>, <code>fn:lower-case</code>,
               <code>fn:normalize-space</code>, or <code>fn:normalize-unicode</code>, but this
            function provides a way of normalizing them according to the rules of a specified
            collation. For example, if the collation ignores accents, then the function will
            generate the same collation key for two input strings that differ only in their use of
            accents.</p>
         <p>The result of the function is defined to be an <code>xs:base64Binary</code> value. Binary values
         are chosen because they have unambiguous and context-free comparison semantics, because the value space
         is unbounded, and because the ordering rules are such that between any two values in the ordered value space, an
         arbitrary number of further values can be interpolated. The choice between <code>xs:base64Binary</code>
            and <code>xs:hexBinary</code> is arbitrary; the only operation that behaves differently between the two binary
            data types is conversion to/from a string, and this operation is not one that is normally required for
            effective use of collation keys.
         </p>
         <p>For collations based on the Unicode Collation Algorithm, an algorithm for computing
            collation keys is provided in <bibref
               ref="UNICODE-TR10"
               />. Implementations are
               <rfc2119>not required</rfc2119> to use this algorithm.</p>

         <p>The fact that collation keys are ordered can be exploited in XQuery, whose <code>order by</code>
         clause does not allow the collation to be selected dynamically. This restriction can be circumvented
         by rewriting the clause <code>order by $e/@key collation "URI"</code> as <code>order by fn:collation-key($e/@key, $collation)</code>,
         where <code>$collation</code> allows the collation to be chosen dynamically.</p>
         <p>Note that <code>xs:base64Binary</code> becomes an ordered type
         in XPath 3.1, making binary collation keys possible.</p>

      </fos:notes>
      <fos:examples>
         <fos:variable name="C" id="v-collation-key-C"
            select="'http://www.w3.org/2013/collation/UCA?strength=primary'"/>
         <fos:example>
            <fos:test use="v-collation-key-C">
               <fos:expression><eg>map:merge(
  (map { collation-key("A", $C): 1 },
   map { collation-key("a", $C): 2 }),
  map { "duplicates": "use-last" }
)(collation-key("A", $C))</eg></fos:expression>
               <fos:result>2</fos:result>
               <fos:postamble>Given that the keys of the two entries are equal under the rules of
                  the chosen collation, only one of the entries can appear in the result; the one
                  that is chosen is the one from the last map in the input sequence.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test use="v-collation-key-C">
               <fos:expression><eg>let $M := map {
  collation-key("A", $C): 1,
  collation-key("B", $C): 2
}
return $M(collation-key("a", $C))</eg></fos:expression>
               <fos:result>1</fos:result>
               <fos:postamble>The strings <code>"A"</code> and <code>"a"</code> have the same collation key under this
                  collation.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>As the above examples illustrate, it is important that when the
                  <code>collation-key</code> function is used to add entries to a map, then it must
               also be used when retrieving entries from the map. This process can be made less
               error-prone by encapsulating the map within a function: <code>function($k)
                  {$M(collation-key($k, $collation)}</code>.</p>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="json-to-xml" prefix="fn">
      <fos:signatures>
         <fos:proto name="json-to-xml" return-type="document-node()?">
            <fos:arg name="value" type="xs:string?" example="'[22,23]'"/>
            <fos:arg name="options" type="map(*)" usage="inspection" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic</fos:property>
         <fos:property dependency="static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Parses a string supplied in the form of a JSON text, returning the results in the form
            of an XML <phrase>document node</phrase>.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the one-argument form of this function is the same as calling the
            two-argument form with an empty map as the value of the <code>$options</code>
            argument.</p>

         <p>The first argument is a JSON-text as defined in <bibref ref="rfc7159"
            />, in the form of a string. The function
            parses this string to return an XDM node.</p>

         <p>If <code>$value</code> is an empty sequence, the function returns the empty sequence.</p>

         <p>The <code>$options</code> argument can be used to control the way in which the parsing
            takes place. The <termref
               def="option-parameter-conventions">option parameter conventions</termref> apply.</p>

         <p>The entries that may appear in the <code>$options</code> map are as follows:</p>

         <fos:options>
            <fos:option key="liberal">
               <fos:meaning>Determines whether deviations from the syntax of RFC7159 are permitted.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false</fos:default>
               <fos:values>
                  <fos:value value="false"
                        >
                     The input <rfc2119>must</rfc2119> consist of <phrase>an optional byte order mark (which is ignored) followed by</phrase> a string
                     that conforms to the grammar of <code>JSON-text</code> in <bibref
                        ref="rfc7159"
                     />. An error <rfc2119>must</rfc2119> be raised
                     (see below) if the input does not conform to the grammar.
                  </fos:value>
                  <fos:value value="true"
                        >
                     The input <rfc2119>may</rfc2119> contain deviations from the grammar of <bibref
                        ref="rfc7159"/>,
                     which are handled in an <termref
                        def="implementation-defined"
                        >implementation-defined</termref> way. (Note: some popular
                     extensions include allowing quotes on keys to be omitted, allowing a comma
                     to appear after the last item in an array, allowing leading zeroes in numbers, and allowing control characters such as
                     tab and newline to be present in unescaped form.) Since the extensions accepted
                     are implementation-defined, an error <rfc2119>may</rfc2119> be raised
                     (see below) if the input does not conform to the grammar.
                  </fos:value>
               </fos:values>
            </fos:option>
            <fos:option key="duplicates">
               <fos:meaning>Determines the policy for handling duplicate keys in a JSON object.
                  To determine whether keys are duplicates, they are compared using the Unicode codepoint collation, after expanding escape
                  sequences, unless the <phrase><code>escape</code> option is set to <code>true</code></phrase>, in which
                  case keys are compared in escaped form. 
               </fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>If <code>validate</code> is <code>true</code> then <code>reject</code>, otherwise <code>retain</code>.</fos:default>
               <fos:values>
                  <fos:value value="reject">
                     An error is raised <errorref
                        class="JS" code="0003"
                     /> if duplicate keys are encountered.
                  </fos:value>
                  <fos:value value="use-first"
                     >
                     If duplicate keys are present in a JSON object, all but the first of a set of duplicates are ignored.
                  </fos:value>
                  <fos:value value="retain"
                        >
                     If duplicate keys are present in a JSON object, the XML result of the function will also contain duplicates (making
                     it invalid against the schema). This value is therefore incompatible with the option <code>validate=true</code>
                     <errorref class="JS" code="0005"/>
                  </fos:value>
               </fos:values>
            </fos:option>

            <fos:option key="validate">
               <fos:meaning>Determines whether the generated XML tree is schema-validated.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default><termref def="implementation-defined"
                     >Implementation-defined</termref>.</fos:default>
               <fos:values>
                  <fos:value value="true"
                        >
                     Indicates that the resulting XDM instance must be typed; that is, the element
                     and attribute nodes must carry the type annotations that result from validation
                     against the schema given at <specref
                        ref="schema-for-json"/>, or against an
                     <termref
                        def="implementation-defined"
                        >implementation-defined</termref> schema 
                     if the <code>liberal</code> option has the value <code>true</code>.
                  </fos:value>
                  <fos:value value="false"
                     >
                     Indicates that the resulting XDM instance must be untyped.
                  </fos:value>
               </fos:values>
            </fos:option>

            <fos:option key="escape">
               <fos:meaning>Determines whether special characters are represented in the XDM output 
                  in backslash-escaped form. </fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false</fos:default>
               <fos:values>
                  <fos:value value="false">
                     All characters in the input that are valid
                     in the version of XML supported by the implementation, whether or not they are represented 
                     in the input by means of an escape sequence, are represented as unescaped characters in the result. Any
                     characters or codepoints that are not valid XML characters 
                     (for example, unpaired surrogates) <phrase>are passed to the <code>fallback</code> function
                        as described below; in the absence of a fallback function, they are replaced by
                        the Unicode <code>REPLACEMENT CHARACTER</code> (<code>xFFFD</code>)</phrase>.
                     The attributes <code>escaped</code> and <code>escaped-key</code> will not be present in the XDM output.
                  </fos:value>
                  <fos:value value="true">
                     JSON escape sequences are used in the result to represent special characters in the JSON input, as defined below, 
                     whether or not they were represented using JSON escape sequences in the input.
                     The characters that are considered “special” for this purpose are:
                     <ulist>
                        <item><p>all codepoints in the range <code>x00</code> to <code>x1F</code> 
                           or <code>x7F</code> to <code>x9F</code>;</p></item>
                        <item><p>all codepoints that do not represent characters that are valid in the version of XML supported by the processor,
                           including codepoints representing unpaired surrogates;</p></item>
                        <item><p>the backslash character itself (<code>x5C</code>).</p></item>
                     </ulist>
                     
                     Such characters are represented using a two-character
                     escape sequence where available (for example, <code>\t</code>), or a six-character escape sequence otherwise
                     (for example <code>\uDEAD</code>). Characters other than these will not be escaped in the result,
                     even if they were escaped in the input. In the result:
                     
                     <ulist>
                        <item><p>Any <code>string</code> element whose string value contains a
                           backslash character must have the attribute value <code>escaped="true"</code>.</p></item>
                        <item><p>Any element that contains a <code>key</code> attribute whose string value
                           contains a backslash character must have the attribute
                           <code>escaped-key="true"</code>.</p></item>
                        <item><p>The values of the <code>escaped</code> and
                           <code>escaped-key</code> attributes are immaterial when there is no backslash
                           present, and it is never necessary to include either attribute when its value
                           is <code>false</code>.</p></item>
                     </ulist>
                  </fos:value>
               </fos:values>
            </fos:option>

            <fos:option key="fallback">
               <fos:meaning>
                  Provides a function which is called when the input contains an escape sequence 
                  that represents a character that is not valid in the version of XML
                  supported by the implementation. 
                  
                  It is an error to supply the <code>fallback</code> option if the <code>escape</code> option is present
                  with the value <code>true</code>.
               </fos:meaning>
               <fos:type>function(xs:string) as xs:string</fos:type>
               <fos:default>The default is effectively the function <code>function($s) { "&amp;#xFFFD;" }</code>: that is,
                  a function that replaces the escape sequence with the Unicode <code>REPLACEMENT CHARACTER</code>.</fos:default>
               <fos:values>
                  <fos:value value="User-supplied function"
                        >
                     The function is called when the JSON input contains an escape sequence that is valid according to the JSON 
                     grammar, but which does not represent a character that is valid in the version of XML supported
                     by the processor. In the case of surrogates, the function is called once for any six-character escape sequence
                     that is not properly paired with another surrogate. The string supplied 
                     as the argument will always be a two- or six- character escape
                     sequence, starting with a backslash, that conforms to the rules in the JSON grammar (as extended by the
                     implementation if <code>liberal:true()</code> is specified): for example
                     <code>\b</code> or <code>\uFFFF</code> or <code>\uDEAD</code>. The function is <emph>not</emph>
                     called for an escape sequence that is invalid against the grammar (for example <code>\x0A</code>). 
                     The function returns a string
                     which is inserted into the result in place of the invalid character. The
                     function also has the option of raising a dynamic error by calling <code>fn:error</code>.
                  </fos:value>
               </fos:values>
            </fos:option>
         </fos:options>

         <p>The various structures that can occur in JSON are transformed recursively to XDM values
            according to the rules given in <specref
               ref="json-to-xml-mapping"/>.</p>

         <p>The function returns a document node, whose only child
               is the element node representing the outermost construct in the JSON
            text.</p>

         <p>The function is <termref def="dt-nondeterministic"
               >non-deterministic with respect to node identity</termref>: that is, if the function is called twice with the same
            arguments, it is <termref
               def="implementation-dependent"
            >implementation-dependent</termref> whether the same node is returned on both
            occasions.</p>

         <p>The base URI of the returned document node is taken from the static base URI of the
            function call.</p>

         <p>The choice of namespace prefix (or absence of a prefix) in the names of constructed
         nodes is <termref
               def="implementation-dependent">implementation-dependent</termref>.</p>

         <p>The XDM tree returned by the function does not contain any
         unnecessary (albeit valid) nodes such as whitespace text nodes, comments, or processing instructions.
         It does not include any whitespace in the value of <code>number</code> or <code>boolean</code> 
            element nodes, <phrase>or in the value of <code>escaped</code> or <code>escaped-key</code>
         attribute nodes.</phrase></p>


         <p>If the result is typed, every element named <code>string</code> will have an attribute named 
            <code>escaped</code> whose value is either <code>true</code> or <code>false</code>, and every element having 
            an attribute named <code>key</code> will also have an attribute named <code>escaped-key</code> whose value is either 
            <code>true</code> or <code>false</code>.
         </p>
         <p>If the result is untyped, the attributes <code>escaped</code> and <code>escaped-key</code> will 
            either be present with the value <code>true</code>, or will be absent. They will never be present with the value <code>false</code>.</p>

      </fos:rules>
      <fos:errors>

         <p>An error is raised <errorref spec="FO" class="JS" code="0001"
               /> if the value of
            <code>$value</code> does not conform to the JSON grammar as defined
            by <bibref
               ref="rfc7159"
            />, unless the option <code>"liberal":true()</code> is present and
            the processor chooses to accept the deviation. </p>

         <p>An error is raised <errorref spec="FO" class="JS" code="0004"
               /> if the value of
            the <code>validate</code> option is <code>true</code> and the processor does not support
            schema validation or typed data.</p>

         <p>An error is raised <errorref spec="FO" class="JS" code="0005"
               /> if the value of
            <code>$options</code> includes an entry whose key is defined in this specification,
               and whose value is not a permitted value for that key.</p>


      </fos:errors>
      <fos:notes>
         <p>To read a JSON file, this function can be used in conjunction with the
               <code>fn:unparsed-text</code> function.</p>
         <p>Many JSON implementations allow commas to be used after the last item in an object or
            array, although the specification does not permit it. The option
               <code>spec="liberal"</code> is provided to allow such deviations from the
            specification to be accepted. Some JSON implementations also allow constructors such as
               <code>new Date("2000-12-13")</code> to appear as values: specifying
               <code>spec="liberal"</code> allows such extensions to be accepted, but does not
            guarantee it. If such extensions are accepted, the resulting value is
            implementation-defined, and will not necessarily conform to the schema at <specref
               ref="schema-for-json"/>.</p>
         <p>If the input starts with a byte order mark, this function ignores it. The byte order mark may have been added
            to the data stream in order to facilitate decoding of an octet stream to a character string, but since this function
            takes a character string as input, the byte order mark serves no useful purpose.</p>
         <p>The possibility of the input containing characters that are not valid in XML (for example, unpaired surrogates)
         arises only when such characters are expressed using JSON escape sequences. The is because the input to the function
         is an instance of <code>xs:string</code>, which by definition can only contain characters that are valid in XML.</p>

      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>json-to-xml(
  '{"x": 1, "y": [3,4,5]}',
  map { "validate": false() }
)</eg></fos:expression>
               <fos:result normalize-space="true" ignore-prefixes="true"><![CDATA[
<map xmlns="http://www.w3.org/2005/xpath-functions">
  <number key="x">1</number>
  <array key="y">
   <number>3</number>
   <number>4</number>
   <number>5</number>
  </array>
</map>]]></fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>json-to-xml(
  '"abcd"',
  map { 'liberal': false() }
)</eg></fos:expression>
               <fos:result ignore-prefixes="true"
                  ><![CDATA[<string xmlns="http://www.w3.org/2005/xpath-functions">abcd</string>]]></fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>json-to-xml(
  '{"x": "\\", "y": "\u0025"}',
  map { "validate": false() }
)</eg></fos:expression>
               <fos:result normalize-space="true" ignore-prefixes="true"><![CDATA[
<map xmlns="http://www.w3.org/2005/xpath-functions">
  <string key="x">\</string>
  <string key="y">%</string>
</map>]]></fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>json-to-xml(
  '{"x": "\\", "y": "\u0025"}',
  map { 'escape': true(), "validate": false() }
)</eg></fos:expression>
               <fos:result normalize-space="true" ignore-prefixes="true"><![CDATA[
<map xmlns="http://www.w3.org/2005/xpath-functions">
  <string escaped="true" key="x">\\</string>
  <string key="y">%</string>
</map>]]></fos:result>
               <fos:postamble>But see the detailed rules for alternative values of the <code>escaped</code> attribute
                  on the second <code>string</code> element.</fos:postamble>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The following example illustrates use of the <code>fallback</code> function to
               handle characters that are invalid in XML.</p>
            <eg><![CDATA[
 let 
   $jsonstr := unparsed-text('http://example.com/endpoint'),
   $options := map {
     'liberal': true(),
     'fallback': function($char as xs:string) as xs:string {
       let 
         $c0chars := map {
           '\u0000':'[NUL]',
           '\u0001':'[SOH]',
           '\u0002':'[STX]',
           ...
           '\u001E':'[RS]',
           '\u001F':'[US]'
         },
         $replacement := $c0chars($char)
      return 
        if (exists($replacement))
        then $replacement
        else error(xs:QName('err:invalid-char'), 
          'Error: ' || $char || ' is not a C0 control character.')
     }
   }
 return json-to-xml($jsonstr, $options)]]></eg>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="xml-to-json" prefix="fn">
      <fos:signatures>
         <fos:proto name="xml-to-json" return-type="xs:string?">
            <fos:arg name="node" type="node()?" usage="absorption" example="()"/>
            <fos:arg name="options" type="map(*)" usage="inspection" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Converts an XML tree, whose format corresponds to the XML representation of JSON defined
            in this specification, into a string conforming to the JSON grammar.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the one-argument form of this function is the same as calling the
            two-argument form with an empty map as the value of the <code>$options</code>
            argument.</p>

         <p>The first argument <code>$node</code> is a node; the subtree rooted at this node will typically be
            the XML representation of a JSON document as defined in <specref
               ref="json-to-xml-mapping"/>.</p>

         <p>If <code>$node</code> is the empty sequence, the function returns the empty sequence.</p>

         <p>The <code>$options</code> argument can be used to control the way in which the conversion
            takes place. The <termref
               def="option-parameter-conventions">option parameter conventions</termref> apply.</p>

         <p>The entries that may appear in the <code>$options</code> map are as follows:</p>

         <fos:options>
            <fos:option key="indent">
               <fos:meaning>Determines whether additional whitespace should be added to the output to improve readability.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false</fos:default>
               <fos:values>
                  <fos:value value="false"
                     >
                     The processor must not insert any insignificant whitespace between JSON tokens.
                  </fos:value>
                  <fos:value value="true"
                     >
                     The processor <rfc2119>may</rfc2119> insert whitespace between JSON tokens in order to improve readability.
                     The specification imposes no constraints on how this is done.
                  </fos:value>
               </fos:values>
            </fos:option>
            <fos:option key="number-formatter" diff="add" at="A">
               <fos:meaning>Determines how numeric values should be formatted.</fos:meaning>
               <fos:type>(function(xs:string) as xs:string)?</fos:type>
               <fos:default>()</fos:default>
               <fos:values>
                     <fos:value value="User-supplied function">
                        The supplied function is called to process the string value of all <code>fn:number</code>
                        elements in the input. For example, setting the value to <code>fn:identity#1</code>
                        causes the value to be output unchanged. There is no requirement that the result should
                        be valid JSON.
                     </fos:value>
                     <fos:value value="()">
                        If no function is supplied, numbers are formatted by converting the string value of
                        the <code>fn:number</code> element to an <code>xs:double</code>, and then converting
                        the result to a string using the casting rules. Note that this will result in exponential
                        notation being used for values outside the range
                        <code>1e-6</code> to <code>1e+6</code>. A dynamic error occurs for values
                        such as infinity and <code>NaN</code> where the resulting JSON would be invalid.
                     </fos:value>
               </fos:values>
            </fos:option>
         </fos:options>

 

         <p>The node supplied as <code>$node</code> must be one of the following: <errorref
               spec="FO" class="JS" code="0006"/></p>

         <olist>
            <item>
               <p>An element node whose name matches the name of a global element declaration in the schema given in 
               <specref
                     ref="schema-for-json"/> (“the schema”) and that is valid as defined below:</p>
               <olist>
                  <item>
                     <p>If the type annotation of the element matches the type of the relevant element declaration 
                     in the schema (indicating that the element has been validated against the schema), then the element 
                     is considered valid.
                  </p>
                  </item>
                  <item>
                     <p>Otherwise, the processor <rfc2119>may</rfc2119> attempt to validate the element against
                     the schema, in which case it is treated as valid if and only if the outcome of validation is
                     <term>valid</term>.
                  </p>
                  </item>
                  <item>
                     <p>Otherwise (if the processor does not attempt validation using the schema), 
                     the processor <rfc2119>must</rfc2119> ensure that the content of the element, 
                     after stripping all attributes (at any depth) in namespaces other than 
                     <code>http://www.w3.org/2005/xpath-functions</code>, is such that validation 
                     against the schema would have an outcome of <term>valid</term>.
                  </p>
                     <note>
                        <p>The process described here is not precisely equivalent to schema validation. 
                        For example, schema validation will fail if there is an invalid <code>xsi:type</code> 
                        or <code>xsi:nil</code> attribute, whereas this process will ignore such attributes.
                     </p>
                     </note>
                  </item>
               </olist>

            </item>

            <item>
               <p>An element node <var>E</var> having a <code>key</code> attribute and/or an <code>escaped-key</code> attribute 
               provided that <var>E</var> would satisfy one of the above
            conditions if the <code>key</code> and/or <code>escaped-key</code> attributes were removed.</p>

            </item>

            <item>
               <p>A document node having exactly one element child and no text node children, 
               where the element child satisfies one of the conditions above.</p>
            </item>
         </olist>



         <p><!--bug 29588-->Furthermore, <code>$node</code> must satisfy the following constraint
            (which cannot be conveniently expressed in the schema). Every element <var>M</var> that is a descendant-or-self of 
            <code>$node</code> and has local name <code>map</code> and namespace URI <code>http://www.w3.org/2005/xpath-functions</code>
            must satisfy the following rule: there must not be two distinct children of <var>M</var> (say <var>C/1</var> and <var>C/2</var>) 
            such that the normalized key of <var>C/1</var> is equal to the normalized key of <var>C/2</var>. The normalized key 
            of an element <var>C</var> is as follows:</p>

         <ulist>
            <item>
               <p>If <var>C</var> has the attribute value <code>escaped-key="true"</code>, then the value of the 
               <code>key</code> attribute of <var>C</var>, with all JSON escape sequences replaced by the corresponding Unicode characters 
               according to the JSON escaping rules.
            </p>
            </item>
            <item>
               <p>Otherwise (the <code>escaped-key</code> attribute of <var>C</var> is absent or set to <code>false</code>), 
               the value of the <code>key</code> attribute of <var>C</var>.</p>
            </item>
         </ulist>

         <p>Nodes in the input tree are handled by applying the following rules, recursively. In these rules the term
            “an element named <var>N</var>” means "an element node whose local name is <var>N</var> and whose namespace URI is 
            <code>http://www.w3.org/2005/xpath-functions</code>".</p>

         <olist>
            <item>
               <p>A document node having a single element node child is processed by processing that child.</p>
            </item>
            <item>
               <p>An element named <code>null</code> results in the output <code>null</code>.</p>
            </item>
            <item>
               <p>An element <code>$E</code> named <code>boolean</code> results in the output <code>true</code> or <code>false</code>
            depending on the result of <phrase><code>xs:boolean(fn:string($E))</code></phrase>.</p>
            </item>
            <item diff="chg" at="A">
               <p>An element <code>$E</code> named <code>number</code> is processed as follows:</p>
               <olist>
                  <item><p>If the <code>number-formatter</code> option is present and non-empty,
                  the supplied function is called, with the string value of <code>$E</code> as its argument,
                  and the result is output (whether or not it is valid JSON).</p></item>
                  <item><p>Otherwise, the result of the expression <code>xs:string(xs:double(fn:string($E)))</code>
                  is output.</p></item>
               </olist>
               <note><p>The default formatting results in exponential format being used for numbers whose
                  absolute value is outside the range <code>1e-6</code> to <code>1e+6</code>;
                  although this is valid according to the JSON specification, some receiving
                  applications may be unable to process it. Possible reasons for using
                  a <code>number-formatter</code> might be:</p>
                  <ulist>
                     <item><p>To avoid use of exponential notation in the output.</p></item>
                     <item><p>To avoid loss of precision when the numbers to be output have
                        greater precision than an <code>xs:double</code>.</p></item>
                     <item><p>To improve the human readability of the output, for example by calling <code>fn:format-number</code>
                        to limit the number of decimal places in the result.</p></item>
                     <item><p>To avoid errors when dealing with values that JSON cannot handle, such as Infinity and <code>NaN</code> 
                        (for example, by emitting these as strings within quotation marks).</p></item>
                  </ulist>   
               </note>
            </item>
            <item>
               <p>An element named <code>string</code> results in the output of the string value of the element, enclosed in
            quotation marks, with any special characters in the string escaped as described below.</p>
            </item>
            <item>
               <p>An element named <code>array</code> results in the output of the children of the <code>array</code> element, 
               each processed by applying these rules recursively: the items in the resulting list are enclosed between square brackets, 
               and separated by commas.</p>
            </item>
            <item>
               <p>An element named <code>map</code> results in the output of a sequence of map entries corresponding to 
               the children of the <code>map</code> element, enclosed between curly braces and separated by commas. 
               Each entry comprises the value of the <code>key</code> attribute of the child element, enclosed in quotation marks 
               and escaped as described below, followed by a colon, followed by the result of processing the child element 
               by applying these rules recursively.</p>
            </item>
            <item>
               <p>Comments, processing instructions, and whitespace text node children of <code>map</code> and <code>array</code>
               are ignored.</p>
            </item>

         </olist>

         <p>Strings are escaped as follows:</p>

         <olist>
            <item>
               <p>If the attribute <code>escaped="true"</code> is present for a string value, or <code>escaped-key="true"</code> for a key value, then:</p>

               <olist>
                  <item>
                     <p>any valid JSON escape sequence present in the string is copied unchanged to the output;</p>
                  </item>

                  <item>
                     <p>any invalid JSON escape sequence results in a dynamic error <errorref
                           spec="FO" class="JS" code="0007"/>;</p>
                  </item>

                  <item>
                     <p>any unescaped occurrence of quotation mark, backspace, form-feed, newline, carriage return, tab, or solidus is replaced by
                  <code>\"</code>, <code>\b</code>, <code>\f</code>, <code>\n</code>, <code>\r</code>, <code>\t</code>, <phrase>or <code>\/</code></phrase> respectively; </p>
                  </item>

                  <item>
                     <p>any other codepoint in the range 1-31 or 127-159 is replaced by an escape in the form \uHHHH where HHHH 
                  is the upper-case hexadecimal representation of the codepoint value.</p>
                  </item>
               </olist>
            </item>
            <item>
               <p>Otherwise (that is, in the absence of the attribute <code>escaped="true"</code> for a string value, 
            or <code>escaped-key="true"</code> for a key value):</p>

               <olist>
                  <item>
                     <p>any occurrence of backslash is replaced by <code>\\</code></p>
                  </item>

                  <item>
                     <p>any occurrence of quotation mark, backspace, form-feed, newline, carriage return, or tab is 
               replaced by <code>\"</code>, <code>\b</code>, <code>\f</code>, <code>\n</code>, <code>\r</code>, or <code>\t</code> respectively; </p>
                  </item>

                  <item>
                     <p>any other codepoint in the range 1-31 or 127-159 is replaced by an escape in 
            the form <code>\uHHHH</code> where <code>HHHH</code> is the upper-case hexadecimal representation of the codepoint value.</p>
                  </item>
               </olist>
            </item>
         </olist>

      </fos:rules>
      <fos:errors>

         <p>A dynamic error is raised <errorref spec="FO" class="JS" code="0005"/> if the value of 
            <code>$options</code> includes an entry whose key is defined in this specification, 
            and whose value is not a permitted value for that key.</p>

         <p>A dynamic error is raised <errorref spec="FO" class="JS" code="0006"/> if the value of
            <code>$node</code> is not a document or element node or is not valid according to the schema for the XML representation of
            JSON<phrase>, or if a <code>map</code> element has two children whose normalized key values are the same.</phrase></p>

         <p>A dynamic error is raised <errorref spec="FO" class="JS" code="0007"/> if the value of
            <code>$node</code> includes a string labeled with <code>escaped="true"</code>, or
            a key labeled with <code>escaped-key="true"</code>, where the content of the string or key
            contains an invalid JSON escape sequence: specifically, where it contains a backslash (<code>\</code>) that is not followed by one
            of the characters <code>"</code>, <code>\</code>, <code>/</code>, <code>b</code>, <code>f</code>, <code>n</code>, 
            <code>r</code>, <code>t</code>, or <code>u</code>, or where it contains the characters <code>\u</code>
            not followed by four hexadecimal digits (that is <code>[0-9A-Fa-f]{4}</code>).
        </p>

      </fos:errors>
      <fos:notes>
         <p>The rule requiring schema validity has a number of consequences, including the following:</p>
         <olist>
            <item>
               <p>The input cannot contain no-namespace attributes, or attributes in the namespace <code>http://www.w3.org/2005/xpath-functions</code>,
            except where explicitly allowed by the schema. Attributes in other namespaces, however, are ignored.</p>
            </item>
            <item>
               <p>Nodes that do not affect schema validity, such as comments, processing instructions, namespace nodes, and whitespace text node
            children of <code>map</code> and <code>array</code>, are ignored.</p>
            </item>
            <item>
               <p>Numeric values are restricted to those that are valid in JSON: 
            the schema disallows positive and negative infinity and <code>NaN</code>.</p>
            </item>
            <item>
               <p>Duplicate key values are not permitted. <phrase>Most cases of duplicate keys are prevented by the rules in the schema; 
            additional cases (where the keys are equal only after expanding JSON escape sequences) are prevented by the prose rules 
            of this function. For example, the key values <code>\n</code> and <code>\u000A</code> are treated as duplicates even though
            the rules in the schema do not treat them as such.</phrase></p>
            </item>
         </olist>
         <p>The rule allowing the top-level element to have a <code>key</code> attribute (which is ignored)
         allows any element in the output of the <code>fn:json-to-xml</code> function
         to be processed: for example, it is possible to take a JSON document, convert it to XML, select
         a subtree based on the value of a <code>key</code> attribute, and then convert this subtree
         back to JSON, perhaps after a transformation. The rule means that an element with the appropriate name will be 
            accepted if it has been validated against one of the 
            types <code>mapWithinMapType</code>, <code>arrayWithinMapType</code>, <code>stringWithinMapType</code>, 
            <code>numberWithinMapType</code>, <code>booleanWithinMapType</code>, or <code>nullWithinMapType</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>The input <code><![CDATA[<array xmlns="http://www.w3.org/2005/xpath-functions"><number>1</number><string>is</string><boolean>1</boolean></array>]]></code>
         produces the result <code>[1,"is",true]</code>.</p>
         </fos:example>
         <fos:example>
            <p>The input <code><![CDATA[<map xmlns="http://www.w3.org/2005/xpath-functions"><number key="Sunday">1</number><number key="Monday">2</number></map>]]></code>
            produces the result <code>{"Sunday":1,"Monday":2}</code>.</p>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="parse-csv" prefix="fn">
      <fos:signatures>
         <fos:proto name="parse-csv" return-type="array(xs:string)*">
            <fos:arg name="csv" type="xs:string?"/>
            <fos:arg name="options" type-ref="parse-csv-options" usage="inspection" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Parses CSV data supplied as a string, returning the results in the form of a sequence of arrays of strings.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the one-argument form of this function is the same as calling the
            two-argument form with an empty map as the value of the <code>$options</code>
            argument.</p>

         <p>The first argument is CSV data, as defined in <bibref ref="rfc4180"/>, in the form of a
            sequence of <code>xs:string</code> values. The function parses this sequence to return
            an XDM value.</p>

         <p>If <code>$csv</code> is the empty sequence, implementations <rfc2119>must</rfc2119>
            return the empty sequence as the value of the <code>body</code> field of the returned
            map.</p>

         <p>The <code>$options</code> argument can be used to control the way in which the parsing
            takes place. The <termref
               def="option-parameter-conventions">option parameter conventions</termref> apply.</p>

         <p>Implementations <rfc2119>must</rfc2119> treat any of CRLF, CR, or LF as a single line
            separator, as with <code>fn:unparsed-text-lines</code>.</p>

         <p>Fields are regarded as simple <code>xs:string</code> values. Implementations
            <rfc2119>must</rfc2119> leave whitespace within a field untouched, without
            normalizing or otherwise altering it, unless whitespace trimming is explicitly requested
            by the user using the <code>trim-whitespace</code> option.</p>

         <p>When whitespace trimming is requested, implementations <rfc2119>must</rfc2119> only
            strip leading and trailing whitespace, this is not equivalent to calling
            <code>fn:normalize-space()</code>.</p>

         <p>The entries that may appear in the <code>$options</code> map are as follows:</p>

         <fos:options>
            <fos:option key="field-delimiter">
               <fos:meaning>The character used to delimit fields within a record. An instance of
                  <code>xs:string</code> whose length is exactly one.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>","</fos:default>
            </fos:option>
            <fos:option key="record-delimiter">
               <fos:meaning>The characters used to delimit records within the CSV string, if the
                  default use of line separator as record separator is to be overridden.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>()</fos:default>
            </fos:option>
            <fos:option key="quote-character">
               <fos:meaning>The character used to quote fields within the CSV string. An instance of
                  <code>xs:string</code> whose length is exactly one.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>'"'</fos:default>
            </fos:option>
            <fos:option key="trim-whitespace">
               <fos:meaning>Determines whether fields should have leading and trailing whitespace
                  removed before being returned.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false</fos:default>
               <fos:values>
                  <fos:value value="false">Fields will be returned with any leading or trailing
                     whitespace intact. Implementations <rfc2119>must</rfc2119> preserve whitespace
                     as it occurred in the CSV string.
                  </fos:value>
                  <fos:value value="true">Fields will be returned with leading or trailing
                     whitespace removed, and all non-leading or -trailing whitespace preserved.
                  </fos:value>
               </fos:values>
            </fos:option>
         </fos:options>

         <p>The result of the function is a sequence of arrays-of-strings
            <code>array(xs:string)*</code>.</p>
         <p>A blank row is represented as an empty array.</p>
         <p>An empty field is represented by the empty string.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error <errorref class="CV" code="0001"/> occurs if the value of
            <code>$csv</code> does not conform to the <bibref ref="rfc4180"/> grammar for quoted
            fields.</p>
         <p>A dynamic error <errorref class="CV" code="0002"/> occurs if one or more of the values
            for <code>field-separator</code>, <code>record-separator</code>,
            <code>quote-character</code> are specified and are not a single character.</p>
         <p>A dynamic error <errorref class="CV" code="0003"/> occurs if any of the values for
            <code>field-separator</code>, <code>record-separator</code>,
            <code>quote-character</code> are equal.</p>
      </fos:errors>
      <fos:notes>
         <p>All fields are returned as <code>xs:string</code> values.</p>
         <p>Quoted fields in the input are returned without the quotes.</p>
         <p>For more discussion of the returned data, see <specref ref="csv"/>.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="lf" id="escaped-lf"><![CDATA[char('x0A')]]></fos:variable>
         <fos:variable name="cr" id="escaped-cr"><![CDATA[char('x0D')]]></fos:variable>
         <fos:variable name="crlf" id="escaped-crlf"><![CDATA[char('x0D')||char('x0A')]]></fos:variable>
         <fos:example>
            <p>Handling any of the default record separators:</p>
            <fos:test use="escaped-crlf">
               <fos:expression>parse-csv(`name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`)</fos:expression>
               <fos:result>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</fos:result>
            </fos:test>
            <fos:test use="escaped-cr">
               <fos:expression>parse-csv(`name,city{$cr}Bob,Berlin{$cr}Alice,Aachen{$cr}`)</fos:expression>
               <fos:result>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</fos:result>
            </fos:test>
            <fos:test use="escaped-lf">
               <fos:expression>parse-csv(`name,city{$lf}Bob,Berlin{$lf}Alice,Aachen{$lf}`)</fos:expression>
               <fos:result>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Quote handling:</p>
            <fos:test use="escaped-crlf">
               <fos:expression>parse-csv(`"name","city"${crlf}"Bob","Berlin"${crlf}"Alice","Aachen"${crlf}`)</fos:expression>
               <fos:result>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</fos:result>
            </fos:test>
            <fos:test use="escaped-crlf">
               <fos:expression>parse-csv(`"name","city"${crlf}"Bob ""The Exemplar"" Mustermann","Berlin"${crlf}`)</fos:expression>
               <fos:result>(
   ["name", "city"]
   ['Bob "The Exemplar" Mustermann', "Berlin"],
   ["Alice", "Aachen"]
)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Non-default record- and field-separators:</p>
            <fos:test>
               <fos:expression>parse-csv("name;city§Bob;Berlin§Alice;Aachen", map{"record-separator": "§", "field-separator": ";"})</fos:expression>
               <fos:result>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Non-default quote character:</p>
            <fos:test use="escaped-crlf">
               <fos:expression>parse-csv(`|name|,|city|${crlf}|Bob|,|Berlin|${crlf}`, map{"quote-character": "|"})</fos:expression>
               <fos:result>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Trimming whitespace in fields:</p>
            <fos:test use="escaped-crlf">
               <fos:expression xml:space="preserve">parse-csv(`name  ,city  ${crlf}Bob   ,Berlin${crlf}Alice ,Aachen${crlf}`, map{"trim-whitespace: true()})</fos:expression>
               <fos:result>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="csv-to-xdm" prefix="fn">
      <fos:signatures>
         <fos:proto name="csv-to-xdm" return-type-ref="parsed-csv-structure-record">
            <fos:arg name="csv" type="xs:string?"/>
            <fos:arg name="options" type="map(*)" usage="inspection" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Parses CSV data supplied as a string, returning the results in the form of a
            <code>parsed-csv-structure-record</code> record containing information about the
            column structure of the data, as well as the data itself as a sequence of
            <code>csv-row-record</code> records.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the one-argument form of this function is the same as calling the
            two-argument form with an empty map as the value of the <code>$options</code>
            argument.</p>

         <p>The first argument is CSV data, as defined in <bibref ref="rfc4180"/>, in the form of a
            sequence of <code>xs:string</code> values. The function parses this sequence using
            <code>fn:parse-csv</code>, and then processes its result to return an XDM value.</p>

         <p>If <code>$csv</code> is the empty sequence, implementations <rfc2119>must</rfc2119>
            return a <code>parsed-csv-structure-record</code> whose <code>rows</code> entry is the empty sequence.</p>

         <p>If <code>$csv</code> is the empty sequence, but column name extraction has been
            requested, or explicit column names have been supplied, then the
            <code>parsed-csv-structure-record</code> returned by implementations
            <rfc2119>must</rfc2119> have a <code>rows</code> entry whose value is the empty
            sequence.</p>

         <p>The <code>$options</code> argument can be used to control the way in which the parsing
            takes place. The <termref
               def="option-parameter-conventions">option parameter conventions</termref> apply.</p>

         <p>Handling of delimiters, and whitespace trimming, are handled using
            <code>fn:parse-csv</code>, and the options controlling their use are defined
            there.</p>

         <p>If the <code>headers</code> option is true, implementations <rfc2119>must</rfc2119>
            exclude the first record from the returned map’s <code>body</code> key, and return it as
            the value of the returned map’s <code>headers-record</code> key.</p>

         <p>The entries that may appear in the <code>$options</code> map are as follows:</p>
         <fos:options>
            <fos:option key="field-delimiter">
               <fos:meaning>The character used to delimit fields within a record. An instance of
                  <code>xs:string</code> whose length is exactly one.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>","</fos:default>
            </fos:option>
            <fos:option key="record-delimiter">
               <fos:meaning>The characters used to delimit records within the CSV string, if the
                  default use of line separator as record separator is to be overridden.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>()</fos:default>
            </fos:option>
            <fos:option key="quote-character">
               <fos:meaning>The character used to quote fields within the CSV string. An instance of
                  <code>xs:string</code> whose length is exactly one.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>'"'</fos:default>
            </fos:option>
            <fos:option key="trim-whitespace">
               <fos:meaning>Determines whether fields should have leading and trailing whitespace
                  removed before being returned.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false</fos:default>
               <fos:values>
                  <fos:value value="false">Fields will be returned with any leading or trailing
                     whitespace intact. Implementations <rfc2119>must</rfc2119> preserve whitespace
                     as it occurred in the CSV string.
                  </fos:value>
                  <fos:value value="true">Fields will be returned with leading or trailing
                     whitespace removed, and all non-leading or -trailing whitespace preserved.
                  </fos:value>
               </fos:values>
            </fos:option>
            <fos:option key="column-names">
               <fos:meaning>Determines whether the first row of the CSV should be treated as a list
                  of column names and returned as a <code>csv-columns-record</code> in the
                  <code>columns</code> entry of the returned map.</fos:meaning>
               <fos:type>union(xs:boolean, map(xs:string, xs:integer))</fos:type>
               <fos:default>false</fos:default>
               <fos:values>
                  <fos:value value="true">A <code>csv-columns-record</code> is constructed using the
                     first row of the CSV data and returned as the <code>header</code> entry of the
                     <code>parsed-csv-structure-record</code>. The row’s fields are transformed
                     into a map of the form <code>{ "Column name": column-number }</code> for the
                     <code>names</code> entry of the <code>csv-columns-record</code>, and the
                     fields of the row are returned as a sequence of strings
                     (<code>xs:string*</code>) for the <code>fields</code> entry. Implmentations
                     <rfc2119>must</rfc2119> exclude the first row from the <code>rows</code>
                     entry of the returned <code>parsed-csv-structure-record</code>.</fos:value>
                  <fos:value value="false">Implementations <rfc2119>must</rfc2119> return an empty
                     <code>csv-columns-record</code>, equivalent to the literal map <code>map {
                     names: map {}, fields: () }</code>, in the <code>columns</code> entry of
                     the returned <code>parsed-csv-structure-record</code>. Implementations
                     <rfc2119>must not</rfc2119> exclude the first row from the <code>rows</code>
                     entry of the <code>parsed-csv-structure-record</code>.</fos:value>
                  <fos:value value="map(xs:integer, xs:string)">A <code>csv-columns-record</code> is
                     constructed using the supplied map and returned as the <code>header</code>
                     entry of the <code>parsed-csv-structure-record</code>. The supplied map is used
                     as the <code>names</code> entry, and a sequence of strings for the
                     <code>fields</code> is constructed, filling in blank columns with the empty
                     string. and the fields of the row are returned as the <code>fields</code>
                     entry. Implementations <rfc2119>must not</rfc2119> exclude the first row from
                     the <code>rows</code> entry of the <code>parsed-csv-structure-record</code>.
                  </fos:value>
               </fos:values>
            </fos:option>
            <fos:option key="number-of-columns">
               <fos:meaning>Specifies how many columns to return.</fos:meaning>
               <fos:type>union(enum("all", "first-row"), xs:integer)</fos:type>
               <fos:default>"all"</fos:default>
               <fos:values>
                  <fos:value value="'all'">All fields from all rows
                     <rfc2119>must</rfc2119> be returned, without being padded or truncated,
                     regardless of whether rows have varying numbers of fields, or of how many
                     fields they have.</fos:value>
                  <fos:value value="'first-row'">The number of fields in the first row is counted,
                     and processing proceeds as if that integer had been supplied as the value for
                     this option.</fos:value>
                  <fos:value value="xs:integer">The number of columns is set to this value. Rows
                     with more fields than the supplied value are truncated by discarding the extra
                     fields. as if calling <code>fn:subsequence(R, 1, I)</code>, given the row’s
                     sequence of fields in <var>R</var>, and the supplied value in <var>I</var>. If
                     a row has fewer fields than the supplied value it is padded by appending empty
                     string values until it contains the specified number of fields.</fos:value>
               </fos:values>
            </fos:option>
         </fos:options>

         <p>If column names were extracted from the first row of the CSV, when there are duplicate
            column names, implementations <rfc2119>must</rfc2119> include only the first occurrence
            in the <code>names</code> entry of the <code>csv-columns-record</code>, ignoring
            subsequent entries. Any fields in the first record whose value is the empty string
            <rfc2119>must</rfc2119> also be omitted.</p>

         <p>The result of the function is a <code>parsed-csv-structure-record</code>, a map with
            string keys containing two entries, <code>columns</code>, and <code>rows</code>.</p>
         <olist>
            <item>
               <p>The entry with key <code>"columns"</code> holds a <code>csv-columns-record</code>
                  record. If column names have been extracted, or supplied, then the record will
                  have a <code>names</code> entry whose value is a map of column-name to
                  column-number, <code>map(xs:integer, xs:string)</code>. The record’s
                  <code>fields</code> entry will contains the column names as a sequence of
                  strings, <code>xs:string*</code>, replicating the row they were taken from.</p>

               <p>If column names were not extracted or supplied, then the
                  <code>csv-columns-record</code> will contain a <code>names</code> entry whose
                  value is an empty map, and a <code>fields</code> entry whose value is the empty
                  sequence.</p>
            </item>
            <item>
               <p>The entry with key <code>"rows"</code> holds the records of the CSV as a sequence
                  of row records, <code>csv-row-record*</code>. If there is no data in the CSV, this
                  will be the empty sequence.</p>

               <p>Each record in the <code>rows</code> sequence contains a <code>fields</code>
                  entry, containing the row’s fields as a sequence of strings,
                  <code>xs:string*</code>, and a <code>field</code> entry containing an arity-one
                  function. The function takes a string or integer key <var>K</var> as input, and
                  returns the field in <var>fields</var> that corresponds to the position
                  <var>K</var>, if <var>K</var> is an <code>xs:integer</code>, or the position
                  obtained by looking up <var>K</var> in the <code>names</code> map if <var>K</var>
                  is an <code>xs:string</code>.</p>

               <p>The properties of this function are as follows:</p>
               <ulist>
                  <item>
                     <p>name: absent</p>
                  </item>
                  <item>
                     <p>parameter names: (<var>$key</var>)</p>
                  </item>
                  <item>
                     <p>signature: <code>(union(xs:integer, xs:string)) => xs:string?</code></p>
                  </item>
                  <item>
                     <p>non-local variable bindings: none</p>
                  </item>
                  <item>
                     <p>implementation: implementation-dependent</p>
                  </item>
                  <item>
                     <p>errors: A dynamic error <errorref class="CV" code="0004"/> occurs if the
                        supplied <var>$key</var> is a string and does not occur in the map of column
                        names.</p>
                  </item>
               </ulist>

               <p>This function behaves identically to <code>fn:csv-fetch-field-by-column</code>
                  would had the <code>header</code> entry of the containing
                  <code>parsed-csv-structure-record</code> and the <code>fields</code> entry of
                  this <code>csv-row-record</code> been supplied as its first two arguments, and
                  <var>$key</var> as its last. See the definition of
                  <code>fn:csv-fetch-field-by-column</code> for more details</p>
            </item>
         </olist>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error <errorref class="CV" code="0001"/> occurs if the value of
            <code>$csv</code> does not conform to the <bibref ref="rfc4180"/> grammar for quoted
            fields.</p>
         <p>A dynamic error <errorref class="CV" code="0002"/> occurs if one or more of the values
            for <code>field-separator</code>, <code>record-separator</code>,
            <code>quote-character</code> are specified and are not a single character.</p>
         <p>A dynamic error <errorref class="CV" code="0003"/> occurs if any of the values for
            <code>field-separator</code>, <code>record-separator</code>,
            <code>quote-character</code> are equal.</p>
      </fos:errors>
      <fos:notes>
         <p>All fields are returned as <code>xs:string</code> values.</p>
         <p>Quoted fields in the input are returned without the quotes.</p>
         <p>For more discussion of the returned data, see <specref ref="csv"/>.</p>
      </fos:notes>
      <fos:examples>
         <fos:variable name="crlf" id="escaped-crlf-2"><![CDATA[char('x0D')||char('x0A')]]></fos:variable>
         <fos:variable name="csv-string" id="csv-string">`name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`</fos:variable>
         <fos:variable name="options" id="non-default-delims">map { "record-separator": "§", "field-separator": ";", "quote-character": "|" }</fos:variable>
         <fos:variable name="non-std-csv" id="non-standard-csv-string">`|name|;|city|§|Bob|;|Berlin|§|Alice|;|Aachen|`</fos:variable>
         <fos:variable name="trim-opts" id="trim-whitespace-options">map { "trim-whitespace": true() }</fos:variable>
         <fos:example>
            <p>With defaults for delimiters and quotes, and default column extraction (false):</p>
            <fos:test use="csv-string escaped-crlf-2">
               <fos:expression>map:keys(csv-to-xdm($csv-string))</fos:expression>
               <fos:result>("header", "rows")</fos:result>
            </fos:test>
            <fos:test use="csv-string escaped-crlf-2">
               <fos:expression>csv-to-xdm($csv-string)?columns</fos:expression>
               <fos:result>map {
  "names": map {},
  "fields": (),
}</fos:result>
            </fos:test>
            <fos:test use="csv-string escaped-crlf-2">
               <fos:expression>count(csv-to-xdm($csv-string)?rows)</fos:expression>
               <fos:result>3</fos:result>
            </fos:test>
            <fos:test use="csv-string escaped-crlf-2">
               <fos:expression>csv-to-xdm($csv-string)?rows[1]?field("name")</fos:expression>
               <fos:error-result error-code="CV"/>
            </fos:test>
            <fos:test use="csv-string escaped-crlf-2">
               <fos:expression>csv-to-xdm($csv-string)?rows[1]?field(2)</fos:expression>
               <fos:result>"city"</fos:result>
            </fos:test>
            <p>With defaults for delimiters and quotes, and <code>columns: true()</code> set:</p>
            <fos:test use="csv-string escaped-crlf-2">
               <fos:expression>csv-to-xdm($csv-string, map {"columns": true()})?columns</fos:expression>
               <fos:result>map {
  "names": map { "name": 1, "city": 2 },
  "fields": ("name", "city"),
}</fos:result>
            </fos:test>
            <fos:test use="csv-string escaped-crlf-2">
               <fos:expression>count(csv-to-xdm($csv-string, map {"columns": true()})?rows)</fos:expression>
               <fos:result>2</fos:result>
            </fos:test>
            <fos:test use="csv-string escaped-crlf-2">
               <fos:expression>csv-to-xdm($csv-string), map {"columns": true()}?rows[1]?fields</fos:expression>
               <fos:result>("Bob", "Berlin")</fos:result>
            </fos:test>
            <fos:test use="csv-string escaped-crlf-2">
               <fos:expression>csv-to-xdm($csv-string, map {"columns": true()})?rows[1]?field("name")</fos:expression>
               <fos:result>"Bob"</fos:result>
            </fos:test>
            <fos:test use="csv-string escaped-crlf-2">
               <fos:expression>csv-to-xdm($csv-string, map {"columns": true()})?rows[1]?field(2)</fos:expression>
               <fos:result>"Berlin"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Non-default record- and field-delimiters, non-default quotes:</p>
            <fos:test use="non-default-delims non-standard-csv-string">
               <fos:expression>map:keys(csv-to-xdm($non-std-csv, $options))</fos:expression>
               <fos:result>("header", "rows")</fos:result>
            </fos:test>
            <fos:test use="non-default-delims non-standard-csv-string">
               <fos:expression>csv-to-xdm($non-std-csv, $options)?columns</fos:expression>
               <fos:result>map {
                  "names": map {},
                  "fields": (),
                  }</fos:result>
            </fos:test>
            <fos:test use="non-default-delims non-standard-csv-string">
               <fos:expression>count(csv-to-xdm($non-std-csv, $options)?rows)</fos:expression>
               <fos:result>3</fos:result>
            </fos:test>
            <fos:test use="non-default-delims non-standard-csv-string">
               <fos:expression>csv-to-xdm($non-std-csv, $options)?rows[3]?field(1)</fos:expression>
               <fos:result>"Alice"</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Trimming whitespace in fields:</p>
            <fos:test use="escaped-crlf-2 trim-whitespace-options">
               <fos:expression xml:space="preserve">csv-to-xdm(`name  ,city  ${crlf}Bob   ,Berlin${crlf}Alice ,Aachen${crlf}`, $trim-opts)?rows?fields</fos:expression>
               <fos:result>("name", "city", "Bob", "Berlin", "Alice", "Aachen")</fos:result>
            </fos:test>
         </fos:example>
         <fos:variable name="csv-uneven-cols" id="uneven-cols-csv-string">`date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`</fos:variable>
         <fos:example>
            <p>Filtering columns</p>
            <fos:test use="escaped-crlf-2 uneven-cols-csv-string">
               <fos:expression>csv-to-xdm($csv-uneven-cols, map { "columns": true(), "filter-columns": (2,1,4) })?columns?fields</fos:expression>
               <fos:result>("name","date","amount")</fos:result>
            </fos:test>
            <fos:test use="escaped-crlf-2 uneven-cols-csv-string">
               <fos:expression>for $r in csv-to-xdm($csv-uneven-cols, map { "columns": true(), "filter-columns": (2,1,4) })?rows return array { $r?fields }</fos:expression>
               <fos:result>(
   ["Bob","2023-07-19","10.00"],
   ["Alice","2023-07-20","15.00"],
   ["Charlie","2023-07-20","15.00"]
)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Specifying the number of columns, using <code>"all"</code> (the default)</p>
            <fos:test use="escaped-crlf-2 uneven-cols-csv-string">
               <fos:expression>csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": "all" })?columns?fields</fos:expression>
               <fos:result>("date","name","city","amount","currency","original amount","note")</fos:result>
            </fos:test>
            <fos:test use="escaped-crlf-2 uneven-cols-csv-string">
               <fos:expression>for $r in csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": "all" })?rows return array { $r?fields }</fos:expression>
               <fos:result>(
   ["2023-07-19","Bob","Berlin","10.00","USD","13.99"],
   ["2023-07-20","Alice","Aachen","15.00"],
   ["2023-07-20","Charlie","Celle","15.00","GBP","11.99","cake","not a lie"]
)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Specifying the number of columns using <code>"first-row"</code></p>
            <fos:test use="escaped-crlf-2 uneven-cols-csv-string">
               <fos:expression>csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": "first-row" })?columns?fields</fos:expression>
               <fos:result>("date","name","city","amount","currency","original amount","note")</fos:result>
            </fos:test>
            <fos:test use="escaped-crlf-2 uneven-cols-csv-string">
               <fos:expression>for $r in csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": "first-row" })?rows return array { $r?fields }</fos:expression>
               <fos:result>(
   ["2023-07-19","Bob","Berlin","10.00","USD","13.99",""],
   ["2023-07-20","Alice","Aachen","15.00","","",""],
   ["2023-07-20","Charlie","Celle","15.00","GBP","11.99","cake"]
)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Specifying the number of columns with a number</p>
            <fos:test use="escaped-crlf-2 uneven-cols-csv-string">
               <fos:expression>csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": 6 })?columns?fields</fos:expression>
               <fos:result>("date","name","city","amount","currency","original amount")</fos:result>
            </fos:test>
            <fos:test use="escaped-crlf-2 uneven-cols-csv-string">
               <fos:expression>for $r in csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": 6 })?rows return array { $r?fields }</fos:expression>
               <fos:result>(
   ["2023-07-19","Bob","Berlin","10.00","USD","13.99"],
   ["2023-07-20","Alice","Aachen","15.00","",""],
   ["2023-07-20","Charlie","Celle","15.00","GBP","11.99"]
)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="csv-to-xml" prefix="fn">
      <fos:signatures>
         <fos:proto name="csv-to-xml" return-type="element(fn:csv)">
            <fos:arg name="csv" type="xs:string?"/>
            <fos:arg name="options" type="map(*)" usage="inspection" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Parses CSV data supplied as a string, returning the results as an XML document, as described by
            <specref ref="csv-represent-as-xml"/>.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the one-argument form of this function is the same as calling the
            two-argument form with an empty map as the value of the <code>$options</code>
            argument.</p>

         <p>The first argument is CSV data, as defined in <bibref ref="rfc4180"/>, in the form of a
            sequence of <code>xs:string</code> values. The function parses this sequence using
            <code>fn:parse-csv</code>, and then processes its result to return an XML document.</p>

         <p>If <code>$csv</code> is the empty sequence, implementations <rfc2119>must</rfc2119>
            return a <code><![CDATA[<fn:csv>]]></code> whose <code><![CDATA[<fn:rows>]]></code> element
            is empty.</p>

         <p>If <code>$csv</code> is the empty sequence, but column name extraction has been
            requested, but explicit column names have not been supplied, then the implementation
            <rfc2119>must</rfc2119> return a <code><![CDATA[<fn:csv>]]></code> element whose
            <code><![CDATA[<fn:header>]]></code> element is empty.</p>

         <p>If <code>$csv</code> is the empty sequence, but explicit column names have been
            supplied, then the implementation <rfc2119>must</rfc2119> return a
            <code><![CDATA[<fn:csv>]]></code> element whose <code><![CDATA[<fn:header>]]></code>
            element contains the appropriate <code><![CDATA[<fn:column>]]></code> elements.</p>

         <p>The <code>$options</code> argument can be used to control the way in which the parsing
            takes place. The <termref
               def="option-parameter-conventions">option parameter conventions</termref> apply.</p>

         <p>Handling of delimiters, and whitespace trimming, are handled using
            <code>fn:parse-csv</code>, and the options controlling their use are defined
            there.</p>

         <p>The entries that may appear in the <code>$options</code> map are as follows:</p>

         <fos:options>
            <fos:option key="field-delimiter">
               <fos:meaning>The character used to delimit fields within a record. An instance of
                  <code>xs:string</code> whose length is exactly one.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>","</fos:default>
            </fos:option>
            <fos:option key="record-delimiter">
               <fos:meaning>The characters used to delimit records within the CSV string, if the
                  default use of line separator as record separator is to be overridden.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>()</fos:default>
            </fos:option>
            <fos:option key="quote-character">
               <fos:meaning>The character used to quote fields within the CSV string. An instance of
                  <code>xs:string</code> whose length is exactly one.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>'"'</fos:default>
            </fos:option>
            <fos:option key="trim-whitespace">
               <fos:meaning>Determines whether fields should have leading and trailing whitespace
                  removed before being returned.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false</fos:default>
               <fos:values>
                  <fos:value value="false">Fields will be returned with any leading or trailing
                     whitespace intact. Implementations <rfc2119>must</rfc2119> preserve whitespace
                     as it occurred in the CSV string.
                  </fos:value>
                  <fos:value value="true">Fields will be returned with leading or trailing
                     whitespace removed, and all non-leading or -trailing whitespace preserved.
                  </fos:value>
               </fos:values>
            </fos:option>
            <fos:option key="column-names">
               <fos:meaning>Determines whether the first row of the CSV should be treated as a list
                  of column headers and returned as a <code>csv-columns-record</code> in the
                  <code>header</code> entry of the returned map.</fos:meaning>
               <fos:type>union(xs:boolean, map(xs:integer, xs:string))</fos:type>
               <fos:default>false</fos:default>
               <fos:values>
                  <fos:value value="true">The <code><![CDATA[<header>]]></code> element is populated
                     with <code><![CDATA[<column>]]></code> elements constructed using the values
                     from the first row of the CSV data. Implmentations <rfc2119>must</rfc2119>
                     exclude the first row from the <code><![CDATA[<rows>]]></code>
                     element.</fos:value>
                  <fos:value value="false">Implementations <rfc2119>must not</rfc2119> include a
                     <code><![CDATA[<header>]]></code> element in the output.</fos:value>
                  <fos:value value="map(xs:integer, xs:string)">The supplied map is used to
                     construct a sequence of <code><![CDATA[<column>]]></code> elements to populate
                     the <code><![CDATA[<header>]]></code> element. The <code>xs:integer</code>
                     denotes the column number, and the <code>xs:string</code> the column name. Gaps
                     in the integer sequence of column numbers are filled with empty
                     <code><![CDATA[<column>]]></code> elements. Implementations <rfc2119>must
                     not</rfc2119> exclude the first row from the <code><![CDATA[<rows>]]></code>
                     element.</fos:value>
               </fos:values>
            </fos:option>
            <fos:option key="filter-columns">
               <fos:meaning>A sequence indicating which fields to return and in which order. If this
                  option is missing or the empty sequence, all fields are returned in their natural
                  order. Items in the sequence are treated as the index of the column to return. In
                  the returned data, only fields from the specified columnms are returned, and in
                  the order specified.</fos:meaning>
               <fos:type>xs:integer*</fos:type>
               <fos:default>()</fos:default>
            </fos:option>
            <fos:option key="number-of-columns">
               <fos:meaning>Specifies how many columns to return.</fos:meaning>
               <fos:type>union(enum("all", "first-row"), xs:integer)</fos:type>
               <fos:default>"all"</fos:default>
               <fos:values>
                  <fos:value value="'all'">All fields from all rows
                     <rfc2119>must</rfc2119> be returned, without being padded or truncated,
                     regardless of whether rows have varying numbers of fields, or of how many
                     fields they have.</fos:value>
                  <fos:value value="'first-row'">The number of fields in the first row is counted,
                     and processing proceeds as if that integer had been supplied as the value for
                     this option.</fos:value>
                  <fos:value value="xs:integer">The number of columns is set to this value. Rows
                     with more fields than the supplied value are truncated by discarding the extra
                     fields. as if calling <code>fn:subsequence(R, 1, I)</code>, given the row’s
                     sequence of fields in <var>R</var>, and the supplied value in <var>I</var>. If
                     a row has fewer fields than the supplied value it is padded by appending empty
                     string values until it contains the specified number of fields.</fos:value>
               </fos:values>
            </fos:option>
         </fos:options>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error <errorref class="CV" code="0001"/> occurs if the value of
            <code>$csv</code> does not conform to the <bibref ref="rfc4180"/> grammar for quoted
            fields.</p>
         <p>A dynamic error <errorref class="CV" code="0002"/> occurs if one or more of the values
            for <code>field-separator</code>, <code>record-separator</code>,
            <code>quote-character</code> are specified and are not a single character.</p>
         <p>A dynamic error <errorref class="CV" code="0003"/> occurs if any of the values for
            <code>field-separator</code>, <code>record-separator</code>,
            <code>quote-character</code> are equal.</p>
      </fos:errors>
      <fos:examples>
         <fos:variable name="crlf" id="escaped-crlf-3"><![CDATA[char('x0D')||char('x0A')]]></fos:variable>
         <fos:variable name="csv-string" id="csv-string-2">`name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`</fos:variable>
         <fos:example>
            <p>An empty CSV with default column extraction (false):</p>
            <fos:test>
               <fos:expression>csv-to-xml("")</fos:expression>
               <fos:result><![CDATA[
<fn:csv>
   <fn:rows/>
</fn:csv>
]]></fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>An empty CSV with column extraction:</p>
            <fos:test>
               <fos:expression>csv-to-xml("", map { "columns": true() })</fos:expression>
               <fos:result><![CDATA[
<fn:csv>
   <fn:header/>
   <fn:rows/>
</fn:csv>
]]></fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>An empty CSV with explicit column names:</p>
            <fos:test>
               <fos:expression>csv-to-xml("", map { "columns": map { "name": 1, "city": 3 })</fos:expression>
               <fos:result><![CDATA[
<fn:csv>
   <fn:header>
      <fn:column>name</fn:field>
      <fn:column/>
      <fn:column>city</fn:field>
   </fn:header>
   <fn:rows/>
</fn:csv>
]]></fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>With defaults for delimiters and quotes, and column extraction:</p>
            <fos:test use="escaped-crlf-3 csv-string-2">
               <fos:expression>csv-to-xml($csv-string, map { "columns": true() })</fos:expression>
               <fos:result><![CDATA[
<fn:csv>
   <fn:header>
      <fn:column>name</fn:field>
      <fn:column>city</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="city">Berlin</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="city">Aachen</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>With defaults for delimiters and quotes, and column extraction:</p>
            <fos:test use="escaped-crlf-3 csv-string-2">
               <fos:expression>csv-to-xml($csv-string, map { "columns": true() })</fos:expression>
               <fos:result><![CDATA[
<fn:csv>
   <fn:header>
      <fn:field>name</fn:field>
      <fn:field>city</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="city">Berlin</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="city">Aachen</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></fos:result>
            </fos:test>
         </fos:example>
         <fos:variable name="csv-uneven-cols" id="uneven-cols-csv-string-2">`date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`</fos:variable>
         <fos:example>
            <p>Filtering columns</p>
            <fos:test use="escaped-crlf-3 uneven-cols-csv-string-2">
               <fos:expression>csv-to-xml($csv-string, map { "columns": true(), "filter-columns": (2,1,4) })</fos:expression>
               <fos:result><![CDATA[
<fn:csv>
   <fn:header>
      <fn:field>name</fn:field>
      <fn:field>date</fn:field>
      <fn:field>amount</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="date">2023-07-19</fn:field>
         <fn:field column="amount">10.00</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="amount">15.00</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="name">Charlie</fn:field>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="amount">15.00</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Specifying the number of columns, using "all" (the default)</p>
            <fos:test use="escaped-crlf-3 uneven-cols-csv-string-2">
               <fos:expression>csv-to-xml($csv-uneven-cols, map { "columns": true(), "number-of-columns": "all" })</fos:expression>
               <fos:result><![CDATA[
<fn:csv>
   <fn:header>
      <fn:field>date</fn:field>
      <fn:field>name</fn:field>
      <fn:field>city</fn:field>
      <fn:field>amount</fn:field>
      <fn:field>currency</fn:field>
      <fn:field>original amount</fn:field>
      <fn:field>note</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="date">2023-07-19</fn:field>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="city">Berlin</fn:field>
         <fn:field column="amount">10.00</fn:field>
         <fn:field column="currency">USD</fn:field>
         <fn:field column="original amount">13.99</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="city">Aachen</fn:field>
         <fn:field column="amount">15.00</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Charlie</fn:field>
         <fn:field column="city">Celle</fn:field>
         <fn:field column="amount">15.00</fn:field>
         <fn:field column="currency">GBP</fn:field>
         <fn:field column="original amount">11.99</fn:field>
         <fn:field column="note">cake</fn:field>
         <fn:field>not a lie</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Specifying the number of columns using <code>"first-row"</code></p>
            <fos:test use="escaped-crlf-3 uneven-cols-csv-string-2">
               <fos:expression>csv-to-xml($csv-uneven-cols, map { "columns": true(), "number-of-columns": "first-row" })</fos:expression>
               <fos:result><![CDATA[
<fn:csv>
   <fn:header>
      <fn:field>date</fn:field>
      <fn:field>name</fn:field>
      <fn:field>city</fn:field>
      <fn:field>amount</fn:field>
      <fn:field>currency</fn:field>
      <fn:field>original amount</fn:field>
      <fn:field>note</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="date">2023-07-19</fn:field>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="city">Berlin</fn:field>
         <fn:field column="amount">10.00</fn:field>
         <fn:field column="currency">USD</fn:field>
         <fn:field column="original amount">13.99</fn:field>
         <fn:field column="note"/>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="city">Aachen</fn:field>
         <fn:field column="amount">15.00</fn:field>
         <fn:field column="currency"/>
         <fn:field column="original amount"/>
         <fn:field column="note"/>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Charlie</fn:field>
         <fn:field column="city">Celle</fn:field>
         <fn:field column="amount">15.00</fn:field>
         <fn:field column="currency">GBP</fn:field>
         <fn:field column="original amount">11.99</fn:field>
         <fn:field column="note">cake</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>Specifying the number of columns with a number</p>
            <fos:test use="escaped-crlf-3 uneven-cols-csv-string-2">
               <fos:expression>csv-to-xml($csv-uneven-cols, map { "columns": true(), "number-of-columns": 6 })</fos:expression>
               <fos:result><![CDATA[
<fn:csv>
   <fn:header>
      <fn:field>date</fn:field>
      <fn:field>name</fn:field>
      <fn:field>city</fn:field>
      <fn:field>amount</fn:field>
      <fn:field>currency</fn:field>
      <fn:field>original amount</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="date">2023-07-19</fn:field>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="city">Berlin</fn:field>
         <fn:field column="amount">10.00</fn:field>
         <fn:field column="currency">USD</fn:field>
         <fn:field column="original amount">13.99</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="city">Aachen</fn:field>
         <fn:field column="amount">15.00</fn:field>
         <fn:field column="currency"/>
         <fn:field column="original amount"/>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Charlie</fn:field>
         <fn:field column="city">Celle</fn:field>
         <fn:field column="amount">15.00</fn:field>
         <fn:field column="currency">GBP</fn:field>
         <fn:field column="original amount">11.99</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="csv-fetch-field-by-column" prefix="fn">
      <fos:signatures>
         <fos:proto name="csv-fetch-field-by-column" return-type="xs:string">
            <fos:arg name="columns" type-ref="csv-columns-record"/>
            <fos:arg name="fields" type="xs:string*" usage="inspection"/>
            <fos:arg name="key" type="union(xs:integer, xs:string)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Fetches a field from a parsed CSV row by name or position.</p>
      </fos:summary>
      <fos:rules>
         <p>The first argument is a <code>csv-columns-record</code>, as provided in the
            <code>header</code> entry of the <code>parsed-csv-structure-record</code> returned by
            <code>fn:csv-to-xdm</code>.</p>

         <p>The second argument is the row whose fields are being fetched, represented as a sequence
            of strings as would be provided by the <code>fields</code> entry of a
            <code>csv-row-record</code> returned by <code>fn:csv-to-xdm</code>.</p>

         <p>The final argument is the key to use for the lookup, supplied as either an
            <code>xs:string</code> (the column name) or <code>xs:integer</code> (the column
            position).</p>

         <p>When the argument is a string, if the string is missing from the keys of the map
            contained in the <code>names</code> entry of the <code>$columns</code> argument’s
            <code>csv-columns-record</code>, then implementations <rfc2119>must</rfc2119> raise
            an <errorref class="CV" code="0004"/>.</p>

         <p>When the argument is an integer, if the integer position is outside the bounds of the
            <code>$fields</code> sequence (i.e. is greater than the size of the sequence), then
            implementations <rfc2119>must</rfc2119> return the empty string.</p>

         <p>The function returns the field in the sequence <code>$fields</code> at the position in
            the sequence either explicitly provided (when <code>$key</code> is an
            <code>xs:integer</code>), or looked up from the map of name to position in the
            <code>csv-columns-record</code> provided in <code>$columns</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error <errorref class="CV" code="0004"/> occurs if the value of
            <code>$key</code> is an <code>xs:string</code> but is not a member of the keys of the
            map contained in the <code>names</code> entry of the <code>csv-columns-record</code> in
            <code>$header</code>. fields.</p>
      </fos:errors>
      <fos:examples>
         <fos:variable name="columns" id="csv-column-fetch-columns">map {
   "names": map { "name": 1, "city": 2 },
   "fields: ("name", "city")
}</fos:variable>
         <fos:variable name="fields" id="csv-column-fetch-fields">("Bob", "Berlin")</fos:variable>
         <fos:example>
            <p>With a string key:</p>
            <fos:test use="csv-column-fetch-columns csv-column-fetch-fields">
               <fos:expression>csv-fetch-field-by-column($columns, $fields, "name")</fos:expression>
               <fos:result>"Bob"</fos:result>
            </fos:test>
            <fos:test use="csv-column-fetch-columns csv-column-fetch-fields">
               <fos:expression>csv-fetch-field-by-column($columns, $fields, "amount")</fos:expression>
               <fos:error-result error-code="FOCV0004"/>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>With an integer key</p>
            <fos:test use="csv-column-fetch-columns csv-column-fetch-fields">
               <fos:expression>csv-fetch-field-by-column($columns, $fields, 2)</fos:expression>
               <fos:result>"Berlin"</fos:result>
            </fos:test>
            <fos:test use="csv-column-fetch-columns csv-column-fetch-fields">
               <fos:expression>csv-fetch-field-by-column($columns, $fields, 3)</fos:expression>
               <fos:result>""</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="parse-json" prefix="fn">
      <fos:signatures>
         <fos:proto name="parse-json" return-type="item()?">
            <fos:arg name="value" type="xs:string?" example="'[22,23]'"/>
            <fos:arg name="options" type="map(*)" usage="inspection" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Parses a string supplied in the form of a JSON text, returning the results typically in the form
            of a map or array.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the one-argument form of this function is the same as calling the
            two-argument form with an empty map as the value of the <code>$options</code>
            argument.</p>

         <p>The first argument is a JSON text as defined in <bibref ref="rfc7159"
            />, in the form of a string. The function
            parses this string to return an XDM value.</p>

         <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>

         <note>
            <p>The result will also be an empty sequence if <code>$value</code> is the string <code>"null"</code>.</p>
         </note>

         <p>The <code>$options</code> argument can be used to control the way in which the parsing
            takes place. The <termref
               def="option-parameter-conventions">option parameter conventions</termref> apply.</p>

         <p>The entries that may appear in the <code>$options</code> map are as follows:</p>

         <fos:options>
            <fos:option key="liberal">
               <fos:meaning>Determines whether deviations from the syntax of RFC7159 are permitted.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false</fos:default>
               <fos:values>
                  <fos:value value="false"
                        >
                     The input <rfc2119>must</rfc2119> consist of <phrase>an optional byte order mark (which is ignored) followed by</phrase> a string
                     that conforms to the grammar of <code>JSON-text</code> in <bibref
                        ref="rfc7159"
                        />. An error <rfc2119>must</rfc2119> be raised
                     <errorref
                        class="JS" code="0001"
                     /> if the input does not conform to the grammar.
                  </fos:value>
                  <fos:value value="true"
                        >
                     The input <rfc2119>may</rfc2119> contain deviations from the grammar of <bibref
                        ref="rfc7159"/>,
                     which are handled in an <termref
                        def="implementation-defined"
                        >implementation-defined</termref> way. (Note: some popular
                     extensions include allowing quotes on keys to be omitted, allowing a comma
                     to appear after the last item in an array, allowing leading zeroes in numbers, and allowing control characters such as
                     tab and newline to be present in unescaped form.) Since the extensions accepted
                     are implementation-defined, an error <rfc2119>may</rfc2119> be raised
                     <errorref
                        class="JS" code="0001"
                     /> if the input does not conform to the grammar.
                  </fos:value>
               </fos:values>
            </fos:option>
            <fos:option key="duplicates">
               <fos:meaning>Determines the policy for handling duplicate keys in a JSON object.
                  To determine whether keys are duplicates, they are compared using the Unicode codepoint collation, after expanding escape
                  sequences, unless the <phrase><code>escape</code> option is set to <code>true</code></phrase>, in which
                  case keys are compared in escaped form. 
               </fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>use-first</fos:default>
               <fos:values>
                  <fos:value value="reject">
                     An error is raised <errorref
                        class="JS" code="0003"
                     /> if duplicate keys are encountered.
                  </fos:value>
                  <fos:value value="use-first"
                     >
                     If duplicate keys are present in a JSON object, all but the first of a set of duplicates are ignored.
                  </fos:value>
                  <fos:value value="use-last"
                     >
                     If duplicate keys are present in a JSON object, all but the last of a set of duplicates are ignored.
                  </fos:value>
               </fos:values>
            </fos:option>

            <fos:option key="escape">
               <fos:meaning>Determines whether special characters are represented in the XDM output in backslash-escaped form.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>true</fos:default>
               <fos:values>
                  <fos:value value="false">
                     All characters in the input that are valid
                     in the version of XML supported by the implementation, whether or not they are represented 
                     in the input by means of an escape sequence, are represented as unescaped characters in the result. Any
                     characters or codepoints that are not valid XML characters 
                     (for example, unpaired surrogates) <phrase>are passed to the <code>fallback</code> function
                        as described below; in the absence of a fallback function, they are replaced by
                        the Unicode <code>REPLACEMENT CHARACTER</code> (<code>xFFFD</code>)</phrase>.
                  </fos:value>
                  <fos:value value="true">
                     JSON escape sequences are used in the result to represent special characters in the JSON input, as defined below, 
                     whether or not they were represented using JSON escape sequences in the input.
                     The characters that are considered “special” for this purpose are:
                     <ulist>
                        <item><p>all codepoints in the range <code>x00</code> to <code>x1F</code> 
                           or <code>x7F</code> to <code>x9F</code>;</p></item>
                        <item><p>all codepoints that do not represent characters that are valid in the version of XML supported by the processor,
                           including codepoints representing unpaired surrogates;</p></item>
                        <item><p>the backslash character itself (<code>x5C</code>).</p></item>
                     </ulist>
                     
                     Such characters are represented using a two-character
                     escape sequence where available (for example, <code>\t</code>), or a six-character escape sequence otherwise
                     (for example <code>\uDEAD</code>). Characters other than these are not escaped in the result, even if they
                     were escaped in the input.
                  </fos:value>
               </fos:values>
            </fos:option>
            <fos:option key="fallback">
               <fos:meaning>
                  Provides a function which is called when the input contains an escape sequence 
                  that represents a character that is not valid in the version of XML
                  supported by the implementation. 
                  
                  It is an error to supply the <code>fallback</code> option if the <code>escape</code> option is present
                  with the value <code>true</code>.
               </fos:meaning>
               <fos:type>function(xs:string) as xs:string</fos:type>
               <fos:default>The default is effectively the function <code>function($s) { "&amp;#xFFFD;" }</code>: that is,
                  a function that replaces the escape sequence with the Unicode <code>REPLACEMENT CHARACTER</code>.</fos:default>
               <fos:values>
                  <fos:value value="User-supplied function"
                        >
                     The function is called when the JSON input contains a special character (as defined under 
                     the <code>escape</code> option) that is valid according to the JSON 
                     grammar, whether the special character is represented in the input directly or as an escape sequence. 
                     The function is called once for any surrogate
                     that is not properly paired with another surrogate. The string supplied as the argument will always be a two- or six- character escape
                     sequence, starting with a backslash, that conforms to the rules in the JSON grammar (as extended by the
                     implementation if <code>liberal:true()</code> is specified): for example
                     <code>\b</code> or <code>\uFFFF</code> or <code>\uDEAD</code>. The function is <emph>not</emph>
                     called for an escape sequence that is invalid against the grammar (for example <code>\x0A</code>). The function returns a string
                     which is inserted into the result in place of the invalid character. The
                     function also has the option of raising a dynamic error by calling <code>fn:error</code>.
                  </fos:value>
               </fos:values>
            </fos:option>
            <fos:option key="number-parser" diff="add" at="A">
               <fos:meaning>Determines how numeric values should be processed.</fos:meaning>
               <fos:type>(function(xs:string) as xs:anyAtomicType)?</fos:type>
               <fos:default>()</fos:default>
               <fos:values>
                  <fos:value value="User-supplied function">
                     The supplied function is called to process the string value of any JSON number
                     in the input. By default, numbers are processed by 
                     converting to <code>xs:double</code> using the XPath casting rules.
                     Supplying the value <code>xs:decimal#1</code> will instead convert to <code>xs:decimal</code>
                     (which potentially retains more precision, but disallows exponential notation), while
                     supplying a function that casts to <code>union(xs:decimal, xs:double)</code> will treat
                     the value as <code>xs:decimal</code> if there is no exponent, or as <code>xs:double</code>
                     otherwise. Supplying the value <code>fn:identity#1</code> causes the value to be retained
                     unchanged as an <code>xs:string</code>. Before calling the supplied <code>number-parser</code>,
                     the value is first checked to ensure that it conforms to the JSON grammar (for example,
                     a leading plus sign and redundant leading zeroes are not allowed); these checks are disabled
                     if the <code>liberal</code> option is set to <code>true</code>.
                  </fos:value>
                  <fos:value value="()">
                     If no function is supplied, numbers are processed by casting the supplied value to
                     <code>xs:double</code>.
                  </fos:value>
               </fos:values>
            </fos:option>
         </fos:options>

         

         <p>The various structures that can occur in JSON are transformed recursively to XDM values
            as follows:</p>

         <olist>
            <item>
               <p>A JSON <emph>object</emph> is converted to a map. 
                  The entries in the map correspond to the key/value
                  pairs in the JSON object. The key is always of type <code>xs:string</code>; the
                  associated value may be of any type, and is the result of converting the JSON
                  value by recursive application of these rules. For example, the JSON text
                     <code>{"x":2, "y":5}</code> is transformed to the value
                     <code>map{"x":2, "y":5}</code>.</p>
               <p>If duplicate keys are encountered in a JSON <emph>object</emph>, they are handled
                  as determined by the <code>duplicates</code> option defined above.</p>
            </item>
            <item>
               <p>A JSON <emph>array</emph> is transformed to an array whose members are the result of converting
                  the corresponding member of the array by recursive application of these rules. For
                  example, the JSON text <code>["a", "b", null]</code> is transformed to the value
                     <code>["a", "b", ()]</code>.</p>
            </item>
            <item>
               <p>A JSON <emph>string</emph> is converted to an <code>xs:string</code> value. 
               <phrase>The handling of special characters depends on the
               <code>escape</code> and <code>fallback</code> options, as described in the table above.</phrase></p>
            </item>
            <item>
               <p>A JSON <emph>number</emph> is <phrase diff="add" at="A">processed using the function supplied
                  in the <code>number-parser</code> option; by default it is</phrase> converted to an <code>xs:double</code> value using
                  the rules for casting from <code>xs:string</code> to <code>xs:double</code>.</p>
            </item>
            <item>
               <p>The JSON <emph>boolean</emph> values <code>true</code> and <code>false</code> are
                  converted to the corresponding <code>xs:boolean</code> values.</p>
            </item>
            <item>
               <p>The JSON value <emph>null</emph> is converted to the empty sequence.</p>
            </item>
         </olist>


      </fos:rules>
      <fos:errors>
         <p>A dynamic error <errorref class="JS" code="0001"
               /> occurs if the value of
               <code>$value</code> does not conform to the JSON grammar, unless the option
            <code>"liberal":true()</code> is present and the processor chooses to accept the deviation.</p>

         <p>A dynamic error <errorref class="JS" code="0003"
               /> occurs if the option
            <code>"duplicates":"reject"</code> is present and the value of
            <code>$value</code> contains a JSON object with duplicate keys.</p>

         <p>A dynamic error <errorref class="JS" code="0005"
               /> occurs if the <code>$options</code>
            map contains an entry whose key is defined in this specification and whose value is not valid for that key,
         or if it contains an entry with the key <code>fallback</code> when the option <code>"escape":true()</code>
         is also present.</p>
      </fos:errors>
      <fos:notes>
         <p>The result of the function will be an instance of one of the following types. An
               <code>instance of</code> test (or in XQuery, <code>typeswitch</code>) can be used to
            distinguish them:</p>
         <ulist>
            <item>
               <p><code>map(xs:string, item()?)</code> for a JSON object</p>
            </item>
            <item>
               <p><code>array(item()?)</code> for a JSON array</p>
            </item>
            <item>
               <p><code>xs:string</code> for a JSON string</p>
            </item>
            <item>
               <p><code>xs:double</code> for a JSON number</p>
            </item>
            <item>
               <p><code>xs:boolean</code> for a JSON boolean</p>
            </item>
            <item>
               <p><code>empty-sequence()</code> for a JSON null (or for empty input)</p>
            </item>
         </ulist>
         <p>If the input starts with a byte order mark, this function ignores it. The byte order mark may have been added
         to the data stream in order to facilitate decoding of an octet stream to a character string, but since this function
         takes a character string as input, the byte order mark serves no useful purpose.</p>

         <p>The possibility of the input containing characters that are not valid in XML (for example, unpaired surrogates)
            arises only when such characters are expressed using JSON escape sequences. The is because the input to the function
            is an instance of <code>xs:string</code>, which by definition can only contain characters that are valid in XML.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>parse-json('{"x":1, "y":[3,4,5]}')</fos:expression>
               <fos:result>map{"x":1e0,"y":[3e0,4e0,5e0]}</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-json('"abcd"')</fos:expression>
               <fos:result>"abcd"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>parse-json('{"x":"\\", "y":"\u0025"}')</fos:expression>
               <fos:result>map{"x":"\","y":"%"}</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>parse-json(
  '{"x":"\\", "y":"\u0025"}',
  map { 'escape': true() }
)</eg></fos:expression>
               <fos:result>map{"x":"\\","y":"%"}</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>parse-json(
  '{"x":"\\", "y":"\u0000"}'
)</eg></fos:expression>
               <fos:result>map{"x":"\","y":codepoints-to-string(65533)}</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>parse-json(
  '{"x":"\\", "y":"\u0000"}',
  map { 'escape': true() }
)</eg></fos:expression>
               <fos:result>map{"x":"\\","y":"\u0000"}</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>parse-json(
  '{"x":"\\", "y":"\u0000"}',
  map {
    'fallback': function($s) { '['||$s||']' }
  }
)</eg></fos:expression>
               <fos:result>map{"x":"\","y":"[\u0000]"}</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="json-doc" prefix="fn">
      <fos:signatures>
         <fos:proto name="json-doc" return-type="item()?">
            <fos:arg name="href" type="xs:string?" example="'JSONTestSuite/test_parsing/y_number.json'"/>
            <fos:arg name="options" type="map(*)" usage="inspection" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="static-base-uri">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Reads an external resource containing JSON, and returns the result of parsing the resource as JSON.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the single-argument call <code>fn:json-doc($H)</code> is the same as the effect of the two-argument call
            <code>fn:json-doc($H, map{})</code> where an empty map is supplied as the second argument.</p>
         <p>The effect of the two-argument function call <code>fn:json-doc($H, $M)</code>is equivalent to the function composition
            <code>fn:unparsed-text($H) => fn:parse-json($M)</code>; except that:</p>

         <olist>
            <item>
               <p>The function <rfc2119>may</rfc2119> accept a resource in any encoding. <bibref
                     ref="rfc7159"
                     /> requires
               UTF-8, UTF-16, or UTF-32 to be accepted, but it is not an error if a different encoding is used. 
               Unless external encoding information is available, the function <rfc2119>must</rfc2119>
               assume that the encoding is one of UTF-8, UTF-16, or UTF-32, and <rfc2119>must</rfc2119> distinguish these cases by examination 
               of the initial octets of the resource.</p>
            </item>
            <item>
               <p diff="chg" at="2023-06-12">If the resource contains characters that are not
               <termref def="dt-permitted-character">permitted characters</termref>,
            then rather than raising an error as <code>fn:unparsed-text#1</code> does, the function replaces such characters by the equivalent
            JSON escape sequence prior to parsing.</p>
               <note>
                  <p>Equivalently, the implementation can use some other internal representation of strings that allows non-XML characters to
            be manipulated.</p>
               </note>
            </item>
         </olist>

         <p>If <code>$href</code> is the empty sequence, the function returns the empty sequence.</p>



      </fos:rules>
      <fos:errors>
         <p>The function may raise any error defined for the <code>fn:unparsed-text</code> or <code>fn:parse-json</code>
         functions.</p>
      </fos:errors>
      <fos:notes>
         <p>If the input cannot be decoded (that is, converted into a sequence of Unicode codepoints, which may or may not represent characters),
            then a dynamic error occurs as with the <code>fn:unparsed-text</code> function.</p>
         <p>If the input can be decoded,
            then the possibility still arises that the resulting sequence of codepoints includes codepoints that do not represent characters that are valid in the
            version of XML that the processor supports. Such codepoints are translated into JSON escape sequences (for example, <code>\uFFFF</code>),
            and the JSON escape sequence is then passed to the fallback function specified in the <code>$options</code> argument, which in turn
            defaults to a function that returns the Unicode <code>REPLACEMENT CHARACTER</code> (<code>xFFFD</code>).</p>
      </fos:notes>
   </fos:function>
   
   <fos:function name="json" prefix="fn">
      <fos:signatures>
         <fos:proto name="json" return-type="xs:string">
            <fos:arg name="input" type="xs:string?"/>
            <fos:arg name="options" type="map(*)" usage="inspection"  default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Creates a JSON representation of an arbitrary XDM value.</p>
      </fos:summary>
      <fos:rules>
         <p>This function returns a string, in JSON format, containing a representation of the
         supplied input <code>$input</code>. The function is error-free (it accepts any input sequence
         whatsoever), but it is not lossless: there are cases when two different XDM values will
         have the same JSON representation. For example, the sequence <code>(1, 2)</code>
            and the array <code>[1, 2]</code> are both output as <code>[1,2]</code>.</p>
         
         <p>The entries that may appear in the <code>$options</code> map are as follows:</p>
         
         <fos:options>
            <fos:option key="indent">
               <fos:meaning>Determines whether additional whitespace should be added to the output to improve readability.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false</fos:default>
               <fos:values>
                  <fos:value value="false">
                     The processor must not insert any insignificant whitespace between JSON tokens.
                  </fos:value>
                  <fos:value value="true">
                     The processor <rfc2119>may</rfc2119> insert whitespace between JSON tokens in order to improve readability.
                     The specification imposes no constraints on how this is done.
                  </fos:value>
               </fos:values>
            </fos:option>
            <fos:option key="element-map">
               <fos:meaning>Determines whether elements whose children are element nodes with distinct
                  names should be treated specially.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>true</fos:default>
               <fos:values>
                  <fos:value value="false">
                     The processor treats such elements in the same way as any other element.
                  </fos:value>
                  <fos:value value="true">
                     The processor generates a JSON object in which the child element names are used
                     as JSON property names.
                  </fos:value>
               </fos:values>
            </fos:option>
         </fos:options>
         
         
         <p>An input sequence is handled as follows:</p>
         <ulist>
            <item><p>An empty sequence is output as the JSON value null.</p></item>
            <item><p>A singleton sequence is output following the rules for processing items, below.</p></item>
            <item><p>A sequence of two or more items results in a JSON array, whose members are constructed
            from the items by applying the rules below.</p></item>
         </ulist>
         
         <p>Items are processed as follows:</p>
         
         <ulist>
            <item>
               <p><emph>Atomic values</emph></p>
               <ulist>
                  <item><p>An <code>xs:boolean</code> value is output as the JSON value <code>true</code> or <code>false</code>.</p></item>
                  <item><p>A numeric value, other than <code>INF</code>, <code>-INF</code>, or <code>NaN</code>,
                  is output as a JSON number.</p></item>
                  <item><p>Any other atomic value is cast to <code>xs:string</code>, and the result is output as a JSON string,
                  escaped as described below.</p></item>
               </ulist>
            </item>
            <item>
               <p><emph>Nodes</emph></p>
               <ulist>
                  <item>
                     <p><emph>Document nodes</emph></p>
                     <p>A document node is output as a JSON object with two properties, in order:</p>
                     <ulist>
                        <item><p>A property <code>#document</code> set to the value of the base URI of the document
                           if available, or an empty string otherwise..</p></item>
                        <item><p>A property <code>#content</code> whose value follows the rules for
                        outputting the content of an element node, given below.</p></item>                       
                     </ulist>
                  </item>
                  <item>
                     <p><emph>Element nodes</emph></p>
                     <p>An element node is output as a JSON object with the following properties, in order:</p>
                     <ulist>
                        <item>
                           <p><code>#element</code> set to the local name of the element.</p>
                        </item>
                        <item>
                           <p>If the element name has a prefix, <code>#prefix</code>, set to the value of the prefix.</p>
                        </item>
                     
                        <item>
                           <p>If the element name is in a namespace, <code>#namespace</code>, set to the value of the 
                           namespace URI.</p>
                        </item>
                        <item>
                           <p>For each attribute of the element, in arbitrary order, a property whose
                              name is derived from the attribute name as follows:</p>
                                 <ulist>
                                    <item><p>If the attribute name is in no namespace, then <code>"@"</code> followed
                                    by the local name.</p></item>
                                    <item><p>If the attribute name is in the XML namespace, then <code>"@xml:"</code> followed
                                       by the local name.</p></item>
                                    <item><p>Otherwise <code>"@Q{uri}local"</code> where <code>uri</code> is the namespace
                                       URI and <code>local</code> is the local name.</p></item>
                                 </ulist>
                              
                                 <p>The property value is the result of atomizing the attribute node and applying the
                                 <code>fn:json</code> function to the result. (For untyped attributes, the result
                                 will always be a single string.)</p>
                              
                           
                        </item>
                        <item>
                           <p>The children of the element are processed as follows:</p>
                           <ulist>
                              <item>
                                 <p>If there are no children, nothing is output.</p>
                              </item>
                              <item>
                                 <p>If the element has a type annotation that is a simple type, or if its content
                                 comprises a single text node, then a property <code>#value</code> set to the result
                                 of atomizing the element node and applying the <code>fn:json</code> function
                                 to the result.</p>
                              </item>
                              <item>
                                 <p>If (a) the children consist exclusively of elements and whitespace-only
                                 text nodes, and (b) the child element nodes are all in the same namespace, or all in no
                                 namespace, and (c) each child element has a local name that is distinct from the local
                                 name of any other child, and (d) the <code>element-map</code> option is not
                                    present in <code>$options</code> with the value <code>false()</code>,
                                    then a property <code>#content</code> whose value is a JSON
                                 object having one property for each child element node. The name of this property
                                 is the local name of the element, and the value of the property is obtained by applying
                                 these rules recursively, except that for an empty element, the value is represented
                                 as JSON <code>null</code>.</p>
                              </item>
                              <item><p>Otherwise, a property <code>#content</code> whose value is an array, with
                              one member for each child node (including whitespace-only text nodes), obtained
                              by applying the <code>fn:json</code> function to that child node.</p></item>
                           </ulist>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p><emph>Text nodes</emph></p>
                     <p>A JSON object with a single property <code>#text</code> whose value is the
                        string value of the text node.</p>
                  </item>
                  <item>
                     <p><emph>Comment nodes</emph></p>
                     <p>A JSON object with a single property <code>#comment</code> whose value is the
                        string value of the comment.</p>
                  </item>
                  <item>
                     <p><emph>Processing instruction nodes</emph></p>
                     <p>A JSON object with a two properties (in order): <code>#processing-instruction</code> set to the
                        name of the processing instruction, and <code>#data</code> set to the
                        string value of the processing instruction node.</p>
                  </item>
                  <item>
                     <p><emph>Attribute nodes</emph></p>
                     <p>Attribute nodes that are reached via an element node are output as described
                        under “element nodes”, above.</p>
                     <p>Free-standing attribute nodes are output as JSON objects with properties
                     <code>#attribute</code> set to the local name of the attribute, <code>#prefix</code>
                     (if non-empty) set to the prefix of the attribute’s name, <code>#namespace</code>
                     (if non-empty) set to the namespace URI, and <code>#value</code> set to
                        the result of atomizing the attribute value and applying the
                        <code>fn:json</code> function to the result.</p>
                  </item>
                  <item><p><emph>Namespace nodes</emph></p></item>
                  <item><p>Namespace nodes that are reached via an element node result in no output.</p></item>
                  <item><p>Free-standing namespace nodes are output as JSON objects with properties
                  <code>#namespace</code> set to the namespace prefix (<code>""</code> for the default
                  namespace) and <code>#uri</code> set to the namespace URI.</p></item>
               </ulist>            
            </item>
            <item>
               <p><emph>Maps</emph></p>
               <p>An XDM map is output as a JSON object with one property for each entry in the map.</p>
               <p>The property name is derived from the key value by converting the value to a string
               and applying escaping rules. If the property name thus generated is the same as a previously output
               property name, then it is made unique by appending <code>"(N)"</code> where <var>N</var> is the smallest
               positive integer that makes the resulting value unique.</p>
               <p>The property value is derived by applying the <code>fn:json</code> function to the value in the map entry.</p>
               
               <note><p>Conflicts between property names can arise because the XDM model allows keys of different types,
                  for example the <code>xs:date</code> value <code>2020-12-31</code> and the string value 
                  <code>"2020-12-31"</code> can co-exist. The map <code>map{xs:duration('PT1D'):20, "PT1D":30}</code>
                  is converted to the JSON string <code>{"PT1D":20,"PT1D(1)":30}</code> or 
                  <code>{"PT1D":30,"PT1D(1)":20}</code>, depending on the (unpredictable) order in which the
               entries in the map are processed.</p></note>
               <note><p>Because the order of entries in a map is unpredictable, the order in which the
               properties are listed in the JSON output is also unpredictable.</p></note>
               </item>
            <item>
               <p><emph>Arrays</emph></p>
               <p>An XDM array is output as a JSON array. Each member of the XDM array generates one entry in the
                  JSON array, in order, obtained by applying the <code>fn:json</code> function to the XDM array member.</p>              
            </item>
            <item>
               <p><emph>Functions</emph></p>
               <p>An XDM function, other than a map or array, is output as a JSON object with the following
               properties:</p>
               <ulist>
                  <item><p><code>#function</code>, set to the local name of the function
                  if it has a name, or the empty string otherwise.</p></item>
                  <item><p><code>#namespace</code>, set to the namespace URI of the function. The property
                  is omitted for an anonymous function.</p></item>
                  <item><p><code>#arity</code>, set to the arity of the function as a JSON number.</p></item>
                  <item><p><code>#arguments</code> whose value is an array
                  of strings, which identify the names and types of the function arguments,
                  in the format <code>$Q{uri}local as SequenceType</code>: for example 
                     <code>["$x as double", "$y as string"]</code>. Namespace prefixes must not be used:
                     unprefixed element names and variable names are taken to be in no namespace, and unprefixed
                     type names are taken to be in the namespace <code>http://www.w3.org/2001/XMLSchema</code>.
                  </p></item>
                  <item><p><code>#result</code> whose value is a string 
                     identifying the type of the function result, using the same conventions as for <code>#arguments</code>.</p></item>
                  <item><p>Optionally at implementer discretion, <code>#implementation</code> whose value is a string 
                     representing the function’s implementation in implementation-defined format.</p></item>
               </ulist>
               <p>Strings are escaped as follows:</p>
               <olist>
                  <item>
                     <p>Any occurrence of backslash is replaced by <code>\\</code></p>
                  </item>
                  
                  <item>
                     <p>Any occurrence of quotation mark, backspace, form-feed, newline, carriage return, or tab is 
                        replaced by <code>\"</code>, <code>\b</code>, <code>\f</code>, <code>\n</code>, <code>\r</code>, or <code>\t</code> respectively; </p>
                  </item>
                  
                  <item>
                     <p>Any other codepoint in the range 1-31 or 127-159 is replaced by an escape in 
                        the form <code>\uHHHH</code> where <code>HHHH</code> is the upper-case hexadecimal representation of the codepoint value.</p>
                  </item>
               </olist>
            </item>
         </ulist>        
      </fos:rules>
      <fos:notes>
         <p>In the JSON output, names of properties defined in this specification are prefixed with <code>#</code>;
         names not so prefixed are derived from names appearing in the input.</p>
         <p>Namespace information may be lost (specifically, namespaces that are declared but not used are
         not retained in the output).</p>
         <p>The distinction between sequences and arrays is lost.</p>
         <p>The distinction between different atomic types is lost, except for the boolean / number / string
         distinction present in JSON.</p>
         <p>In elements whose children are elements with distinct names, whitespace text nodes are lost,
         and the namespace URIs and prefixes of the child elements are lost.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>json(())</fos:expression>
               <fos:result>'null'</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>json(12)</fos:expression>
               <fos:result>'12'</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>json((12, "December"))</fos:expression>
               <fos:result>'[12,"December"]'</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>json(true())</fos:expression>
               <fos:result>'true'</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>json(map{"a":1,"b":number('NaN'),"c":(1,2,3)})</fos:expression>
               <fos:result>'{"a":1,"b":"NaN","c":[1,2,3]}'</fos:result>
               <fos:postamble>(or some permutation thereof)</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><![CDATA[json(<a x="2">banana</a>)]]></fos:expression>
               <fos:result>'{"#element":"a","@x":"2","#value":"banana"}'</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><![CDATA[json(<a><b/><c>2</c></a>)]]></fos:expression>
               <fos:result>'{"#element":"a","#content":{"b":null,"c":"2"}}'</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><![CDATA[json(<a><b/><b/><c/></a>)]]></fos:expression>
               <fos:result>'{"#name":"a","#content":[{"#name":"b"},{"#name":"b"},{"#name":"c}]}'</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><![CDATA[json(<a>A <i>nice</i> one!</a>)]]></fos:expression>
               <fos:result>'{"#name":"a","#content":["A ",{"#name":"i", "#value":"nice"}," one!"]}'</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed for 4.0; not yet reviewed.</fos:version>
      </fos:history>
   </fos:function>


   <fos:function name="size" prefix="array">
      <fos:signatures>
         <fos:proto name="size" return-type="xs:integer">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the number of members in the supplied array.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function returns the number of members in the array.</p>
         <p diff="chg" at="A">More formally, the function returns the value of <code>fn:count(array:members($array))</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>Note that because an array is an item, the <code>fn:count</code> function
            when applied to an array always returns <code>1</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:size(["a", "b", "c"])</fos:expression>
               <fos:result>3</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:size(["a", ["b", "c"]])</fos:expression>
               <fos:result>2</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:size([ ])</fos:expression>
               <fos:result>0</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:size([[ ]])</fos:expression>
               <fos:result>1</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   
   <fos:function name="empty" prefix="array">
      <fos:signatures>
         <fos:proto name="empty" return-type="xs:boolean">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the supplied array contains no members.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>true</code> if and only if <code>$array</code> contains no members, that is,
            if <code>array:size($array) eq 0</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>The test for emptiness is not the same as the test used by the
            <code>xsl:on-empty</code> instruction in XSLT. For example, an array 
            is not considered empty by this function if it contains a single
            member that is itself an empty array.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:empty(["a", "b", "c"])</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:empty([])</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:empty([[]])</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:empty([()])</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed for 4.0, see issue 229</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="exists" prefix="array">
      <fos:signatures>
         <fos:proto name="exists" return-type="xs:boolean">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the supplied array contains one or more members.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns <code>true</code> if and only if <code>$array</code> contains one or more members, that is,
            if <code>array:size($array) gt 0</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>The function name is chosen by analogy with <code>fn:exists</code>. Note that the function tests whether
         any array members exist, not whether the array itself exists. A function such as:</p>
         <eg>function($a as array(*)?) as xs:boolean { return array:exists($a) }</eg>
            <p>will raise a type error (rather than returning <code>false</code>) if the argument <code>$a</code> is
            an empty sequence, because <code>array:exists</code> does not allow the argument to be
            an empty sequence.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:exists(["a", "b", "c"])</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:exists([])</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:exists([[]])</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:exists([()])</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed for 4.0, see issue 229</fos:version>
      </fos:history>
   </fos:function>
   

   <fos:function name="get" prefix="array">
      <fos:signatures>
         <fos:proto name="get" return-type="item()*">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="position" type="xs:integer"/>
            <fos:arg name="fallback" type="function(xs:integer) as item()*" 
               default="fn($i) { fn:error(fn:QName('', 'FOAY0001')) }"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the value at the specified position in the supplied array
            (counting from 1).</p>
      </fos:summary>
      <fos:rules>
         <p diff="chg" at="2022-12-16">Informally, the function returns the member at a specified position in the array.
         If <code>$position</code> is less than one or greater than <code>array:size($array)</code>,
         then the <code>$fallback</code> function is called, supplying the value of <code>$position</code>
         as the argument value; and the result of this call is returned.</p>
         <p diff="chg" at="2022-12-16">The default <code>$fallback</code> function raises a dynamic error. The call on <code>fn:error</code>
         shown as the default is for illustrative purposes only; apart from the error code (<code>err:FOAY0001</code>)
            the details of the error (such as the error message) are <termref def="implementation-dependent">implementation-dependent</termref>.</p>
         <p diff="chg" at="2022-12-16">More formally, the function returns the value of:</p> 
            <eg>if ($position = (1 to array:size($array)))
then array:members($array)[$position]?value 
else $fallback($position)</eg>
      </fos:rules>
      <fos:errors>
         <p><phrase diff="add" at="2022-12-16">In the absence of a <code>$fallback</code> function</phrase>,
            a dynamic error occurs <errorref class="AY" code="0001"
               /> if <code>$position</code> is not in the range <code>1 to
               array:size($array)</code> inclusive.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>["a", "b", "c"] => array:get(2)</fos:expression>
               <fos:result>"b"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>["a", ["b", "c"]] => array:get(2)</fos:expression>
               <fos:result>["b", "c"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>["a"] => array:get(1, void#1)</fos:expression>
               <fos:result>"a"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>[] => array:get(1, void#1)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="put" prefix="array">
      <fos:signatures>
         <fos:proto name="put" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="position" type="xs:integer" usage="inspection"/>
            <fos:arg name="member" type="item()*" usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing all the members of a supplied array, except for one member which is replaced with a new value.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the result is an array whose size is <code>array:size($array)</code>, in which all
            members in positions other than <code>$position</code> are the same as the members in the corresponding position
            of <code>$array</code>, and the member in position <code>$position</code> is <code>$member</code>.</p>
         <p>More formally, the result is the value of the expression
            <code>$array => array:remove($position) => array:insert-before($position, $member)</code>.</p>

      </fos:rules>
      <fos:errors>
         <p>A dynamic error occurs <errorref class="AY" code="0001"
               /> if <code>$position</code> is not in the range <code>1 to
            array:size($array)</code> inclusive.</p>
         <p>This error will always occur if <code>$array</code> is empty.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:put(["a", "b", "c"], 2, "d")</fos:expression>
               <fos:result>["a", "d", "c"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:put(["a", "b", "c"], 2, ("d", "e"))</fos:expression>
               <fos:result>["a", ("d", "e"), "c"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:put(["a"], 1, ["d", "e"])</fos:expression>
               <fos:result>[["d", "e"]]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Unchanged in 4.0.</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="replace" prefix="array">
      <fos:signatures>
         <fos:proto name="replace" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="position" type="xs:integer" usage="inspection"/>
            <fos:arg name="action" type="function(item()*) as item()*" usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing all the members of a supplied array, except for one member which is replaced with a new value,
            the new value being computed from the previous value.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the result is an array whose size is <code>array:size($array)</code>, in which all
            members in positions other than <code>$position</code> are the same as the members in the corresponding position
            of <code>$array</code>, and the member in position <code>$position</code> is the result of applying
            the <code>$action</code> function to the original value in that position.</p>
         <p>More formally, the result is the value of the expression
            <code>$array => array:remove($position) => array:insert-before($position, $action($array($position)))</code>.</p>
         
      </fos:rules>
      <fos:errors>
         <p>A dynamic error occurs <errorref class="AY" code="0001"/> 
            if <code>$position</code> is not in the range <code>1 to
            array:size($array)</code> inclusive.</p>
         <p>This error will always occur if <code>$array</code> is empty.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:replace([10, 11, 12], 2, function { . + 10 })</fos:expression>
               <fos:result>[10, 21, 12]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:replace(["a", "b", "c"], 2, concat(?, "x"))</fos:expression>
               <fos:result>["a", "bx", "c"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:replace([("a", "b"), ("c", "d")], 2, reverse#1)</fos:expression>
               <fos:result>[("a", "b"), ("d", "c")]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">First introduced in 4.0.</fos:version>
      </fos:history>
   </fos:function>
   

   <fos:function name="append" prefix="array">
      <fos:signatures>
         <fos:proto name="append" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="member" type="item()*" usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing all the members of a supplied array, plus one additional member at the end.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the result is an array whose size is <code>array:size($array) + 1</code>, in which all
            members in positions 1 to <code>array:size($array)</code> are the same as the members in the corresponding position
            of <code>$array</code>, and the member in position <code>array:size($array) + 1</code> is <code>$member</code>.</p>
         <p diff="chg" at="A">More formally, the result is the value of the expression
            <code>array:of-members((array:members($array), map{'value':$member}))</code>.</p>

      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:append(["a", "b", "c"], "d")</fos:expression>
               <fos:result>["a", "b", "c", "d"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:append(["a", "b", "c"], ("d", "e"))</fos:expression>
               <fos:result>["a", "b", "c", ("d", "e")]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:append(["a", "b", "c"], ["d", "e"])</fos:expression>
               <fos:result>["a", "b", "c", ["d", "e"]]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="join" prefix="array">
      <fos:signatures>
         <fos:proto name="join" return-type="array(*)">
            <fos:arg name="arrays" type="array(*)*" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Concatenates the contents of several arrays into a single array.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function concatenates the members of several arrays into a single array.</p>
         <p diff="chg" at="A">More formally, the function returns the result of 
            <code>array:of-members($arrays ! array:members(.))</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:join(())</fos:expression>
               <fos:result>[ ]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:join([1, 2, 3])</fos:expression>
               <fos:result>[1, 2, 3]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:join((["a", "b"], ["c", "d"]))</fos:expression>
               <fos:result>["a", "b", "c", "d"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:join((["a", "b"], ["c", "d"], [ ]))</fos:expression>
               <fos:result>["a", "b", "c", "d"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:join((["a", "b"], ["c", "d"], [["e", "f"]]))</fos:expression>
               <fos:result>["a", "b", "c", "d", ["e", "f"]]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="subarray" prefix="array">
      <fos:signatures>
         <fos:proto name="subarray" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="start" type="xs:integer"/>
            <fos:arg name="length" type="xs:integer?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing all members from a supplied array starting at a supplied
            position, up to a specified length.</p>
      </fos:summary>
      <fos:rules>
         <p>Except in error cases, 
            the two-argument version of the function returns the same result as the three-argument
            version when called with <code>$length</code> equal to the value of <code>array:size($array) -
               $start + 1</code>.</p>
         <p diff="add" at="2022-12-19">Setting the third argument to the empty sequence has the same effect as omitting the argument.</p>
         <p>Except in error cases, the result of the three-argument version of the function is the 
            value of the expression
            <code role="example">array:of-members(array:members($array) => fn:subsequence($start, $length))</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="AY" code="0001"
                  /> if <code>$start</code> is less than one
            <phrase>or greater than <code>array:size($array) + 1</code></phrase>.</p>
         <p>For the three-argument version of the function:</p>
         <ulist>
            <item>
               <p>A dynamic error is raised <errorref class="AY" code="0002"
                     /> 
               if <code>$length</code> is less than zero.</p>
            </item>
            <item>
               <p>A dynamic error is raised <errorref class="AY" code="0001"
                     /> 
               if <code>$start + $length</code> is greater than <code>array:size($array) + 1</code>.</p>
            </item>
         </ulist>
      </fos:errors>
      <fos:notes>
         <p>The value of <code>$start</code> can be equal to <code>array:size($array) + 1</code> provided that <code>$length</code>
         is either equal to zero or omitted. In this case the result will be an empty array.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:subarray(["a", "b", "c", "d"], 2)</fos:expression>
               <fos:result>["b", "c", "d"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:subarray(["a", "b", "c", "d"], 5)</fos:expression>
               <fos:result>[ ]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:subarray(["a", "b", "c", "d"], 2, 0)</fos:expression>
               <fos:result>[ ]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:subarray(["a", "b", "c", "d"], 2, 1)</fos:expression>
               <fos:result>["b"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:subarray(["a", "b", "c", "d"], 2, 2)</fos:expression>
               <fos:result>["b", "c"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:subarray(["a", "b", "c", "d"], 5, 0)</fos:expression>
               <fos:result>[ ]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:subarray([ ], 1, 0)</fos:expression>
               <fos:result>[ ]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="index-where" prefix="array">
      <fos:signatures>
         <fos:proto name="index-where" return-type="xs:integer*">
            <fos:arg name="array" type="array(*)"/>
            <fos:arg name="predicate" type="function(item()*) as xs:boolean"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the position in an input array of members that match a supplied predicate.</p>
      </fos:summary>
      <fos:rules>
         
         <p>The result of the function is a sequence of integers, in monotonic ascending order, representing
            the 1-based positions in the input array of those members for which the supplied predicate function
            returns <code>true</code>.</p>
         <p>More formally, the function returns the result of the expression:</p>
         <eg>index-of(array:for-each($input, $predicate)?*, true())</eg>
      </fos:rules>
      
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:index-where([], boolean#1)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:index-where([0, (), 4, 9], boolean#1)</fos:expression>
               <fos:result>(3, 4)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:index-where(
  array { 1 to 10 },
  function {. mod 2 = 0 }
)</eg></fos:expression>
               <fos:result>(2, 4, 6, 8, 10)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:index-where(
  [ "January", "February", "March", "April",
    "May", "June", "July", "August", "September",
    "October", "November", "December" ],
  contains(?, "r")
)</eg></fos:expression>
               <fos:result>(1, 2, 3, 4, 9, 10, 11, 12)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:index-where(
  [(1, 2, 3), (4, 5, 6), (7, 8)],
  function($m) { count($m) = 3 }
)</eg></fos:expression>
               <fos:result>(1, 2)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Approved 2022-12-13 for inclusion in 4.0 - issue #114 </fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="slice" prefix="array">
      <fos:signatures>
         <fos:proto name="slice" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="transmission"/>
            <fos:arg name="start" type="xs:integer?" default="()"/>
            <fos:arg name="end" type="xs:integer?" default="()"/>
            <fos:arg name="step" type="xs:integer?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing selected members of a supplied input array based on their position.</p>
      </fos:summary>
      <fos:rules>
         <p>Returns the value of <code role="example">array:of-members(array:members($array) => fn:slice($start, $end, $step))</code></p>
      </fos:rules>
      <fos:notes>
         <p>The function is formally defined by converting the array to a sequence, applying 
            <code>fn:slice</code> to this sequence, and then converting the resulting sequence
            back to an array.</p>
         <p>Note that unlike other operations on arrays, there are no out-of-bounds errors for inappropriate
         values of <code>$start</code>, <code>$end</code>, or <code>$step</code>.</p>
      </fos:notes>
      
      <fos:examples>
         <fos:variable name="in" id="a-slice" as="xs:string*" select="['a', 'b', 'c', 'd', 'e']"/>
         <fos:example>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := 2, end := 4)</fos:expression>
               <fos:result>["b", "c", "d"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := 2)</fos:expression>
               <fos:result>["b", "c", "d", "e"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, end := 2)</fos:expression>
               <fos:result>["a", "b"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := 3, end := 3)</fos:expression>
               <fos:result>["c"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := 4, end := 3)</fos:expression>
               <fos:result>["d", "c"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := 2, end := 5, step := 2)</fos:expression>
               <fos:result>["b", "d"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := 5, end := 2, step := -2)</fos:expression>
               <fos:result>["e", "c"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := 2, end := 5, step := -2)</fos:expression>
               <fos:result>[]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := 5, end := 2, step := 2)</fos:expression>
               <fos:result>[]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in)</fos:expression>
               <fos:result>["a", "b", "c", "d", "e"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := -1)</fos:expression>
               <fos:result>["e"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := -3)</fos:expression>
               <fos:result>["c", "d", "e"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, end := -2)</fos:expression>
               <fos:result>["a", "b", "c", "d"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := 2, end := -2)</fos:expression>
               <fos:result>["b", "c", "d"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := -2, end := 2)</fos:expression>
               <fos:result>["d", "c", "b"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := -4, end := -2)</fos:expression>
               <fos:result>["b", "c", "d"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := -2, end := -4)</fos:expression>
               <fos:result>["d", "c", "b"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := -4, end := -2, step := 2)</fos:expression>
               <fos:result>["b", "d"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice($in, start := -2, end := -4, step := -2)</fos:expression>
               <fos:result>["d", "b"]</fos:result>
            </fos:test>
            <fos:test use="a-slice">
               <fos:expression>array:slice(["a", "b", "c", "d"], 0)</fos:expression>
               <fos:result>["a", "b", "c", "d"]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed for 4.0; not yet reviewed?.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="remove" prefix="array">
      <fos:signatures>
         <fos:proto name="remove" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="positions" type="xs:integer*"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing all the members of the supplied array, except for the 
            members at specified positions.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function returns an array of size <phrase><code>array:size($array) - fn:count(fn:distinct-values($positions))</code></phrase> 
            containing all members from <code>$array</code>
            except the members whose position (counting from 1) is present in the sequence <code>$positions</code>.
         The order of the remaining members is preserved.</p>
         <p diff="chg" at="A">More formally, the result of the function, except in error cases, is given by the expression
            <code role="example">array:of-members(array:members($array) => fn:remove($positions))</code>.
         </p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="AY" code="0001"
               /> if any integer in <code>$positions</code> is not in the range <code>1 to
         array:size($array)</code> inclusive. By implication, an error occurs if <code>$array</code> is empty, unless <code>$positions</code>
         is also empty.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:remove(["a", "b", "c", "d"], 1)</fos:expression>
               <fos:result>["b", "c", "d"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:remove(["a", "b", "c", "d"], 2)</fos:expression>
               <fos:result>["a", "c", "d" ]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:remove(["a"], 1)</fos:expression>
               <fos:result>[ ]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:remove(["a", "b", "c", "d"], 1 to 3)</fos:expression>
               <fos:result>["d"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:remove(["a", "b", "c", "d"], ())</fos:expression>
               <fos:result>["a", "b", "c", "d"]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="insert-before" prefix="array">
      <fos:signatures>
         <fos:proto name="insert-before" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="position" type="xs:integer"/>
            <fos:arg name="member" type="item()*" usage="navigation"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing all the members of the supplied array, with one additional member at a specified position.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function returns an array of size <code>array:size($array) + 1</code>
            containing all members from <code>$array</code>
            whose position is less than <code>$position</code>, then a new member given by <code>$member</code>, and
            then all members from <code>$array</code> whose position is greater than or equal to <code>$position</code>. 
            Positions are counted from 1.</p>
         <p>More formally, except in error cases, the result is the value of the expression
            <code role="example">array:of-members(array:members($array) => fn:insert-before($position, map{'value':$member}))</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error occurs <errorref class="AY" code="0001"
               /> if <code>$position</code> is not in the range <code>1 to
            array:size($array) + 1</code> inclusive.</p>
      </fos:errors>
      <fos:notes>
         <p>Setting <code>$position</code> to 1 has the effect of prepending the new member at the start of the array. Setting <code>$position</code>
         to the value <code>array:size($array) + 1</code> delivers the same result as <code>array:append($array, $member)</code>.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>array:insert-before(
  ["a", "b", "c", "d"],
  3,
  ("x", "y")
)</eg></fos:expression>
               <fos:result>["a", "b", ("x", "y"), "c", "d"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:insert-before(
  ["a", "b", "c", "d"],
  5,
  ("x", "y")
)</eg></fos:expression>
               <fos:result>["a", "b", "c", "d", ("x", "y")]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:insert-before(
  ["a", "b", "c", "d"],
  3,
  ["x", "y"]
)</eg></fos:expression>
               <fos:result>["a", "b", ["x", "y"], "c", "d"]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>



   <fos:function name="head" prefix="array">
      <fos:signatures>
         <fos:proto name="head" return-type="item()*">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the first member of an array, that is <code>$array(1)</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns first member of <code>$array</code>,
            that is the value of <code>array:get($array, 1)</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error occurs <errorref class="AY" code="0001"
            /> if <code>$array</code> is empty.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:head([5, 6, 7, 8])</fos:expression>
               <fos:result>5</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:head([["a", "b"], ["c", "d"]])</fos:expression>
               <fos:result>["a", "b"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:head([("a", "b"), ("c", "d")])</fos:expression>
               <fos:result>"a", "b"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Unchanged in 4.0.</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="foot" prefix="array">
      <fos:signatures>
         <fos:proto name="foot" return-type="item()*">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the last member of an array, that is <code>$array(array:size($array))</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns last member of <code>$array</code>, that is the value of <code>array:get($array, array:size($array))</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error occurs <errorref class="AY" code="0001"
         /> if <code>$array</code> is empty.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:foot([5, 6, 7, 8])</fos:expression>
               <fos:result>8</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:foot([["a", "b"], ["c", "d"]])</fos:expression>
               <fos:result>["c", "d"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:foot([("a", "b"), ("c", "d")])</fos:expression>
               <fos:result>"c", "d"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed and accepted for 4.0, see issue 97</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="tail" prefix="array">
      <fos:signatures>
         <fos:proto name="tail" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing all members except the first from a supplied array.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns an array containing all members of the supplied array except the first,
            that is <code>array:remove($array, 1)</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error occurs <errorref class="AY" code="0001"
            /> if <code>$array</code> is empty.</p>
      </fos:errors>
      <fos:notes>
         <p>If the supplied array contains exactly one member, the result will be an empty array.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:tail([5, 6, 7, 8])</fos:expression>
               <fos:result>[6, 7, 8]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:tail([5])</fos:expression>
               <fos:result>[ ]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Unchanged in 4.0.</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="trunk" prefix="array">
      <fos:signatures>
         <fos:proto name="trunk" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing all members except the last from a supplied array.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns an array containing all members of the supplied array except the last,
            that is <code>array:remove($array, array:size($array))</code>.</p>
      </fos:rules>
      <fos:errors>
         <p>A dynamic error occurs <errorref class="AY" code="0001"
         /> if <code>$array</code> is empty.</p>
      </fos:errors>
      <fos:notes>
         <p>If the supplied array contains exactly one member, the result will be an empty array.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:trunk([5, 6, 7, 8])</fos:expression>
               <fos:result>[5, 6, 7]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:trunk([5])</fos:expression>
               <fos:result>[ ]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed and accepted for 4.0, see issue 97</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="reverse" prefix="array">
      <fos:signatures>
         <fos:proto name="reverse" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing all the members of a supplied array, but in reverse order.</p>
      </fos:summary>
      <fos:rules>
         <p diff="chg" at="A">The function returns the result of the expression:
            <code role="example">array:of-members(array:members($array) => fn:reverse())</code></p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:reverse(["a", "b", "c", "d"])</fos:expression>
               <fos:result>["d", "c", "b", "a"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:reverse([("a", "b"), ("c", "d")])</fos:expression>
               <fos:result>[("c", "d"), ("a", "b")]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:reverse([(1 to 5)])</fos:expression>
               <fos:result>[(1, 2, 3, 4, 5)]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:reverse([])</fos:expression>
               <fos:result>[]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="for-each" prefix="array">
      <fos:signatures>
         <fos:proto name="for-each" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="action" type="function(item()*) as item()*" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns an array whose size is the same as <code>array:size($array)</code>, in which
            each member is computed by applying <code>$function</code> to the corresponding member of
            <code>$array</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function returns an array whose members are obtained by applying 
         the supplied <code>$function</code> to each member of the input array in turn.</p>
         <p>More formally, the function returns the result of the expression
            <code>array:of-members(array:members($array) ! map { 'value': $action(?value) }</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>array:for-each(
  [ "A", "B", 1, 2 ],
  function($z) { $z instance of xs:integer }
)</eg></fos:expression>
               <fos:result>[false(), false(), true(), true()]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:for-each(
  [ "the cat", "sat", "on the mat" ],
  tokenize#1
)</eg></fos:expression>
               <fos:result>[("the", "cat"), "sat", ("on", "the", "mat")]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:for-each(
  [ [ "the", "cat" ], [ "sat" ], [ "on", "the", "mat" ] ],
  array:flatten#1
)</eg></fos:expression>
               <fos:result>[("the", "cat"), "sat", ("on", "the", "mat")]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="filter" prefix="array">
      <fos:signatures>
         <fos:proto name="filter" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="predicate" type="function(item()*) as xs:boolean" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing those members of the <code>$array</code> for which 
            <code>$predicate</code> returns <code>true</code>.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function returns an array containing those members of the input
         array that satisfy the supplied predicate.</p>
         <p>More formally, the function returns the result of the expression
            <code role="example">array:of-members(array:members($array) => fn:filter(function($m) { $predicate($m?value) })</code>.</p>

      </fos:rules>
      <fos:errors>
         <p>As a consequence of the function signature and the function calling rules, a type error occurs if the supplied
            function <code>$function</code> returns anything other than a single <code>xs:boolean</code> item; there is no conversion 
            to an effective boolean value.</p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>array:filter(
  ["A", "B", 1, 2],
  function($x) { $x instance of xs:integer }
)</eg></fos:expression>
               <fos:result>[1, 2]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:filter(
  ["the cat", "sat", "on the mat"],
  function { count(tokenize(.)) > 1 }
)</eg></fos:expression>
               <fos:result>["the cat", "on the mat"]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:filter(["A", "B", "", 0, 1], boolean#1)</fos:expression>
               <fos:result>["A", "B", 1]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="fold-left" prefix="array">
      <fos:signatures>
         <fos:proto name="fold-left" return-type="item()*">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="zero" type="item()*" usage="navigation"/>
            <fos:arg name="action" type="function(item()*, item()*) as item()*" usage="inspection"
            />
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Evaluates the supplied function cumulatively on successive members of the supplied
            array.</p>
      </fos:summary>
      <fos:rules>
         <p>The result of the function is the value of the expression 
            <code role="example">array:members($array) => fn:fold-left($zero, function($a, $b) { $action($a, $b?value })</code></p>
<!--         <eg>
if (array:size($array) eq 0)
then $zero
else array:fold-left(array:tail($array), 
                     $action($zero, array:head($array)), 
                     $action )
         </eg>-->
      </fos:rules>
      <fos:notes>
         <p>If the supplied array is empty, the function returns <code>$zero</code>.</p>
         <p>If the supplied array contains a single member <code>$m</code>, the function returns <code>$zero => $action($m)</code>.</p>
         <p>If the supplied array contains two members <code>$m</code> and <code>$n</code>, the function returns 
            <code>$zero => $action($m) => $action($n)</code>; and similarly for an input array with more than two members.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>array:fold-left(
  [true(), true(), false()],
  true(),
  function($x, $y) { $x and $y }
)</eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble>Returns true if every member of the input array has an effective boolean value of <code>true()</code>.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:fold-left(
  [true(), true(), false()],
  false(), 
  function($x, $y) { $x or $y }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>Returns true if at least one member of the input array has an effective boolean value of <code>true()</code>.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:fold-left(
  [ 1, 2, 3 ],
  [],
  function($x, $y) { [ $x, $y ] }
)</eg></fos:expression>
               <fos:result>[[[[], 1], 2], 3]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="fold-right" prefix="array">
      <fos:signatures>
         <fos:proto name="fold-right" return-type="item()*">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="zero" type="item()*" usage="navigation"/>
            <fos:arg name="action" type="function(item()*, item()*) as item()*" usage="inspection"
            />
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Evaluates the supplied function cumulatively on successive values of the supplied
            array.</p>
      </fos:summary>
      <fos:rules>
         <p>The result of the function is the value of the expression 
            <code role="example">array:members($array) => fn:fold-right($zero, function($a, $b) { $action($a, $b?value })</code></p>
 
      </fos:rules>
      <fos:notes>
         <p>If the supplied array is empty, the function returns <code>$zero</code>.</p>
         <p>If the supplied array contains a single member <code>$m</code>, the function returns <code>$action($m, $zero)</code>.</p>
         <p>If the supplied array contains two members <code>$m</code> and <code>$n</code>, the function returns 
            <code>$action($m, $action($n, $zero))</code>; and similarly for an input array with more than two members.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>array:fold-right(
  [true(), true(), false()],
  true(),
  function($x, $y) { $x and $y }
)</eg></fos:expression>
               <fos:result>false()</fos:result>
               <fos:postamble>Returns true if every member of the input array has an effective boolean value of <code>true()</code>.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:fold-right(
  [true(), true(), false()],
  false(),
  function($x, $y) { $x or $y }
)</eg></fos:expression>
               <fos:result>true()</fos:result>
               <fos:postamble>Returns true if at least one member of the input array has an effective boolean value of <code>true()</code>.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:fold-right(
  [ 1, 2, 3 ],
  [],
  function($x, $y) { [ $x, $y ] }
)</eg></fos:expression>
               <fos:result>[1, [2, [3, []]]]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="for-each-pair" prefix="array">
      <fos:signatures>
         <fos:proto name="for-each-pair" return-type="array(*)">
            <fos:arg name="array1" type="array(*)" usage="inspection"/>
            <fos:arg name="array2" type="array(*)" usage="inspection"/>
            <fos:arg name="action" type="function(item()*, item()*) as item()*" usage="inspection"
            />
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns an array obtained by evaluating the supplied function once for each pair of members at the same position in
            the two supplied arrays.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns the result of the expression:</p>
         <eg><code>array:of-members(
    for-each-pair(array:members($array1), 
                     array:members($array2), 
                     function($m, $n) {map{'value': $action($m?value, $n?value)}}))</code>
         </eg>
         
      </fos:rules>
      <fos:notes>
         <p>If the arrays have different size, excess members in the longer array are ignored.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>array:for-each-pair(
  ["A", "B", "C"],
  [1, 2, 3],
  function($x, $y) { array { $x, $y }}
)</eg></fos:expression>
               <fos:result>[["A", 1], ["B", 2], ["C", 3]]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>let $array := ["A", "B", "C", "D"]
return array:for-each-pair(
  $array,
  array:tail($array),
  concat#2
)</eg></fos:expression>
               <fos:result>["AB", "BC", "CD"]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="build" prefix="array">
      <fos:signatures>
         <fos:proto name="build" return-type="array(*)">
            <fos:arg name="input" type="item()*" usage="inspection"/>
            <fos:arg name="action" type="function(item()) as item()*" usage="inspection" default="fn:identity#1"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns an array obtained by evaluating the supplied function once for each item in the input sequence.</p>
      </fos:summary>
      <fos:rules>
         <p>If the function is called with one argument, the effect is the same as calling the two-argument
         function with <code>fn:identity#1</code> as the second argument.</p>
         <p>Informally, <code>array:build#2</code> applies the supplied function to each item 
            in the input sequence, and the resulting sequence becomes one member of the returned array.</p>
         <p>More formally, <code>array:build#2</code> returns the result of the expression:</p>
         <eg>array:of-members($input ! map{'value':$action(.)})</eg>
      </fos:rules>
      <fos:notes>
         <p>The single-argument function <code>array:build($input)</code> is equivalent to the XPath
         expression <code>array{$input}</code>, but it is useful to have this available as a function.</p>
         <p>The two-argument form facilitates the construction of arrays whose members are arbitrary
         sequences.</p>
         <p>See also <code>array:for-each</code>, which provides similar functionality for the
            case where the input is an array rather than a sequence.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:build(1 to 5)</fos:expression>
               <fos:result>[1, 2, 3, 4, 5]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:build(
  1 to 5,
  function { 2 * . }
)</eg></fos:expression>
               <fos:result>[2, 4, 6, 8, 10]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:build(
  1 to 5,
  function { 1 to . }
)</eg></fos:expression>
               <fos:result>[1, (1,2), (1,2,3), (1,2,3,4), (1,2,3,4,5)]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:build(
  ("red", "green", "blue"),
  characters#1
)</eg></fos:expression>
               <fos:result>[("r", "e", "d"), ("g", "r", "e", "e", "n"), ("b", "l", "u", "e")]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:build(
  1 to 5,
  function { array { 1 to . } }
)</eg></fos:expression>
               <fos:result>[[1], [1,2], [1,2,3], [1,2,3,4], [1,2,3,4,5]]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed for 4.0.</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="members" prefix="array">
      <fos:signatures>
         <fos:proto name="members" return-type="record(value as item()*)*">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Delivers the contents of an array as a sequence of <term>value records</term>.</p>
      </fos:summary>
      <fos:rules>
         <p>The members of the array are delivered as a sequence of <term>value records</term>. 
            A value record is an item that encapsulates an arbitrary sequence <code>$S</code>: specifically
            it is a map comprising a single entry whose key is the <code>xs:string</code> value
            <code>"value"</code> and whose corresponding value is <code>$S</code>. The content encapsulated
         by a value record <code>$V</code> can be obtained using the expression <code>$V?value</code>.</p>
         
         
      </fos:rules>
      <fos:notes>
         <p>This function is the inverse of <code>array:of-members</code>.</p>   
      </fos:notes>
 
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:members([])</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:members([1 to 5])?value</fos:expression>
               <fos:result>(1, 2, 3, 4, 5)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:members([(1,1), (2,4), (3,9), (4,16), (5,25)])
! sum(?value)</eg></fos:expression>
               <fos:result>(2, 6, 12, 20, 30)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>let $array := [ "any array" ]
return deep-equal(
  $array,
  array:of-members(array:members($array))
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed for 4.0, see issues 29, 113, 314.</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="split" prefix="array">
      <fos:signatures>
         <fos:proto name="split" return-type="array(*)*">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Delivers the contents of an array as a sequence of singleton arrays.</p>
      </fos:summary>
      <fos:rules>
         <p>The members of the array are delivered as a sequence of arrays. 
            Each returned array encapsulates the value of a single array member.</p>
      </fos:rules>
      <fos:notes>
         <p>The function call <code>array:split($array)</code> produces the same result as the
            expression <code>for member $m in $array return [ $m ]</code>.</p>
         <p>This function is the inverse of <code>array:join</code>.</p>   
      </fos:notes>
 
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:split([])</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:split([ () ])</fos:expression>
               <fos:result>[ () ]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:split([ 1 to 5 ])</fos:expression>
               <fos:result>[ (1, 2, 3, 4, 5) ]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:split(
  array { 1 to 5 }
)</eg></fos:expression>
               <fos:result>[ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>array:split(
  [ (1,1), (2,4), (3,9), (4,16), (5,25) ]
) ! sum(.)</eg></fos:expression>
               <fos:result>2, 6, 12, 20, 30</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>let $array := [ "any array" ]
return deep-equal(
  $array,
  array:join(array:split($array))
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
   
   <fos:function name="of-members" prefix="array">
      <fos:signatures>
         <fos:proto name="of-members" return-type="array(*)">
            <fos:arg name="input" type="record(value as item()*)*" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Constructs an array from the contents of a sequence of <term>value records</term>.</p>
      </fos:summary>
      <fos:rules>
         <p>The input items must be <term>value records</term>.  A value record is an item that encapsulates 
            an arbitrary sequence <code>$S</code>: specifically
            it is a map comprising a single entry whose key is the <code>xs:string</code> value
            <code>"value"</code> and whose corresponding value is <code>$S</code>. The content encapsulated
            by a value record <code>$V</code> can be obtained using the expression <code>$V?value</code>.</p>
  

      </fos:rules>
      <fos:notes>
         <p>This function is the inverse of <code>array:members</code>.</p>

         
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:of-members(())</fos:expression>
               <fos:result>[]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:of-members(map { 'value': (1 to 5) })</fos:expression>
               <fos:result>[(1, 2, 3, 4, 5)]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:of-members((1 to 5) ! map { 'value': . })</fos:expression>
               <fos:result>[1, 2, 3, 4, 5]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:of-members((1 to 5) ! map { 'value': (., .*.) })</fos:expression>
               <fos:result>[(1,1), (2,4), (3,9), (4,16), (5,25)]</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed for 4.0, see issues 29, 113, 314.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="sort" prefix="array">
      <fos:signatures>
         <fos:proto name="sort" return-type="array(*)">
            <fos:arg name="array" type="array(*)" usage="inspection"/>
            <fos:arg name="collation" type="xs:string?" usage="absorption" default="fn:default-collation()"/>
            <fos:arg name="key" type="function(item()*) as xs:anyAtomicType*" usage="inspection" default="fn:data#1"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties arity="1">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="2">
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:properties arity="3">
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns an array containing all the members of the supplied array, sorted 
            according to the value of a sort key supplied as a function.</p>
      </fos:summary>
      <fos:rules>
         <p>Calling the single-argument version of the function is equivalent to calling the two-argument form
            with <code>default-collation()</code> as the second argument: that is, it sorts the members of an array according
            to the typed value of the items, using the default collation to compare strings.</p>

         <p>Calling the two-argument version of the function is equivalent to calling the three-argument form
            with <code>fn:data#1</code> as the third argument: that is, it sorts the members of an array according
            to the typed value of the items, using a specified collation to compare strings.</p>

         <p>In the case of both <code>array:sort#2</code> and <code>array:sort#3</code>, supplying an empty
            sequence as the second argument is equivalent to supplying <code>fn:default-collation()</code>. For more
            information on collations see <specref
               ref="choosing-a-collation"/>.</p>
         
         <p diff="chg" at="A">The result of <code>array:sort#3</code> is the value of the expression
            <code role="example">array:of-members(array:members($array) => sort($collation, function($x) { $key($x?value) }))</code></p>
      </fos:rules>
      <fos:errors>
         <p>If the set of computed sort keys contains values that are not comparable using the <code>le</code> operator then the sort 
            operation will fail with a dynamic error.
         </p>
      </fos:errors>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:sort([1, 4, 6, 5, 3])</fos:expression>
               <fos:result>[1, 3, 4, 5, 6]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:sort([1, -2, 5, 10, -10, 10, 8], (), abs#1)</fos:expression>
               <fos:result>[1, -2, 5, 8, 10, -10, 10]</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:sort([(1,0), (1,1), (0,1), (0,0)])</fos:expression>
               <fos:result>[(0,0), (0,1), (1,0), (1,1)]</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>To sort an array of strings <code>$in</code> using Swedish collation:</p>
            <eg>
let $SWEDISH := "http://www.w3.org/2013/collation/UCA?lang=se"
return array:sort($in, $SWEDISH)
            </eg>
         </fos:example>
         <fos:example>
            <p>To sort an array of maps representing employees, using last name as the major sort key and first name as the minor sort key,
               with the default collation:
            </p>
            <eg>array:sort($employees, (), function($emp) {$emp?name?last, $emp?name?first})</eg>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Functionality unchanged in 4.0, but the specification has been formalized.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="flatten" prefix="array">
      <fos:signatures>
         <fos:proto name="flatten" return-type="item()*">
            <fos:arg name="input" type="item()*"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Replaces any array appearing in a supplied sequence with the members of the array, recursively.</p>
      </fos:summary>
      <fos:rules>
         <p>The function processes the items in the supplied sequence <code>$input</code> as follows:</p>
         <ulist>
            <item>
               <p>An item that is an array is replaced by its members, retaining order.</p>
            </item>
            <item>
               <p>Any other item is retained unchanged.</p>
            </item>
         </ulist>
         <p>The process is then repeated so long as the sequence contains an array among its items.</p>
         <p>The function is equivalent to the following XQuery implementation (assuming static typing is not in force):</p>
         <eg>declare function flatten ($S as item()*) {
    for $s in $S return (
      typeswitch($s)
        case $a as array(*) return flatten($a?*)
        default return $s
)}</eg>

      </fos:rules>
      <fos:notes>
         <p>The argument to the function will often be a single array item, but this is not essential.</p>
         <p>Unlike atomization, this function retains any nodes contained in the array.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:flatten([1, 4, 6, 5, 3])</fos:expression>
               <fos:result>(1, 4, 6, 5, 3)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:flatten(([1, 2, 5], [[10, 11], 12], [], 13))</fos:expression>
               <fos:result>(1, 2, 5, 10, 11, 12, 13)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:flatten([(1,0), (1,1), (0,1), (0,0)])</fos:expression>
               <fos:result>(1, 0, 1, 1, 0, 1, 0, 0)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="3.1">First introduced in 3.1.</fos:version>
         <fos:version version="4.0">Retained unchanged.</fos:version>
      </fos:history>
   </fos:function>
   <fos:function name="values" prefix="array">
      <fos:signatures>
         <fos:proto name="values" return-type="item()*">
            <fos:arg name="array" type="array(*)"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a sequence with the members of an array.</p>
      </fos:summary>
      <fos:rules>
         <p>The function concatenates the members of <code>$array</code> and returns them as
           a sequence. The values are returned in their original order.
           Arrays contained within members are returned unchanged.</p>
         <p>The effect of the function is equivalent to <code>$array?*</code>.</p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>array:values(array { "one", "two", "three" })</fos:expression>
               <fos:result>("one", "two", "three")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>array:values([ (), 1, (2 to 4), [ 5 ] ])</fos:expression>
               <fos:result>(1, 2, 3, 4, [ 5 ])</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
   </fos:function>
 
   <fos:function name="load-xquery-module" prefix="fn">
      <fos:signatures>
         <fos:proto name="load-xquery-module" return-type="map(*)">
            <fos:arg name="module-uri" type="xs:string"/>
            <fos:arg name="options" type="map(*)" usage="inspection" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-dependent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Provides access to the public functions and global variables of a dynamically loaded XQuery library module.</p>
      </fos:summary>
      <fos:rules>
         <p>The function loads an implementation-defined set of modules having the target namespace <code>$module-uri</code>.</p>
         <p>Calling the one-argument version of the function has the same effect as calling the two-argument version with an empty map
            as the second argument.</p>
         <p>The <code>$options</code> argument can be used to control the way in which the function operates. 
            The <termref
               def="option-parameter-conventions">option parameter conventions</termref> apply.</p>


         <fos:options>
            <fos:option key="xquery-version">
               <fos:meaning>The minimum level of the XQuery language that the
                  processor must support. </fos:meaning>
               <fos:type>xs:decimal</fos:type>
               <fos:default>The version given in the prolog of the library module; or
                  <termref
                     def="implementation-defined"
                  >implementation-defined</termref> if this is absent.</fos:default>
            </fos:option>
            <fos:option key="location-hints">
               <fos:meaning>A sequence of URIs (in the form of <code>xs:string</code> values) which may be used or ignored in an
                  <termref
                     def="implementation-defined"
                  >implementation-defined</termref> way.</fos:meaning>
               <fos:type>xs:string*</fos:type>
               <fos:default>Empty sequence</fos:default>
            </fos:option>
            <fos:option key="context-item">
               <fos:meaning>The item to be used as the initial context item when evaluating global variables in the library module. Supplying
                  an empty sequence is equivalent to omitting the entry from the map, and indicates the absence of a context item.
                  If the library module specifies a required type for the context item, then the supplied value <rfc2119>must</rfc2119> conform to
                  this type, without conversion.</fos:meaning>
               <fos:type>item()?</fos:type>
               <fos:default>Absent</fos:default>
            </fos:option>
            <fos:option key="variables">
               <fos:meaning>Values for external variables defined in the library module. Values <rfc2119>must</rfc2119> be supplied
                  for external variables that have no default value, and <rfc2119>may</rfc2119> be supplied for external variables
                  that do have a default value. The supplied value <rfc2119>must</rfc2119> conform to the required type of the variable, without conversion.
                  The map contains one entry for each external variable: the key is the variable’s name, and the associated value is
                  the variable’s value. The <termref
                     def="option-parameter-conventions"
                  >option parameter conventions</termref> do not apply
                  to this contained map.</fos:meaning>
               <fos:type>map(xs:QName, item()*)</fos:type>
               <fos:default>An empty map</fos:default>
            </fos:option>
            <fos:option key="vendor-options">
               <fos:meaning>Values for vendor-defined configuration options for the XQuery processor used to process the request. The key is the
                  name of an option, expressed as a QName: the namespace URI of the QName <rfc2119>should</rfc2119> be a URI controlled
                  by the vendor of the XQuery processor. The meaning of the associated value is <termref
                     def="implementation-defined"
                     >implementation-defined</termref>.
                  Implementations <rfc2119>should</rfc2119> ignore options whose names are in an unrecognized namespace. 
                  The <termref
                     def="option-parameter-conventions"
                  >option parameter conventions</termref> do not apply
                  to this contained map.</fos:meaning>
               <fos:type>map(xs:QName, item()*)</fos:type>
               <fos:default>An empty map</fos:default>
            </fos:option>
         </fos:options>

  
         <p>The result of the function is a map <var>R</var> with two entries:</p>
         <olist>
            <item>
               <p>There is an entry whose key is the <code>xs:string</code> value <code>"variables"</code> and whose associated value
               is a map <var>V</var>. This map (<var>V</var>) contains one entry for each public global variable declared in the library module. 
               The key of the
            entry is the name of the variable, as an <code>xs:QName</code> value; the associated value is the value of the variable.</p>
            </item>
            <item>
               <p>There is an entry whose key is the <code>xs:string</code> value <code>"functions"</code> and whose associated value
               is a map <var>F</var>. This map (<var>F</var>) contains one entry for each distinct QName <var>Q</var> that represents the
                  name of a public and non-external function declared in the library module. The key of the
               entry is <var>Q</var>, as an <code>xs:QName</code> value; the associated value is a map <var>A</var>.
               This map (<var>A</var>) contains one entry for each arity <var>N</var> within the arity range of any of the function declarations
                  with the given name; its key is <var>N</var>,
               as an <code>xs:integer</code> value, and its associated value is a function item obtained as if by evaluating
                  a named function reference <code>Q#N</code>, using the static and dynamic context of the call on
                  <code>fn:load-xquery-module</code>. The function item
               can be invoked using the rules for dynamic function invocation.
            </p>
               
            </item>
         </olist>

         <p>The static and dynamic context of the library module are established according to the rules in 
            <xspecref
               spec="XQ31" ref="id-xq-context-components"/>.</p>

         <p>It is <termref def="implementation-defined"
               >implementation-defined</termref> whether constructs in the library module 
            are evaluated in the same <termref
               def="execution-scope">execution scope</termref> as the calling module.</p>

         <p>The library module that is loaded may import other modules using an <code>import module</code> declaration. The result of
            <code>fn:load-xquery-module</code> does not include global variables or functions declared in such a transitively imported module.
            However, the <code>options</code> map supplied in the function call <rfc2119>may</rfc2119> 
            (and if no default is defined, <rfc2119>must</rfc2119>)
            supply values for external variables declared in transitively loaded library modules.</p>

         <p>The library module that is loaded may import schema declarations using an <code>import schema</code> declaration. It is
            <termref
               def="implementation-defined"
               >implementation-defined</termref> whether schema components in the in-scope 
            schema definitions of the calling module
            are automatically added to the in-scope schema definitions of the dynamically loaded module. The in-scope schema definitions
            of the calling and called modules must be consistent, according to the rules defined in 
            <xspecref
               spec="XQ31" ref="id-consistency-constraints"/>.</p>

         <p>Where nodes are passed to or from the dynamically loaded module, for example as an argument or result of a function, 
            they <rfc2119>should</rfc2119> if possible retain their node identity, their base URI, their type annotations, and their relationships to all other nodes 
            in the containing tree (including ancestors and siblings). If this is not possible, for example because the only way of passing nodes 
            to the chosen XQuery implementation is by serializing and re-parsing, then a node <rfc2119>may</rfc2119> be passed in the form of a deep 
            copy, which may lose information about the identity of the node, about its ancestors and siblings, about its base URI, about its type annotations, and about its 
            relationships to other nodes passed across the interface.</p>


      </fos:rules>
      <fos:errors>
         <p>If <code>$module-uri</code> is a zero length string, a dynamic error is raised <errorref
               class="QM" code="0001"/>.</p>
         <p>If the implementation is not able to find a library module with the specified target namespace, 
            an error is raised <errorref
               class="QM" code="0002"/>.</p>
         <p>If a static error (including a statically detected type error) is encountered when processing the library module, 
            a dynamic error is raised <errorref
               class="QM" code="0003"/>.</p>

         <p>If a value is supplied for the initial context item or for an external variable and the value does not conform to the required
            type declared in the dynamically loaded module, a dynamic error is raised <errorref
               class="QM" code="0005"/>.</p>
         <p>If no suitable XQuery processor is available, a dynamic error is raised <errorref
               class="QM" code="0006"
            />.
         This includes (but is not limited to) the following cases:</p>
         <olist>
            <item>
               <p>No XQuery processor is available;</p>
            </item>
            <item>
               <p>Use of the function has been disabled;</p>
            </item>
            <item>
               <p>No XQuery processor supporting the requested version of XQuery is available;</p>
            </item>
            <item>
               <p>No XQuery processor supporting the optional Module Feature is available.</p>
            </item>
         </olist>

         <p>If a dynamic error (including a dynamically detected type error) is encountered when processing the module 
            (for example, when evaluating its global variables), the dynamic error is returned <emph>as is</emph>.</p>
      </fos:errors>

      <fos:notes>
         
         <p>If a function declaration <var>F</var> in the loaded module declares (say) four parameters of which one is optional,
            its arity range will be from 3 to 4, so the result will include two function items corresponding to <code>F#3</code>
            and <code>F#4</code>. In the lower-arity function item, <code>F#3</code>, the fourth parameter will take its
            default value. If the expression that initializes the default value is context sensitive, the static and dynamic
            context for its evaluation are the static and dynamic contexts of the <code>fn:load-xquery-module</code>
            function call itself.
         </p>
         
         <p>As with all other functions in this specification, conformance requirements depend on the host language.
         For example, a host language might specify that provision of this function is optional, or that it is excluded entirely,
         or that implementations are required to support XQuery modules using a specified version of XQuery.</p>

         <p>Even where support for this function is mandatory, it is <rfc2119>recommended</rfc2119> for security reasons that implementations
         should provide a user option to disable its use, or to disable aspects of its functionality.</p>
         
         
      </fos:notes>

   </fos:function>

   <fos:function name="transform" prefix="fn">
      <fos:signatures>
         <fos:proto name="transform" return-type="map(*)">
            <fos:arg name="options" type="map(*)" usage="inspection"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Invokes a transformation using a dynamically loaded XSLT stylesheet.</p>
      </fos:summary>
      <fos:rules>
         <p>This function loads an XSLT stylesheet and invokes it to perform a transformation.</p>
         <p>The inputs to the transformation are supplied in the form of a map. 
            The <termref
               def="option-parameter-conventions"
            >option parameter conventions</termref> apply
            to this map; they do not apply to any nested map unless otherwise specified.</p>

         <p>The function first identifies the <term>requested XSLT version</term>, as follows:</p>

         <ulist>
            <item>
               <p>If the <code>xslt-version</code>
               option is present, the requested XSLT version is the value of that option. </p>
            </item>
            <item>
               <p>Otherwise, the requested XSLT version
               is the value of the <code>[xsl:]version</code> attribute of the outermost element in the supplied stylesheet or package.</p>
            </item>
         </ulist>

         <p>The function then attempts to locate an XSLT processor that implements the requested XSLT version.</p>

         <ulist>
            <item>
               <p>If a processor that implements the requested XSLT version is available, then it is used. </p>
            </item>
            <item>
               <p>Otherwise, if a processor that implements a version later than the requested version is available, then it is used. </p>
            </item>
            <item>
               <p>Otherwise, the function fails indicating that no suitable XSLT processor is available.</p>
            </item>
         </ulist>

         <note>
            <p>The phrase <emph>locate an XSLT processor</emph> includes the possibility of locating a software product and
         configuring it to act as an XSLT processor that implements the requested XSLT version.</p>
         </note>

         <p>If more than one XSLT processor is available under the above rules, then the one that is chosen may be selected according to
         the availability of requested features: see below.</p>

         <p>Once an XSLT processor has been selected that implements a given version of XSLT, the processor
         follows the rules of that version of the XSLT specification. This includes any decision to operate in backwards or forwards
         compatibility mode. For example, if an XSLT 2.0 processor is selected, and the stylesheet specifies <code>version="1.0"</code>,
         then the processor will operate in backwards compatibility mode; if the same processor is selected and the stylesheet
         specifies <code>version="3.0"</code>, the processor will operate in forwards compatibility mode.</p>

         <p>The combinations of options that are relevant to each version of XSLT, other than <code>xslt-version</code> 
            itself, are listed below. This is followed by a table giving the meaning of each option.</p>



         <olist>
            <item>
               <p>For invocation of an XSLT 1.0 processor (see <bibref ref="xslt10"
                     />), 
                  the supplied options must include all of the following <phrase
                     diff="chg" at="E">(if anything else is present, it is ignored)</phrase>:</p>
               <olist>
                  <item>
                     <p>The stylesheet, provided by supplying exactly one of the following:</p>
                     <slist>
                        <sitem>
                           <code>stylesheet-location</code>
                        </sitem>
                        <sitem>
                           <code>stylesheet-node</code>
                        </sitem>
                        <sitem>
                           <code>stylesheet-text</code>
                        </sitem>
                     </slist>
                  </item>
                  <item>
                     <p>The source tree, provided as the value of the <code>source-node</code> option.</p>
                  </item>
                  <item>
                     <p>Zero or more of the following additional options:</p>
                     <slist>
                        <sitem>
                           <code>stylesheet-base-uri</code>
                        </sitem>
                        <sitem><code>stylesheet-params</code> (defaults to an empty map)</sitem>
                        <sitem><code>initial-mode</code> (defaults to the stylesheet’s default mode)</sitem>
                        <sitem><code>delivery-format</code> (defaults to <code>document</code>)</sitem>
                        <sitem><code>serialization-params</code> (defaults to an empty map)</sitem>
                        <sitem><code>enable-messages</code> (default is implementation-defined)</sitem>
                        <sitem><code>requested-properties</code> (default is an empty map)</sitem>
                        <sitem><code>vendor-options</code> (defaults to an empty map)</sitem>
                        <sitem><code>cache</code> (default is implementation-defined)</sitem>
                     </slist>
                  </item>
               </olist>
            </item>
            <item>
               <p>For invocation of an XSLT 2.0 processor (see <bibref ref="xslt20"
                     />), 
                  the supplied options must include all of the following <phrase
                     diff="chg" at="E">(if anything else is present, it is ignored)</phrase>:</p>
               <olist>
                  <item>
                     <p>The stylesheet, provided by supplying exactly one of the following:</p>
                     <slist>
                        <sitem>
                           <code>stylesheet-location</code>
                        </sitem>
                        <sitem>
                           <code>stylesheet-node</code>
                        </sitem>
                        <sitem>
                           <code>stylesheet-text</code>
                        </sitem>
                     </slist>
                  </item>
                  <item>
                     <p>Invocation details, as exactly one of the following:</p>
                     <olist>
                        <item>
                           <p>For apply-templates invocation, all of the following:</p>
                           <p>
                              <code>source-node</code>
                           </p>
                           <p>Optionally, <code>initial-mode</code> (defaults to the stylesheet’s default mode)</p>
                        </item>
                        <item>
                           <p>For call-template invocation, all of the following:</p>
                           <p>
                              <code>initial-template</code>
                           </p>
                           <p>Optionally, <code>source-node</code></p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>Zero or more of the following additional options:</p>
                     <slist>
                        <sitem>
                           <code>stylesheet-base-uri</code>
                        </sitem>
                        <sitem><code>stylesheet-params</code> (defaults to an empty map)</sitem>
                        <sitem><code>base-output-uri</code> (defaults to absent)</sitem>
                        <sitem><code>delivery-format</code> (defaults to <code>document</code>)</sitem>
                        <sitem><code>serialization-params</code> (defaults to an empty map)</sitem>
                        <sitem><code>enable-messages</code> (default is implementation-defined)</sitem>
                        <sitem><code>enable-trace</code> (default is implementation-defined)</sitem>
                        <sitem><code>requested-properties</code> (default is an empty map)</sitem>
                        <sitem><code>vendor-options</code> (defaults to an empty map)</sitem>
                        <sitem><code>cache</code> (default is implementation-defined)</sitem>
                     </slist>
                  </item>
               </olist>
            </item>
            <item>
               <p>For invocation of an XSLT 3.0 processor (see <bibref ref="xslt-40"
                     />), 
                  the supplied options must include all of the following <phrase
                     diff="chg" at="E">(if anything else is present, it is ignored)</phrase>:</p>
               <olist>
                  <item>
                     <p>The stylesheet, provided either by supplying exactly one of the following:</p>
                     <slist>
                        <sitem>
                           <code>stylesheet-location</code>
                        </sitem>
                        <sitem>
                           <code>stylesheet-node</code>
                        </sitem>
                        <sitem>
                           <code>stylesheet-text</code>
                        </sitem>
                     </slist>

                     <p>Or by supplying exactly one of the following:</p>
                     <slist>
                        <sitem>
                           <code>package-location</code>
                        </sitem>
                        <sitem>
                           <code>package-node</code>
                        </sitem>
                        <sitem>
                           <code>package-text</code>
                        </sitem>
                        <sitem><code>package-name</code> plus optionally <code>package-version</code></sitem>
                     </slist>
                  </item>
                  <item>
                     <p>Invocation details, as exactly one of the following combinations:</p>
                     <olist>
                        <item>
                           <p>For apply-templates invocation, all of the following:</p>
                           <p>Exactly one of <code>source-node</code> or <code>initial-match-selection</code></p>
                           <p>Optionally, <code>initial-mode</code></p>
                           <p>Optionally, <code>template-params</code></p>
                           <p>Optionally, <code>tunnel-params</code></p>
                        </item>
                        <item>
                           <p>For call-template invocation using an explicit template name, all of the following:</p>
                           <p>
                              <code>initial-template</code>
                           </p>
                           <p>Optionally, <code>template-params</code></p>
                           <p>Optionally, <code>tunnel-params</code></p>
                           <p>Optionally, <code>source-node</code></p>
                        </item>
                        <item>
                           <p>For call-template invocation using the defaulted template name <code>xsl:initial-template</code>, all of the following:</p>
                           <p>Optionally, <code>template-params</code></p>
                           <p>Optionally, <code>tunnel-params</code></p>
                           <note>
                              <p>If the <code>source-node</code> option is present and <code>initial-template</code> is absent,
                              then apply-templates invocation will be used. To use call-template invocation on the template
                              named <code>xsl:initial-template</code> while also supplying a context item for use when evaluating
                              global variables, either (a) supply the context item using the <code>global-context-item</code> option,
                              or (b) supply <code>source-node</code>, and set the <code>initial-template</code> option explicitly to the 
                              QName <code>xsl:initial-template</code></p>
                           </note>
                        </item>
                        <item>
                           <p>For call-function invocation, all of the following:</p>
                           <p>
                              <code>initial-function</code>
                           </p>
                           <p>
                              <code>function-params</code>
                           </p>
                        </item>
                     </olist>
                     <note>
                        <p>The invocation method can be determined as the first of the following which applies:</p>
                        <ulist>
                           <item>
                              <p>If <code>initial-function</code> is present, then call-function invocation.</p>
                           </item>
                           <item>
                              <p>If <code>initial-template</code> is present, then call-template invocation.</p>
                           </item>
                           <item>
                              <p>If <code>source-node</code> or <code>initial-match-selection</code>
                              is present, then apply-templates invocation.</p>
                           </item>
                           <item>
                              <p>Otherwise, <code>call-template</code> invocation using
                              the default entry point <code>xsl:initial-template</code>.</p>
                           </item>
                        </ulist>
                     </note>
                  </item>
                  <item>
                     <p>Zero or more of the following additional options:</p>
                     <slist>
                        <sitem>
                           <code>stylesheet-base-uri</code>
                        </sitem>
                        <sitem><code>static-params</code> (defaults to an empty map)</sitem>
                        <sitem><code>stylesheet-params</code> (defaults to an empty map)</sitem>
                        <sitem><code>global-context-item</code> (defaults to absent)</sitem>
                        <sitem><code>base-output-uri</code> (defaults to absent)</sitem>
                        <sitem>
                           <code>delivery-format</code>
                        </sitem>
                        <sitem><code>serialization-params</code> (defaults to an empty map)</sitem>
                        <sitem><code>enable-assertions</code> (default is <code>false</code>)</sitem>
                        <sitem><code>enable-messages</code> (default is implementation-defined)</sitem>
                        <sitem><code>enable-trace</code> (default is implementation-defined)</sitem>
                        <sitem><code>requested-properties</code> (default is an empty map)</sitem>
                        <sitem><code>vendor-options</code> (defaults to an empty map)</sitem>
                        <sitem><code>cache</code> (default is implementation-defined)</sitem>
                     </slist>
                  </item>
               </olist>
            </item>
         </olist>

         <p>The meanings of each option are defined in the table below.</p>

         <fos:options>

            <fos:option key="base-output-uri">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>The URI of the principal result document; also used as the base URI for
            resolving relative URIs of secondary result documents. If the value is a relative 
            reference, it is resolved against the static base URI of the <code>fn:transform</code> 
            function call. </fos:meaning>

               <fos:type>xs:string</fos:type>
               <fos:default>The effect of not
            supplying a base output URI is defined by the XSLT specification; the implementation
            <rfc2119>may</rfc2119> supply a default, for example the directory containing the
            stylesheet, or the current working directory. </fos:default>
            </fos:option>
            <fos:option key="cache">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>This option has no effect on the result of the transformation but may affect
            efficiency. The value <code>true</code> indicates an expectation that the same
            stylesheet is likely to be used for more than one transformation; the value
                <code>false</code> indicates an expectation that the stylesheet will be used once
            only.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>true()</fos:default>
            </fos:option>
            <fos:option key="delivery-format">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>The manner in which the transformation results should be delivered. Applies both to the
            principal result document and to secondary result documents created using
                <code>xsl:result-document</code>.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default><code>document</code>, unless the relevant
            <code>xsl:output</code> or <code>xsl:result-document</code> element specifies
            <code>build-tree="no"</code> (applies to XSLT 3.0 only), in which case the default
            is <code>raw</code>.</fos:default>
               <fos:values>
                  <fos:value value="document"
                     >The result is delivered as a
                        document node.</fos:value>
                  <fos:value value="serialized"
                        >The result is delivered as
                        a string, representing the results of serialization. Note that (as with the
                            <code>fn:serialize</code> function) the final encoding stage of
                        serialization (which turns a sequence of characters into a sequence of
                        octets) is either skipped, or reversed by decoding the octet stream back
                        into a character stream.</fos:value>
                  <fos:value value="raw"
                     >The result of the initial
                template or function is returned as an arbitrary XDM value (after conversion
                to the declared type, but without wrapping in a document node, and without
                serialization): when this option is chosen, the returned map contains the
                raw result.</fos:value>
               </fos:values>

            </fos:option>
            <fos:option key="enable-assertions">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>Indicates whether any <code>xsl:assert</code> instructions in the stylesheet
            are to be evaluated.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false()</fos:default>
            </fos:option>
            <fos:option key="enable-messages">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>Indicates whether any <code>xsl:message</code> instructions in the stylesheet
            are to be evaluated. The destination and formatting of any such messages is
            implementation-defined.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>Implementation-defined</fos:default>
            </fos:option>
            <fos:option key="enable-trace">
               <fos:applies-to>2.0, 3.0</fos:applies-to>
               <fos:meaning>Indicates whether any <code>fn:trace</code> functions in the stylesheet are to
            generate diagnostic messages. The destination and formatting of any such messages is
            implementation-defined.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>Implementation-defined</fos:default>
            </fos:option>
            <fos:option key="function-params">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>An array of values to be used as the arguments to the initial function call.
            The value is converted to the required type of the declared parameter using the function
            conversion rules.</fos:meaning>
               <fos:type>array(item()*)</fos:type>
               <fos:default>Empty array</fos:default>
            </fos:option>
            <fos:option key="global-context-item">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>The value of the global context item, as defined in XSLT 3.0</fos:meaning>
               <fos:type>item()</fos:type>
               <fos:default>The value of <code>source-node</code></fos:default>
            </fos:option>
            <fos:option key="initial-function">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>The name of the initial function to be called for call-function invocation. The
            arity of the function is inferred from the length of
            <code>function-params</code>.</fos:meaning>
               <fos:type>xs:QName</fos:type>
               <fos:default>n/a</fos:default>
            </fos:option>
            <fos:option key="initial-match-selection">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>The value of the initial match selection, as defined in XSLT 3.0</fos:meaning>
               <fos:type>item()*</fos:type>
               <fos:default>The value of <code>source-node</code></fos:default>
            </fos:option>
            <fos:option key="initial-mode">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>The name of the initial processing mode.</fos:meaning>
               <fos:type>xs:QName</fos:type>
               <fos:default/>
            </fos:option>
            <fos:option key="initial-template">
               <fos:applies-to>2.0, 3.0</fos:applies-to>
               <fos:meaning>The name of a named template in the stylesheet to act as the initial entry
            point.</fos:meaning>
               <fos:type>xs:QName</fos:type>
               <fos:default>xsl:initial-template</fos:default>
            </fos:option>
            <fos:option key="package-name">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>The name of the top-level stylesheet package to be invoked (an absolute
            URI)</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>n/a</fos:default>
            </fos:option>
            <fos:option key="package-location">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>The location of the top-level stylesheet package, as a relative or absolute
            URI</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>n/a</fos:default>
            </fos:option>
            <fos:option key="package-node">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>A document or element node containing the top-level stylesheet
            package</fos:meaning>
               <fos:type>node()</fos:type>
               <fos:default>n/a</fos:default>
            </fos:option>
            <fos:option key="package-text">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>The top-level stylesheet package in the form of unparsed lexical
            XML.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>n/a</fos:default>
            </fos:option>

            <fos:option key="package-version">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>The version of the top-level stylesheet package to be invoked.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>"*" (any version)</fos:default>
            </fos:option>
            <fos:option key="post-process">
               <fos:applies-to>1.0 2.0 3.0</fos:applies-to>
               <fos:meaning>A function that is used to post-process each result document of
                  the transformation (both the principal result and secondary results), in whatever
                  form it would otherwise be delivered (document, serialized, or raw). The first 
                  argument of the function is the key used to identify the result in the map return
                  by the <code>fn:transform</code> function (for example, this will be the supplied 
                  base output URI in the case of the principal result, or the string “output” if no
                  base output URI was supplied). The second argument is the 
                  actual value. The value that is returned in the result of the <code>fn:transform</code> 
                  function is the result of applying this post-processing.
                  
                  <note>
                     <p>If the implementation provides a way of writing or invoking functions 
                        with side-effects, this post-processing function might be used to save 
                        a copy of the result document to persistent storage. For example, if the 
                        implementation provides access to the EXPath File library <bibref
                           ref="expath"
                           />, 
                        then a serialized document might be written to filestore by calling the 
                        <code>file:write</code> function. Similar mechanisms might be used to issue 
                        an HTTP POST request that posts the result to an HTTP server, or to send 
                        the document to an email recipient. The semantics of calling functions 
                        with side-effects are entirely <termref
                           def="implementation-defined">implementation-defined</termref>.</p>
                           <p>If the primary purpose of the post-processing function is achieved by 
                        means of such side-effects, and if the actual results are not needed by 
                        the caller of the <code>fn:transform</code> function, then it does not matter what 
                        the post-processing function actually returns (it could be an empty 
                        sequence, for example).</p>
                           <p>Calls to <code>fn:transform</code> can potentially have side-effects 
                        even in the absence of the post-processing option, because the XSLT 
                        specification allows a stylesheet to invoke extension functions 
                        that have side-effects. The semantics in this case are <termref
                           def="implementation-defined">implementation-defined</termref>.</p>
                  </note></fos:meaning>
               <fos:type>function(xs:string, item()*) as item()*</fos:type>
               <fos:default>function($a, $b) { $b }</fos:default>
            </fos:option>
            <fos:option key="requested-properties">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>The keys in the map are QNames that could legitimately be supplied in a call to
            the XSLT <code>system-property</code> function; the values in the map are the requested
            settings of the corresponding property. The boolean values <code>true()</code> and
                <code>false()</code> are equivalent to the string values <code>yes</code> and
                <code>no</code>. As a special case, setting a value for <code>xsl:version</code> has
            no effect, because of the potential for conflict with other options. For example: <ulist>
                     <item><p>Setting <code>xsl:product-name</code> to a particular value requests a
                        particular XSLT software product.</p></item>
                     <item><p>Setting <code>xsl:product-version</code> requests a specific version of
                        that product.</p></item>
                     <item><p>Setting <code>xsl:is-schema-aware</code> to <code>true()</code> requests a
                        schema-aware processor.</p></item>
                     <item><p>Setting <code>xsl:xsd-version</code> to <code>"1.1"</code> requests a
                        processor that supports XML Schema version 1.1.</p></item>
                  </ulist> Setting a boolean property such as <code>xsl:supports-dynamic-evaluation</code>
            to <code>false()</code> is interpreted as an explicit request for a processor in which
            the value of the property is <code>false</code>. The effect if the requests cannot be precisely met
            is implementation-defined. In some cases it may be appropriate to ignore the request or
            to provide an alternative (for example, a later version of the product than the one
            requested); in other cases it may be more appropriate to raise an error <errorref
                     class="XT" code="0001" type="dynamic"
                  /> indicating that no suitable XSLT processor
            is available. </fos:meaning>
               <fos:type>map(xs:QName, xs:anyAtomicType)</fos:type>
               <fos:default>Empty map</fos:default>
            </fos:option>
            <fos:option key="serialization-params">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>Serialization parameters for the principal result document. The supplied map
            follows the same rules that apply to a map supplied as the second argument of
                <code>fn:serialize</code>. <ulist>
                     <item><p>When a parameter is supplied, the corresponding value overrides or augments
                        the value specified in the unnamed <code>xsl:output</code> declaration (or
                        its default), following the same rules as when one <code>xsl:output</code>
                        declaration overrides another with lower import precedence.</p></item>
                     <item><p>When a parameter is supplied and the corresponding value is an empty
                        sequence (for example, <code>map{"standalone":()}</code>), any value
                        specified in the unnamed <code>xsl:output</code> declaration is overridden
                        by the default value. </p></item>
                     <item><p>When a parameter is not supplied in <code>serialization-params</code> (that
                        is, when the key is absent) the value that applies is the value appearing in
                        the unnamed <code>xsl:output</code> declaration, or its default. </p></item>
                  </ulist></fos:meaning>
               <fos:type>map(xs:anyAtomicType, item()*)</fos:type>
               <fos:default>Empty map</fos:default>
            </fos:option>
            <fos:option key="source-node">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>When <code>source-node</code> is supplied then the
                <code>global-context-item</code> (the context item for evaluating global variables)
            is the root of the tree containing the supplied node. In addition, for apply-templates
            invocation, the <code>source-node</code> acts as the
                <code>initial-match-selection</code>, that is, stylesheet execution starts by
            applying templates to this node.</fos:meaning>
               <fos:type>node()</fos:type>
               <fos:default>n/a</fos:default>
            </fos:option>

            <fos:option key="static-params">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>The values of static parameters defined in the stylesheet; the keys are the
            names of the parameters, and the associated values are their values. The value is
            converted to the required type of the declared parameter using the function conversion
            rules.</fos:meaning>
               <fos:type>map(xs:QName, item()*)</fos:type>
               <fos:default>Empty map</fos:default>
            </fos:option>
            <fos:option key="stylesheet-base-uri">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>A string intended to be used as the static base URI of the principal stylesheet
            module. This value <rfc2119>must</rfc2119> be used if no other static base URI is
            available. If the supplied stylesheet already has a base URI (which will generally be
            the case if the stylesheet is supplied using <code>stylesheet-node</code> or
                <code>stylesheet-location</code>) then it is <termref
                     def="implementation-defined"
                     >implementation-defined</termref> whether this
            parameter has any effect. If the value is a relative reference, it is resolved against
            the static base URI of the <code>fn:transform</code> function call.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>n/a</fos:default>
            </fos:option>
            <fos:option key="stylesheet-location">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>URI that can be used to locate the principal stylesheet module. If relative, it
            is resolved against the static base URI of the <code>fn:transform</code> function call.
            The value also acts as the default for stylesheet-base-uri.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>n/a</fos:default>
            </fos:option>
            <fos:option key="stylesheet-node">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>Root of the tree containing the principal stylesheet module, as a document or
            element node. The base URI of the node acts as the default for
            stylesheet-base-uri.</fos:meaning>
               <fos:type>node()</fos:type>
               <fos:default>n/a</fos:default>
            </fos:option>
            <fos:option key="stylesheet-params">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>A map holding values to be supplied for stylesheet parameters. The keys are the
            parameter names; the values are the corresponding parameter values. The values are
            converted if necessary to the required type using the function conversion rules. The
            default is an empty map.</fos:meaning>
               <fos:type>map(xs:QName, item()*)</fos:type>
               <fos:default>Empty map</fos:default>
            </fos:option>

            <fos:option key="stylesheet-text">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>The principal stylesheet module in the form of unparsed lexical
            XML.</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>n/a</fos:default>
            </fos:option>
            <fos:option key="template-params">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>The values of non-tunnel parameters to be supplied to the initial template,
            used with both apply-templates and call-template invocation. Each value is converted to
            the required type of the declared parameter using the function conversion
            rules.</fos:meaning>
               <fos:type>map(xs:QName, item()*)</fos:type>
               <fos:default/>
            </fos:option>
            <fos:option key="tunnel-params">
               <fos:applies-to>3.0</fos:applies-to>
               <fos:meaning>The values of tunnel parameters to be supplied to the initial template, used
            with both apply-templates and call-template invocation. Each value is converted to the
            required type of the declared parameter using the function conversion
            rules.</fos:meaning>
               <fos:type>map(xs:QName, item()*)</fos:type>
               <fos:default>Empty map</fos:default>
            </fos:option>

            <fos:option key="vendor-options">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>Values for vendor-defined configuration options for the XSLT processor used to
            process the request. The key is the name of an option, expressed as a QName: the
            namespace URI of the QName <rfc2119>should</rfc2119> be a URI controlled by the vendor
            of the XSLT processor. The meaning of the associated value is <termref
                     def="implementation-defined"
                     >implementation-defined</termref>. Implementations
                <rfc2119>should</rfc2119> ignore options whose names are in an unrecognized
            namespace. Default is an empty map.</fos:meaning>
               <fos:type>map{xs:QName, item()*}</fos:type>
               <fos:default>Empty map</fos:default>
            </fos:option>

            <fos:option key="xslt-version">
               <fos:applies-to>1.0, 2.0, 3.0</fos:applies-to>
               <fos:meaning>The minimum level of the XSLT language that the processor must support.</fos:meaning>
               <fos:type>xs:decimal</fos:type>
               <fos:default>The <code>[xsl:]version</code> attribute at the outermost level of the
            stylesheet.</fos:default>
            </fos:option>

         </fos:options>




         <p>The result of the transformation is returned as a map. There is one entry in the map for the principal result document, and one
            for each secondary result document. The key is a URI in the form of an <code>xs:string</code> value. The key for the principal
            result document is the base output URI if specified, or the string <code>"output"</code> otherwise. The key for secondary
            result documents is the URI of the document, as an absolute URI. The associated value in each entry depends on the requested
            delivery format. If the delivery format is <code>document</code>, the value is a document node. If the delivery format is
            <code>serialized</code>, the value is a string containing the serialized result. </p>

         <p>Where nodes are passed to or from the transformation, for example as the value of a stylesheet parameter or the result of a function, 
            they <rfc2119>should</rfc2119> if possible retain their node identity, their base URI, their type annotations, and their relationships to all other nodes 
            in the containing tree (including ancestors and siblings). If this is not possible, for example because the only way of passing nodes 
            to the chosen XSLT implementation is by serializing and re-parsing, then a node <rfc2119>may</rfc2119> be passed in the form of a deep 
            copy, which may lose information about the identity of the node, about its ancestors and siblings, about its base URI, about its type annotation, and about its 
            relationships to other nodes passed across the interface.</p>

         <p>It is <termref def="implementation-defined"
               >implementation-defined</termref> whether the XSLT transformation is executed
            within the same <termref
               def="execution-scope">execution scope</termref> as the calling code.</p>

         <p>The function is <termref def="dt-nondeterministic"
               >nondeterministic</termref> in that it is 
            <termref
               def="implementation-dependent"
               >implementation-dependent</termref> whether running the function twice against the same
         inputs produces identical results. The results of two invocations may differ in the identity of any returned nodes; they may also
         differ in other respects, for example because the value of <code>fn:current-dateTime</code> is different for the two invocations,
         or because the contents of external documents accessed using <code>fn:doc</code> or <code>xsl:source-document</code> change between
         one invocation and the next.</p>




      </fos:rules>
      <fos:errors>
         <p>A dynamic error is raised <errorref class="XT" code="0001" type="dynamic"
            /> if the transformation cannot be invoked 
            because no suitable XSLT processor is available. This includes (but is not limited to) the following cases:</p>
         <olist>
            <item>
               <p>No XSLT processor is available;</p>
            </item>
            <item>
               <p>No XSLT processor supporting the requested version of XSLT is available;</p>
            </item>
            <item>
               <p>The XSLT processor API does not support some requested feature (for example, the ability to supply tunnel parameters externally);</p>
            </item>
         </olist>
         <p>A dynamic error is raised <errorref class="XT" code="0002" type="dynamic"
            /> if an error is detected in the supplied
            parameters (for example if two mutually exclusive parameters are supplied).</p>
         <p>If a static or dynamic error is reported by the XSLT processor, this function fails with a dynamic error, retaining the XSLT error code.</p>
         <p>A dynamic error is raised <errorref class="XT" code="0003" type="dynamic"
               /> if the XSLT transformation invoked by a call on
            <code>fn:transform</code> fails with a static or dynamic error, and no more specific error code is available. </p>
         <note>
            <p>XSLT 1.0 does not define any error codes, so this is the likely outcome with an XSLT 1.0 processor. XSLT 2.0 and 3.0 do
         define error codes, but some APIs do not expose them. If multiple errors are signaled by the transformation (which is most likely
         to happen with static errors) then the error code should where possible be that of one of these errors, chosen arbitrarily; the processor
         may make details of additional errors available to the application in an <termref
                  def="implementation-defined">implementation-defined</termref>
         way.</p>
         </note>
         <p>A dynamic error is raised <errorref class="XT" code="0004" type="dynamic"
            /> if the use of this function (or of selected options)
            has been externally disabled, for example for security reasons.</p>
         <p>A dynamic error is raised <errorref class="XT" code="0006" type="dynamic"
            /> if the transformation produces output containing
            characters available only in XML 1.1, and the calling processor cannot handle such characters.</p>
         <p>Recursive use of the <code>fn:transform</code> function may lead to catastrophic failures such as
         non-termination or stack overflow. No error code is assigned to such conditions, since they cannot necessarily
         be detected by the processor.</p>

      </fos:errors>
      <fos:notes>

         <p>As with all other functions in this specification, conformance requirements depend on the host language.
            For example, a host language might specify that provision of this function is optional, or that it is excluded entirely,
            or that implementations are required to support a particular set of values for the <code>xslt-version</code>
            parameter.</p>

         <p>Even where support for this function is mandatory, it is <rfc2119>recommended</rfc2119> for security reasons that implementations
            should provide a user option to disable its use, or to disable aspects of its functionality such as
            the ability to write to persistent resources.</p>


      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>The following example loads a stylesheet from the location <code>render.xsl</code>,
               applies it to a document loaded from <code>test.xml</code>, and uses an XPath expression
               to examine the result:</p>
            <eg><![CDATA[
let $result := transform(
  map {
    "stylesheet-location" : "render.xsl",
    "source-node"    : doc('test.xml')
  })
return $result?output//body  
               ]]></eg>
         </fos:example>
      </fos:examples>

   </fos:function>


   <fos:function name="random-number-generator" prefix="fn">
      <fos:signatures>
         <fos:proto name="random-number-generator" return-type-ref="random-number-generator-record">
            <fos:arg name="seed" type="xs:anyAtomicType?" default="()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
         
      </fos:properties>
      <fos:summary>
         <p>Returns a random number generator, which can be used to generate sequences of random numbers.</p>
      </fos:summary>
      <fos:rules>
         <p diff="chg" at="2022-12-19"
               >The function returns a random number generator. A random number generator is represented as a value of type 
            <code>random-number-generator-record</code>, defined as follows:</p>
         
         <?type random-number-generator-record?>

         <note diff="add" at="2022-12-19"><p>This type is self-referential in a way that the 
            current syntax for record type declarations does not allow. The
         use of the type <code>#random-number-generator-record</code> as the return type of the <code>next</code>
         function is purely for expository purposes; an approximation allowed by the grammar would be
            <code>next as (function() as record(number, next, permute, *))</code>.</p></note>
         
         <p>That is, the result of the function is a map containing three entries. 
            The keys of each entry are strings:</p>
         <olist>
            <item>
               <p>The entry with key <code>"number"</code> holds a random number; it is an <code>xs:double</code> greater than or equal
               to zero (0.0e0), and less than one (1.0e0).</p>
            </item>
            <item>
               <p>The entry with key <code>"next"</code> is a zero-arity function that can be called to return another random number
            generator.</p>
               <p>The properties of this function are as follows:</p>
               <ulist>
                  <item>
                     <p>name: absent</p>
                  </item>
                  <item>
                     <p>parameter names: ()</p>
                  </item>
                  <item>
                     <p>signature: <code>() => map(xs:string, item())</code></p>
                  </item>
                  <item>
                     <p>non-local variable bindings: none</p>
                  </item>
                  <item>
                     <p>implementation: implementation-dependent</p>
                  </item>
               </ulist>
            </item>
            <item>
               <p>The entry with key <code>"permute"</code> is a function with arity 1 (one), which takes an arbitrary sequence
            as its argument, and returns a random permutation of that sequence.</p>
               <p>The properties of this function are as follows:</p>
               <ulist>
                  <item>
                     <p>name: absent</p>
                  </item>
                  <item>
                     <p>parameter names: <code>"arg"</code></p>
                  </item>
                  <item>
                     <p>signature: <code>(item()*) => item()*</code></p>
                  </item>
                  <item>
                     <p>non-local variable bindings: none</p>
                  </item>
                  <item>
                     <p>implementation: implementation-dependent</p>
                  </item>
               </ulist>
            </item>
         </olist>
         <p>Calling the <code>fn:random-number-generator</code> function with no arguments is equivalent to calling the single-argument
         form of the function with an implementation-dependent seed.</p>
         <p>Calling the <code>fn:random-number-generator</code> function with an empty sequence as <code>$seed</code> 
            is equivalent to calling the single-argument form of the function with an implementation-dependent seed.</p>
         <p>If a <code>$seed</code> is supplied, it may be an atomic value of any type.</p>
         <p>Both forms of the function are <termref def="dt-deterministic"
               />: calling the function twice with the same arguments, within a single
         <termref
               def="execution-scope">execution scope</termref>, produces the same results.</p>


         <p>The value of the <code>number</code> entry <rfc2119>should</rfc2119> be such that <phrase diff="del" at="B">all eligible <code>xs:double</code>
            values are equally likely to be chosen</phrase> <phrase diff="add" at="B">the distribution of numbers is uniform: for example, the probability of the
         number being in the range 0.1e0 to 0.2e0 is the same as the probability of its being in the range 0.8e0 to 0.9e0</phrase>.</p>

         <p>The function returned in the <code>permute</code> entry <rfc2119>should</rfc2119> be such that all permutations 
            of the supplied sequence are equally likely to be chosen.</p>

         <p>The map returned by the <code>fn:random-number-generator</code> function <rfc2119>may</rfc2119> contain additional entries beyond
            those specified here, but it <rfc2119>must</rfc2119> match the type 
            <phrase
               diff="chg" at="A"
               ><code>item-type(rng)</code> defined above</phrase>. The meaning of any additional entries
         is <termref
               def="implementation-defined"
               >implementation-defined</termref>. To avoid conflict with any future version of this specification, the keys of any
         such entries <rfc2119>should</rfc2119> start with an underscore character.</p>
      </fos:rules>
      <fos:notes>
         <p>It is not meaningful to ask whether the functions returned in the <code>next</code> and <code>permute</code>
            functions resulting from two separate calls with the same seed are “the same function”, but the functions must be equivalent in the sense
            that calling them produces the same sequence of random numbers.</p>
         <p>The repeatability of the results of function calls in different execution scopes is outside the scope of this
            specification. It is <rfc2119>recommended</rfc2119> that when the same seed is provided explicitly, the same random number sequence
            should be delivered even in different execution scopes; while if no seed is provided, the processor should choose a seed
            that is likely to be different from one execution scope to another. (The same effect can be achieved explicitly by using
         <code>fn:current-dateTime()</code> as a seed.)</p>
         <p>The specification does not place strong conformance requirements on the actual randomness of the result; this is left to 
            the implementation. It is desirable, for example, when generating a sequence
         of random numbers that the sequence should not get into a repeating loop; but the specification does not attempt to dictate this.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <p>The following example returns a random permutation of the integers in the range
               <code>1</code> to <code>100</code>: 
               <code>fn:random-number-generator()?permute(1 to 100)</code>
            </p>
            <p>The following example returns a 10% sample of the items in an input sequence <code>$seq</code>, chosen at random: 
                  <code>fn:random-number-generator()?permute($seq)[position() = 1 to (count($seq) idiv 10)]</code>
            </p>
            <p>The following code defines a function that can be called to produce a random sequence of <code>xs:double</code>
            values in the range zero to one, of specified length:</p>
            <eg>
declare %public function r:random-sequence($length as xs:integer) as xs:double* {
  r:random-sequence($length, random-number-generator())
};

declare %private function r:random-sequence($length as xs:integer, 
                                            $G as record(number as xs:double, next as function(*), *)) {
  if ($length eq 0)
  then ()
  else ($G?number, r:random-sequence($length - 1, $G?next()))
};

r:random-sequence(200);
            </eg>



         </fos:example>
      </fos:examples>
   </fos:function>

   <fos:function name="every" prefix="fn">
      <fos:signatures>
         <fos:proto name="every" return-type="xs:boolean">
            <fos:arg name="input" type="item()*"/>
            <fos:arg name="predicate" type="function(item()) as xs:boolean" 
               default="fn:identity#1" example="fn:boolean#1"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if every item in the input sequence matches a supplied predicate.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the function is equivalent to the following implementation in XQuery:</p>
         <eg><![CDATA[
declare function fn:every(
        $input as item()*,
        $predicate as function(item()) as xs:boolean) 
        as xs:boolean {
  every $i in $input satisfies $predicate($i)
};]]></eg>
         <p>or its equivalent in XSLT:</p>
         <eg><![CDATA[
<xsl:function name="fn:every" as="xs:boolean">
  <xsl:param name="input" as="item()*"/>
  <xsl:param name="predicate" as="function(item()) as xs:boolean"/>
  <xsl:sequence select="every $i in $input satisfies $predicate($i)"/>
</xsl:function>]]>
         </eg>
      </fos:rules>
      <fos:notes>
         <p>If the second argument is omitted, the first argument must be a sequence of
         <code>xs:boolean</code> values.</p>
         <p>The implementation <rfc2119>may</rfc2119> deliver a result as soon as one item is found for which the predicate
            returns <code>false</code>; it is not required to evaluate the predicate for every item.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>every(())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>every((1=1, 2=2, 3=4))</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>every((), boolean#1)</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>every((1, 3, 7), function { . mod 2 = 1 })</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>every(-5 to +5, function { . ge 0 })</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>every(
  ("January", "February", "March", "April",
   "September", "October", "November", "December"),
  contains(?, "r")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>every(
  ("January", "February", "March", "April",
   "September", "October", "November", "December")
  =!> contains("r")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-09-13.</fos:version>
      </fos:history>
   </fos:function>
   
   <fos:function name="char" prefix="fn">
      <fos:signatures>
         <fos:proto name="char" return-type="xs:string">
            <fos:arg name="value" type="xs:string"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns a string containing a named character or glyph.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns a string, generally containing a single <termref
               def="character">character</termref> or glyph, identified by <code>$value</code>.</p>
         <p>For example, <code>fn:char("nbsp")</code> returns a string containing the
         non-breaking space character, <code>xA0</code>.</p>
         <p>The supplied value of <code>$value</code> must be one of the following:</p>
         <olist>
            <item><p>An HTML5 character reference name (often referred to as an entity name) as defined
               at [https://html.spec.whatwg.org/multipage/named-characters.html]. The name is
               written with no leading ampersand and no trailing semicolon.
               For example <code>fn:char("pi")</code> represents the character
               <code>π</code> (<code>x3C0</code>).</p>
               <p>A processor <rfc2119>may</rfc2119> recognize additional character reference names defined in
                  other versions of HTML. Character reference names are case-sensitive.</p>
               <p>In the event that the HTML5 character reference name identifies a string
               comprising multiple codepoints, that string is returned.</p>
               <p>[TODO: add a proper bibliographic reference.]</p></item>
            <item><p>A backslash-escape sequence from the set <code>\n</code> (newline, x0A), 
               <code>\r</code> (carriage return, <code>0xD</code>),
               or <code>\t</code> (tab, <code>0x09</code>).</p></item>
            <item><p>A decimal codepoint value in the form <code>#[0-9]+</code>, for example
            <code>fn:char("#10")</code> represents a newline character. Leading zeroes are optional.</p></item>
            <item><p>A hexadecimal codepoint value in the form <code>#x[0-9a-fA-F]+</code>, for example
               <code>fn:char("#x0A")</code> represents a newline character. Leading zeroes are optional, and the
            letters A-F may be in either upper or lower case.</p></item>
            
         </olist>
         <p diff="chg" at="2023-06-12">The result must consist of
         <termref def="dt-permitted-character">permitted characters</termref>.
         For example <code>fn:char("#xDEAD")</code> is invalid because it is in the surrogate range.</p>
      </fos:rules>
      <fos:errors>
         <p>The function fails with a dynamic error <errorref
               class="CH" code="0005"/> if <code>$value</code> is not a valid
            representation of a valid character or sequence of characters.
         </p>
      </fos:errors>
      <fos:notes>
         <p>Although all Unicode characters can appear in string literals (the delimiting quotation marks can be
         escaped by doubling them), some characters are not visually distinctive, so representing them by name
         may make code more readable. In addition, there may be contexts where it is necessary or prudent to
         write XPath expressions using ASCII characters only, for example where an expression is used in the query
         part of a URI.</p>
         <p>A few HTML5 character reference names identify glyphs whose Unicode
         representation uses multiple codepoints. For example, the name
            <code>NotEqualTilde</code> refers to the glyph <code>≂̸</code> which is expressed
            using the two codepoints <code>#x2242 #x0338</code>. In such cases the string length of
         the result of the function will exceed one.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>char("#32")</fos:expression>
               <fos:result>" "</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>char("#x20")</fos:expression>
               <fos:result>" "</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>char("\t")</fos:expression>
               <fos:result>codepoints-to-string(9)</fos:result>
               <fos:postamble>The character <emph>tab</emph></fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression>char("#x1D1CA")</fos:expression>
               <fos:result>"&#x1D1CA;"</fos:result>
               <fos:postamble>The character <emph>Tempus Imperfectum Cum Prolatione Perfecta</emph></fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression>char("aacute")</fos:expression>
               <fos:result>"&#xE1;"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>char("eth")</fos:expression>
               <fos:result>"&#xF0;"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>char("NotEqualTilde")</fos:expression>
               <fos:result>codepoints-to-string((8770, 824))</fos:result>
               <fos:postamble>This HTML5 character reference name expands to multiple codepoints.</fos:postamble>
            </fos:test>
 
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Accepted for 4.0 on 2023-01-10; with actions on the editor for revision. See issue #121.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="characters" prefix="fn">
      <fos:signatures>
         <fos:proto name="characters" return-type="xs:string*">
            <fos:arg name="value" type="xs:string?"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Splits the supplied string into a sequence of single-character strings.</p>
      </fos:summary>
      <fos:rules>
         <p>The function returns a sequence of strings, each string having length 1, containing
            the corresponding <termref
               def="character">character</termref> in <code>$value</code>.</p>
         <p>If <code>$value</code> is a zero-length string or the empty sequence, the function returns
            the empty sequence.</p>
         <p>More formally, the function returns the result of the expression <code>fn:string-to-codepoints($value) ! fn:codepoints-to-string(.)</code></p>
      </fos:rules>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>characters("Thérèse")</fos:expression>
               <fos:result>("T", "h", "é", "r", "è", "s", "e")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>characters("")</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>characters(())</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>characters("Banana") => index-of("a")</fos:expression>
               <fos:result>(2, 4, 6)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>characters("stretch") => string-join("-")</fos:expression>
               <fos:result>"s-t-r-e-t-c-h"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>"Banana"
=> characters()
=> reverse()
=> string-join()</eg></fos:expression>
               <fos:result>"ananaB"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-09-20, subject to improving the description.</fos:version>
      </fos:history>
   </fos:function>



   <fos:function name="highest" prefix="fn">
      <fos:signatures>
         <fos:proto name="highest" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="navigation"/>
            <fos:arg name="collation" type="xs:string?" usage="absorption" default="fn:default-collation()"/>
            <fos:arg name="key" type="function(item()) as xs:anyAtomicType*" usage="inspection" default="fn:data#1"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>


      <fos:summary>
         <p>Returns those items from a supplied sequence that have the highest value of a sort key, where
            the sort key can be computed using a caller-supplied function.</p>
      </fos:summary>
      <fos:rules>
         <p>The second argument, <code>$collation</code>, defaults to <code>()</code>.</p>
         <p>Supplying an empty
            sequence as <code>$collation</code> is equivalent to supplying 
            <code>fn:default-collation()</code>. For more
            information on collations see <specref
               ref="choosing-a-collation"/>.</p>
         
         <p>The third argument defaults to the function <code>data#1</code>.</p>
         
         <p>Let <code>$modified-key</code> be the function:</p>
         <eg>
function($item) {
   $key($item) => data() ! (
      if (. instance of xs:untypedAtomic)
      then xs:double(.)
      else .)
}</eg>
         
         <p>That is, the supplied function for computing key values is wrapped in a function that
         converts any <code>xs:untypedAtomic</code> values in its result to <code>xs:double</code>. This makes
         the function consistent with the behavior of <code>fn:min</code> and <code>fn:max</code>,
         but inconsistent with <code>fn:sort</code>, which treats untyped values as strings.</p>
         
         <p>The result of the function is obtained as follows:</p>
         <ulist>
            <item>
               <p>If the input is an empty sequence, the result is an empty sequence.</p>
            </item>
            <item>
               <p>The input sequence is sorted, by applying the function 
                  <code>fn:sort($input, $collation, $modified-key)</code>.</p>
            </item>
            <item>
               <p>Let <var>$C</var> be the selected collation, or the default collation where applicable.</p>
            </item>
            <item>
               <p>Let <var>$B</var> be the last item in the sorted sequence.</p>
            </item>
            <item>
               <p>The function returns those items <var>$A</var> from the input sequence such that
               <code>(fn:deep-equal($key($A), $key($B), $C)</code>, retaining their order.
            </p>
            </item>

         </ulist>
      </fos:rules>
      <fos:errors>
         <p>If the set of computed keys contains <code>xs:untypedAtomic</code> values that are not 
            castable to <code>xs:double</code> then 
            operation will fail with a dynamic error (<xerrorref
               spec="FO" class="RG" code="0001"/>).
         </p>
         <p>If the set of computed keys contains values that are not comparable using 
            the <code>lt</code> operator then the sort 
            operation will fail with a type error (<xerrorref
               spec="XP" class="TY" code="0004"/>).
         </p>
      </fos:errors>
      <fos:examples>
         <fos:variable name="e" id="v-highest-e"><![CDATA[<a x="10" y="5" z="2"/>]]></fos:variable>
         <fos:example>
            <fos:test use="v-highest-e">
               <fos:expression>highest($e/@*) ! name()</fos:expression>
               <fos:result>("x")</fos:result>
               <fos:postamble>By default, untyped values are compared as numbers.</fos:postamble>
            </fos:test>
            <fos:test use="v-highest-e">
               <fos:expression>highest($e/@*, (), string#1) ! name()</fos:expression>
               <fos:result>("y")</fos:result>
               <fos:postamble>Here, the attribute values are compared as strings.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression>highest(("red", "green", "blue"), (), string-length#1)</fos:expression>
               <fos:result>("green")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>highest(
  ("red", "green", "blue"),
  (),
  map {
    "red"  : xs:hexBinary('FF0000'),
    "green": xs:hexBinary('008000'),
    "blue" : xs:hexBinary('0000FF')
  }
)</eg></fos:expression>
               <fos:result>("red")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>highest(
  ("red", "orange", "yellow", "green",
   "blue", "indigo", "violet"),
  (),
  string-length#1
)</eg></fos:expression>
               <fos:result>("orange", "yellow", "indigo", "violet")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>highest(1 to 25, (), function { . idiv 10 })</fos:expression>
               <fos:result>(20, 21, 22, 23, 24, 25)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>To find employees having the highest salary:
            </p>
            <eg>highest($employees, (), function { xs:decimal(salary) })</eg>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-09-20.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="index-where" prefix="fn">
      <fos:signatures>
         <fos:proto name="index-where" return-type="xs:integer*">
            <fos:arg name="input" type="item()*"/>
            <fos:arg name="predicate" type="function(item()) as xs:boolean"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the position in an input sequence of items that match a supplied predicate.</p>
      </fos:summary>
      <fos:rules>

         <p>The result of the function is a sequence of integers, in monotonic ascending order, representing
            the 1-based positions in the input sequence of those items for which the supplied predicate function
            returns <code>true</code>.</p>
         <p>More formally, the function returns the result of the expression:</p>
         <eg>index-of($input!$predicate(.), true())</eg>
      </fos:rules>

      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>index-where((), boolean#1)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>index-where((0, 4, 9), boolean#1)</fos:expression>
               <fos:result>(2, 3)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>index-where(1 to 10, function { . mod 2 = 0 })</fos:expression>
               <fos:result>(2, 4, 6, 8, 10)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>index-where(
  ("January", "February", "March", "April",
   "May", "June", "July", "August", "September",
   "October", "November", "December"),
  contains(?, "r")
)</eg></fos:expression>
               <fos:result>(1, 2, 3, 4, 9, 10, 11, 12)</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-09-20.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="is-NaN" prefix="fn">
      <fos:signatures>
         <fos:proto name="is-NaN" return-type="xs:boolean">
            <fos:arg name="value" type="xs:anyAtomicType"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if the argument is the <code>xs:float</code> or <code>xs:double</code> value <code>NaN</code>.</p>
      </fos:summary>
      <fos:rules>

         <p>The function returns <code>true</code> if the argument is the <code>xs:float</code> or <code>xs:double</code> value <code>NaN</code>;
            otherwise it returns <code>false</code>.</p>

      </fos:rules>


      <fos:examples>

         <fos:example>
            <fos:test>
               <fos:expression>is-NaN(23)</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>is-NaN("NaN")</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>is-NaN(number("twenty-three"))</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>is-NaN(math:sqrt(-1))</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>

      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-09-20.</fos:version>
      </fos:history>
   </fos:function>

   <!--<fos:function name="item-at">
         <fos:signatures>
            <fos:proto name="item-at" return-type="item()?">
               <fos:arg name="seq" type="item()*"/>
               <fos:arg name="index" type="xs:integer"/>
            </fos:proto>
         </fos:signatures>
         <fos:properties>
            <fos:property>deterministic</fos:property>
            <fos:property>context-independent</fos:property>
            <fos:property>focus-independent</fos:property>
         </fos:properties>
         <fos:summary>
            <p>Returns the item at a given position within the input sequence.</p>
         </fos:summary>
         <fos:rules>
            
            <p>If <code>$index</code> is greater than zero and less than <code>count($seq)</code>, the function
               returns the item at position <code>$index</code> within <code>$seq</code> (counting from one).</p>
            
            <p>If <code>$index</code> is outside this range, the function returns the empty sequence.</p>
            
         </fos:rules>
         
         <fos:notes>
            <p>For most purposes, <code>item-at($seq, $index)</code> can be written <code>$seq[$index]</code>.
               However, the function call is convenient in cases where the indexing expression is context-dependent:
               for example <code>$xxx ! item-at($yyy, position())</code> cannot be rewritten as <code>$xxx ! $yyy[position()]</code>.</p>
         </fos:notes>
         
         
         <fos:examples>
            
            <fos:example>
               <fos:test>
                  <fos:expression>item-at(10 to 20, 5)</fos:expression>
                  <fos:result>14</fos:result>
               </fos:test>
               <fos:test>
                  <fos:expression>item-at(10 to 20, 12)</fos:expression>
                  <fos:result>()</fos:result>
               </fos:test>
               <fos:test>
                  <fos:expression>item-at(10 to 20, 0)</fos:expression>
                  <fos:result>()</fos:result>
               </fos:test>
            </fos:example>
            
         </fos:examples>
         
         
      </fos:function>-->

   <fos:function name="items-after">
      <fos:signatures>
         <fos:proto name="items-after" return-type="item()*">
            <fos:arg name="input" type="item()*"/>
            <fos:arg name="predicate" type="function(item()) as xs:boolean"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the items from the input sequence that follow the first item to match a supplied predicate.</p>
      </fos:summary>
      <fos:rules>
         <p>The supplied <code>$predicate</code> function is called for each item in the input sequence <code>$input</code>,
            to return a boolean value. Let <code>$P</code> be the 1-based position of the first item to match the predicate, 
            or -1 if no item matches the predicate.</p>
         <p>The function then returns <code>if ($P lt 0) then () else fn:subsequence($input, $P + 1)</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>To retain the first matching item, use <code>fn:items-starting-where</code>.</p>
      </fos:notes>

      <fos:examples>

         <fos:example>
            <fos:test>
               <fos:expression>items-after(10 to 20, function { . gt 12 })</fos:expression>
               <fos:result>(14, 15, 16, 17, 18, 19, 20)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>items-after(
  ("January", "February", "March", "April", "May"),
  starts-with(?, "A")
)</eg></fos:expression>
               <fos:result>("May")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-after(10 to 20, function { . gt 100 })</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-after((), boolean#1)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg><![CDATA[parse-xml("<doc><p/><p/><h2/><img/></doc>")//doc/*
=> items-after(function { boolean(self::h2) })]]></eg></fos:expression>
               <fos:result><![CDATA[<img/>]]></fos:result>
            </fos:test>
         </fos:example>

      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-10-25.</fos:version>
      </fos:history>

   </fos:function>

   <fos:function name="items-before">
      <fos:signatures>
         <fos:proto name="items-before" return-type="item()*">
            <fos:arg name="input" type="item()*"/>
            <fos:arg name="predicate" type="function(item()) as xs:boolean"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the items from the input sequence that precede the first item to match a supplied predicate.</p>
      </fos:summary>
      <fos:rules>
         <p>The supplied <code>$predicate</code> function is called for each item in the input sequence <code>$input</code>,
            to return a boolean value. Let <code>$P</code> be the 1-based position of the first item to match the predicate, 
            or -1 if no item matches the predicate.</p>
         <p>The function then returns <code>if ($P lt 0) then $input else fn:subsequence($input, 1, $P - 1)</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>To retain the first matching item, use <code>fn:items-ending-where</code>.</p>
      </fos:notes>
      

      <fos:examples>

         <fos:example>
            <fos:test>
               <fos:expression>items-before(10 to 20, function { . gt 12 })</fos:expression>
               <fos:result>(10, 11, 12)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>items-before(
  ("January", "February", "March", "April", "May"),
  starts-with(?, "A")
)</eg></fos:expression>
               <fos:result>("January", "February", "March")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-before(10 to 20, function { . gt 100 })</fos:expression>
               <fos:result>(10 to 20)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-before((), boolean#1)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg><![CDATA[parse-xml("<doc><p/><p/><h2/><img/></doc>")//doc/*
=> items-before(function { boolean(self::img) })
=!> name()]]></eg></fos:expression>
               <fos:result>"p", "p", "h2"</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>("Aardvark", "Antelope", "Bison",
 "Buffalo", "Camel", "Dingo")
=> items-starting-where(starts-with(?, "B"))
=> items-before(starts-with(?, "D"))</eg></fos:expression>
               <fos:result>"Bison", "Buffalo", "Camel"</fos:result>
            </fos:test>
         </fos:example>

      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-10-25.</fos:version>
      </fos:history>

   </fos:function>

   <fos:function name="items-starting-where">
      <fos:signatures>
         <fos:proto name="items-starting-where" return-type="item()*">
            <fos:arg name="input" type="item()*"/>
            <fos:arg name="predicate" type="function(item()) as xs:boolean"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the items from the input sequence starting from the first item to match a supplied predicate.</p>
      </fos:summary>
      <fos:rules>
         <p>The supplied <code>$predicate</code> function is called for each item in the input sequence <code>$input</code>,
            to return a boolean value. Let <code>$P</code> be the 1-based position of the first item to match the predicate, 
            or -1 if no item matches the predicate.</p>
         <p>The function then returns <code>if ($P lt 0) then () else fn:subsequence($input, $P)</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>To exclude the first item, use <code>fn:items-after</code>.</p>
      </fos:notes>
      

      <fos:examples>

         <fos:example>
            <fos:test>
               <fos:expression>items-starting-where(10 to 20, function { . gt 12 })</fos:expression>
               <fos:result>(13, 14, 15, 16, 17, 18, 19, 20)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>items-starting-where(
  ("January", "February", "March", "April", "May"),
  starts-with(?, "A")
)</eg></fos:expression>
               <fos:result>("April", "May")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-starting-where(10 to 20, function { . gt 100 })</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-starting-where((), boolean#1)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg><![CDATA[parse-xml("<doc><p/><p/><h2/><img/></doc>")//doc/*
=> items-starting-where(function { boolean(self::h2) })
=!> name()]]></eg></fos:expression>
               <fos:result>"h2", "img"</fos:result>
            </fos:test>
         </fos:example>

      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-10-25.</fos:version>
      </fos:history>


   </fos:function>

   <fos:function name="items-ending-where">
      <fos:signatures>
         <fos:proto name="items-ending-where" return-type="item()*">
            <fos:arg name="input" type="item()*"/>
            <fos:arg name="predicate" type="function(item()) as xs:boolean"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns the items from the input sequence ending with the first item to match a supplied predicate.</p>
      </fos:summary>
      <fos:rules>
         <p>The supplied <code>$predicate</code> function is called for each item in the input sequence <code>$input</code>,
            to return a boolean value. Let <code>$P</code> be the 1-based position of the first item to match the predicate, 
            or -1 if no item matches the predicate.</p>
         <p>The function then returns <code>if ($P lt 0) then $input else fn:subsequence($input, 1, $P)</code>.</p>
      </fos:rules>
      <fos:notes>
         <p>To exclude the last item, use <code>fn:items-before</code>.</p>
      </fos:notes>
      

      <fos:examples>

         <fos:example>
            <fos:test>
               <fos:expression>items-ending-where(10 to 20, function { . gt 12 })</fos:expression>
               <fos:result>(10, 11, 12, 13)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>items-ending-where(
  ("January", "February", "March", "April", "May"),
  starts-with(?, "A")
)</eg></fos:expression>
               <fos:result>("January", "February", "March", "April")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-ending-where(10 to 20, function { . gt 100 })</fos:expression>
               <fos:result>(10 to 20)</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>items-ending-where((), boolean#1)</fos:expression>
               <fos:result>()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg><![CDATA[parse-xml("<doc><p/><p/><h2/><img/></doc>")//doc/*
=> items-ending-where(function { boolean(self::h2) })
=!> name()]]></eg></fos:expression>
               <fos:result>"p", "p", "h2"</fos:result>
            </fos:test>
         </fos:example>

      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-10-25.</fos:version>
      </fos:history>


   </fos:function>


   <fos:function name="lowest" prefix="fn">
      <fos:signatures>
         <fos:proto name="lowest" return-type="item()*">
            <fos:arg name="input" type="item()*" usage="navigation"/>
            <fos:arg name="collation" type="xs:string?" usage="absorption" default="fn:default-collation()"/>
            <fos:arg name="key" type="function(item()) as xs:anyAtomicType*" usage="inspection" default="fn:data#1"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>


      <fos:summary>
         <p>Returns those items from a supplied sequence that have the lowest value of a sort key, where
            the sort key can be computed using a caller-supplied function.</p>
      </fos:summary>
      <fos:rules>
         <p>The second argument, <code>$collation</code>, defaults to <code>()</code>.</p>
         <p>Supplying an empty
            sequence as <code>$collation</code> is equivalent to supplying 
            <code>fn:default-collation()</code>. For more
            information on collations see <specref
               ref="choosing-a-collation"/>.</p>
         
         <p>The third argument defaults to the function <code>data#1</code>.</p>
         
         <p>Let <code>$modified-key</code> be the function:</p>
         <eg>function($item) {
  $key($item) => data() ! (
    if (. instance of xs:untypedAtomic) then xs:double(.) else .
  )
}</eg>
         
         <p>That is, the supplied function for computing key values is wrapped in a function that
            converts any <code>xs:untypedAtomic</code> values in its result to <code>xs:double</code>. This makes
            the function consistent with the behavior of <code>fn:min</code> and <code>fn:max</code>,
            but inconsistent with <code>fn:sort</code>, which treats untyped values as strings.</p>
         
         <p>The result of the function is obtained as follows:</p>
         <ulist>
            <item>
               <p>If the input is an empty sequence, the result is an empty sequence.</p>
            </item>
            <item>
               <p>The input sequence is sorted, by applying the function 
                  <code>fn:sort($input, $collation, $modified-key)</code>.</p>
            </item>
            <item>
               <p>Let <var>$C</var> be the selected collation, or the default collation where applicable.</p>
            </item>
            <item>
               <p>Let <var>$B</var> be the first item in the sorted sequence.</p>
            </item>
            <item>
               <p>The function returns those items <var>$A</var> from the input sequence such that
                  <code>(fn:deep-equal($key($A), $key($B), $C)</code>, retaining their order.
               </p>
            </item>
            
         </ulist>
      </fos:rules>
      <fos:errors>
         <p>If the set of computed keys contains <code>xs:untypedAtomic</code> values that are not 
            castable to <code>xs:double</code> then 
            operation will fail with a dynamic error (<xerrorref
               spec="FO" class="RG" code="0001"/>).
         </p>
         <p>If the set of computed keys contains values that are not comparable using 
            the <code>lt</code> operator then the sort 
            operation will fail with a type error (<xerrorref
               spec="XP" class="TY" code="0004"/>).
         </p>
      </fos:errors>


      <fos:examples>
         <fos:variable name="e" id="v-lowest-e"><![CDATA[<a x="10" y="5" z="2"/>]]></fos:variable>
         <fos:example>
            <fos:test use="v-lowest-e">
               <fos:expression>lowest($e/@*) ! name()</fos:expression>
               <fos:result>("z")</fos:result>
               <fos:postamble>By default, untyped values are compared as numbers.</fos:postamble>
            </fos:test>
            <fos:test use="v-lowest-e">
               <fos:expression>lowest($e/@*, (), string#1) ! name()</fos:expression>
               <fos:result>("x")</fos:result>
               <fos:postamble>Here, the attribute values are compared as strings.</fos:postamble>
            </fos:test>
            <fos:test>
               <fos:expression>lowest(("red", "green", "blue"), (), string-length#1)</fos:expression>
               <fos:result>("red")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>lowest(
  ("red", "green", "blue"),
  (),
  map {
    "red"  : xs:hexBinary('FF0000'),
    "green": xs:hexBinary('008000'),
    "blue" : xs:hexBinary('0000FF')
  }
)</eg></fos:expression>
               <fos:result>("blue")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>lowest(
  ("April", "June", "July", "August"),
  (),
  string-length#1
)</eg></fos:expression>
               <fos:result>("June", "July")</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>lowest(1 to 25, (), function { . idiv 10 })</fos:expression>
               <fos:result>(1, 2, 3, 4, 5, 6, 7, 8, 9)</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>To find employees having the lowest salary:
            </p>
            <eg>lowest($employees, (), function { xs:decimal(salary) })</eg>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-09-20.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="some" prefix="fn">
      <fos:signatures>
         <fos:proto name="some" return-type="xs:boolean">
            <fos:arg name="input" type="item()*"/>
            <fos:arg name="predicate" type="function(item()) as xs:boolean" 
               default="fn:identity#1" example="fn:boolean#1"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Returns <code>true</code> if at least one item in the input sequence matches a supplied predicate.</p>
      </fos:summary>
      <fos:rules>
         <p>The effect of the function is equivalent to the following implementation in XQuery:</p>
         <eg><![CDATA[
declare function fn:some(
        $input as item()*,
        $predicate as function(item()) as xs:boolean) 
        as xs:boolean {
  some $i in $input satisfies $predicate($i)
};]]></eg>
         <p>or its equivalent in XSLT:</p>
         <eg><![CDATA[
<xsl:function name="fn:some" as="xs:boolean">
  <xsl:param name="input" as="item()*"/>
  <xsl:param name="predicate" as="function(item()) as xs:boolean"/>
  <xsl:sequence select="some $i in $input satisfies $predicate($i)"/>
</xsl:function>]]>
         </eg>
      </fos:rules>
      <fos:notes>
         <p>If the second argument is omitted, the first argument must be a sequence of <code>xs:boolean</code>
         values.</p>
         <p>The implementation <rfc2119>may</rfc2119> deliver a result as soon as one item is found for which the predicate
         returns <code>true</code>; it is not required to evaluate the predicate for every item.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>some(())</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>some((1=1, 2=2, 3=4))</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>some((), boolean#1)</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>some((1, 3, 7), function {. mod 2 = 1 })</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression>some(-5 to +5, function {. ge 0 })</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>some(
  ("January", "February", "March", "April",
   "September", "October", "November", "December"),
  contains(?, "z")
)</eg></fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>some(
  ("January", "February", "March", "April",
   "September", "October", "November", "December")
  =!> contains("r")
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">New in 4.0. Accepted 2022-09-13.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="stack-trace" prefix="fn">
      <fos:signatures>
         <fos:proto name="stack-trace" return-type="xs:string"/>
      </fos:signatures>
      <fos:properties>
         <fos:property>nondeterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      
      <fos:summary>
         <p>Returns implementation-dependent information about the current state of execution.</p>
      </fos:summary>
      <fos:rules>

         <p>The result of the function is an <termref def="implementation-dependent">implementation-dependent</termref> string containing diagnostic
            information about the current state of execution.</p>

         <p>The function is non-deterministic: multiple calls will typically produce different results.</p>

      </fos:rules>

      <fos:notes>
         <p>The function will typically be called to assist in diagnosing dynamic errors.</p>
      </fos:notes>




   </fos:function>



   <fos:function name="all-equal" prefix="fn">
      <fos:signatures>
         <fos:proto name="all-equal" return-type="xs:boolean">
            <fos:arg name="values" type="xs:anyAtomicType*" usage="navigation"/>
            <fos:arg name="collation" type="xs:string?" usage="absorption" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>


      <fos:summary>
         <p>Returns <code>true</code> if all items in a supplied sequence (after atomization) are equal.</p>
      </fos:summary>

      <fos:rules>
         <p>Omitting the second argument, <code>$collation</code>, is equivalent to supplying 
            <code>fn:default-collation()</code>. For more
            information on collations see <specref
               ref="choosing-a-collation"/>.</p>


         <p>The result of the function <code>fn:all-equal($values, $collation)</code> is <code>true</code> if and only if the result
            of <code>fn:count(fn:distinct-values($values, $collation)) le 1</code> is <code>true</code> (that is, if the sequence
            is empty, or if all the items in the sequence are equal under the rules of the 
            <code>fn:distinct-values</code> function).</p>
      </fos:rules>
      

      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>all-equal((1,2,3))</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>all-equal((1, 1.0, 1.0e0))</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>all-equal("one")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>all-equal(())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>all-equal(
  ("ABC", "abc"),
  "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
)</eg></fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The expression <code>fn:all-equal(//p/@class)</code> returns <code>true</code> if all
                <code>p</code> elements have the same value for <code>@class</code>.
            </p>
         </fos:example>
         <fos:example>
            <p>The expression <code>fn:all-equal(*!fn:node-name())</code> returns <code>true</code> if all
               element children of the context node have the same name.
            </p>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Originally proposed for 4.0 under the name <code role="example">fn:uniform</code>.
         Accepted 2022-09-20 with a change of name.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="all-different" prefix="fn">
      <fos:signatures>
         <fos:proto name="all-different" return-type="xs:boolean">
            <fos:arg name="values" type="xs:anyAtomicType*" usage="navigation"/>
            <fos:arg name="collation" type="xs:string?" usage="absorption" default="fn:default-collation()"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property dependency="collations">context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>


      <fos:summary>
         <p>Returns <code>true</code> if no two items in a supplied sequence are equal.</p>
      </fos:summary>

      <fos:rules>
         <p>Omitting the second argument, <code>$collation</code>, is equivalent to supplying 
            <code>fn:default-collation()</code>. For more
            information on collations see <specref
               ref="choosing-a-collation"/>.</p>


         <p>The result of the function <code>fn:all-different($values, $collation)</code> is <code>true</code> if and only if the result
            of <code>fn:count(fn:distinct-values($values, $collation)) eq fn:count($values)</code> is <code>true</code> 
            (that is, if the sequence
            is empty, or if all the items in the sequence are distinct under the rules of the 
            <code>fn:distinct-values</code> function).</p>
      </fos:rules>
      

      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression>all-different((1,2,3))</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>all-different((1, 1.0, 1.0e0))</fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>all-different("one")</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression>all-different(())</fos:expression>
               <fos:result>true()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <fos:test>
               <fos:expression><eg>all-different(
  ("ABC", "abc"),
  "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
)</eg></fos:expression>
               <fos:result>false()</fos:result>
            </fos:test>
         </fos:example>
         <fos:example>
            <p>The expression <code>fn:all-different(//employee/@ssn)</code> is <code>true</code> if no two employees have the same value for their
            <code>@ssn</code> attribute.</p>
         </fos:example>
         <fos:example>
            <p>The expression <code>fn:all-different(*!fn:node-name())</code> returns <code>true</code> if all
               element children of the context node have distinct names.
            </p>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Originally proposed for 4.0 under the name <code role="example">fn:unique</code>.
            Accepted 2022-09-20 with a change of name and with clarifications to the description.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="parse-uri" prefix="fn" diff="add">
      <fos:signatures>
         <fos:proto name="parse-uri" return-type-ref="uri-structure-record">
            <fos:arg name="uri" type="xs:string"/>
            <fos:arg name="options" type="map(*)" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>

      <fos:summary>
         <p>Parses the URI provided and returns a map of its parts.</p>
      </fos:summary>

      <fos:rules>
         <p>The function parses the <code>$uri</code> provided,
         returning a map containing its constituent parts: scheme,
         authority components, path, etc.
         In addition to parsing URIs as defined by <bibref ref="rfc3986"/>
         (and <bibref ref="rfc3987"/>), this function also attempts to
         account for strings that are not valid URIs but that often appear
         in URI-adjacent spaces, such as file names. Not all such strings
         can be successfully parsed as URIs.</p>

         <p>This function is described as a series of transformations
         over the input string to identify the parts of a URI that are
         present. Some portions of the URI are identified by matching
         with a regular expression. This approach is designed to make
         the description clear and unambiguous, it is not implementation
         advice.</p>

         <p>The following options are available:</p>

         <fos:options>
            <fos:option key="path-separator">
               <fos:meaning>Identifies the path separator</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>/</fos:default>
            </fos:option>
            <fos:option key="query-separator">
               <fos:meaning>Identifies the query separator</fos:meaning>
               <fos:type>xs:string</fos:type>
               <fos:default>&amp;</fos:default>
            </fos:option>
            <fos:option key="allow-deprecated-features">
               <fos:meaning>Indicates that deprecated URI
               features should be returned</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false()</fos:default>
            </fos:option>
            <fos:option key="omit-default-ports">
               <fos:meaning>Indicates that a port number that is the same as
               the default port for a given scheme should be omitted.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false()</fos:default>
            </fos:option>
            <fos:option key="unc-path">
               <fos:meaning>Indicates that an input URI that begins
               with two or more leading slashes should be interprted
               as a Windows Universal Naming Convention
               Path. (Specifically: that it has the <code>file:</code> scheme.)</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false()</fos:default>
            </fos:option>
         </fos:options>

         <p>Processing begins with a <emph>string</emph> that is equal
         to the <code>$uri</code>. If the <emph>string</emph> contains
         any backlashes (<code>\</code>), replace them with forward
         slashes (<code>/</code>).</p>

         <p>If the <emph>string</emph> matches <code>^(.*)#([^#]*)$</code>,
         the <emph>string</emph> is the first match group and the
         <emph>fragment</emph> is the second match group. Otherwise,
         the string is unchanged and the <emph>fragment</emph> is the empty
         sequence.</p>

         <p>If the <emph>string</emph> matches <code>^(.*)\?([^\?]*)$</code>,
         the <emph>string</emph> is the first match group and the
         <emph>query</emph> is the second match group. Otherwise,
         the string is unchanged and the <emph>query</emph> is the empty
         sequence.</p>

         <ulist>
            <item>
               <p>If the <emph>string</emph> matches <code>^[a-zA-Z][:|].*$</code>:</p>
         <ulist>
            <item><p>the <emph>scheme</emph> is <code>file</code>;</p></item>
            <item><p>if the second character in the <emph>string</emph> is <code>|</code>, it is changed to <code>:</code>;</p></item>
            <item><p>the <emph>filepath</emph> is the <emph>string</emph>; and</p></item>
            <item><p>a leading slash <code>/</code> is added to the <emph>string</emph>.</p></item>
         </ulist></item>
         <item>
            <p>Otherwise, if the <emph>string</emph> matches
         <code>^([a-zA-Z][A-Za-z0-9\+\-\.]*):(.*)$</code>:</p>
         <ulist>
            <item><p>the <emph>scheme</emph> is the first match group,</p></item>
            <item><p>the <emph>string</emph> is the second match group, and</p></item>
            <item><p>the <emph>filepath</emph> is the empty sequence.</p></item>
         </ulist>
         </item>
         <item><p>Finally, if the <emph>string</emph> does not match either expression:</p>
         <ulist>
            <item><p>the <emph>scheme</emph> is the empty sequence,</p></item>
            <item><p>the <emph>string</emph> is unchanged, and</p></item>
            <item><p>the <emph>filepath</emph> is the empty sequence.</p></item>
         </ulist>
         </item>
         </ulist>

         <p>If the <emph>scheme</emph> is the empty sequence, the
         <code>unc-path</code> option is <code>true</code>, and the <emph>string</emph>
         matches <code>^//[^/].*$</code>, then the scheme is <code>file</code>
         and the <emph>filepath</emph> is the <emph>string</emph>.
         </p>

         <p>If the <emph>scheme</emph> is known to be hierarchical, or known
         not to be hierarchical, then <emph>hierarchical</emph> is set accordingly.
         Exactly which schemes are known to be hierarchical or
         non-hierarchical is
         <termref def="implementation-defined">implementation-defined</termref>.
         If the implementation does not know if a <emph>scheme</emph> is or is not
         hierarchical, the <emph>hierarchical</emph> setting depends on the
         <emph>string</emph>. If the <emph>string</emph> is the empty string,
         <emph>hierarchical</emph> is the empty sequence (<emph>i.e.</emph> not known),
         otherwise <emph>hierarchical</emph> is
         <code>true</code> if <emph>string</emph> begins with <code>/</code> and <code>false</code> otherwise.</p>

         <p>If <phrase diff="add" at="2023-07-07">the scheme is not known or is known to be <code>file</code> and</phrase>
         the <emph>string</emph> matches <code>^//*([a-zA-Z]:.*)$</code>,
         the <emph>authority</emph> is empty and the <emph>string</emph> is
         the first match group. Otherwise, if the <emph>string</emph>
         matches <code>^///*([^/]+)(/.*)?$</code> then the <emph>authority</emph>
         is the first match group and the <emph>string</emph> is the second
         match group. If the <emph>string</emph> does not match either
         regular expression, the <emph>authority</emph> is the empty sequence
         and the <emph>string</emph> is unchanged.</p>

         <p>If the <emph>string</emph> matches <code>^//*([a-zA-Z]:.*)$</code>,
         the <emph>authority</emph> is empty and the <emph>string</emph> is
         the first match group. Otherwise, if the <emph>string</emph>
         matches <code>^///*([^/]+)(/.*)?$</code> then the <emph>authority</emph>
         is the first match group and the <emph>string</emph> is the second
         match group. If the <emph>string</emph> does not match either
         regular expression, the <emph>authority</emph> is the empty sequence
         and the <emph>string</emph> is unchanged.</p>

         <p>If the <emph>authority</emph> matches
         <code>^(([^@]*)@)(.*)(:([^:]*))?$</code>,
         then the <emph>userinfo</emph> is match group 2, otherwise
         <emph>userinfo</emph> is the empty sequence. If
         <emph>userinfo</emph> is present and contains a non-empty password, then
         <emph>userinfo</emph> is discarded and set to the empty sequence
         unless the <code>allow-deprecated-features</code> option is <code>true</code>.</p>

         <p>When parsing the <emph>authority</emph> to find the <emph>host</emph>,
         there are four possibilities: the host can be a registered name (e.g.,
         <code>example.com</code>), an IPv4 address (e.g., <code>127.0.0.1</code>),
         an IPv6 (or IPvFuture) address (e.g., <code>[::1]</code>), or an error
         if there is an open square bracket (<code>[</code>) not matched by a
         close square bracket (<code>]</code>). In a properly
         constructed RFC 3986 URI, the only place where square
         brackets may occur is around the IPv6/IPvFuture IP address.</p>

         <olist>
            <item>
               <p>If the <emph>authority</emph> matches
               <code>^(([^@]*)@)?(\[[^\]]*\])(:([^:]*))?$</code>,
               then the <emph>host</emph> is match group 3, otherwise
               </p>
            </item>
            <item>
               <p>If the <emph>authority</emph> matches
               <code>^(([^@]*)@)?\[.*$</code>
               then <errorref class="UR" code="0001"/> is raised, otherwise
               </p>
            </item>
            <item>
               <p>If the <emph>authority</emph> matches
               <code>^(([^@]*)@)?([^:]+)(:([^:]*))?$</code>,
               then the <emph>host</emph> is match group 3, otherwise
               </p>
            </item>
            <item>
               <p>the <emph>host</emph> is the empty sequence.</p>
            </item>
         </olist>

         <p>This function does not attempt to decode the components of the
         <emph>host</emph>.</p>

         <p>Similar care must be taken to match the port because an IPv6/IPvFuture
         address may contain a colon.</p>

         <olist>
            <item>
               <p>If the <emph>authority</emph> matches
               <code>^(([^@]*)@)?(\[[^\]]*\])(:([^:]*))?$</code>,
               then the <emph>port</emph> is match group 5, otherwise
               </p>
            </item>
            <item>
               <p>If the <emph>authority</emph> matches
               <code>^(([^@]*)@)?([^:]+)(:([^:]*))?$</code>,
               then the <emph>port</emph> is match group 5, otherwise
               </p>
            </item>
            <item>
               <p>the <emph>port</emph> is the empty sequence.</p>
            </item>
         </olist>

         <p>If the <code>omit-default-ports</code> option is <code>true</code>,  the port
         is discarded and set to the empty sequence if the port number is the same
         as the default port for the given scheme. Implementations <rfc2119>should</rfc2119>
         recognize the default ports for <code>http</code> (80), <code>https</code> (443),
         <code>ftp</code> (21), and <code>ssh</code> (22). Exactly which ports are
         recognized
         is <termref def="implementation-defined">implementation-defined</termref>.
         </p>

         <p>If the <emph>string</emph> is the empty string, then
         <emph>path</emph> is the empty sequence, otherwise <emph>path</emph>
         is the whole <emph>string</emph>. If the <emph>scheme</emph> is 
         <code>file</code> or the empty sequence, and <emph>filepath</emph> is
         the empty sequence, <emph>filepath</emph> is also the whole <emph>string</emph>.</p>

         <p>The <emph>path separator</emph> is the value of the
         <code>path-separator</code> option. A
         <emph>path-segments</emph> sequence is constructed by
         tokenizing the <emph>string</emph> on the <emph>path
         separator</emph> and applying <emph>uri decoding</emph> on each
         token.</p>

         <p>Applying <emph>uri decoding</emph> replaces all occurrences of
         plus (<code>+</code>) with spaces and all occurrences of
         <code>%[a-fA-F0-9][a-fA-F0-9]</code> with a single character with the
         codepoint represented by the two digit hexadecimal number that
         follows the <code>%</code> character. In other words, <code>"A%42C"</code> becomes
         <code>"ABC"</code> If there are any occurrences of <code>%</code> followed
         by up to two characters that are not hexadecimal digits, they are
         replaced by the character sequence <code>0xef</code>, <code>0xbf</code>, <code>0xbd</code>
         (that is, <code>0xfffd</code>, the Unicode replacement character, in UTF-8).
         After replacing all of the percent-escaped characters, the character sequence is
         interpreted as UTF-8 to get the string. In other words <code>"A%XYC%Z%F0%9F%92%A9"</code> becomes
         <code>"A&#xfffd;C&#xfffd;💩"</code>. <phrase diff="add" at="2023-07-07">If the character sequence is
         not a valid sequence of UTF-8 characters, any invalid characters are replaced with the
         <code>0xfffd</code>.</phrase></p>

         <p>The <emph>query separator</emph> is the value of the
         <code>query-separator</code> option.
         A <emph>query-parameters</emph> value is constructed as follows.
         Start with an empty map. Tokenize the <emph>query</emph> on
         the <emph>query separator</emph>. For each token, identify
         the <emph>key</emph> and the <emph>value</emph>. If the token
         contains an equal sign (<code>=</code>), the <emph>key</emph>
         is the string that precedes the first equal sign, uri
         decoded, and the <emph>value</emph> is the remainder
         of the token, after the first equal sign, uri decoded. If the
         token does not contain an equal sign, <emph>key</emph> is the
         empty string and the <emph>value</emph> is equal to the
         token, uri decoded. Add the <emph>key</emph>/<emph>value</emph> pair
         to the map. If the <emph>key</emph> already exists in the map, add the <emph>value</emph>
         to a list of values associated with that key. The resulting map, when all
         tokens have been processed, is the <emph>query-parameters</emph> map.</p>

         <p>If the <emph>filepath</emph> is not the empty sequence,
         it is uri decoded. On a Windows system, any
         forward slashes in the path <rfc2119>may</rfc2119> be
         replaced with backslashes.</p>

         <p>The following map is returned:</p>

         <eg>{
  "uri": $uri,
  "scheme": <emph>scheme</emph>,
  "hierarchical": <emph>hierarchical</emph>,
  "authority": <emph>authority</emph>,
  "userinfo": <emph>userinfo</emph>,
  "host": <emph>host</emph>,
  "port": <emph>port</emph>,
  "path": <emph>path</emph>,
  "query": <emph>query</emph>,
  "fragment": <emph>fragment</emph>,
  "path-segments": <emph>path-segments</emph>,
  "query-parameters": <emph>query-parameters</emph>,
  "filepath": <emph>filepath</emph>
}</eg>

         <p>The map should only be populated with keys that have a non-empty value (keys
         whose value is the empty sequence <rfc2119>should</rfc2119>
         be omitted).</p>

         <p>Implementations may implement additional or different rules for URIs that
         have a scheme or pattern that they recognize. An implementation might choose
         to parse <code>jar:</code> URIs with special rules, for example, since they extend the
         syntax in ways not defined by <bibref ref="rfc3986"/>. Implementations may add
         additional keys to the map. The meaning of those keys is implementation-defined.</p>
      </fos:rules>

      <fos:errors>
         <p>A dynamic error is raised <errorref class="UR" code="0001"/> if
         the URI contains an open square bracket in the authority component that
         is not followed by a close square bracket.</p>
      </fos:errors>

      <fos:notes>
         <p>Like <code>fn:resolve-uri</code>, this function handles the additional characters
         allowed in <bibref ref="rfc3987"/> IRIs in the same way that other unreserved
         characters are handled.</p>
         <p>Unlike <code>fn:resolve-uri</code>, this function is not attempting to resolve
         one URI against another and consequently, the errors that can arise under those
         circumstances do not apply here. The <code>fn:parse-uri</code> function will
         accept strings that would raise errors if resolution was attempted,
         see <code>fn:build-uri</code>.</p>
      </fos:notes>
      
<fos:examples role="wide">
  <fos:example>
    <p>In the examples that follow, keys with values that are null or an empty sequence
    are elided for editorial clarity. String literals that include an ampersand character
    are written as string templates (for example <code>`Barnes&amp;Noble`</code>) to ensure
    that the examples work in both XPath and XQuery.</p>
    <fos:test>
      <fos:expression><eg>parse-uri(
  "http://qt4cg.org/specifications/xpath-functions-40/Overview.html#parse-uri"
)</eg></fos:expression>
      <fos:result><eg>map {
  "uri": "http://qt4cg.org/specifications/xpath-functions-40/Overview.html#parse-uri",
  "scheme": "http",
  "hierarchical": true(),
  "authority": "qt4cg.org",
  "host": "qt4cg.org",
  "path": "/specifications/xpath-functions-40/Overview.html",
  "fragment": "parse-uri",
  "path-segments": ("", "specifications", "xpath-functions-40", "Overview.html")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("http://www.ietf.org/rfc/rfc2396.txt")</fos:expression>
      <fos:result><eg>map {
  "uri": "http://www.ietf.org/rfc/rfc2396.txt",
  "scheme": "http",
  "hierarchical": true(),
  "authority": "www.ietf.org",
  "host": "www.ietf.org",
  "path": "/rfc/rfc2396.txt",
  "path-segments": ("", "rfc", "rfc2396.txt")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("https://example.com/path/to/file")</fos:expression>
      <fos:result><eg>map {
  "uri": "https://example.com/path/to/file",
  "scheme": "https",
  "hierarchical": true(),
  "authority": "example.com",
  "host": "example.com",
  "path": "/path/to/file",
  "path-segments": ("", "path", "to", "file")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression><eg>parse-uri(
  `https://example.com:8080/path?s=%22hello world%22&amp;sort=relevance`
)</eg></fos:expression>
      <fos:result><eg>map {
  "uri": `https://example.com:8080/path?s=%22hello world%22&amp;sort=relevance`,
  "scheme": "https",
  "hierarchical": true(),
  "authority": "example.com:8080",
  "host": "example.com",
  "port": "8080",
  "path": "/path",
  "query": `s=%22hello world%22&amp;sort=relevance`,
  "query-parameters": map {
    "s": '"hello world"',
    "sort": "relevance"
  },
  "path-segments": ("", "path")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("https://user@example.com/path/to/file")</fos:expression>
      <fos:result><eg>map {
  "uri": "https://user@example.com/path/to/file",
  "scheme": "https",
  "hierarchical": true(),
  "authority": "user@example.com",
  "userinfo": "user",
  "host": "example.com",
  "path": "/path/to/file",
  "path-segments": ("", "path", "to", "file")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("ftp://ftp.is.co.za/rfc/rfc1808.txt")</fos:expression>
      <fos:result><eg>map {
  "uri": "ftp://ftp.is.co.za/rfc/rfc1808.txt",
  "scheme": "ftp",
  "hierarchical": true(),
  "authority": "ftp.is.co.za",
  "host": "ftp.is.co.za",
  "path": "/rfc/rfc1808.txt",
  "path-segments": ("", "rfc", "rfc1808.txt")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("file:////uncname/path/to/file")</fos:expression>
      <fos:result><eg>map {
  "uri": "file:////uncname/path/to/file",
  "scheme": "file",
  "hierarchical": true(),
  "authority": "uncname",
  "host": "uncname",
  "path": "/path/to/file",
  "filepath": "/path/to/file",
  "path-segments": ("", "path", "to", "file")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("file:///c:/path/to/file")</fos:expression>
      <fos:result><eg>map {
  "uri": "file:///c:/path/to/file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c: ", "path", "to", "file")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("file:/C:/Program%20Files/test.jar")</fos:expression>
      <fos:result><eg>map {
  "uri": "file:/C:/Program%20Files/test.jar",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/C:/Program%20Files/test.jar",
  "filepath": "C:/Program Files/test.jar",
  "path-segments": ("", "C: ", "Program Files", "test.jar")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("file:\\c:\path\to\file")</fos:expression>
      <fos:result><eg>map {
  "uri": "file:\\c:\path\to\file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c: ", "path", "to", "file")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("file:\c:\path\to\file")</fos:expression>
      <fos:result><eg>map {
  "uri": "file:\c:\path\to\file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c: ", "path", "to", "file")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("c:\path\to\file")</fos:expression>
      <fos:result><eg>map {
  "uri": "c:\path\to\file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c: ", "path", "to", "file")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("/path/to/file")</fos:expression>
      <fos:result>
<eg>map {
  "uri": "/path/to/file",
  "hierarchical": true(),
  "path": "/path/to/file",
  "filepath": "/path/to/file",
  "path-segments": ("", "path", "to", "file")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("#testing")</fos:expression>
      <fos:result>
<eg>map {
 "uri": "#testing",
 "fragment": "testing"
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("?q=1")</fos:expression>
      <fos:result>
<eg>map {
  "uri": "?q=1",
  "query": "q=1",
  "query-parameters": map {
    "q": "1"
  }
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("ldap://[2001:db8::7]/c=GB?objectClass?one")</fos:expression>
      <fos:result>
<eg>map {
  "uri": "ldap://[2001:db8::7]/c=GB?objectClass?one",
  "scheme": "ldap",
  "hierarchical": true(),
  "authority": "[2001:db8::7]",
  "host": "[2001:db8::7]",
  "path": "/c=GB",
  "query": "objectClass?one",
  "query-parameters": map {
    "": "objectClass?one"
  },
  "path-segments": ("", "c=GB")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("mailto:John.Doe@example.com")</fos:expression>
      <fos:result>
<eg>map {
  "uri": "mailto:John.Doe@example.com",
  "scheme": "mailto",
  "hierarchical": false(),
  "path": "John.Doe@example.com",
  "path-segments": ("John.Doe@example.com")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("news:comp.infosystems.www.servers.unix")</fos:expression>
      <fos:result>
<eg>map {
  "uri": "news:comp.infosystems.www.servers.unix",
  "scheme": "news",
  "hierarchical": false(),
  "path": "comp.infosystems.www.servers.unix",
  "path-segments": ("comp.infosystems.www.servers.unix")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("tel:+1-816-555-1212")</fos:expression>
      <fos:result>
<eg>map {
  "uri": "tel:+1-816-555-1212",
  "scheme": "tel",
  "hierarchical": false(),
  "path": "+1-816-555-1212",
  "path-segments": (" 1-816-555-1212")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("telnet://192.0.2.16:80/")</fos:expression>
      <fos:result>
<eg>map {
  "uri": "telnet://192.0.2.16:80/",
  "scheme": "telnet",
  "hierarchical": true(),
  "authority": "192.0.2.16:80",
  "host": "192.0.2.16",
  "port": "80",
  "path": "/",
  "path-segments": ("", "")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression><eg>parse-uri(
  "urn:oasis:names:specification:docbook:dtd:xml:4.1.2"
)</eg></fos:expression>
      <fos:result>
<eg>map {
  "uri": "urn:oasis:names:specification:docbook:dtd:xml:4.1.2",
  "scheme": "urn",
  "hierarchical": false(),
  "path": "oasis:names:specification:docbook:dtd:xml:4.1.2",
  "path-segments": "oasis:names:specification:docbook:dtd:xml:4.1.2"
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("tag:textalign.net,2015:ns")</fos:expression>
      <fos:result>
<eg>map {
  "uri": "tag:textalign.net,2015:ns",
  "scheme": "tag",
  "hierarchical": false(),
  "path": "textalign.net,2015:ns",
  "path-segments": "textalign.net,2015:ns"
}</eg>
</fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
    <fos:test>
      <fos:expression>parse-uri("tag:jan@example.com,1999-01-31:my-uri")</fos:expression>
      <fos:result>
<eg>map {
  "uri": "tag:jan@example.com,1999-01-31:my-uri",
  "scheme": "tag",
  "hierarchical": false(),
  "path": "jan@example.com,1999-01-31:my-uri",
  "path-segments": "jan@example.com,1999-01-31:my-uri"
}</eg>
</fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
<p>This example uses the algorithm described above, not an algorithm that is
specifically aware of the <code>jar:</code> scheme.</p>
    <fos:test>
      <fos:expression><eg>parse-uri(
  "jar:file:/C:/Program%20Files/test.jar!/foo/bar"
)</eg></fos:expression>
      <fos:result>
<eg>map {
  "uri": "jar:file:/C:/Program%20Files/test.jar!/foo/bar",
  "scheme": "jar",
  "hierarchical": false(),
  "path": "file:/C:/Program%20Files/test.jar!/foo/bar",
  "path-segments": ("file:", "C:", "Program Files", "test.jar!", "foo", "bar")
}</eg>
</fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
<p>This example demonstrates that parsing the URI treats non-URI characters in
lexical IRIs as “unreserved characters”. The rationale for this is given in the
description of <code>fn:resolve-uri</code>.</p>
    <fos:test>
      <fos:expression>parse-uri("http://www.example.org/Dürst")</fos:expression>
      <fos:result>
<eg>map {
  "uri": "http://www.example.org/Dürst",
  "scheme": "http",
  "hierarchical": true(),
  "authority": "www.example.org",
  "host": "www.example.org",
  "path": "/Dürst",
  "path-segments": ("", "Dürst")
}</eg>
</fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
<p>This example demonstrates a non-standard query separator.</p>
    <fos:test>
      <fos:expression><eg>parse-uri(
  "https://example.com:8080/path?s=%22hello world%22;sort=relevance",
  map { "query-separator": ";" }
)</eg></fos:expression>
      <fos:result>
<eg>map {
  "uri": "https://example.com:8080/path?s=%22hello world%22;sort=relevance",
  "scheme": "https",
  "hierarchical": true(),
  "authority": "example.com:8080",
  "host": "example.com",
  "port": "8080",
  "path": "/path",
  "query": "s=%22hello world%22;sort=relevance",
  "query-parameters": map {
    "s": '"hello world"',
    "sort": "relevance"
  },
  "path-segments": ("", "path")
}</eg></fos:result>
    </fos:test>
  </fos:example>
  <fos:example>
<p>This example uses an invalid query separator so raises an error.</p>
    <fos:test>
      <fos:expression><eg>parse-uri(
  "https://example.com:8080/path?s=%22hello world%22;;sort=relevance",
  map { "query-separator": ";;" }
)</eg></fos:expression>
      <fos:error-result error-code="FOXX0000"/>
    </fos:test>
  </fos:example>
<fos:example>
<p>This example demonstrates the use of <code>|</code> instead of <code>:</code> in a Windows
path.</p>
    <fos:test>
      <fos:expression>parse-uri("c|/path/to/file")</fos:expression>
      <fos:result><eg>map {
  "uri": "c|/path/to/file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c:", "path", "to", "file")
}</eg></fos:result>
    </fos:test>
</fos:example>
<fos:example>
<p>This example demonstrates the use of <code>|</code> instead of <code>:</code> in a Windows
path with an explicit <code>file:</code> scheme.</p>
    <fos:test>
      <fos:expression>parse-uri("file://c|/path/to/file")</fos:expression>
      <fos:result><eg>map {
  "uri": "file://c|/path/to/file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c:", "path", "to", "file")
}</eg></fos:result>
    </fos:test>
</fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed on 17 Oct 2022 to resolve
         <loc href="https://github.com/qt4cg/qtspecs/issues/72">issue #72</loc>.
         Accepted in principle on 15 Nov 2022, with some details still
         to be resolved. Updated in response to 
         <loc href="https://github.com/qt4cg/qtspecs/issues/389">issue #389</loc> and
         <loc href="https://github.com/qt4cg/qtspecs/issues/390">issue #390</loc>.
         Further updated on 13 September 2023 in response to comments from review
         in meeting 042.</fos:version>
      </fos:history>
   </fos:function>

   <fos:function name="build-uri" prefix="fn" diff="add">
      <fos:signatures>
         <fos:proto name="build-uri" return-type="xs:string">
            <fos:arg name="parts" type-ref="uri-structure-record"
               example='map {
               "scheme": "https",
               "host": "qt4cg.org",
               "port": (),
               "path": "/specifications/index.html"
               }'/>
            <fos:arg name="options" type="map(*)" default="map{}"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-dependent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>

      <fos:summary>
         <p>Constructs a URI from the parts provided.</p>
      </fos:summary>

      <fos:rules>
        <p>A URI is composed from a scheme, authority, path, query, and fragment.</p>

        <p>The following options are available:</p>

        <fos:options>
           <fos:option key="path-separator">
              <fos:meaning>Identifies the path separator</fos:meaning>
              <fos:type>xs:string</fos:type>
              <fos:default>/</fos:default>
           </fos:option>
           <fos:option key="query-separator">
              <fos:meaning>Identifies the query separator</fos:meaning>
              <fos:type>xs:string</fos:type>
              <fos:default>&amp;</fos:default>
           </fos:option>
           <fos:option key="allow-deprecated-features">
              <fos:meaning>Indicates that deprecated URI
              features should be returned</fos:meaning>
              <fos:type>xs:boolean</fos:type>
              <fos:default>false()</fos:default>
           </fos:option>
           <fos:option key="omit-default-ports">
              <fos:meaning>Indicates that a port number that is the same as
              the default port for a given scheme should be omitted.</fos:meaning>
              <fos:type>xs:boolean</fos:type>
              <fos:default>false()</fos:default>
           </fos:option>
            <fos:option key="unc-path">
               <fos:meaning>Indicates that the URI represents
               a Windows Universal Naming Convention
               Path.</fos:meaning>
               <fos:type>xs:boolean</fos:type>
               <fos:default>false()</fos:default>
            </fos:option>
        </fos:options>

        <p>The components are derived from the contents of the <code>$parts</code>
        map in the following way:</p>

        <p>If the <code>scheme</code> key is present in the map, the URI begins
        with the value of that key. A URI is considered to be non-hierarchical
        if either the <code>hierarchical</code> key is present in the 
        <code>$parts</code> map with the value
        <code>false()</code> or if the scheme is known to be non-hierarchical.
        (In other words, schemes are hierarchical by default.)</p>

        <p>If the <code>scheme</code> is <code>file</code> and the <code>unc-path</code>
        option is <code>true</code>, the scheme is delimited by a trailing <code>:////</code>,
        otherwise, if the URI is non-hierarchical, the scheme is delimited by
        a trailing <code>:</code>. For all other schemes, it is delimited by
        a trailing <code>://</code>. Exactly which schemes are known to be
        non-hierarchical is
        <termref def="implementation-defined">implementation-defined</termref>.</p>

        <p>For simplicity of exposition, we take the
        <code>userinfo</code>, <code>host</code>, and
        <code>port</code> values from the map and imagine they are
        stored in variables with the same name. If the key is not
        present in the map, the value of the variable is set to the
        empty sequence.</p>

        <p>If <code>$userinfo</code> is non-empty and contains a
        non-empty password, then <code>$userinfo</code> is set to the
        empty sequence unless the
        <code>allow-deprecated-features</code> option is <code>true</code>.</p>

        <p>If the <code>omit-default-ports</code> option is <code>true</code>
        then the <code>$port</code> is set to the empty sequence if
        the port number is the same as the default port for the given
        scheme. Implementations <rfc2119>should</rfc2119> recognize
        the default ports for <code>http</code> (80),
        <code>https</code> (443), <code>ftp</code> (21), and
        <code>ssh</code> (22). Exactly which ports are recognized is
        <termref def="implementation-defined">implementation-defined</termref>.
        </p>

        <p>If any of <code>$userinfo</code>, <code>$host</code>, or <code>$port</code>
        exist, the following authority is added to the URI
        under construction:
        <eg>concat((if (exists($userinfo)) then $userinfo || "@" else ""),
       $host,
       (if (exists($port)) then ":" || $port else ""))</eg></p>

        <p>If none of <code>userinfo</code>, <code>host</code>, or <code>port</code>
        is present, and <code>authority</code> is present, the value of the
        <code>authority</code> key is added to the URI. (In this case, no attempt
        is made to determine if a password or standard port are present,
        the <code>authority</code> value is simply added to the string.)</p>

        <p>If the <code>path-segments</code> key exists in the map, then the
        path is constructed from the parts, with non-URI characters encoded:
        <code>string-join($parts?path-segments ! encode-for-uri(.), $options?path-separator)</code>,
        otherwise the value of the <code>path</code> key is used.
        If the <code>path</code> value is the empty sequence,
        the empty string is used for the path. The path is added to the URI.</p>

        <p>If the <code>query-parameters</code> key exists in the map, its value
        must be a map. A sequence of strings is constructed from the values in the map.
        For each <emph>key</emph> and each <emph>value</emph> associated with
        that key in turn:</p>

        <ulist>
           <item><p>If the <emph>key</emph> is the empty string, the string constructed
           is the <emph>value</emph> encoded with <code>encode-for-uri</code>.</p></item>
           <item><p>Otherwise, the string constructed is the value of the
           <emph>key</emph>, encoded, followed by an equal sign (<code>=</code>),
           followed by the <emph>value</emph>, encoded.</p></item>
        </ulist>

        <p>The query is constructed by joining the resulting
        strings into a single string, separated by <code>$options?query-separator</code>).
        If the <code>query-parameters</code> key does not exist in the map, but
        the <code>query</code> key does, then the query is the value of the
        <code>query</code> key. If there is a query, it is added to the URI with
        a preceding question mark (<code>?</code>).</p>

        <p>If the <code>fragment</code> key exists in the map, then
        the value of that key is added to the URI with
        a preceding hash mark (<code>#</code>).</p>

        <p>The resulting URI is returned.</p>
      </fos:rules>
      
      <fos:examples role="wide">
         <fos:example>
            <fos:test>
               <fos:expression><eg>build-uri(map {
    "scheme": "https",
    "host": "qt4cg.org",
    "port": (),
    "path": "/specifications/index.html"
  })</eg></fos:expression>
               <fos:result>"https://qt4cg.org/specifications/index.html"</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed on 17 Oct 2022 to resolve
         <loc href="https://github.com/qt4cg/qtspecs/issues/72">issue #72</loc>.
         Accepted in principle on 15 Nov 2022, with some details still
         to be resolved. Updated in response to 
         <loc href="https://github.com/qt4cg/qtspecs/issues/389">issue #389</loc> and
         <loc href="https://github.com/qt4cg/qtspecs/issues/390">issue #390</loc>.
         Further updated on 13 September 2023 in response to comments from review
         in meeting 042.</fos:version>
      </fos:history>
   </fos:function>
   
   
   <fos:function name="partition" prefix="fn">
      <fos:signatures>
         <fos:proto name="partition" return-type="array(item())*">
            <fos:arg name="input" type="item()*"/>
            <fos:arg name="break-when" type="function(item()*, item()) as xs:boolean"/>
         </fos:proto>
      </fos:signatures>
      <fos:properties>
         <fos:property>deterministic</fos:property>
         <fos:property>context-independent</fos:property>
         <fos:property>focus-independent</fos:property>
      </fos:properties>
      <fos:summary>
         <p>Partitions a sequence of items into a sequence of non-empty arrays containing the same items,
            starting a new partition when a supplied condition is true.</p>
      </fos:summary>
      <fos:rules>
         <p>Informally, the function starts by creating a partition containing the first item in the input sequence,
            if any. For each remaining item <var>J</var> in the input sequence,
            other than the first, it calls the supplied <code>$break-when</code> function with two 
            arguments: the contents of the current partition, and the item <var>J</var>.</p>
         <p>Each partition is a sequence of items; the function result wraps each partition as an array, and returns
            the sequence of arrays.</p>
         <p>If the <code>$break-when</code> function returns <code>true</code>, the current partition is wrapped as an array and added to the result,
            and a new current partition is created, initially containing the item <var>J</var> only. If the <code>$break-when</code> 
            function returns <code>false</code>, the item <var>J</var> is added to the current partition.</p>
         <p>More formally, the function returns the result of the expression:</p>
         <eg>fold-left($input, (), function($partitions, $next) {
              if (empty($partitions) or $break-when(foot($partitions)?*, $next))
              then ($partitions, [$next])
              else (trunk($partitions), array{foot($partitions)?*, $next}) 
            })   
         </eg>  
      </fos:rules>
      <fos:notes>
         <p>The function enables a variety of positional grouping problems to be solved. For example:</p>
         <ulist>
            <item><p><code>partition($input, function($a, $b) { count($a) eq 3 }</code>
               partitions a sequence into fixed size groups of length 3.</p></item>
            <item><p><code>partition($input, function($a, $b) { boolean($b/self::h1) }</code>
               starts a new group whenever an <code>h1</code> element is encountered.</p></item>
            <item><p><code>partition($input, function($a, $b) { $b lt foot($a) }</code>
               starts a new group whenever an item is encountered whose value is less than
               the value of the previous item.</p></item>
         </ulist>
         <p>The callback function is not called to process the first item in the input sequence, because this will
            always start a new partition. The first argument to the callback function (the current partition) is always
            a non-empty sequence.</p>
      </fos:notes>
      <fos:examples>
         <fos:example>
            <fos:test>
               <fos:expression><eg>partition(
  ("Anita", "Anne", "Barbara", "Catherine", "Christine"), 
  function($partition, $next) {
    substring(head($partition),1,1) ne substring($next,1,1)
  }
)</eg></fos:expression>
               <fos:result>(["Anita", "Anne"], ["Barbara"], ["Catherine", "Christine"])</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>partition(
  (1, 2, 3, 4, 5, 6, 7),
  function($partition, $next) {
    count($partition) eq 2
  }
)</eg></fos:expression>
               <fos:result>([1, 2], [3, 4], [5, 6], [7])</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>partition(
  (1, 4, 6, 3, 1, 1),
  function($partition, $next) {
    sum($partition) ge 5
  }
)</eg></fos:expression>
               <fos:result>([1, 4], [6], [3, 1, 1])</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>partition(
  tokenize("In the beginning was the word"), 
  function($partition, $next) {
    sum(($partition, $next) ! string-length()) gt 10
  }
)</eg></fos:expression>
               <fos:result>(["In", "the"], ["beginning"], ["was", "the", "word"])</fos:result>
            </fos:test>
            <fos:test>
               <fos:expression><eg>partition(
  (1, 2, 3, 6, 7, 9, 10),
  function($partition, $next) {
    $next != foot($partition) + 1
  }
)</eg></fos:expression>
               <fos:result>([1, 2, 3], [6, 7], [9, 10])</fos:result>
            </fos:test>
         </fos:example>
      </fos:examples>
      <fos:history>
         <fos:version version="4.0">Proposed for 4.0</fos:version>
      </fos:history>
   </fos:function>
   
</fos:functions>