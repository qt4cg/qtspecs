<?xml version="1.0" encoding='utf-8'?>
<!-- Changes for maps and JSON labeled at="MAP" and commented out -->
<!-- Current changes labeled at="A": first 4.0 Working Draft -->

<!DOCTYPE spec SYSTEM "../../../schema/xsl-query.dtd" [ 

<!-- Things to update in these ENTITY definitions before publishing this document:
* Relationships between doc.stage, w3c-doctype, and doc.w3c-doctype-full
* doc.stage  w3c-doctype  doc.w3c-doctype-full
* FPWD       wd           First Public Working Draft
  WD         wd           Working Draft
  WD         wd           Last Call Working Draft
  CR         cr           Candidate Recommendation
  PR         pr           Proposed Recommendation
  PER        per          Proposed Edited Recommendation
  REC        rec          Recommendation
  WGNOTE     note         Working Group Note
* date.day, date.DD, date.month, date.monthnum, and date.year must represent the date of publication of the document
* doc.w3c-prevdesignation must properly represent the stage and shortname of the immediately preceding publication of the document
* Various status section generation ENTITY definitions below must be properly updated
-->

<!ENTITY doc.version "4.0">
<!ENTITY doc.major-version "4">
<!ENTITY doc.version-code "40">
<!ENTITY doc.stage "REC">
<!ENTITY doc.w3c-doctype "rec">
<!ENTITY doc.w3c-doctype-full "Editor's Draft">

<!-- N.B. The date 2000-01-01 is magic, it means "today". -->
<!ENTITY date.day "01">
<!ENTITY date.DD "01">
<!ENTITY date.month "January"> 
<!ENTITY date.monthnum "01">
<!ENTITY date.year "2000">
<!ENTITY doc.date "&date.year;&date.monthnum;&date.DD;">

<!ENTITY w3c.tr "https://www.w3.org/TR">
<!ENTITY doc.generic-shortname "xpath-functions">
<!ENTITY doc.shortname "&doc.generic-shortname;-&doc.version-code;">
<!ENTITY doc.w3c-designation "&doc.stage;-&doc.shortname;">
<!ENTITY doc.w3c-prev-designation "REC-&doc.shortname;">

<!ENTITY doc.publoc "https://qt4cg.org/specifications/&doc.shortname;/">
<!ENTITY doc.publoc "&w3c.tr;/&date.year;/&doc.w3c-designation;-&doc.date;/">

<!ENTITY doc.latestloc "&doc.publoc;">
<!ENTITY doc.latestloc "&w3c.tr;/&doc.shortname;/">

<!ENTITY doc.latestloc-major "&w3c.tr;/&doc.generic-shortname;-&doc.major-version;/">
<!ENTITY doc.latestloc-tech "&w3c.tr;/&doc.generic-shortname;/">
<!ENTITY doc.nsname "&doc.shortname;">
<!ENTITY doc.generic-language "XPath and XQuery Functions and Operators">
<!ENTITY language-tech "&doc.generic-language;">
<!ENTITY language "&doc.generic-language; &doc.version;">
<!ENTITY language-major "&doc.generic-language; &doc.major-version;">
<!-- ************************ THIS MUST BE EITHER 'WG Review Draft' OR '' **************** -->
<!ENTITY version "">
<!-- ************************************************************************************* -->

<!ENTITY xdt-schema-app SYSTEM "../../xpath-datamodel-31/src/xdt-schema-app.xml">
<!ENTITY codepoint.collation "http://www.w3.org/2005/xpath-functions/collation/codepoint">

<!ENTITY currency "&#x00A4;">
<!ENTITY divide "&#x00F7;">
<!ENTITY times "&#x00D7;">
<!ENTITY ne "&#x2260;">
<!ENTITY eacute "&#x00E9;">
<!ENTITY ocircumflex "&#x00F4;">
<!ENTITY Aumlaut "&#x00C4;">
<!ENTITY aumlaut "&#x00E4;">
<!ENTITY uumlaut "&#x00FC;">
<!ENTITY eszet "&#x00DF;">

<!ENTITY pi "&#x3C0;">
<!ENTITY theta "&#x3B8;">

<!ENTITY t1 "&#x0905;">
<!ENTITY t2 "&#x0936;">
<!ENTITY t3 "&#x094A;">
<!ENTITY t4 "&#x0915;">

<!ENTITY e1 "&#x00E8;">
<!ENTITY e2 "&#x00E9;">

<!ENTITY le "&#x2264;">
<!ENTITY ge "&#x2265;">

<!ENTITY egrave "&#x00E8;">
<!ENTITY Egrave "&#x00C8;">

<!ENTITY % status-entities SYSTEM "../../../etc/status-entities.dtd">
%status-entities;

<!ENTITY doc.WD-pubdate "24 April 2014">
<!ENTITY doc.LC-pubdate "7 October 2014">
<!ENTITY doc.LC-comments-due "7 November 2014">
<!ENTITY doc.CR-pubdate "13 December 2016">
<!ENTITY doc.CR-comments-due "10 January 2017">
<!ENTITY doc.PR-expected "10 January 2017">
<!ENTITY doc.PR-pubdate "17 January 2017">
<!ENTITY doc.PR-comments-due "28 February 2017">
<!ENTITY doc.REC-pubdate "21 March 2017">

<!ENTITY doc.pubdate "&doc.REC-pubdate;">
<!ENTITY doc.comments-due "&doc.PR-comments-due;">


<!ENTITY status-section-id "status">
<!ENTITY spec-devby    "&devby.joint1;">
<!ENTITY changelog-id  "changelog">
<!ENTITY changes-para  "&post.PR.changes;">
<!ENTITY implementation-report '&no-implementation-report-exists;'>
<!ENTITY implementation-report-location "https://dev.w3.org/2011/QT3-test-suite/ReportingResults31/">
<!ENTITY implementation-report-availability "&report-public;">
<!ENTITY test-suite-location "https://dev.w3.org/2011/QT3-test-suite/">
<!ENTITY Bugzilla-key "FO40">
<!ENTITY patent-policy-paragraph "&ppp-two;">
<!ENTITY documents-and-relationships "&set-of-documents-30-preREC;">
<!ENTITY advancement.statement "&advance.2WGs;">
<!ENTITY document-stage "&doc-stage-REC;">
<!ENTITY doc-stability "&doc-stability-REC;">

<!ENTITY PR-entrance-criteria '<p>This document will be
considered ready for transition to Proposed Recommendation
at the same time that the XQuery 3.1 specification is ready
for transition to Proposed Recommendation. </p>'>
<!ENTITY features-at-risk-para "&no-features-at-risk;">
<!ENTITY features-at-risk ''>

<!ENTITY customized-paragraph '<p>This &doc.w3c-doctype-full; specifies XSLT and XQuery Functions and Operators (F&amp;O)
                              version 4.0, a fully compatible extension of <loc href="https://www.w3.org/TR/xpath-functions-31/">F&amp;O version 3.1</loc>.
                              This publication differs from its version 3.1 primarily by the addition of a number of new functions. There are numerous
                              smaller differences as well, all documented in the change log. </p>'>

<!ENTITY status-section SYSTEM "../../../etc/status-general.xml">
]>


<!--
<head><?xml-stylesheet type="text/xsl" href="E:\XMLdocs\XML Query Language (XQuery)\Functions and Operators\Current Functions and Operators Build Files\xquery-operators.xsl"?></head> -->
<spec id="spec-top" w3c-doctype="&doc.w3c-doctype;" status="ext-review">
    <header>
        <title>&language;</title>
        <version>&version;</version>
        <w3c-designation>&doc.w3c-designation;</w3c-designation>
        <w3c-doctype>W3C &doc.w3c-doctype-full;</w3c-doctype>
        <pubdate>
            <day>&date.day;</day>
            <month>&date.month;</month>
            <year>&date.year;</year>
        </pubdate>
        <publoc>
            <loc href="&doc.publoc;">&doc.publoc;</loc>
        </publoc>
<!-- These altlocs URIs are computed from the concatenation of doc.public, doc.shortname, and either '.xml' or
     '-diff-from-yyyymmdd.html', where 'yyyymmdd' is the earlier version of the spec from which a diff has been produced -->
  <altlocs>
    <loc href="&doc.shortname;.xml">Specification in XML format using HTML5 vocabulary</loc>
    <loc href="function-catalog.xml">XML function catalog</loc>
    <loc href="Overview-diff.html">HTML with change markings relative to version 3.0</loc>
  </altlocs>

<!-- The latestloc URI is computed from doc.latestloc -->
        <latestloc doc="&language;">
            <loc href="&doc.latestloc;">&doc.latestloc;</loc>
        </latestloc>

<!-- These prevlocs URIs are always hard-coded and are never computed from entities -->
<!--
        <prevlocs doc="&language;">
           <loc href="https://www.w3.org/TR/xpath-functions-31/"/>
        </prevlocs>
  <latestloc-major doc="&language-major;">
    <loc href="&doc.latestloc-major;">&doc.latestloc-major;</loc>
  </latestloc-major>
  <latestloc-tech doc="&language-tech;">
    <loc href="&doc.latestloc-tech;">&doc.latestloc-tech;</loc>
  </latestloc-tech>
-->
  <prevrec doc="&language-tech;">
    <loc href="https://www.w3.org/TR/2017/REC-xpath-functions-31-20170321/">https://www.w3.org/TR/2017/REC-xpath-functions-31-20170321/</loc>
  </prevrec>
        <authlist>
          <author role="4.0">
            <name>Michael Kay</name>
            <affiliation>Saxonica</affiliation>
            <email href="http://www.saxonica.com/">http://www.saxonica.com/</email>
          </author>
        </authlist>

  <errataloc href="https://www.w3.org/XML/2017/qt-errata/xpath-functions-31-errata.html"/>

        <translationloc
          href="https://www.w3.org/2003/03/Translations/byTechnology?technology=xpath-functions-40"/> 

        <abstract>
           <p>This document defines constructor functions, operators, and functions on the datatypes defined in
                    <bibref ref="xmlschema-2"/> and the datatypes defined in <bibref ref="xpath-datamodel-31"/>.  It also defines
                functions and operators on nodes and node sequences as defined in the <bibref
                ref="xpath-datamodel-31"/>.  These functions and operators are defined for use in <bibref ref="xpath-40"/> and <bibref ref="xquery-40"/> and
                    <bibref ref="xslt-40"/> and other related XML standards.  The signatures and summaries of functions defined in this document are available at:
<loc href="http://www.w3.org/2005/xpath-functions/">http://www.w3.org/2005/xpath-functions/</loc>.</p>
           

           <p>A summary of changes since version 3.1 is provided at <specref ref="changelog"/>.</p>
</abstract>

<!--&status-section;-->
       <status>
          <p>This version of the specification is work in progress. It is produced by the QT4 Working Group, officially
             the W3C XSLT 4.0 Extensions Community Group. Individual functions specified in the document may be at
             different stages of review, reflected in their <term>History</term> notes. Comments are invited.</p>
       </status>

        <langusage>
            <language id="EN">English</language>
        </langusage>
        <revisiondesc>
           <p></p>
        </revisiondesc>
    </header>
   <body>
      <div1 id="intro">
         <head>Introduction</head>
          
                
         <p>The purpose of this document is to propose functions and operators to be included in
                XPath 4.0, XQuery 4.0, and XSLT 4.0. Note that this proposal has no official standing
                at the time of publication.
                The exact syntax used to call these
                functions and operators is specified in <bibref ref="xpath-40"/>, <bibref ref="xquery-40"/> and 
            <bibref ref="xslt-40"/>. </p>
         <p>This document defines three classes of functions:</p>
         <ulist>
            <item><p>General purpose functions, available for direct use in user-written queries, stylesheets, and XPath expressions,
               whose arguments and results are values defined by the <bibref ref="xpath-datamodel-31"/>.</p></item>
            <item><p>Constructor functions, used for creating instances of a datatype from values of (in general) a different
            datatype. These functions are also available for general use; they are named after the datatype that they return,
            and they always take a single argument.</p></item>
            <item><p>Functions that specify the semantics of operators defined in <bibref ref="xpath-40"/> and <bibref ref="xquery-40"/>.
            These exist for specification purposes only, and are not intended for direct calling from user-written code.</p></item>
         </ulist>
         
         <p>
                <bibref ref="xmlschema-2"/> defines a number of primitive and derived datatypes,
                collectively known as built-in datatypes. This document defines functions and
                operations on these datatypes as well as the other types 
                (for example, nodes and sequences of nodes) defined in <xspecref spec="DM31" ref="types"/> of 
            the <bibref ref="xpath-datamodel-31"/>.
                These functions and operations are available for use in <bibref ref="xpath-40"/>,
                    <bibref ref="xquery-40"/> and any other host language that chooses to reference them.
                In particular, they may be referenced in future versions of XSLT and related XML standards. </p>
         
         <p><bibref ref="xmlschema11-2"/> adds to the datatypes defined
            in <bibref ref="xmlschema-2"/>. It introduces a new derived type <code>xs:dateTimeStamp</code>, and it
         incorporates as built-in types the two types <code>xs:yearMonthDuration</code> and <code>xs:dayTimeDuration</code>
         which were previously XDM additions to the type system. In addition, XSD 1.1 clarifies and updates many
         aspects of the definitions of the existing datatypes: for example, it extends the value space of
         <code>xs:double</code> to allow both positive and negative zero, and extends the lexical space to allow <code>+INF</code>;
            it modifies the value space of <code>xs:Name</code>
         to permit additional Unicode characters; it allows year zero and disallows leap seconds in <code>xs:dateTime</code>
         values; and it allows any character string to appear as the value of an <code>xs:anyURI</code> item.
         Implementations of this specification <rfc2119>may</rfc2119> support either XSD 1.0 or XSD 1.1 or both.</p>
         
         <p>References to specific sections of some of the above documents are indicated by
                cross-document links in this document. Each such link consists of a pointer to a
                specific section followed a superscript specifying the linked document. The
                superscripts have the following meanings: 'XQ' <bibref ref="xquery-40"/>, 'XT' <bibref ref="xslt-40"/>,
            'XP' <bibref ref="xpath-40"/>, and 'DM' <bibref ref="xpath-datamodel-31"/>.</p>
         
         
         <div2 id="conformance">
            <head>Conformance</head>
            <p>
               This recommendation contains a set of function specifications. 
               It defines conformance at the level of individual functions. An implementation of a function conforms to a function specification 
               in this recommendation if all the following conditions are satisfied:</p>
            
            <ulist>
               <item><p>For all combinations of valid inputs to the function (both explicit arguments and implicit context dependencies), 
                  the result of the function meets the mandatory requirements of this specification.
               </p></item>
               <item><p>For all invalid inputs to the function, the implementation signals (in some way appropriate to the calling environment) that a dynamic error has occurred.
               </p></item>
               <item><p>For a sequence of calls within the same <termref def="execution-scope">execution scope</termref>, the requirements of this recommendation 
                  regarding the <termref def="dt-deterministic">determinism</termref> of results are satisfied (see <specref ref="properties-of-functions"/>).
               </p></item>
            </ulist>

               <p>Other recommendations ("host languages") that reference this document may dictate:</p>
            
            <ulist>
               <item><p>Subsets or supersets of this set of functions to be available in particular environments;</p></item>
               <item><p>Mechanisms for invoking functions, supplying arguments, initializing the static and dynamic context, receiving results, and handling errors;
               </p></item>
               <item><p>A concrete realization of concepts such as <termref def="execution-scope">execution scope</termref>;</p></item>
               <item><p>Which versions of other specifications referenced herein (for example, XML, XSD, or Unicode) are to be used.</p></item>
            </ulist>
               
            <p>Any behavior that is discretionary (implementation-defined or implementation-dependent) in this specification may be constrained by a host language.</p>
               
            <note><p>Adding such constraints in a host language, however, is discouraged because it makes it difficult to re-use implementations of 
               the function library across host languages.</p></note>
               
               
 
            <p>This specification allows flexibility in the choice of versions of specifications on which it depends:</p>
            <ulist>
               <item>
                  <p>It is <termref def="implementation-defined"/> which version of Unicode is supported, 
                     but it is recommended that the most recent version of Unicode be used.  </p>
               </item>
               <item>
                  <p>It is <termref def="implementation-defined"/> whether the type system is based
                     on XML Schema 1.0 or XML Schema 1.1.  </p>
               </item>
               <item>
                  <p>It is <termref def="implementation-defined"/> whether definitions that rely on
                     XML (for example, the set of valid XML characters) should use the definitions in XML 1.0 or XML 1.1.</p>
               </item>
            </ulist>
            <note>
               <p>The XML Schema 1.1 recommendation
                  introduces one new concrete datatype: <code>xs:dateTimeStamp</code>; it also incorporates
                  the types <code>xs:dayTimeDuration</code>, <code>xs:yearMonthDuration</code>,
                  and <code>xs:anyAtomicType</code> which were previously defined in earlier versions of <bibref ref="xpath-datamodel-31"/>.
                  Furthermore, XSD 1.1
                  includes the option of supporting revised definitions of types such as <code>xs:NCName</code>
                  based on the rules in XML 1.1 rather than 1.0.</p>
            </note>
            <p>In this document, text labeled as an example or as a Note is
            provided for explanatory purposes and is not normative.</p>
         </div2>
         <div2 id="namespace-prefixes">
            <head>Namespaces and prefixes</head>
            <p>The functions and operators defined in this document are contained in one of
                    several namespaces (see <bibref ref="xml-names"/>) and referenced using an
                    <code>xs:QName</code>.</p>
            <p>This document uses conventional prefixes to refer to these namespaces. User-written
               applications can choose a different prefix to refer to the namespace, so long as it is
               bound to the correct URI. The host language may also define a default namespace for
               function calls, in which case function names in that namespace need not be prefixed
               at all. In many cases the default namespace will be 
               <code>http://www.w3.org/2005/xpath-functions</code>, allowing a call on the <code>fn:name</code>
               function (for example) to be written as <code>name()</code> rather than <code>fn:name()</code>; 
               in this document, however, all example function calls are explicitly prefixed.</p>
            
 
            <p>The URIs of the namespaces and the conventional prefixes associated with them are:</p>
            <ulist>
               <item>
                  <p><code>http://www.w3.org/2001/XMLSchema</code> for constructors &#x2014;
                            associated with <code>xs</code>.
                  </p>
                  <p>The section <specref ref="constructor-functions"/> defines 
                     constructor functions for the built-in datatypes defined
                     in <bibref ref="xmlschema-2"/> and in <xspecref spec="DM31" ref="types"/>
                     of <bibref ref="xpath-datamodel-31"/>. These datatypes and the corresponding constructor functions  
                     are in the XML Schema namespace, <code>http://www.w3.org/2001/XMLSchema</code>,
                     and are named in this document using the <code>xs</code> prefix. </p>
               </item>
               <item>
                  <p><code>http://www.w3.org/2005/xpath-functions</code>
                     for functions &#x2014; associated with <code>fn</code>. </p>
                  <p>The namespace
                     prefix used in this document for most functions that are available to users is
                     <code>fn</code>.</p>
               </item>
               <item>
                  <p><code>http://www.w3.org/2005/xpath-functions/math</code>
                     for functions &#x2014; associated with <code>math</code>. </p>
                  <p>This namespace is used for some mathematical functions. The namespace
                     prefix used in this document for these functions is <code>math</code>.
                     These functions are available to users in exactly the same way as those in the
                     <code>fn</code> namespace.</p>
               </item>
               <item>
                  <p><code>http://www.w3.org/2005/xpath-functions/map</code>
                     for functions &#x2014; associated with <code>map</code>. </p>
                  <p>This namespace is used for some functions that manipulate maps (see
                     <specref ref="map-functions"/>). The namespace
                     prefix used in this document for these functions is <code>map</code>.
                     These functions are available to users in exactly the same way as those in the
                     <code>fn</code> namespace.</p>
               </item>
               <item>
                  <p><code>http://www.w3.org/2005/xpath-functions/array</code>
                     for functions &#x2014; associated with <code>array</code>. </p>
                  <p>This namespace is used for some functions that manipulate maps (see
                     <specref ref="array-functions"/>). The namespace
                     prefix used in this document for these functions is <code>array</code>.
                     These functions are available to users in exactly the same way as those in the
                     <code>fn</code> namespace.</p>
               </item>                 
               <item>
                  <p><code>http://www.w3.org/2005/xqt-errors</code> &#x2014; associated with
                            <code>err</code>. </p>
                  <p>There are no functions in this namespace; it is used for error codes.</p>
                  <p>This document uses the prefix <code>err</code> to represent the namespace URI 
                     <code>http://www.w3.org/2005/xqt-errors</code>, which is the namespace for all XPath 
                     and XQuery error codes and messages. This namespace prefix is not predeclared and 
                     its use in this document is not normative.</p>
                  
               </item>
               <item>
                  <p><code>http://www.w3.org/2010/xslt-xquery-serialization</code> &#x2014; associated with
                     <code>output</code>. </p>
                  <p>There are no functions in this namespace: it is
                     used for serialization parameters, as described in <bibref ref="xslt-xquery-serialization-31"/></p>
               </item>
               <item>
                  <p>
                     Functions defined with the <code>op</code> prefix are described here to
                     underpin the definitions of the operators in <bibref ref="xpath-40"/>, <bibref ref="xquery-40"/> 
                     and <bibref ref="xslt-40"/>. These functions are not available
                     directly to users, and there is no requirement that implementations should
                     actually provide these functions. For this reason, no namespace is associated
                     with the <code>op</code> prefix. For example, multiplication is generally
                     associated with the <code>*</code> operator, but it is described as a function
                     in this document:</p>
                  <example role="signature">
                     <proto role="example" name="numeric-multiply" return-type="xs:numeric" isOp="yes" prefix="op">
                        <arg name="arg1" type="xs:numeric"/>
                        <arg name="arg2" type="xs:numeric"/>
                     </proto>
                  </example>  
                  
               </item>
            </ulist>
            
            <note>
               <p>The above namespace URIs are not expected to change from one version of this 
                  document to another. The contents of these namespaces may be extended to allow 
                  additional functions (and errors, and serialization parameters) to be defined.</p>
            </note>
            
                   
         </div2>
         <div2 id="func-overloading">
            <head>Function overloading</head>
            <p>A function is uniquely defined by its name and arity (number of arguments); it is therefore
            not possible to have two different functions that have the same name and arity, but different
            types in their signature. That is, function overloading in this sense of the term is not permitted.
            Consequently, functions such as <code>fn:string</code> which accept arguments of many different
            types have a signature that defines a very general argument type, in this case <code>item()?</code>
            which accepts any single item; supplying an inappropriate item (such as a function item) causes
            a dynamic error.</p>
			
            <p>Some functions on numeric types include the type <code>xs:numeric</code> in their signature
               as an argument or result type. In this version of the specification, <code>xs:numeric</code>
               has been redefined as a built-in union type representing the union of 
               <code>xs:decimal</code>, <code>xs:float</code>, <code>xs:double</code> (and thus automatically
               accepting types derived from these, including <code>xs:integer</code>).</p>
            
            <p>Operators such as "+" may be overloaded: they map to different underlying functions depending
            on the dynamic types of the supplied operands.</p>
            
            <p>It is possible for two functions to have the same name provided they have different arity (number of arguments).
               For the functions defined in this specification, where two functions have the same name and different arity,
               they also have closely related behavior, so they are defined in the same section of this document.</p>
            
              
         </div2>
         <div2 id="func-signatures">
            <head>Function signatures and descriptions</head>
            <p>Each function (or group of functions having the same name) is defined in this specification using
            a standard proforma.</p>
            <p>The function name is a <code>QName</code> as defined in <bibref ref="xmlschema-2"/>
               and must adhere to its syntactic conventions. Following the precedent set by <bibref ref="xpath"/>,
               function names are generally composed of English words separated by hyphens ("-"). Abbreviations are
               used only where there is a strong precedent in other programming languages (as with <code>math:sin</code> and 
               <code>math:cos</code> for sine and cosine). If a
               function name contains a <bibref ref="xmlschema-2"/> datatype name, it may have
               intercapitalized spelling and is used in the function name as such. An example is <code>fn:timezone-from-dateTime</code>.</p>
            <p>The first section in the proforma is a short summary of what the function does. This is intended
            to be informative rather than normative.</p>
            <p>Each function is then defined by specifying its signature, which defines the
               types of the parameters and of the result value.</p>
            <p>Each function's signature is presented in a form like this:</p>
            <example role="signature">
               <proto role="example" name="function-name" return-type="return-type">
                  <arg name="parameter-name" type="parameter-type"/>
                  <arg name="..." type=""/>
               </proto>
            </example>
            <p>In this notation, <term>function-name</term>, in bold-face, is the name of the
                    function whose signature is being specified. If the function takes no
                    parameters, then the name is followed by an empty parameter list:
                    "<code>()</code>"; otherwise, the name is followed by a parenthesized list of
                    parameter declarations, in which each declaration specifies the static type of the
                    parameter, in italics, and a descriptive, but non-normative, name. If there are
                    two or more parameter declarations, they are separated by a comma. The <emph>
                        <code>return-type</code></emph>, also in italics, specifies the static type of the value returned by the
                    function. The dynamic type of the value returned by the function is the same as its static
                    type or derived from the static type. All parameter types and return types are
                    specified using the SequenceType notation defined in <xspecref spec="XP31" ref="id-sequencetype-syntax"/>.</p>
            <p>One function, <code>fn:concat</code>, has a variable number of arguments (two or more).
            More strictly, there is an infinite set of functions having the name <code>fn:concat</code>, with arity
            ranging from 2 to infinity. For this special case, a single function signature is given, with an ellipsis
            indicating an indefinite number of arguments.</p>
            
            
            <p>The next section in the proforma defines the semantics of the function as a set of rules. 
               The order in which the rules appear is significant; they are to be applied in the order in which
               they are written. Error conditions, however, are generally listed in a separate section that follows
            the main rules, and take precedence over non-error rules except where otherwise stated. The principles outlined
            in <xspecref spec="XP31" ref="id-errors-and-opt"/> apply by default: to paraphrase, if the result of the function
            can be determined without evaluating all its arguments, then it is not necessary to evaluate the remaining arguments
            merely in order to determine whether any error conditions apply.</p>
            <p>Where the proforma includes sections headed <emph>Notes</emph> or <emph>Examples</emph>, these are non-normative.</p>
            
            <p>Rules for passing parameters to operators are described in the relevant sections
                    of <bibref ref="xquery-40"/> and <bibref ref="xpath-40"/>. For example, the rules for
                    passing parameters to arithmetic operators are described in <xspecref spec="XP31" ref="id-arithmetic"/>. Specifically, rules for parameters of
                    type <code>xs:untypedAtomic</code> and the empty sequence are specified in this section.</p>
            <p>As is customary, the parameter type name indicates that the function or operator
                    accepts arguments of that type, or types derived from it, in that position. This
                    is called <emph>subtype substitution</emph> (See <xspecref spec="XP31" ref="id-sequencetype-matching"/>). In addition, numeric type instances and
                    instances of type <code>xs:anyURI</code> can be promoted to produce an argument
                    of the required type. (See <xspecref spec="XP31" ref="promotion"/>).</p> 
                  <olist>
                  <item>
                     <p><emph>Subtype Substitution</emph>: A derived type may substitute for
                                its base type. In particular, <code>xs:integer</code> may be used
                                where <code>xs:decimal</code> is expected.</p>
                  </item>
                  <item>
                     <p><emph>Numeric Type Promotion</emph>: <code>xs:decimal</code> may be
                                promoted to <code>xs:float</code> or <code>xs:double</code>. 
								Promotion to <code>xs:double</code> should be done directly, not via
								 <code>xs:float</code>, to avoid loss of precision.</p>
                  </item>
                  <item>
                     <p><emph>anyURI Type Promotion</emph>: A value of
                                type <code>xs:anyURI</code> can be promoted to the
                                type <code>xs:string</code>. </p>
                  </item>
               </olist>
                
            <p>Some functions accept a single value or the empty sequence as an argument and
                    some may return a single value or the empty sequence. This is indicated in the
                    function signature by following the parameter or return type name with a
                    question mark: "<code>?</code>", indicating that either a single value or the
                    empty sequence must appear. See below.</p>
            <example role="signature">
               <proto role="example" name="function-name" return-type="return-type"
                      returnEmptyOk="yes">
                  <arg name="parameter-name" type="parameter-type" emptyOk="yes"/>
               </proto>
            </example>
            <p>Note that this function signature is different from a signature in which the
                    parameter is omitted. See, for example, the two signatures
                    for <code>fn:string</code>. In the first signature, the parameter is omitted
                    and the argument defaults to the context item, referred to as <code>.</code>.
                    In the second signature, the argument must be present but may be the empty
                    sequence, written as <code>()</code>.
                </p>
            <p>Some functions accept a sequence of zero or more values as an argument. This is
                    indicated by following the name of the type of the items in the sequence with
                    <code>*</code>. The sequence may contain zero or more items of the named type.
                    For example, the function below accepts a sequence of <code>xs:double</code> and
                    returns a <code>xs:double</code> or the empty sequence.</p>
            <example role="signature">
               <proto role="example" name="median" return-type="xs:double" returnEmptyOk="yes">
                  <arg name="arg" type="xs:double*" emptyOk="no"/>
               </proto>
            </example>
            
            <p diff="add" at="A">In XPath 4.0, the arguments in a function call can be supplied by
            keyword as an alternative to supplying them positionally. For example the call
            <code>resolve-uri(@href, static-base-uri())</code> can now be written 
               <code>resolve-uri(base: static-base-uri(), relative: @href)</code>. The order in which
            arguments are supplied can therefore differ from the order in which they are declared.
            The specification, however, continues to use phrases such as "the second argument" as a 
            convenient shorthand for "the value of the argument that is bound to the second parameter 
            declaration".</p>
         </div2>
         
         <div2 id="options">
            <head>Options</head>
            <p>As a matter of convention, a number of functions defined in this document take
            a parameter whose value is a map, defining options controlling the detail of how
            the function is evaluated. Maps are a new datatype introduced in XPath 3.1.</p>
            <p>For example, the function <code>fn:xml-to-json</code> has an options parameter
            allowing specification of whether the output is to be indented. A call might be written:</p>
            <eg><![CDATA[fn:xml-to-json($input, map{'indent':true()})]]></eg>
            <p><termdef id="option-parameter-conventions" term="option parameter conventions">Functions
            that take an options parameter adopt common conventions on how the
            options are used. These are referred to as the <term>option parameter conventions</term>. These
            rules apply only to functions that explicitly refer to them.</termdef></p>
            <p>Where a function adopts the <termref def="option-parameter-conventions"/>, the following rules
            apply:</p>
            <olist>
               <item><p>The value of the relevant argument must be a map. The entries in the map are
                  referred to as options: the key of the entry is called the option name, and the
                  associated value is the option value. Option names defined in this specification
               are always strings (single <code>xs:string</code> values). Option values may
               be of any type.</p></item>
               <item><p>The type of the options parameter in the function signature is always
               given as <code>map(*)</code>.</p></item>
               <item><p>Although option names are described above as strings, the actual key may be
                  any value that compares equal to the required string (using the <code>eq</code> operator
                  with Unicode codepoint collation; or equivalently, the <code>op:same-key</code> relation). 
                  For example, instances of <code>xs:untypedAtomic</code>
                  or <code>xs:anyURI</code> are equally acceptable.</p>
                  <note><p>This means that the implementation of the function can check for the
               presence and value of particular options using the functions <code>map:contains</code>
               and/or <code>map:get</code>.</p></note></item>
               <item><p>It is not an error if the options map contains options with names other than those
               described in this specification. Implementations <rfc2119>may</rfc2119> attach an 
                  <termref def="implementation-defined">implementation-defined</termref> meaning to such entries,
                  and <rfc2119>may</rfc2119> define errors that arise if such entries are present with invalid values.
               Implementations <rfc2119>must</rfc2119> ignore such entries unless they have a specific 
                  <termref def="implementation-defined">implementation-defined</termref> meaning.
               Implementations that define additional options in this way <rfc2119>should</rfc2119>
               use values of type <code>xs:QName</code> as the option names, using an appropriate namespace.</p></item>
               <item><p>All entries in the options map are optional, and supplying an empty map has the same
               effect as omitting the relevant argument in the function call, assuming this is permitted.</p></item>
               <item><p>For each named option, the function
               specification defines a required type for the option value. The value that is actually
               supplied in the map is converted to this required type using the 
                  <xtermref spec="XP31" ref="dt-function-conversion">function conversion rules</xtermref>.
                  This will result in an error (typically 
                     <xerrorref spec="XP" class="TY" code="0004" type="type"/> or
                     <xerrorref spec="FO" class="RG" code="0001" type="type"/>)
                  if conversion of the supplied value to the required type is not possible. 
                  A type error also occurs if this conversion
                  delivers a coerced function whose invocation fails with a type error.
                  A dynamic error occurs if the supplied value 
               after conversion is not one of the permitted values for the option in question: the error codes
               for this error are defined in the specification of each function.</p>
               <note><p>It is the responsibility of each function implementation to invoke this conversion; it
               does not happen automatically as a consequence of the function calling rules.</p></note></item>
               <item><p>In cases where an option is list-valued, by convention the value may be supplied
               either as a sequence or as an array. Accepting a sequence is convenient if the
               value is generated programmatically using an XPath expression; while accepting an array 
               allows the options to be held in an external file in JSON format, to be read using
               a call on the <code>fn:json-doc</code> function.</p></item>
               <item><p>In cases where the value of an option is itself a map, the specification
               of the particular function must indicate whether or not these rules apply recursively 
               to the contents of that map.</p></item>
            </olist>
         </div2>

<!-- Jim: New text to correspond to new graphics, analogous to new material in XDM 3.0, 2009-10-24 -->         
<div2 id="datatypes">
<head>Type System</head>

<p>The diagrams in this section show how nodes, functions,
primitive simple types,
and user defined types fit together into a type system.
This type system comprises two distinct subsystems that both include
the primitive atomic types. 
In the diagrams, connecting lines represent relationships between derived types
and the types from which they are derived;
the arrowheads point toward the type from which they are derived. 
The dashed line represents relationships not present in this diagram,
but that appear in one of the other diagrams. 
Dotted lines represent additional relationships that follow an evident pattern.
The information that appears in each diagram is recapitulated in tabular form.
</p>

<p>The <code>xs:IDREFS</code>, <code>xs:NMTOKENS</code>,
<code>xs:ENTITIES</code> types, and <code>xs:numeric</code> and both the
<code>user-defined list types</code> and
<code>user-defined union types</code>
are special types in that these types are lists or unions
rather than types derived by extension or restriction.</p>
   
   <div3 id="item-type-hierarchy">
      <head>Item Types</head>
   

<p>The first diagram and its corresponding table illustrate
the relationship of various item types.</p>
      
      <p>Item types are used to characterize the various types of item that can appear
      in a sequence (nodes, atomic values, and functions), and they are therefore used
      in declaring the types of variables or the argument types and result types of functions.</p>
      
      
      <p>Item types in the data model
form a directed graph, rather than a hierarchy or lattice: in the relationship defined
by the <code>derived-from(A, B)</code> function, some types are derived
   from more than one other type. Examples include functions (<code>function(xs:string) as xs:int</code>
   is substitutable for <code>function(xs:NCName) as xs:int</code> and also for 
   <code>function(xs:string) as xs:decimal</code>), and union types (<code>A</code>
 is substitutable for <code>union(A, B)</code> and also for <code>union(A, C)</code>.
   In XDM, item types include node types, function types, and built-in atomic types. 
The diagram, which shows only hierarchic relationships, is therefore a simplification of
the full model.</p>

<graphic source="item.svg" alt="Type hierarchy graphic, item hierarchy"/>
<graphic source="item-legend.svg" alt="Type hierarchy graphic legend"/>

<p>The image shows a portion of the type hierarchy, rooted at the abstract type
item. The types <code>xs:anyAtomicType</code>, and the abstract types for nodes
and functions are derived from item. Arrays and maps are further derived from
functions. Attribute, document, element, text, comment, processing-instruction,
and namespace nodes are derived from node. User-defined attribute, document,
and element types are also be derived from attribute, document, and element,
respectively.</p>
      
   </div3>
   <div3 id="schema-type-hierarchy">
      <head>Schema Type Hierarchy</head>
  

<p>The next diagram and table illustrate the schema type subsystem, in which
all types are derived from the distinguished type <code>xs:anyType</code>. </p>
      
      <p>Schema types include built-in types defined in the XML Schema specification, and user-defined
      types defined using mechanisms described in the XML Schema specification. Schema types define the
      permitted contents of nodes. The main categories are complex types, which define the permitted content
      of elements, and simple types, which can be used to constrain the values of both elements and attributes.</p>

<graphic source="anyType.svg" alt="Type hierarchy graphic, anyType hierarchy"/>
<graphic source="anyType-legend.svg" alt="Type hierarchy graphic legend"/>

<p>The image shows a portion of the type hierarchy, rooted at <code>xs:anyType</code>
which represents, conceptually, all of the XML Schema types. The <code>xs:anySimpleType</code>,
representing conceptually all of the simple types, and all of the conceptual complex types,
are derived from <code>xs:anyType</code>. The <code>xs:anyAtomicType</code>
representing conceptually all of the atomic types, and all of the conceptual list
and union types are derived from <code>xs:anySimpleType</code>. The types
<code>xs:IDREFS</code>, <code>xs:NMTOKENS</code>, <code>xs:ENTITIES</code>,
and user-defined list types are derived from list types. The types
<code>xs:numeric</code> and user-defined union types are derived from the union
types. The types <code>xs:untyped</code> and user-defined complex types are derived
from complex types.</p>

   </div3>
   <div3 id="atomic-type-hierarchy">
      <head>Atomic Type Hierarchy</head>
  

<p id="hier_anyAtomicType">The final diagram and table show all of the atomic types, including the primitive simple types and the
built-in types derived from the primitive simple types. 
This includes all the built-in datatypes defined in <bibref ref="xmlschema-2"/>.</p>
      
      <p>Atomic types are both item types and schema types, so the root type <code>xs:anyAtomicType</code> may be found
      in both the previous diagrams.</p>

<graphic source="anyAtomicType.svg" alt="Type hierarchy graphic, anyAtomicType hierarchy"/>
<graphic source="anyAtomicType-legend.svg" alt="Type hierarchy graphic legend"/>

<p>The image shows a portion of the type hierarchy, rooted at
<code>xs:anyAtomicType</code>. The types
<code>xs:untypedAtomic</code>, <code>xs:string</code>,
<code>xs:duration</code>, <code>xs:date</code>, <code>xs:time</code>,
<code>xs:dateTime</code>, <code>xs:double</code>,
<code>xs:float</code>, <code>xs:decimal</code>,
<code>xs:base64Binary</code>, <code>xs:hexBinary</code>,
<code>xs:boolean</code>, <code>xs:anyURI</code>,
<code>xs:QName</code>, <code>xs:Notation</code>,
<code>xs:gYear</code>, <code>xs:gMonth</code>, <code>xs:gDay</code>,
<code>xs:gYearMonth</code>, and <code>xs:gMonthDay</code> are derived from
<code>xs:anyAtomicType</code>.</p>
<p>Starting at <code>xs:string</code>, <code>xs:normalizedString</code> is derived and <code>xs:token</code> is derived from that. The types
<code>xs:language</code>, <code>xs:NMTOKEN</code>, and <code>xs:Name</code> are
derived from <code>xs:token</code>. The type <code>xs:NCName</code> is further
derived from <code>xs:Name</code>, and the types <code>xs:ID</code>, <code>xs:IDREF</code>,
and <code>xs:ENTITY</code> are derived from <code>xs:NCName</code>.</p>
<p>The types <code>xs:yearMonthDuration</code> and <code>xs:dayTimeDuration</code>
are derived from <code>xs:duration</code>.</p>
<p>The type <code>xs:integer</code> is derived from <code>xs:decimal</code>.
The types <code>xs:nonPositiveInteger</code> (and from that <code>xs:negativeInteger</code>),
<code>xs:long</code>, and <code>xs:nonNegativeInteger</code> are derived from
<code>xs:integer</code>. An <code>xs:long</code> is the head of a chain of derivations
from <code>xs:int</code> to <code>xs:short</code> to <code>xs:byte</code>.
Finally, a <code>positiveInteger</code> and the chain of derivations from
<code>xs:unsignedLong</code> to <code>xs:unsignedInt</code>
to <code>xs:unsighedShort</code> to <code>xs:unsignedByte</code> are derived
from <code>xs:nonNegativeInteger</code>.
</p>
   </div3>
         </div2>


         <div2 id="terminology">
            <head>Terminology</head>
            <p>The terminology used to describe the functions and operators on types defined in <bibref ref="xmlschema-2"/> is defined in the body of this specification. The terms defined
            in this section are used in building those definitions.</p>
            <note><p>Following in the tradition of <bibref ref="xmlschema-2"/>, the terms <term>type</term>
            and <term>datatype</term> are used interchangeably.</p></note>
            <div3 id="character-terminology"><!-- bug 10870 -->
               <head>Strings, characters, and codepoints</head>
               <p>This document uses the terms <code>string</code>, <code>character</code>, and <code>codepoint</code>
               with meanings that are normatively defined in <bibref ref="xpath-datamodel-31"/>, and which are paraphrased here
                  for ease of reference:</p>
               <p><termdef id="character" term="character">A <term>character</term> is an instance of the 
                  <xnt spec="XML" ref="NT-Char">Char</xnt> production of <bibref ref="xml"/>.</termdef></p>
               <note><p>This
               definition excludes Unicode characters in the surrogate blocks as well as xFFFE and xFFFF, while
               including characters with codepoints greater than xFFFF which some programming languages treat
               as two characters. The valid characters are defined by their codepoints, and include some
               whose codepoints have not been assigned by the Unicode consortium to any character.</p></note>
               <p><termdef id="string" term="string">A <term>string</term> is a sequence of zero or more 
                  <termref def="character">characters</termref>, or equivalently,
               a value in the value space of the <code>xs:string</code> datatype.</termdef></p>
               <p><termdef id="codepoint" term="codepoint">A <term>codepoint</term> is an integer
               assigned to a <termref def="character">character</termref> by the Unicode consortium, 
               or reserved for future assignment to a character.</termdef>
               </p>
               <note><p>The set of codepoints is thus wider than the set of characters.</p>
                  <p>This specification spells "codepoint" as one word; the Unicode specification spells
                     it as "code point".
                  Equivalent terms found in other specifications are
                  "character number" or "code position". See <bibref ref="charmod"/></p></note>
               <p>Because these terms appear so frequently, they are hyperlinked to the definition only when there
                  is a particular desire to draw the reader's attention to the definition; the absence of a hyperlink
                  does not mean that the term is being used in some other sense.</p>
               
               <p>It is <termref def="implementation-defined"/> which version of <bibref ref="Unicode"/> is supported, but it is recommended that the most recent version of Unicode be used.</p>
               <p>Unless explicitly stated, the <code>xs:string</code> values returned by the
                  functions in this document are not normalized in the sense of <bibref ref="charmod"/>.</p>
               <notes>
                  <p>In functions that involve character counting such
                     as <code>fn:substring</code>, <code>fn:string-length</code> and
                     <code>fn:translate</code>, what is counted is the number of XML <termref def="character">characters</termref>
                     in the string (or equivalently, the number of Unicode codepoints). Some
                     implementations may represent a codepoint above xFFFF using two 16-bit
                     values known as a surrogate pair. A surrogate pair counts as one character, not two.</p>
               </notes>
            </div3>
            <div3 id="namespace-terminology">
               <head>Namespaces and URIs</head>
               <p>This document uses the phrase "namespace URI" to identify the concept identified
                  in <bibref ref="xml-names"/> as "namespace name", and the phrase "local name"
                  to identify the concept identified in <bibref ref="xml-names"/> as "local part".</p>
               <p>It also uses the term <quote>expanded-QName</quote> defined below.</p>
               <p><termdef id="expanded-name" term="expanded-QName"> An <term>expanded-QName</term> 
                  is a value in the value space of the <code>xs:QName</code> datatype as defined in the XDM data model 
                  (see <bibref ref="xpath-datamodel-31"/>): that is, a triple containing namespace prefix (optional), namespace URI (optional), 
                  and local name. Two expanded QNames are equal if the namespace URIs are the same (or both absent) 
                  and the local names are the same. The prefix plays no part in the comparison, but is used only 
                  if the expanded QName needs to be converted back to a string.</termdef></p>
                  
               <p>The term URI is used as follows:</p>
               
               <p><termdef id="dt-uri" term="URI">Within this specification, the term <term>URI</term> refers to Universal Resource Identifiers as
                  defined in <bibref ref="rfc3986"/> and extended in <bibref ref="rfc3987"/> with a new name <term>IRI</term>.  The term <term>URI   
                     Reference</term>, unless otherwise stated, refers to a string in the lexical space of the <code>xs:anyURI</code> datatype 
                  as defined in <bibref ref="xmlschema-2"/>.</termdef></p>
               <note>
                  <p>
                     Note that this means, in practice, that where this 
                     specification requires a "URI Reference", an IRI as defined in <bibref ref="rfc3987"/> will be 
                     accepted, provided that other relevant specifications also permit an IRI. The term URI has been 
                     retained in preference to IRI to avoid introducing new names for concepts such as "Base URI" that 
                     are defined or referenced across the whole family of XML specifications.  Note also that the 
                     definition of <code>xs:anyURI</code> is a wider definition than the definition in <bibref ref="rfc3987"/>; 
                     for example it does not require non-ASCII characters to be escaped.
                  </p>
               </note>
               
            </div3>
            <div3 id="conformance-terminology">
               <head>Conformance terminology</head>
               
               <p>In this specification:</p>
               
               <ulist>
                  <item><p>The auxiliary verb <rfc2119>must</rfc2119>, when rendered in small capitals, indicates a precondition for conformance.</p>
                  <ulist>
                     <item><p>When the sentence relates to an implementation of a function (for example "All implementations <rfc2119>must</rfc2119> 
                        recognize URIs of the form ...") then an implementation is not conformant unless it behaves as stated.
                     </p></item>
                     <item><p>When the sentence relates to the result of a function (for example "The result <rfc2119>must</rfc2119> have the same type as 
                        <code>$arg</code>") then the implementation is not conformant unless it delivers a result as stated.
                     </p></item>
                     <item><p>When the sentence relates to the arguments to a function (for example "The value of <code>$arg</code> <rfc2119>must</rfc2119> 
                        be a valid regular expression") then the implementation is not conformant unless it enforces the condition by raising a dynamic error 
                        whenever the condition is not satisfied. 
                     </p></item>
                  </ulist>
                  
                  </item>
                  <item><p>The auxiliary verb <rfc2119>may</rfc2119>, when rendered in small capitals, indicates optional or discretionary behavior. 
                     The statement "An implementation <rfc2119>may</rfc2119> do X" implies that it is implementation-dependent whether or not it does X.</p></item>
                  
                  <item><p>The auxiliary verb <rfc2119>should</rfc2119>, when rendered in small capitals, indicates desirable or recommended behavior. 
                     The statement "An implementation <rfc2119>should</rfc2119> do X" implies that it is desirable to do X, but implementations may choose
                     to do otherwise if this is judged appropriate.</p></item>
                  
               </ulist>
               
               <p><termdef id="implementation-defined" term="implementation-defined">Where behavior is described as 
               <term>implementation-defined</term>, variations between processors are permitted, but a 
                  conformant implementation <rfc2119>must</rfc2119> document the choices it has made.</termdef></p>
               
               <p><termdef id="implementation-dependent" term="implementation-dependent">Where behavior is described as 
                  <term>implementation-dependent</term>, variations between processors are permitted, and  
                  conformant implementations are not required to document the choices they have made.</termdef></p>
                            
               
               <note><p>Where this specification states that something is implementation-defined or implementation-dependent, it is
               open to host languages to place further constraints on the behavior.</p></note>
               
               
            </div3>
            <div3 id="properties-of-functions">
               <head>Properties of functions</head>
               
               <p>This section is concerned with the question of whether two calls on a function, with the same arguments, may
               produce different results.</p>
               
               <p><termdef id="execution-scope" term="execution scope">An <term>execution scope</term> is a sequence of
                  calls to the function library during which certain aspects of the state are required to remain invariant.
                  For example, two calls to <code>fn:current-dateTime</code> within the same execution scope will return the same result.
                  The execution scope is defined by the host language that invokes the function library.</termdef>
                  In XSLT, for example, any two function calls executed during
                  the same transformation are in the same execution scope (except that static expressions, such as those used in
                  <code>use-when</code> attributes, are in a separate execution scope).
                  </p>
               
               <p>The following definition explains more precisely what it means for two function calls to return the same result:</p>
               
               <p><termdef id="dt-identical" term="identical"></termdef>Two values are
                  defined to be <term>identical</term> if they
                  contain the same number of items and the items are pairwise identical. Two items are identical
                  if and only if one of the following conditions applies:</p>
               
               <olist>
                  <item><p>Both items are atomic values, of precisely the same type, and the values are equal as defined using the <code>eq</code> operator,
                     using the Unicode codepoint collation when comparing strings.</p></item>
                  <item><p>Both items are nodes, and represent the same node.</p></item>
                  <item><p>Both items are maps, both maps have the same number of entries, 
                     and for every entry <var>E1</var> in the first map there is an entry <var>E2</var> in the second map such 
                     that the keys of <var>E1</var> and <var>E2</var> are <termref def="dt-same-key">the same key</termref>, 
                     and the corresponding values <var>V1</var> and <var>V2</var> are <termref def="dt-identical"/>.</p></item>
                  <item><p>Both items are arrays, both arrays have the same number of members, and the members
                     are pairwise <termref def="dt-identical"/>.</p></item>
                  <item><p>Both items are function items, 
                     neither item is a map or array, and all the following conditions apply:</p>
                     <olist>
                        <item><p>Either both functions have the same name, or both names are 
                           <xtermref ref="dt-absent" spec="DM31">absent</xtermref>.</p></item>
                        <item><p>Both functions have the same arity.</p></item>
                        <item><p>Both functions have the same function signature. Two
                        function signatures are defined to be the same if the declared result types are identical and the declared
                        argument types are pairwise identical. Two types <var>S</var> and <var>T</var> are defined to be
                           identical if and only if <code>subtype(S, T)</code> and <code>subtype(T, S)</code>
                           both hold, where the subtype relation is defined in <xspecref spec="XP31" ref="id-seqtype-subtype"/>.</p>
                        <note><p>Under this definition, a union type with <code>memberTypes="xs:double xs:decimal"</code>
                           is identical to a union type with <code>memberTypes="xs:decimal xs:double"</code>. However, two functions
                        whose signatures differ in this way will probably be deemed non-identical under rule (e) below, because they are likely to
                        have different effect when invoked with an argument of type <code>xs:untypedAtomic</code>.</p></note>
                        </item>
                        <item><p>Both functions have the same nonlocal variable bindings (sometimes called the function's closure).</p></item>
                        <item><p>The processor is able to determine that the implementations of the two functions are equivalent,
                        in the sense that for all possible combinations of arguments, the two functions have the same effect.</p>                       
                        </item>
                     </olist>
                     <note><p>There is no function or operator defined in the specification that tests whether two function items 
                        are identical. Where the specification requires two function items to be identical, for example in the 
                        results of repeated calls of a function whose result is a function, then the processor must ensure that 
                        it returns functions that are indistinguishable in their observable effect. Where the specification defines 
                        behavior conditional on two function items being identical, the determination of identity is to some degree 
                        implementation-dependent. There are cases where function items are definitely not identical (for example 
                        if they have different name or arity), but positive determination of identity is possible only using 
                        implementation-dependent techniques, for example when both items contain references to the same piece of 
                        code representing the function's implementation.
                     </p></note>
                  </item>
               </olist>
               
               <p>Some functions produce results that depend not only on their explicit arguments, 
                  but also on the static and dynamic context.</p>
               
               <p><termdef id="dt-context-dependent" term="context-dependent">A function may have 
                  the property of being <term>context-dependent</term>: the result of such a
               function depends on the values of properties in the static and dynamic
               evaluation context as well as on the actual supplied arguments (if any).</termdef></p>
               
               <p><termdef id="dt-context-independent" term="context-independent">A function that is
               not <termref def="dt-context-dependent">context-dependent</termref> is called 
                  <term>context-independent</term>.</termdef></p>
               
               <p>A function that is context-dependent can be used as a named
               function reference, can be partially applied, and can be found using <code>fn:function-lookup</code>. 
               The principle in such cases is that the static context used for the function evaluation
               is taken from the static context of the named function reference, partial function application, or the call
               on <code>fn:function-lookup</code>; and the dynamic context for the function evaluation is taken from the dynamic
               context of the evaluation of the named function reference, partial function application, or the call
               of <code>fn:function-lookup</code>. In effect, the static and dynamic part of the context thus act
               as part of the closure of the function item.</p>
              
               
               <p>Context-dependent functions fall into a number of categories:</p>
               
               <olist>
               
               <item><p>The functions <code>fn:current-date</code>, <code>fn:current-dateTime</code>, <code>fn:current-time</code>, 
                  <code>fn:default-language</code>, <code>fn:implicit-timezone</code>,
               <code>fn:adjust-date-to-timezone</code>, <code>fn:adjust-dateTime-to-timezone</code>, and
               <code>fn:adjust-time-to-timezone</code> depend on properties of the dynamic context that are
               fixed within the <termref def="execution-scope">execution scope</termref>. The same applies to a
               number of functions in the <code>op:</code> namespace that manipulate dates and times and
               that make use of the implicit timezone. These functions will return the same
               result if called repeatedly during a single <termref def="execution-scope">execution scope</termref>.</p></item>
               
                  <item><p>A number of functions including <code>fn:base-uri#0</code>, <code>fn:data#0</code>, 
                     <code>fn:document-uri#0</code>, <code>fn:element-with-id#1</code>, <code>fn:id#1</code>, 
                     <code>fn:idref#1</code>, <code>fn:lang#1</code>, <code>fn:last#0</code>, <code>fn:local-name#0</code>,
                     <code>fn:name#0</code>, <code>fn:namespace-uri#0</code>, <code>fn:normalize-space#0</code>, 
                     <code>fn:number#0</code>, <code>fn:path#0</code>, <code>fn:position#0</code>, 
                     <code>fn:root#0</code>, <code>fn:string#0</code>, and
               <code>fn:string-length#0</code> depend on the <xtermref ref="dt-focus" spec="XP31">focus</xtermref>. 
                     These functions will in general return
               different results on different calls if the focus is different.</p>
                  <p><termdef id="dt-focus-dependent" term="focus-dependent">A function is <term>focus-dependent</term>
                     if its result depends on the <xtermref ref="dt-focus" spec="XP31">focus</xtermref>
                     (that is, the context item, position, or size).</termdef></p>
                     <p><termdef id="dt-focus-independent" term="focus-dependent">A function that
                        is not <termref def="dt-focus-dependent">focus-dependent</termref> is called
                        <term>focus-independent</term></termdef></p></item>
                        
 
               
                  <item><p>The function <code>fn:default-collation</code> and many string-handling operators and functions depend
               on the default collation and the in-scope collations, which are both properties
               of the static context. If a particular call of one of these functions is
               evaluated twice with the same arguments then it will return the same result
               each time (because the static context, by definition, does not change at run
               time). However, two distinct calls (that is, two calls on the function
               appearing in different places in the source code) may produce different results
               even if the explicit arguments are the same.</p></item>
               
                  <item><p>Functions such as <code>fn:static-base-uri</code>, <code>fn:doc</code>, and <code>fn:collection</code> depend on
               other aspects of the static context. As with functions that depend on
               collations, a single call will produce the same results on each call if the
               explicit arguments are the same, but two calls appearing in different places in
               the source code may produce different results.</p></item>
               
               </olist>
               
               <p>The <code>fn:function-lookup</code> function is a special case because it is
               potentially dependent on everything in the static and dynamic context. This is because the static and dynamic
               context of the call to <code>fn:function-lookup</code> are used as the static and dynamic context of the
               function that <code>fn:function-lookup</code> returns.</p>
               
               <p><termdef id="dt-implicit-arguments" term="implicit argument">For a
                  <termref def="dt-context-dependent">context-dependent</termref> function, 
                  the parts of the context on which it depends are
               referred to as <term>implicit arguments</term>.</termdef></p>
               
               
               
               <p><termdef id="dt-deterministic" term="deterministic">A function that is guaranteed to produce <termref def="dt-identical">identical</termref> results 
                  from repeated calls within a single <termref def="execution-scope">execution scope</termref>
               if the explicit and implicit arguments are identical is referred to as
               <term>deterministic</term>.</termdef></p>
               
               <p><termdef id="dt-nondeterministic" term="nondeterministic">A function that is not
                  <termref def="dt-deterministic">deterministic</termref> is referred to as <term>nondeterministic</term>.</termdef></p>
               
               <p>All functions defined in this specification are <termref def="dt-deterministic">deterministic</termref> unless otherwise stated.
               Exceptions include the following:</p>
               
               <ulist>
               <item><p><termdef id="dt-nondeterministic-wrt-ordering" term="nondeterministic with respect to ordering">Some 
                  functions (such as <code>fn:distinct-values</code>, <code>fn:unordered</code>, <code>map:keys</code>,
                  and <code>map:for-each</code>) produce results in an
                  <termref def="implementation-defined">implementation-defined</termref> or 
                  <termref def="implementation-dependent">implementation-dependent</termref> order. 
                  In such cases two calls with the same arguments are not guaranteed to produce the results in the same order. These functions are
               said to be <term>nondeterministic with respect to ordering</term>.</termdef></p></item>
               
               <item><p>Some functions (such as <code>fn:analyze-string</code>,
                  <code>fn:parse-xml</code>, <code>fn:parse-xml-fragment</code>, and <code>fn:json-to-xml</code>) 
                  construct a tree of nodes to
               represent their results. There is no guarantee that repeated calls with the same
               arguments will return the same identical node (in the sense of the <code>is</code>
               operator). However, if non-identical nodes are returned, their content will be the
               same in the sense of the <code>fn:deep-equal</code> function. Such a function is said 
               to be <term>non-deterministic with respect to node identity</term>.</p></item>
               
               <item><p>Some functions (such as <code>fn:doc</code> and <code>fn:collection</code>) create new nodes by reading external
               documents. Such functions are guaranteed to be <termref def="dt-deterministic">deterministic</termref> with the exception that
               an implementation is allowed to make them non-deterministic as a user option.</p></item>
               
               </ulist>
               
               <p>Where the results of a function are described as being (to a greater or lesser
                  extent) <termref def="implementation-defined">implementation-defined</termref> or 
                  <termref def="implementation-dependent">implementation-dependent</termref>, this does not by
               itself remove the requirement that the results should be deterministic: that is, that
               repeated calls with the same explicit and implicit arguments <rfc2119>must</rfc2119> return
               identical results.</p>
               
            </div3>           
         </div2>
      </div1>
      
      <div1 id="accessors">
         <head>Accessors</head>
         <p>Accessors and their semantics are described in <bibref ref="xpath-datamodel-31"/>. Some of
                these accessors are exposed to the user through the functions described below.</p>
         <p>Each of these functions has an arity-zero signature which is equivalent to the arity-one
         form, with the context item supplied as the implicit first argument. In addition, each of the
         arity-one functions accepts an empty sequence as the argument, in which case it generally delivers
         an empty sequence as the result: the exception is <code>fn:string</code>, which delivers
         a zero-length string.</p>
         <table role="data">
            <col width="25%" span="1"/>
            <col width="25%" span="1"/>
            <col width="25%" span="1"/>
            <col width="25%" span="1"/>
            <thead>
               <tr>
                  <th>Function</th>
                  <th>Accessor</th>
                  <th>Accepts</th>
                  <th>Returns</th>
               </tr>
            </thead>
            <tbody><tr>
                  <td>
                            <code>fn:node-name</code>
                        </td>
                  <td>
                            <code>node-name</code>
                        </td>
                  <td>node (optional)</td>
                  <td><code>xs:QName</code> (optional)
                        </td>
               </tr>
               <tr>
                  <td>
                            <code>fn:nilled</code>
                        </td>
                  <td>
                            <code>nilled</code>
                        </td>
                  <td>node (optional)</td>
                  <td><code>xs:boolean</code> (optional)
                        </td>
               </tr>
               <tr>
                  <td>
                            <code>fn:string</code>
                        </td>
                  <td>
                            <code>string-value</code>
                        </td>
                  <td>item (optional)</td>
                  <td>
                            <code>xs:string</code>
                        </td>
               </tr>
               <tr>
                  <td>
                            <code>fn:data</code>
                        </td>
                  <td>
                            <code>typed-value</code>
                        </td>
                  <td>zero or more items</td>
                  <td>a sequence of atomic values</td>
               </tr>
               <tr>
                  <td>
                            <code>fn:base-uri</code>
                        </td>
                  <td>
                            <code>base-uri</code>
                        </td>
                  <td>node (optional)</td>
                  <td><code>xs:anyURI</code> (optional)
                        </td>
               </tr>
               <tr>
                  <td>
                            <code>fn:document-uri</code>
                        </td>
                  <td>
                            <code>document-uri</code>
                        </td>
                  <td>node (optional)</td>
                  <td><code>xs:anyURI</code> (optional)
                        </td>
               </tr>
            </tbody>
         </table>
         <div2 id="func-node-name">
            <head><?function fn:node-name?></head>
         </div2>
         <div2 id="func-nilled">
            <head><?function fn:nilled?></head>
         </div2>
         <div2 id="func-string">
            <head><?function fn:string?></head>
         </div2>
         <div2 id="func-data">
            <head><?function fn:data?></head>
         </div2>
         <div2 id="func-base-uri">
            <head><?function fn:base-uri?></head>
         </div2>
         <div2 id="func-document-uri">
            <head><?function fn:document-uri?></head>
		   </div2>
      </div1>
	  <div1 id="errors-and-diagnostics">
	    <head>Errors and diagnostics</head>
        <div2 id="errors">
		  	<head>Raising errors</head>
	
	         <p>In this document, as well as in <bibref ref="xquery-40"/> and <bibref ref="xpath-40"/>,
	            the phrase <quote>an error is raised</quote>
	                is used. Raising an error is equivalent to calling the <code>fn:error</code>
	                function defined in this section with the provided error code. Except where otherwise
	                specified, errors defined in this specification are dynamic errors. Some errors,
	                however, are classified as type errors. Type errors are typically used where the presence
	         of the error can be inferred from knowledge of the type of the actual arguments to a function, for
	         example with a call such as <code>fn:string(fn:abs#1)</code>. Host languages may allow type errors
	         to be reported statically if they are discovered during static analysis.</p>
	         <p> When function specifications indicate that an error is to be raised, the notation 
	            <quote>[<emph>error code</emph>]</quote>. os used to specify an error code. Each error defined
	                in this document is identified by an <code>xs:QName</code> that is in the
	                <code>http://www.w3.org/2005/xqt-errors</code> namespace, represented in this document by the <code>err</code> prefix. It is this
	                <code>xs:QName</code> that is actually passed as an argument to the
	                <code>fn:error</code> function. Calling this function raises an error.  For a
	                more detailed treatment of error handing, see <xspecref spec="XP31" ref="id-handling-dynamic"/>.</p>
	         <p>The <code>fn:error</code> function is a general function that may be called as above
	                but may also be called from <bibref ref="xquery-40"/> or <bibref ref="xpath-40"/>
	                applications with, for example, an <code>xs:QName</code> argument. </p>
	         <div3 id="func-error">
	         	<head><?function fn:error?></head>        
			 </div3>
		 </div2>
	     <div2 id="diagnostics">
		  	<head>Diagnostic tracing</head>
	      	<div3 id="func-trace">
				  <head><?function fn:trace?></head>
			   </div3>
	        <div3 id="func-stack-trace" diff="add" at="A">
	           <head><?function fn:stack-trace?></head>
	        </div3>
	     </div2>
      </div1>
      <div1 id="numeric-functions">
         <head>Functions and operators on numerics</head>
         <p>This section specifies arithmetic operators on the numeric datatypes defined in
                    <bibref ref="xmlschema-2"/>.</p>
         <div2 id="numeric-types">
            <head>Numeric types</head>
            <p>The operators described in this section are defined on the following atomic
                    types. Each type whose name is indented is derived from the type whose name
                    appears nearest above with one less level of indentation.</p>
            <table border="0"  summary="Numeric types" role="hierarchy"><!--width="288"-->
               <tbody>
                  <tr>
                     <td>xs:decimal</td>
                  </tr>
                  <tr>
                     <td/>
                     <td>xs:integer</td>
                  </tr>
                  <tr>
                     <td>xs:float</td>
                  </tr>
                  <tr>
                     <td>xs:double</td>
                  </tr>
               </tbody>
            </table>
            <p>They also apply to types derived by restriction from the above types. </p>
            <p>The type <code>xs:numeric</code> is defined as a union type whose member types are
            (in order) <code>xs:double</code>, <code>xs:float</code>, and <code>xs:decimal</code>. This type is implicitly imported
            into the static context, so it can also be used in defining the signature of user-written functions. Apart from the fact that
            it is implicitly imported, it behaves exactly like a user-defined type with the same definition. This means, for example:</p>
            
            <ulist>
               <item><p>If the expected type of a function parameter is given as <code>xs:numeric</code>, the actual value supplied
               can be an instance of any of these three types, or any type derived from these three by restriction (this includes the built-in
               type <code>xs:integer</code>, which is derived from <code>xs:decimal</code>).</p></item>
               <item><p>If the expected type of a function parameter is given as <code>xs:numeric</code>, and the actual value supplied
                  is <code>xs:untypedAtomic</code> (or a node whose atomized value is <code>xs:untypedAtomic</code>), then it will
                  be cast to the union type <code>xs:numeric</code> using the rules in <specref ref="casting-to-union"/>.
               Because the lexical space of <code>xs:double</code> subsumes the lexical space of the other member types, and
               <code>xs:double</code> is listed first, the effect is that if the untyped atomic value is in the lexical space of
               <code>xs:double</code>, it will be converted to an <code>xs:double</code>, and if not, a dynamic error occurs.</p></item>
               <item><p>When the return type of a function is given as <code>xs:numeric</code>, the actual value returned will be
               an instance of one of the three member types (and perhaps also of types derived from these by restriction). The rules
               for the particular function will specify how the type of the result depends on the values supplied as arguments.
               In many cases, for the functions in this specification, the result is defined to be the same type as the first
               argument.</p></item>
            </ulist>
            <note>
               <p>
This specification uses  <bibref ref="ieee754-2008"/> arithmetic for <code>xs:float</code> and <code>xs:double</code> values.
One consequence of this is that some operations result in the value <code>NaN</code> (not-a number), which
has the unusual property that it is not equal to itself. Another consequence is that some operations return the value negative zero.
This differs from <bibref ref="xmlschema-2"/> which defines
<code>NaN</code> as being equal to itself and defines only a single zero in the value space.
 The text accompanying several functions defines behavior for both positive and negative zero inputs and outputs 
 in the interest of alignment with <bibref ref="ieee754-2008"/>. A conformant implementation must
 respect these semantics. In consequence, the expression <code>-0.0e0</code> (which is actually a unary minus operator 
    applied to an <code>xs:double</code> value) will always return negative zero: see <specref ref="func-numeric-unary-minus"/>. 
    As a concession to implementations that rely on implementations of XSD 1.0, however, when casting from string to double
 the lexical form <code>-0</code> <rfc2119>may</rfc2119> be converted to positive zero, though negative zero
 is <rfc2119>recommended</rfc2119>.
</p>
               <p>XML Schema 1.1 introduces support for positive and negative zero as distinct values, and also uses the <bibref ref="ieee754-2008"/>
               semantics for comparisons involving <code>NaN</code>.</p>
            </note>
         </div2>
         <div2 id="op.numeric">
            <head>Arithmetic operators on numeric values</head>
            <p>The following functions define the semantics of arithmetic operators defined in 
			<bibref ref="xquery-40"/> and <bibref ref="xpath-40"/> on these numeric types. </p>
            <table role="no-code-break data">
               <thead>
                  <tr>
                     <th>Operator</th>
                     <th>Meaning</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>
                                <code>op:numeric-add</code>
                            </td>
                     <td>Addition</td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:numeric-subtract</code>
                            </td>
                     <td>Subtraction</td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:numeric-multiply</code>
                            </td>
                     <td>Multiplication</td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:numeric-divide</code>
                            </td>
                     <td>Division</td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:numeric-integer-divide</code>
                            </td>
                     <td>Integer division</td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:numeric-mod</code>
                            </td>
                     <td>Modulus</td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:numeric-unary-plus</code>
                            </td>
                     <td>Unary plus</td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:numeric-unary-minus</code>
                            </td>
                     <td>Unary minus (negation)</td>
                  </tr>
               </tbody>
            </table>
            <p>The parameters and return types for the above operators are in most cases declared to be of type
               <code>xs:numeric</code>, which permits the basic numeric
                    types: <code>xs:integer</code>, <code>xs:decimal</code>, <code>xs:float</code>
                    and <code>xs:double</code>, and types derived from them.
               In general the two-argument functions require that both arguments are of the same primitive type,
            and they return a value of this same type.
               The exceptions are <code>op:numeric-divide</code>, which returns
                    an <code>xs:decimal</code> if called with two <code>xs:integer</code> operands,
                    and <code>op:numeric-integer-divide</code> which always returns an <code>xs:integer</code>.</p>
            <p>If the two operands of an arithmetic expression are not of the same type, <emph>subtype substitution</emph>
                    and <emph>numeric type promotion</emph> are used to obtain two operands of the
                    same type. <xspecref spec="XP31" ref="promotion"/> and <xspecref spec="XP31" ref="mapping"/> describe the semantics of these operations in
                    detail. </p>
            <p>The result type of operations depends on their argument datatypes and is defined
                    in the following table:</p>
            <table role="no-code-break data">
               <thead>
                  <tr>
                     <th>Operator</th>
                     <th>Returns</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>
                                <code>op:operation(xs:integer, xs:integer)</code>
                            </td>
                     <td>
                                <code>xs:integer</code> (except for <code>op:numeric-divide(integer,
                                integer)</code>, which returns <code>xs:decimal</code>)</td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:operation(xs:decimal, xs:decimal)</code>
                            </td>
                     <td>
                                <code>xs:decimal</code>
                            </td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:operation(xs:float, xs:float)</code>
                            </td>
                     <td>
                                <code>xs:float</code>
                            </td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:operation(xs:double, xs:double)</code>
                            </td>
                     <td>
                                <code>xs:double</code>
                            </td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:operation(xs:integer)</code>
                            </td>
                     <td>
                                <code>xs:integer</code>
                            </td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:operation(xs:decimal)</code>
                            </td>
                     <td>
                                <code>xs:decimal</code>
                            </td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:operation(xs:float)</code>
                            </td>
                     <td>
                                <code>xs:float</code>
                            </td>
                  </tr>
                  <tr>
                     <td>
                                <code>op:operation(xs:double)</code>
                            </td>
                     <td>
                                <code>xs:double</code>
                            </td>
                  </tr>
               </tbody>
            </table>
            <p>These rules define any operation on any pair of arithmetic types. Consider the
                    following example:</p>
            <eg xml:space="preserve"><![CDATA[op:operation(xs:int, xs:double) => op:operation(xs:double, xs:double)]]></eg>
            <p>For this operation, <code>xs:int</code> must be converted to
                    <code>xs:double</code>. This can be done, since by the rules above:
                    <code>xs:int</code> can be substituted for <code>xs:integer</code>,
                    <code>xs:integer</code> can be substituted for <code>xs:decimal</code>,
                    <code>xs:decimal</code> can be promoted to <code>xs:double</code>. As far as possible, the promotions should be done in a
                    single step. Specifically, when an <code>xs:decimal</code> is promoted to an
                    <code>xs:double</code>, it should not be converted to an <code>xs:float</code>
                    and then to <code>xs:double</code>, as this risks loss of precision.</p>
            <p>As another example, a user may define <code>height</code> as a derived type of
                    <code>xs:integer</code> with a minimum value of 20 and a maximum value of 100.
                    They may then derive <code>fenceHeight</code> using an enumeration to restrict the
                    permitted set of values to, say, 36, 48 and 60.</p>
            <eg xml:space="preserve"><![CDATA[op:operation(fenceHeight, xs:integer) => op:operation(xs:integer, xs:integer)]]></eg>
            <p>
                    <code>fenceHeight</code> can be substituted for its base type
                    <code>height</code> and <code>height</code> can be substituted for its base type
                    <code>xs:integer</code>. </p>

            <p>The basic rules for addition, subtraction, and multiplication
			of ordinary numbers are not set out in this specification; they are taken as given. In the case of <code>xs:double</code>
			and <code>xs:float</code> the rules are as defined in <bibref ref="ieee754-2008"/>. The rules for handling
			division and modulus operations, as well as the rules for handling special values such as infinity and <code>NaN</code>,
			and exception conditions such as overflow and underflow, are described more explicitly since they are not necessarily obvious.</p>

            <p>On overflow and underflow situations during arithmetic operations conforming
                    implementations <rfc2119>must</rfc2119> behave as follows:</p>
            <ulist>
               <item>
                  <p>For <code>xs:float</code> and <code>xs:double</code> operations, overflow
                            behavior <rfc2119>must</rfc2119> be conformant with <bibref ref="ieee754-2008"/>. This specification allows the following options:</p>
                  <ulist>
                     <item>
                        <p>Raising a dynamic error <errorref class="AR" code="0002"/> via an
                                    overflow trap.</p>
                     </item>
                     <item>
                        <p>Returning <code>INF</code> or <code>-INF</code>.</p>
                     </item>
                     <item>
                        <p>Returning the largest (positive or negative) non-infinite number.</p>
                     </item>
                  </ulist>
               </item>
               <item>
                  <p>For <code>xs:float</code> and <code>xs:double</code> operations,
                            underflow behavior <rfc2119>must</rfc2119> be conformant with <bibref ref="ieee754-2008"/>. This specification allows the following options:</p>
                  <ulist>
                     <item>
                        <p>Raising a dynamic error <errorref class="AR" code="0002"/> via an
                                    underflow trap.</p>
                     </item>
                     <item>
                        <p>Returning <code>0.0E0</code> or <code>+/- 2**Emin</code> or a
                                    denormalized value; where <code>Emin</code> is the smallest
                                    possible <code>xs:float</code> or <code>xs:double</code> exponent.</p>
                     </item>
                  </ulist>
               </item>
               <item>
                  <p>For <code>xs:decimal</code> operations, overflow behavior <rfc2119>must</rfc2119> 
                     raise a dynamic error <errorref class="AR" code="0002"/>. On
                            underflow, <code>0.0</code> must be returned.</p>
               </item>
               <item>
                  <p>For <code>xs:integer</code> operations, implementations that support
                            limited-precision integer operations <rfc2119>must</rfc2119> select from
                            the following options:</p>
                  <ulist>
                     <item>
                        <p> They <rfc2119>may</rfc2119> choose to always raise a dynamic
                                        error <errorref class="AR" code="0002"/>.</p>
                     </item>
                     <item>
                        <p> They <rfc2119>may</rfc2119> provide an <termref def="implementation-defined"/> mechanism that allows users to
                                    choose between raising an error and returning a result that is
                                    modulo the largest representable integer value. See <bibref ref="ISO10967"/>.</p>
                     </item>
                  </ulist>
               </item>
            </ulist>
            <p>The functions <code>op:numeric-add</code>, <code>op:numeric-subtract</code>,
                    <code>op:numeric-multiply</code>, <code>op:numeric-divide</code>,
                    <code>op:numeric-integer-divide</code> and <code>op:numeric-mod</code> are each
                    defined for pairs of numeric operands, each of which has the same
                    type:<code>xs:integer</code>, <code>xs:decimal</code>, <code>xs:float</code>, or
                    <code>xs:double</code>. The functions <code>op:numeric-unary-plus</code> and
                    <code>op:numeric-unary-minus</code> are defined for a single operand whose type
                    is one of those same numeric types.</p>
            <p> For <code>xs:float</code> and <code>xs:double</code> arguments, if either
                    argument is <code>NaN</code>, the result is <code>NaN</code>.</p>
            <p>For <code>xs:decimal</code> values, let <var>N</var> be the number of digits
            of precision supported by the implementation, and let <var>M</var> (<code>M &lt;= N</code>) be the minimum limit on the number of digits
            required for conformance (18 digits for XSD 1.0, 16 digits for XSD 1.1). Then for addition, subtraction, and multiplication
               operations, the returned result <rfc2119>should</rfc2119> be accurate to <var>N</var> digits of precision, and for division and modulus operations,
               the returned result <rfc2119>should</rfc2119> be accurate to at least <var>M</var> digits of precision. 
               The actual precision is <termref def="implementation-defined"/>. If the number
                    of digits in the mathematical result exceeds the number of digits that the implementation
                    retains for that operation, the result is truncated or rounded in an <termref def="implementation-defined"/> manner.</p>
            
            <note><p>This Recommendation does not specify whether <code>xs:decimal</code> operations are fixed point or floating point.
            In an implementation using floating point it is possible for very simple operations to require more digits of precision than
            are available; for example adding <code>1e100</code> to <code>1e-100</code> requires 200 digits of precision for an
               accurate representation of the result.</p></note>
            
        
            
            <p>The <bibref ref="ieee754-2008"/> specification also describes handling of
            two exception conditions called <code>divideByZero</code> and <code>invalidOperation</code>. The 
            IEEE <code>divideByZero</code> exception is raised not only by a direct attempt to divide by zero, but also by
            operations such as <code>log(0)</code>. The IEEE <code>invalidOperation</code> exception is raised by
            attempts to call a function with an argument that is outside the function's domain (for example,
            <code>sqrt(-1)</code> or <code>log(-1)</code>). 
               Although IEEE defines these as exceptions, it also defines "default non-stop exception handling" in 
                  which the operation returns a defined result, typically positive or negative infinity, or NaN. With this 
                  function library,
               these IEEE exceptions do not cause a dynamic error
            at the application level; rather they result in the relevant function or operator returning
            the defined non-error result. 
               The underlying IEEE exception <rfc2119>may</rfc2119> be notified to the application
            or to the user by some <termref def="implementation-defined">implementation-defined</termref>
               warning condition, but the observable effect on an application 
               using the functions and operators defined in this specification is simply to return
               the defined result (typically -INF, +INF, or NaN) with no error.</p>
            <p>The <bibref ref="ieee754-2008"/> specification distinguishes two NaN values,
               a quiet NaN and a signaling NaN. These two values are not distinguishable in the XDM model:
               the value spaces of <code>xs:float</code> and <code>xs:double</code> each include only a single
               <code>NaN</code> value. This does not prevent the implementation distinguishing them internally,
               and triggering different <termref def="implementation-defined">implementation-defined</termref>
               warning conditions, but such distinctions do not affect the observable behavior of an application 
               using the functions and operators defined in this specification.</p>
            <div3 id="func-numeric-add">
               <head><?function op:numeric-add?></head>
            </div3>
            <div3 id="func-numeric-subtract">
               <head><?function op:numeric-subtract?></head>
            </div3>
            <div3 id="func-numeric-multiply">
               <head><?function op:numeric-multiply?></head>
            </div3>
            <div3 id="func-numeric-divide">
               <head><?function op:numeric-divide?></head>
            </div3>
            <div3 id="func-numeric-integer-divide">
               <head><?function op:numeric-integer-divide?></head>
            </div3>
            <div3 id="func-numeric-mod">
               <head><?function op:numeric-mod?></head>
            </div3>
            <div3 id="func-numeric-unary-plus">
               <head><?function op:numeric-unary-plus?></head>
 			</div3>
            <div3 id="func-numeric-unary-minus">
               <head><?function op:numeric-unary-minus?></head>
            </div3>
         </div2>
         <div2 id="comp.numeric" diff="chg" at="A">
            <head>Comparison operators on numeric values</head>
            <p diff="chg" at="A">The six value comparison operators <code>eq</code>, <code>ne</code>, <code>lt</code>,
               <code>le</code>, <code>gt</code>, and <code>ge</code> are defined in terms of two
               underlying functions: <code>op:numeric-equal</code> and <code>op:numeric-less-than</code>.
            These functions are defined to operate on values of the same type.</p>
            <p diff="chg" at="A">If the arguments are of different types, then one of them is converted to the type of the
            other using the following rules, in order:</p>
            <olist diff="chg" at="A">
               <item>
                  <p>If one operand is <code>xs:float</code> then it is converted to <code>xs:double</code>.</p>
               </item>
               <item>
                  <p>If one operand is <code>xs:double</code> and the other is <code>xs:decimal</code>, then:</p>
                  <olist>
                     <item>
                        <p>If the <code>xs:double</code> operand is <code>-INF</code>, <code>+INF</code>, or <code>NaN</code>,
                     then the <code>xs:decimal</code> value is cast to <code>xs:double</code> and the values are compared
                     as doubles.</p>
                     </item>
                     <item>
                        <p>Otherwise, the <code>xs:double</code> value is converted to a decimal number with no rounding
                     or loss of precision and the values are compared acccording to their mathematical values.
                        </p>
                        <note>
                           <p>Every instance of <code>xs:float</code>, <code>xs:double</code>, and <code>xs:decimal</code>,
                           other than the values <code>-INF</code>, <code>+INF</code>, and <code>NaN</code>, can be represented
                           exactly as a decimal number provided enough digits are available both before and after the decimal
                           point. The effect of this rule is that the comparison operators are transitive.</p>
                           <p>In edge cases this rule may give a different result from earlier releases. For example
                           in XPath 3.1 (depending on the implementation-defined precision), the values 
                           <code>xs:decimal('1.0000000000100000000001')</code> and <code>xs:double('1.00000000001')</code>
                           might compare as equal; in this version of the specification, they are not equal.</p>
                           <p>This change removes the problems caused for <code>fn:distinct-values</code> and
                           <code>xsl:for-each-group</code> as a result of non-transitivity, and it aligns the semantics
                              of the <code>eq</code> operator (used also in <code>fn:distinct-values</code>, <code>fn:index-of</code>,
                           and <code>fn:deep-equal</code>) with the semantics of the <code>op:same-key</code> comparison
                           used for maps.</p>
                        </note>
                     </item>
                  </olist>
               </item>
               
            </olist>
            <p>This specification defines the following comparison operators on numeric values.
               Each comparison operator returns a boolean
                    value. If either, or both, operands are <code>NaN</code>, <code>false</code> is
                    returned. </p>
            <?local-function-index?>
            <div3 id="func-numeric-equal">
               <head><?function op:numeric-equal?></head>
            </div3>
            <div3 id="func-numeric-less-than">
               <head><?function op:numeric-less-than?></head>
            </div3>
            
         </div2>
         <div2 id="numeric-value-functions">
            <head>Functions on numeric values</head>
            <p>The following functions are defined on numeric types. Each function returns a
                    value of the same type as the type of its argument.</p>
            <ulist>
               <item>
                  <p>If the argument is the empty sequence, the empty sequence is returned.</p>
               </item>
               <item>
                  <p>For <code>xs:float</code> and <code>xs:double</code> arguments, if the
                            argument is "NaN", "NaN" is returned.</p>
               </item>
               <item>
                  <p>Except for <code>fn:abs</code>, for <code>xs:float</code> and
                            <code>xs:double</code> arguments, if the argument is positive or
                            negative infinity, positive or negative infinity is returned.</p>
               </item>
            </ulist>
            <?local-function-index?>
            
			   <note><p><code>fn:round</code> and <code>fn:round-half-to-even</code> produce the same result in all cases
except when the argument is exactly midway between two values with the required precision.</p>
<p>Other ways of rounding midway values can be achieved as follows:</p>
<ulist>
<item><p>Towards negative infinity: <code>-fn:round(-$x)</code></p></item>
<item><p>Away from zero: <code>fn:round(fn:abs($x))*fn:compare($x,0)</code></p></item>
<item><p>Towards zero: <code>fn:abs(fn:round(-$x))*-fn:compare($x,0)</code></p></item>
</ulist>
</note>


            
            <div3 id="func-abs">
               <head><?function fn:abs?></head>
            </div3>
            <div3 id="func-ceiling">
               <head><?function fn:ceiling?></head>
            </div3>
            <div3 id="func-floor">
               <head><?function fn:floor?></head>
            </div3>
            <div3 id="func-round">
               <head><?function fn:round?></head>
            </div3>
            <div3 id="func-round-half-to-even">
               <head><?function fn:round-half-to-even?></head>
            </div3>
            <div3 id="func-is-NaN" diff="add" at="A">
               <head><?function fn:is-NaN?></head>
            </div3>
         </div2 >
         
         <div2 id="parsing-numbers">
            <head>Parsing numbers</head>
            <p>It is possible to convert strings to values of type <code>xs:integer</code>,
            <code>xs:float</code>, <code>xs:decimal</code>, or <code>xs:double</code>
            using the constructor functions described in <specref ref="constructor-functions"/>
            or using <code>cast</code> expressions as described in <specref ref="casting"/>.</p>
            <p>In addition the <code>fn:number</code> function is available to convert strings
            to values of type <code>xs:double</code>. It differs from the <code>xs:double</code>
            constructor function in that any value outside the lexical space of the <code>xs:double</code>
            datatype is converted to the <code>xs:double</code> value <code>NaN</code>.</p>
            <?local-function-index?>
            <div3 id="func-number">
               <head><?function fn:number?></head>
            </div3>
         </div2>
		 <div2 id="formatting-integers">
	       <head>Formatting integers</head>
		    
		    <?local-function-index?>
				
		   <div3 id="func-format-integer">
               <head><?function fn:format-integer?></head>
           </div3>
		</div2>




		<div2 id="formatting-numbers">
            <head>Formatting numbers</head>
			
			   
         <p>This section defines a function for formatting decimal and floating point numbers.</p>
		   
		   <?local-function-index?>
		   
		   <note>
		      <p>This function can be used to format any numeric quantity, including an integer. For integers, however,
		         the <code>fn:format-integer</code> function offers additional possibilities. Note also that the picture
		         strings used by the two functions are not 100% compatible, though they share some options in common.</p>
		   </note>
	
            <div3 id="defining-decimal-format">
               <head>Defining a decimal format</head>

<p>Decimal formats are defined in the static context, and the way they are defined is therefore outside the scope
of this specification. XSLT and XQuery both provide custom syntax for creating a decimal format.</p>

<p>The static context provides a set of decimal formats. One of the decimal formats is unnamed, the others (if any)
   are identified by a QName. There is always an unnamed decimal format available, but its contents are 
   <termref def="implementation-defined"/>.</p>

<p>Each decimal format provides a set of named properties, described in the following table:</p>

<table role="no-code-break longlastcol data">
<thead>
<tr><th>Name</th><th>Type</th><th>Usage (non-normative)</th></tr>
</thead>
<tbody>

<tr><td><code>decimal-separator</code></td>
   <td>A single <termref def="character">character</termref></td>
   <td>Defines the character used to represent the decimal point (typically ".") both in the picture string and in the formatted number.</td>
</tr>

   <tr><td><code>grouping-separator</code></td>
      <td>A single <termref def="character">character</termref></td>
      <td>Defines the character used to separate groups of digits (typically ",") both in the picture string and in the formatted number.</td>
</tr>
   
   <tr><td><code>exponent-separator</code></td>
      <td>A single <termref def="character">character</termref></td>
      <td>Defines the character used to separate the mantissa from the exponent
         in scientific notation (typically "e") both in the picture string and in the formatted number.</td>
   </tr>

   <tr><td><code>infinity</code></td>
      <td>A <termref def="string">string</termref></td>
      <td>Defines the string used to represent the value positive or negative infinity in the formatted number (typically "Infinity")</td>
</tr>

   <tr><td><code>minus-sign</code></td>
      <td>A single <termref def="character">character</termref></td>
      <td>Defines the character used as a minus sign in the formatted number if there is no subpicture for formatting negative numbers (typically "-", x2D)</td>
</tr>

   <tr><td><code>NaN</code></td>
      <td>A <termref def="string">string</termref></td>
      <td>Defines the string used to represent the value <code>NaN</code> in the formatted number</td>
</tr>

   <tr><td><code>percent</code></td>
      <td>A single <termref def="character">character</termref></td>
      <td>Defines the character used as a percent sign (typically "%") both in the picture string and in the formatted number</td>
</tr>

   <tr><td><code>per-mille</code></td>
      <td>A single <termref def="character">character</termref></td>
      <td>Defines the character used as a per-mille sign (typically "&#x2030;", x2030) both in the picture string and in the formatted number</td>
</tr>

   <tr><td><code>zero-digit</code></td>
      <td>A single <termref def="character">character</termref>, which must be a character in Unicode category Nd with decimal digit value 0 (zero)</td>
      <td>Defines the characters used in the picture string to represent a mandatory digit: for example, if the zero-digit is "0" then any of the
         digits "0" to "9" may be used (interchangeably) in the picture string to represent a mandatory digit, and in the formatted number the characters "0" to "9" will
         be used to represent the digits zero to nine.</td>
</tr>

   <tr><td><code>digit</code></td>
      <td>A single <termref def="character">character</termref></td>
      <td>Defines the character used in the picture string to represent an optional digit (typically "#")</td>
</tr>

   <tr><td><code>pattern-separator</code></td>
      <td>A single <termref def="character">character</termref></td>
      <td>Defines the character used in the picture string to separate the positive and negative subpictures (typically ";")</td>
</tr>
</tbody>
</table>
               
<note><p>A phrase such as "The <xtermref spec="XP31" ref="id-static-decimal-format-minus-sign">minus-sign</xtermref> character" is to be read as 
   "the character assigned to the <xtermref spec="XP31" ref="id-static-decimal-format-minus-sign">minus-sign</xtermref>
property in the relevant decimal format within the static context".</p></note>               

<p><termdef id="dt-decimal-digit-family" term="digit family">The <term>decimal digit family</term> of a decimal format 
is the sequence of ten digits with
consecutive Unicode <termref def="codepoint">codepoints</termref> starting with the character that is the value of the 
   <xtermref spec="XP31" ref="id-static-decimal-format-zero-digit">zero-digit</xtermref> property.</termdef></p>
               
               <p><termdef id="dt-optional-digit-character" term="optional digit character">The <term>optional digit character</term> is
                  the character that is the value of the 
                  <xtermref spec="XP31" ref="id-static-decimal-format-digit">digit</xtermref> property.</termdef></p>               

<p>For any named or unnamed decimal format, the properties
representing characters used in a <termref def="dt-picture-string">picture string</termref>
   must have distinct values. These properties are <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref> ,
   <xtermref spec="XP31" ref="id-static-decimal-format-grouping-separator">grouping-separator</xtermref>, 
   <xtermref spec="XP31" ref="id-static-decimal-format-exponent-separator">exponent-separator</xtermref>,
   <xtermref spec="XP31" ref="id-static-decimal-format-percent">percent</xtermref>, <xtermref spec="XP31" ref="id-static-decimal-format-per-mille">per-mille</xtermref>,
<xtermref spec="XP31" ref="id-static-decimal-format-digit">digit</xtermref>, and <xtermref spec="XP31" ref="id-static-decimal-format-pattern-separator">pattern-separator</xtermref>.
   Furthermore, none of these properties may be equal to any <termref def="character">character</termref> in the 
<termref def="dt-decimal-digit-family">decimal digit family</termref>.

</p>

            </div3>
		   
		   <div3 id="func-format-number">
		      <head><?function fn:format-number?></head>
		   </div3>
		   
            <div3 id="syntax-of-picture-string">
               <head>Syntax of the picture string</head>
			   <note><p>This differs from the <code>format-number</code> function previously defined in XSLT 2.0 in that
			   any digit can be used in the picture string to represent a mandatory digit: for example the picture
			   strings '000', '001', and '999' are equivalent. The digits will all be from the same decimal digit family,
			   specifically, the sequence of ten consecutive digits starting with the digit assigned to the <var>zero-digit</var> property.
			      This change is to align <code>format-number</code> 
			   (which previously used '000') with <code>format-dateTime</code> (which used '001').</p></note>
               <p>
                  <termdef id="dt-picture-string" term="picture string">The formatting of a 
number is controlled by a <term>picture string</term>. The
                     picture string is a sequence of <termref def="character">characters</termref>, in which the characters
                     assigned to the properties <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref> , 
                     <xtermref spec="XP31" ref="id-static-decimal-format-exponent-separator">exponent-separator</xtermref>, 
                     <xtermref spec="XP31" ref="id-static-decimal-format-grouping-separator">grouping-separator</xtermref>, and
                     <xtermref spec="XP31" ref="id-static-decimal-format-digit">digit</xtermref>, 
                     and <xtermref spec="XP31" ref="id-static-decimal-format-pattern-separator">pattern-separator</xtermref> 
                     and the members of the <termref def="dt-decimal-digit-family">decimal digit family</termref>, are classified as
active characters, and all other characters (including the values of the properties <xtermref spec="XP31" ref="id-static-decimal-format-percent">percent</xtermref> and 
<xtermref spec="XP31" ref="id-static-decimal-format-per-mille">per-mille</xtermref>) are classified as passive characters.</termdef> 

               </p>
               
               <p>A dynamic error is raised <errorref class="DF" code="1310"/> if the
 <termref def="dt-picture-string">picture string</termref> does not conform to the following rules. 
               Note that in these
rules the words "preceded" and "followed" refer to characters anywhere in the string, they
are not to be read as "immediately preceded" and "immediately followed".</p>
               <ulist>
                  <item>
                     <p>A picture-string consists either of a sub-picture, or of
        two sub-pictures separated by the <xtermref spec="XP31" ref="id-static-decimal-format-pattern-separator">pattern-separator</xtermref> character. A picture-string
        <rfc2119>must not</rfc2119> contain more than one instance of the <xtermref spec="XP31" ref="id-static-decimal-format-pattern-separator">pattern-separator</xtermref> character. 
                        If the picture-string contains two
        sub-pictures, the first is used for positive and unsigned zero values and the second for negative values.</p>
                  </item>
                  <item>
                     <p>A sub-picture <rfc2119>must not</rfc2119> contain more than one instance of the 
                        <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref> character.</p>
                  </item>
                  <item>
                     <p>A sub-picture <rfc2119>must not</rfc2119> contain more than one instance of the 
                        <xtermref spec="XP31" ref="id-static-decimal-format-percent">percent</xtermref> or
        <xtermref spec="XP31" ref="id-static-decimal-format-per-mille">per-mille</xtermref> characters, and it <rfc2119>must not</rfc2119> contain one of each.</p>
                  </item>
                  <item>
                     <p>The <var>mantissa part</var> of a
                        sub-picture (defined below) <rfc2119>must</rfc2119> contain at least one character that is either 
                        an <termref def="dt-optional-digit-character">optional digit character</termref>
                        or a member of the <termref def="dt-decimal-digit-family">decimal digit family</termref>.</p>
                  </item>
                  <item>
                     <p>A sub-picture <rfc2119>must not</rfc2119> contain a passive character that is preceded by
        an active character and that is followed by another active character.</p>
                  </item>
                  <item>
                     <p>A sub-picture <rfc2119>must not</rfc2119> contain a <xtermref spec="XP31" ref="id-static-decimal-format-grouping-separator">grouping-separator</xtermref> 
                        character that appears adjacent to                        
                         a <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref>  character, 
                         or in the absence of a 
                           <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref>  character, 
                           at the end of the <var>integer part</var>.</p>
                  </item>
                  <item>
                     <p>A sub-picture <rfc2119>must not</rfc2119> contain two adjacent instances of the <xtermref spec="XP31" ref="id-static-decimal-format-grouping-separator">grouping-separator</xtermref> character.</p>
                  </item>
                  <item>
                     <p>The <var>integer part</var> of a sub-picture (defined below) <rfc2119>must not</rfc2119> contain 
                        a member of the <termref def="dt-decimal-digit-family">decimal digit family</termref> 
					 that is followed by
					 an instance of the <termref def="dt-optional-digit-character">optional digit character</termref>. 
                        The <var>fractional part</var> of a sub-picture (defined below) <rfc2119>must not</rfc2119> contain an instance of the 
                        <termref def="dt-optional-digit-character">optional digit character</termref>
                        that is followed by a member of the <termref def="dt-decimal-digit-family">decimal digit family</termref>.</p>
                  </item>
                  <item><p>A character that matches the <xtermref spec="XP31" ref="id-static-decimal-format-exponent-separator">exponent-separator</xtermref> property
                  is treated as an <var>exponent-separator-sign</var> if it is both preceded and followed
                  within the sub-picture by an active character. Otherwise, it is treated as a passive character. 
                  A sub-picture <rfc2119>must not</rfc2119> contain more than one character that is treated as an <var>exponent-separator-sign</var>.
                  </p></item>
                  <item><p>A sub-picture that contains a <xtermref spec="XP31" ref="id-static-decimal-format-percent">percent</xtermref> or
                     <xtermref spec="XP31" ref="id-static-decimal-format-per-mille">per-mille</xtermref> character <rfc2119>must not</rfc2119> contain a character treated as an
                     <var>exponent-separator-sign</var>.</p>
                  </item>
                  <item><p>If a sub-picture contains a character treated as an
                     <var>exponent-separator-sign</var> then this <rfc2119>must</rfc2119> be followed by
                     one or more characters that are members of the <termref def="dt-decimal-digit-family">decimal digit family</termref>,
                     and it <rfc2119>must not</rfc2119> be followed by any active character
                     that is not a member of the <termref def="dt-decimal-digit-family">decimal digit family</termref>.</p></item>
                     
               </ulist>
               
               <p>The <var>mantissa part</var> of the sub-picture is defined as the part that appears
               to the left of the <var>exponent-separator-sign</var> if there is one, or the entire
               sub-picture otherwise. The <var>exponent part</var> of the subpicture is defined as
                  the part that appears to the right of the <var>exponent-separator-sign</var>;
                  if there is no <var>exponent-separator-sign</var> then the <var>exponent part</var>
               is absent.</p>
               
               <p>The <var>integer part</var> of the sub-picture is defined as the part that
                  appears to the left of the <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref>  character if there is one, or the entire
                  <var>mantissa part</var> otherwise.</p> 
               
               <p>The <var>fractional part</var> of the sub-picture is defined as that
                  part of the <var>mantissa part</var> that
                  appears to the right of the <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref>  character if there is one, or the part that appears
                  to the right of the rightmost active character otherwise. The fractional part may be zero-length.</p>

            </div3>
            <div3 id="analyzing-picture-string">
               <head>Analyzing the picture string</head>
               <p>This phase of the algorithm analyzes 
                  the <termref def="dt-picture-string">picture string</termref> and the properties from the selected
decimal format in the static context, and it has the effect
of setting the values of various variables, which are used in the
subsequent formatting phase. These variables are listed below.
Each is shown with its initial setting and its datatype.
					</p>
               <p>Several variables are associated with each sub-picture. If there are
two sub-pictures, then these rules are applied to one sub-picture to obtain the values
that apply to positive and unsigned zero numbers, and to the other to obtain the values that apply
to negative numbers. If there is only one sub-picture, then the values for both cases
are derived from this sub-picture.</p>
               <p>The variables are as follows:</p>
               <ulist>
                  <item>
                     <p>The <var>integer-part-grouping-positions</var> is a sequence of integers
representing the positions of grouping separators within the integer part of the
sub-picture. For each <xtermref spec="XP31" ref="id-static-decimal-format-grouping-separator">grouping-separator</xtermref> character that appears within the
integer part of the sub-picture, this sequence contains an integer that is equal
to the total number of <termref def="dt-optional-digit-character">optional digit character</termref> and <termref def="dt-decimal-digit-family">decimal digit family</termref>
characters that appear within the integer part of the sub-picture and to the right of the 
<xtermref spec="XP31" ref="id-static-decimal-format-grouping-separator">grouping-separator</xtermref> character.</p>
                     <p>The grouping is defined to be <term>regular</term> if the following conditions apply:</p>
                     <olist>
                        <item><p>There is an least one grouping-separator in the integer part of the sub-picture.</p></item>
                        <item><p>There is a positive integer <var>G</var> (the grouping size) such that the position of every grouping-separator
                        in the integer part of the sub-picture is a positive integer multiple of <var>G</var>.</p></item>
                        <item><p>Every position in the integer part of the sub-picture that is a positive integer multiple of <var>G</var>
                        is occupied by a grouping-separator.</p></item>
                     </olist>
                     <p>If the grouping is regular, then the <var>integer-part-grouping-positions</var> sequence contains all
integer multiples of <var>G</var> as far as necessary to accommodate the largest 
possible number.</p>
                  </item>
                  <item>
                     <p>The <var>minimum-integer-part-size</var> is an integer indicating the minimum number of digits that will
 appear to the left of the <var>decimal-separator</var> character. It is initially set to 
 the number of <termref def="dt-decimal-digit-family">decimal digit family</termref> characters found in the integer part of the sub-picture,
                        but may be adjusted as described below. </p>
                     <note>
                        <p>There is no maximum integer part size. All significant digits in the integer part of the
                           number will be displayed, even if this exceeds the number of <termref def="dt-optional-digit-character">optional digit character</termref> and
 <termref def="dt-decimal-digit-family">decimal digit family</termref> characters in the subpicture.</p>
                     </note>
                  </item>
                  <item>
                     <p>The <var>scaling factor</var> is a non-negative integer used to determine the scaling of the mantissa
                        in exponential notation. It is set to the number of <termref def="dt-decimal-digit-family">decimal digit family</termref> 
                        characters found in the integer part of the sub-picture.</p>
                  </item>
                  <item>
                     <p>The <var>prefix</var> is set to contain all passive characters
in the sub-picture to the left of the leftmost active character.
If the picture string contains only one sub-picture, 
the <var>prefix</var> 
for the negative sub-picture is set by concatenating the <xtermref spec="XP31" ref="id-static-decimal-format-minus-sign">minus-sign</xtermref> 
character and the <var>prefix</var> for the positive sub-picture (if any),
in that order.</p>
                  </item>
                  <item>
                     <p>The <var>fractional-part-grouping-positions</var> is a sequence of integers
representing the positions of grouping separators within the fractional part of the
sub-picture. For each <xtermref spec="XP31" ref="id-static-decimal-format-grouping-separator">grouping-separator</xtermref> character that appears within the
fractional part of the sub-picture, this sequence contains an integer that is equal
to the total number of <termref def="dt-optional-digit-character">optional digit character</termref> and <termref def="dt-decimal-digit-family">decimal digit family</termref> 
characters that appear within the fractional part of the sub-picture and to the left of the 
<xtermref spec="XP31" ref="id-static-decimal-format-grouping-separator">grouping-separator</xtermref> character.</p>
                     <note><p>There is no need to extrapolate grouping positions on the fractional side,
                     because the number of digits in the output will never exceed the number of 
                        <termref def="dt-optional-digit-character">optional digit character</termref> and <termref def="dt-decimal-digit-family">decimal digit family</termref> characters
                     in the fractional part of the sub-picture.</p></note>
                  </item>
                  <item>
                     <p>The <var>minimum-fractional-part-size</var> is set to the number of 
<termref def="dt-decimal-digit-family">decimal digit family</termref> characters found in the fractional part of the sub-picture.</p>
                  </item>
                  <item>
                     <p>The <var>maximum-fractional-part-size</var> is set to the total number of 
                        <termref def="dt-optional-digit-character">optional digit character</termref> and 
                        <termref def="dt-decimal-digit-family">decimal digit family</termref> characters found 
                        in the fractional part of the sub-picture.</p>
                  </item>
                  <item>
                     <p>If the effect of the above rules is that <var>minimum-integer-part-size</var> and 
                        <var>maximum-fractional-part-size</var> are both zero, then an adjustment is applied as follows:</p>
                     <ulist>
                        <item><p>If an exponent separator is present then:</p>
                          <ulist>
                           <item><p><var>minimum-fractional-part-size</var> is changed to 1 (one).</p></item>
                           <item><p><var>maximum-fractional-part-size</var> is changed to 1 (one).</p></item>
                          </ulist>
                           <note><p>This has the effect that with the picture <code>#.e9</code>, the value <code>0.123</code> is formatted as <code>0.1e0</code></p></note>
                        </item>
                        <item><p>Otherwise:</p>
                          <ulist>
                           <item><p><var>minimum-integer-part-size</var> is changed to 1 (one).</p></item>
                          </ulist>
                           <note><p>This has the effect that with the picture <code>#</code>, the value <code>0.23</code> is formatted
                              as <code>0</code></p></note>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>If all the following conditions are true:</p>
                     <ulist>
                        <item><p>An exponent separator is present</p></item>
                        <item><p>The <var>minimum-integer-part-size</var> is zero</p></item>
                        <item><p>There is at least one <termref def="dt-optional-digit-character">optional digit character</termref> 
                           in the integer part of the sub-picture</p></item>
                     </ulist>
                     <p>then the <var>minimum-integer-part-size</var> is changed to 1 (one).</p>
                     <note><p>This has the effect that with the picture <code>.9e9</code>, the value <code>0.1</code> is formatted
                        as <code>.1e0</code>, while with the picture <code>#.9e9</code>, it is formatted as <code>0.1e0</code></p></note>
                  </item>
                  <item>
                     <p>If (after making the above adjustments) the <var>minimum-integer-part-size</var> and the 
                        <var>minimum-fractional-part-size</var> are both zero, then the <var>minimum-fractional-part-size</var> is set to 1 (one).</p>
                  </item>
                  <item>
                     <p>The <var>minimum-exponent-size</var> is set to the number of 
                        <termref def="dt-decimal-digit-family">decimal digit family</termref> characters found in the exponent part of the sub-picture
                     if present, or zero otherwise.</p>
                     <note><p>The rules for the syntax of the picture string ensure that if an exponent
                        separator is present, then the <var>minimum-exponent-size</var> will always be greater than zero.</p></note>
                  </item>
                  <item>
                     <p>The <var>suffix</var> is set to contain all passive characters to the right of the rightmost
active character in the sub-picture.</p>
                  </item>
               </ulist>
               <note>
                  <p>If there is only one sub-picture, then all variables
for positive numbers and negative numbers will be the same, except for  
<var>prefix</var>: the prefix for negative numbers will 
be preceded by the <xtermref spec="XP31" ref="id-static-decimal-format-minus-sign">minus-sign</xtermref> character.</p>
               </note>
            </div3>
            <div3 id="formatting-the-number">
               <head>Formatting the number</head>
               <p>This section describes the second phase of processing of the
<code>fn:format-number</code> function. This phase takes as input a number to be formatted
(referred to as the <emph>input number</emph>), and the variables set up by
analyzing the decimal format in the static context and the
<termref def="dt-picture-string">picture string</termref>, as described above.
 The result of this phase is a string, which forms the return value of 
the <code>fn:format-number</code> function.</p>
               <p>The algorithm for this second stage of processing is as follows:</p>
               <olist>
                  <item>
                     <p>If the input number is NaN (not a number), the result is the 
							 value of the <xtermref spec="XP31" ref="id-static-decimal-format-NaN">pattern separator</xtermref> property (with no
<var>prefix</var> or <var>suffix</var>).</p>
                  </item>
                  <item>
                     <p>In the rules below, the positive sub-picture and its associated variables are used 
							 if the input number is positive, and the negative sub-picture and its associated
                      variables are used if it is negative. For <code>xs:double</code> and <code>xs:float</code>,
                      negative zero is taken as negative, positive zero as positive. For <code>xs:decimal</code>
                     and <code>xs:integer</code>, the positive sub-picture is used for zero.</p>
                  </item>
                  
                  <item>
                     <p>The <var>adjusted number</var> is determined as follows:</p>
                     <ulist>
                        <item><p>If the sub-picture contains a <xtermref spec="XP31" ref="id-static-decimal-format-percent">percent</xtermref> character, 
                           the <var>adjusted number</var> is the input number multiplied by 100.</p></item>
                        <item><p>If the sub-picture contains a <xtermref spec="XP31" ref="id-static-decimal-format-per-mille">per-mille</xtermref> character, 
                           the <var>adjusted number</var> is the input number multiplied by 1000.</p></item>
                        <item><p>Otherwise, the <var>adjusted number</var> is the input number.</p></item>
                     </ulist>
                     <p>If the multiplication causes numeric overflow, no error occurs, and the 
                        <var>adjusted number</var> is positive or negative infinity as appropriate.</p>
                         
                  </item>
                  
                  <item>
                     <p>If the <var>adjusted number</var> is positive or negative infinity, the result is the 
                        concatenation of the appropriate <var>prefix</var>, the value of the <xtermref spec="XP31" ref="id-static-decimal-format-infinity">infinity</xtermref> property,
                        and the appropriate <var>suffix</var>.</p>
                  </item>
                  <item>
                     <p>If the <var>minimum exponent size</var> is non-zero, 
                        <phrase diff="add" at="A">and the <var>adjusted number</var> is non-zero,</phrase> 
                        then the <var>adjusted number</var> is scaled to establish a 
                        <var>mantissa</var> and an integer <var>exponent</var>. The <var>mantissa</var> and <var>exponent</var> are chosen 
                        such that all the following conditions are true:</p>
                     <ulist>
                        <item><p>The primitive type of the <var>mantissa</var> is the same as the primitive type of the <var>adjusted number</var> (integer, decimal, float, or double).</p></item>
                        <item><p>The <var>mantissa</var> multiplied by ten to the power of the exp<var></var>onent is equal to the <var>adjusted number</var>.</p></item>
                        <item><p>The <var>mantissa</var> <phrase diff="add" at="B"><!--https://github.com/w3c/qtspecs/issues/22-->(unless it is zero)</phrase> 
                           is less than 10<sup>N</sup>, and at least 10<sup>N-1</sup>, where <var>N</var> is the <var>scaling factor</var>.</p></item>
                     </ulist>
                     <p>If the <var>minimum exponent size</var> is zero, then the <var>mantissa</var> is the <var>adjusted number</var> 
                        and there is no <var>exponent</var>.</p>
                     <p diff="add" at="A">If the <var>minimum exponent size</var> is non-zero and the <var>adjusted number</var> is zero,
                        then the <var>mantissa</var> is the <var>adjusted number</var> and the <var>exponent</var> is zero.</p>
                    
                  </item>
                  <item>
                     <p>The <var>mantissa</var> is converted (if necessary) to
 an <code>xs:decimal</code> value,
using an implementation of <code>xs:decimal</code> that imposes no limits on the
<code>totalDigits</code> or <code>fractionDigits</code> facets. If there are several 
such values that
are numerically equal to the <var>mantissa</var> (bearing in mind that if the
<var>mantissa</var> is an <code>xs:double</code> or <code>xs:float</code>, the comparison will be done by
converting the decimal value back to an <code>xs:double</code> or <code>xs:float</code>), the one that
is chosen <rfc2119>should</rfc2119> be one with the smallest possible number of digits
not counting leading or trailing zeroes (whether significant or insignificant). 
For example, 1.0 is preferred to
0.9999999999, and 100000000 is preferred to 100000001. This value is then
rounded so that it uses no more than <code>maximum-fractional-part-size</code> digits in
its fractional part. The <var>rounded number</var> is defined to be the result of
converting the <var>mantissa</var> to an <code>xs:decimal</code> value, as described above,
and then calling the function <code>fn:round-half-to-even</code> with this converted number
as the first argument and the <code>maximum-fractional-part-size</code> as the second
argument, again with no limits on the <code>totalDigits</code> or <code>fractionDigits</code> in the
result.</p>
                  </item>
                  <item>                    
                     <p>The absolute value of the <var>rounded number</var> is converted to a string in decimal notation, 
                        using the digits in the <termref def="dt-decimal-digit-family">decimal digit family</termref> to 
                        represent the ten decimal digits, and the <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref> 
                        character to separate the integer part and the fractional part. This string must always contain a 
                        <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref>, 
                        and it must contain no leading zeroes and no trailing zeroes. The value zero will at this stage be 
                        represented by a <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref> 
                        on its own.</p>
                  </item>
                  <item>
                     <p>If the number of digits to the left of the <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref>  character is less than
<var>minimum-integer-part-size</var>, leading <xtermref spec="XP31" ref="id-static-decimal-format-zero-digit">zero digit</xtermref> 
characters are added to pad out to that size.</p>
                  </item>
                  <item>
                     <p>If the number of digits to the right of the <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref>  character is less than
<var>minimum-fractional-part-size</var>, trailing <xtermref spec="XP31" ref="id-static-decimal-format-zero-digit">zero digit</xtermref> 
characters are added to pad out to that size.</p>
                  </item>
                  <item>
                     <p>For each integer <var>N</var> in the <var>integer-part-grouping-positions</var> list,  
a <xtermref spec="XP31" ref="id-static-decimal-format-grouping-separator">grouping-separator</xtermref> character is inserted into the string immediately
after that digit that appears in the integer part of the number and has <var>N</var> digits
between it and the <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref>  character, if there is such a digit.</p>
                  </item>
                  <item>
                     <p>For each integer <var>N</var> in the <var>fractional-part-grouping-positions</var> list,  
a <xtermref spec="XP31" ref="id-static-decimal-format-grouping-separator">grouping-separator</xtermref> character is inserted into the string immediately
before that digit that appears in the fractional part of the number and has <var>N</var> digits
between it and the <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref>  character, if there is such a digit.</p>
                  </item>
                  <item>
                     <p>If there is no <xtermref spec="XP31" ref="id-static-decimal-format-decimal-separator">decimal-separator</xtermref>  character in the sub-picture, 
or if there are no digits to the right of the 
<var>decimal-separator</var> character in the string, then the
<var>decimal-separator</var> character is removed from the string (it will be the rightmost 
character in the string).</p>
                  </item>
                  <item><p>If an <var>exponent</var> exists, then the string
                  produced from the <var>mantissa</var> as described above is extended with
                     the following, in order:
                  (a) the <xtermref spec="XP31" ref="id-static-decimal-format-exponent-separator">exponent-separator</xtermref> character; (b) if the <var>exponent</var> is negative,
                  the <xtermref spec="XP31" ref="id-static-decimal-format-minus-sign">minus-sign</xtermref> character; (c) the value of the <var>exponent</var> represented
                  as a decimal integer, extended if necessary with leading zeroes to make it up to
                  the <var>minimum exponent size</var>, using digits taken from the
                  <termref def="dt-decimal-digit-family">decimal digit family</termref>.</p></item>
                  <item>
                     <p>The result of the function is the concatenation of the appropriate <var>prefix</var>, the 
string conversion of the number as obtained above, and the appropriate <var>suffix</var>.</p>
                  </item>
               </olist>
            </div3>
         </div2>
		 <div2 id="trigonometry">
            <head>Trigonometric and exponential functions</head>
			

			<p>The functions in this section perform trigonometric and other mathematical calculations on <code>xs:double</code> values. They
			are provided primarily for use in applications performing geometrical computation, for example when generating 
			SVG graphics.</p>

			<p>Functions are provided to support the six most commonly used trigonometric calculations: sine, cosine and tangent, 
			and their inverses arc sine, arc cosine, and arc tangent. Other functions such as secant, cosecant, and cotangent are
			not provided because they are easily computed in terms of these six.</p>
		    
		   <p>The functions in this section (with the exception of <code>math:pi</code>) 
		      are specified by reference to <bibref ref="ieee754-2008"/>, where
		   they appear as <emph>Recommended operations</emph> in section 9. IEEE defines
		   these functions for a variety of floating point formats; this specification
		   defines them only for <code>xs:double</code> values. The IEEE specification
		   applies with the following caveats:</p>
		    
		    <olist>
		       <item><p>IEEE states that the preferred quantum is language-defined. In this
		       specification, it is <termref def="implementation-defined"/>.</p></item>
		       
		       <item><p>IEEE states that certain functions should raise the inexact exception if the
		          result is inexact. 
		          In this specification, this exception if it occurs does not
		          result in an error. Any diagnostic information is outside the scope of this
		          specification.</p></item>
		       <item><p>IEEE defines various rounding algorithms for inexact results, and states
		          that the choice of rounding direction, and the mechanisms for influencing this choice,
		          are language-defined. In this specification, the rounding direction and any mechanisms for
		          influencing it are <termref def="implementation-defined"/>.</p></item>
		       <item><p>Certain operations (such as taking the square root of a negative number)
		          are defined in IEEE to signal the invalid operation exception and return a
		          quiet NaN. In this specification, such operations return <code>NaN</code>
		          and do not raise an error. The same policy applies to operations (such as taking
		          the logarithm of zero) that raise a divide-by-zero exception. Any diagnostic 
		          information is outside the scope of this specification. </p></item>
		       <item><p>Operations whose mathematical result is greater than the largest finite <code>xs:double</code>
		          value are defined in IEEE to signal the overflow exception; operations whose mathematical
		          result is closer to zero than the smallest non-zero <code>xs:double</code> value are similarly
		       defined in IEEE to signal the underflow exception. The treatment of these exceptions in
		       this specification is defined in <specref ref="op.numeric"/>.</p></item>
		    </olist>
		       

		    <?local-function-index?>
			
		    <p></p>
    
    
			   <div3 id="func-math-pi">
               <head><?function math:pi?></head>
			   </div3>
		    <div3 id="func-math-exp">
		         <head><?function math:exp?></head>
		      </div3>
		    <div3 id="func-math-exp10">
		       <head><?function math:exp10?></head>
		    </div3>
		    <div3 id="func-math-log">
		       <head><?function math:log?></head>
		    </div3>
		    <div3 id="func-math-log10">
		       <head><?function math:log10?></head>
		    </div3>
		    <div3 id="func-math-pow">
		       <head><?function math:pow?></head>
		    </div3>
		    <div3 id="func-math-sqrt">
               <head><?function math:sqrt?></head>
		      </div3>
		    <div3 id="func-math-sin">
              <head><?function math:sin?></head>
		      </div3>
		    <div3 id="func-math-cos">
              <head><?function math:cos?></head>
		      </div3>
		    <div3 id="func-math-tan">
              <head><?function math:tan?></head>
		      </div3>
		    <div3 id="func-math-asin">
              <head><?function math:asin?></head>
            </div3>
		    <div3 id="func-math-acos">
              <head><?function math:acos?></head>
		      </div3>
		    <div3 id="func-math-atan">
              <head><?function math:atan?></head>
            </div3>
		    <div3 id="func-math-atan2">
		       <head><?function math:atan2?></head>
		    </div3>
		   </div2>
         <div2 id="random-numbers">
            <head>Random Numbers</head>
            <?local-function-index?>
            <div3 id="func-random-number-generator">
               <head><?function fn:random-number-generator?></head>
            </div3>
         </div2>
      </div1>
      <div1 id="string-functions">
         <head>Functions on strings</head>
         <p>This section specifies functions and operators on the <bibref ref="xmlschema-2"/>
                <code>xs:string</code> datatype and the datatypes derived from it.</p>
         <div2 id="string-types">
            <head>String types</head>
            <p>The operators described in this section are defined on the following types. Each
                    type whose name is indented is derived from the type whose name appears nearest
                    above with one less level of indentation.</p>
            <table border="0" summary="Type summary" role="hierarchy">
               <tbody>
                  <tr>
                     <td>xs:string</td>
                  </tr>
                  <tr>
                     <td/>
                     <td>xs:normalizedString</td>
                  </tr>
                  <tr>
                     <td/>
                     <td/>
                     <td>xs:token</td>
                  </tr>
                  <tr>
                     <td/>
                     <td/>
                     <td/>
                     <td>xs:language</td>
                  </tr>
                  <tr>
                     <td/>
                     <td/>
                     <td/>
                     <td>xs:NMTOKEN</td>
                  </tr>
                  <tr>
                     <td/>
                     <td/>
                     <td/>
                     <td>xs:Name</td>
                  </tr>
                  <tr>
                     <td/>
                     <td/>
                     <td/>
                     <td/>
                     <td>xs:NCName</td>
                  </tr>
                  <tr>
                     <td/>
                     <td/>
                     <td/>
                     <td/>
                     <td/>
                     <td>xs:ID</td>
                  </tr>
                  <tr>
                     <td/>
                     <td/>
                     <td/>
                     <td/>
                     <td/>
                     <td>xs:IDREF</td>
                  </tr>
                  <tr>
                     <td/>
                     <td/>
                     <td/>
                     <td/>
                     <td/>
                     <td>xs:ENTITY</td>
                  </tr>
               </tbody>
            </table>
            <p>They also apply to user-defined types derived by restriction from the above types. </p>
            
         </div2>
         <div2 id="func-assemble-disassemble-string">
            <head>Functions to assemble and disassemble strings</head>
            <?local-function-index?>
            <div3 id="func-codepoints-to-string">
               <head><?function fn:codepoints-to-string?></head>
            </div3>
            <div3 id="func-string-to-codepoints">
				<head><?function fn:string-to-codepoints?></head>
            </div3>
         </div2>
         <div2 id="string-compare">
            <head>Comparison of strings</head>
            <?local-function-index?>
            <div3 id="collations">
               <head>Collations</head>
               <p> A collation is a specification of the manner in which <termref def="string">strings</termref> are
                        compared and, by extension, ordered. When values whose type is
                        <code>xs:string</code> or a type derived from <code>xs:string</code> are
                        compared (or, equivalently, sorted), the comparisons are inherently
                        performed according to some collation (even if that collation is defined
                        entirely on codepoint values). The <bibref ref="charmod"/> observes that
                        some applications may require different comparison and ordering behaviors
                        than other applications. Similarly, some users having particular linguistic
                        expectations may require different behaviors than other users. Consequently,
                        the collation must be taken into account when comparing strings in any
                        context. Several functions in this and the following section make use of a
                        collation. </p>
               <p>Collations can indicate that two different codepoints are, in fact, equal
                        for comparison purposes (e.g., "v" and "w" are considered equivalent in
                        some Swedish collations). Strings can be compared codepoint-by-codepoint or in a
                        linguistically appropriate manner, as defined by the collation. </p>
               <p>Some collations, especially those based on the 
                  Unicode Collation Algorithm (see <bibref ref="UNICODE-TR10"/>) can be "tailored" for various purposes. This
                        document does not discuss such tailoring, nor does it provide a mechanism to
                        perform tailoring. Instead, it assumes that the collation argument to the
                        various functions below is a tailored and named collation.</p>
               <p>The <termref def="dt-codepoint-collation">Unicode codepoint collation</termref> is a collation
                  available in every implementation, which sorts based on codepoint values. For further details
                  see <specref ref="codepoint-collation"/>.</p>

               
               <p>Collations may or may not perform Unicode normalization on strings before comparing them.</p>
               <p>This specification assumes that collations are named and that the collation
                        name may be provided as an argument to string functions. Functions that
                        allow specification of a collation do so with an argument whose type is
                        <code>xs:string</code> but whose lexical form must conform to an
                        <code>xs:anyURI</code>. If the collation is specified using a relative URI reference, 
                  it is resolved relative to the value of the
                     static base URI property from the static context. 
                  This specification also defines the manner in which a
                        default collation is determined if the collation argument is not specified
                        in calls of functions that use a collation but allow it to be omitted. </p>
               <p>This specification does not define whether or not the collation URI is
					dereferenced. The collation URI may be an abstract identifier, or it may
					refer to an actual resource describing the collation. If it refers to a
					resource, this specification does not define the nature of that resource.
					One possible candidate is that the resource is a locale description
					expressed using the Locale Data Markup Language: see <bibref ref="UNICODE-TR35"/>.
					</p>
               <p>Functions such as <code>fn:compare</code> and <code>fn:max</code> that
                        compare <code>xs:string</code> values use a single collation URI to identify
                        all aspects of the collation rules. This means that any parameters such as
                        the strength of the collation must be specified as part of the collation
                        URI. For example, suppose there is a collation 
                            <code>http://www.example.com/collations/French</code>
                         that refers to a French collation that compares on the basis of
                        base characters. Collations that use the same basic rules, but with higher
                        strengths, for example, base characters and accents, or base characters,
                        accents and case, would need to be given different names, say 
                            <code>http://www.example.com/collations/French1</code>
                         and 
                            <code>http://www.example.com/collations/French2</code>. 
                  Note that some specifications use the term collation to refer to
                        an algorithm that can be parameterized, but in this specification, each
                        possible parameterization is considered to be a distinct collation.</p>
               <p>The XQuery/XPath static context includes a provision for a default collation
                        that can be used for string comparisons and ordering operations. See the
                        description of the static context in <xspecref spec="XP31" ref="static_context"/>. 
						If the default collation is not specified by the
                        user or the system, the default collation is the <termref def="dt-codepoint-collation">Unicode codepoint collation</termref>.</p>
               <note>
                  <p>XML allows elements to specify the <code>xml:lang</code> attribute to
                     indicate the language associated with the content of such an element.
                     This specification does not use <code>xml:lang</code> to identify the
                     default collation because using
                     <code>xml:lang</code> does not produce desired effects when the two
                     strings to be compared have different <code>xml:lang</code> values or
                     when a string is multilingual. </p>
               </note> 
            </div3>
            <div3 id="codepoint-collation">
               <head>The Unicode Codepoint Collation</head>
               <p><termdef id="dt-codepoint-collation" term="Unicode codepoint collation">The collation URI
                  <code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code> identifies
               a collation which must be recognized by every implementation: it is referred to as
               the <term>Unicode codepoint collation</term> (not to be confused with the Unicode collation algorithm).</termdef></p>
               
               <p>The Unicode codepoint collation does not perform any normalization on the
               supplied strings.</p> 
               
               <p>The collation is defined as follows. Each of the two strings is
               converted to a sequence of integers using the <code>fn:string-to-codepoints</code>
               function. These two sequences <code>$A</code> and <code>$B</code> are then compared as follows: </p>
               
               <ulist>
                  <item><p>If both sequences are empty, the strings are equal.</p></item>                
                  <item><p>If one sequence is empty and the other is not, then the string
                     corresponding to the empty sequence is less than the other string.</p></item>
                  <item><p>If the first integer in <code>$A</code> is less than the first integer in <code>$B</code>, then
                     the string corresponding to <code>$A</code> is less than the string corresponding to
                     <code>$B</code>.
                  </p></item>
                  <item><p>If the first integer in <code>$A</code> is greater than the first integer in <code>$B</code>, then
                     the string corresponding to <code>$A</code> is greater than the string corresponding to
                     <code>$B</code>.</p></item>
                  <item><p>Otherwise (the first pair of integers are equal), the result is obtained
                    by applying the same rules recursively to <code>fn:tail($A)</code> and
                    <code>fn:tail($B)</code></p></item>
               </ulist>
               
               <note><p>While the Unicode codepoint collation does not produce results suitable for quality publishing of
               printed indexes or directories, it is adequate for many purposes where a restricted alphabet
               is used, such as sorting of vehicle registrations.</p></note>
            </div3>
            <div3 id="uca-collations">
               <head>The Unicode Collation Algorithm</head>
               
               <p>This specification defines a family of collation URIs representing tailorings of the Unicode Collation
                  Algorithm (UCA) as defined in <bibref ref="UNICODE-TR10"/>. The parameters used for tailoring the UCA
                  are based on the parameters defined in the Locale Data Markup Language (LDML), defined in <bibref ref="UNICODE-TR35"/>.</p>
               
               <p>This family of URIs use the scheme and path <code>http://www.w3.org/2013/collation/UCA</code>
                  followed by an optional query part. The query part, if present, consists of a question mark followed
                  by a sequence of zero or more semicolon-separated parameters. Each parameter is a keyword-value pair, the
                  keyword and value being separated by an equals sign.</p>
               
               <p>All implementations must recognize URIs in this family in the <code>collation</code> argument of functions that
                  take a collation argument.</p> 
                  
               <p>If the <code>fallback</code> parameter is
                  present with the value <code>no</code>, then the implementation <rfc2119>must</rfc2119> either use a collation that conforms with
                  the rules in the Unicode specifications for the requested tailoring, or fail with a static or dynamic error indicating that it
                  does not provide the collation (the error code should be the same as if the collation URI were not recognized). 
                  If the <code>fallback</code> parameter
                  is omitted or takes the value <code>yes</code>, and if the collation URI is well-formed according to the rules in this section,
                  then the implementation <rfc2119>must</rfc2119> accept the collation URI, and <rfc2119>should</rfc2119> use the available
                  collation that most closely reflects the user's intentions. For example, if the collation URI requested is
                  <code>http://www.w3.org/2013/collation/UCA?lang=se;fallback=yes</code> and the implementation does not include a fully
                  conformant version of the UCA tailored for Swedish, then it <rfc2119>may</rfc2119> choose to use a Swedish collation that is known to differ
                  from the UCA definition, or one whose conformance has not been established. It might even, as a last resort, fall back to using
                  codepoint collation.</p>
               <p>If two query parameters use the same keyword then the last one wins. If a query parameter uses a keyword or value which is not
                  defined in this specification then the meaning is <termref def="implementation-defined"/>. If the implementation recognizes
                  the meaning of the keyword and value then it <rfc2119>should</rfc2119> interpret it accordingly; if it does not recognize
                  the keyword or value then if the <code>fallback</code> parameter is present with the value <code>no</code> it should reject
                  the collation as unsupported, otherwise it should ignore the unrecognized parameter.</p>
               
               <p>The following query parameters are defined. If any parameter is absent, the default is <termref def="implementation-defined"/>
                  except where otherwise stated.
                  The meaning given for each parameter is non-normative; the normative specification is found in <bibref ref="UNICODE-TR35"/>.</p>
               
               <table role="longlastcol data">
                  <thead>
                     <tr><th>Keyword</th><th>Values</th><th>Meaning</th></tr>
                  </thead>
                  <tbody>
                     <tr><td>fallback</td><td>yes | no (default yes)</td><td>Determines whether the processor uses a fallback collation if a conformant collation is not available.</td></tr>
                     <tr><td>lang</td><td>language code: a string in the lexical space of <code>xs:language</code>.</td><td>The language whose collation conventions are to be used.</td></tr>
                     <tr><td>version</td><td>string</td><td>The version number of the UCA to be used.</td></tr>
                     <tr><td>strength (default tertiary)</td><td>primary | secondary | tertiary | quaternary | identical, or 
                        1|2|3|4|5 as synonyms</td><td>The collation strength as defined in UCA. Primary 
                           strength takes only the base form of the character into account (so A=a=&Aumlaut;=&aumlaut;); secondary strength ignores case but considers accents
                           and diacritics as significant (so A=a and &Aumlaut;=&aumlaut; but &aumlaut;&ne;a); tertiary considers case as significant (A&ne;a&ne;&Aumlaut;&ne;&aumlaut;); quaternary considers 
                           spaces and punctuation that would otherwise be ignored (for example <code>data-base</code>=<code>database</code>).</td></tr>
                     <tr><td>maxVariable</td><td>space | punct | symbol | currency (default punct)</td><td>
                        Indicates that all characters in the specified group and earlier groups are treated as "noise" characters 
                        to be handled as defined by the <code>alternate</code> parameter. For example, <code>maxVariable=punct</code> indicates 
                        that characters classified as whitespace or punctuation get this treatment.</td></tr>
                     <tr><td>alternate</td><td>non-ignorable | shifted | blanked (default non-ignorable)</td><td>Controls the handling of characters such as spaces and hyphens;
                     specifically, the "noise" characters in the groups selected by the <code>maxVariable</code> parameter. The value <code>non-ignorable</code>
                     indicates that such characters are treated as distinct at the primary level (so <code>data base</code> sorts before <code>datatype</code>);
                     <code>shifted</code> indicates that they are used to differentiate two strings only at the <code>quaternary</code> level,
                     and <code>blanked</code> indicates that they are taken into account only at the <code>identical</code> level.</td></tr>
                     <tr><td>backwards</td><td>yes | no (default no)</td><td>The value <code>backwards=yes</code> indicates that the last accent in the 
                           string is the most significant.</td></tr>
                     <tr><td>normalization</td><td>yes | no (default no)</td><td>Indicates whether strings 
                           are converted to normalization form D.</td></tr>
                     <tr><td>caseLevel</td><td>yes | no (default no)</td><td>When used with primary strength, setting <code>caseLevel=yes</code> has the effect of ignoring accents
                        while taking account of case.</td></tr>
                     <tr><td>caseFirst</td><td>upper | lower</td><td>Indicates whether upper-case precedes lower-case or vice versa.</td></tr>
                     <tr><td>numeric</td><td>yes | no (default no)</td><td>When <code>numeric=yes</code> is specified, a sequence of consecutive digits is interpreted as a number,
                        for example <code>chap2</code> sorts before <code>chap12</code>.</td></tr>
                     <tr><td>reorder</td><td>a comma-separated sequence of reorder codes, where a reorder code is one of <code>space</code>, <code>punct</code>,
                        <code>symbol</code>, <code>currency</code>, <code>digit</code>, or a four-letter script code defined in <bibref ref="ISO15924_register"/>, the register
                        of scripts maintained by the Unicode Consortium in its capacity as registration authority for <bibref ref="ISO15924"/>.</td>
                        <td>Determines the relative ordering of text in different scripts; for example the value <code>digit,Grek,Latn</code> indicates
                           that digits precede Greek letters, which precede Latin letters.</td></tr>
                     
                     
                  </tbody>
               </table>
               
               <note><p>This list excludes parameters that are inconvenient to express in a URI, or that are applicable only to substring matching.</p></note>
            </div3>
            <div3 id="html-ascii-case-insensitive-collation">
               <head>The HTML ASCII Case-Insensitive Collation</head>
              
               <p>The collation URI <code>http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive</code> must be recognized
                  by every implementation. It is used
               to refer to the HTML ASCII case-insensitive collation as defined in <bibref ref="html5"/> (section 4.16.2, <emph>Case-sensitivity
               of selectors</emph>). It is used, for example, when matching HTML <code>class</code> attribute values.</p>
               
               <note>
                  <p>The definition of the collation is paraphrased here for convenience:</p>
                  
                  <p>Comparing two strings in an ASCII case-insensitive manner means comparing them exactly, 
                     codepoint for codepoint, except that the characters in the range x41 to x5A (A-Z) 
                     and the corresponding characters in the range x61 to x7A (a-z) are considered to also match.</p>
               </note>
               
               <p>HTML5 defines the semantics of equality matching using this collation; it does not define rules for ordering. If the collation
               is used for ordering, the results are <termref def="implementation-defined"/>. The collation supports collation units and can therefore
               be used with functions such as <code>fn:contains</code>; each Unicode codepoint is a single collation unit.</p>
            </div3>
			<div3 id="choosing-a-collation">
				<head>Choosing a collation</head>
			   <p>Many functions have two signatures, where one signature includes a <code>$collation</code>
			   argument and the other omits this argument.</p>

               <p>The collation to use for these functions is determined by the following rules:</p>
               <olist>
                  <item>
                     <p>If the function specifies an explicit collation, CollationA (e.g., if
                                the optional collation argument is specified in a call of the
                                <code>fn:compare</code> function), then:</p>
                     <ulist>
                        <item>
                           <p>If CollationA is supported by the implementation, then
                                        CollationA is used. </p>
                        </item>
                        <item>
                           <p>Otherwise, a dynamic error is raised <errorref class="CH" code="0002"/>. </p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>If no collation is explicitly specified for the function and the
                                default collation in the XQuery/XPath static context is CollationB, then:</p>
                     <ulist>
                        <item>
                           <p>If CollationB is supported by the implementation, then
                                        CollationB is used. </p>
                        </item>
                        <item>
                           <p>Otherwise, a dynamic error is raised <errorref class="CH" code="0002"/>. </p>
                        </item>
                     </ulist>
                  </item>
               </olist>
			   
			   <note><p>Because the set of collations that are supported is <termref def="implementation-defined">implementation-defined</termref>,
			   an implementation has the option to support all collation URIs, in which case it will never raise this error.</p></note>
            
			   <p>If the value of the collation argument is a relative URI reference, it is resolved against the base-URI from the
			      static context. If it is a relative URI reference and cannot be resolved, perhaps because the base-URI property in the static context
			      is absent, a dynamic error is raised <errorref class="CH" code="0002"/>.</p>
			   
			   <note><p>There is no explicit requirement that the string used as a collation URI be a valid URI.
			   Implementations will in many cases reject such strings on the grounds that do not identify a supported collation; they
			   may also cause an error if they cannot be resolved against the static base URI.</p></note>
            
            </div3>
            <div3 id="func-compare">
               <head><?function fn:compare?></head>
            </div3>
            <div3 id="func-codepoint-equal">
               <head><?function fn:codepoint-equal?></head>
            </div3>
            <div3 id="func-collation-key">
               <head><?function fn:collation-key?></head>
            </div3>
            <div3 id="func-contains-token">
               <head><?function fn:contains-token?></head>
            </div3>
         </div2>
         <div2 id="string-value-functions">
            <head>Functions on string values</head>
            <p>The following functions are defined on values of type <code>xs:string</code> and
                    types derived from it.</p>
            <?local-function-index?>
            <notes>
               <p>When the above operators and functions are applied to datatypes derived from
                        <code>xs:string</code>, they are guaranteed to return values that are instances of
                        <code>xs:string</code>, but the value might or might not be an instance of the
                        particular subtype of <code>xs:string</code> to which they were applied. </p>
               <p>The strings returned by <code>fn:concat</code> and <code>fn:string-join</code> are not guaranteed to be normalized.  
			   But see note in <code>fn:concat</code>.
                </p>
            </notes>
            <div3 id="func-char" diff="add" at="2022-11-19">
               <head><?function fn:char?></head>
            </div3>
            <div3 id="func-characters" diff="add" at="A">
               <head><?function fn:characters?></head>
            </div3>
            <div3 id="func-concat">
               <head><?function fn:concat?></head>
            </div3>
            <div3 id="func-string-join">
               <head><?function fn:string-join?></head>
            </div3>
            <div3 id="func-substring">
			   <head><?function fn:substring?></head>
            </div3>
            <div3 id="func-string-length">
               <head><?function fn:string-length?></head>              
            </div3>
            <div3 id="func-normalize-space">
               <head><?function fn:normalize-space?></head>
            </div3>
            <div3 id="func-normalize-unicode">
               <head><?function fn:normalize-unicode?></head>
            </div3>
            <div3 id="func-upper-case">
               <head><?function fn:upper-case?></head>
            </div3>
            <div3 id="func-lower-case">
               <head><?function fn:lower-case?></head>
            </div3>
            <div3 id="func-translate">
               <head><?function fn:translate?></head>
            </div3>
         </div2>
         <div2 id="substring.functions">
            <head>Functions based on substring matching</head>
            <p>The functions described in the section examine a string <code>$arg1</code> to see
                    whether it contains another string <code>$arg2</code> as a substring. The result
                    depends on whether <code>$arg2</code> is a substring of <code>$arg1</code>, and
               if so, on the range of <termref def="character">characters</termref> in <code>$arg1</code> which <code>$arg2</code> matches.</p>
            <p>When the <termref def="dt-codepoint-collation">Unicode codepoint collation</termref>
                    is used, this simply involves determining whether <code>$arg1</code> contains a
               contiguous sequence of characters whose <termref def="codepoint">codepoints</termref> are the same, one for one,
                    with the codepoints of the characters in <code>$arg2</code>.</p>
            <p>When a collation is specified, the rules are more complex.</p>
            <p>All collations support the capability of deciding whether two <termref def="string">strings</termref> are
                    considered equal, and if not, which of the strings should be regarded as
                    preceding the other. For functions such as <code>fn:compare</code>, this is
                    all that is required. For other functions, such as <code>fn:contains</code>,
                    the collation needs to support an additional property: it must be able to
                    decompose the string into a sequence of collation units, each unit consisting of
                    one or more characters, such that two strings can be compared by pairwise
                    comparison of these units. ("collation unit" is equivalent to "collation
                    element" as defined in <bibref ref="UNICODE-TR10"/>.) The string
                    <code>$arg1</code> is then considered to contain <code>$arg2</code> as a
                    substring if the sequence of collation units corresponding to <code>$arg2</code>
                    is a subsequence of the sequence of the collation units corresponding to
                    <code>$arg1</code>. The characters in <code>$arg1</code> that match are the
                    characters corresponding to these collation units.</p>
            <p>This rule may occasionally lead to surprises. For example, consider a collation
                    that treats "Jaeger" and "J&aumlaut;ger" as equal. It might do this by
                    treating "&aumlaut;" as representing two collation units, in which case the
                        expression <code>fn:contains("J&aumlaut;ger", "eg")</code> will return
                    <code>true</code>. Alternatively, a collation might treat "ae" as a single
                    collation unit, in which case the expression <code>fn:contains("Jaeger",
                    "eg")</code> will return <code>false</code>. The results of these functions thus
                    depend strongly on the properties of the collation that is used.</p>
				<p>In addition,
                    collations may specify that some collation units should be ignored during matching. If hyphen is an ignored
					collation unit, then <code>fn:contains("code-point", "codepoint")</code> will be true, 
					and <code>fn:contains("codepoint", "-")</code> will also be true.</p>
            <p> In the definitions below, we refer to the terms <term>match</term> and
                    <term>minimal match</term> as defined in definitions DS2 and DS4 of 
                    <bibref ref="UNICODE-TR10"/>. In applying these definitions:</p>
            <ulist>
               <item>
                  <p>
                     <var>C</var> is the collation; that is, the value of the <code>$collation</code>
                    argument if specified, otherwise the default collation.</p>
               </item>
               <item>
                  <p>
                     <var>P</var> is the (candidate) substring <code>$arg2</code>
                  </p>
               </item>
               <item>
                  <p>
                     <var>Q</var> is the (candidate) containing string <code>$arg1</code>
                  </p>
               </item>
               <item>
                  <p>The boundary condition <var>B</var> is satisfied at the start and end of a
                    string, and between any two characters that belong to different collation units
                    ("collation elements" in the language of <bibref ref="UNICODE-TR10"/>). It
                    is not satisfied between two characters that belong to the same collation unit.</p>
               </item>
            </ulist>
            <p>It is possible to define collations that do not have the ability to decompose a
                    string into units suitable for substring matching. An argument to a function
                    defined in this section may be a URI that identifies a collation that is able to
                    compare two strings, but that does not have the capability to split the string
                    into collation units. Such a collation may cause the function to fail, or to
                    give unexpected results or it may be rejected as an unsuitable argument. The
                    ability to decompose strings into collation units is an <termref def="implementation-defined"/> property of the collation.</p>
            <?local-function-index?>
            <div3 id="func-contains">
               <head><?function fn:contains?></head>
            </div3>
            <div3 id="func-starts-with">
               <head><?function fn:starts-with?></head>
            </div3>
            <div3 id="func-ends-with">
               <head><?function fn:ends-with?></head>
            </div3>
            <div3 id="func-substring-before">
               <head><?function fn:substring-before?></head>
            </div3>
            <div3 id="func-substring-after">
               <head><?function fn:substring-after?></head>
            </div3>
         </div2>
         <div2 id="string.match">
            <head>String functions that use regular expressions</head>
            <p>The three functions described in this section make use of a regular expression
                    syntax for pattern matching. This is described below.</p>
            <?local-function-index?>
            <div3 id="regex-syntax">
               <head>Regular expression syntax</head>
               <p>The regular expression syntax used by these functions is defined in terms of
                        the regular expression syntax specified in XML Schema (see <bibref ref="xmlschema-2"/>), which in turn is based on the established conventions of
                        languages such as Perl. However, because XML Schema uses regular expressions
                        only for validity checking, it omits some facilities that are widely used
                        with languages such as Perl. This section, therefore, describes extensions
                        to the XML Schema regular expressions syntax that reinstate these capabilities.</p>
               <note>
                  <p>
It is recommended that implementers consult <bibref ref="UNICODE-TR18"/> for information on using regular expression processing on Unicode characters.</p>
               </note>
               <p>The regular expression syntax and semantics are identical to those
                            defined in <bibref ref="xmlschema-2"/> with the additions described in the 
                  following sub-sections.</p>
               
               <note><p>In <bibref ref="xmlschema11-2"/> there are no substantive technical changes
                  to the syntax or semantics of regular expressions relative to XSD 1.0, but a number
                  of errors and ambiguities have been resolved. For example, the rules for the 
                  interpretation of hyphens within square brackets in a regular expression have been 
                  clarified; and the semantics of regular expressions are no longer tied to a specific 
                  version of Unicode.</p>
               <p>Implementers, even in cases where XSD 1.1 is not supported, are advised to consult
               the XSD 1.1 regular expression specification for guidance on how to handle cases where
               the XSD 1.0 specification is unclear or inconsistent.</p>
               </note>
 
 <div4 id="matching-start-and-end">
    <head>Matching the Start and End of the String</head>
 
               
                     <p> Two meta-characters, <code>^</code> and <code>$</code> are
                                    added. By default, the meta-character <code>^</code> matches the
                                    start of the entire string, while <code>$</code> matches the end
                                    of the entire string. In multi-line mode, <code>^</code> matches
                                    the start of any line (that is, the start of the entire string,
                                    and the position immediately after a newline character), while
                                    <code>$</code> matches the end of any line (that is, the end of
                                    the entire string, and the position immediately before a newline
                                    character). Newline here means the character <code>#x0A</code> only.</p>
                     <p>This means that the production in <bibref ref="xmlschema-2"/>:</p>
                     <p><code>[10] Char ::= [^.\?*+()|#x5B#x5D]</code>
                                </p>
                     <p>is modified to read:</p>
                     <p><code>[10] Char ::= [^.\?*+{}()|^$#x5B#x5D]</code>
                     </p>
                     <p>The XSD 1.1 grammar for regular expressions uses the same
                     production rule, but renumbered and renamed <code>[73] NormalChar</code>; it
                     is affected in the same way.</p>
                     <p>The characters <code>#x5B</code> and <code>#x5D</code> correspond
                                    to "<code>[</code>" and "<code>]</code>" respectively.</p>
                     <note>
                        <p>The definition of Char (production [10]) in <bibref ref="xmlschema-2"/> has a known error in which it omits the left brace ("{") and right brace ("}").  That error is corrected here.</p>
                     </note>
                     <p>The following production:</p>
                     <p><code>[11] charClass ::= charClassEsc | charClassExpr | WildCardEsc</code>
                                </p>
                     <p>is modified to read:</p>
                     <p><code>[11] charClass ::= charClassEsc | charClassExpr |
                                        WildCardEsc | "^" | "$"</code>
                     </p>
                     <p>Using XSD 1.1 as the baseline the equivalent is to change
                     the production:</p>
                     <p><code>[74] charClass ::= SingleCharEsc | charClassEsc | charClassExpr | WildCardEsc</code>
                     </p>
                     <p>to read:</p>
                     <p><code>[74] charClass ::= SingleCharEsc | charClassEsc | charClassExpr |
                        WildCardEsc | "^" | "$"</code>
                     </p>
    <p>Single character escapes are extended to allow the
       <code>$</code> character to be escaped. The following production
       is changed:</p>
    <p>
       <code>[24]SingleCharEsc ::= '\' [nrt\|.?*+(){}#x2D#x5B#x5D#x5E]</code>
    </p>
    <p>to</p>
    <p>
       <code>[24]SingleCharEsc ::= '\' [nrt\|.?*+(){}$#x2D#x5B#x5D#x5E]</code>
    </p>
    <p>(In the XSD 1.1 version of the regular expression grammar, the production rule
       for <code>SingleCharEsc</code> is unchanged, but is renumbered [84])</p>
 </div4>
               <div4 id="reluctant-quantifiers">
                  <head>Reluctant Quantifiers</head>
               
                     <p><emph>Reluctant quantifiers</emph> are supported. They are
                                    indicated by a 
                                        <code>?</code>
                                     following a quantifier. Specifically:</p>
                     <ulist>
                        <item>
                           <p><code>X??</code> matches X, once or not at all</p>
                        </item>
                        <item>
                           <p><code>X*?</code> matches X, zero or more times</p>
                        </item>
                        <item>
                           <p><code>X+?</code> matches X, one or more times</p>
                        </item>
                        <item>
                           <p><code>X{n}?</code> matches X, exactly n times</p>
                        </item>
                        <item>
                           <p><code>X{n,}?</code> matches X, at least n times</p>
                        </item>
                        <item>
                           <p><code>X{n,m}?</code> matches X, at least n times, but
                                            not more than m times</p>
                        </item>
                     </ulist>
                     <p>The effect of these quantifiers is that the regular expression
                                    matches the <emph>shortest</emph> possible substring consistent
                                    with the match as a whole succeeding. Without the 
                                        <code>?</code>
                                    , the regular expression matches the
                                    <emph>longest</emph> possible substring.</p>
                     <p>To achieve this, the production in <bibref ref="xmlschema-2"/>:</p>
                     <p><code>[4] quantifier ::= [?*+] | ( '{' quantity '}' )</code>
                                </p>
                     <p>is changed to:</p>
                     <p><code>[4] quantifier ::= ( [?*+] | ( '{' quantity '}' ) ) '?'?</code>
                     </p>
                     <p>(In the XSD 1.1 version of the regular expression grammar,
                     this rule is unchanged, but is renumbered [67])</p>
                     <note>
                        <p>Reluctant quantifiers have no effect on the results of the
                                        boolean <code>fn:matches</code> function, since this
                                        function is only interested in discovering whether a match
                                        exists, and not where it exists.</p>
                     </note>
               </div4>
               <div4 id="captured-subexpressions">
                  <head>Captured Sub-Expressions</head>
               
               <p>Sub-expressions (groups) within the regular expression are
                        recognized. The regular expression syntax defined by <bibref ref="xmlschema-2"/> 
						      allows a regular expression to contain parenthesized sub-expressions, but attaches no special
                        significance to them. Some operations associated with regular expressions (for example,
                           back-references, and the <code>fn:replace</code> function) allow access to the parts of the
                           input string that matched a sub-expression (called captured substrings).<!-- bug 17160 --></p>
                     
                     <p><termdef id="dt-capturing-subexpression" term="capturing sub-expression">A 
                        left parenthesis is recognized as a capturing left parenthesis provided 
                        it is not immediately followed by <code>?:</code> (see below), is not within a character group (square brackets), 
                        and is not escaped with a backslash. The sub-expression enclosed by a capturing left 
                        parenthesis and its matching right parenthesis is referred to as a <term>capturing sub-expression</term>.</termdef></p>
                     
                     <p>More specifically, the <termref def="dt-capturing-subexpression">capturing sub-expression</termref> 
                        enclosed by the <var>N</var>th capturing left parenthesis within the regular expression (determined by
                        its character position in left-to-right order, and
                        counting from one) is referred to as the <var>N</var>th capturing sub-expression.
                     </p>
                     
                     <p>For example, in the regular expression <code>A(BC(?:D(EF(GH[()]))))</code>, the string matched
                        by the sub-expression <code>BC(?:D(EF(GH[()])))</code> is capturing sub-expression 1, the string
                        matched by <code>EF(GH[()])</code> is capturing sub-expression 2, and the string matched by
                        <code>GH[()]</code> is capturing sub-expression 3.
                     </p>
                     
                     <p>When, in the course of evaluating a regular expression, a particular substring of the input
                     matches a capturing sub-expression, that substring becomes available as a <term>captured substring</term>.
                        The string matched by the <var>N</var>th capturing sub-expression is referred to as the 
                        <var>N</var>th captured substring. By convention, the substring captured by the entire
                        regular expression is treated as captured substring 0 (zero).</p>
                     
                     
                     
                     <p>When a <termref def="dt-capturing-subexpression">capturing sub-expression</termref> is matched
                        more than once (because it is within a construct that allows repetition), then
                        only the last substring that it matched will be captured. Note that this rule
                        is not sufficient in all cases to ensure an unambiguous result, especially in
                        cases where (a) the regular expression contains nested repeating constructs,
                        and/or (b) the repeating construct matches a zero-length string. In such cases
                        it is implementation-dependent which substring is captured. For example given
                        the regular expression <code>(a*)+</code> and the input string <code>"aaaa"</code>, an implementation
                        might legitimately capture either <code>"aaaa"</code> or a zero length string as the content
                        of the captured subgroup.</p><!-- bug 17160 -->
                     
                     
                     <p>Parentheses that are required to group terms within the regular expression, but which are
                        not required for capturing of substrings, can be represented using
                        the syntax <code>(?:xxxx)</code>. To achieve this, the production rule for <code>atom</code>
                        in <bibref ref="xmlschema-2"/> is changed to replace the alternative:</p>
                     
                     <p><code>( '(' regExp ')' )</code>
                     </p>
                     <p>with:</p>
                     <p><code>( '(' '?:'? regExp ')' )</code>
                     </p>
                     <p>(For the new versions of the XSD 1.0 and XSD 1.1 production rules for
                     <code>atom</code>, see below.)</p>
                     <p>In the absence of back-references (see below), 
                        the presence of the optional <code>?:</code> has no effect on the set of strings
                     that match the regular expression, but causes the left parenthesis not to be counted
                     by operations (such as <code>fn:replace</code> and back-references) that number the capturing sub-expressions 
                        within a regular expression.</p>
                  </div4>
               <div4 id="back-references">
                  <head>Back-References</head>
               <!--Text replaced by erratum E24 change 1"--><p> Back-references are allowed 
			    outside a character class expression. 
				A back-reference is an additional kind of atom.
				The construct <code>\N</code> where
                <code>N</code> is a single digit is always recognized as a
                back-reference; if this is followed by further digits, these
                digits are taken to be part of the back-reference if and only if
                the resulting number <var>NN</var> is such that
				    the back-reference is preceded by the opening parenthesis of the <var>NN</var>th 
                capturing left parenthesis.
				The regular expression is invalid if a back-reference refers to a
				capturing sub-expression that does not exist or whose
                closing right parenthesis occurs after the back-reference.
                     </p>
                     <p>A back-reference with number <var>N</var> matches a string that is the same as
                        the value of the <code>N</code>th captured substring.</p>
				 
                <p>For example, the regular expression
                <code>('|").*\1</code> matches a sequence of characters
                delimited either by an apostrophe at the start and end, or by a
                quotation mark at the start and end. </p>
                     <p>If no string has been matched by the <code>N</code>th capturing 
               sub-expression, the back-reference is interpreted as matching 
               a zero-length string.</p>
                     <p>Combining this change with the introduction of
                        non-capturing groups (see above), back-references change the following production:</p>
                     <p>
                           <code>[9] atom ::= Char | charClass | ( '(' regExp ')' )</code>
                     </p>
                     <p>to</p>
                     <p>
                           <code>[9] atom ::= Char | charClass | ( '(' '?:'? regExp ')' ) | backReference</code>
                     </p>
                     <p>
                           <code>[9a] backReference ::= "\" [1-9][0-9]*</code>
                     </p>
                     <p>With respect to the XSD 1.1 version of the regular expression grammar,
                     the effect is to change:</p>
                     
                     <p>
                           <code>[72] atom ::= NormalChar | charClass | ( '(' regExp ')' )</code>
                     </p>
                     <p>to</p>
                     <p>
                           <code>[72] atom ::= NormalChar | charClass | ( '(' '?:'? regExp ')' ) | backReference</code>
                     </p>
                     <p>
                           <code>[72a] backReference ::= "\" [1-9][0-9]*</code>
                     </p>
                     <note>
                        <p>
                           Within a character class expression, 
                              <code>\</code> followed by a digit is invalid.
			 Some other regular expression languages interpret this as an octal character reference.
                        </p>
                     </note>
                     <!--End of text replaced by erratum E24-->
               </div4>
                 <div4 id="unicode-block-names">
                    <head>Unicode Block Names</head>
                 
              
                     <p>A regular expression that uses a Unicode block name that is not defined in the version(s) of Unicode
                     supported by the processor (for example <code>\p{IsBadBlockName}</code>) is deemed to be invalid
                        <errorref class="RX" code="0002"/>.</p>
                     <note><p>XSD 1.0 does not say how this situation should be handled; XSD 1.1
                        says that it should be handled by treating all characters as matching.</p></note>
                 </div4> 
            </div3>
               
               <div3 id="flags">
                  <head>Flags</head>
                  <p>All these functions provide an optional parameter, <code>$flags</code>,
                    to set options for the interpretation of the regular expression. The
                    parameter accepts a <code>xs:string</code>, in which individual letters
                    are used to set options. The presence of a letter within the string
                    indicates that the option is on; its absence indicates that the option
                    is off. Letters may appear in any order and may be repeated. If there
                    are characters present that are not defined here as flags, then a dynamic error
                    is raised <errorref class="RX" code="0001"/>.</p>
                  <p>The following options are defined:</p>
                  <ulist>
                     <item>
                        <p><code>s</code>: If present, the match operates in "dot-all"
                        mode. (Perl calls this the single-line mode.) If the
                        <code>s</code> flag is not specified, the meta-character
                        <code>.</code> matches any character except a newline
                        (<code>#x0A</code>) or carriage return (<code>#x0D</code>) 
                        character. In dot-all mode, the
                        meta-character <code>.</code> matches any character whatsoever.
                        Suppose the input contains "hello" and "world" on two lines.
                        This will not be matched by the regular expression
                        "hello.*world" unless dot-all mode is enabled.</p>
                     </item>
                     <item><!--Text replaced by erratum E7 change 1"--><p>
                           <code>m</code>: If present, the match operates in multi-line
			            mode. By default, the meta-character <code>^</code> matches the
			            start of the entire string, while $ matches the end of the
			            entire string. In multi-line mode, <code>^</code> matches the
			            start of any line (that is, the start of the entire string, and
			            the position immediately after a newline character
						other than a newline
			            that appears as the last character in the string), while
			            <code>$</code> matches the end of any line 
						(that is, the position immediately
			            before a newline character, and the end of the entire string if there is no
			            newline character at the end of the string).
			            Newline here means the character <code>#x0A</code> only.</p>
                        <!--End of text replaced by erratum E7--></item>
                     <item>
                        <p><code>i</code>: If present, the match operates in
                        case-insensitive mode. The detailed rules are as follows. 
                        In these
                        rules, a character C2 is considered to be a <emph>case-variant</emph> of 
                        another character C1 if the following XPath expression returns 
                        <code>true</code> when the two characters
                           are considered as strings of length one, and the 
                           <termref def="dt-codepoint-collation">Unicode codepoint collation</termref> is used:</p>
                        <p>
                           <code>fn:lower-case(C1) eq fn:lower-case(C2) or
                        fn:upper-case(C1) eq fn:upper-case(C2)</code>
                        </p>
                        <p>
                                     Note that the case-variants of a character under this definition 
                                     are always single characters.</p>
                        <olist>
                           <item>
                              <p>
                                    When a normal character (<code>Char</code>) is used as an atom, 
                                    it represents 
                                    the set containing that character and all its case-variants. 
                                    For example, the regular expression "z" will match both "z" and 
                                    "Z".</p>
                           </item>
                           <item>
                              <p>
                                    A character range (production <code>charRange</code>
                                    in the XSD 1.0 grammar, replaced by productions <code>charRange</code> and <code>singleChar</code>
                                    in XSD 1.1) represents the set 
                                    containing all the characters that it would match in the absence 
                                    of the "<code>i</code>" flag, together with their case-variants. 
                                    For example, 
                                    the regular expression "[A-Z]" will match all
                                    the letters A-Z and all the letters a-z. It will also match 
                                    certain other characters such as <code>#x212A</code> (KELVIN SIGN), since 
                                    <code>fn:lower-case("#x212A")</code> is "k".</p>
                              <p>
                                    This rule applies also to a character range used in a character 
                                    class subtraction (<code>charClassSub</code>): thus [A-Z-[IO]] will match 
                                    characters such as "A", "B", "a", and "b", but will not match 
                                    "I", "O", "i", or "o".</p>
                              <p>
                                    The rule also applies to a character range used as part of a 
                                    negative character group: thus [^Q] will match every character 
                                    except "Q" and "q" (these being the only case-variants of "Q" in 
                                    Unicode).</p>
                           </item>
                           <item>
                              <p>
                                    A back-reference is compared using case-blind comparison: 
                                    that is, each character must either be the same as the 
                                    corresponding character of the previously matched string, or must 
                                    be a case-variant of that character. For example, the strings 
                                    "Mum", "mom", "Dad", and "DUD" all match the regular
                                    expression "([md])[aeiou]\1" when the "<code>i</code>" flag is used.</p>
                           </item>
                           <item>
                              <p>
                                    All other constructs are unaffected by the "<code>i</code>" flag. 
                                    For example, 
                                    "\p{Lu}" continues to match upper-case letters only.</p>
                           </item>
                        </olist>
                     </item>
                     <item>
                        <p><code>x</code>: If present, whitespace characters 
                                    (#x9, #xA, #xD and #x20) in the regular 
                                    expression are removed prior to matching with one exception:  
                                    whitespace characters within character class expressions 
                                    (<code>charClassExpr</code>) are not removed. This flag can be used, 
                                    for example, to break up long regular expressions into readable lines.</p>
                        <p> Examples:</p>
                        <p> 
                           <code>fn:matches("helloworld", "hello world", "x")</code> returns <code>true()</code>
                        </p>
                        <p> 
                           <code>fn:matches("helloworld", "hello[ ]world", "x")</code> returns <code>false()</code>
                        </p>
                        <p> 
                           <code>fn:matches("hello world", "hello\ sworld", "x")</code> returns <code>true()</code>
                        </p>
                        <p> 
                           <code>fn:matches("hello world", "hello world", "x")</code> returns <code>false()</code>
                        </p>
                     </item>
                     <item><p><code>q</code>: if present, all characters in the regular expression
                     are treated as representing themselves, not as metacharacters. In effect, every
                     character that would normally have a special meaning in a regular expression is implicitly escaped
                     by preceding it with a backslash.</p>
                         <p>Furthermore, when this flag is present, the characters <code>$</code> and
                         <code>\</code> have no special significance when used in the replacement string
                         supplied to the <code>fn:replace</code> function.</p>
                        <p>This flag can be used in conjunction with the <code>i</code> flag. If it is used
                           together with the <code>m</code>, <code>s</code>, or <code>x</code> flag, that flag
                           has no effect.</p>
                        <p>Examples:</p>
                        <p><code>fn:tokenize("12.3.5.6", ".", "q")</code> returns <code>("12", "3", "5", "6")</code></p>
                        <p><code>fn:replace("a\b\c", "\", "\\", "q")</code> returns <code>"a\\b\\c"</code></p>
                        <p><code>fn:replace("a/b/c", "/", "$", "q")</code> returns <code>"a$b$c"</code></p>
                        <p><code>fn:matches("abcd", ".*", "q")</code> returns <code>false()</code></p>
                        <p><code>fn:matches("Mr. B. Obama", "B. OBAMA", "iq")</code> returns <code>true()</code></p>
                     </item>
                  </ulist>
               </div3>
          
            <div3 id="func-matches">
               <head><?function fn:matches?></head>
            </div3>
            <div3 id="func-replace">
               <head><?function fn:replace?></head>
            </div3>
			   <div3 id="func-tokenize">
               <head><?function fn:tokenize?></head>
			   </div3>
            <div3 id="func-analyze-string">
               <head><?function fn:analyze-string?></head>
            </div3>
            <!--<div3 id="func-replace-with" diff="add" at="A">
               <head><?function fn:replace-with?></head>
            </div3>-->
         </div2>
      </div1>
      <div1 id="anyURI-functions">
         <head>Functions that manipulate URIs</head>
         <p>This section specifies functions that manipulate URI values, either as instances
            of <code>xs:anyURI</code> or as strings.</p>
         <?local-function-index?>
         <div2 id="func-resolve-uri">
		   <head><?function fn:resolve-uri?></head>
         </div2>
         <div2 id="func-encode-for-uri">
            <head><?function fn:encode-for-uri?></head>
         </div2>
         <div2 id="func-iri-to-uri">
            <head><?function fn:iri-to-uri?></head>
         </div2>
         <div2 id="func-escape-html-uri">
            <head><?function fn:escape-html-uri?></head>
         </div2>
         <div2 id="parse-build">
           <head>Parsing and building URIs</head>

         <p>This section specifies functions that parse strings as
         URIs, to identify their structure, and construct URI strings
         from their structured representation.</p>

         <?local-function-index?>

           <p>The structured representation of a URI is described by the
           <code>uri-structure-record</code>:</p>

           <example role="record">
             <record id="uri-structure-record">
               <arg name="uri?" type="xs:string"/>
               <arg name="scheme?" type="xs:string"/>
               <arg name="authority?" type="xs:string"/>
               <arg name="userinfo?" type="xs:string"/>
               <arg name="host?" type="xs:string"/>
               <arg name="port?" type="xs:string"/>
               <arg name="path?" type="xs:string"/>
               <arg name="query?" type="xs:string"/>
               <arg name="fragment?" type="xs:string"/>
               <arg name="path-segments?" type="array(xs:string)"/>
               <arg name="query-segments?" type="array(record(key? as xs:string, value? as xs:string, *))"/>
               <arg name="*"/>
             </record>
           </example> 

           <p>The parts of this structure are:</p>

           <table border="0" role="data">
             <caption>The URI structure record</caption>
             <tbody>
               <tr>
                 <td>uri</td>
                 <td>The original URI. This element is returned by <code>fn:parse-uri</code>,
                 but ignored by <code>fn:build-uri</code>.</td>
               </tr>
               <tr>
                 <td>scheme</td>
                 <td>The URI scheme (e.g., “https” or “file”).</td>
               </tr>
               <tr>
                 <td>authority</td>
                 <td>The authority portion of the URI (e.g., “example.com:8080”).</td>
               </tr>
               <tr>
                 <td>userinfo</td>
                 <td>Any userinfo that was passed as part of the authority.</td>
               </tr>
               <tr>
                 <td>host</td>
                 <td>The host passed as part of the authority (e.g., “example.com”). </td>
               </tr>
               <tr>
                 <td>port</td>
                 <td>The port passed as part of the authority (e.g., “8080”).</td>
               </tr>
               <tr>
                 <td>path</td>
                 <td>The path portion of the URI.</td>
               </tr>
               <tr>
                 <td>query</td>
                 <td>Any query string.</td>
               </tr>
               <tr>
                 <td>fragment</td>
                 <td>Any fragment identifier.</td>
               </tr>
               <tr>
                 <td>path-segments</td>
                 <td>Parsed and unescaped path segments.</td>
               </tr>
               <tr>
                 <td>query-segments</td>
                 <td>Parsed and unescaped query terms</td>
               </tr>
               <tr>
                 <td>*</td>
                 <td>Additional, information defined structures are allowed.</td>
               </tr>
             </tbody>
           </table>

           <p>The segmented forms of the path and query parameters provide
           convenient access to commonly used information. They’re represented
           in the map as arrays, instead of sequences, just for the convenience
           of serializing the structure.</p>

           <p>The path, if there is one, is tokenized on “/” characters and
           each segment is unesaped. Consider the URI <code>http://example.com/path/to/a%2fb</code>. The path portion has to be returned as <code>/path/to/a%2fb</code> because
           decoding the <code>%2f</code> would change the nature of the path.
           The unescaped form is easily accessible from the path-segments array:</p>

<eg>[
  "",
  "path",
  "to",
  "a/b"
]</eg>
           <p>Note that the presence or absence of a leading slash on the path
           will effect whether or not the array begins with an empty string.</p>

           <p>The query parameters are similarly decoded. Consider the URI:
           <code>http://example.com/path?a=1&amp;b=2%264&amp;a=3</code>.
           Here the decoded form in the query-segments gives quick access to
           the parameter values:</p>

           <eg>[
  { "key": "a",
    "value": "1" },
  { "key": "b",
    "value": "2&amp;4" },
  { "key": "a",
    "value": "3" }
]</eg>
           <p>Note that both keys and values are unescaped and that it’s an array
           of maps because key values can be repeated, as seen for <code>a</code>
           in this example.</p>

           <div3 id="func-parse-uri">
             <head><?function fn:parse-uri?></head>
           </div3>
           <div3 id="func-build-uri">
             <head><?function fn:build-uri?></head>
           </div3>
         </div2>
      </div1>
      <div1 id="boolean-functions">
         <head>Functions and operators on Boolean values</head>
         <p>This section defines functions and operators on the <code>xs:boolean</code> datatype.</p>
         <div2 id="boolean-constructors">
            <head>Boolean constant functions</head>
            <p>Since no literals are defined in XPath to reference the constant boolean values true and false,
			two functions are provided for the purpose.</p>
            <?local-function-index?>
            <div3 id="func-true">
               <head><?function fn:true?></head>
            </div3>
            <div3 id="func-false">
               <head><?function fn:false?></head>
            </div3>
         </div2>
         <div2 id="op.boolean">
            <head>Operators on Boolean values</head>
            <p>The following functions define the semantics of operators on boolean values in
                        <bibref ref="xquery-40"/> and <bibref ref="xpath-40"/>:</p>
            <?local-function-index?>
            <p>The ordering operator <code>op:boolean-less-than</code> is provided for application purposes
                    and for compatibility with <bibref ref="xpath"/>. The <bibref ref="xmlschema-2"/>
                    datatype <code>xs:boolean</code> is not ordered.</p>
            <div3 id="func-boolean-equal">
               <head><?function op:boolean-equal?></head>
            </div3>
            <div3 id="func-boolean-less-than">
               <head><?function op:boolean-less-than?></head>
            </div3>
         </div2>
         <div2 id="boolean-value-functions">
            <head>Functions on Boolean values</head>
            <p>The following functions are defined on boolean values:</p>
            <?local-function-index?>
			<div3 id="func-boolean">
               <head><?function fn:boolean?></head>
            </div3>
            <div3 id="func-not">
               <head><?function fn:not?></head>
            </div3>
         </div2>
      </div1>
	  <div1 id="durations">
	  	<head>Functions and operators on durations</head>
            <p>Operators are defined on the following type:</p>
            <ulist>
               <item>
                  <p>xs:duration</p>
               </item>
            </ulist>
            <p>and on the two defined subtypes (see <specref ref="duration-subtypes"/>):</p>
            <ulist>
               <item>
                  <p>xs:yearMonthDuration</p>
               </item>
               <item>
                  <p>xs:dayTimeDuration</p>
               </item>
            </ulist>
            <p>No ordering relation is defined on <code>xs:duration</code> values.
			Two <code>xs:duration</code> values may however be compared for equality.</p>
		 
			<p>Operations on durations (including equality comparison, casting to string, and extraction of components) 
			all treat the duration as normalized. This means that the seconds and minutes components 
			will always be less than 60, the hours component less than 24, and the months component 
			less than 12.  Thus, for example, a duration of 120 seconds always gives the same result 
			as a duration of two minutes.</p>
	     
	      <p>Conditions such as underflow and overflow may occur with arithmetic on
	         durations: see <specref ref="duration-limits"/> </p>

			<note><p>This means that in practice, the information content of an <code>xs:duration</code>
			value can be reduced to an <code>xs:integer</code> number of months, and an <code>xs:decimal</code>
			number of seconds. For the two defined subtypes this is further simplified so that one of these two
			components is fixed at zero. Operations such as comparison of durations and arithmetic on durations
			can be expressed in terms of numeric operations applied to these two components.</p></note>

           
         <div2 id="duration-subtypes">
            <head>Two totally ordered subtypes of duration</head>
            
            <p>Two subtypes of <code>xs:duration</code>, namely <code>xs:yearMonthDuration</code>
               and <code>xs:dayTimeDuration</code>, are defined in <bibref ref="xmlschema11-2"/>. These types <rfc2119>must</rfc2119>
            be available in the data model whether or not the implementation supports other aspects of XSD 1.1.</p>
            
            <p>The significance of these subtypes is that arithmetic and ordering become well defined; this is not the
            case for <code>xs:duration</code> values in general, because of the variable number of days in a month. For this reason, many of the functions
            and operators on durations require the arguments/operands to belong to these two subtypes.</p>
            
 
            
            </div2>
		 <div2 id="comp.duration">
		 <head>Comparison operators on durations</head>
		    <?local-function-index?>
			            <p>The following comparison operators are defined on the <bibref ref="xmlschema-2"/>
                    duration datatypes. Each operator takes two operands of the same
                    type and returns an <code>xs:boolean</code> result. As discussed in <bibref ref="xmlschema-2"/>, the
                    order relation on <code>xs:duration</code> is a partial order rather than 
                    a total order. For this reason, only equality is defined on <code>xs:duration</code>. 
					A full complement of comparison and
                    arithmetic functions are defined on the two subtypes of duration described in
                        <specref ref="duration-subtypes"/> which do have a total order.</p>

	
            
		 	<div3 id="func-yearMonthDuration-less-than">
               <head><?function op:yearMonthDuration-less-than?></head>
            </div3>
            <div3 id="func-dayTimeDuration-less-than">
               <head><?function op:dayTimeDuration-less-than?></head>
            </div3>
		    <div3 id="func-duration-equal">
               <head><?function op:duration-equal?></head>
            </div3>
		 </div2>
        <div2 id="component-extraction-durations">
            <head>Component extraction functions on durations</head>
            <p>The duration datatype may be considered to be a composite datatypes
                    in that it contains distinct properties or components. The extraction functions specified
                    below extract a single component from a duration value. 
For <code>xs:duration</code> and its subtypes, including the two subtypes <code>xs:yearMonthDuration</code> and
 <code>xs:dayTimeDuration</code>, the components are normalized: this means that the seconds and minutes 
 components will always be less than 60, the hours component less than 24, and the months component less than 12.
</p>
           <?local-function-index?>
            <div3 id="func-years-from-duration">
				<head><?function fn:years-from-duration?></head>
            </div3>
            <div3 id="func-months-from-duration">
               <head><?function fn:months-from-duration?></head>
            </div3>
            <div3 id="func-days-from-duration">
               <head><?function fn:days-from-duration?></head>
            </div3>
            <div3 id="func-hours-from-duration">
               <head><?function fn:hours-from-duration?></head>
            </div3>
            <div3 id="func-minutes-from-duration">
			   <head><?function fn:minutes-from-duration?></head>
			</div3>
			<div3 id="func-seconds-from-duration">
			   <head><?function fn:seconds-from-duration?></head>
			</div3>
        </div2>
        <div2 id="duration-arithmetic">
            <head>Arithmetic operators on durations</head>
           <?local-function-index?>
			<p>For operators that combine a duration and a date/time value, see <specref ref="dateTime-arithmetic"/>.</p>
            <div3 id="func-add-yearMonthDurations">
               <head><?function op:add-yearMonthDurations?></head>
             </div3>
            <div3 id="func-subtract-yearMonthDurations">
               <head><?function op:subtract-yearMonthDurations?></head>
            </div3>
            <div3 id="func-multiply-yearMonthDuration">
               <head><?function op:multiply-yearMonthDuration?></head>
            </div3>
            <div3 id="func-divide-yearMonthDuration">
               <head><?function op:divide-yearMonthDuration?></head>
            </div3>
            <div3 id="func-divide-yearMonthDuration-by-yearMonthDuration">
               <head><?function op:divide-yearMonthDuration-by-yearMonthDuration?></head>
            </div3>
            <div3 id="func-add-dayTimeDurations">
               <head><?function op:add-dayTimeDurations?></head>
            </div3>
            <div3 id="func-subtract-dayTimeDurations">
               <head><?function op:subtract-dayTimeDurations?></head>
            </div3>
            <div3 id="func-multiply-dayTimeDuration">
               <head><?function op:multiply-dayTimeDuration?></head>
            </div3>
            <div3 id="func-divide-dayTimeDuration">
               <head><?function op:divide-dayTimeDuration?></head>
            </div3>
            <div3 id="func-divide-dayTimeDuration-by-dayTimeDuration">
               <head><?function op:divide-dayTimeDuration-by-dayTimeDuration?></head>
            </div3>
         </div2>
	  </div1>
	  	


      <div1 id="dates-times">
         <head>Functions and operators on dates and times</head>
         <p>This section defines operations on the <bibref ref="xmlschema-2"/> date and time types.</p>
         <p>
See <bibref ref="Working-With-Timezones"/> for a disquisition on working with date and time values with and without timezones.
</p>
         <div2 id="date-time-types">
            <head>Date and time types</head>
            <p>The operators described in this section are defined on the following date and
                    time types: </p>
            <ulist>
               <item>
                  <p><code>xs:dateTime</code></p>
               </item>
               <item>
                  <p><code>xs:date</code></p>
               </item>
               <item>
                  <p><code>xs:time</code></p>
               </item>
               <item>
                  <p><code>xs:gYearMonth</code></p>
               </item>
               <item>
                  <p><code>xs:gYear</code></p>
               </item>
               <item>
                  <p><code>xs:gMonthDay</code></p>
               </item>
               <item>
                  <p><code>xs:gMonth</code></p>
               </item>
               <item>
                  <p><code>xs:gDay</code></p>
               </item>
            </ulist>
            <p>The only operation defined on					
                    <code>xs:gYearMonth</code>, <code>xs:gYear</code>,
                    <code>xs:gMonthDay</code>, <code>xs:gMonth</code> and <code>xs:gDay</code> values is 
               equality comparison.
               For other types, further operations are provided, including component extraction, 
               order comparisons, arithmetic, formatted display, and timezone
					adjustment.</p>

            <div3 id="date-time-duration-conformance">
               <head>Limits and precision</head>
               
               <p>All <emph>minimally conforming</emph> processors
                        <rfc2119>must</rfc2119>  support positive year values with a minimum of 4 digits (i.e.,
                        YYYY) and a minimum fractional second precision of 1 millisecond or three
                        digits (i.e., s.sss). However, <emph>conforming</emph> processors
                        <rfc2119>may</rfc2119>  set larger <termref def="implementation-defined"/> limits
                        on the maximum number of digits they support in these two situations.  Processors <rfc2119>may</rfc2119> also choose to support the year 0000 and 
                        years with negative values.  The results of operations on dates that cross the year 
                        0000 are <termref def="implementation-defined"/>.</p>
               <p>A processor that limits the number of digits in date and time datatype
                        representations may encounter overflow and underflow conditions when it
                        tries to execute the functions in <specref ref="dateTime-arithmetic"/>. In
                        these situations, the processor <rfc2119>must</rfc2119> return 00:00:00 in case of time underflow.
                  It <rfc2119>must</rfc2119> raise a dynamic 
                  error <errorref class="DT" code="0001"/> in case of overflow.</p>


 
            </div3>
         </div2>
         <div2 id="date-time-values">
            <head>Date/time datatype values</head>
            <p>As defined in <xspecref spec="DM31" ref="dates-and-times"/>, <code>xs:dateTime</code>, 
			<code>xs:date</code>, <code>xs:time</code>,  <code>xs:gYearMonth</code>, <code>xs:gYear</code>, 
			<code>xs:gMonthDay</code>, <code>xs:gMonth</code>, <code>xs:gDay</code> values, 
			referred to collectively as date/time values, are represented as seven components or properties: 
			<code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, 
			<code>second</code> and <code>timezone</code>.  The first five components are 
			<code>xs:integer</code> values.  The value of the <code>second</code> component is an <code>xs:decimal</code> 
			and the value of the <code>timezone</code> component is an <code>xs:dayTimeDuration</code>.  
			For all the primitive date/time datatypes, the <code>timezone</code> property is optional and may or may not 
			be present. Depending on the datatype, some of the remaining six properties must be present and 
			some must be <xtermref ref="dt-absent" spec="DM31">absent</xtermref>.   
               Absent, or missing, properties are represented by the empty sequence.  
			This value is referred to as the <emph>local</emph> value in that the value retains its original timezone.  
			Before comparing or subtracting <code>xs:dateTime</code> values, this local value <rfc2119>must</rfc2119>  
			be translated or <emph>normalized</emph> to UTC.</p>

            <p>For <code>xs:time</code>, <code>00:00:00</code> and <code>24:00:00</code> are alternate lexical forms 
			for the same value, whose canonical representation is <code>00:00:00</code>.  For <code>xs:dateTime</code>,
		    a time component <code>24:00:00</code> translates to <code>00:00:00</code> of the following day.</p>

            <div3 id="date-time-lexical-mapping">
               <head>Examples</head>
               <ulist>
                  <item>
                     <p>An <code>xs:dateTime</code> with lexical
                        representation <code>1999-05-31T05:00:00</code>
						is represented in the datamodel by <code>{1999, 5, 31, 5, 0, 0.0, ()}</code>.</p>
                  </item>
                  <item>
                     <p>An <code>xs:dateTime</code> with lexical
                        representation <code>1999-05-31T13:20:00-05:00</code> 
						is represented by <code>{1999, 5, 31, 13, 20, 0.0, -PT5H}</code>.</p>
                  </item>
                  <item>
                     <p>An <code>xs:dateTime</code> with lexical
                        representation <code>1999-12-31T24:00:00</code> 
						is represented by <code>{2000, 1, 1, 0, 0, 0.0, ()}</code>.</p>
                  </item>
                  <item>
                     <p>An <code>xs:date</code> with lexical
                        representation <code>2005-02-28+8:00</code> 
						is represented by <code>{2005, 2, 28, (), (), (), PT8H}</code>.</p>
                  </item>
                  <item>
                     <p>An <code>xs:time</code> with lexical
                        representation <code>24:00:00</code> 
						is represented by <code>{(), (), (), 0, 0, 0, ()}</code>.</p>
                  </item>
               </ulist>
            </div3>
         </div2>

		 <div2 id="constructing-dateTime">
		   <head>Constructing a dateTime</head>
		   <p>A function is provided for constructing a
                    <code>xs:dateTime</code> value from a <code>xs:date</code> value and a
                    <code>xs:time</code> value.</p>
		    <?local-function-index?>
            <div3 id="func-dateTime">
              <head><?function fn:dateTime?></head>
			</div3>
         </div2>


         <div2 id="comp.datetime">
            <head>Comparison operators on duration, date and time values</head>
            <?local-function-index?>
            <p>The following comparison operators are defined on the <bibref ref="xmlschema-2"/>
                    date/time datatypes. Each operator takes two operands of the same
                    type and returns an <code>xs:boolean</code> result.</p>
            <p>
               <bibref ref="xmlschema-2"/> also states that the
                    order relation on date and time datatypes is
                    not a total order but a partial order because these
datatypes may or may not have a timezone.  This is handled as follows.
If either operand to a comparison function on date or time values does not have
                    an (explicit) timezone then, for the purpose of the operation, an implicit
                    timezone, provided by the dynamic context <xspecref spec="XP31" ref="id-xp-evaluation-context-components"/>, is assumed to be present as part of
                    the value. This creates a total order for all date and time values.</p>

					
            
			<p>An <code>xs:dateTime</code> can be considered to consist of seven components:
<code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, 
<code>second</code> and <code>timezone</code>.  For <code>xs:dateTime</code> six components (<code>year</code>, 
<code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code>) are required  
and  <code>timezone</code> is optional.   For other date/time values, of the first six components, some are required 
			   and others must be <xtermref ref="dt-absent" spec="DM31">absent</xtermref>.  
			   <code>Timezone</code> is always optional.  For example, for <code>xs:date</code>, 
the <code>year</code>, <code>month</code> and <code>day</code> components are required and <code>hour</code>, 
<code>minute</code> and <code>second</code> components must be absent;  for <code>xs:time</code> the <code>hour</code>, 
<code>minute</code> and <code>second</code> components are required and <code>year</code>, <code>month</code> and 
<code>day</code> are missing;  for <code>xs:gDay</code>, <code>day</code> is required and <code>year</code>, 
<code>month</code>, <code>hour</code>, <code>minute</code> and <code>second</code> are missing.</p>
            
            <note><p>In <bibref ref="xmlschema11-2"/>, a new <code>explicitTimezone</code> facet is available with values
            <code>optional</code>, <code>required</code>, or <code>prohibited</code> to 
            enable the timezone to be defined as mandatory or disallowed.</p></note>

            <p>Values of the date/time datatypes <code>xs:time</code>, <code>xs:gMonthDay</code>, <code>xs:gMonth</code>, 
			and <code>xs:gDay</code>, can be considered to represent a sequence of recurring time instants or time periods.  
			An <code>xs:time</code> occurs every day.  An <code>xs:gMonth</code> occurs every year.  Comparison operators 
			on these datatypes compare the starting instants of equivalent occurrences in the recurring series.  
			These <code>xs:dateTime</code> values are calculated  as described below.</p>

            <p>Comparison operators on <code>xs:date</code>, <code>xs:gYearMonth</code> and <code>xs:gYear</code> compare 
			their starting instants. These <code>xs:dateTime</code> values are calculated  as described below.</p>

          <p>The starting instant of an occurrence of a date/time value is an <code>xs:dateTime</code> 
             calculated by filling 
			in the missing components of the local value from a reference <code>xs:dateTime</code>.  An example of a suitable
         reference <code>xs:dateTime</code> is <code>1972-01-01T00:00:00</code>. Then, for example, the starting
             instant corresponding to the <code>xs:date</code> value <code>2009-03-12</code> is 
             <code>2009-03-12T00:00:00</code>; the starting instant corresponding to the <code>xs:time</code> value
             <code>13:30:02</code> is <code>1972-01-01T13:30:02</code>; and the starting instant corresponding to the
             <code>gMonthDay</code> value <code>--02-29</code> is <code>1972-02-29T00:00:00</code> (which explains
             why a leap year was chosen for the reference).</p>
         
         <note><p>In the previous version of this specification, the reference date/time chosen was
         <code>1972-12-31T00:00:00</code>. While this gives the same results, it produces a "starting instant" for 
         a <code>gMonth</code> or <code>gMonthDay</code> that bears no
         relation to the ordinary meaning of the term, and it also required special handling of short months. 
         The original choice was made to allow for leap seconds; but since leap seconds are not recognized 
         in date/time arithmetic, this is not actually necessary.</p></note>
             
             <!--If the value filled 
			in for a missing day component exceeds the maximum day value for the month, the last day of the month is used. 
			Suppose, for example, that the reference <code>xs:dateTime</code> is <code>1972-01-01T00:00:00</code> and the 
			<code>xs:date</code> value to be compared is <code>1993-03-31</code>.  Filling in the time components from the 
			reference <code>xs:dateTime</code> we get <code>1993-03-31T00:00:00</code> which is the starting instant of that 
			day.  Similarly, if the <code>xs:time</code> value <code>12:30:00</code> is to be compared, we fill in the 
			missing components from the reference <code>xs:dateTime</code> and we get <code>1972-12-31T12:30:00</code> 
			which is the time on that day.  For an <code>xs:gYearMonth</code> value of <code>1976-02</code> we fill in 
			the missing components, adjust for the last day in the month and get <code>1976-02-29T00:00:00</code>.</p>-->

            <p>If the <code>xs:time</code> value written as
			<code>24:00:00</code> is to be compared, filling in the missing components gives <code>1972-01-01T00:00:00</code>, 
			because <code>24:00:00</code> is an alternative representation of <code>00:00:00</code> (the lexical value 
			<code>"24:00:00"</code> is
			converted to the time components {0,0,0} before the missing components are filled
			in). This has the consequence that when ordering <code>xs:time</code> values, 
			<code>24:00:00</code> is
			considered to be earlier than <code>23:59:59</code>. However, when ordering 
			<code>xs:dateTime</code>
			values, a time component of <code>24:00:00</code> is considered equivalent to <code>00:00:00</code> on the
			following day.</p>

            <p>Note that the reference <code>xs:dateTime</code> does not have a timezone.  The <code>timezone</code> component 
			is never filled in from the reference <code>xs:dateTime</code>.  In some cases, if the date/time value does not 
			have a timezone, the implicit timezone from the dynamic context is used as the timezone.</p>

            <note>
               <p>This specification uses the reference <code>xs:dateTime 1972-01-01T00:00:00</code> in the description of the 
			   comparison operators.  Implementations may use other reference <code>xs:dateTime</code> values 
			   as long as they yield the same results.  The reference <code>xs:dateTime</code> used must meet the following 
			   constraints:  when it is used to supply components into <code>xs:gMonthDay</code> values, the year must allow 
			   for February 29 and so must be a leap year; when it is used to supply missing components into <code>xs:gDay</code> 
			   values, the month must allow for 31 days.  Different reference <code>xs:dateTime</code> values may be used for 
			   different operators.</p>

			   <!--<p>Historically, the choice of <code>1972-12-31</code> was made because the year was a leap year, the month had 31 days,
			   and the day contained a leap second. Subsequently, the decision was made not to support leap seconds in date/time comparisons
			   or arithmetic, which makes the choice of reference date less critical.-->
            </note>

            <div3 id="func-dateTime-equal">
               <head><?function op:dateTime-equal?></head>
            </div3>
            <div3 id="func-dateTime-less-than">
               <head><?function op:dateTime-less-than?></head>
            </div3>
            <div3 id="func-date-equal">
               <head><?function op:date-equal?></head>
            </div3>
            <div3 id="func-date-less-than">
               <head><?function op:date-less-than?></head>
            </div3>
            <div3 id="func-time-equal">
               <head><?function op:time-equal?></head>
            </div3>
            <div3 id="func-time-less-than">
               <head><?function op:time-less-than?></head>
            </div3>
            <div3 id="func-gYearMonth-equal">
               <head><?function op:gYearMonth-equal?></head>
            </div3>
            <div3 id="func-gYear-equal">
               <head><?function op:gYear-equal?></head>
             </div3>
            <div3 id="func-gMonthDay-equal">
               <head><?function op:gMonthDay-equal?></head>
            </div3>
            <div3 id="func-gMonth-equal">
               <head><?function op:gMonth-equal?></head>
            </div3>
            <div3 id="func-gDay-equal">
               <head><?function op:gDay-equal?></head>
            </div3>
         </div2>
         <div2 id="component-extraction-dateTime">
            <head>Component extraction functions on dates and times</head>
            <p>The date and time datatypes may be considered to be composite datatypes
                    in that they contain distinct properties or components. The extraction functions specified
                    below extract a single component from a date or time value. In all cases 
					the local value (that is, the original value as written, 
					without any timezone adjustment) is used. </p>
			<note>
			<p>A time written as <code>24:00:00</code> is treated as <code>00:00:00</code> on the
			following day.</p>
			</note>

            <?local-function-index?>
 
 
            <div3 id="func-year-from-dateTime">
               <head><?function fn:year-from-dateTime?></head>
            </div3>
            <div3 id="func-month-from-dateTime">
               <head><?function fn:month-from-dateTime?></head>
            </div3>
            <div3 id="func-day-from-dateTime">
               <head><?function fn:day-from-dateTime?></head>
            </div3>
            <div3 id="func-hours-from-dateTime">
               <head><?function fn:hours-from-dateTime?></head>
            </div3>
            <div3 id="func-minutes-from-dateTime">
               <head><?function fn:minutes-from-dateTime?></head>
            </div3>
            <div3 id="func-seconds-from-dateTime">
               <head><?function fn:seconds-from-dateTime?></head>
            </div3>
            <div3 id="func-timezone-from-dateTime">
               <head><?function fn:timezone-from-dateTime?></head>
            </div3>
            <div3 id="func-year-from-date">
               <head><?function fn:year-from-date?></head>
            </div3>
            <div3 id="func-month-from-date">
               <head><?function fn:month-from-date?></head>
            </div3>
            <div3 id="func-day-from-date">
               <head><?function fn:day-from-date?></head>
            </div3>
            <div3 id="func-timezone-from-date">
               <head><?function fn:timezone-from-date?></head>
            </div3>
            <div3 id="func-hours-from-time">
               <head><?function fn:hours-from-time?></head>
            </div3>
            <div3 id="func-minutes-from-time">
               <head><?function fn:minutes-from-time?></head>
            </div3>
            <div3 id="func-seconds-from-time">
               <head><?function fn:seconds-from-time?></head>
			</div3>
            <div3 id="func-timezone-from-time">
               <head><?function fn:timezone-from-time?></head>
            </div3>
         </div2>
 
         <div2 id="timezone.functions">
            <head>Timezone adjustment functions on dates and time values</head>
            <?local-function-index?>
            <p>These functions adjust the timezone component of an <code>xs:dateTime</code>, <code>xs:date</code> or
                    <code>xs:time</code> value.  The <code>$timezone</code> argument to these functions is defined as an 
					<code>xs:dayTimeDuration</code> but must be a valid timezone value.</p>
            <div3 id="func-adjust-dateTime-to-timezone">
               <head><?function fn:adjust-dateTime-to-timezone?></head>
   			</div3>
   			<div3 id="func-adjust-date-to-timezone">
                  <head><?function fn:adjust-date-to-timezone?></head>
   			</div3>
   			<div3 id="func-adjust-time-to-timezone">
                  <head><?function fn:adjust-time-to-timezone?></head>
   			</div3>
         </div2>
         <div2 id="dateTime-arithmetic">
            <head>Arithmetic operators on durations, dates and times</head>
            <p>These functions support adding or subtracting a duration value to or from an
                    <code>xs:dateTime</code>, an <code>xs:date</code> or an <code>xs:time</code>
                    value. Appendix E of <bibref ref="xmlschema-2"/> describes an algorithm for
                    performing such operations.</p>
            <?local-function-index?>
            <div3 id="duration-limits">
               <head>Limits and precision</head>
               
              
               <p>A processor that limits the number of digits in date and time datatype
                  representations may encounter overflow and underflow conditions when it
                  tries to execute the functions in this section. In
                  these situations, the processor <rfc2119>must</rfc2119> return P0M or PT0S in
                  case of duration underflow and 00:00:00 in case of time underflow.
                  It <rfc2119>must</rfc2119> raise a dynamic error
                  <errorref class="DT" code="0001"/> in case of overflow.</p>
               <p>The value spaces of the two totally ordered subtypes of
                  <code>xs:duration</code> described in <specref ref="duration-subtypes"/> are
                  <code>xs:integer</code> months for <code>xs:yearMonthDuration</code>
                  and <code>xs:decimal</code> seconds for <code>xs:dayTimeDuration</code>. If
                  a processor limits the number of digits allowed in the representation of
                  <code>xs:integer</code> and <code>xs:decimal</code> then overflow and
                  underflow situations can arise when it tries to execute the functions in
                  <specref ref="duration-arithmetic"/>. In these situations the processor
                  <rfc2119>must</rfc2119> return zero in case of numeric underflow and P0M
                  or PT0S in case of duration underflow. It <rfc2119>must</rfc2119> raise a
                  dynamic error <errorref class="DT" code="0002"/> in case of overflow.</p>
            </div3>
            
            <div3 id="func-subtract-dateTimes">
               <head><?function op:subtract-dateTimes?></head>
            </div3>
            <div3 id="func-subtract-dates">
               <head><?function op:subtract-dates?></head>
            </div3>
            <div3 id="func-subtract-times">
               <head><?function op:subtract-times?></head>
            </div3>
            <div3 id="func-add-yearMonthDuration-to-dateTime">
               <head><?function op:add-yearMonthDuration-to-dateTime?></head>
            </div3>
            <div3 id="func-add-dayTimeDuration-to-dateTime">
               <head><?function op:add-dayTimeDuration-to-dateTime?></head>
            </div3>
            <div3 id="func-subtract-yearMonthDuration-from-dateTime">
               <head><?function op:subtract-yearMonthDuration-from-dateTime?></head>
            </div3>
            <div3 id="func-subtract-dayTimeDuration-from-dateTime">
               <head><?function op:subtract-dayTimeDuration-from-dateTime?></head>
            </div3>
            <div3 id="func-add-yearMonthDuration-to-date">
               <head><?function op:add-yearMonthDuration-to-date?></head>
            </div3>
            <div3 id="func-add-dayTimeDuration-to-date">
               <head><?function op:add-dayTimeDuration-to-date?></head>
            </div3>
            <div3 id="func-subtract-yearMonthDuration-from-date">
               <head><?function op:subtract-yearMonthDuration-from-date?></head>
            </div3>      
		    <div3 id="func-subtract-dayTimeDuration-from-date">
               <head><?function op:subtract-dayTimeDuration-from-date?></head>
            </div3>
            <div3 id="func-add-dayTimeDuration-to-time">
               <head><?function op:add-dayTimeDuration-to-time?></head>
            </div3>
            <div3 id="func-subtract-dayTimeDuration-from-time">
               <head><?function op:subtract-dayTimeDuration-from-time?></head>
            </div3>
         </div2>
         <div2 id="formatting-dates-and-times">
            <head>Formatting dates and times</head>
			

            <?local-function-index?>

            <p>Three functions are provided to represent dates and times as a string, using the conventions of a selected calendar,
 language, and country. The signatures are presented first, followed by the rules which apply to each of the functions.</p>

       		<div3 id="func-format-dateTime">
      			<head><?function fn:format-dateTime?></head>
      		</div3>
      		<div3 id="func-format-date">
      			<head><?function fn:format-date?></head>
      		</div3>
      		<div3 id="func-format-time">
      			<head><?function fn:format-time?></head>
      		</div3>

		<div3 id="rules-for-datetime-formatting">
		<head>The date/time formatting functions</head>
            <p>The <code>fn:format-dateTime</code>, <code>fn:format-date</code>, 
and <code>fn:format-time</code> 
functions format <code>$value</code> as a string using 
the picture string specified by the <code>$picture</code> argument,
the calendar specified by the <code>$calendar</code> argument,
the language specified by the <code>$language</code> argument, 
and the country or other place name specified by the <code>$place</code> argument.
The result of the function is the formatted string representation of the supplied
  <code>xs:dateTime</code>, <code>xs:date</code>, or <code>xs:time</code> value.</p>
            <p>
               <termdef id="dt-date-formatting-function" term="date formatting function">The three 
                  functions <code>fn:format-dateTime</code>, <code>fn:format-date</code>, 
                  and <code>fn:format-time</code> are referred to collectively as the
                   <term>date formatting functions</term>.</termdef>
            </p>
            <p>If <code>$value</code> is the empty sequence, the function returns the empty sequence.</p>
            <p>Calling the two-argument form of each of the three functions is equivalent
to calling the five-argument form with each of the last three arguments set to an empty sequence.</p>
            <p>For details of the <code>$language</code>, <code>$calendar</code>, and
<code>$place</code> arguments, see <specref ref="lang-cal-place"/>.</p>
            <p>In general, the use of an invalid <code>$picture</code>, 
<code>$language</code>, <code>$calendar</code>, or
               <code>$place</code> argument results in a dynamic error <errorref class="FD" code="1340"/>. By contrast,
use of an option in any of these arguments that is valid but not supported by the implementation is
not an error, and in these cases the implementation is required to output the value in a fallback
representation. More detailed rules are given below.</p>
            <div4 id="date-picture-string">
               <head>The picture string</head>
               <p>The picture consists of a sequence of variable markers and literal substrings.
A substring enclosed in square brackets is interpreted as a variable marker; substrings
not enclosed in square brackets are taken as literal substrings. 
The literal substrings are optional and if present are rendered unchanged, including any whitespace. 
If an opening or closing square bracket 
is required within a literal substring, it <rfc2119>must</rfc2119> be doubled.
The variable markers are replaced in the result by strings representing 
aspects of the date and/or time to be formatted. These are described in detail below.</p>
               <p>A variable marker consists of a component specifier followed optionally 
by one or two presentation modifiers and/or optionally by a width modifier.
Whitespace within a variable marker is ignored.</p>
               <p>The variable marker may be separated into its components
               by applying the following rules:</p>
               <olist><!-- bug 12280 -->
                  <item><p>The component specifier is always present and is always a
                  single letter.</p></item>
                  <item><p>The width modifier may be recognized by the presence of a comma.</p></item>
                  <item><p>The substring between the component specifier and the comma (if present)
                     or the end of the string (if there is no comma) contains the first and
                     second presentation modifiers, both of which are optional. If this substring
                  contains a single character, this is interpreted as the first presentation modifier.
                  If it contains more than one character, the last character is examined: if it is valid
                  as a second presentation modifier then it is treated as such, and the preceding part
                  of the substring constitutes the first presentation modifier. Otherwise, the second
                  presentation modifier is presumed absent and the whole substring is interpreted as the
                  first presentation modifier.</p></item>
               </olist>
               <p>The <emph>component specifier</emph> indicates the component of the date or
time that is required, and takes the following values:</p>
               <table role="data">
                  <thead>
                     <tr>
                        <th align="left">Specifier</th>
                        <th align="left">Meaning</th>
                        <th align="left">Default Presentation Modifier</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>Y</td>
                        <td>year (absolute value)</td>
                        <td>1</td>
                     </tr>
                     <tr>
                        <td>M</td>
                        <td>month in year</td>
                        <td>1</td>
                     </tr>
                     <tr>
                        <td>D</td>
                        <td>day in month</td>
                        <td>1</td>
                     </tr>
                     <tr>
                        <td>d</td>
                        <td>day in year</td>
                        <td>1</td>
                     </tr>
                     <tr>
                        <td>F</td>
                        <td>day of week</td>
                        <td>n</td>
                     </tr>
                     <tr>
                        <td>W</td>
                        <td>week in year</td>
                        <td>1</td>
                     </tr>
                     <tr>
                        <td>w</td>
                        <td>week in month</td>
                        <td>1</td>
                     </tr>
                     <tr>
                        <td>H</td>
                        <td>hour in day (24 hours)</td>
                        <td>1</td>
                     </tr>
                     <tr>
                        <td>h</td>
                        <td>hour in half-day (12 hours)</td>
                        <td>1</td>
                     </tr>
                     <tr>
                        <td>P</td>
                        <td>am/pm marker</td>
                        <td>n</td>
                     </tr>
                     <tr>
                        <td>m</td>
                        <td>minute in hour</td>
                        <td>01</td>
                     </tr>
                     <tr>
                        <td>s</td>
                        <td>second in minute</td>
                        <td>01</td>
                     </tr>
                     <tr>
                        <td>f</td>
                        <td>fractional seconds</td>
                        <td>1</td>
                     </tr>
                     <tr>
                        <td>Z</td>
                        <td>timezone</td>
                        <td>01:01</td>
                     </tr>
                     <tr>
                        <td>z</td>
                        <td>timezone (same as Z, but modified where appropriate to include a prefix
                           as a time offset using GMT, for example GMT+1 or GMT-05:00. For this component there is a fixed
prefix of <code>GMT</code>, or a localized
variation thereof for the chosen language, and the remainder of the value is formatted as for specifier <code>Z</code>.
                        </td>
                        <td>01:01</td>
                     </tr>
                     <tr>
                        <td>C</td>
                        <td>calendar: the name or abbreviation of a calendar name</td>
                        <td>n</td>
                     </tr>
                     <tr>
                        <td>E</td>
                        <td>era: the name of a baseline for the numbering of years, for example
                  the reign of a monarch</td>
                        <td>n</td>
                     </tr>
                  </tbody>
               </table>
	
               <p>A dynamic error is reported <errorref class="FD" code="1340"/>
 if the syntax of the picture is incorrect.</p>
               
               <p>A dynamic error is reported <errorref class="FD" code="1350"/>
 if a component specifier within the picture 
 refers to components that are not available in the given type of <code>$value</code>,
 for example if the picture supplied to the <code>fn:format-time</code> refers
 to the year, month, or day component.</p>
               <p>It is not an error to include a timezone component when the supplied
 value has no timezone. In these circumstances the timezone component will be ignored.</p>
               <p>The first <emph>presentation modifier</emph> indicates the style in which the
value of a component is to be represented. Its value may be
either:</p>
               <ulist>
                  <item>
                     <p>any format token permitted as a primary format token in the second argument 
of the <code>fn:format-integer</code> function, indicating
that the value of the component is to be output numerically using the specified number format (for example,
<code>1</code>, <code>01</code>, <code>i</code>, <code>I</code>, <code>w</code>, <code>W</code>,
or <code>Ww</code>) or </p>
                  </item>
                  <item>
                     <p>the format token <code>n</code>, <code>N</code>,
or <code>Nn</code>, indicating that the value of the component is to be output by name,
in lower-case, upper-case, or title-case respectively. Components that can be output by name
include (but are not limited to) months, days of the week, timezones, and eras. 
If the processor cannot output these components by name for the chosen calendar and language 
then it must use an <termref def="implementation-defined"/> fallback representation.</p>
                  </item>
               </ulist>
			   <p>If a comma is to be used as a grouping separator within the format token, then there must be a width
			   specifier. More specifically: if a variable marker
			   contains one or more commas, then the last comma is treated as introducing the width modifier, and all others
			   are treated as grouping separators. So <code>[Y9,999,*]</code> will output the year as <code>2,008</code>.</p>
               
               <p>It is not possible to use a closing square bracket as a grouping separator within the format token.</p>
			    
               <p>If the implementation does not support the use of the requested format token, it <rfc2119>must</rfc2119>
use the default presentation modifier for that component.</p>
               <p>If the first presentation modifier is present, then it may optionally be followed by
a second presentation modifier as follows:</p>
               <table role="longlastcol">
                  <thead>
                     <tr>
                        <th align="left">Modifier</th>
                        <th align="left">Meaning</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>either <code>a</code> or <code>t</code></td>
                        <td>indicates alphabetic or traditional numbering respectively,
                           the default being <termref def="implementation-defined"/>. 
                           This has the same meaning as in the second argument of <code>fn:format-integer</code>.</td>
                     </tr>
                     <tr>
                        <td>either <code>c</code> or <code>o</code></td>
                        <td>indicates cardinal or ordinal numbering respectively, for example
                           <code>7</code> or <code>seven</code> for a cardinal number, or <code>7th</code>,
                           <code>seventh</code>, or <code>7º</code>
                           for an ordinal number.
						This has the same meaning as
in the second argument of <code>fn:format-integer</code>. 
The actual representation of the ordinal form of a number
may depend not only on the language, but also on the grammatical context (for example,
in some languages it must agree in gender).</td>
                     </tr>
                  </tbody>
               </table>
			   
               <note>
                  <p>Although the formatting rules are expressed in terms of the rules
for format tokens in <code>fn:format-integer</code>, the formats actually used may be specialized
to the numbering of date components where appropriate. For example, in Italian, it is conventional to
use an ordinal number (<code>primo</code>) for the first day of the month, and cardinal numbers
(<code>due, tre, quattro ...</code>) for the remaining days. A processor may therefore use
this convention to number days of the month, ignoring the presence or absence of the ordinal
presentation modifier.</p>
               </note>
               
            </div4>
		   <div4 id="width-modifier">
		      <head>The Width Modifier</head>

		   <p>Whether or not a presentation modifier is included, a width modifier may be supplied. This
indicates the number of characters to be included in the representation of the value.</p>
               <p>The width modifier, if present, is introduced by a comma. It takes the form:</p>
               <p>
                  <code>&#xa0;&#xa0;&#xa0;","&#xa0;&#xa0;min-width ("-" max-width)?</code>
               </p>
               <p>where <code>min-width</code> is either an unsigned integer indicating the minimum number of characters to
be output, or <code>*</code> indicating that there is no explicit minimum, and 
<code>max-width</code> is either an unsigned integer indicating the maximum number of characters to
be output, or <code>*</code> indicating that there is no explicit maximum; if <code>max-width</code>
is omitted then <code>*</code> is assumed.</p>
   
		      <p>A dynamic error (<errorref  class="FD" code="1340"/>) is raised if 
      <code>min-width</code> is present and less than one, or if
      <code>max-width</code> is present and less than one or less than <code>min-width</code>. 
   </p>

               <p>A format token containing more than one digit, such as <code>001</code> or <code>9999</code>, sets the
minimum and maximum width to the number of digits appearing in the format token; if a width
modifier is also present, then the width modifier takes precedence.</p>
		      
		      
		   </div4>
		   <div4 id="formatting-integer-valued-components">
		      <head>Formatting Integer-Valued Date/Time Components</head>
		      
		      <p>The rules in this section apply to the majority of integer-valued components: specifically <code>M D d F W w H h m s</code>.</p>
		      
		      <p>In the rules below, the term <term>decimal digit pattern</term> has the meaning given in <specref ref="func-format-integer"/>.</p>
		      
		         
		         <olist>
		            <item>
		               <p>If the first presentation modifier takes the form of a <term>decimal digit pattern</term>:</p>
		                <olist>
		                   <item><p>If there is no width modifier, then the value is formatted according to 
		                      the rules of the <code>format-integer</code> function.</p></item>
		                   <item><p>If there is a width modifier, then the first presentation modifier 
		                      is adjusted as follows:</p>
		                   <olist>
		                      <item><p>If the decimal digit pattern includes a grouping separator, the output is 
		                         implementation-defined (but this is not an error).
		                      </p>
		                         <note><p>Use of a width modifier together with grouping separators is inadvisable 
		                            for this reason. It is never necessary to use a width modifier with a decimal 
		                            digit pattern, since the same effect can be achieved by use of optional digit signs.</p></note>
		                      </item>
		                      <item><p>Otherwise, the number of mandatory-digit-sign characters in the presentation 
		                         modifier is increased if necessary. This is done first by replacing optional-digit-signs 
		                         with mandatory-digit-signs, starting from the right, and then prepending mandatory-digit-signs 
		                         to the presentation modifier, until the number of mandatory-digit-signs is equal to the 
		                         minimum width. Any mandatory-digit-signs that are added by this process must use the 
		                         same decimal digit family as existing mandatory-digit-signs in the presentation modifier 
		                         if there are any, or ASCII digits otherwise.
		                      </p></item>
		                      <item><p>The maximum width, if specified, is ignored.
		                      </p></item>
		                      <item><p>The output is then as defined using the <code>format-integer</code> function with this adjusted decimal digit pattern.
		                      </p></item>
		                   </olist></item>
		                </olist>
		            
		            </item>
		            <item>
		               <p>If the first presentation modifiers is one of <code>N</code>, <code>n</code>, or <code>Nn</code>:</p>
		               <olist>
		                  <item><p>Let <var>FN</var> be the full name of the component, that is, the form of the name 
		                     that would be used in the absence of any width modifier.</p></item>
		                  <item><p>If <var>FN</var> is shorter than the minimum width, then it is padded by appending spaces to the end of the name.
		                  </p></item>
		                  <item><p>If <var>FN</var> is longer than the maximum width, then it is abbreviated, either 
		                     by choosing a conventional abbreviation that fits within the maximum width (for example, 
		                     "Wednesday" might be abbreviated to "Weds"), or by removing characters from the end 
		                     of <var>FN</var> until it fits within the maximum width.
		                  </p></item>
		               </olist>
		            </item>
		            <item><p>For other presentation modifiers:</p>
		               <olist>
		                  <item><p>Any adjustment of the value to fit within the requested width range is implementation-defined. </p></item>
		                  <item><p>The value should not be truncated if this results in output that will not be meaningful to users (for example, 
		                     there is no sensible way to truncate Roman numerals).</p></item>
		                  <item><p>If shorter than the minimum width, the value should be padded to the minimum width, either by appending spaces, 
		                     or in some other way appropriate to the numbering scheme.</p></item>
		               </olist>
		            </item>
		            
		         </olist>
		   </div4>
		   <div4 id="formatting-year-component">
		      <head>Formatting the Year Component</head>
		
		   
		         <p>The rules for the year component (Y) are the same as those in <specref ref="formatting-integer-valued-components"/>, 
		            except that the value of the year as output is the value of the year component of the supplied value modulo ten to the power 
		            <var>N</var> where <var>N</var> is determined as follows: 
		         </p>
		         <olist>
		            <item><p>If the width modifier is present and defines a finite maximum width, then that maximum width.
		            </p></item>
		            <item><p>Otherwise, if the first presentation modifier takes the form of a decimal-digit-pattern, 
		               then:</p>
		               <olist>
		                  <item><p>Let <var>W</var> be the number of optional-digit-signs and mandatory-digit-signs in that decimal-digit-pattern.</p></item>
		                  <item><p>If <var>W</var> is 2 or more, then <var>W</var>.</p></item> 
		               </olist>
		            </item>
		            <item><p>Otherwise, <var>N</var> is infinity (that is, the year is output in full).</p></item>
		         </olist>
		   </div4>
		   <div4 id="formatting-fractional-seconds">
		      <head>Formatting Fractional Seconds</head>
		   
		      <p>The output for the fractional seconds component (<code>f</code>) is equivalent to the result of the following algorithm: </p>
		         <olist>
		            <item><p>If the first presentation modifier contains no Unicode digit, then the output is implementation-defined.
		            </p>
		            </item>
		            <item><p>Otherwise, the value of the fractional seconds is output as follows:</p>
		            <olist>
		               <item><p>If there is no width modifier and the first presentation modifier comprises in its
		                  entirety a single mandatory-digit-sign (for example the default <code>1</code>), then
		                  the presentation modifier is extended on the right with as many optional-digit-signs as
		                  are needed to accommodate the actual fractional seconds precision encountered in the
		                  value to be formatted.
		               </p></item>
		               <item><p>If there is a width modifier, then the first presentation modifier 
		                  is adjusted as follows:</p>
		                  <olist>
		                     
		                     <item><p>If a minimum width is specified, and if this exceeds the number of mandatory-digit-sign characters 
		                        in the first presentation modifier, then the first presentation modifier is adjusted. 
		                        This is done first by replacing optional-digit-signs 
		                        with mandatory-digit-signs, starting from the left, and then appending mandatory-digit-signs 
		                        to the presentation modifier, until the number of mandatory-digit-signs is equal to the 
		                        minimum width. Any mandatory-digit-signs that are added by this process must use the 
		                        same decimal digit family as existing mandatory-digit-signs in the presentation modifier.
		                     </p></item>
		                     <item><p>If a maximum width is specified, the first presentation modifier is extended on the right
		                        with as many optional-digit-signs as are needed to ensure that the number of mandatory-digit-signs
		                        and optional-digit-signs is at least equal to the maximum width.
		                     </p></item>
		            
		                  </olist>
		               </item>
		               <item><p>The sequence of characters in the (adjusted) first presentation modifier is reversed (for example, 
		                  <code>999'###</code> becomes <code>###'999</code>). 
		                  If the result is not a valid <term>decimal digit pattern</term>, then the output is 
		                  <termref def="implementation-defined">implementation-defined</termref>.
		               </p></item>
		               <item><p>The sequence of digits in the conventional decimal representation of the fractional seconds component 
		                  is reversed, with insignificant zeroes removed, and the result is treated as an integer. For example, if the 
		                  seconds value is <code>25.8235</code>, the reversed fractional seconds value is <code>5328</code>.
		               </p></item>
		               <item><p>The reversed fractional seconds value is formatted using the reversed decimal digit pattern according to the 
		                  rules of the <code>fn:format-integer</code> function. Given the examples above, the result is <code>5'328</code>
		               </p></item>
		               <item><p>The resulting string is reversed. In our example, the result is <code>823'5</code>.</p></item>
		               <item><p>If the result contains more digits than the number of mandatory-digit-signs and optional-digit-signs in the 
		                  decimal digit pattern, then excess digits 
		                  are removed from the right hand end (that is, the value is truncated towards zero rather than being rounded). 
		                  Any grouping separator that immediately precedes a removed digit 
		                  is also removed.</p></item>
		            </olist>
		            </item>
		         </olist>
		      <note>
		         <p>The reason for presenting the algorithm in this way is that it enables maximum re-use of the rules defined for
		            <code>fn:format-integer</code>. Since the fractional seconds value is not properly an integer, the rules do not
		            work if used directly: for example, the positions of grouping separators need to be counted from the left rather
		            than from the right. Implementations, as always, are free to use a different algorithm that yields the same result.</p>
		      </note>
		      <note>
		         <p>A format token consisting of a single digit,
		            such as <code>1</code>, does not constrain the number of digits in the output. 
		            In the case of fractional seconds in particular, <code>[f001]</code> requests three decimal digits,
		            <code>[f01]</code> requests two digits, but <code>[f1]</code> will retain all digits in the
		            supplied date/time value (the maximum number of digits is implementation-defined). 
		            If exactly one digit is required, this can be achieved using the component specifier 
		            <code>[f1,1-1]</code>.</p>
		      </note>

             
            </div4>
		   <div4 id="formatting-timezones">
		      <head>Formatting timezones</head>
		      <p>Special rules apply to the formatting of timezones. When the component specifiers <code>Z</code>
		      or <code>z</code> are used, the rules in this section override any rules given elsewhere in the case of
		      discrepancies.</p>
		      <p>If the date/time value to be formatted does not include a timezone offset, then the timezone component
		      specifier is generally ignored (results in no output). The exception is where military timezones are used
		      (format ZZ) in which case the string "J" is output, indicating local time.</p>
		      <ulist>
		      <item><p>When the component specifier is <code>z</code>, the output is the same as for component specifier
		      <code>Z</code>, except that it is prefixed by the characters <code>GMT</code> or some localized
		      equivalent. The prefix is omitted, however, in cases where the timezone is identified by name rather than by
		      a numeric offset from UTC.</p></item>
		      <item><p>If the first <var>presentation modifier</var> is numeric and comprises one or two digits 
		         with no <var>grouping-separator</var> (for example <code>1</code>
		      or <code>01</code>), then the timezone is formatted as a displacement from UTC in hours, preceded by a plus or minus
		      sign: for example <code>-5</code> or <code>+03</code>. If the actual timezone offset is not an integral number of hours,
		      then the minutes part of the offset is appended, separated by a colon: for example <code>+10:30</code> or 
		         <code>-1:15</code>.</p></item>
		      <item><p>If the first <var>presentation modifier</var> is numeric with a <var>grouping-separator</var> (for example <code>1:01</code>
		         or <code>01.01</code>), then the timezone offset is output in hours and minutes, separated by the grouping separator,
		      even if the number of minutes is zero: for example <code>+5:00</code> or <code>+10.30</code>.</p>
		      </item><item><p>If the first <var>presentation modifier</var> is numeric and comprises three or four digits with no
		      <var>grouping-separator</var>, for example <code>001</code> or <code>0001</code>, then the timezone offset
		      is shown in hours and minutes with no separator, for example <code>-0500</code> or <code>+1030</code>.
		      </p></item>
		      <item><p>If the first <var>presentation modifier</var> is numeric, in any of the above formats, and the second
		      <var>presentation modifier</var> is <code>t</code>, then a zero timezone offset (that is, UTC) is output as <code>Z</code> instead
		      of a signed numeric value. In this presentation modifier is absent or if the timezone offset is non-zero, 
		      then the displayed timezone offset is preceded by a "-" sign for negative offsets
		      or a "+" sign for non-negative offsets.</p></item>
		         <item><p>If the first <var>presentation modifier</var> is <code>Z</code>, then the timezone is formatted
		         as a military timezone letter, using the convention Z = +00:00, A = +01:00, B = +02:00, ..., M = +12:00, 
		         N = -01:00, O = -02:00, ... Y = -12:00. The letter J (meaning local time) is used in the case of a 
		         value that does not specify a timezone offset. Timezone offsets that have no representation in this system
		         (for example Indian Standard Time, +05:30) are output as if the format <code>01:01</code> had been requested.</p></item>
		      <item><p>If the first <var>presentation modifier</var> is <code>N</code>, then the timezone is output
		      (where possible) as a timezone name, for example <code>EST</code> or <code>CET</code>. The same timezone
		      offset has different names in different places; it is therefore <rfc2119>recommended</rfc2119> that this option
		      should be used only if a country code (see <bibref ref="ISO3166"/>) or IANA timezone name (see <bibref ref="olson"/>) is supplied in the <code>$place</code> argument.
		      In the absence of this information, the implementation may apply a default, for example by using the timezone
		      names that are conventional in North America. If no timezone name can be identified, the timezone offset is
		      output using the fallback format <code>+01:01</code>.</p></item></ulist>
		      <p>The following examples illustrate options for timezone formatting.</p>
		      <table role="small complex data">
		         <thead>
		            <tr>
		               <th>Variable marker</th>
		               <th><code>$place</code></th>
		               <th colspan="5">Timezone offsets (with time = 12:00:00)</th>
		            </tr>
		            <tr>
		               <th>&#xa0;</th>
		               <th>&#xa0;</th>
		               <th>-10:00</th>
		               <th>-05:00</th>
		               <th>+00:00</th>
		               <th>+05:30</th>
		               <th>+13:00</th>          
		            </tr>
		         </thead>
		         <tbody>
		            <tr>
    		            <td>[Z]</td>
    		            <td>()</td>
    		            <td>-10:00</td>
    		            <td>-05:00</td>
    		            <td>+00:00</td>
    		            <td>+05:30</td>
    		            <td>+13:00</td>
		            </tr>
		            <tr>
		               <td>[Z0]</td>
		               <td>()</td>
		               <td>-10</td>
		               <td>-5</td>
		               <td>+0</td>
		               <td>+5:30</td>
		               <td>+13</td>
		            </tr>
		            <tr>
		               <td>[Z0:00]</td>
		               <td>()</td>
		               <td>-10:00</td>
		               <td>-5:00</td>
		               <td>+0:00</td>
		               <td>+5:30</td>
		               <td>+13:00</td>
		            </tr>
		            <tr>
		               <td>[Z00:00]</td>
		               <td>()</td>
		               <td>-10:00</td>
		               <td>-05:00</td>
		               <td>+00:00</td>
		               <td>+05:30</td>
		               <td>+13:00</td>
		            </tr>
		            <tr>
		               <td>[Z0000]</td>
		               <td>()</td>
		               <td>-1000</td>
		               <td>-0500</td>
		               <td>+0000</td>
		               <td>+0530</td>
		               <td>+1300</td>
		            </tr>
		            <tr>
		               <td>[Z00:00t]</td>
		               <td>()</td>
		               <td>-10:00</td>
		               <td>-05:00</td>
		               <td>Z</td>
		               <td>+05:30</td>
		               <td>+13:00</td>
		            </tr>
		            <tr>
		               <td>[z]</td>
		               <td>()</td>
		               <td>GMT&#x2011;10:00</td>
		               <td>GMT&#x2011;05:00</td>
		               <td>GMT+00:00</td>
		               <td>GMT+05:30</td>
		               <td>GMT+13:00</td>
		            </tr>
		            <tr>
		               <td>[ZZ]</td>
		               <td>()</td>
		               <td>W</td>
		               <td>R</td>
		               <td>Z</td>
		               <td>+05:30</td>
		               <td>+13:00</td>
		            </tr>
		            <tr>
		               <td>[ZN]</td>
		               <td>"us"</td>
		               <td>HST</td>
		               <td>EST</td>
		               <td>GMT</td>
		               <td>IST</td>
		               <td>+13:00</td>
		            </tr>
		            <tr>
		               <td>[H00]:[M00] [ZN]</td>
		               <td>"America/New_York"</td>
		               <td>06:00 EST</td>
		               <td>12:00 EST</td>
		               <td>07:00 EST</td>
		               <td>01:30 EST</td>
		               <td>18:00 EST</td>
		            </tr>
		         </tbody>
		      </table>
		      <p>If a width specifier is present when formatting a timezone, then the representation as defined in this section is padded to the minimum
		      width as described in <specref ref="width-modifier"/>, but it is never shortened.</p>
		   </div4>
		   <div4 id="formatting-other-components">
		      <head>Formatting Other Components</head>
		      <p>This section applies to the remaining components: <code>P</code> (am/pm marker), <code>C</code> (calendar),
		      and <code>E</code> (era).</p>
		      <p>The output for these components is entirely <termref def="implementation-defined">implementation-defined</termref>.
		      The default presentation modifier for these components is <code>n</code>, indicating that they are output as names (or
		      conventional abbreviations), and the chosen names will in many cases depend on the chosen language: see <specref ref="lang-cal-place"/>.</p>
		   </div4>
            <div4 id="lang-cal-place">
               <head>The language, calendar, and place arguments</head>
               <p>The set of languages, calendars, and places that are supported in the 
<termref def="dt-date-formatting-function">date formatting functions</termref> is
<termref def="implementation-defined">implementation-defined</termref>. When
any of these arguments is omitted or is an empty sequence, an <termref def="implementation-defined">implementation-defined</termref>
default value is used.</p>
               <imp-def-feature>The set of languages, calendars, and places that are supported in the 
<termref def="dt-date-formatting-function">date formatting functions</termref> is
implementation-defined. If any of these arguments is omitted or set to an empty sequence, 
the default is implementation-defined.</imp-def-feature>
               <p>If the fallback representation uses a different calendar from that requested,
the output string <rfc2119>must</rfc2119> identify the calendar actually used, for example by
prefixing the string with <code>[Calendar: X]</code> (where X is the calendar actually used),
localized as appropriate to the
requested language. If the fallback representation uses a different language
from that requested, the output string <rfc2119>must</rfc2119> identify the language actually
used, for example by prefixing the string with <code>[Language: Y]</code> (where Y is the language
actually used) localized in an
implementation-dependent way. If a particular component of the value cannot be output in
the requested format, it <rfc2119>should</rfc2119> be output in the default format for
that component.</p>
               <p>The <code>$language</code> argument specifies the language to be used for the result string 
of the function. The value of the argument <rfc2119>should</rfc2119> be either the empty sequence
or a value that would be valid for the <code>xml:lang</code> attribute (see [XML]).
Note that this permits the identification of sublanguages
based on country codes (from <bibref ref="ISO3166"/>) as well as identification of dialects
and of regions within a country.</p>
               <p>If the <code>$language</code> 
argument is omitted or is set to an empty sequence, or if it is set to an invalid value or a
value that the implementation does not recognize, 
then the processor uses the default language defined in the dynamic context.</p>
               <p>The language is used to select the appropriate language-dependent forms of:</p>
               <ulist>
                  <item><p>names (for example, of months)</p></item>
                  <item><p>numbers expressed as words or as ordinals (<code>twenty, 20th, twentieth</code>)</p></item>
                  <item><p>hour convention (0-23 vs 1-24, 0-11 vs 1-12)</p></item>
                  <item><p>first day of week, first week of year</p></item>
               </ulist>
               <p>Where appropriate this choice may also take into account the value of the
<code>$place</code> argument, though this <rfc2119>should</rfc2119> not be used to override the
language or any sublanguage that is specified as part of the <code>language</code>
argument.</p>
               <p>The choice of the names and abbreviations used in any given language is 
<termref def="implementation-defined">implementation-defined</termref>. For example,
one implementation might abbreviate July as <code>Jul</code> while another uses <code>Jly</code>. In German,
one implementation might represent Saturday as <code>Samstag</code> while another
uses <code>Sonnabend</code>. Implementations <rfc2119>may</rfc2119> provide mechanisms allowing users to
control such choices.</p>
               <imp-def-feature>The choice of the names and abbreviations used in any given language for
calendar units such as days of the week and months of the year is 
<termref def="implementation-defined">implementation-defined</termref>.</imp-def-feature>
               <p>Where ordinal numbers are used, the selection of the correct representation of the 
ordinal (for example, the linguistic gender) <rfc2119>may</rfc2119> depend on the component being formatted and on its
textual context in the picture string.</p>
               <p>The <code>calendar</code> attribute specifies that the <code>dateTime</code>, <code>date</code>,
or <code>time</code> supplied in the <code>$value</code> argument <rfc2119>must</rfc2119> be 
converted to a value in the specified calendar and then converted to a string using the 
conventions of that calendar.</p>
               <p>The calendar value if present <rfc2119>must</rfc2119> be a valid <code>EQName</code> 
                  (dynamic error: <errorref  class="FD" code="1340"/>).
                  If it is a lexical <code>QName</code> then it is expanded into an expanded QName 
                     using the statically known namespaces; if it has no prefix then it represents an expanded-QName in no namespace.
                  If the expanded QName is in no namespace, 
                  then it <rfc2119>must</rfc2119> identify a calendar with a designator specified below 
                  (dynamic error: <errorref  class="FD" code="1340"/>). 
If the expanded QName is in a namespace then it identifies the calendar in an <termref def="implementation-defined">implementation-defined</termref> way.</p>
               <p>If the <code>$calendar</code> argument is omitted or is set to an empty sequence
                  then the default calendar defined in the dynamic context is used.</p>
               <note>
                  <p>The calendars listed below were known to be in use during the 
last hundred years. Many other calendars have been used in the past.</p>
                  <p>This specification does not define any of these calendars, nor the way that they
map to the value space of the <code>xs:date</code> datatype in <bibref ref="xmlschema-2"/>.
There may be ambiguities when dates are recorded using different calendars. 
For example, the start of a new day is not simultaneous in different calendars, 
and may also vary geographically (for example, based on the time of sunrise or sunset).
Translation of dates is therefore more reliable when the time of day is also known, and
when the geographic location is known. 
When translating dates between
one calendar and another, the processor may take account of the values
of the <code>$place</code> and/or <code>$language</code> arguments, with the 
                     <code>$place</code>
argument taking precedence.</p>
                  <p>Information about some of these calendars, and algorithms for converting between them, may
be found in <bibref ref="CALCALC"/>.</p>
               </note>
               <table role="data">
                  <thead>
                     <tr>
                        <th>Designator</th>
                        <th>Calendar</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>AD</td>
                        <td>Anno Domini (Christian Era)</td>
                     </tr>
                     <tr>
                        <td>AH</td>
                        <td>Anno Hegirae (Muhammedan Era)</td>
                     </tr>
                     <tr>
                        <td>AME</td>
                        <td>Mauludi Era (solar years since Mohammed's birth)</td>
                     </tr>
                     <tr>
                        <td>AM</td>
                        <td>Anno Mundi (Jewish Calendar)</td>
                     </tr>
                     <tr>
                        <td>AP</td>
                        <td>Anno Persici</td>
                     </tr>
                     <tr>
                        <td>AS</td>
                        <td>Aji Saka Era (Java)</td>
                     </tr>
                     <tr>
                        <td>BE</td>
                        <td>Buddhist Era</td>
                     </tr>
                     <tr>
                        <td>CB</td>
                        <td>Cooch Behar Era</td>
                     </tr>
                     <tr>
                        <td>CE</td>
                        <td>Common Era</td>
                     </tr>
                     <tr>
                        <td>CL</td>
                        <td>Chinese Lunar Era</td>
                     </tr>
                     <tr>
                        <td>CS</td>
                        <td>Chula Sakarat Era</td>
                     </tr>
                     <tr>
                        <td>EE</td>
                        <td>Ethiopian Era</td>
                     </tr>
                     <tr>
                        <td>FE</td>
                        <td>Fasli Era</td>
                     </tr>
                     <tr>
                        <td>ISO</td>
                        <td>ISO 8601 calendar</td>
                     </tr>
                     <tr>
                        <td>JE</td>
                        <td>Japanese Calendar</td>
                     </tr>
                     <tr>
                        <td>KE</td>
                        <td>Khalsa Era (Sikh calendar)</td>
                     </tr>
                     <tr>
                        <td>KY</td>
                        <td>Kali Yuga</td>
                     </tr>
                     <tr>
                        <td>ME</td>
                        <td>Malabar Era</td>
                     </tr>
                     <tr>
                        <td>MS</td>
                        <td>Monarchic Solar Era</td>
                     </tr>
                     <tr>
                        <td>NS</td>
                        <td>Nepal Samwat Era</td>
                     </tr>
                     <tr>
                        <td>OS</td>
                        <td>Old Style (Julian Calendar)</td>
                     </tr>
                     <tr>
                        <td>RS</td>
                        <td>Rattanakosin (Bangkok) Era</td>
                     </tr>
                     <tr>
                        <td>SE</td>
                        <td>Saka Era</td>
                     </tr>
                     <tr>
                        <td>SH</td>
                        <td>Mohammedan Solar Era (Iran)</td>
                     </tr>
                     <tr>
                        <td>SS</td>
                        <td>Saka Samvat</td>
                     </tr>
                     <tr>
                        <td>TE</td>
                        <td>Tripurabda Era</td>
                     </tr>
                     <tr>
                        <td>VE</td>
                        <td>Vikrama Era</td>
                     </tr>
                     <tr>
                        <td>VS</td>
                        <td>Vikrama Samvat Era</td>
                     </tr>
                  </tbody>
               </table>
               <p>At least one of the above calendars <rfc2119>must</rfc2119> be supported. It is 
<termref def="implementation-defined">implementation-defined</termref> which
calendars are supported.</p>
               <p>The ISO 8601 calendar (<bibref ref="ISO8601"/>), 
which is included in the above list and designated <code>ISO</code>, 
is very similar to the Gregorian calendar designated <code>AD</code>, but it
differs in several ways. The ISO calendar
    is intended to ensure that date and time formats can be read
    easily by other software, as well as being legible for human
    users. The ISO calendar
prescribes the use of particular numbering conventions as defined in
ISO 8601, rather than allowing these to be localized on a per-language basis. 
In particular it
    provides a numeric 'week date' format which identifies dates by
    year, week of the year, and day in the week; 
in the ISO calendar the days of the week are numbered from 1 (Monday) to 7 (Sunday), and
week 1 in any calendar year is the week (from Monday to Sunday) that includes the first Thursday
of that year. The numeric values of the components year, month, day, hour, minute, and second
are the same in the ISO calendar as the values used in the lexical representation of the date and
time as defined in <bibref ref="xmlschema-2"/>. The era ("E" component)
with this calendar is either a minus sign (for negative years) or a zero-length string (for positive years).
For dates before 1 January, AD 1, year numbers in
    the ISO and AD calendars are off by one from each other: ISO year
    0000 is 1 BC, -0001 is 2 BC, etc.</p>
               <p>ISO 8601 does not define a numbering for weeks within a month. When the <code>w</code>
               component is used, the convention to be adopted is that each Monday-to-Sunday week is considered to
               fall within a particular month if its Thursday occurs in that month; the weeks that fall in a particular
               month under this definition are numbered starting from 1. Thus, for example, 
               29 January 2013 falls in week 5 because the Thursday of the week (31 January 2013) is the fifth Thursday
               in January, and 1 February 2013 is also in week 5 for the same reason.</p>
               <note>
                  <p>The value space of the date and time datatypes, as defined in XML Schema, is based on
absolute points in time. The lexical space of these datatypes defines a 
representation of these absolute points in time using the proleptic Gregorian calendar,
that is, the modern Western calendar extrapolated into the past and the future; but the value space
is calendar-neutral. The
<termref def="dt-date-formatting-function">date formatting functions</termref> produce a representation
of this absolute point in time, but denoted in a possibly different calendar. So,
for example, the date whose lexical representation in XML Schema is <code>1502-01-11</code> 
(the day on which Pope Gregory XIII was born) might be
formatted using the Old Style (Julian) calendar as <code>1 January 1502</code>. This reflects the fact
that there was at that time a ten-day difference between the two calendars. It would be
incorrect, and would produce incorrect results, to represent this date in an element or attribute 
of type <code>xs:date</code> as <code>1502-01-01</code>, even though this might reflect the way 
the date was recorded in contemporary documents.</p>
                  <p>When referring to years occurring in antiquity, modern historians generally
use a numbering system in which there is no year zero (the year before 1 CE
is thus 1 BCE). This is the convention that <rfc2119>should</rfc2119> be used when the
requested calendar is OS (Julian) or AD (Gregorian). When the requested
calendar is ISO, however, the conventions of ISO 8601 <rfc2119>should</rfc2119> be followed:
here the year before +0001 is numbered zero. In <bibref ref="xmlschema-2"/> (version 1.0), 
the value space for <code>xs:date</code> and <code>xs:dateTime</code>
does not include a year zero: however, XSD 1.1 endorses the ISO 8601 convention. This means that the date on
which Julius Caesar was assassinated has the ISO 8601 lexical representation
-0043-03-13, but will be formatted as 15 March 44 BCE in the Julian calendar
or 13 March 44 BCE in the Gregorian calendar (dependent on the chosen
localization of the names of months and eras).</p>
               </note>
               <p>The intended use of the <code>$place</code> argument is to identify
 the place where an event
represented by the <code>dateTime</code>, <code>date</code>,
or <code>time</code> supplied in the <code>$value</code> argument took place or will take place.
                  If the <code>$place</code> argument is omitted or is set
                  to an empty sequence, then the default place defined in the dynamic context is used.
If the value is supplied, and is not the empty sequence, then it <rfc2119>should</rfc2119> 
                  either be a country code or an IANA timezone name.
               If the value does not take this form, or if its value is not recognized
               by the implementation, then the default place defined in the dynamic context is used.</p>
             
               <ulist>
   <item><p>Country codes are defined in <bibref ref="ISO3166"/>. Examples are "de" for Germany
      and "jp" for Japan. Implementations <rfc2119>may</rfc2119> also allow the use
of codes representing subdivisions of a country from ISO 3166-2, or codes representing formerly used names of
countries from ISO 3166-3</p></item>
                  <item><p>IANA timezone names are defined in the IANA timezone database <bibref ref="olson"/>.
   Examples are "America/New_York" and "Europe/Rome".</p></item>
</ulist>             
<p>This argument is not intended to identify the location of the user 
for whom the date or time is being formatted;
that should be done by means of the <code>$language</code> attribute. 
This information 
<rfc2119>may</rfc2119> be used to provide additional information when converting dates between
calendars or when deciding how individual components of the date and time are to be formatted. 
For example, different countries using the Old Style (Julian) calendar started the new year on different
days, and some countries used variants of the calendar that were out of synchronization as a result of
differences in calculating leap years.</p>
               <p>The geographical area identified by a country code is defined by the
  boundaries as they existed at the time of the date to be formatted,
  or the present-day boundaries for dates in the future.</p>
               <p>If the <code>$place</code> argument is supplied in the form
                  of an IANA timezone name that is recognized by the implementation, then the date or
               time being formatted is adjusted to the timezone offset applicable in that timezone.
               For example, if the <code>xs:dateTime</code> value <code>2010-02-15T12:00:00Z</code>
                  is formatted with the <code>$place</code> argument set to
                  <code>America/New_York</code>, then the output will be as if the value
                  <code>2010-02-15T07:00:00-05:00</code> had been supplied. This adjustment takes daylight
                  savings time into account where possible; if the date in question falls during
                  daylight savings time in New York, then it is adjusted to timezone offset <code>-PT4H</code>
                  rather than <code>-PT5H</code>. Adjustment using daylight savings time is only possible
                  where the value includes a date, and where the date is within the range covered
                  by the timezone database.</p>
            </div4>
			</div3>
            <div3 id="date-time-examples">
               <head>Examples of date and time formatting</head>
               
                  <p>The following examples show a selection of dates and times and the way they might
be formatted. These examples assume the use of the Gregorian calendar as the default calendar.</p>
                  <table role="data">
                     <thead>
                        <tr>
                           <th>Required Output</th>
                           <th>Expression</th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td>
                              <code>2002-12-31</code>
                           </td>
                           <td>
                              <code>format-date($d, "[Y0001]-[M01]-[D01]")</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>12-31-2002</code>
                           </td>
                           <td>
                              <code>format-date($d, "[M]-[D]-[Y]")</code>
                           </td>
                        </tr>
                        <tr>
                           <td> 
                              <code>31-12-2002</code>
                           </td>
                           <td>
                              <code>format-date($d, "[D]-[M]-[Y]")</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>31 XII 2002</code>
                           </td>
                           <td>
                              <code>format-date($d, "[D1] [MI] [Y]")</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>31st December, 2002</code>
                           </td>
                           <td>
                              <code>format-date($d, "[D1o] [MNn], [Y]", "en", (), ())</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>31 DEC 2002</code>
                           </td>
                           <td>
                              <code>format-date($d, "[D01] [MN,*-3] [Y0001]", "en", (), ())</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>December 31, 2002</code>
                           </td>
                           <td>
                              <code>format-date($d, "[MNn] [D], [Y]", "en", (), ())</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>31 Dezember, 2002</code>
                           </td>
                           <td>
                              <code>format-date($d, "[D] [MNn], [Y]", "de", (), ())</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>Tisdag 31 December 2002</code>
                           </td>
                           <td>
                              <code>format-date($d, "[FNn] [D] [MNn] [Y]", "sv", (), ())</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>[2002-12-31]</code>
                           </td>
                           <td>
                              <code>format-date($d, "[[[Y0001]-[M01]-[D01]]]")</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>Two Thousand and Three</code>
                           </td>
                           <td>
                              <code>format-date($d, "[YWw]", "en", (), ())</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>einunddrei&eszet;igste Dezember</code>
                           </td>
                           <td>
                              <code>format-date($d, "[Dwo] [MNn]", "de", (), ())</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>3:58 PM</code>
                           </td>
                           <td>
                              <code>format-time($t, "[h]:[m01] [PN]", "en", (), ())</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>3:58:45 pm</code>
                           </td>
                           <td>
                              <code>format-time($t, "[h]:[m01]:[s01] [Pn]", "en", (), ())</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>3:58:45 PM PDT</code>
                           </td>
                           <td>
                              <code>format-time($t, "[h]:[m01]:[s01] [PN] [ZN,*-3]", "en", (), ())</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>3:58:45 o'clock PM PDT</code>
                           </td>
                           <!--Text replaced by erratum E22 change 1"--><td>
                              <code>format-time($t, "[h]:[m01]:[s01] o'clock [PN] [ZN,*-3]", "en", (), ())</code>
                           </td>
                           <!--End of text replaced by erratum E22--></tr>
                        <tr>
                           <td>
                              <code>15:58</code>
                           </td>
                           <td>
                              <code>format-time($t,"[H01]:[m01]")</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>15:58:45.762</code>
                           </td>
                           <td>
                              <code>format-time($t,"[H01]:[m01]:[s01].[f001]")</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>15:58:45 GMT+02:00</code>
                           </td>
                           <!--Text replaced by erratum E24 change 4"--><td>
                              <code>format-time($t,"[H01]:[m01]:[s01] [z,6-6]", "en", (), ())</code>
                           </td>
                           <!--End of text replaced by erratum E24--></tr>
                        <tr><!--Text replaced by erratum E24 change 5"--><td>
                              <code>15.58 Uhr GMT+2</code>
                           </td>
                           <!--End of text replaced by erratum E24--><td>
                              <code>format-time($t,"[H01]:[m01] Uhr [z]", "de", (), ())</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>3.58pm on Tuesday, 31st December</code>
                           </td>
                           <td>
                              <code>format-dateTime($dt, "[h].[m01][Pn] on [FNn], [D1o] [MNn]")</code>
                           </td>
                        </tr>
                        <tr>
                           <td>
                              <code>12/31/2002 at 15:58:45</code>
                           </td>
                           <td>
                              <code>format-dateTime($dt, "[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]")</code>
                           </td>
                        </tr>
                     </tbody>
                  </table>
               
                  <p>The following examples use calendars other than the Gregorian calendar.</p>
                  <!--<p><emph>These examples use non-Latin characters which might not display
correctly in all browsers, depending on the system configuration.</emph></p>-->
                  <table role="data">
                     <thead>
                        <tr>
                           <th>Description</th>
                           <th>Request</th>
                           <th>Result</th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td>Islamic</td>
                           <!--Text replaced by erratum E23 change 1"--><td>
                              <code>format-date($d, "[D&amp;#x0661;] [Mn] [Y&amp;#x0661;]", "ar", "AH", ())</code>
                           </td>
                           <!--End of text replaced by erratum E23--><td>&#x662;&#x666; &#xfeb8;&#xfeed;&#x651;&#xfe8d;&#xfedd; &#x661;&#x664;&#x662;&#x663;</td>
                        </tr>
                        <tr>
                           <td>Jewish (with Western numbering)</td>
                           <td>
                              <code>format-date($d, "[D] [Mn] [Y]", "he", "AM", ())</code>
                           </td>
                           <td>&#x200f;26 &#x5d8;&#x5d1;&#x5ea; 5763</td>
                        </tr>
                        <tr>
                           <td>Jewish (with traditional numbering)</td>
                           <td>
                              <code>format-date($d, "[D&amp;#x05D0;t] [Mn] [Y&amp;#x05D0;t]", "he", "AM", ())</code>
                           </td>
                           <td>&#x5db;&#x5f4;&#x5d5; &#x5d8;&#x5d1;&#x5ea; &#x5ea;&#x5e9;&#x5e1;&#x5f4;&#x5d2;</td>
                        </tr>
                        <tr>
                           <td>Julian (Old Style)</td>
                           <td>
                              <code>format-date($d, "[D] [MNn] [Y]", "en", "OS", ())</code>
                           </td>
                           <td>18 December 2002</td>
                        </tr>
                        <tr>
                           <td>Thai</td>
                           <td>
                              <code>format-date($d, "[D&amp;#x0E51;] [Mn] [Y&amp;#x0E51;]", "th", "BE", ())</code>
                           </td>
                           <td>&#xe53;&#xe51; &#xe18;&#xe31;&#xe19;&#xe27;&#xe32;&#xe04;&#xe21; 
&#xe52;&#xe55;&#xe54;&#xe55;</td>
                        </tr>
                     </tbody>
                  </table>
            </div3>
         </div2>
         <div2 id="parsing-dates-and-times">
            <head>Parsing dates and times</head>
            
            
            <?local-function-index?>
            
            <p>A function is provided to parse dates and times expressed using syntax that is commonly encountered
            in internet protocols.</p>
            
            <div3 id="func-parse-ietf-date">
               <head><?function fn:parse-ietf-date?></head>
            </div3>
         </div2>
	
      </div1>
      <div1 id="QName-funcs">
         <head>Functions related to QNames</head>
         <div2 id="QName-constructors">
            <head>Functions to create a QName</head>
            <p>In addition to the <code>xs:QName</code> constructor function, QName values can
               be constructed by combining a namespace URI, prefix, and local name, or by resolving
               a lexical QName against the in-scope namespaces of an element node. This section
                    defines these functions. 
					Leading and trailing whitespace, if present, is stripped from
                    string arguments before the result is constructed.</p>
            <?local-function-index?>
            
            <div3 id="func-QName">
               <head><?function fn:QName?></head>
            </div3>
            <div3 id="func-parse-QName" diff="add" at="B">
               <head><?function fn:parse-QName?></head>
            </div3>
            <div3 id="func-resolve-QName">
               <head><?function fn:resolve-QName?></head>
            </div3>
         </div2>
         <div2 id="QName-functions">
            <head>Functions and operators related to QNames</head>
            <p>This section specifies functions on QNames as defined in <bibref ref="xmlschema-2"/>.</p>
            <?local-function-index?>
            <div3 id="func-QName-equal">
               <head><?function op:QName-equal?></head>
            </div3>
            <div3 id="func-prefix-from-QName">
               <head><?function fn:prefix-from-QName?></head>
            </div3>
            <div3 id="func-local-name-from-QName">
               <head><?function fn:local-name-from-QName?></head>
            </div3>
            <div3 id="func-namespace-uri-from-QName">
               <head><?function fn:namespace-uri-from-QName?></head>
            </div3>
            <div3 id="func-expanded-QName" diff="add" at="B">
               <head><?function fn:expanded-QName?></head>
            </div3>
            <div3 id="func-in-scope-namespaces" diff="add" at="A">
            <head><?function fn:in-scope-namespaces?></head>
            </div3>	           
			   <div3 id="func-in-scope-prefixes">
               <head><?function fn:in-scope-prefixes?></head>
            </div3>
            <div3 id="func-namespace-uri-for-prefix">
               <head><?function fn:namespace-uri-for-prefix?></head>
            </div3>	
         </div2>
      </div1>
      <div1 id="binary-functions">
         <head>Operators on base64Binary and hexBinary</head>
         <div2 id="binary-value-comparisons">
            <head>Comparisons of base64Binary and hexBinary values</head>
            <p>The following comparison operators on <code>xs:base64Binary</code> and
                    <code>xs:hexBinary</code> values are defined. Comparisons take two operands of
                    the same type; that is, both operands must be <code>xs:base64Binary</code> or
                    both operands may be <code>xs:hexBinary</code>. Each returns a boolean value.</p>
            <p>A value of type <code>xs:hexBinary</code> can be compared with a value of type
                    <code>xs:base64Binary</code> by casting one value to the other type. See
                        <specref ref="casting-to-binary"/>.</p>
            <?local-function-index?>
            <div3 id="func-hexBinary-equal">
               <head><?function op:hexBinary-equal?></head>
            </div3>
            <div3 id="func-hexBinary-less-than">
               <head><?function op:hexBinary-less-than?></head>
            </div3>
            <div3 id="func-base64Binary-equal">
               <head><?function op:base64Binary-equal?></head>
            </div3>
            <div3 id="func-base64Binary-less-than">
               <head><?function op:base64Binary-less-than?></head>
            </div3>
         </div2>
      </div1>
      <div1 id="NOTATION-functions">
         <head>Operators on NOTATION</head>
            <p>This section specifies operators that take <code>xs:NOTATION</code> values as arguments.</p>
            <?local-function-index?>
            <div2 id="func-NOTATION-equal">
               <head><?function op:NOTATION-equal?></head>
            </div2>
      </div1>
      <div1 id="node-functions">
         <head>Functions and operators on nodes</head>
         <p>This section specifies functions and operators on nodes. Nodes are formally defined
                in <xspecref spec="DM31" ref="Node"/>.</p>
         <?local-function-index?>
         <p>For the illustrative examples below assume an XQuery or transformation operating on a
                <code>PurchaseOrder</code> document containing a number of <code>line-item</code> elements. Each line-item has
                child elements called <code>description</code>, <code>price</code>, <code>quantity</code>, etc. whose content is different
                for each <code>line-item</code>. Quantity has simple content of type <code>xs:decimal</code>.
                Further assume that variables <code>$item1</code>, <code>$item2</code>, etc. are
                each bound to single line-item element nodes in the document in sequence and that
                the value of the quantity child of the first line-item is <code>5.0</code>.</p>

<eg xml:space="preserve" role="global-variable-binding"><![CDATA[let $po :=
<PurchaseOrder>
  <line-item>
    <description>Large widget</description>
    <price>8.95</price>
    <quantity>5.0</quantity>
  </line-item>
  <line-item>
    <description>Small widget</description>
    <price>3.99</price>
    <quantity>2.0</quantity>
  </line-item>
  <line-item>
    <description>Tiny widget</description>
    <price>1.49</price>
    <quantity>805</quantity>
  </line-item>
</PurchaseOrder>]]></eg>
         <eg role="global-variable-binding">let $item1 := $po/line-item[1]</eg>
         <eg role="global-variable-binding">let $item2 := $po/line-item[2]</eg>
         <eg role="global-variable-binding">let $item3 := $po/line-item[3]</eg>
 
         <div2 id="func-name">
            <head><?function fn:name?></head>
            </div2>
         <div2 id="func-local-name">
            <head><?function fn:local-name?></head>
         </div2>
         <div2 id="func-namespace-uri">
            <head><?function fn:namespace-uri?></head>
		 </div2>
         
         <div2 id="func-lang">
            <head><?function fn:lang?></head>
         </div2>
         <div2 id="func-root">
            <head><?function fn:root?></head>
         </div2>
         <div2 id="func-path">
            <head><?function fn:path?></head>
         </div2>
         <div2 id="func-has-children">
            <head><?function fn:has-children?></head>
         </div2>
         <div2 id="func-innermost">
            <head><?function fn:innermost?></head>
         </div2>
         <div2 id="func-outermost">
            <head><?function fn:outermost?></head>
         </div2>
      </div1>

      <div1 id="sequence-functions">
         <head>Functions and operators on sequences</head>
         <p>A <code>sequence</code> is an ordered collection of zero or more <code>items</code>.
                An <code>item</code> is either a node or an atomic value. The terms
                <code>sequence</code> and <code>item</code> are defined formally in <bibref ref="xquery-40"/> and <bibref ref="xpath-40"/>. </p>
         <div2 id="general-seq-funcs">
            <head>General functions and operators on sequences</head>
            <p>The following functions are defined on sequences. These functions work on any sequence, without performing
            any operations that are sensitive to the individual items in the sequence.</p>
            <?local-function-index?>
            <p>As in the previous section, for the illustrative examples below, assume an XQuery
                    or transformation operating on a non-empty Purchase Order document containing a
                    number of line-item elements. The variable <code>$seq</code> is bound to the
                    sequence of line-item nodes in document order. The variables
                    <code>$item1</code>, <code>$item2</code>, etc. are bound to separate, individual
                    line-item nodes in the sequence.</p>
            
            
            <div3 id="func-empty">
               <head><?function fn:empty?></head>
            </div3>
            <div3 id="func-exists">
               <head><?function fn:exists?></head>
            </div3>
            <div3 id="func-foot" diff="add" at="2022-11-16">
               <head><?function fn:foot?></head>
            </div3>
            <div3 id="func-head">
               <head><?function fn:head?></head>
            </div3>
            <div3 id="func-identity" diff="add" at="A">
               <head><?function fn:identity?></head>
            </div3>
            <div3 id="func-insert-before">
               <head><?function fn:insert-before?></head>
            </div3>
            <div3 id="func-intersperse" diff="add" at="A">
               <head><?function fn:intersperse?></head>
            </div3>
            <div3 id="func-items-at" diff="add" at="2022-11-16">
               <head><?function fn:items-at?></head>
            </div3>
            <div3 id="func-remove">
               <head><?function fn:remove?></head>
            </div3>
            <div3 id="func-replicate" diff="add" at="A">
               <head><?function fn:replicate?></head>
            </div3>
            <div3 id="func-reverse">
               <head><?function fn:reverse?></head>
            </div3>
            <div3 id="func-slice" diff="add" at="A">
               <head><?function fn:slice?></head>
            </div3>
            <!--<div3 id="func-slice-20201203" diff="add" at="A">
               <head><?function fn:slice-20201203?></head>
            </div3>-->
            <div3 id="func-subsequence">
               <head><?function fn:subsequence?></head>
            </div3>
            <div3 id="func-tail">
               <head><?function fn:tail?></head>
            </div3>
            <div3 id="func-trunk" diff="add" at="2022-11-16">
               <head><?function fn:trunk?></head>
            </div3>
            <div3 id="func-unordered">
               <head><?function fn:unordered?></head>
            </div3>
            
         </div2>
         <div2 id="comparing-sequences">
            <head>Functions that compare values in sequences</head>
            <p>The functions in this section rely on comparisons between the items in one or more
            sequences.</p>
            <?local-function-index?>
            <div3 id="func-starts-with-sequence" diff="add" at="B">
               <head><?function fn:starts-with-sequence?></head>
            </div3>  
            <div3 id="func-ends-with-sequence" diff="add" at="B">
               <head><?function fn:ends-with-sequence?></head>
            </div3>  
            <div3 id="func-contains-sequence" diff="add" at="B">
               <head><?function fn:contains-sequence?></head>
            </div3>  
            <div3 id="func-distinct-values">
               <head><?function fn:distinct-values?></head>
            </div3>  
            <div3 id="func-index-of">
               <head><?function fn:index-of?></head>
            </div3>
            <div3 id="func-deep-equal">
               <head><?function fn:deep-equal?></head>
            </div3>
            <div3 id="func-differences" diff="add" at="A">
               <head><?function fn:differences?></head>
            </div3>
         </div2>
         <div2 id="cardinality-functions">
            <head>Functions that test the cardinality of sequences</head>
            <p>The following functions test the cardinality of their sequence arguments.</p>
            <?local-function-index?>
            <p>The functions <code>fn:zero-or-one</code>, <code>fn:one-or-more</code>, and
                    <code>fn:exactly-one</code> defined in this section, check that the cardinality
                    of a sequence is in the expected range. They are particularly useful with regard
                    to static typing. For example, the function call <code>fn:remove($seq, fn:index-of($seq2, 'abc'))</code>
                    requires the result of the call on <code>fn:index-of</code> to be a singleton integer, 
                    but the static type system cannot infer this; writing the expression as 
                    <code>fn:remove($seq, fn:exactly-one(fn:index-of($seq2, 'abc')))</code> 
                    will provide a suitable static type at query analysis time, and ensures that the length of the sequence is
                    correct with a dynamic check at query execution time.</p>
            <p>The type signatures for these functions deliberately declare the argument type as
                    <code>item()*</code>, permitting a sequence of any length. A more restrictive
                    signature would defeat the purpose of the function, which is to defer
                    cardinality checking until query execution time.</p>
            <div3 id="func-zero-or-one">
               <head><?function fn:zero-or-one?></head>
            </div3>
            <div3 id="func-one-or-more">
               <head><?function fn:one-or-more?></head>
            </div3>
            <div3 id="func-exactly-one">
               <head><?function fn:exactly-one?></head>
            </div3>
         </div2>
         <!--<div2 id="union-intersection-except">
            <head>Union, intersection and difference</head>
            <?local-function-index?>
            <p>As in the previous sections, for the illustrative examples below, assume an
                    XQuery or transformation operating on a Purchase Order document containing a
                    number of line-item elements. The variables <code>$item1</code>,
                    <code>$item2</code>, etc. are bound to individual line-item nodes in the
                    sequence. We use sequences of these nodes in some of the examples below.</p>
            
            <div3 id="func-union">
               <head><?function op:union?></head>
            </div3>
            <div3 id="func-intersect">
               <head><?function op:intersect?></head>
            </div3>
            <div3 id="func-except">
               <head><?function op:except?></head>
            </div3>
         </div2>-->
         <div2 id="aggregate-functions">
            <head>Aggregate functions</head>
            <p>Aggregate functions take a sequence as argument and return a single value
                    computed from values in the sequence. Except for <code>fn:count</code>, the
                    sequence must consist of values of a single type or one if its subtypes, or they
                    must be numeric. <code>xs:untypedAtomic</code> values are permitted in the
                    input sequence and handled by special conversion rules. The type of the items in
                    the sequence must also support certain operations.</p>
            <?local-function-index?>
            <div3 id="func-count">
               <head><?function fn:count?></head>
            </div3>
            <div3 id="func-avg">
               <head><?function fn:avg?></head>
            </div3>
            <div3 id="func-max">
               <head><?function fn:max?></head>
            </div3>
            <div3 id="func-min">
               <head><?function fn:min?></head>
            </div3>
            <div3 id="func-sum">
               <head><?function fn:sum?></head>
			   </div3>
            <div3 id="func-all-equal" diff="add" at="B">
               <head><?function fn:all-equal?></head>
            </div3>
            <div3 id="func-all-different" diff="add" at="B">
               <head><?function fn:all-different?></head>
            </div3>
		 </div2>
         <!--<div2 id="fns-that-generate-sequences">
            <head>Functions and operators that generate sequences</head>
            <?local-function-index?>
            <div3 id="func-to">
               <head><?function op:to?></head>
            </div3>
         </div2>-->
         <div2 id="fns-on-identifiers">
            <head>Functions on node identifiers</head>
            <p>This section defines a number of functions used to find elements by <code>ID</code> or <code>IDREF</code> value, 
            or to generate IDs.</p>
            <?local-function-index?>
            <div3 id="func-id">
               <head><?function fn:id?></head>
            </div3>
            <div3 id="func-element-with-id">
               <head><?function fn:element-with-id?></head>
            </div3>
            <div3 id="func-idref">
               <head><?function fn:idref?></head>
            </div3>
            <div3 id="func-generate-id">
               <head><?function fn:generate-id?></head>
            </div3>
         </div2>
         <div2 id="fns-on-docs">
            <head>Functions giving access to external information</head>
            <p>The functions in this section provide access to resources (such as files) in the external environment.</p>
            <?local-function-index?>
            <div3 id="func-doc">
               <head><?function fn:doc?></head>
            </div3>
            <div3 id="func-doc-available">
               <head><?function fn:doc-available?></head>
            </div3>
            <div3 id="func-collection">
               <head><?function fn:collection?></head>
            </div3>
            <div3 id="func-uri-collection">
               <head><?function fn:uri-collection?></head>
            </div3>
            <div3 id="func-unparsed-text">
               <head><?function fn:unparsed-text?></head>
            </div3>
            <div3 id="func-unparsed-text-lines">
               <head><?function fn:unparsed-text-lines?></head>
            </div3>
            <div3 id="func-unparsed-text-available">
               <head><?function fn:unparsed-text-available?></head>
            </div3>
            <div3 id="func-environment-variable">
               <head><?function fn:environment-variable?></head>
            </div3>
            <div3 id="func-available-environment-variables">
               <head><?function fn:available-environment-variables?></head>
            </div3>
         </div2>
      </div1>
      <div1 id="parsing-and-serializing">
         <head>Parsing and serializing</head>
         <p>These functions convert between the lexical representation and XPath and XQuery data model representation of various file formats.</p>
         <div2 id="xml-functions">
            <head>Functions on XML Data</head>
            <p>These functions convert between the lexical representation of XML and the tree representation.</p>
            <?local-function-index?>
            <div3 id="func-parse-xml">
               <head><?function fn:parse-xml?></head>
            </div3>
            <div3 id="func-parse-xml-fragment">
               <head><?function fn:parse-xml-fragment?></head>
            </div3>
            <div3 id="func-serialize">
               <head><?function fn:serialize?></head>
            </div3>
         </div2>
         <div2 id="json-functions">
            <head>Functions on JSON Data</head>
            <p>The functions listed parse or serialize JSON data.</p>
            <?local-function-index?>
            <p>Note also that the function <code>fn:serialize</code> has an option to act as the inverse function to <code>fn:parse-json</code>.</p>
            <div3 id="func-parse-json">
               <head><?function fn:parse-json?></head>
            </div3>
            <div3 id="func-json-doc">
               <head><?function fn:json-doc?></head>
            </div3>
            <div3 id="func-json-to-xml">
               <head><?function fn:json-to-xml?></head>
            </div3>
            <div3 id="func-xml-to-json">
               <head><?function fn:xml-to-json?></head>
            </div3>
            <div3 id="func-json" diff="add" at="A">
               <head><?function fn:json?></head>
            </div3>
         </div2>
         <div2 id="html-functions">
            <head>Functions on HTML Data</head>
            <p>These functions convert between the lexical representation of HTML and the tree representation.</p>
            <?local-function-index?>
            <div3 id="html-parser-options">
               <head>HTML parser options</head>
               <example role="record">
                  <record id="parse-html-options">
                     <arg name="method" type="union(enum(&quot;html&quot;, &quot;xhtml&quot;), xs:string)"/>
                     <arg name="html-version" type="union(enum(&quot;LS&quot;), xs:decimal)"/>
                     <arg name="encoding?" type="xs:string?"/>
                     <arg name="include-template-content?" type="xs:boolean?"/>
                     <arg name="*"/>
                  </record>
               </example>
               <p>The keys of this record type are:</p>
               <table border="0" role="data">
                  <caption>The parse-html options record</caption>
                  <tbody>
                     <tr>
                        <td>method</td>
                        <td>
                           <p>The approach used to parse the HTML document into XDM nodes.</p>
                           <note>
                              <p>An implementation may use this to specify a specific algorithm, tool, or
                                 library that is used, such as <code>tidy</code> or <code>tagsoup</code>.</p>
                              <p>An implementation may also use this to specify a non-standard variant of
                                 HTML to support, such as <code>word</code> for the Microsoft Word HTML variant.</p>
                           </note>
                        </td>
                     </tr>
                     <tr>
                        <td>html-version</td>
                        <td>
                           <p>The version of HTML to support when parsing HTML strings or sequences of octets.</p>
                           <p>Valid values an implementation must support for the <code>html</code> method are:</p>
                           <olist>
                              <item>
                                 <p><code>3</code>, <code>3.2</code> for HTML 3.2 W3C Recommendation, 14 January 1997</p>
                              </item>
                              <item>
                                 <p><code>4</code>, <code>4.01</code> for HTML 4.01 W3C Recommendation, 24 December 1999</p>
                              </item>
                              <item>
                                 <p><code>5.0</code> for HTML5 W3C Recommendation, 28 October 2014</p>
                              </item>
                              <item>
                                 <p><code>5.1</code> for HTML 5.1 W3C Recommendation, 1 November 2016</p>
                              </item>
                              <item>
                                 <p><code>5.2</code> for HTML 5.2 W3C Recommendation, 14 December 2017</p>
                              </item>
                              <item>
                                 <p><code>LS</code> for HTML Living Standard, WHATWG</p>
                              </item>
                              <item>
                                 <p><code>5</code> may be equivalent to any of <code>5.0</code>, <code>5.1</code>, <code>5.2</code>, or <code>LS</code></p>
                              </item>
                           </olist>
                           <p>Valid values an implementation must support for the <code>xhtml</code> method are:</p>
                           <olist>
                              <item>
                                 <p><code>1.0</code> for XHTML 1.0 W3C Recommendation, 26 January 2000</p>
                              </item>
                              <item>
                                 <p><code>1.1</code> for XHTML 1.1 W3C Recommendation, 31 May 2001</p>
                              </item>
                           </olist>
                           <p>Any other <code>method</code> and <code>html-version</code> combinations are
                              <termref def="implementation-defined">implementation-defined</termref>.</p>
                        </td>
                     </tr>
                     <tr>
                        <td>encoding</td>
                        <td>The character encoding to use to decode a sequence of octets that represents
                           an HTML document.</td>
                     </tr>
                     <tr>
                        <td>include-template-content</td>
                        <td>
                           <p>Defines how to handle elements in the <code>HTMLTemplateElement.content</code>
                              property.</p>
                           <p>If this option is <code>true()</code>, the <code>template</code> element's
                              children are the children of the <code>content</code> property's document
                              fragment node.</p>
                           <p>If this option is <code>false()</code>, the <code>template</code> element's
                              children are the empty sequence.</p>
                           <p>The default behaviour is
                              <termref def="implementation-defined">implementation-defined</termref>.</p>
                           <note>
                              <p>This allows an implementation to support the behaviour defined in
                                 <bibref ref="html5"/> section 4.12.3.1, <emph>Interaction of
                                 <code>template</code> elements with XSLT and XPath</emph>:</p>
                              <olist>
                                 <item>
                                    <p>This option would default to <code>true()</code> for an XSLT processor
                                       operating on an HTML DOM constructed from an XHTML document.</p>
                                 </item>
                                 <item>
                                    <p>This option would default to <code>false()</code> for an XPath processor
                                       using the <bibref ref="dom-ls"/> section 8, <emph>XPath</emph> APIs.</p>
                                 </item>
                              </olist>
                           </note>
                        </td>
                     </tr>
                     <tr>
                        <td>*</td>
                        <td>
                           <p>Additional <termref def="implementation-defined"/> parser options.</p>
                           <example>
                              <head>Example:</head>
                              <p>An implementation may provide keys for options to the <emph>tidy</emph>
                                 HTML parser, allowing a user to configure the behaviour of that parser.</p>
                           </example>
                        </td>
                     </tr>
                  </tbody>
               </table>
            </div3>
            <div3 id="func-parse-html">
               <head><?function fn:parse-html?></head>
            </div3>
         </div2>
         <div2 id="json">
            <head>Conversion to and from JSON</head>


            <p>JSON is a popular format for exchange of structured data on the web: it is specified in <bibref ref="rfc7159"/>.
               This section describes facilities
               allowing JSON data to be converted to and from XDM values.</p>

            <p>This specification describes two ways of representing JSON data losslessly
               using XDM constructs. The first method uses XDM maps to represent JSON objects, and XDM arrays to
               represent JSON arrays. The second method represents all JSON constructs using XDM element and attribute nodes.</p>


            <div3 id="json-to-maps-and-arrays">
               <head>Representing JSON using maps and arrays</head>


               <p>This section defines a mapping from JSON data to XDM maps and arrays. Two functions are available
                  to support this mapping: <code>fn:parse-json</code> and <code>fn:serialize</code> (with options
                  selecting JSON as the output method).
                  The <code>fn:parse-json</code> function will accept any JSON text as input, and converts it
                  to XDM data values. The <code>fn:serialize</code> function (with JSON as the output method) will accept any XDM
                  value produced using <code>fn:parse-json</code> and convert it back to the original JSON text
                  (subject to insignificant variations such as reordering the properties in a JSON object). </p>

               <note><p>The conversion is lossless if recommended JSON good practice is followed. Information may however be lost if
                  (a) JSON numbers are not exactly representable as double-precision floating point, or (b) duplicate key
                  values appear within a JSON object.</p></note>

               <p>The representation of JSON data produced by the <code>fn:parse-json</code> function
                  has been chosen with ease of manipulation as a design aim. For example, a simple JSON object
                  such as <code>{"Sun":1, "Mon":2, "Tue":3, ...}</code> produces a simple map, so if the result
                  of parsing is held in <code>$weekdays</code>, the number for a given weekday can be extracted
                  using an expression such as <code>$weekdays?Tue</code>. Similarly, a simple array such as
                  <code>["Sun", "Mon", "Tue", ...]</code> produces an array that can be addressed as, for example,
                  <code>$weekdays(3)</code>. A more deeply nested structure can be addressed in a similar way:
                  for example if the JSON text is an array of person objects, each of which has a property named
                  "phones" which is an array of strings containing phone numbers, then the first phone number of
                  each person in the data can be addressed as <code>$data?phones(1)</code>.</p>
            </div3>


            <div3 id="json-to-xml-mapping">
               <head>XML Representation of JSON</head>


               <p>This section defines a mapping from JSON data to XML (specifically, to XDM element and attribute nodes). A
                  function <code>fn:json-to-xml</code> is provided to take a JSON string as input and convert it
                  to the XML representation, and a second function <code>fn:xml-to-json</code> performs the reverse operation.</p>

               <p>The XML representation is designed to be capable of representing any valid JSON text including
                  one that uses characters which are not valid in XML. The transformation is normally lossless: that is,
                  distinct JSON texts convert to distinct XML representations. When converting JSON to XML, options are provided
                  to reject unsupported characters, to replace them with a substitute character, or to leave them in
                  backslash-escaped form.</p>

               <note><p>The conversion is lossless if recommended JSON good practice is followed. Information may however be lost if
                  (a) JSON numbers are not exactly representable as double-precision floating point, or (b) duplicate key
                  values appear within a JSON object.</p></note>

               <p>The following example demonstrates the correspondence of a JSON text and the corresponding XML
                  representation. </p>

               <example>
                  <head>A JSON Text and its XML Representation</head>
                  <p>Consider the following JSON text:</p>
                  <eg><![CDATA[
{
    "desc"    : "Distances between several cities, in kilometers.",
    "updated" : "2014-02-04T18:50:45",
    "uptodate": true,
    "author"  : null,
    "cities"  : {
        "Brussels": [
                      {"to": "London",    "distance": 322},
                      {"to": "Paris",     "distance": 265},
                      {"to": "Amsterdam", "distance": 173}
                    ],
        "London": [
                      {"to": "Brussels",  "distance": 322},
                      {"to": "Paris",     "distance": 344},
                      {"to": "Amsterdam", "distance": 358}
                  ],
        "Paris": [
                      {"to": "Brussels",  "distance": 265},
                      {"to": "London",    "distance": 344},
                      {"to": "Amsterdam", "distance": 431}
                 ],
        "Amsterdam": [
                      {"to": "Brussels",  "distance": 173},
                      {"to": "London",    "distance": 358},
                      {"to": "Paris",     "distance": 431}
                     ]
     }
}]]></eg>
                  <p>The XML representation of this text is as follows. Whitespace is included in the XML representation for purposes of illustration,
                     but it will not necessarily be present in the output of the
                     <function>json-to-xml</function> function.</p>
                  <eg><![CDATA[
  <map xmlns="http://www.w3.org/2005/xpath-functions">
    <string key='desc'>Distances between several cities, in kilometers.</string>
    <string key='updated'>2014-02-04T18:50:45</string>
    <boolean key="uptodate">true</boolean>
    <null key="author"/>
    <map key='cities'>
      <array key="Brussels">
        <map>
            <string key="to">London</string>
            <number key="distance">322</number>
        </map>
        <map>
            <string key="to">Paris</string>
            <number key="distance">265</number>
        </map>
        <map>
            <string key="to">Amsterdam</string>
            <number key="distance">173</number>
        </map>
      </array>
      <array key="London">
        <map>
            <string key="to">Brussels</string>
            <number key="distance">322</number>
        </map>
        <map>
            <string key="to">Paris</string>
            <number key="distance">344</number>
        </map>
        <map>
            <string key="to">Amsterdam</string>
            <number key="distance">358</number>
        </map>
      </array>
      <array key="Paris">
        <map>
            <string key="to">Brussels</string>
            <number key="distance">265</number>
        </map>
        <map>
            <string key="to">London</string>
            <number key="distance">344</number>
        </map>
        <map>
            <string key="to">Amsterdam</string>
            <number key="distance">431</number>
        </map>
      </array>
      <array key="Amsterdam">
        <map>
            <string key="to">Brussels</string>
            <number key="distance">173</number>
        </map>
        <map>
            <string key="to">London</string>
            <number key="distance">358</number>
        </map>
        <map>
            <string key="to">Paris</string>
            <number key="distance">431</number>
        </map>
      </array>
    </map>
  </map>]]></eg>
               </example>

               <p>An XSD 1.0 schema for the XML representation is provided in <specref ref="schema-for-json"/>.
                  It is not necessary to import this schema into the static context unless the stylesheet or query
                  makes explicit reference to the components defined in the schema. If the stylesheet or query does import a schema
                  for the namespace <code>http://www.w3.org/2005/xpath-functions</code>, then:</p>

               <olist>
                  <item><p>Unless the host language specifies otherwise, the processor (if it is schema-aware)
                     <rfc2119>must</rfc2119> recognize an import declaration for
                     this namespace, whether or not a schema location is supplied.</p></item>
                  <item><p>If a schema location is provided, then the schema document at that location <rfc2119>must</rfc2119>
                     be equivalent to the schema document at <specref ref="schema-for-json"/>; the effect if it is not equivalent is
                     <termref def="implementation-dependent"/></p></item>
               </olist>

               <p>The rules governing the mapping from JSON to XML are as follows. In these rules, the phrase
                  "an element named N" is to be interpreted as meaning "an element node whose local name is N and whose
                  namespace URI is <code>http://www.w3.org/2005/xpath-functions</code>".</p>

               <olist>
                  <item><p>The JSON value <code>null</code> is represented by an element named <code>null</code>, with empty content.</p></item>
                  <item><p>The JSON values <code>true</code> and <code>false</code> are represented by an element named <code>boolean</code>,
                     with content conforming to the type <code>xs:boolean</code>. When the element is created by the
                     <code>fn:json-to-xml</code> function, the string value of the element will be <code>true</code> or <code>false</code>.
                     The <code>fn:xml-to-json</code> function also recognizes other strings that validate as <code>xs:boolean</code>,
                     for example <code>1</code> and <code>0</code>. Leading and trailing whitespace is accepted.
                  </p></item>
                  <item><p>A JSON number is represented by an element named <code>number</code>,
                     with content conforming to the type <code>xs:double</code>, with the additional restriction that the value
                     must not be positive or negative infinity, nor <code>NaN</code>. The
                     <code>fn:json-to-xml</code> function creates an element whose string value is lexically the same as the JSON representation
                     of the number. The <code>fn:xml-to-json</code> function generates a JSON representation that is the result of casting the
                     (typed or untyped) value of the node to <code>xs:double</code> and then casting the result to <code>xs:string</code>.
                     Leading and trailing whitespace is accepted.
                     Since JSON does not impose limits on the range or precision
                     of numbers, these rules mean that conversion from JSON to XML will always succeed, and will retain full precision
                     in the lexical representation unless the data model implementation is one that reconstructs the string value from
                     the typed value. In the reverse direction, conversion from XML to JSON may fail if the value is infinity or <code>NaN</code>,
                     or if the string value is such that casting to <code>xs:double</code> produces positive or negative infinity.
                  </p>
                  </item>
                  <item><p>A JSON string is represented by an element named <code>string</code>, with
                     content conforming to the type <code>xs:string</code>. The <code>string</code> element has two
                     alternative representations: escaped form, and unescaped form.</p></item>
                  <item><p>A JSON array is represented by an element named <code>array</code>. The content is a sequence of
                     child elements representing the members of the array in order, each such element being the representation
                     of the array member obtained by applying these rules recursively.</p></item>
                  <item><p>A JSON object is represented by an element named <code>map</code>. The content is a sequence
                     of child elements each of which represents one of the name/value pairs in the object. The representation of the
                     name/value pair <var>N:V</var> is obtained by taking the element that represents the value <var>V</var> (by applying these
                     rules recursively) and adding an attribute with name <code>key</code> (in no namespace), whose
                     value is <var>N</var> as an instance of <code>xs:string</code>. The functions <code>fn:json-to-xml</code> and
                     <code>fn:xml-to-json</code> both retain the order of entries, subject to rules about how duplicate keys are handled. The
                     key may be represented in escaped or unescaped form.</p></item>

               </olist>

               <p>The attribute <code>escaped="true"</code> may be specified on a <code>string</code> element to indicate
                  that the string value contains backslash-escaped characters that are to be interpreted according to the JSON
                  rules. The attribute <code>escaped-key="true"</code> may be specified on any element with a <code>key</code> attribute to indicate
                  that the key contains backslash-escaped characters that are to be interpreted according to the JSON
                  rules. Both attributes have the default value <code>false</code>, signifying that the relevant value is in unescaped form.
                  In unescaped form, the backslash character has no special significance (it represents itself).</p>

               <p>The JSON grammar for <code>number</code> is a subset of the lexical space of
                  the XSD type <code>xs:double</code>. The mapping from JSON <code>number</code> values to <code>xs:double</code>
                  values is defined by the XPath rules for casting from <code>xs:string</code> to <code>xs:double</code>. Note that
                  these rules will never generate an error for out-of-range values; instead very large or very small values will be
                  converted to <code>+INF</code> or <code>-INF</code>. Since JSON does not impose limits on the range or precision
                  of numbers, the conversion is not guaranteed to retain full precision.</p>

               <p>Although the order of entries in a JSON object is generally considered to have no significance, the functions
                  <code>json-to-xml</code> and <code>json-to-xml</code> both retain order.</p>

               <p>The XDM representation of a JSON value may either be untyped (all elements annotated as <code>xs:untyped</code>, attributes
                  as <code>xs:untypedAtomic</code>), or it may be typed. If it is typed, then it <rfc2119>must</rfc2119> have the type
                  annotations obtained by validating the untyped representation against the schema given in <specref ref="schema-for-json"/>.
                  If it is untyped, then it <rfc2119>must</rfc2119> be an XDM instance such that validation against this schema would succeed;
                  with the proviso that all attributes other than those in no namespace or in namespace <code>http://www.w3.org/2005/xpath-functions</code>
                  are ignored, including attributes such as <code>xsi:type</code> and <code>xsi:nil</code> that would normally influence the process
                  of schema validation.</p>

               <p>The namespace prefix associated with the namespace <code>http://www.w3.org/2005/xpath-functions</code> (if any) is immaterial.
                  The effect of the <code>fn:xml-to-json</code> function does not depend on the choice of prefix, and the prefix (if any) generated by the
                  <code>fn:json-to-xml</code> function is <termref def="implementation-dependent">implementation-dependent</termref>.</p>
            </div3>
         </div2>
         <div2 id="html">
            <head>Conversion from HTML</head>


            <p>The HTML5 format is specified in <bibref ref="html5"/>. This section describes facilities
               allowing HTML5 documents to be converted to XDM nodes.</p>

            <p>The <bibref ref="dom-ls"/> specification defines HTML DOM nodes that are mapped to XDM
               nodes as follows:</p>
            <olist>
               <item>
                  <p>The HTML DOM <code>Document</code> interface maps to <xspecref spec="DM40" ref="DocumentNode"/>.</p>
               </item>
               <item>
                  <p>The HTML DOM <code>Element</code> interface maps to <xspecref spec="DM40" ref="ElementNode"/>.</p>
               </item>
               <item>
                  <p>The HTML DOM <code>Attr</code> interface maps to <xspecref spec="DM40" ref="AttributeNode"/> or
                     <xspecref spec="DM40" ref="NamespaceNode"/>.</p>
               </item>
               <item>
                  <p>The HTML DOM <code>ProcessingInstruction</code> interface maps to
                     <xspecref spec="DM40" ref="ProcessingInstructionNode"/>.</p>
               </item>
               <item>
                  <p>The HTML DOM <code>Comment</code> interface maps to <xspecref spec="DM40" ref="CommentNode"/>.</p>
               </item>
               <item>
                  <p>The HTML DOM <code>Text</code> interface maps to <xspecref spec="DM40" ref="TextNode"/>.</p>
               </item>
            </olist>

            <note>
               <p>The HTML parsing algorithm does not support processing instructions. If encountered
                  they are parsed as comment nodes. The HTML DOM <code>ProcessingInstruction</code>
                  interface is for when the XHTML parsing algorithm is used, where the document is a
                  valid XML document.</p>
            </note>

            <note>
               <p>The HTML DOM <code>CDATASection</code> interface is an instance of HTML DOM
                  <code>Text</code>, so CDATA sections also map to <xspecref spec="DM40" ref="TextNode"/>.</p>
            </note>

            <note>
               <p>The HTML DOM <code>DocumentFragment</code> interface is not supported as an XML node.
                  There are two places in the HTML DOM where this is used:</p>
               <olist>
                  <item>
                     <p>The HTML DOM <code>ShadowRoot</code> interface is not present in the main HTML DOM
                        tree. It is only accessible via JavaScript.</p>
                  </item>
                  <item>
                     <p>The <code>template</code> element's <code>content</code> property contains
                        the child nodes of the <code>template</code> element. The behaviour of this
                        is defined by the <code>include-template-content</code> key in the
                        <specref ref="html-parser-options"/> map.</p>
                  </item>
               </olist>
            </note>

            <div3 id="html-attributes-accessor">
               <head>attributes Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-attributes"/>
                  <code>dm:attributes($node)</code> for an HTML DOM <code>Node</code> is as follows:</p>
               <olist>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Element</code> then the result
                        is the value of the <code>Element.attributes</code> property mapped to a
                        sequence as described below;</p>
                  </item>
                  <item>
                     <p>Otherwise, the result is an empty sequence.</p>
                  </item>
               </olist>

               <p>The resulting HTML DOM <code>NamedNodeMap</code> is mapped to a sequence as follows:</p>
               <olist>
                  <item>
                     <p><code>NamedNodeMap.length</code> is the length of the sequence, where a length
                        of <code>0</code> results in an empty sequence;</p>
                  </item>
                  <item>
                     <p><code>NamedNodeMap.item(n)</code> is the n<sup>th</sup> element of the sequence.</p>
                  </item>
               </olist>

               <p>That sequence is then filtered as follows:</p>
               <olist>
                  <item>
                     <p>If the <code>Attr.namespaceURI</code> property is
                        <code>"http://www.w3.org/2000/xmlns/"</code>, the attribute is not included in
                        this sequence;</p>
                  </item>
                  <item>
                     <p>If the <code>Attr.localName</code> property is <code>"xmlns"</code>, the attribute
                        is not included in this sequence;</p>
                  </item>
                  <item>
                     <p>If the <code>Attr.localName</code> property starts with <code>"xmlns:"</code>,
                        the attribute is not included in this sequence;</p>
                  </item>
                  <item>
                     <p>Otherwise, the attribute is included in this sequence using the XDM mapping rules
                        described in this section.</p>
                  </item>
               </olist>

               <note>
                  <p>The HTML DOM <code>Element.attributes</code> property includes namespace and non-namespace
                     attributes in the list when the HTML or XML parser is used. As such, the namespace attributes
                     have to be filtered from the resulting XDM attribute sequence.</p>
               </note>

               <note>
                  <p>When the resulting document is an HTML DOM <code>HTMLDocument</code>, the
                     <code>Attr.localName</code> and <code>Attr.name</code> properties of HTML DOM
                     <code>Attr</code> nodes are both set to the qualified name.</p>
               </note>
            </div3>
            <div3 id="html-base-uri-accessor">
               <head>base-uri Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-base-uri"/>
                  <code>dm:base-uri($node)</code> for an HTML DOM <code>Node</code> is the value of the
                  <code>Node.baseURI</code> property mapped as follows:</p>
               <olist>
                  <item>
                     <p>If the value is null or an empty string, then the result is an empty sequence;</p>
                  </item>
                  <item>
                     <p>Otherwise, the string value is cast to an <code>xs:anyURI</code>.</p>
                  </item>
               </olist>
            </div3>
            <div3 id="html-children-accessor">
               <head>children Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-children"/>
                  <code>dm:children($node)</code> for an HTML DOM <code>Node</code> is as follows:</p>
               <olist>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Document</code> then the result
                        is the value of the <code>Node.childNodes</code> property mapped to a sequence;</p>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>HTMLTemplateElement</code> then the
                        result is determined as follows:</p>
                     <olist>
                        <item>
                           <p>If the <code>include-template-content</code> key of the
                              <code>parse-html-options</code> map is <code>false()</code>, the result is
                              an empty sequence;</p>
                        </item>
                        <item>
                           <p>Select the HTML DOM <code>DocumentFragment</code> from the
                              <code>HTMLTemplateElement.content</code> property;</p>
                        </item>
                        <item>
                           <p>The HTML DOM <code>DocumentFragment</code>'s <code>Node.childNodes</code>
                              property is mapped to a sequence;</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Element</code> then the result the
                        value of the <code>Node.childNodes</code> property mapped to a sequence;</p>
                  </item>
                  <item>
                     <p>Otherwise, the result is an empty sequence.</p>
                  </item>
               </olist>

               <p>The resulting HTML DOM <code>NodeList</code> is mapped to a sequence as follows:</p>
               <olist>
                  <item>
                     <p><code>NodeList.length</code> is the length of the sequence, where a length
                        of <code>0</code> results in an empty sequence;</p>
                  </item>
                  <item>
                     <p><code>NodeList.item(n)</code> is the n<sup>th</sup> element of the sequence.</p>
                  </item>
               </olist>

               <p>That sequence is then filtered as follows:</p>
               <olist>
                  <item>
                     <p>If the child is an instance of HTML DOM <code>DocumentType</code>, that child
                        is not included in this sequence;</p>
                  </item>
                  <item>
                     <p>Otherwise, the HTML DOM <code>Node</code> nodes are mapped to XDM according to
                        the rules in this section.</p>
                  </item>
               </olist>
            </div3>
            <div3 id="html-document-uri-accessor">
               <head>document-uri Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-document-uri"/>
                  <code>dm:document-uri($node)</code> for an HTML DOM <code>Node</code> is as follows:</p>
               <olist>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Document</code> then the value
                        of the <code>Document.documentURI</code> property mapped as follows:</p>
                     <olist>
                        <item>
                           <p>If the value is null or an empty string, then the result is an empty sequence;</p>
                        </item>
                        <item>
                           <p>Otherwise, the string value is cast to an <code>xs:anyURI</code>.</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>Otherwise, the result is an empty sequence.</p>
                  </item>
               </olist>
            </div3>
            <div3 id="html-is-id-accessor">
               <head>is-id Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-is-id"/>
                  <code>dm:is-id($node)</code> for an HTML DOM <code>Node</code> is as follows:</p>
               <olist>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Attr</code> then:</p>
                     <olist>
                        <item>
                           <p>If the <code>Attr.name</code> property (its qualified name) is
                              <code>"id"</code>, the result is <code>fn:true()</code>;</p>
                        </item>
                        <item>
                           <p>Otherwise, the result is <code>fn:false()</code>;</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>Otherwise, the result is <code>fn:false()</code>.</p>
                  </item>
               </olist>
            </div3>
            <div3 id="html-is-idrefs-accessor">
               <head>is-idrefs Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-is-idrefs"/>
                  <code>dm:is-idrefs($node)</code> for an HTML DOM <code>Node</code> is an empty sequence.</p>
            </div3>
            <div3 id="html-namespace-nodes-accessor">
               <head>namespace-nodes Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-namespace-nodes"/>
                  <code>dm:namespace-nodes($node)</code> for an HTML DOM <code>Node</code> is as follows:</p>
               <olist>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Element</code> then the result
                        is determined as described below;</p>
                  </item>
                  <item>
                     <p>Otherwise, the result is an empty sequence.</p>
                  </item>
               </olist>

               <p>To compute the namespace nodes for an HTML DOM <code>Element</code>, the following
                  algorithm is used:</p>
               <olist>
                  <item>
                     <p>Let <code>$namespaces</code> be the list of currently computed namespace nodes;</p>
                  </item>
                  <item>
                     <p>For each <code>$namespace</code> in the <specref ref="html-namespace-attributes"/>
                        of the current element <code>$node</code>:</p>
                     <olist>
                        <item>
                           <p>If <code>$namespace</code> is in <code>$namespaces</code>, don't add the
                              namespace to the list;</p>
                        </item>
                        <item>
                           <p>Otherwise, add <code>$namespace</code> to the <code>$namespaces</code> list;</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>Let <code>$parent</code> be the <specref ref="html-parent-accessor"/> of
                        <code>$node</code>;</p>
                  </item>
                  <item>
                     <p>If <code>$parent</code> is an empty sequence, the result is <code>$namespaces</code>
                        and this algorithm stops.</p>
                  </item>
                  <item>
                     <p>Otherwise, repeat from step 2 using <code>$parent</code> as <code>$node</code>.</p>
                  </item>
               </olist>

               <note>
                  <p>The HTML DOM <code>Node</code> API provides several functions for working with
                     namespaces (<code>lookupPrefix</code>, <code>lookupNamespaceURI</code>, and
                     <code>isDefaultNamespace</code>). These only work when an HTML implementation
                     returns an HTML DOM <code>XMLDocument</code> node, such as when
                     the <code>"application/xhtml+xml"</code> mimetype is passed to the
                     <code>DOMParser.parseFromString</code> Web API.</p>
                  <p>An implementation may use those APIs in the cases where it is known that the
                     parsed document is an <code>XMLDocument</code>.</p>
               </note>

               <div4 id="html-namespace-attributes">
                  <head>dm:namespace-attributes</head>


                  <p>The result of <code>dm:namespace-attributes($element)</code> for an HTML DOM
                     <code>Node</code> is as follows:</p>
                  <olist>
                     <item>
                        <p>If the node is an instance of HTML DOM <code>Element</code> then the result the
                           value of the <code>Node.attributes</code> property mapped to a sequence;</p>
                     </item>
                     <item>
                        <p>Otherwise, the result is an empty sequence.</p>
                     </item>
                  </olist>

                  <p>The resulting HTML DOM <code>NamedNodeMap</code> is mapped to a sequence as follows:</p>
                  <olist>
                     <item>
                        <p><code>NamedNodeMap.length</code> is the length of the sequence, where a length
                           of <code>0</code> results in an empty sequence;</p>
                     </item>
                     <item>
                        <p><code>NamedNodeMap.item(n)</code> is the n<sup>th</sup> element of the sequence.</p>
                     </item>
                  </olist>

                  <p>That sequence is then filtered as follows:</p>
                  <olist>
                     <item>
                        <p>If the <code>Attr.namespaceURI</code> property is
                           <code>"http://www.w3.org/2000/xmlns/"</code>, the attribute is included in
                           this sequence using the XDM mapping rules described in this section;</p>
                     </item>
                     <item>
                        <p>If the <code>Attr.localName</code> property is <code>"xmlns"</code>, the attribute
                           is included in this sequence using the XDM mapping rules described in this section;</p>
                     </item>
                     <item>
                        <p>If the <code>Attr.localName</code> property starts with <code>"xmlns:"</code>,
                           the attribute is included in this sequence using the XDM mapping rules
                           described in this section;</p>
                     </item>
                     <item>
                        <p>Otherwise, the attribute is not included in this sequence.</p>
                     </item>
                  </olist>

                  <note>
                     <p>The HTML DOM <code>Element.attributes</code> property includes namespace and non-namespace
                        attributes in the list when the HTML or XML parser is used. As such, the non-namespace
                        attributes have to be filtered from the resulting XDM attribute sequence.</p>
                  </note>

                  <note>
                     <p>When the resulting document is an HTML DOM <code>HTMLDocument</code>, the
                        <code>Attr.localName</code> and <code>Attr.name</code> properties of HTML DOM
                        <code>Attr</code> nodes are both set to the qualified name.</p>
                  </note>
               </div4>
            </div3>
            <div3 id="html-nilled-accessor">
               <head>nilled Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-nilled"/>
                  <code>dm:nilled($node)</code> for an HTML DOM <code>Node</code> is <code>false()</code>.</p>
            </div3>
            <div3 id="html-node-kind-accessor">
               <head>node-kind Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-node-kind"/>
                  <code>dm:node-kind($node)</code> for an HTML DOM <code>Node</code> is as follows:</p>
               <olist>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Document</code> then the result is
                        <code>"document"</code>.</p>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Element</code> then the result is
                        <code>"element"</code>.</p>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Attr</code> then the result is
                        determined as follows:</p>
                     <olist>
                        <item>
                           <p>If the <code>Attr.namespaceURI</code> property is
                              <code>"http://www.w3.org/2000/xmlns/"</code>, then the result is
                              <code>"namespace"</code>;</p>
                        </item>
                        <item>
                           <p>If the <code>Attr.localName</code> property is <code>"xmlns"</code>,
                              then the result is <code>"namespace"</code>;</p>
                        </item>
                        <item>
                           <p>If the <code>Attr.localName</code> property starts with <code>"xmlns:"</code>,
                              then the result is <code>"namespace"</code>;</p>
                        </item>
                        <item>
                           <p>Otherwise, the result is <code>"attribute"</code>.</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>ProcessingInstruction</code> then
                        the result is <code>"processing-instruction"</code>.</p>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Comment</code> then the result is
                        <code>"comment"</code>.</p>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Text</code> then the result is
                        <code>"text"</code>.</p>
                  </item>
               </olist>

               <note>
                  <p>When the resulting document is an HTML DOM <code>HTMLDocument</code>, the
                     <code>Attr.localName</code> and <code>Attr.name</code> properties of HTML DOM
                     <code>Attr</code> nodes are both set to the qualified name.</p>
               </note>
            </div3>
            <div3 id="html-node-name-accessor">
               <head>node-name Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-node-name"/>
                  <code>dm:node-name($node)</code> for an HTML DOM <code>Node</code> is as follows:</p>
               <olist>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Element</code> then the result is
                        determined as follows:</p>
                     <olist>
                        <item>
                           <p>If the <code>Element.localName</code> property contains a ":" then the
                              <code>xs:QName</code> properties are taken by parsing
                              <code>Element.localName</code> as an <code>xs:QName</code> in the current
                              element context;</p>
                        </item>
                        <item>
                           <p>Otherwise, the result is an <code>xs:QName</code> constructed as follows:</p>
                           <olist>
                              <item>
                                 <p>The <emph>local name</emph> is the value of the
                                    <code>Element.localName</code> property;</p>
                              </item>
                              <item>
                                 <p>The <emph>namespace prefix</emph> is the value of the
                                    <code>Element.prefix</code> property, or empty if the value is null;</p>
                              </item>
                              <item>
                                 <p>The <emph>namespace URI</emph> is the value of the
                                    <code>Element.namespaceURI</code> property, or empty if the value
                                    is null;</p>
                              </item>
                           </olist>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Attr</code> then the result is
                        determined as follows:</p>
                     <olist>
                        <item>
                           <p>If <code>Attr.localName</code> is <code>"xmlns"</code>, then the result is
                              an empty sequence.</p>
                        </item>
                        <item>
                           <p>If <code>Attr.localName</code> starts with <code>"xmlns:"</code>, then the
                              result is an <code>xs:QName</code> constructed as follows:</p>
                           <olist>
                              <item>
                                 <p>The <emph>local name</emph> is the value of the
                                    <code>Attr.localName</code> property after the <code>"xmlns:"</code> part;</p>
                              </item>
                              <item>
                                 <p>The <emph>namespace prefix</emph> is empty;</p>
                              </item>
                              <item>
                                 <p>The <emph>namespace URI</emph> is empty;</p>
                              </item>
                           </olist>
                        </item>
                        <item>
                           <p>If the <code>Attr.localName</code> property contains a ":" then the
                              <code>xs:QName</code> properties are taken by parsing
                              <code>Attr.localName</code> as an <code>xs:QName</code> in the current
                              element context;</p>
                        </item>
                        <item>
                           <p>Otherwise, the result is an <code>xs:QName</code> constructed as follows:</p>
                           <olist>
                              <item>
                                 <p>The <emph>local name</emph> is the value of the
                                    <code>Attr.localName</code> property;</p>
                              </item>
                              <item>
                                 <p>The <emph>namespace prefix</emph> is the value of the
                                    <code>Attr.prefix</code> property, or empty if the value is null;</p>
                              </item>
                              <item>
                                 <p>The <emph>namespace URI</emph> is the value of the
                                    <code>Attr.namespaceURI</code> property, or empty if the value is null;</p>
                              </item>
                           </olist>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>ProcessingInstruction</code> then
                        the result is an <code>xs:QName</code> constructed as follows:</p>
                     <olist>
                        <item>
                           <p>The <emph>local name</emph> is the value of the
                              <code>ProcessingInstruction.target</code> property;</p>
                        </item>
                        <item>
                           <p>The <emph>namespace prefix</emph> is empty;</p>
                        </item>
                        <item>
                           <p>The <emph>namespace URI</emph> is empty;</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>Otherwise, the result is an empty sequence.</p>
                  </item>
               </olist>

               <note>
                  <p>The HTML parser will set the <code>Element.namespaceURI</code> property
                     of an HTML DOM <code>Element</code> according to the element type.</p>
                  <olist>
                     <item>
                        <p>If the element is an HTML element, the namespace URI is
                           <code>"http://www.w3.org/1999/xhtml"</code>.</p>
                     </item>
                     <item>
                        <p>If the element is an SVG element, the namespace URI is
                           <code>"http://www.w3.org/2000/svg"</code>.</p>
                     </item>
                     <item>
                        <p>If the element is a MathML element, the namespace URI is
                           <code>"http://www.w3.org/1998/Math/MathML"</code>.</p>
                     </item>
                  </olist>
               </note>

               <note>
                  <p>When the resulting document is an HTML DOM <code>HTMLDocument</code>, the
                     <code>Element.localName</code> and <code>Element.name</code> properties of
                     HTML DOM <code>Element</code> nodes are both set to the qualified name.</p>
               </note>

               <note>
                  <p>When the resulting document is an HTML DOM <code>HTMLDocument</code>, the
                     <code>Attr.localName</code> and <code>Attr.name</code> properties of HTML DOM
                     <code>Attr</code> nodes are both set to the qualified name.</p>
               </note>
            </div3>
            <div3 id="html-parent-accessor">
               <head>parent Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-parent"/>
                  <code>dm:parent($node)</code> for an HTML DOM <code>Node</code> is as follows:</p>
               <olist>
                  <item>
                     <p>Let <code>$parent</code> be the <code>Node.parentNode</code> property of the
                        node;</p>
                  </item>
                  <item>
                     <p>If <code>$parent</code> is an instance of HTML DOM <code>DocumentFragment</code>,
                        then for each HTML DOM <code>HTMLTemplateElement</code> <code>$template</code> in
                        the parsed DOM tree:</p>
                     <olist>
                        <item>
                           <p>Let <code>$content</code> be the value of the
                              <code>HTMLTemplateElement.content</code> property of <code>$template</code>;</p>
                        </item>
                        <item>
                           <p>If <code>$content</code> is the same node as <code>$parent</code>, then the
                              result is <code>$template</code> using the XDM mapping rules described in
                              this section;</p>
                        </item>
                        <item>
                           <p>If there are no more <code>$template</code> nodes, then the result is an
                              empty sequence;</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>If <code>$parent</code> is null, then the result is an empty sequence;</p>
                  </item>
                  <item>
                     <p>Otherwise, the result is <code>$parent</code> using the XDM mapping rules
                        described in this section.</p>
                  </item>
               </olist>

               <note>
                  <p>The current node can only have a HTML DOM <code>DocumentFragment</code> parent node
                     if the <code>include-template-content</code> key of the <code>html-parser-options</code>
                     is <code>true()</code>.</p>
               </note>

               <note>
                  <p>The HTML DOM <code>DocumentFragment</code>'s <code>Node.parentNode</code> property
                     is null, and document fragment attached to <code>HTMLTemplateElement.content</code>
                     property do not have a <code>host</code> property connecting the fragment back to
                     the template element.</p>
               </note>
            </div3>
            <div3 id="html-string-value-accessor">
               <head>string-value Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-string-value"/>
                  <code>dm:string-value($node)</code> for an HTML DOM <code>Node</code> is as follows:</p>
               <olist>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Document</code> then the result
                        is the concatenation of the <code>string-value</code>s of all its HTML DOM
                        <code>Text</code> node descendants in document order or <code>""</code> if the
                        document has no such descendants;</p>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Element</code> then the result
                        is the concatenation of the <code>string-value</code>s of all its HTML DOM
                        <code>Text</code> node descendants in document order or <code>""</code> if the
                        document has no such descendants;</p>
                  </item>
                  <item>
                     <p>Otherwise, the result is the value of the <code>Node.nodeValue</code> property.</p>
                  </item>
               </olist>
            </div3>
            <div3 id="html-type-name-accessor">
               <head>type-name Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-type-name"/>
                  <code>dm:type-name($node)</code> for an HTML DOM <code>Node</code> is as follows:</p>
               <olist>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Element</code> then the result is
                        <code>xs:untyped</code>.</p>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Attr</code> then the result is
                        determined as follows:</p>
                     <olist>
                        <item>
                           <p>If the <code>Attr.namespaceURI</code> property is
                              <code>"http://www.w3.org/2000/xmlns/"</code>, then the result is
                              an empty sequence;</p>
                        </item>
                        <item>
                           <p>If the <code>Attr.localName</code> property is <code>"xmlns"</code>,
                              then the result is an empty sequence;</p>
                        </item>
                        <item>
                           <p>If the <code>Attr.localName</code> property starts with <code>"xmlns:"</code>,
                              then the result is am empty sequence;</p>
                        </item>
                        <item>
                           <p>Otherwise, the result is <code>xs:untypedAtomic</code>.</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Text</code> then the result is
                        <code>xs:untypedAtomic</code>.</p>
                  </item>
                  <item>
                     <p>Otherwise, the result is an empty sequence.</p>
                  </item>
               </olist>

               <note>
                  <p>When the resulting document is an HTML DOM <code>HTMLDocument</code>, the
                     <code>Attr.localName</code> and <code>Attr.name</code> properties of HTML DOM
                     <code>Attr</code> nodes are both set to the qualified name.</p>
               </note>
            </div3>
            <div3 id="html-typed-value-accessor">
               <head>typed-value Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-typed-value"/>
                  <code>dm:typed-value($node)</code> for an HTML DOM <code>Node</code> is as follows:</p>
               <olist>
                  <item>
                     <p>Let <code>$string-value</code> be the <specref ref="html-string-value-accessor"/>
                        for the node;</p>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Document</code> then the result is
                        <code>$string-value</code> as an <code>xs:untypedAtomic</code>;</p>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Element</code> then the result is
                        <code>$string-value</code> as an <code>xs:untypedAtomic</code>;</p>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Attr</code> then the result is
                        determined as follows:</p>
                     <olist>
                        <item>
                           <p>If the <code>Attr.namespaceURI</code> property is
                              <code>"http://www.w3.org/2000/xmlns/"</code>, then the result is
                              <code>$string-value</code>;</p>
                        </item>
                        <item>
                           <p>If the <code>Attr.localName</code> property is <code>"xmlns"</code>,
                              then the result is <code>$string-value</code>;</p>
                        </item>
                        <item>
                           <p>If the <code>Attr.localName</code> property starts with <code>"xmlns:"</code>,
                              then the result is <code>$string-value</code>;</p>
                        </item>
                        <item>
                           <p>Otherwise, the result is <code>$string-value</code> as an <code>xs:untypedAtomic</code>;</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>If the node is an instance of HTML DOM <code>Text</code> then the result is
                        <code>$string-value</code> as an <code>xs:untypedAtomic</code>;</p>
                  </item>
                  <item>
                     <p>Otherwise, the result is <code>$string-value</code>.</p>
                  </item>
               </olist>

               <note>
                  <p>When the resulting document is an HTML DOM <code>HTMLDocument</code>, the
                     <code>Attr.localName</code> and <code>Attr.name</code> properties of HTML DOM
                     <code>Attr</code> nodes are both set to the qualified name.</p>
               </note>
            </div3>
            <div3 id="html-unparsed-entity-public-id-accessor">
               <head>unparsed-entity-public-id Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-unparsed-entity-public-id"/>
                  <code>dm:unparsed-entity-public-id($node)</code> for an HTML DOM <code>Node</code>
                  is an empty sequence.</p>
            </div3>
            <div3 id="html-unparsed-entity-system-id-accessor">
               <head>unparsed-entity-system-id Accessor</head>


               <p>The result of the <xspecref spec="DM40" ref="dm-unparsed-entity-system-id"/>
                  <code>dm:unparsed-entity-system-id($node)</code> for an HTML DOM <code>Node</code>
                  is an empty sequence.</p>
            </div3>
         </div2>
      </div1>
      <div1 id="context">
         <head>Context functions</head>
         <p>The following functions are defined to obtain information from the 
            static or dynamic context.</p>
         <?local-function-index?>
         <div2 id="func-position">
            <head><?function fn:position?></head>
         </div2>
         <div2 id="func-last">
            <head><?function fn:last?></head>
         </div2>
         <div2 id="func-current-dateTime">
            <head><?function fn:current-dateTime?></head>
         </div2>
         <div2 id="func-current-date">
            <head><?function fn:current-date?></head>
         </div2>
         <div2 id="func-current-time">
            <head><?function fn:current-time?></head>
         </div2>
         <div2 id="func-implicit-timezone">
            <head><?function fn:implicit-timezone?></head>
         </div2>
         <div2 id="func-default-collation">
            <head><?function fn:default-collation?></head>
         </div2>
         <div2 id="func-default-language">
            <head><?function fn:default-language?></head>
         </div2>
         <div2 id="func-static-base-uri">
            <head><?function fn:static-base-uri?></head>
		 </div2>
      </div1>
      <div1 id="higher-order-functions">
         <head>Higher-order functions</head>
         <div2 id="functions-on-functions">
            <head>Functions on functions</head>
            <p>The functions included in this section operate on function items, that is, values referring to a function.</p>
            
            <p><termdef id="dt-higher-order" term="higher-order">Functions that accept functions among their arguments,
               or that return functions in their result, are described in this specification as <term>higher-order</term>
               functions.</termdef> Some host languages may exclude higher-order functions from the set of functions
            that they support, or may include such functions in an optional conformance feature.</p>
            
            <note><p>Some functions such as <code>fn:parse-json</code> allow the option of supplying a callback function
            for example to define exception behavior. Where this is not essential to the use of the function,
            the function has not been classified as higher-order for this purpose; in applications where function items
            cannot be created, these particular options will not be available.</p></note>
            
            <?local-function-index?>
            <div3 id="func-function-lookup">
               <head><?function fn:function-lookup?></head>
            </div3>
            <div3 id="func-function-name">
               <head><?function fn:function-name?></head>
            </div3>
            <div3 id="func-function-arity">
               <head><?function fn:function-arity?></head>
            </div3>
            
         </div2>
         <div2 id="basic-hofs">
            <head>Basic higher-order functions</head>
            <p>The following functions take function items as an argument.</p>
            <?local-function-index?>
            
            <p>With all these functions, if the caller-supplied function fails with a dynamic error,
            this error is propagated as an error from the higher-order function itself.</p>
            
            <div3 id="func-for-each">
               <head><?function fn:for-each?></head>
            </div3>
            <div3 id="func-filter">
               <head><?function fn:filter?></head>
            </div3>
            <div3 id="func-all" diff="add" at="A">
               <head><?function fn:all?></head>
            </div3>
            <div3 id="func-some" diff="add" at="A">
               <head><?function fn:some?></head>
            </div3>
            <div3 id="func-fold-left">
               <head><?function fn:fold-left?></head>
            </div3>
            <div3 id="func-fold-right">
               <head><?function fn:fold-right?></head>
            </div3>
            <div3 id="func-iterate-while">
               <head><?function fn:iterate-while?></head>
            </div3>
            <div3 id="func-for-each-pair">
               <head><?function fn:for-each-pair?></head>
            </div3>
            <div3 id="func-index-where" diff="add" at="A">
               <head><?function fn:index-where?></head>
            </div3>
            <!--<div3 id="func-range-from" diff="add" at="A">
               <head><?function fn:range-from?></head>
            </div3>
            <div3 id="func-range-to" diff="add" at="A">
               <head><?function fn:range-to?></head>
            </div3>-->
            <div3 id="func-items-after" diff="add" at="A">
               <head><?function fn:items-after?></head>
            </div3>
            <div3 id="func-items-before" diff="add" at="A">
               <head><?function fn:items-before?></head>
            </div3>
            <div3 id="func-items-starting-where" diff="add" at="A">
               <head><?function fn:items-starting-where?></head>
            </div3>
            <div3 id="func-items-ending-where" diff="add" at="A">
               <head><?function fn:items-ending-where?></head>
            </div3>
            <div3 id="func-sort">
               <head><?function fn:sort?></head>
            </div3>
            <div3 id="func-highest" diff="add" at="A">
               <head><?function fn:highest?></head>
            </div3>
            <div3 id="func-lowest" diff="add" at="A">
               <head><?function fn:lowest?></head>
            </div3>
            <div3 id="func-apply">
               <head><?function fn:apply?></head>
            </div3>
            
         </div2>
         <div2 id="dynamic-loading">
            <head>Dynamic Loading</head>
            <p>The following functions allow dynamic loading and execution of XQuery queries and XSLT stylesheets,
               or XPath operators.</p>
            <?local-function-index?>
            <div3 id="func-load-xquery-module">
               <head><?function fn:load-xquery-module?></head>
            </div3>
            <div3 id="func-transform">
               <head><?function fn:transform?></head>
            </div3>
            <div3 id="func-op">
               <head><?function fn:op?></head>
            </div3>
         </div2>
      </div1>

      <div1 id="maps-and-arrays">
         <head>Maps and Arrays</head>
         
         <p>Maps and arrays are introduced as new datatypes in XDM 3.1. This section describes functions that
         operate on maps and arrays. It also describes functions that operate on JSON data structures, which make
         extensive use of maps and arrays.</p>
         
         <div2 id="map-functions">
            <head>Functions that Operate on Maps</head>
            
            <p>The functions defined in this section use a conventional namespace prefix <code>map</code>, which
               is assumed to be bound to the namespace URI <code>http://www.w3.org/2005/xpath-functions/map</code>.</p>
            
            <p>A map is an additional kind of item.</p>
            
            <p><termdef id="dt-map" term="map">A map consists of a set of entries. Each entry comprises a key 
               which is an arbitrary atomic value, and an arbitrary sequence called the associated value.</termdef></p>
            
            <p><termdef id="dt-same-key" term="same key">Within a map, no two entries have the <term>same key</term>. 
               Two atomic values <code>K1</code> and <code>K2</code> are the <term>same key</term>
                  for this purpose if the (internal) function call <code>op:same-key($K1, $K2)</code>
               returns true.</termdef></p>
            
            <p>It is not necessary that all the keys in a map should be
               of the same type (for example, they can include a mixture of integers and strings).</p>
            
            
            
            <p>As with all other values, the functions in this specification treat maps as immutable. 
               For example, the <code>map:remove</code> function returns a map that differs
                  from the supplied map by the omission (typically) of one entry, but the supplied map is not changed by the operation.
               Two calls on <code>map:remove</code> with the same arguments return maps that are
               indistinguishable from each other; there is no way of asking whether these are "the same map".</p>
            
 
            <p>The function call <code>map:get($map, $key)</code> can be used to retrieve the value associated with a given key.</p>
            
            <p>A map can also be viewed as a function from keys to associated values. To achieve this, a map is also a 
               function item. The function corresponding to the map has the signature 
               <code>function($key as xs:anyAtomicValue) as item()*</code>. Calling the function has the same effect as calling
               the <code>get</code> function: the expression
               <code>$map($key)</code> returns the same result as <code>get($map, $key)</code>. For example, if <code>$books-by-isbn</code>
               is a map whose keys are ISBNs and whose assocated values are <code>book</code> elements, then the expression
               <code>$books-by-isbn("0470192747")</code> returns the <code>book</code> element with the given ISBN.
               The fact that a map is a function item allows it to be passed as an argument to higher-order functions 
               that expect a function item as one of their arguments.</p>
            
            <p>There is no operation to atomize a map or convert it to a string. The function <code>fn:serialize</code> can in some cases
            be used to produce a JSON representation of a map.</p>
            
            
            
            <?local-function-index?>
            
            <div3 id="func-same-key">
               <head><?function op:same-key?></head>
            </div3>
            <div3 id="func-map-merge">
               <head><?function map:merge?></head>
            </div3>
            <div3 id="func-map-size">
               <head><?function map:size?></head>
            </div3>
            <div3 id="func-map-keys">
               <head><?function map:keys?></head>
            </div3>
            <div3 id="func-map-contains">
               <head><?function map:contains?></head>
            </div3>
            <div3 id="func-map-get">
               <head><?function map:get?></head>
            </div3>
            <div3 id="func-map-find">
               <head><?function map:find?></head>
            </div3>
            <div3 id="func-map-put">
               <head><?function map:put?></head>
            </div3>
            
            <div3 id="func-map-entry">
               <head><?function map:entry?></head>
            </div3>
            <div3 id="func-map-remove">
               <head><?function map:remove?></head>
            </div3>
            <div3 id="func-map-filter" diff="add" at="A">
               <head><?function map:filter?></head>
            </div3>
            <div3 id="func-map-for-each">
               <head><?function map:for-each?></head>
            </div3>
            <div3 id="func-map-substitute" diff="add" at="A">
               <head><?function map:substitute?></head>
            </div3>
            <div3 id="func-map-replace" diff="add" at="A">
               <head><?function map:replace?></head>
            </div3>  
            <div3 id="func-map-build" diff="add" at="A">
               <head><?function map:build?></head>
            </div3>
            
 

            
         </div2>
         
         
 
 
         <div2 id="map-operations">
            <head>Other Operations on Maps </head>

            <p>Because a map is a function item, functions that apply to functions also apply
               to maps. A map is an anonymous function, so <code>fn:function-name</code> returns the empty
               sequence; <code>fn:function-arity</code> always returns <code>1</code>.</p>
            
            <p>Maps may be compared using the <code>fn:deep-equal</code> function.</p>
            
            <p>There is no function or operator to atomize a map or convert it to a string (other than <code>fn:serialize</code>,
               which can be used to serialize some maps as JSON texts).</p>
            
            
            
            
         </div2>
         <div2 id="array-functions">
            <head>Functions that Operate on Arrays</head>
            
            <p>An array is an additional kind of item. An array of size <var>N</var> is a mapping from the integers
            (1 to <var>N</var>) to a set of values, called the members of the array, each of which is an arbitrary
            sequence. Because an array is an item, and therefore a sequence, arrays can be nested.</p>
            
            <p>The functions defined in this section use a conventional namespace prefix <code>array</code>, which
               is assumed to be bound to the namespace URI <code>http://www.w3.org/2005/xpath-functions/array</code>.</p>   
            
            <p>As with all other values, arrays are treated as immutable. 
               For example, the <code>array:reverse</code> function returns an array that differs from the supplied
               array in the order of its members, but the supplied array is not changed by the operation. Two calls
               on <code>array:reverse</code> with the same argument will return arrays that are indistinguishable from
               each other; there is no way of asking whether these are "the same array". Like sequences, arrays have no identity. </p>
            
            <p>An array acts as a function from integer positions to associated values, so the
               function call <code>$array($index)</code> can be used to retrieve the array member at a given position.
               The function corresponding to the array has the signature 
               <code>function($index as xs:integer) as item()*</code>. 
               The fact that an array is a function item allows it to be passed as an argument to higher-order functions 
               that expect a function item as one of their arguments.</p>
            
            <p>In the function definitions that follow, all the array functions are defined in terms of five primitives:</p>
            
            <ulist>
               <item><p><code>[]</code> represents the zero-length array (an array with no members).</p></item>
               <item><p><code>$array($index)</code> returns the member at position <code>$index</code>.</p></item>
               <item><p><code>op:A2S($array)</code> converts the array to a sequence in which each member of the array
               is replaced by a zero-arity function that returns the corresponding value. For example,
               <code>[(1,2), (3,4)]</code> becomes <code>(function(){1,2}, function(){3,4})</code>.</p></item>
               <item><p><code role="example">op:S2A($seq)</code> is the inverse of <code role="example">op:A2S</code>: it takes as input a sequence
                  of zero-arity functions, and returns the array whose members are the results of evaluating
                  these functions. For example, <code>(function(){1,2}, function(){3,4})</code>
                  becomes <code>[(1,2), (3,4)]</code>.</p></item>
               <!--<item><p><code>array:size($array)</code> returns the number of members in the array.</p></item>
               <item><p><code>op:array-singleton($seq)</code> returns an array of size one whose single member
                  is the supplied sequence <code>$seq</code>. This operation is not directly available
                  as a user-visible function, because the effect can easily be achieved using the syntax <code>[ $seq ]</code>.</p></item>
               <item><p><code>op:array-concat($array1, $array2)</code> returns an array whose members are first the members of 
               <code>$array1</code> and then the members of <code>$array2</code>. This operation is not directly available
               as a user-visible function, because the effect can easily be achieved using <code>array:join</code>.</p></item>
            -->   </ulist>
            
            <p>There are two operations on arrays for which the XPath language provides custom syntax:</p>
            
            <ulist>
               <item><p><code>array { $sequence }</code> constructs an array whose members are the items in <code>$sequence</code>.
                  Every member of this array will be a singleton item.
               This can be defined as <code>fn:fold-left($sequence, [], function($x, $y){ op:array-concat($x, op:array-singleton($y))</code></p></item>
               <item><p><code>[ E1, E2, E3, ..., En]</code> constructs an array in which <code>E1</code> is the first member,
               <code>E2</code> is the second member, and so on. If <var>N=0</var>, the value is the empty array <code>[]</code>;
               if <var>N=1</var>, the value is <code>op:array-concat([], array { E1 })</code>, and if <var>N &gt; 1</var>,
               the value is <code>op:array-concat(op:array-singleton(E1), [ E2, ... En ])</code>.</p></item>
            </ulist>
 
            
            <?local-function-index?>
            
            <div3 id="func-array-size">
               <head><?function array:size?></head>
            </div3>
            <div3 id="func-array-empty" diff="add" at="2022-12-06">
               <head><?function array:empty?></head>
            </div3>
            <div3 id="func-array-exists" diff="add" at="2022-12-06">
               <head><?function array:exists?></head>
            </div3>
            <div3 id="func-array-get">
               <head><?function array:get?></head>
            </div3>
            <div3 id="func-array-put">
               <head><?function array:put?></head>
            </div3>
            <div3 id="func-array-replace" diff="add" at="A">
               <head><?function array:replace?></head>
            </div3>
            <div3 id="func-array-append">
               <head><?function array:append?></head>
            </div3>
            <div3 id="func-array-slice" diff="add" at="A">
               <head><?function array:slice?></head>
            </div3> 
            <div3 id="func-array-subarray">
               <head><?function array:subarray?></head>
            </div3> 
            <div3 id="func-array-remove">
               <head><?function array:remove?></head>
            </div3>
            <div3 id="func-array-insert-before">
               <head><?function array:insert-before?></head>
            </div3>
            <div3 id="func-array-head">
               <head><?function array:head?></head>
            </div3>
            <div3 id="func-array-foot" diff="add" at="2022-11-16">
               <head><?function array:foot?></head>
            </div3>
            <div3 id="func-array-tail">
               <head><?function array:tail?></head>
            </div3>
            <div3 id="func-array-trunk" diff="add" at="2022-11-16">
               <head><?function array:trunk?></head>
            </div3>
            <div3 id="func-array-reverse">
               <head><?function array:reverse?></head>
            </div3>
            <div3 id="func-array-join">
               <head><?function array:join?></head>
            </div3>
            <div3 id="func-array-for-each">
               <head><?function array:for-each?></head>
            </div3>
            <div3 id="func-array-filter">
               <head><?function array:filter?></head>
            </div3>
            <div3 id="func-array-fold-left">
               <head><?function array:fold-left?></head>
            </div3>
            <div3 id="func-array-fold-right">
               <head><?function array:fold-right?></head>
            </div3>
            <div3 id="func-array-for-each-pair">
               <head><?function array:for-each-pair?></head>
            </div3>
            <div3 id="func-array-sort">
               <head><?function array:sort?></head>
            </div3>
            <div3 id="func-array-flatten">
               <head><?function array:flatten?></head>
            </div3>
            <div3 id="func-array-from-sequence">
               <head><?function array:from-sequence?></head>
            </div3>
            <div3 id="func-array-partition" diff="add" at="A">
               <head><?function array:partition?></head>
            </div3>
            <div3 id="func-array-index-where" diff="add" at="2022-11-17">
               <head><?function array:index-where?></head>
            </div3>
            
            
         </div2>   

         
      </div1>

        <div1 id="constructor-functions">
            <head>Constructor functions</head>
           
           <p>
              This section describes constructor functions corresponding to simple types defined in <bibref ref="xmlschema-2"/>. 
              Constructor functions are used to convert a supplied value to a given type. They always take a single argument, 
              and the name of the function is the same as the name of the target type.
           </p>
            
           <p>
              Constructor functions are defined for all user-defined named simple types, and for most built-in atomic, list, 
              and union types. The only named simple types that have no constructor function are those that have no instances 
              other than instances of their derived types: specifically, <code>xs:anySimpleType</code>, <code>xs:anyAtomicType</code>, 
              and <code>xs:NOTATION</code>. 
           </p>
            <div2 id="constructor-functions-for-xsd-types">
                <head>Constructor functions for XML Schema built-in atomic types</head>
                
                <p>Every built-in atomic 
                   type that is defined in <bibref ref="xmlschema-2"/>,
                   except <code>xs:anyAtomicType</code> and <code>xs:NOTATION</code>, has an
                    associated constructor function. The type <code>xs:untypedAtomic</code>, defined
                    in <xspecref spec="DM31" ref="types"/> and the two derived types
                    <code>xs:yearMonthDuration</code> and <code>xs:dayTimeDuration</code> defined
                    in <xspecref spec="DM31" ref="types"/> also have associated constructor functions.
                Implementations <rfc2119>may</rfc2119> additionally provide
                a constructor functions for the new datatype <code>xs:dateTimeStamp</code> introduced in <bibref ref="xmlschema11-2"/>.</p>
<p>
A constructor function is not defined for <code>xs:anyAtomicType</code> as there are no atomic values with type annotation <code>xs:anyAtomicType</code> at runtime, although this can be a statically inferred type.
A constructor function is not defined for <code>xs:NOTATION</code> since it is defined as an abstract type in <bibref ref="xmlschema-2"/>.  If the static context (See <xspecref spec="XP31" ref="static_context"/>) contains a type derived from
<code>xs:NOTATION</code> then a constructor function is defined for it.
See <specref ref = 'constructor-functions-for-user-defined-types'/>.
</p>
<p> 
The form of the constructor function for an atomic type
                    <emph>eg:TYPE</emph> is:</p>
                <example role="signature">
                    <proto name="TYPE" prefix="eg" return-type="eg:TYPE" role="example"
                        returnEmptyOk="yes" isSpecial="yes">
                        <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                    </proto>
                </example>
                <p>If <code>$arg</code> is the empty sequence, the empty sequence is returned. For
                    example, the signature of the constructor function corresponding to the
                    <code>xs:unsignedInt</code> type defined in <bibref ref="xmlschema-2"/> is:</p>
                <example role="signature">
                    <proto name="unsignedInt" return-type="xs:unsignedInt" isSchema="yes" prefix="xs"
                        returnEmptyOk="yes" role="example">
                        <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                    </proto>
                </example>
                <p>Calling the constructor function <code>xs:unsignedInt(12)</code> returns
                    the <code> xs:unsignedInt</code> value 12. Another call of that constructor
                    function that returns the same <code>xs:unsignedInt</code> value is
                    <code>xs:unsignedInt("12")</code>. The same result would also be returned if the
                    constructor function were to be called with a node that had a typed value equal
                    to the <code>xs:unsignedInt</code> 12. The standard features described in
                        <xspecref spec="XP31" ref="id-atomization"/> would atomize the node to
                    extract its typed value and then call the constructor with that value. If the
                    value passed to a constructor is not in the lexical space of the datatype to be constructed, 
                    and cannot be converted to a value in the value space of the datatype under the rules in this
                    specification, then an
                   dynamic error is raised <errorref class="RG" code="0001"/>.</p>
                    <p>The semantics of the constructor function 
                        <code>xs:TYPE(arg)</code>
                     are identical to the semantics of 
                        <code>arg</code> cast as <code>xs:TYPE?</code>
                    . See <specref ref="casting"/>.</p>
  <p>If the argument to a constructor function is a literal, the result of the
                    function <rfc2119>may</rfc2119> be evaluated statically; if an error is found during such
                    evaluation, it may be reported as a static error. </p>
 <p>Special rules apply to constructor functions for <code>xs:QName</code> and types derived from <code>xs:QName</code> and <code>xs:NOTATION</code>. See 
<specref ref="constructor-qname-notation"/>.
</p>
               <p>The following constructor functions for the built-in atomic types are supported:</p>
                <ulist> 
                    <item>
                        <proto name="string" return-type="xs:string" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="boolean" return-type="xs:boolean" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="decimal" return-type="xs:decimal" returnEmptyOk="yes"
                           isSchema="yes" prefix="xs" role="example" >
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="float" return-type="xs:float" returnEmptyOk="yes"
                           isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                        <p>Implementations <rfc2119>should</rfc2119> return negative zero for <code>xs:float("-0.0E0")</code>.  
                           But because <bibref ref="xmlschema-2"/> does not distinguish between the values positive zero and negative zero,
                           implementations <rfc2119>may</rfc2119> return positive zero in this case.</p>
                       
                    </item>
                    <item>
                        <proto name="double" return-type="xs:double" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                       <p>Implementations <rfc2119>should</rfc2119> return negative zero for <code>xs:double("-0.0E0")</code>.  
                          But because <bibref ref="xmlschema-2"/> does not distinguish between the values positive zero and negative zero,
                          implementations <rfc2119>may</rfc2119> return positive zero in this case.</p> 
                    </item>
                    <item>
                        <proto name="duration" return-type="xs:duration" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="dateTime" return-type="xs:dateTime" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="time" return-type="xs:time" returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="date" return-type="xs:date" returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="gYearMonth" return-type="xs:gYearMonth" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="gYear" return-type="xs:gYear" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="gMonthDay" return-type="xs:gMonthDay" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="gDay" return-type="xs:gDay" returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="gMonth" return-type="xs:gMonth" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="hexBinary" return-type="xs:hexBinary" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="base64Binary" return-type="xs:base64Binary" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="anyURI" return-type="xs:anyURI" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="QName" return-type="xs:QName" returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                        <p>
                            See <specref ref='constructor-qname-notation'/> for special rules.</p>
                    </item>
                </ulist>
                <ulist>
                    <item>
                        <proto name="normalizedString" return-type="xs:normalizedString"
                            returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="token" return-type="xs:token" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="language" return-type="xs:language" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="NMTOKEN" return-type="xs:NMTOKEN" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
					<item>
                        <proto name="Name" return-type="xs:Name" returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="NCName" return-type="xs:NCName" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="ID" return-type="xs:ID" returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="IDREF" return-type="xs:IDREF" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="ENTITY" return-type="xs:ENTITY" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
 <p>See <specref ref='casting-to-ENTITY'/> for rules related to constructing values of type <code>xs:ENTITY</code> and types derived from it.</p>
                    </item>
					<item>
                        <proto name="integer" return-type="xs:integer" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="nonPositiveInteger" return-type="xs:nonPositiveInteger"
                            returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="negativeInteger" return-type="xs:negativeInteger"
                            returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="long" return-type="xs:long" returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="int" return-type="xs:int" returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="short" return-type="xs:short" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="byte" return-type="xs:byte" returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="nonNegativeInteger" return-type="xs:nonNegativeInteger"
                            returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="unsignedLong" return-type="xs:unsignedLong" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="unsignedInt" return-type="xs:unsignedInt" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="unsignedShort" return-type="xs:unsignedShort"
                            returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="unsignedByte" return-type="xs:unsignedByte" returnEmptyOk="yes"
                            isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="positiveInteger" return-type="xs:positiveInteger"
                            returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                </ulist>
                <ulist>
                    <item>
                        <proto name="yearMonthDuration" return-type="xs:yearMonthDuration"
                            returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="dayTimeDuration" return-type="xs:dayTimeDuration"
                            returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                    <item>
                        <proto name="untypedAtomic" return-type="xs:untypedAtomic"
                            returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                            <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                        </proto>
                    </item>
                </ulist>
               <ulist>
                  <item>
                     <proto name="dateTimeStamp" return-type="xs:dateTimeStamp"
                        returnEmptyOk="yes" isSchema="yes" prefix="xs" role="example">
                        <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                     </proto>
                     <p><emph>Available only if the implementation supports XSD 1.1.</emph></p>
                  </item>
               </ulist>
            </div2>
 
           <div2 id="constructor-qname-notation">
                <head>Constructor functions for xs:QName and xs:NOTATION</head>
<p>Special rules apply to constructor functions for the types <code>xs:QName</code> and <code>xs:NOTATION</code>, for two reasons:</p>
<ulist><item><p>
Values cannot belong directly to the type <code>xs:NOTATION</code>, only to its subtypes.
</p></item>
<item><p>
The lexical representation of these types uses namespace prefixes, whose
meaning is context-dependent.</p></item>
</ulist>
              
<p>
These constraints result in the following rules:</p>
<olist>
<item><p>
There is no constructor function for <code>xs:NOTATION</code>. Constructors are defined, however, for <code>xs:QName</code>, 
   for types derived or constructed from <code>xs:QName</code>, and for types 
   derived or constructed from <code>xs:NOTATION</code>.
</p></item>
   <item><p>When converting from an <code>xs:string</code>, the prefix within the lexical 
      <code>xs:QName</code> supplied
      as the argument is resolved to a namespace URI using the statically known
      namespaces from the static context. If the lexical <code>xs:QName</code>
      has no prefix, the
      namespace URI of the resulting expanded-QName is the default element/type
      namespace from the static context. Components of the static context are
      defined in <xspecref spec="XP31" ref="static_context"/>. A dynamic error is raised <errorref class="NS" code="0004"/>
      if the prefix is not bound in the static context. As described in
      <xspecref spec="DM31" ref="terminology"/>, the supplied prefix is retained as part of the
      expanded-QName value.</p></item>
   
</olist>
              
   <p>When a constructor function for a namespace-sensitive type is used as a literal function item
      or in a partial function application (for example, <code>xs:QName#1</code> or <code>xs:QName(?)</code>) the namespace
      bindings that are relevant are those from the static context of the literal function item or partial function application.
      When a constructor function for a namespace-sensitive type is obtained by means of the <code>fn:function-lookup</code>
      function, the relevant namespace bindings are those from the static context of the call on <code>fn:function-lookup</code>.</p>           
              
   <note><p>When the supplied argument to the <code>xs:QName</code> constructor
   function is a node, the node is atomized in the usual way, and if the result is <code>xs:untypedAtomic</code> it is then
   converted as if a string had been supplied. The effect might not be what is desired.
   For example, given the attribute <code>xsi:type="my:type"</code>, the expression 
   <code>xs:QName(@xsi:type)</code> might fail on the grounds that the prefix <code>my</code>
   is undeclared. This is because the namespace bindings are taken from the static context
   (that is, from the query or stylesheet), and not from the source document containing the
   <code>@xsi:type</code> attribute. The solution to this problem is to use the function call
   <code>resolve-QName(@xsi:type, .)</code> instead.</p></note>

           </div2>
           
           <div2 id="constructor-functions-for-xsd-list-types">
              <head>Constructor functions for XML Schema built-in list types</head>
              
              <p>Each of the three built-in list
                 types defined in <bibref ref="xmlschema-2"/>,
                 namely <code>xs:NMTOKENS</code>, <code>xs:ENTITIES</code>, and <code>xs:IDREFS</code>, has an
                 associated constructor function.</p>
              
              <p>The function signatures are as follows:</p>
              
              <ulist>
                 <item>
                    <proto name="NMTOKENS" return-type="xs:NMTOKEN*" 
                       isSchema="yes" prefix="xs" role="example">
                       <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                    </proto>
                 </item>
                 <item>
                    <proto name="ENTITIES" return-type="xs:ENTITY*" 
                       isSchema="yes" prefix="xs" role="example">
                       <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                    </proto>
                 </item>
                 <item>
                    <proto name="IDREFS" return-type="xs:IDREF*" 
                       isSchema="yes" prefix="xs" role="example">
                       <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                    </proto>
                 </item>
              </ulist>
              
              <p>The semantics are equivalent to casting to the corresponding types from <code>xs:string</code>.</p>
              
              <p>All three of these types have the facet <code>minLength = 1</code> meaning that there must
              always be at least one item in the list. The return type, however, allows for the fact that when the argument to
              the function is an empty sequence, the result is an empty sequence.</p>
              
              <note><p>In the case of atomic types, it is possible to use an expression such as 
                 <code>xs:date(@date-of-birth)</code> to convert an attribute value to an instance of <code>xs:date</code>,
                 knowing that this will work both in the case where the attribute is already annotated as <code>xs:date</code>,
                 and also in the case where it is <code>xs:untypedAtomic</code>. This approach does not work with list types,
                 because it is not permitted to use a value of type <code>xs:NMTOKEN*</code> as input to the constructor
                 function <code>xs:NMTOKENS</code>. Instead, it is necessary to use conditional logic that performs the conversion
                 only in the case where the input is untyped: 
                 <code>if (@x instance of attribute(*, xs:untypedAtomic)) then xs:NMTOKENS(@x) else data(@x)</code></p>
              </note>
           </div2>  
           
           <div2 id="constructor-functions-for-xsd-union-types">
              <head>Constructor functions for XML Schema built-in union types</head>
              
              <p>There is a constructor function for the union type <code>xs:numeric</code>
                 defined in <bibref ref="xpath-datamodel-31"/>. The function signature is:</p>
              
              <ulist>
                 <item>
                    <proto name="numeric" return-type="xs:numeric?" 
                       isSchema="yes" prefix="xs" role="example">
                       <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                    </proto>
                 </item>
              </ulist>
              
              <p>The semantics are determined by the rules in <specref ref="casting-to-union"/>. These rules have the effect that: </p>
              <olist>
                 <item><p>If the argument is an instance of <code>xs:double</code>, <code>xs:float</code>, or <code>xs:decimal</code>,
                 then the result is an instance of the same primitive type, with the same value;</p></item>
                 <item><p>If the argument is an instance of <code>xs:boolean</code>, the result is the <code>xs:double</code> value
                    <code>0.0e0</code> or <code>1.0e0</code>;</p></item>
                 <item><p>If the argument is an instance of <code>xs:string</code> or <code>xs:untypedAtomic</code>, then:</p>
                    <olist>
                       <item><p>If the value is in the lexical space of <code>xs:double</code>, the result will be the
                       corresponding <code>xs:double</code> value;</p></item>
                       <item><p>Otherwise, a dynamic error <errorref class="RG" code="0001"/> occurs;</p></item>
                    </olist>
                    <note><p>The result will never be an instance of <code>xs:float</code>, <code>xs:decimal</code>,
                    or <code>xs:integer</code>. This is because <code>xs:double</code> appears first in the list of member
                    types of <code>xs:numeric</code>, and its lexical space subsumes the lexical space of the other numeric
                    types. Thus, unlike XPath numeric literals, the result does not depend on the lexical form of the supplied
                    value. The reason for this design choice is to retain compatibility with the function conversion rules:
                    functions such as <code>fn:abs</code> and <code>fn:round</code> are declared to expect an instance
                    of <code>xs:numeric</code> as their first or only argument, and compatibility with the function conversion
                    rules defined in earlier versions of these specifications demands that when an untyped atomic value
                    (or untyped node) is supplied as the argument, it is converted to an <code>xs:double</code> value
                       even if its lexical form is that (say) of an integer.</p></note>
                 </item>
                 <item><p>In all other cases, a dynamic error <errorref class="RG" code="0001"/> occurs.</p></item>
              </olist>
              
              <p>In the case of an implementation that supports XSD 1.1, there is a constructor function
              associated with the built-in union type <code>xs:error</code>.</p>
              
              <p>The function signature is as follows:</p>
              
              <ulist>
                 <item>
                    <proto name="error" return-type="xs:error?" 
                       isSchema="yes" prefix="xs" role="example">
                       <arg name="arg" type="xs:anyAtomicType" emptyOk="yes"/>
                    </proto>
                 </item>
              </ulist>
              
              <p>The semantics are equivalent to casting to the corresponding union type (see <specref ref="casting-to-union"/>).</p>
              
              <note>
              <p>Because <code>xs:error</code> has no member types, and therefore has an empty value space, casting
              will always fail with a dynamic error except in the case where the supplied argument is an empty
              sequence, in which case the result is also an empty sequence.</p>
              </note>   
              
 
           </div2>  
              
            <div2 id="constructor-functions-for-user-defined-types">
                <head>Constructor functions for user-defined types</head>
                <p> For every user-defined simple type in the static context (See <xspecref spec="XP31"
                    ref="static_context"/>), there is a
                    constructor function whose name is the same as the name of the type and whose
                    effect is to create a value of that type from the supplied argument. The rules
                    for constructing user-defined types are defined in the same way as the rules for
                    constructing built-in derived types defined in <specref
                    ref="constructor-functions-for-xsd-types"/>. </p>
<p>
                            Special rules apply to constructor functions for namespace-sensitive types, that is,
                            atomic types derived from <code>xs:QName</code> and <code>xs:NOTATION</code>, list types that have
   a namespace-sensitive item type, and union types that have a namespace-sensitive member type. See <specref ref='constructor-qname-notation'/>.</p>
                <p>Consider a situation where the static context contains an atomic type
                    called <code>hatSize</code> defined in a schema whose target namespace is bound
                    to the prefix <code>eg</code>. In such a case the following constructor function is available to users:</p>
                <example role="signature">
                    <proto prefix="eg" name="hatSize" return-type="my:hatSize" isSpecial="yes" returnEmptyOk='yes' role="example">
                        <arg name="arg" type="xs:anyAtomicType" emptyOk='yes'/>
                    </proto>
                </example>
               
               <p>In the case of an atomic type <var>A</var>, the return type of the function is <code>A?</code>, reflecting
               the fact that the result will be an empty sequence if the input is an empty sequence. For a union or list type,
               the return type of the function is specified only as <code>xs:anyAtomicType*</code>. Implementations performing
               static type checking will often be able to compute a more specific result type. For example, if the target type
               is a list type whose item type is the atomic type <var>A</var>, the result will always be an instance of <var>A*</var>;
               if the target type is a pure union type <var>U</var> then the result will always be an instance of <var>U?</var>.
               In general, however, applications needing interoperable behavior on implementations that do strict static type
               checking will need to use a <code>treat as</code> expression to assert the specific type of the result.</p>
                
               <p> To construct an instance of a user-defined type 
                  that is not in a namespace, it is possible to use an
                  <code>EQName</code> (for example <code>Q{}hatsize(17)</code>). Alternatives are
                    to use a cast expression (<code>17 cast as hatsize</code>) or (if the host language allows it) 
                  to undeclare the default function namespace. </p>
            </div2>
        </div1>
      <div1 id="casting">
         <head>Casting</head>
         <p> Constructor functions and cast expressions accept an expression and return a value
                of a given type. They both convert a source value, <emph>SV</emph>, of a source type,
                <emph>ST</emph>, to a target value, <emph>TV</emph>, of the given target type,
                <emph>TT</emph>, with identical semantics and different syntax. The name of the
                constructor function is the same as the name of the built-in <bibref ref="xmlschema-2"/> 
                datatype or the datatype defined in <xspecref spec="DM31" ref="types"/>
                   of <bibref ref="xpath-datamodel-31"/> (see <specref ref="constructor-functions-for-xsd-types"/>) or the user-derived datatype
                (see <specref ref="constructor-functions-for-user-defined-types"/>) that is the
                target for the conversion, and the semantics are exactly the same as for a cast
                expression; for example,
                    <code>xs:date("2003-01-01")</code>
                 means exactly the same as 
                    <code>"2003-01-01"</code> cast as <code>xs:date?</code>.</p>
         <p>The cast expression takes a type name to indicate the target type of the conversion.
                See <xspecref spec="XP31" ref="id-cast"/>. If the type name allows the empty sequence
                and the expression to be cast is the empty sequence, the empty sequence is returned.
                If the type name does not allow the empty sequence and the expression to be cast is
                the empty sequence, a type error is raised <xerrorref spec="XP" class="TY" code="0004" type="type"/>.</p>
         <p>Where the argument to a cast is a literal, the result of the function <rfc2119>may</rfc2119> be
                evaluated statically; if an error is encountered during such evaluation, it <rfc2119>may</rfc2119> be
                reported as a static error. </p>
         <p>The general rules for casting from primitive types to primitive types are defined in
            <specref ref="casting-from-primitive-to-primitive"/>, and subsections describe the rules
            for specific target types.
            The general rules for casting from <code>xs:string</code> (and <code>xs:untypedAtomic</code>)
            follow in <specref ref="casting-from-strings"/>.
            Casting to non-primitive types, including atomic types derived by resctriction,
            union types, and list types, is described in <specref ref="casting-non-primitive-types"/>.  
            Casting from derived types is defined in <specref ref="casting-from-derived-to-parent"/>, 
            <specref ref="casting-within-branch"/> and <specref ref="casting-across-hierarchy"/>.</p>
         
         <p><termdef id="dt-cast-primitive-type" term="primitive type">Throughout 
            this section (<specref ref="casting"/>), the term <term>primitive type</term> means either one of
            the 19 primitive types defined in <bibref ref="xmlschema-2"/>, or one of the types
            <code>xs:untypedAtomic</code>, <code>xs:integer</code>, <code>xs:yearMonthDuration</code>
            and <code>xs:dayTimeDuration</code>; and where the text refers to types derived from a particular
            primitive type <var>T</var>, the reference is to types for which <var>T</var> is the nearest
            ancestor-or-self primitive type in the type hierarchy.
         </termdef></p>
         <p>When casting from <code>xs:string</code> or <code>xs:untypedAtomic</code>
            the semantics in <specref ref="casting-from-strings"/> apply, regardless of target type.</p>
         
         
         
         
         <div2 id="casting-from-primitive-to-primitive">
           
            <head>Casting from primitive types to primitive types</head>
            <p>This section defines casting between <termref def="dt-cast-primitive-type">primitive types</termref>
               (specifically, the 19 primitive types defined in <bibref ref="xmlschema-2"/> as well as <code>xs:untypedAtomic</code>,
                    <code>xs:integer</code> and the two derived types of
                    <code>xs:duration</code>: <code>xs:yearMonthDuration</code>
                    and <code>xs:dayTimeDuration</code> which are treated as primitive types in this section. The type conversions
                    that are supported between primitive atomic types are indicated in the table below;
                    casts between other (non-primitive) types are defined in terms of these primitives.</p> 
                    
            <p>In this table, there is a
               row for each <termref def="dt-cast-primitive-type">primitive type</termref> acting as the source of the conversion and
               there is a column for each <termref def="dt-cast-primitive-type">primitive type</termref> acting as the target of the conversion. The
                    intersections of rows and columns contain one of three characters:
                    <code>Y</code> indicates that a conversion from values of the type to which
                    the row applies to the type to which the column applies is supported;
                    <code>N</code> indicates that there are no supported conversions from values
                    of the type to which the row applies to the type to which the column applies;
                    and <code>M</code> indicates that a conversion from values of the type to
                    which the row applies to the type to which the column applies may succeed for
                    some values in the value space and fail for others.</p>
            <p>
               <bibref ref="xmlschema-2"/> defines <code>xs:NOTATION</code> as an abstract type. 
               Thus, casting to <code>xs:NOTATION</code> from any other type including <code>xs:NOTATION</code>
               is not permitted and raises a static error <xerrorref spec="XP" class="ST" code="0080"/>.  
               However, casting from one subtype of <code>xs:NOTATION</code> to another subtype of 
               <code>xs:NOTATION</code> is permitted.</p>
            <p>Casting is not supported to or from <code>xs:anySimpleType</code>. Thus, there is no row
               or column for this type in the table below. For any node that has not been validated or 
               has been validated as <code>xs:anySimpleType</code>, the typed value of the node is an 
               atomic value of type <code>xs:untypedAtomic</code>. There are no atomic values with the 
               type annotation <code>xs:anySimpleType</code> at runtime. 
                  Casting to
                     <code>xs:anySimpleType</code> is not permitted and raises a static error:
                     <xerrorref spec="XP" class="ST" code="0080"/>.</p>
            <p>Similarly, casting is not supported to or from <code>xs:anyAtomicType</code> and will raise 
               a static error: <xerrorref spec="XP" class="ST" code="0080"/>. There are no atomic values 
               with the type annotation <code>xs:anyAtomicType</code> at runtime, although this can be a 
               statically inferred type.</p>
            <p>If casting is attempted from an <emph>ST</emph> to a <emph>TT</emph> for which
                    casting is not supported, as defined in the table below, a type error is raised <xerrorref spec="XP" class="TY" code="0004" type="type"/>.</p>
            <p>In the following table, the columns and rows are identified by short codes that
                    identify simple types as follows:</p>
            <slist>
               <sitem>uA = xs:untypedAtomic</sitem>
               <sitem>aURI = xs:anyURI</sitem>
               <sitem>b64 = xs:base64Binary</sitem>
               <sitem>bool = xs:boolean</sitem>
               <sitem>dat = xs:date</sitem>
               <sitem>gDay = xs:gDay</sitem>
               <sitem>dbl = xs:double</sitem>
               <sitem>dec = xs:decimal</sitem>
               <sitem>dT = xs:dateTime</sitem>
               <sitem>dTD = xs:dayTimeDuration</sitem>
               <sitem>dur = xs:duration</sitem>
               <sitem>flt = xs:float</sitem>
               <sitem>hxB = xs:hexBinary</sitem>
               <sitem>gMD = xs:gMonthDay</sitem>
               <sitem>gMon = xs:gMonth</sitem>
               <sitem>int = xs:integer</sitem>
               <sitem>NOT = xs:NOTATION</sitem>
               <sitem>QN = xs:QName</sitem>
               <sitem>str = xs:string</sitem>
               <sitem>tim = xs:time</sitem>
               <sitem>gYM = xs:gYearMonth</sitem>
               <sitem>yMD = xs:yearMonthDuration</sitem>
               <sitem>gYr = xs:gYear</sitem>
            </slist>
            <p>In the following table, the notation <quote>S\T</quote> indicates that the source
                    (<quote>S</quote>) of the conversion is indicated in the column below the
                    notation and that the target (<quote>T</quote>) is indicated in the row to the
                    right of the notation.</p>
            <!-- The markup in the following table is perhaps a bit surprising, but it serves an important purpose: 
               to allow the resulting HTML to display "tool tips" and cell colors that make it much easier to 
               interpret the contents of the table.  The "special" aspects of the markup include: setting the 
               column widths so that all columns are the same width and marking up the first column in each 
               row as "th" instead of "td".  Editors should be careful not to change these conventions without 
               changing the associated stylesheets. --><table border="1" cellpadding="1" role="casting" summary="Casting table"
                   id="casting-to-primitives-table">
               <col width="5%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <col width="3%" span="1"/>
               <thead>
                  <tr>
                     <th>S\T</th>
                     <th>uA</th>
                     <th>str</th>
                     <th>flt</th>
                     <th>dbl</th>
                     <th>dec</th>
                     <th>int</th>
                     <th>dur</th>
                     <th>yMD</th>
                     <th>dTD</th>
                     <th>dT</th>
                     <th>tim</th>
                     <th>dat</th>
                     <th>gYM</th>
                     <th>gYr</th>
                     <th>gMD</th>
                     <th>gDay</th>
                     <th>gMon</th>
                     <th>bool</th>
                     <th>b64</th>
                     <th>hxB</th>
                     <th>aURI</th>
                     <th>QN</th>
                     <th>NOT</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <th>uA</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                  </tr>
                  <tr>
                     <th>str</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                     <td>M</td>
                  </tr>
                  <tr>
                     <th>flt</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>M</td>
                     <td>M</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>dbl</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>M</td>
                     <td>M</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>dec</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>int</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>dur</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>yMD</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>dTD</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>dT</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>tim</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>dat</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>gYM</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>gYr</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>gMD</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>gDay</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>gMon</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>bool</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>b64</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>hxB</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>aURI</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                  </tr>
                  <tr>
                     <th>QN</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>M</td>
                  </tr>
                  <tr>
                     <th>NOT</th>
                     <td>Y</td>
                     <td>Y</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>N</td>
                     <td>Y</td>
                     <td>M</td>
                  </tr>
               </tbody>
            </table>
            
            
            <div3 id="casting-to-string">
               <head>Casting to xs:string and xs:untypedAtomic</head>
               <p>Casting is permitted from any <termref def="dt-cast-primitive-type">primitive type</termref> to the 
                  <termref def="dt-cast-primitive-type">primitive types</termref>
                        <code>xs:string</code> and <code>xs:untypedAtomic</code>.</p>
               <p>When a value of any simple type is cast as <code>xs:string</code>, the
                        derivation of the <code>xs:string</code> value <emph>TV</emph> depends on
                        the <emph>ST</emph> and on the <emph>SV</emph>, as follows.</p>
               <ulist>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:string</code> or a type derived from
                                <code>xs:string</code>, <emph>TV</emph> is <emph>SV</emph>.</p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:anyURI</code>, the type conversion is
                                performed without escaping any characters.</p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:QName</code> or <code>xs:NOTATION</code>:</p>
                     <ulist>
                        <item><p>if the qualified name
          has a prefix, then <emph>TV</emph> is the concatenation of the prefix of <emph>SV</emph>, 
		  a single colon (:), and the local name of <emph>SV</emph>.</p>
                           </item>
                        <item>
                           <p>otherwise <emph>TV</emph> is the local-name.</p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is a numeric type, the following rules apply:</p>
                     <ulist>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:integer</code>,
                                        <emph>TV</emph> is the canonical lexical representation of
                                        <emph>SV</emph> as defined in <bibref ref="xmlschema-2"/>. There
                                        is no decimal point.</p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:decimal</code>, then:</p>
                           <ulist>
                              <item>
                                 <p>If <emph>SV</emph> is in the value space of
                                                <code>xs:integer</code>, that is, if there are no
                                                significant digits after the decimal point, then the
                                                value is converted from an <code>xs:decimal</code>
                                                to an <code>xs:integer</code> and the resulting
                                                <code>xs:integer</code> is converted to an
                                                <code>xs:string</code> using the rule above.</p>
                              </item>
                              <item>
                                 <p> Otherwise, the canonical lexical representation of
                                                <emph>SV</emph> is returned, as defined in <bibref ref="xmlschema-2"/>.</p>
                              </item>
                           </ulist>
                        </item>
                        <item>
                           <p> If <emph>ST</emph> is <code>xs:float</code> or
                                        <code>xs:double</code>, then:</p>
                           <ulist>
                              <item>
                                 <p>
                                    <emph>TV</emph> will be an <code>xs:string</code> in the lexical space of <code>xs:double</code> or <code>xs:float</code> that when
converted to an <code>xs:double</code> or <code>xs:float</code> under the rules of <specref ref="casting-from-strings"/> produces
a value that is equal to <emph>SV</emph>, or is <code>NaN</code> if <emph>SV</emph> is <code>NaN</code>.
In addition, <emph>TV</emph> must satisfy the constraints in the
following sub-bullets.
											</p>
                                 <ulist>
                                    <item>
                                       <p>If <emph>SV</emph> has an absolute value that is
                                                greater than or equal to 0.000001 (one millionth)
                                                and less than 1000000 (one million), then the value
                                                is converted to an <code>xs:decimal</code> and the
                                                resulting <code>xs:decimal</code> is converted to an
                                                <code>xs:string</code> according to the rules above, as though using an 
implementation of <code>xs:decimal</code> that imposes no limits on the
<code>totalDigits</code> or
<code>fractionDigits</code> facets.</p>
                                    </item>
                                    <item>
                                       <p>If <emph>SV</emph> has the value positive or negative zero, <emph>TV</emph> is "0" or "-0"
respectively.
</p>
                                    </item>
                                    <item>
                                       <p>If <emph>SV</emph> is positive or negative infinity, <emph>TV</emph> is the string "<code>INF</code>" or "<code>-INF</code>" respectively.
</p>
                                    </item>
                                    <item>
                                       <p>In other cases, the result consists of a mantissa, which has the lexical form
of an <code>xs:decimal</code>, followed by the letter "E", followed by an exponent which has
the lexical form of an <code>xs:integer</code>. Leading zeroes and "+" signs are prohibited
in the exponent. For the mantissa, there must be a decimal point, and there must
be exactly one digit before the decimal point, which must be non-zero. The  "+"
sign is prohibited. There must be at least one digit after the decimal point.
Apart from this mandatory digit, trailing zero digits are prohibited. 
</p>
                                    </item>
                                 </ulist>
                              </item>
                           </ulist>
                           <note>
                              <p>The above rules allow more than one representation of the same value. 
                                 For example, the <code>xs:float</code> value whose exact decimal representation is 1.26743223E15
might be represented by any of the strings "1.26743223E15", "1.26743222E15" or
"1.26743224E15" (inter alia). It is implementation-dependent which of these
representations is chosen.
</p>
                           </note>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:dateTime</code>, <code>xs:date</code>
                                or <code>xs:time</code>, <emph>TV</emph> is the local value. 
The components of <emph>TV</emph> are individually cast to <code>xs:string</code> using the functions 
                        described in <bibref ref="casting-to-datetimes"/> 
                        and the results are concatenated together.  The <code>year</code> component is 
                        cast to <code>xs:string</code> using <code>eg:convertYearToString</code>.  
                        The <code>month</code>, <code>day</code>, <code>hour</code> and <code>minute</code> 
                        components are cast to <code>xs:string</code> using <code>eg:convertTo2CharString</code>.  
                        The <code>second</code> component is cast to <code>xs:string</code> using 
                        <code>eg:convertSecondsToString</code>. The timezone component, if present, is 
                        cast to <code>xs:string</code> using <code>eg:convertTZtoString</code>.  
</p>
                     <p> 
Note that the hours component of the resulting string
will never be <code>"24"</code>. Midnight is always represented as <code>"00:00:00"</code>.
</p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:yearMonthDuration</code> or <code>xs:dayTimeDuration</code>, <emph>TV</emph> is the 
                                canonical representation of <emph>SV</emph> as defined in <bibref ref="xmlschema11-2"/>.</p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:duration</code>
 then let <emph>SYM</emph> be <emph>
                           <code>SV</code>
                        </emph> 
                        <code>cast as xs:yearMonthDuration</code>, and let <emph>SDT</emph> be <emph>
                           <code>SV</code>
                        </emph> 
                        <code>cast as xs:dayTimeDuration</code>;  Now, let the next intermediate value, <emph>TYM</emph>, 
be <emph>
                           <code>SYM</code>
                        </emph> 
                        <code>cast as</code> 
                        <emph>
                           <code>TT</code>
                        </emph>, and let <emph>TDT</emph> be <emph>
                           <code>SDT</code>
                        </emph> 
                        <code>cast as</code> 
                        <emph>
                           <code>TT</code>
                        </emph>.  If <emph>TYM</emph> is "P0M", then <emph>TV</emph> is 
<emph>TDT</emph>.  Otherwise, <emph>TYM</emph> and <emph>TDT</emph> are merged according to the following rules:</p>
                     <olist>
                        <item>
                           <p>If <emph>TDT</emph> is "PT0S", then <emph>TV</emph> is <emph>TYM</emph>.</p>
                        </item>
                        <item>
                           <p>Otherwise, <emph>TV</emph> is the concatenation of all the characters in <emph>TYM</emph> and all the
characters except the first "P" and the optional negative sign in <emph>TDT</emph>.</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>In all other cases, <emph>TV</emph> is the <bibref ref="xmlschema-2"/>
                                canonical representation of <emph>SV</emph>. For datatypes that do
                                not have a canonical lexical representation defined an <termref def="implementation-dependent"/> canonical representation may be used.</p>
                  </item>
                  <!--							<item>
								<p>If <emph>ST</emph> is <code>string</code>, </<emph>TV</emph> is <emph>SV</emph>.</p>
							</item>
							<item>
								<p>If <emph>ST</emph> is <code>float</code>, <code>double</code>, or <code>decimal</code> then <emph>TV</emph> is the canonical representation of <emph>SV</emph>, as defined by <bibref ref="xmlschema-2"/>.</p>
							</item>
							<item>
								<p>If <emph>ST</emph> is <code>duration</code> then <emph>TV</emph> is the lexical representation of <emph>SV</emph>, as defined in <bibref ref="xmlschema-2"/> in which each integer and decimal component is expressed in its canonical representation.</p>
							</item>
<item>
								<p>If <emph>ST</emph> is <code>yearMonthDuration</code> or <code>dayTimeDuration</code> then <emph>TV</emph> is the canonical representation of <emph>SV</emph>, in which each integer and decimal component is expressed in its canonical representation.</p>
							</item>
							<item>
								<p>If <emph>ST</emph> is <code>dateTime</code> or <code>time</code>, then <emph>TV</emph> is the canonical representation of <emph>SV</emph>, as defined by <bibref ref="xmlschema-2"/>.</p>
							</item>
							<item>
								<p>If <emph>ST</emph> is <code>date</code>, <code>gYearMonth</code>, <code>gYear</code>, <code>gMonthDay</code>, <code>gDay</code>, or <code>gMonth</code>, then <emph>TV</emph> is the lexical representation of <emph>SV</emph>, as defined by <bibref ref="xmlschema-2"/>.</p>
							</item>
							<item>
								<p>If <emph>ST</emph> is <code>boolean</code>, then <emph>TV</emph> is <quote>true</quote> if <emph>SV</emph> is true and <quote>false</quote> if <emph>SV</emph> is false.</p>
							</item>
							<item>
								<p>If <emph>ST</emph> is <code>hexBinary</code>, then <emph>TV</emph> is the canonical representation of <emph>SV</emph>, as defined by <bibref ref="xmlschema-2"/>.</p>
							</item>
							<item>
								<p>If <emph>ST</emph> is <code>anyURI</code>, then <emph>TV</emph> is the lexical representation of <emph>SV</emph>, as defined in <bibref ref="xmlschema-2"/>, with each space replaced by the sequence <quote>%20</quote>.</p>
							</item>
							<item>
								<p>If <emph>ST</emph> is <code>NOTATION</code>, then <emph>TV</emph> is <emph>SV</emph>.</p>
							</item>  --></ulist>
               <p>To cast as <code>xs:untypedAtomic</code> the value is cast as
                        <code>xs:string</code>, as described above, and the type annotation changed
                        to <code>xs:untypedAtomic</code>.</p>
               <note>
                  <p>The string representations of numeric values are backwards compatible
                            with XPath 1.0 except for the special values positive and negative
                            infinity, negative zero and values outside the range <code>1.0e-6</code> to <code>1.0e+6</code>.</p>
               </note>
            </div3>
            <div3 id="casting-to-numerics">
               <head>Casting to numeric types</head>
               <div4 id="casting-to-float">
                  <head>Casting to xs:float</head>
                  <p>When a value of any simple type is cast as <code>xs:float</code>, the <code>xs:float</code>
                            <emph>TV</emph> is derived from the <emph>ST</emph> and the
                            <emph>SV</emph> as follows:</p>
                  <ulist>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:float</code>, then <emph>TV</emph>
                                    is <emph>SV</emph> and the conversion is complete.</p>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:double</code>, then
                                    <emph>TV</emph> is obtained as follows: </p>
                        <ulist>
                           <item>
                              <p>if <emph>SV</emph> is the <code>xs:double</code> value
                                            <code>INF</code>, <code>-INF</code>, <code>NaN</code>,
                                            positive zero, or negative zero, then <emph>TV</emph> is
                                            the <code>xs:float</code> value <code>INF</code>,
                                            <code>-INF</code>, <code>NaN</code>, positive zero, or
                                            negative zero respectively.</p>
                           </item>
                           <item>
                              <p>otherwise, <emph>SV</emph> can be expressed in the form
                                                <code>m &times; 2^e</code> where the mantissa
                                            <code>m</code> and exponent <code>e</code> are signed
                                            <code>xs:integer</code>s whose value range is defined in
                                                <bibref ref="xmlschema-2"/>, and the following rules apply:</p>
                              <ulist>
                                 <item>
                                    <p>if <code>m</code> (the mantissa of
                                                  <emph>SV</emph>) is outside the permitted range
                                                  for the mantissa of an <code>xs:float</code>
                                                  value <code>(-2^24-1 to +2^24-1)</code>, then it
                                                  is divided by <code>2^N</code> where
                                                  <code>N</code> is the lowest positive
                                                  <code>xs:integer</code> that brings the result
                                                  of the division within the permitted range, and
                                                  the exponent <code>e</code> is increased by
                                                  <code>N</code>. This is integer division (in
                                                  effect, the binary value of the mantissa is
                                                  truncated on the right). Let <code>M</code> be
                                                  the mantissa and <code>E</code> the exponent
                                                  after this adjustment.</p>
                                 </item>
                                 <item>
                                    <p>if <code>E</code> exceeds <code>104</code> (the
                                                  maximum exponent value in the value space of
                                                  <code>xs:float</code>) then <emph>TV</emph> is
                                                  the <code>xs:float</code> value <code>INF</code>
                                                  or <code>-INF</code> depending on the sign of <code>M</code>.</p>
                                 </item>
                                 <item>
                                    <p>if <code>E</code> is less than <code>-149</code>
                                                  (the minimum exponent value in the value space
                                                  of <code>xs:float</code>) then <emph>TV</emph> is
                                                  the <code>xs:float</code> value positive or
                                                  negative zero depending on the sign of <code>M</code>
                                                </p>
                                 </item>
                                 <item>
                                    <p>otherwise, <emph>TV</emph> is the
                                                  <code>xs:float</code> value <code>M &times; 2^E</code>.</p>
                                 </item>
                              </ulist>
                           </item>
                        </ulist>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:decimal</code>, or
                                    <code>xs:integer</code>, then <emph>TV</emph> is <code>xs:float(</code>
                                    <emph>SV</emph>
                                    <code> cast as xs:string)</code> and the conversion is complete.</p>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:boolean</code>, <emph>SV</emph> is
                                    converted to <code>1.0E0</code> if <emph>SV</emph> is
                                    <code>true</code> and to <code>0.0E0</code> if <emph>SV</emph>
                                    is <code>false</code> and the conversion is complete.</p>
                     </item>
                     <item>
                        <p> If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                    or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>. 
                        </p>
                        <note><p>XSD 1.1 adds the value <code>+INF</code> to the lexical space,
                           as an alternative to <code>INF</code>. XSD 1.1 also adds negative zero
                           to the value space.</p></note>
                     </item>
                  </ulist>
                  <note>
                     <p>Implementations <rfc2119>should</rfc2119> return negative zero for <code>xs:float("-0.0E0")</code>.  
                        But because <bibref ref="xmlschema-2"/> does not distinguish between the values positive zero and negative zero.
                        Implementations <rfc2119>may</rfc2119> return positive zero in this case.</p>
                  </note>
               </div4>
               <div4 id="casting-to-double">
                  <head>Casting to xs:double</head>
                  <p>When a value of any simple type is cast as <code>xs:double</code>, the
                            <code>xs:double</code> value <emph>TV</emph> is derived from the
                            <emph>ST</emph> and the <emph>SV</emph> as follows:</p>
                  <ulist>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:double</code>, then
                                    <emph>TV</emph> is <emph>SV</emph> and the conversion is complete.</p>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:float</code> or a type derived
                                    from <code>xs:float</code>, then <emph>TV</emph> is obtained as follows:</p>
                        <ulist>
                           <item>
                              <p>if <emph>SV</emph> is the <code>xs:float</code> value
                                            <code>INF</code>, <code>-INF</code>, <code>NaN</code>,
                                            positive zero, or negative zero, then <emph>TV</emph> is
                                            the <code>xs:double</code> value <code>INF</code>,
                                            <code>-INF</code>, <code>NaN</code>, positive zero, or
                                            negative zero respectively. </p>
                           </item>
                           <item>
                              <p>otherwise, <emph>SV</emph> can be expressed in the form
                                                <code>m &times; 2^e</code> where the
                                            mantissa <code>m</code> and exponent <code>e</code> are
                                            signed <code>xs:integer</code> values whose value range
                                            is defined in <bibref ref="xmlschema-2"/>, and
                                            <emph>TV</emph> is the <code>xs:double</code> value
                                                <code>m &times; 2^e</code>. </p>
                           </item>
                        </ulist>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:decimal</code> or
                                    <code>xs:integer</code>, then <emph>TV</emph> is <code>xs:double(</code>
                                    <emph>SV</emph>
                                    <code> cast as xs:string)</code> and the conversion is complete.</p>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:boolean</code>, <emph>SV</emph> is
                                    converted to <code>1.0E0</code> if <emph>SV</emph> is
                                    <code>true</code> and to <code>0.0E0</code> if <emph>SV</emph>
                                    is <code>false</code> and the conversion is complete.</p>
                     </item>
                     <item>
                        <p> If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                    or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>.</p>
                        <note><p>XSD 1.1 adds the value <code>+INF</code> to the lexical space,
                        as an alternative to <code>INF</code>. XSD 1.1 also adds negative zero
                        to the value space.</p></note>
                     </item>
                  </ulist>
                  <note>
                     <p>Implementations <rfc2119>should</rfc2119> return negative zero for <code>xs:double("-0.0E0")</code>.  
                        But because <bibref ref="xmlschema-2"/> does not distinguish between the values positive zero and negative zero.
                        Implementations <rfc2119>may</rfc2119> return positive zero in this case.</p>  </note>
               </div4>
               <div4 id="casting-to-decimal">
                  <head>Casting to xs:decimal</head>
                  <p>When a value of any simple type is cast as <code>xs:decimal</code>, the
                            <code>xs:decimal</code> value <emph>TV</emph> is derived from
                            <emph>ST</emph> and <emph>SV</emph> as follows: </p>
                  <ulist>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:decimal</code>,
                                    <code>xs:integer</code> or a type derived from them, then
                                    <emph>TV</emph> is <emph>SV</emph>, converted to an
                                    <code>xs:decimal</code> value if need be, and the conversion is complete.</p>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:float</code> or
                                    <code>xs:double</code>, then <emph>TV</emph> is the
                                    <code>xs:decimal</code> value, within the set of
                                    <code>xs:decimal</code> values that the implementation is
                                    capable of representing, that is numerically closest to
                                    <emph>SV</emph>. If two values are equally close, then the one
                                    that is closest to zero is chosen. If <emph>SV</emph> is too
                                    large to be accommodated as an <code>xs:decimal</code>, (see
                                        <bibref ref="xmlschema-2"/> for <termref def="implementation-defined"/> limits on
                           numeric values) a dynamic error is raised <errorref class="CA" code="0001"/>. If <emph>SV</emph> is one of the special
                                    <code>xs:float</code> or <code>xs:double</code> values
                           <code>NaN</code>, <code>INF</code>, or <code>-INF</code>, a dynamic
                                    error is raised <errorref class="CA" code="0002"/>.</p>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:boolean</code>, <emph>SV</emph> is
                                    converted to <code>1.0</code> if <emph>SV</emph> is
                                    <code>1</code> or <code>true</code> and to <code>0.0</code> if
                                    <emph>SV</emph> is <code>0</code> or <code>false</code> and the
                                    conversion is complete.</p>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                    or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>.</p>
                     </item>
                  </ulist>
               </div4>
               <div4 id="casting-to-integer">
                  <head>Casting to xs:integer</head>
                  <p>When a value of any simple type is cast as <code>xs:integer</code>, the
                            <code>xs:integer</code> value <emph>TV</emph> is derived from
                            <emph>ST</emph> and <emph>SV</emph> as follows:</p>
                  <ulist>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:integer</code>, or a type derived
                                    from <code>xs:integer</code>, then <emph>TV</emph> is
                                    <emph>SV</emph>, converted to an <code>xs:integer</code> value
                                    if need be, and the conversion is complete.</p>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is
                                    <code>xs:decimal</code>, <code>xs:float</code> or
                                    <code>xs:double</code>, then <emph>TV</emph> is <emph>SV</emph>
                                    with the fractional part discarded and the value converted to
                                    <code>xs:integer</code>. Thus, casting <code>3.1456</code>
                                    returns <code>3</code> and <code>-17.89</code> returns
                                    <code>-17</code>. Casting <code>3.124E1</code>
                                    returns <code>31</code>. If <emph>SV</emph> is too large to be
                                    accommodated as an integer, (see <bibref ref="xmlschema-2"/> for
                           <termref def="implementation-defined"/> limits on numeric values) a 
                           dynamic error is
                                    raised <errorref class="CA" code="0003"/>. If <emph>SV</emph> is
                                    one of the special <code>xs:float</code> or
                                    <code>xs:double</code> values <code>NaN</code>,
                           <code>INF</code>, or <code>-INF</code>, a dynamic error is raised
                                        <errorref class="CA" code="0002"/>.</p>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:boolean</code>, <emph>SV</emph> is
                                    converted to <code>1</code> if <emph>SV</emph> is <code>1</code>
                                    or <code>true</code> and to <code>0</code> if <emph>SV</emph> is
                                    <code>0</code> or <code>false</code> and the conversion is complete.</p>
                     </item>
                     <item>
                        <p>If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                    or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>.</p>
                     </item>
                     <!--    <item>
                                <p>If <emph>TT</emph> is a subtype of <code>xs:integer</code>, then
                                    <emph>TV</emph> is calculated as described above, and is then
                                    cast to <emph>TT</emph> as described in <specref
                                    ref="casting-within-branch"/>. This involves checking the value
                                    against the facets of <emph>TT</emph>.</p>
                            </item>  --></ulist>
               </div4>
            </div3>
            <div3 id="casting-to-durations">
               <head>Casting to duration types</head>
               <p>When a value of type <code>xs:untypedAtomic</code>, <code>xs:string</code>,
                        a type derived from <code>xs:string</code>,
                        <code>xs:yearMonthDuration</code> or <code>xs:dayTimeDuration</code> is
                        cast as <code>xs:duration</code>, <code>xs:yearMonthDuration</code> or
                        <code>xs:dayTimeDuration</code>, <emph>TV</emph> is derived from
                        <emph>ST</emph> and <emph>SV</emph> as follows:</p>
               <ulist>
                  <item>
                     <p>If <emph>ST</emph> is the same as <emph>TT</emph>, then
                                <emph>TV</emph> is <emph>SV</emph>. </p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:duration</code>, or a type derived
                                from <code>xs:duration</code>, but not
                                <code>xs:dayTimeDuration</code> or a type derived from
                                <code>xs:dayTimeDuration</code>, and <emph>TT</emph> is
                                <code>xs:yearMonthDuration</code>, then <emph>TV</emph> is derived
                                from <emph>SV</emph> by removing the day, hour, minute and second
                                components from <emph>SV</emph>.</p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:duration</code>, or a type derived
                                from <code>duration</code>, but not
                                <code>xs:yearMonthDuration</code> or a type derived from
                                <code>xs:yearMonthDuration</code>, and <emph>TT</emph> is
                                <code>xs:dayTimeDuration</code>, then <emph>TV</emph> is derived
                                from <emph>SV</emph> by removing the year and month components from <emph>SV</emph>.</p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:yearMonthDuration</code>
                                or <code>xs:dayTimeDuration</code>, and <emph>TT</emph> is
                                <code>xs:duration</code>, then <emph>TV</emph> is derived from
                                <emph>SV</emph> as defined in <specref ref="casting-from-derived-to-parent"/>.</p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:yearMonthDuration</code>
                                and <emph>TT</emph> is
                                <code>xs:dayTimeDuration</code>, the cast is permitted and returns a <code>xs:dayTimeDuration</code> with value 0.0 seconds.</p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:dayTimeDuration</code>
                                and <emph>TT</emph> is
                                <code>xs:yearMonthDuration</code>, the cast is permitted and returns a <code>xs:yearMonthDuration</code> with value 0 months.</p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>.</p>
                  </item>
               </ulist>
               <p>Note that casting from <code>xs:duration</code> to
                        <code>xs:yearMonthDuration</code> or <code>xs:dayTimeDuration</code> loses
                        information. To avoid this, users can cast the <code>xs:duration</code>
                        value to both an <code>xs:yearMonthDuration</code> and an
                        <code>xs:dayTimeDuration</code> and work with both values.</p>
            </div3>
            <div3 id="casting-to-datetimes">
               <head>Casting to date and time types</head>
               <p>In several situations, casting to date and time types requires the extraction
                        of a component from <emph>SV</emph> or from the result of
                        <code>fn:current-dateTime</code> and converting it to an
                        <code>xs:string</code>. These conversions must follow certain rules. For
                        example, converting an <code>xs:integer</code> year value requires
                        converting to an <code>xs:string</code> with four or more characters, preceded
                        by a minus sign if the value is negative.</p>
               <p>This document defines four functions to perform these conversions. These
                        functions are for illustrative purposes only and make no recommendations as
                        to style or efficiency.  References to these functions from the following text are not normative.</p>
               <p>The arguments to these functions come from functions defined in this
                        document. Thus, the functions below assume that they are correct and do no
                        range checking on them.</p>
               <eg xml:space="preserve"><![CDATA[
declare function eg:convertYearToString($year as xs:integer) as xs:string
{
   let $plusMinus := if ($year >= 0) then "" else "-"
   let $yearString := fn:abs($year) cast as xs:string
   let $length := fn:string-length($yearString)
   return
     if ($length = 1)  then fn:concat($plusMinus, "000", $yearString)
     else
     if ($length = 2)  then fn:concat($plusMinus, "00", $yearString)
       else
       if ($length = 3)  then fn:concat($plusMinus, "0", $yearString)
       else fn:concat($plusMinus, $yearString)
}
                    ]]></eg>
               <eg xml:space="preserve"><![CDATA[
declare function eg:convertTo2CharString($value as xs:integer) as xs:string
{
   let $string := $value cast as xs:string
   return 
     if (fn:string-length($string) = 1) then fn:concat("0", $string)
     else $string
}
                    ]]></eg>
               <eg xml:space="preserve"><![CDATA[
declare function eg:convertSecondsToString($seconds as xs:decimal) as xs:string
{
   let $string := $seconds cast as xs:string
   let $intLength := fn:string-length(($seconds cast as xs:integer) cast as xs:string)
   return 
     if ($intLength = 1) then fn:concat("0", $string)
     else $string
}
                    ]]></eg>
               <!--Text replaced by erratum E6 change 1"--><eg><![CDATA[
declare function eg:convertTZtoString($tz as xs:dayTimeDuration?) as xs:string
{
   if (empty($tz)) 
     then ""
   else if ($tz eq xs:dayTimeDuration('PT0S'))
     then "Z"
   else 
     let $tzh := fn:hours-from-duration($tz)
     let $tzm := fn:minutes-from-duration($tz)
     let $plusMinus := if ($tzh >= 0) then "+" else "-"
     let $tzhString := eg:convertTo2CharString(fn:abs($tzh))
     let $tzmString := eg:convertTo2CharString(fn:abs($tzm))
     return fn:concat($plusMinus, $tzhString, ":", $tzmString)
}

                    ]]></eg>
               <!--End of text replaced by erratum E6--><p>Conversion from 
                  <termref def="dt-cast-primitive-type">primitive types</termref> to date and time types follows the rules below.</p>
               <olist><!--    <item>
                            <p>When a value of any primitive type is cast as
                                <code>xs:dateTime</code>, <code>xs:time</code>,
                                <code>xs:date</code>, <code>xs:gYearMonth</code>,
                                <code>xs:gYear</code>, <code>xs:gMonthDay</code>,
                                <code>xs:gDay</code>, or <code>xs:gMonth</code>,</p>
                            <p> let <emph>CYR</emph> be <code>eg:convertYearToString(
                                    fn:year-from-dateTime( fn:current-dateTime() ))</code>,</p>
                            <p> let <emph>CMO</emph> be <code>eg:convertTo2CharString(
                                    fn:month-from-dateTime( fn:current-dateTime() ))</code>, </p>
                            <p> let <emph>CDA</emph> be <code>eg:convertTo2CharString(
                                    fn:day-from-dateTime( fn:current-dateTime() )) </code>.</p>
                            and </p>
<p>
let <emph>CTZ</emph> be <code>eg:convertTZtoString(
	    fn:timezone-from-dateTime( fn:current-dateTime()
	    )</code>. </p> 
                        </item> --><item>
                     <p>When a value of any primitive type is cast as
                                <code>xs:dateTime</code>, the <code>xs:dateTime</code> value
                                <emph>TV</emph> is derived from <emph>ST</emph> and <emph>SV</emph>
                                as follows:</p>
                     <ulist>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:dateTime</code>, then
                                        <emph>TV</emph> is <emph>SV</emph>. </p>
                        </item>
                        <!--		<item>
								<p>If <emph>ST</emph> is <code>xs:time</code>, then let <emph>SHR</emph> be <code>eg:convertTo2CharString( fn:hours-from-time(</code>
									<emph>SV</emph>	<code>)) </code>, let <emph>SMI</emph> be <code>eg:convertTo2CharString( fn:minutes-from-time(</code>
									<emph>SV</emph><code>))</code>, let <emph>SSE</emph> be <code>eg:convertSecondsToString( fn:seconds-from-time(</code>
									<emph>SV</emph><code>))</code> and let <emph>STZ</emph> be <code>eg:convertTZtoString( fn:timezone-from-time(</code><emph>SV</emph><code>))</code>
; <emph>TV</emph> is <code>xs:dateTime( fn:concat(</code>
									<emph>CYR</emph>
									<code>, '-', </code>
									<emph>CMO</emph>
									<code>, '-', </code>
									<emph>CDA</emph>
									<code>, 'T', </code>
									<emph>SHR</emph>
									<code>, ':', </code>
									<emph>SMI</emph>
									<code>, ':', </code>
									<emph>SSE, STZ</emph> 
									<code>) )</code>. </p>
							</item> --><item>
                           <p>If <emph>ST</emph> is <code>xs:date</code>, then let
                                        <emph>SYR</emph> be <code>eg:convertYearToString( fn:year-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code>, let <emph>SMO</emph> be
                                            <code>eg:convertTo2CharString( fn:month-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code>, let <emph>SDA</emph> be
                                            <code>eg:convertTo2CharString( fn:day-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code> and let <emph>STZ</emph> be
                                            <code>eg:convertTZtoString( fn:timezone-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:dateTime( fn:concat(</code>
                                        <emph>SYR</emph>
                                        <code>, '-', </code>
                                        <emph>SMO</emph>
                                        <code>, '-', </code>
                                        <emph>SDA</emph>
                                        <code>, 'T00:00:00 '</code>, <emph>STZ</emph>
                                        <code>) )</code>. </p>
                        </item>
                        <item>
                           <p> If <emph>ST</emph> is <code>xs:untypedAtomic</code> or
                                        <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>.</p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>When a value of any primitive type is cast as <code>xs:time</code>,
                                the <code>xs:time</code> value <emph>TV</emph> is derived from
                                <emph>ST</emph> and <emph>SV</emph> as follows:</p>
                     <ulist>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:time</code>, then
                                        <emph>TV</emph> is <emph>SV</emph>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:dateTime</code>, then
                                        <emph>TV</emph> is <code>xs:time( fn:concat(
                                            eg:convertTo2CharString( fn:hours-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>)), ':', eg:convertTo2CharString( fn:minutes-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>)), ':', eg:convertSecondsToString( fn:seconds-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>)), eg:convertTZtoString( fn:timezone-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>)) ))</code>. </p>
                        </item>
                        <item>
                           <p> If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                        or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>. </p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>When a value of any primitive type is cast as <code>xs:date</code>,
                                the <code>xs:date</code> value <emph>TV</emph> is derived from
                                <emph>ST</emph> and <emph>SV</emph> as follows:</p>
                     <ulist>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:date</code>, then
                                        <emph>TV</emph> is <emph>SV</emph>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:dateTime</code>, then let
                                        <emph>SYR</emph> be <code>eg:convertYearToString( fn:year-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code>, let <emph>SMO</emph> be
                                            <code>eg:convertTo2CharString( fn:month-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code>, let <emph>SDA</emph> be
                                            <code>eg:convertTo2CharString( fn:day-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code> and let <emph>STZ</emph> be <code>eg:convertTZtoString(fn:timezone-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:date( fn:concat(</code>
                                        <emph>SYR</emph>
                                        <code>, '-', </code>
                                        <emph>SMO</emph>
                                        <code>, '-', </code>
                                        <emph>SDA</emph>, <emph>STZ</emph>
                                        <code>) )</code>. </p>
                        </item>
                        <item>
                           <p> If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                        or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>. </p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>When a value of any primitive type is cast as
                                <code>xs:gYearMonth</code>, the <code>xs:gYearMonth</code> value
                                <emph>TV</emph> is derived from <emph>ST</emph> and <emph>SV</emph>
                                as follows:</p>
                     <ulist>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:gYearMonth</code>, then
                                        <emph>TV</emph> is <emph>SV</emph>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:dateTime</code>, then let
                                        <emph>SYR</emph> be <code>eg:convertYearToString( fn:year-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code>, let <emph>SMO</emph> be
                                            <code>eg:convertTo2CharString( fn:month-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code> and let <emph>STZ</emph> be
                                            <code>eg:convertTZtoString( fn:timezone-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:gYearMonth( fn:concat(</code>
                                        <emph>SYR</emph>
                                        <code>, '-', </code>
                                        <emph>SMO</emph>, <emph>STZ</emph>
                                        <code>) )</code>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:date</code>, then let
                                        <emph>SYR</emph> be <code>eg:convertYearToString( fn:year-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code>, let <emph>SMO</emph> be
                                            <code>eg:convertTo2CharString( fn:month-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code> and let <emph>STZ</emph> be
                                            <code>eg:convertTZtoString( fn:timezone-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:gYearMonth( fn:concat(</code>
                                        <emph>SYR</emph>
                                        <code>, '-', </code>
                                        <emph>SMO</emph>, <emph>STZ</emph>
                                        <code>) )</code>. </p>
                        </item>
                        <item>
                           <p> If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                        or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>. </p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>When a value of any primitive type is cast as <code>xs:gYear</code>,
                                the <code>xs:gYear</code> value <emph>TV</emph> is derived from
                                <emph>ST</emph> and <emph>SV</emph> as follows:</p>
                     <ulist>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:gYear</code>, then
                                        <emph>TV</emph> is <emph>SV</emph>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:dateTime</code>, let
                                        <emph>SYR</emph> be <code>eg:convertYearToString( fn:year-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code> and let <emph>STZ</emph> be
                                            <code>eg:convertTZtoString( fn:timezone-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:gYear(fn:concat(</code>
                                        <emph>SYR</emph>, <emph>STZ</emph>
                                        <code>))</code>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:date</code>, let
                                        <emph>SYR</emph> be <code>eg:convertYearToString( fn:year-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; and let <emph>STZ</emph> be
                                            <code>eg:convertTZtoString( fn:timezone-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:gYear(fn:concat(</code>
                                        <emph>SYR</emph>, <emph>STZ</emph>
                                        <code>))</code>. </p>
                        </item>
                        <item>
                           <p> If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                        or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>. </p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>When a value of any primitive type is cast as
                                <code>xs:gMonthDay</code>, the <code>xs:gMonthDay</code> value
                                <emph>TV</emph> is derived from <emph>ST</emph> and <emph>SV</emph>
                                as follows:</p>
                     <ulist>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:gMonthDay</code>, then
                                        <emph>TV</emph> is <emph>SV</emph>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:dateTime</code>, then let
                                        <emph>SMO</emph> be <code>eg:convertTo2CharString( fn:month-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code>, let <emph>SDA</emph> be
                                            <code>eg:convertTo2CharString( fn:day-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code> and let <emph>STZ</emph> be
                                            <code>eg:convertTZtoString( fn:timezone-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:gYearMonth( fn:concat(</code>
                                        <code> '--', </code>
                                        <emph>SMO</emph>
                                        <code> '-', </code>
                                        <emph>SDA</emph>, <emph>STZ</emph>
                                        <code>) )</code>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:date</code>, then let
                                        <emph>SMO</emph> be <code>eg:convertTo2CharString( fn:month-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code>, let <emph>SDA</emph> be
                                            <code>eg:convertTo2CharString( fn:day-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code> and let <emph>STZ</emph> be
                                            <code>eg:convertTZtoString( fn:timezone-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:gYearMonth( fn:concat(</code>
                                        <code> '--', </code>
                                        <emph>SMO</emph>
                                        <code>, '-', </code>
                                        <emph>SDA</emph>, <emph>STZ</emph>
                                        <code>) )</code>. </p>
                        </item>
                        <item>
                           <p> If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                        or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>.</p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>When a value of any primitive type is cast as <code>xs:gDay</code>,
                                the <code>xs:gDay</code> value <emph>TV</emph> is derived from
                                <emph>ST</emph> and <emph>SV</emph> as follows:</p>
                     <ulist>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:gDay</code>, then
                                        <emph>TV</emph> is <emph>SV</emph>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:dateTime</code>, then let
                                        <emph>SDA</emph> be <code>eg:convertTo2CharString( fn:day-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code> and let <emph>STZ</emph> be
                                            <code>eg:convertTZtoString( fn:timezone-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:gDay(
                                            fn:concat( '---'</code>, <emph>SDA</emph>, <emph>STZ</emph>
                                        <code>))</code>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:date</code>, then let
                                        <emph>SDA</emph> be <code>eg:convertTo2CharString( fn:day-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code> and let <emph>STZ</emph> be
                                            <code>eg:convertTZtoString( fn:timezone-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:gDay(
                                            fn:concat( '---'</code>, <emph>SDA</emph>, <emph>STZ</emph>
                                        <code>))</code>. </p>
                        </item>
                        <item>
                           <p> If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                        or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>. </p>
                        </item>
                     </ulist>
                  </item>
                  <item>
                     <p>When a value of any primitive type is cast as <code>xs:gMonth</code>,
                                the <code>xs:gMonth</code> value <emph>TV</emph> is derived from
                                <emph>ST</emph> and <emph>SV</emph> as follows:</p>
                     <ulist>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:gMonth</code>, then
                                        <emph>TV</emph> is <emph>SV</emph>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:dateTime</code>, then let
                                        <emph>SMO</emph> be <code>eg:convertTo2CharString( fn:month-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code> and let <emph>STZ</emph> be
                                            <code>eg:convertTZtoString( fn:timezone-from-dateTime(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:gMonth(
                                            fn:concat( '--' </code>, <emph>SMO</emph>, <emph>STZ</emph>
                                        <code>))</code>. </p>
                        </item>
                        <item>
                           <p>If <emph>ST</emph> is <code>xs:date</code>, then let
                                        <emph>SMO</emph> be <code>eg:convertTo2CharString( fn:month-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code> and let <emph>STZ</emph> be
                                            <code>eg:convertTZtoString( fn:timezone-from-date(</code>
                                        <emph>SV</emph>
                                        <code>))</code>; <emph>TV</emph> is <code>xs:gMonth(
                                            fn:concat( '--'</code>, <emph>SMO</emph>, <emph>STZ</emph>
                                        <code>))</code>. </p>
                        </item>
                        <item>
                           <p> If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                        or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>.</p>
                        </item>
                     </ulist>
                  </item>
               </olist>
            </div3>
            <div3 id="casting-boolean">
               <head>Casting to xs:boolean </head>
               <p>When a value of any <termref def="dt-cast-primitive-type">primitive type</termref> is cast as <code>xs:boolean</code>, the
                        <code>xs:boolean</code> value <emph>TV</emph> is derived from
                        <emph>ST</emph> and <emph>SV</emph> as follows:</p>
               <ulist>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:boolean</code>, then <emph>TV</emph>
                                is <emph>SV</emph>.</p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:float</code>, <code>xs:double</code>,
                                <code>xs:decimal</code> or <code>xs:integer</code> and
                                <emph>SV</emph> is <code>0</code>, <code>+0</code>, <code>-0</code>,
                                <code>0.0</code>, <code>0.0E0</code> or <code>NaN</code>, then
                                <emph>TV</emph> is <code>false</code>. </p>
                  </item>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:float</code>, <code>xs:double</code>,
                                <code>xs:decimal</code> or <code>xs:integer</code> and
                                <emph>SV</emph> is not one of the above values, then <emph>TV</emph>
                                is <code>true</code>. </p>
                  </item>
                  <item>
                     <p> If <emph>ST</emph> is <code>xs:untypedAtomic</code>
                                or <code>xs:string</code>, see 
                                    <specref ref="casting-from-strings"/>. </p>
                  </item>
               </ulist>
            </div3>
            <div3 id="casting-to-binary">
               <head>Casting to xs:base64Binary and xs:hexBinary</head>
               <p>Values of type <code>xs:base64Binary</code> can be cast as
                        <code>xs:hexBinary</code> and vice versa, since the two types have the same
                        value space. Casting to <code>xs:base64Binary</code> and
                        <code>xs:hexBinary</code> is also supported from the same type and from
                        <code>xs:untypedAtomic</code>, <code>xs:string</code> and subtypes of
                        <code>xs:string</code> using <bibref ref="xmlschema-2"/> semantics.</p>
            </div3>
            <div3 id="casting-to-anyuri">
               <head>Casting to xs:anyURI</head>
               <p>Casting to <code>xs:anyURI</code> is supported only from the same type,
                        <code>xs:untypedAtomic</code> or <code>xs:string</code>.</p>
               <p>When a value of any <termref def="dt-cast-primitive-type">primitive type</termref> is cast as <code>xs:anyURI</code>, the
                        <code>xs:anyURI</code> value <emph>TV</emph> is derived from the
                        <emph>ST</emph> and <emph>SV</emph> as follows:</p>
               <ulist>
                  <item>
                     <p>If <emph>ST</emph> is <code>xs:untypedAtomic</code> or <code>xs:string</code> see 
                                    <specref ref="casting-from-strings"/>.
                             </p>
                  </item>
               </ulist>
            </div3>
            <div3 id="casting-to-qname-and-notation">
               <head>Casting to xs:QName and xs:NOTATION</head>
               <p>Casting from <code>xs:string</code> or <code>xs:untypedAtomic</code> to
                  <code>xs:QName</code> or <code>xs:NOTATION</code> is described in 
                  <specref ref="casting-from-strings"/>.</p>
               <p>It is also possible to cast from <code>xs:NOTATION</code> to <code>xs:QName</code>, 
                  or from <code>xs:QName</code> to
                  any type derived by restriction from <code>xs:NOTATION</code>. (Casting to <code>xs:NOTATION</code>
                  itself is not allowed, because <code>xs:NOTATION</code> is an abstract type.) The resulting
                  <code>xs:QName</code> or <code>xs:NOTATION</code> has the same prefix, local name, and namespace URI
                  parts as the supplied value.</p>
               <note><p>See <specref ref="constructor-qname-notation"/> for a discussion of how the combination of
               atomization and casting might not produce the desired effect.</p></note>
            </div3>
            <div3 id="casting-to-ENTITY">
               <head>Casting to xs:ENTITY</head>
               <p>
                  <bibref ref="xmlschema-2"/> says that <quote>The
                     value space of ENTITY is the set of all strings that match the 
                     NCName production ... and have been
                     declared as an unparsed entity in a document type definition.</quote>
                  However,
                  <bibref ref="xslt-40"/> and <bibref ref="xquery-40"/> do not check that constructed values of type <code>xs:ENTITY</code> match declared unparsed entities.  Thus, this rule is relaxed in this specification and, in casting to <code>xs:ENTITY</code> and types derived from it, no check is made that the values correspond to declared unparsed entities.
               </p>
            </div3>
         </div2>
         <div2 id="casting-from-strings">
            <head>Casting from xs:string and xs:untypedAtomic</head>
            <p>This section applies when the supplied value <var>SV</var>
               is an instance of <code>xs:string</code> or <code>xs:untypedAtomic</code>,
               including types derived from these by restriction. If the value is
               <code>xs:untypedAtomic</code>, it is treated in exactly the same way as a
               string containing the same sequence of characters.</p>
            
            <p>The supplied string is mapped to a typed value of the target type as defined in <bibref ref="xmlschema-2"/>. 
               Whitespace normalization is applied as indicated by the
               <code>whiteSpace</code> facet for the datatype. The resulting whitespace-normalized string 
               must be a valid lexical form for the datatype.  The semantics of casting follow the rules of
               XML Schema validation.  For example, <code>"13" cast as xs:unsignedInt</code> returns 
               the <code>xs:unsignedInt</code> typed 
               value <code>13</code>. This could also be written <code>xs:unsignedInt("13")</code>.</p>
            
            <p>The target type can be any simple type other than an
               abstract type. Specifically, it can be a type whose variety is atomic, union, or list.
               In each case the effect of casting to the target type is the same as constructing an element
               with the supplied value as its content, validating the element using the target type as
               the governing type, and atomizing the element to obtain its typed value.</p>
            
            <p>When the target type is a derived type that is restricted by a pattern facet, the
               lexical form is first checked against the pattern before further casting
               is attempted (See <specref ref="casting-to-derived-types"/>).  If the lexical form does
               not conform to the pattern, a dynamic 
               error <errorref class="RG" code="0001" type="dynamic"/> is raised.</p> 
            
            <p>For example, consider a user-defined type <code>my:boolean</code> which is derived by
               restriction from <code>xs:boolean</code> and specifies the pattern facet <code>value="0|1"</code>.
               The expression <code>"true" cast as my:boolean</code> would fail with a dynamic
               error <errorref class="RG" code="0001" type="dynamic"/>.</p>
            
            <p>Facets other than <code>pattern</code> are checked <emph>after</emph> the conversion.
               For example if there is a user-defined datatype called <code>my:height</code> 
               defined as a restriction of <code>xs:integer</code> with the facet <code>&lt;maxInclusive value="84"/></code>,
               then the expression <code>"100" cast as my:height</code> would fail with a dynamic
               error <errorref class="RG" code="0001" type="dynamic"/>.</p>
            
            <p>Casting to the types <code>xs:NOTATION</code>, <code>xs:anySimpleType</code>, 
               or <code>xs:anyAtomicType</code> is not permitted because these types are abstract (they have
               no immediate instances).</p>
            
            <p>Special rules apply when casting to namespace-sensitive types. The types <code>xs:QName</code>
               and <code>xs:NOTATION</code> are namespace-sensitive. Any type derived by restriction from 
               a namespace-sensitive type is itself namespace-sensitive, as is any union type having a
               namespace-sensitive type among its members, and any list type having a namespace-sensitive type
               as its item type. For details, see <specref ref="constructor-qname-notation"/>.</p>
            
            <note><p>This version of the specification allows casting between <code>xs:QName</code>
               and <code>xs:NOTATION</code> in either direction; this was not permitted in the previous Recommendation. This version also removes
               the rule that only a string literal (rather than a dynamic string) may be cast to an <code>xs:QName</code></p></note>
            
            <p>When casting to a numeric type:</p>
            <ulist>
               <item><p>If the value is too large or too small to be accurately represented by the implementation, 
                  it is handled as an overflow or underflow as defined in <specref ref="op.numeric"/>.</p></item>
               <item><p>If the target type is <code>xs:float</code> or <code>xs:double</code>, the string <code>-0</code> (and equivalents
                  such as <code>-0.0</code> or <code>-000</code>) <rfc2119>should</rfc2119> be converted to the value negative zero.
                  However, if the implementation is reliant on an implementation of XML Schema 1.0 in which negative zero
                  is not part of the value space for these types, these lexical forms <rfc2119>may</rfc2119> be converted to positive zero.</p></item>
            </ulist>
            <p>
               In casting to <code>xs:decimal</code> or to a type derived from <code>xs:decimal</code>, 
               if the value is not too large or too small but nevertheless cannot be represented accurately 
               with the number of decimal digits available to the implementation, the implementation may round 
               to the nearest representable value or may raise a dynamic error <errorref class="CA" code="0006" type="dynamic"/>. 
               The choice of rounding algorithm and the choice between rounding and error behavior and is 
               <termref def="implementation-defined"/>.
            </p>
            <p>In casting to <code>xs:date</code>, <code>xs:dateTime</code>, <code>xs:gYear</code>, 
               or <code>xs:gYearMonth</code> 
               (or types derived from these), if the value is too large or too 
               small to be represented by the implementation, a dynamic error 
               <errorref class="DT" code="0001" type="dynamic"/> is raised.</p>
            <p>In casting to a duration value, if the value is too large or too small to be represented by the 
               implementation, a dynamic error <errorref class="DT" code="0002" type="dynamic"/> is raised.</p>
            <p> For <code>xs:anyURI</code>, the extent to which an implementation validates the
               lexical form of <code>xs:anyURI</code> is <termref def="implementation-dependent"/>.</p>
            <p>If the cast fails for any other reason, a dynamic error
               <errorref class="RG" code="0001" type="dynamic"/> is raised.</p>
            

            
            
         </div2>
         
         <div2 id="casting-non-primitive-types">
            <head>Casting involving non-primitive types</head>
            
            <p>Casting from <code>xs:string</code> and <code>xs:untypedAtomic</code> to any other type
            (primitive or non-primitive) has been described in <specref ref="casting-from-strings"/>.
            This section defines how other casts to non-primitive types operate, including casting
            to types derived by restriction, to union types, and to list types.</p>
            
            <note>
               <p>A <term>non-primitive type</term> here means any type that is not a
                  <termref def="dt-cast-primitive-type">primitive type</termref> according
               to the extended definition used in <specref ref="casting"/>.</p>
            </note>
         
         <div3 id="casting-to-derived-types">
            
            <head>Casting to derived types</head>
            <p>Casting a value to a derived type can be separated into four cases. In these rules:</p>
            <ulist>
               <item><p>The types <code>xs:untypedAtomic</code>, <code>xs:integer</code>, <code>xs:yearMonthDuration</code>,
               and <code>xs:dayTimeDuration</code> are treated as primitive types (alongside the 19 primitive types defined in XSD).</p></item>
               <item><p>For any atomic type <var>T</var>, let <var>P(T)</var> denote the most specific primitive type
               such that <code>itemType-subtype(T, P(T))</code> is true.</p></item>
            </ulist>
            <p>The rules are then:</p>
            <olist>
               <item>
                  <p>When <var>ST</var> is the same type as <var>TT</var>: this case always succeeds, returning <var>SV</var> unchanged.</p>
               </item>
               <item>
                  <p>When <code>itemType-subtype(ST, TT)</code> is true: This case is described in <specref ref="casting-from-derived-to-parent"/>. </p>
               </item>
               <item>
                  <p>When <var>P(ST)</var> is the same type as <var>P(TT)</var>: This case is described in <specref ref="casting-within-branch"/>.</p>
               </item>
               <item>
                  <p>Otherwise (<var>P(ST)</var> is not the same type as <var>P(TT)</var>): This case is described in <specref ref="casting-across-hierarchy"/>.</p>
               </item>
            </olist>
         </div3>
         <div3 id="casting-from-derived-to-parent">
            <head>Casting from derived types to parent types</head>
            
            <p>
               It is always possible to cast an atomic value <var>A</var> to a type <var>T</var>
               if the relation <code>A instance of T</code> is true, provided that <var>T</var>
               is not an abstract type.
            </p>
            <p>For example, it is
              possible to cast an <code>xs:unsignedShort</code> to an
              <code>xs:unsignedInt</code>, to an <code>xs:integer</code>, to an
              <code>xs:decimal</code>, or to a union type
              whose member types are <code>xs:integer</code> and <code>xs:double</code>.</p> 
              <p>Since the value space of the original type is a subset
              of the value space of the target type, such a cast is always successful.</p> 
            <p>For the expression <code>A instance of T</code> to be true, <var>T</var> must be
               either an atomic type, or a union type that has no constraining facets. It cannot
               be a list type, nor a union type derived by restriction from another union type, nor
               a union type that has a list type among its member types.</p>
            <p>The
            result will have the same value as the original, but will have a new type annotation:</p>
            <ulist>
               <item><p>If <var>T</var> is an atomic type, then the type annotation of the result is <code>T</code>.
               </p></item>
               <item><p>If <var>T</var> is a union type, then the type of the result is an atomic type <code>M</code>
                  such that <var>M</var> is one of the atomic types in the transitive membership of
                  the union type <var>T</var> and <code>A instance of M</code> is true; if there is more
                  than one type <var>M</var> that satisfies these conditions (which could happen, for example,
                  if <var>T</var> is the union of two overlapping types such as <code>xs:int</code>
                  and <code>xs:positiveInteger</code>) then the first one is used, taking the member types
                  in the order in which they appear within the definition of the union type.</p></item>
            </ulist>
              
         </div3>
         <div3 id="casting-within-branch">
            <head>Casting within a branch of the type hierarchy</head>
            <p>It is possible to cast an <emph>SV</emph> to a <emph>TT</emph> if the type of the
                    <emph>SV</emph> and the <emph>TT</emph> type are both derived by restriction
               (directly or indirectly) from the same <termref def="dt-cast-primitive-type">primitive type</termref>, provided that the
                    supplied value conforms to the constraints implied by the facets of the target
                    type.  This includes the case where the target type is derived from the type of the supplied value,
                    as well as the case where the type of the supplied value is derived from the target type.  For example, an instance of <code>xs:byte</code> can be cast as
                    <code>xs:unsignedShort</code>, provided the value is not negative.  </p>
            <p>If the value does not conform to the facets defined for the target type, then a dynamic
                    error is raised <errorref class="RG" code="0001"/>. See <bibref ref="xmlschema-2"/>.
                    In the case of the pattern facet (which applies to the lexical space rather than
                    the value space), the pattern is tested against the canonical lexical
                    representation of the value, as defined for the source type (or the result
                    of casting the value to an <code>xs:string</code>, in the case of types that have no canonical
                    lexical representation defined for them).</p>
            <p>Note that this will cause casts to fail if the pattern excludes the canonical
                    lexical representation of the source type. For example, if the type
                    <code>my:distance</code> is defined as a restriction of <code>xs:decimal</code>
                    with a pattern that requires two digits after the decimal point, casting of an
                    <code>xs:integer</code> to <code>my:distance</code> will always fail, because
                    the canonical representation of an <code>xs:integer</code> does not conform to
                    this pattern.</p>
            <p>In some cases, casting from a parent type to a derived type requires special
                    rules. See <specref ref="casting-to-durations"/> for rules regarding casting to
                    <code>xs:yearMonthDuration</code> and <code>xs:dayTimeDuration</code>.  See <specref ref="casting-to-ENTITY"/>, below, for casting to <code>xs:ENTITY</code> and types derived from it.</p>
            
         </div3>
         <div3 id="casting-across-hierarchy">
            <head>Casting across the type hierarchy</head>
            <p>When the <emph>ST</emph> and the <emph>TT</emph> are derived, directly or
               indirectly, from different <termref def="dt-cast-primitive-type">primitive types</termref>, this is called casting across the
                    type hierarchy. Casting across the type hierarchy is logically equivalent to
                    three separate steps performed in order. Errors can occur in either of the
                    latter two steps.</p>
            <olist>
               <item>
                  <p>Cast the <emph>SV</emph>, up the hierarchy, to the <termref def="dt-cast-primitive-type">primitive type</termref> of the
                            source, as described in <specref ref="casting-from-derived-to-parent"/>.</p>
                  <olist>
                     <item>
                        <p>
If <emph>SV</emph> is an instance of <code>xs:string</code> or <code>xs:untypedAtomic</code>, check its value against the 
                           pattern facet of <emph>TT</emph>, and raise a dynamic error <errorref class="RG" code="0001"/> if the check fails.</p>
                     </item>
                  </olist>
               </item>
               <item>
                  <p>Cast the value to the <termref def="dt-cast-primitive-type">primitive type</termref> of <emph>TT</emph>, as described in
                                <specref ref="casting-from-primitive-to-primitive"/>.</p>
                  <ulist>
                     <item>
                        <p>If <emph>TT</emph> is derived from <code>xs:NOTATION</code>, assume for the
purposes of this rule that casting to <code>xs:NOTATION</code> succeeds.
</p>
                     </item>
                  </ulist>
               </item>
               <item>
                  <p>Cast the value down to the <emph>TT</emph>, as described in <specref ref="casting-within-branch"/>
                        </p>
               </item>
            </olist>
         </div3>
         <div3 id="casting-to-union">
            <head>Casting to union types</head>
            <p>If the target type of a cast expression (or a constructor function) is a type with variety union, the
               supplied value must be one of the following:</p>
            
            <olist>
               <item><p>A value of type <code>xs:string</code> or <code>xs:untypedAtomic</code>.
               This case follows the general rules for casting from strings, and has already been
               described in <specref ref="casting-from-strings"/>.</p>
               
                  <p>If the union type has a pattern facet, the pattern is tested against the supplied
                     value after whitespace normalization, using the <code>whiteSpace</code>
                     normalization rules of the member datatype against which validation succeeds.</p>
               </item>
               <item><p>A value that is an instance of one of the atomic types in the transitive
               membership of the union type, and of the union type itself. This case has already been described in
               <specref ref="casting-from-derived-to-parent"/></p>
               
                  <p>This situation only applies when the value is an instance of the union type,
                  which means it will never apply when the union is derived by facet-based restriction
                  from another union type.</p>
                  
               </item>
               <item><p>A value that is castable to one or more of the atomic types in the transitive membership
                  of the union type (in the sense that the <code>castable as</code> operator returns true).</p>
                  <p>In this case the supplied value is cast to each atomic type in the transitive membership
                     of the union type in turn (in the order in which the member types appear in the declaration)
                     until one of these casts is successful; if none of them is successful, a dynamic error occurs
                     <errorref class="RG" code="0001"/>. If the union type has constraining facets then the
                     resulting value must satisfy these facets, otherwise a dynamic error occurs 
                     <errorref class="RG" code="0001"/>.</p>
                  
                  <p>If the union type has a pattern facet, the pattern is tested against the canonical
                  representation of the result value.</p>
                  
                  <p>Only the atomic types in the transitive membership of the union type are considered. The
                  union type may have list types in its transitive membership, but (unless the supplied value
                  is of type <code>xs:string</code> or <code>xs:untypedAtomic</code>, in which case the
                  rules in <specref ref="casting-from-strings"/> apply), any list types in the membership
                  are effectively ignored.</p>
               </item>
               
            </olist>
            
            <p>If more than one of these conditions applies, then the casting is done according to the rules
            for the first condition that applies.</p>
            
            <p>If none of these conditions applies, the cast fails with a dynamic error
            <errorref class="RG" code="0001"/>.</p>          
            
            <p>Example: consider a type <var>U</var> whose member types are <code>xs:integer</code>
               and <code>xs:date</code>.</p>
            
               <ulist>
                  <item><p>The expression <code>"123" cast as U</code> returns the
                  <code>xs:integer</code> value <code>123</code>.</p></item>
                  <item><p>The expression <code>current-date() cast as U</code> returns
                     the current date as an instance of <code>xs:date</code>.</p></item>
                  <item><p>The expression <code>23.1 cast as U</code> returns the <code>xs:integer</code>
                  value <code>23</code>.</p></item>
               </ulist>
      
            
            <p>Example: consider a type <var>V</var> whose member types are <code>xs:short</code>
               and <code>xs:negativeInteger</code>.</p>
            
            <ulist>
               <item><p>The expression <code>"-123" cast as V</code> returns the
                  <code>xs:short</code> value <code>-123</code>.</p></item>
               <item><p>The expression <code>"-100000" cast as V</code> returns the
                  <code>xs:negativeInteger</code> value <code>-100000</code>.</p></item>
               <item><p>The expression <code>93.7 cast as V</code> returns the
                  <code>xs:short</code> value <code>93</code>.</p></item>
               <item><p>The expression <code>"93.7" cast as V</code> raises
                  a dynamic error <errorref class="RG" code="0001"/> on the grounds that the string
               <code>"93.7"</code> is not in the lexical space of the union type.</p></item>
     
            </ulist>
            
  
  
            <p>Example: consider a type <var>W</var> that is derived from the above type <var>V</var>
               by restriction, with a pattern facet of <code>-?\d\d</code>.</p>
               
               <ulist>
                  <item><p>The expression <code>"12" cast as V</code> returns the
                     <code>xs:short</code> value <code>12</code>.</p></item>
                  <item><p>The expression <code>"123" cast as V</code> raises
                     an dynamic error <errorref class="RG" code="0001"/> on the grounds that the string
                     <code>"123"</code> does not match the pattern facet.</p></item>
                  
               </ulist>   
               

         </div3>
         <div3 id="casting-to-list">
            <head>Casting to list types</head>
            <p>If the target type of a cast expression (or a constructor function) is a
            type with variety <code>list</code>, the supplied value must be of type <code>xs:string</code> or
            <code>xs:untypedAtomic</code>. The rules follow the general principle for
            all casts from <code>xs:string</code> outlined in <specref ref="casting-from-strings"/>.</p>
            
            <p>The semantics of the operation are consistent with validation: that is,
            the effect of casting a string <var>S</var> to a list type <var>L</var> is the same as
            constructing an element or attribute node whose string value is <var>S</var>,
            validating it using <var>L</var> as the governing type, and atomizing the resulting
            node. The result will always be either failure, or a sequence of zero or
            more atomic values each of which is an instance of the item type of <var>L</var>
            (or if the item type of <var>L</var> is a union type, an instance of one of the
            atomic types in its transitive membership).</p>
            
            <p>If the item type of the list type is namespace-sensitive, then the 
               namespace bindings in the static context will be used to
            resolve any namespace prefix, in the same way as when the target type is
            <code>xs:QName</code>.</p>
            
            <p>If the list type has a <code>pattern</code> facet, the pattern must match
            the supplied value after collapsing whitespace (an operation equivalent to the
            use of the <code>fn:normalize-space</code> function).</p>
            
            <p>For example, the expression <code>cast "A B C D" as xs:NMTOKENS</code>
            produces a sequence of four <code>xs:NMTOKEN</code> values, 
            <code>("A", "B", "C", "D")</code>.</p>
            
            <p>For example, given a user-defined type <code>my:coordinates</code> defined
            as a list of <code>xs:integer</code> with the facet <code>&lt;xs:length value="2"/></code>,
            the expression <code>my:coordinates("2 -1")</code> will return a sequence of two
            xs:integer values <code>(2, -1)</code>, while the expression <code>my:coordinates("1 2 3")</code>
            will result in a dynamic error because the length of the list does not conform to the
            <code>length</code> facet. The expression <code>my:coordinates("1.0 3.0")</code>
            will also fail because the strings <code>1.0</code> and <code>3.0</code> 
               are not in the lexical space of <code>xs:integer</code>.</p>
            

         </div3>
         </div2>
      </div1>
   </body>
   <back>
      <div1 id="biblio">
         <head>References</head>
         <div2 id="normative-biblio">
            <head>Normative references</head>
            <blist>
 
               
               
               <bibl id="charmod" key="Character Model for the World Wide Web 1.0: Fundamentals">
                  <titleref href="https://www.w3.org/TR/charmod/"
                     >Character Model for the World Wide Web 1.0:
                     Fundamentals</titleref>,
                  Martin J. Dürst, François Yergeau, <emph>et. al.</emph>, Editors.
                  World Wide Web Consortium,
                  15 February 2015.
                  This version is http://www.w3.org/TR/2005/REC-charmod-20050215/.
                  The <loc href="https://www.w3.org/TR/charmod/">latest version</loc>
                  is available at https://www.w3.org/TR/charmod/.</bibl>
               
               <bibl id="html5" key="HTML: Living Standard">
                  <titleref href="https://html.spec.whatwg.org/">HTML: Living Standard</titleref>.
                  WHATWG,
                  18 November 2022.</bibl>

               <bibl id="dom-ls" key="DOM: Living Standard">
                  <titleref href="https://dom.spec.whatwg.org/">DOM: Living Standard</titleref>.
                  WHATWG,
                  26 October 2022.</bibl>

               <bibl id="olson" key="IANA Timezone Database">
                  The <emph>tz</emph> timezone database, available at 
                  <loc href="http://www.iana.org/time-zones">http://www.iana.org/time-zones</loc>.
                  It is <termref def="implementation-defined"/> which version of the database is used.
               </bibl>
               
               <bibl id="ieee754-2008" key="IEEE 754-2008">IEEE. <emph>IEEE Standard for
                  Floating-Point Arithmetic.</emph>
               </bibl>
 
               <bibl id="ISO3166" key="ISO 3166-1">ISO (International Organization for Standardization)
					<emph>Codes for the representation of names of countries
					 and their subdivisions - Part 1: Country codes</emph> ISO 3166-1:2013.
                    </bibl>
               <bibl  id="ISO8601" key="ISO 8601"
                  >ISO (International Organization for
                  Standardization). <emph>Representations of dates and times. Third edition,
                     2004-12-01.</emph> ISO 8601:2004(E). Available from:
                  <loc href="http://www.iso.org/">http://www.iso.org/"</loc>.
               </bibl>
               <bibl id="ISO10967" key="ISO 10967">ISO (International Organization
for Standardization). <emph>ISO/IEC 10967-1:2012, Information
technology&#8212;Language Independent Arithmetic&#8212;Part 1:
Integer and floating point arithmetic</emph> [Geneva]: International
Organization for Standardization, 2012. Available from: <loc href="http://www.iso.org/">http://www.iso.org/</loc>.
               </bibl>
               <bibl id="ISO15924" key="ISO 15924">ISO (International Organization for Standardization) 
                  <emph>Information and documentation &mdash; Codes
                     for the representation of names of scripts</emph> ISO 15924:2004, 
                  January 2004.</bibl>
               <bibl id="ISO15924_register" key="ISO 15924 Register">Unicode Consortium. 
                  <emph>Codes for the representation of names of scripts &mdash; Alphabetical list of four-letter script codes.</emph>
                  See <loc href="http://www.unicode.org/iso15924/iso15924-codes.html"/>.
                  Retrieved February 2013; continually updated.</bibl>
               
               <bibl id="LEIRI"
                  key="Legacy extended IRIs for XML resource identification"><emph>Legacy extended IRIs for XML resource identification</emph>.
                  Henry S. Thomson, Richard Tobin, and Norman Walsh (eds), World Wide Web Consortium. 3 November 2008. Available at
                  <loc href="http://www.w3.org/TR/leiri/">http://www.w3.org/TR/leiri/</loc>.
               </bibl>
               <!--<bibl id="rfc2396" key="RFC 2396">IETF. <emph>RFC 2396: Uniform
                  Resource Identifiers (URI): Generic Syntax. </emph> Available at:
                  <loc href="http://www.ietf.org/rfc/rfc2396.txt">http://www.ietf.org/rfc/rfc2396.txt</loc>
                  </bibl>-->
               <bibl id="rfc2376" key="RFC 2376">IETF. <emph>RFC 2376: XML Media Types. </emph> Available at:
                  <loc href="http://www.ietf.org/rfc/rfc2376.txt">http://www.ietf.org/rfc/rfc2376.txt</loc>.
               </bibl>
               <bibl id="rfc3986" key="RFC 3986">IETF. <emph>RFC 3986: Uniform
                  Resource Identifiers (URI): Generic Syntax. </emph> Available at:
                  <loc href="http://www.ietf.org/rfc/rfc3986.txt">http://www.ietf.org/rfc/rfc3986.txt</loc>.
               </bibl>
               <bibl id="rfc3987" key="RFC 3987">IETF. <emph>RFC 3987:
                  Internationalized Resource Identifiers (IRIs).</emph> Available at:
                  <loc href="http://www.ietf.org/rfc/rfc3987.txt">http://www.ietf.org/rfc/rfc3987.txt</loc>.
               </bibl>
               <bibl id="rfc7159" key="RFC 7159">IETF. <emph>RFC 7159: The Javascript Object Notation (JSON) Data Interchange Format</emph> Available at:
                  <loc href="http://www.rfc-editor.org/rfc/rfc7159.txt">http://www.rfc-editor.org/rfc/rfc7159.txt</loc>.
               </bibl>
               <bibl id="rfc7303" key="RFC 7303">H. Thompson and C. Lilley. <emph>XML Media Types</emph>.
                  IETF RFC 7303. See <loc href="http://www.ietf.org/rfc/rfc7303.txt">http://www.ietf.org/rfc/rfc7303.txt</loc>.</bibl>
               
               <bibl id="UNICODE-TR15"
                  key="UAX #15"><emph>Unicode Standard Annex #15: Unicode Normalization
                     Forms</emph>. 
                  Ed. Mark Davis and Ken Whistler, Unicode Consortium.
                  The current version is 9.0.0, dated 2016-02-24.
                  As with <bibref ref="Unicode"/>, the version to be used is <termref def="implementation-defined"/>.
                  Available at:
                  <loc href="http://www.unicode.org/reports/tr15/">http://www.unicode.org/reports/tr15/</loc>.                 
               </bibl>  
               
               <bibl id="Unicode"
                     key="The Unicode Standard">
The Unicode Consortium, Reading, MA, Addison-Wesley, 2016. <emph>The Unicode Standard</emph>
as updated from time to time by the publication of new versions. See 
<loc href="http://www.unicode.org/standard/versions/">http://www.unicode.org/standard/versions/</loc>
for the latest version and additional information on versions of the standard and of the Unicode Character Database. 
The version of Unicode to be used is <termref def="implementation-defined"/>,
but implementations are recommended to use the latest Unicode version;
currently, Version 9.0.0.
</bibl>
               
                            
               
               <bibl id="UNICODE-TR10" key="UTS #10"><emph>Unicode
                  Technical Standard #10: Unicode Collation Algorithm</emph>. 
                  Ed. Mark Davis and Ken Whistler, Unicode Consortium. The current version is 9.0.0, dated 2016-05-18.
                  As with <bibref ref="Unicode"/>, the version to be used is <termref def="implementation-defined"/>. 
                  Available at: <loc href="http://www.unicode.org/reports/tr10/"/>.</bibl>
               
               <bibl id="UNICODE-TR35" key="UTS #35"><emph>Unicode
                  Technical Standard #35: Unicode Locale Data Markup Language</emph>. 
                  Ed Mark Davis <emph>et al</emph>, Unicode Consortium. The current version is 29, dated 2016-03-15.
                  As with <bibref ref="Unicode"/>, the version to be used is <termref def="implementation-defined"/>.
                  Available at: <loc href="http://www.unicode.org/reports/tr35/"/>.</bibl>
               
               <bibl id="xml" key="Extensible Markup Language (XML) 1.0 (Fifth Edition)"/>
               <bibl  id="xml11"
                  key="Extensible Markup Language (XML) 1.1 Recommendation"/> 
               <bibl  id="xpath"
                     key="XML Path Language (XPath) Version 1.0"/>
               <!--<bibl  id="xpath20"
                     key="XML Path Language (XPath) 2.0"/>-->
               <!--<bibl  id="xpath-30"
                     key="XML Path Language (XPath) 3.0"/>-->
               <bibl  id="xpath-40"
                      key="XML Path Language (XPath) 4.0">
                 <emph>CITATION: T.B.D.</emph>
               </bibl>
 
               <bibl  id="xslt10"
                  key="XSL Transformations (XSLT) Version 1.0"/>
               <bibl  id="xslt20"
                     key="XSL Transformations (XSLT) Version 2.0"/>
	       <bibl  id="xslt-40"
                     key="XSL Transformations (XSLT) Version 4.0">
                 <emph>CITATION: T.B.D.</emph>
               </bibl>
               <bibl  id="xpath-datamodel-30"
                     key="XQuery and XPath Data Model (XDM) 3.0"/>
               <bibl  id="xpath-datamodel-31"
                     key="XQuery and XPath Data Model (XDM) 3.1"/>

			   <bibl  id="xslt-xquery-serialization-31"
                     key="XSLT and XQuery Serialization 3.1"/>
               <bibl  id="xquery-semantics"
                     key="XQuery 1.0 and XPath 2.0 Formal Semantics"/>
               <!--<bibl  id="xquery"
                     key="XQuery 1.0: An XML Query Language"/>-->
               <!--<bibl  id="xquery-30"
                     key="XQuery 3.0: An XML Query Language"/>-->
               <bibl  id="xquery-40"
                     key="XQuery 4.1: An XML Query Language">
                 <emph>CITATION: T.B.D.</emph>
               </bibl>
               <!--<bibl  id="xmlschema-1"
                     key="XML Schema Part 1: Structures Second Edition"> XML
                        Schema Part 1: Structures Second Edition, Oct 28 2004. Available at: 
						<loc href="http://www.w3.org/TR/xmlschema-1/">http://www.w3.org/TR/xmlschema-1/</loc>
						</bibl>-->
               <bibl id="xinclude" key="XML Inclusions (XInclude) Version 1.0 (Second Edition)"/>
               <bibl  id="xmlschema-2"
                     key="XML Schema Part 2: Datatypes Second Edition"> XML Schema
                        Part 2: Datatypes Second Edition, Oct. 28 2004. Available at: 
						<loc href="http://www.w3.org/TR/xmlschema-2/">http://www.w3.org/TR/xmlschema-2/</loc>
               </bibl>
               <bibl id="xmlschema11-2"      key="Schema 1.1 Part 2"/>
               <bibl  id="xml-names" key="Namespaces in XML"/> 
            </blist>
         </div2>
         
         <div2 id="non-normative-biblio">
            <head>Non-normative references</head>
            <blist>
               <bibl  id="CALCALC"
                     key="Calendrical Calculations">Edward M. Reingold and Nachum Dershowitz.
<emph>Calendrical Calculations Millennium edition (2nd Edition)</emph>. Cambridge University Press, 
ISBN 0 521 77752 6.</bibl>
               <bibl id="CLDR" key="Unicode CLDR">CLDR - Unicode Common Locale Data Repository. Available at:
                  <loc href="http://cldr.unicode.org">http://cldr.unicode.org</loc>.</bibl>
               <bibl id="charmod-normalization"
                  key="Character Model for the World Wide Web 1.0: Normalization">Character Model for the World Wide Web
                  1.0: Normalization, Last Call Working Draft. Available at:
                  <loc href="http://www.w3.org/TR/2004/WD-charmod-norm-20040225/">http://www.w3.org/TR/2004/WD-charmod-norm-20040225/</loc>.
               </bibl>
               <bibl id="expath" key="EXPath">EXPath: Collaboratively Defining Open Standards for Portable XPath Extensions.
               <loc href="http://expath.org/">http://expath.org/</loc>.</bibl> 
               <bibl id="exquery" key="EXQuery">EXQuery: Collaboratively Defining Open Standards for Portable XQuery Extensions.
                  <loc href="http://exquery.org/">http://exquery.org/</loc>.</bibl> 
               <bibl id="exslt" key="EXSLT">EXSLT: A Community Initiative to Provide Extensions to XSLT.
                  <loc href="http://exslt.org/">http://exslt.org/</loc>.</bibl> 
               <bibl id="functx" key="FunctX">FunctX Functions. 
                  <loc href="http://www.functx.com/">http://www.functx.com/</loc>.</bibl> 
               <bibl  id="HTML40" key="HTML 4.0">HTML 4.01 Recommendation, 24 December
1999. Available at:
<loc href="http://www.w3.org/TR/REC-html40/">http://www.w3.org/TR/REC-html40/</loc>.
               </bibl>
               <bibl id="ICU" key="ICU">ICU - International Components for Unicode. Available at <loc href="http://site.icu-project.org">http://site.icu-project.org</loc>.
               </bibl>
               <bibl id="POSIX.1-2008" key="POSIX.1-2008">
                  <emph>The Open Group Base Specifications Issue 7 (IEEE Std 1003.1-2008)</emph>.
                  Available at: <loc href="http://pubs.opengroup.org/onlinepubs/9699919799/">http://pubs.opengroup.org/onlinepubs/9699919799/</loc>.
               </bibl>
               <bibl id="rfc822" key="RFC 822">IETF. <emph>RFC 822: Standard for the Format of ARPA Internet Text Messages. </emph> Available at:
                  <loc href="http://www.ietf.org/rfc/rfc822.txt">http://www.ietf.org/rfc/rfc822.txt</loc>.
               </bibl>
               <bibl id="rfc850" key="RFC 850">IETF. <emph>RFC 850: Standard for Interchange of USENET Messages. </emph> Available at:
                  <loc href="http://www.ietf.org/rfc/rfc850.txt">http://www.ietf.org/rfc/rfc850.txt</loc>.
               </bibl>
               <bibl id="rfc1036" key="RFC 1036">IETF. <emph>RFC 1036: Standard for Interchange of USENET Messages. </emph> Available at:
                  <loc href="http://www.ietf.org/rfc/rfc1036.txt">http://www.ietf.org/rfc/rfc1036.txt</loc>.
               </bibl>
               <bibl id="rfc1123" key="RFC 1123">IETF. <emph>RFC 1123: Requirements for Internet Hosts -- Application and Support. </emph> Available at:
                  <loc href="http://www.ietf.org/rfc/rfc1123.txt">http://www.ietf.org/rfc/rfc1123.txt</loc>.
               </bibl>
               <bibl id="rfc2616" key="RFC 2616">IETF. <emph>RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1. </emph> Available at:
                  <loc href="http://www.ietf.org/rfc/rfc2616.txt">http://www.ietf.org/rfc/rfc2616.txt</loc>.
               </bibl>
               <bibl id="rfc3339" key="RFC 3339">IETF. <emph>RFC 3339: Date and Time on the Internet: Timestamps. </emph> Available at:
                  <loc href="http://www.ietf.org/rfc/rfc3339.txt">http://www.ietf.org/rfc/rfc3339.txt</loc>.
               </bibl>
               <bibl id="UNICODE-TR18" key="UTS #18"><emph>Unicode
                  Technical Standard #18: Unicode Regular Expressions</emph>. 
                  Ed. Mark Davis and Andy Heniger, Unicode Consortium. The current version is 17, dated 2013-11-19. Available at:
                  <loc href="http://www.unicode.org/reports/tr18/">http://www.unicode.org/reports/tr18/</loc>.
               </bibl>
               
               
               
               
               <bibl  id="Working-With-Timezones"
                     key="Working With Timezones">World Wide Web Consortium Working Group Note. 
					 <emph>Working With Timezones, October 13, 2005.</emph> Available at:
<loc href="http://www.w3.org/TR/2005/NOTE-timezone-20051013/">http://www.w3.org/TR/2005/NOTE-timezone-20051013/</loc>.
               </bibl>
            </blist>
         </div2>
      </div1>

      <div1 id="error-summary">
         <head>Error summary</head>
         <p>The error text provided with these errors is non-normative.</p>
         <error-list>
            <error class="ER" code="0000" label="Unidentified error." type="dynamic">
               <p>Error code used by <code>fn:error</code> when no other error code is provided.</p>
            </error>
            <error class="AP" code="0001" label="Wrong number of arguments." type="dynamic">
               <p>Raised when <code>fn:apply</code> is called and the arity of the supplied function is not
                  the same as the number of members in the supplied array.</p>
            </error>
            <error class="AR" code="0001" label="Division by zero." type="dynamic">
               <p>This error is raised whenever an attempt is made to divide by zero.</p>
            </error>
            <error class="AR" code="0002" label="Numeric operation overflow/underflow."
                   type="dynamic">
               <p>This error is raised whenever numeric operations result in an overflow or underflow.</p>
            </error>
            <error class="AY" code="0001" label="Array index out of bounds." type="dynamic">
               <p>This error is raised when an integer used to select a member of an array is outside the range of values for that array.</p>
            </error>
            <error class="AY" code="0002" label="Negative array length." type="dynamic">
               <p>This error is raised when the <code>$length</code> argument to <code>array:subarray</code> is negative.</p>
            </error>
            <error class="CA" code="0001" label="Input value too large for decimal."
                   type="dynamic">
               <p>Raised when casting to <code>xs:decimal</code> if the supplied value exceeds the
               implementation-defined limits for the datatype.</p>
            </error>
            <error class="CA" code="0002" label="Invalid lexical value." type="dynamic">
               <p>Raised by <code>fn:resolve-QName</code> and <code>fn:QName</code> when a supplied value does not have the lexical
               form of a QName or URI respectively; and when casting to decimal, if the supplied value is NaN or Infinity.</p>
            </error>
            <error class="CA" code="0003" label="Input value too large for integer."
                   type="dynamic">
               <p>Raised when casting to <code>xs:integer</code> if the supplied value exceeds the
                  implementation-defined limits for the datatype.</p>
            </error>
            <error class="CA" code="0005" label="NaN supplied as float/double value."
                   type="dynamic">
               <p>Raised when multiplying or dividing a duration by a number, if the number supplied is NaN.</p>
            </error>
            <error class="CA" code="0006"
                   label="String to be cast to decimal has too many digits of precision."
                   type="dynamic">
               <p>Raised when casting a string to <code>xs:decimal</code> if the string has more digits of precision
               than the implementation can represent (the implementation also has the option of rounding).</p>
            </error>
            <error class="CH" code="0001" label="Codepoint not valid." type="dynamic">
               <p>Raised by <code>fn:codepoints-to-string</code> if the input contains an integer that is not the codepoint
               of a valid XML character.</p>
            </error>
            <error class="CH" code="0002" label="Unsupported collation." type="dynamic">
               <p>Raised by any function that uses a collation if the requested collation is not recognized.</p>
            </error>
            <error class="CH" code="0003" label="Unsupported normalization form." type="static">
               <p>Raised by <code>fn:normalize-unicode</code> if the requested normalization form is not
               supported by the implementation.</p>
            </error>
            <error class="CH" code="0004" label="Collation does not support collation units."
                   type="dynamic">
               <p>Raised by functions such as <code>fn:contains</code> if the requested collation does
               not operate on a character-by-character basis.</p>
            </error>
            <error class="CH" code="0005" label="Unrecognized or invalid character name."
               type="dynamic">
               <p>Raised by <code>fn:char</code> if the supplied character name is not recognized, or
                  if it represents a codepoint that is not valid in the version of XML supported by the
                  processor.</p>
            </error>
            <error class="DC" code="0001" label="No context document." type="dynamic">
               <p>Raised by <code>fn:id</code>, <code>fn:idref</code>, and <code>fn:element-with-id</code>
                  if the node that identifies the tree to be searched is a node in a tree whose root is not
                  a document node.</p>
            </error>
            <error class="DC" code="0002" label="Error retrieving resource." type="dynamic">
               <p>Raised by <code>fn:doc</code>, <code>fn:collection</code>, and <code>fn:uri-collection</code>
               to indicate that either the supplied URI cannot be dereferenced to obtain a resource, or the resource
               that is returned is not parseable as XML.</p>
            </error>
            <error class="DC" code="0003" label="Function not defined as deterministic." type="dynamic">
               <p>Raised by <code>fn:doc</code>, <code>fn:collection</code>, and <code>fn:uri-collection</code> 
                  to indicate that it is not possible to
               return a result that is guaranteed deterministic.</p>
            </error>
            <error class="DC" code="0004" label="Invalid collection URI."
                   type="dynamic">
               <p>Raised by <code>fn:collection</code> and <code>fn:uri-collection</code> 
                  if the argument is not a valid <code>xs:anyURI</code>.</p>
            </error>
            <error class="DC" code="0005" label="Invalid argument to fn:doc or fn:doc-available."
                   type="dynamic">
               <p>Raised (optionally) by <code>fn:doc</code> and <code>fn:doc-available</code> if the argument 
                  is not a valid URI reference.</p>
            </error>
            <error class="DC" code="0006" label="String passed to fn:parse-xml is not a well-formed XML document."
               type="dynamic">
               <p>Raised by <code>fn:parse-xml</code> if the supplied string is not a well-formed and namespace-well-formed XML document;
               or if DTD validation is requested and the document is not valid against its DTD.</p>
            </error>
            
            <error class="DC" code="0010" label="The processor does not support serialization."
               type="dynamic">
               <p>Raised when <code>fn:serialize</code> is called and the processor does not support serialization,
               in cases where the host language makes serialization an optional feature.</p>
            </error>
            <error class="DC" code="0011" label="String passed to fn:parse-html is not a well-formed HTML document."
                   type="dynamic">
               <p>Raised by <code>fn:parse-html</code> if the supplied string is not a well-formed HTML document.</p>
            </error>
            <error class="DC" code="0012" label="Unsupported HTML parser option."
                   type="dynamic">
               <p>Raised by <code>fn:parse-html</code> if a key passed to <code>$options</code>, or its value,
                  is not supported by the implementation.</p>
            </error>
			<error class="DF" code="1280" label="Invalid decimal format name."
                   type="dynamic">
               <p>This error is raised if the decimal format name supplied to <code>fn:format-number</code> is not a valid QName,
			   or if the prefix in the QName is undeclared, or if there is no decimal format in the static context with
			   a matching name.</p>
            </error>
            
			<error class="DF" code="1310" label="Invalid decimal format picture string."
                   type="dynamic">
               <p>This error is raised if the picture string supplied to <code>fn:format-number</code> or 
                  <code>fn:format-integer</code> has invalid syntax.</p>
            </error>
            <error class="DT" code="0001" label="Overflow/underflow in date/time operation."
                   type="dynamic">
               <p>Raised when casting to date/time datatypes, or performing arithmetic with date/time values, if
               arithmetic overflow or underflow occurs.</p> 
            </error>
            <error class="DT" code="0002" label="Overflow/underflow in duration operation."
                   type="dynamic">
               <p>Raised when casting to duration datatypes, or performing arithmetic with duration values, if
                  arithmetic overflow or underflow occurs.</p> 
            </error>
            <error class="DT" code="0003" label="Invalid timezone value." type="dynamic">
               <p>Raised by <code>adjust-date-to-timezone</code> and related functions if the supplied timezone is invalid.</p> 
            </error>
			<error class="FD" code="1340" label="Invalid date/time formatting parameters."
                   type="dynamic">
               <p>This error is raised if the picture string or calendar supplied to <code>fn:format-date</code>, <code>fn:format-time</code>, 
			   or <code>fn:format-dateTime</code> has invalid syntax.</p>
            </error>
			<error class="FD" code="1350" label="Invalid date/time formatting component."
                   type="dynamic">
               <p>This error is raised if the picture string supplied to <code>fn:format-date</code> 
			   selects a component that is not present in a date, or if the picture string supplied to <code>fn:format-time</code> 
			   selects a component that is not present in a time.</p>
            </error>
            
            <error class="JS" code="0001" label="JSON syntax error." type="dynamic">
               <p>Raised by functions such as <code>fn:json-doc</code>, <code>fn:parse-json</code> 
                  or <code>fn:json-to-xml</code> 
                  if the string supplied as input does not conform to the JSON grammar (optionally with implementation-defined extensions).</p>
            </error>
            
            <error class="JS" code="0003" label="JSON duplicate keys." type="dynamic">
               <p>Raised by functions such as <code>map:merge</code>, <code>fn:json-doc</code>, 
                  <code>fn:parse-json</code> or <code>fn:json-to-xml</code> 
                  if the input contains duplicate keys, when the chosen policy is to reject duplicates.</p>
            </error>
            
            <error class="JS" code="0004" label="JSON: not schema-aware." type="dynamic">
               <p>Raised by <code>fn:json-to-xml</code> if validation 
                  is requested when the processor does not support schema validation or typed nodes.</p>
            </error>
            
            <error class="JS" code="0005" label="Invalid options." type="dynamic">
               <p>Raised by functions such as <code>map:merge</code>, <code>fn:parse-json</code>,
                  and <code>fn:xml-to-json</code> if the <code>$options</code> map contains an invalid entry.</p>
            </error>
            
            <error class="JS" code="0006" label="Invalid XML representation of JSON." type="dynamic">
               <p>Raised by <code>fn:xml-to-json</code> if the XML input does not
                  conform to the rules for the XML representation of JSON.</p>
            </error>
            
            <error class="JS" code="0007" label="Bad JSON escape sequence." type="dynamic">
               <p>Raised by <code>fn:xml-to-json</code> if the XML input uses the attribute
                  <code>escaped="true"</code> or <code>escaped-key="true"</code>, and the corresponding string
                  or key contains an invalid JSON escape sequence.</p>
            </error>
            
            
            
            <error class="NS" code="0004" label="No namespace found for prefix." type="dynamic">
               <p>Raised by <code>fn:resolve-QName</code> and analogous functions if a supplied QName has a 
                  prefix that has no binding to a namespace.</p>
            </error>
            <error class="NS" code="0005" label="Base-uri not defined in the static context."
                   type="dynamic">
               <p>Raised by <code>fn:resolve-uri</code> if no base URI is available for resolving a relative URI.</p>
            </error>
            
            <error class="QM" code="0001" label="Module URI is a zero-length string."
               type="dynamic">
               <p>Raised by <code>fn:load-xquery-module</code> if the supplied module URI is zero-length.</p>
            </error>
            <error class="QM" code="0002" label="Module URI not found."
               type="dynamic">
               <p>Raised by <code>fn:load-xquery-module</code> if no module can be found with the supplied module URI.</p>
            </error>
            <error class="QM" code="0003" label="Static error in dynamically loaded XQuery module."
               type="dynamic">
               <p>Raised by <code>fn:load-xquery-module</code> if a static error 
                  (including a statically detected type error) is encountered when processing the library module.</p>
            </error>
            
            <error class="QM" code="0005" label="Parameter for dynamically loaded XQuery module has incorrect type."
               type="dynamic">
               <p>Raised by <code>fn:load-xquery-module</code> if a value is supplied for the initial context 
                  item or for an external variable, and the value does not conform to the required
                  type declared in the dynamically loaded module.</p>
            </error>
            <error class="QM" code="0006" label="No suitable XQuery processor available."
               type="dynamic">
               <p>Raised by <code>fn:load-xquery-module</code> if no XQuery processor is available supporting the requested
                  XQuery version (or if none is available at all).</p>
            </error>
            
    
            <error class="RG" code="0001" label="Invalid value for cast/constructor."
                   type="dynamic">
               <p>A general-purpose error raised when casting, if a cast between two datatypes is allowed in principle,
               but the supplied value cannot be converted: for example when attempting to cast the string "nine" to an integer.</p>
            </error>
            <error class="RG" code="0002" label="Invalid argument to fn:resolve-uri()."
                   type="dynamic">
               <p>Raised when either argument to <code>fn:resolve-uri</code> is not a valid URI/IRI.</p>
            </error>
            <error class="RG" code="0003"
                   label="fn:zero-or-one called with a sequence containing more than one item."
                   type="dynamic">
               <p>Raised by <code>fn:zero-or-one</code> if the supplied value contains more than one item.</p> 
            </error>
            <error class="RG" code="0004"
                   label="fn:one-or-more called with a sequence containing no items."
                   type="dynamic"> 
               <p>Raised by <code>fn:one-or-more</code> if the supplied value is an empty sequence.</p>
            </error>
            <error class="RG" code="0005"
                   label="fn:exactly-one called with a sequence containing zero or more than one item."
                   type="dynamic">
               <p>Raised by <code>fn:exactly-one</code> if the supplied value is not a singleton sequence.</p>
            </error>
            <error class="RG" code="0006" label="Invalid argument type." type="static">
               <p>Raised by functions such as <code>fn:max</code>, <code>fn:min</code>, <code>fn:avg</code>, <code>fn:sum</code>
               if the supplied sequence contains values inappropriate to this function.</p> 
            </error>
            <error class="RG" code="0008"
                   label="The two arguments to fn:dateTime have inconsistent timezones."
                   type="dynamic">
               <p>Raised by <code>fn:dateTime</code> if the two arguments both have timezones and the timezones are different.</p>
            </error>
            <error class="RG" code="0009"
                   label="Error in resolving a relative URI against a base URI in fn:resolve-uri."
                   type="dynamic">
               <p>A catch-all error for <code>fn:resolve-uri</code>, recognizing that the implementation can choose between a variety
               of algorithms and that some of these may fail for a variety of reasons.</p>
            </error>
            <error class="RG" code="0010"
               label="Invalid date/time."
               type="dynamic">
               <p>Raised when the input to <code>fn:parse-ietf-date</code> does not match the prescribed
                  grammar, or when it represents an invalid date/time such as 31 February.</p>
            </error>
            <error class="RX" code="0001" label="Invalid regular expression flags." type="static">
               <p>Raised by regular expression functions such as <code>fn:matches</code> and <code>fn:replace</code> if the
               regular expression flags contain a character other than <code>i</code>, <code>m</code>, <code>q</code>, <code>s</code>, or <code>x</code>.</p>
            </error>
            <!--End of text replaced by erratum E25-->
            <error class="RX" code="0002" label="Invalid regular expression." type="dynamic">
               <p>Raised by regular expression functions such as <code>fn:matches</code> and <code>fn:replace</code> if the
                  regular expression is syntactically invalid.</p>
            </error>
            <error class="RX" code="0003" label="Regular expression matches zero-length string."
                   type="dynamic">
               <p>For functions such as <code>fn:replace</code> and <code>fn:tokenize</code>, raises an error if
               the supplied regular expression is capable of matching a zero length string.</p>
            </error>
            <error class="RX" code="0004" label="Invalid replacement string." type="dynamic">
               <p>Raised by <code>fn:replace</code> to report errors in the replacement string.</p>
            </error>
            <error class="RX" code="0005" label="Incompatible arguments for fn:replace()." type="dynamic">
               <p>Raised by <code>fn:replace</code> if both the <code>$replacement</code> 
                  and <code>$action</code> arguments are supplied.</p>
            </error>
			   <error class="TY" code="0012" label="Argument to fn:data() contains a node that does not have a typed value."
                   type="dynamic">
               <p>Raised by <code>fn:data</code>, or by implicit atomization, if applied to a node with no typed value,
               the main example being an element validated against a complex type that defines it to have element-only content.</p>
			   </error>
            <error class="TY" code="0013" label="The argument to fn:data() contains a function item."
               type="dynamic">
               <p>Raised by <code>fn:data</code>, or by implicit atomization, if the sequence to be atomized contains
                a function item.</p>
            </error>
            <error class="TY" code="0014" label="The argument to fn:string() is a function item."
               type="dynamic">
               <p>Raised by <code>fn:string</code>, or by implicit string conversion, if the input sequence contains
                  a function item.</p>
            </error>
            <error class="TY" code="0015" label="An argument to fn:deep-equal() contains a function item."
               type="dynamic">
               <p>Raised by <code>fn:deep-equal</code> if either input sequence contains a
                  function item.</p> 
            </error>
            <error class="UT" code="1170" label="Invalid $href argument to fn:unparsed-text() (etc.)"
               type="dynamic">
               <p>A dynamic error is raised if the <code>$href</code> argument
                  contains a fragment identifier, or if it cannot be used to retrieve a resource
                  containing text.</p>
            </error>
            <error class="UT" code="1190" label="Cannot decode resource retrieved by fn:unparsed-text() (etc.)"
               type="dynamic">
               <p>A dynamic error is raised if the retrieved
                  resource contains octets that cannot be decoded into Unicode <termref def="character"
                     >characters</termref> using the specified encoding, or if the resulting characters
                  are not permitted XML characters. This includes the case where the processor 
                  does not support the requested encoding.</p>
            </error>
            <error class="UT" code="1200" label="Cannot infer encoding of resource retrieved by fn:unparsed-text() (etc.)"
               type="dynamic">
               <p>A dynamic error is raised if
                  <code>$encoding</code> is absent and the processor cannot infer the encoding using external information and the
                  encoding is not UTF-8.</p>
            </error>
            <error class="XT" code="0001" label="No suitable XSLT processor available"
               type="dynamic">
               <p>A dynamic error is raised if no XSLT processor suitable for evaluating a call on <function>fn:transform</function>
                  is available.</p>
            </error>
            <error class="XT" code="0002" label="Invalid parameters to XSLT transformation"
               type="dynamic">
               <p>A dynamic error is raised if the parameters supplied to <code>fn:transform</code> are invalid, for example
                  if two mutually exclusive parameters are supplied. If a suitable XSLT error code is available (for example in the
               case where the requested <code>initial-template</code> does not exist in the stylesheet), that error code should
               be used in preference.</p>
            </error>
            <error class="XT" code="0003" label="XSLT transformation failed"
               type="dynamic">
               <p>A dynamic error is raised if an XSLT transformation invoked using <code>fn:transform</code> fails with a
                  static or dynamic error. The XSLT error code is used if available; this error code provides a fallback when no XSLT
                  error code is returned, for example because the processor is an XSLT 1.0 processor.</p>
            </error>
            <error class="XT" code="0004" label="XSLT transformation has been disabled"
               type="dynamic">
               <p>A dynamic error is raised if the <code>fn:transform</code> function is invoked when XSLT transformation (or a specific
                  transformation option) has been disabled for security or other reasons.</p>
            </error>
            
            <error class="XT" code="0006" label="XSLT output contains non-accepted characters"
               type="dynamic">
               <p>A dynamic error is raised if the result of the <code>fn:transform</code> function contains characters available
                  only in XML 1.1 and the calling processor cannot handle such characters.</p>
            </error>
            

         </error-list>
      </div1>
      
      <div1 id="schemata">
         <head>Schemas</head>
         <p>Two functions in this specification, <code>fn:analyze-string</code> and
         <code>fn:json-to-xml</code>, produce results in the form of an XDM node tree that must conform
         to a specified schema. In both cases the elements in the result are in the namespace 
         <code>http://www.w3.org/2005/xpath-functions</code>, which is therefore the target namespace
         of the relevant schema document.</p>
         
         <p>The schema for this namespace is organized as three schema documents. The first is a simple
         umbrella document that includes the other two. A copy can be found at 
            <loc href="xpath-functions.xsd">xpath-functions.xsd</loc>:</p>
         
         <?doc xpath-functions.xsd?>
         
         <div2 id="schema-for-analyze-string">
            <head>Schema for the result of <code>fn:analyze-string</code></head>
            <p>This schema describes the output of the function <code>fn:analyze-string</code>.</p>
            <p>The schema is reproduced below, and can also be found in <loc href="analyze-string.xsd">analyze-string.xsd</loc>:</p>
            <?doc analyze-string.xsd?>
         </div2>
         <div2 id="schema-for-json">
            <head>Schema for the result of <code>fn:json-to-xml</code></head>
            <p>This schema describes the output of the function <code>fn:json-to-xml</code>, and the input to the
            function <code>fn:xml-to-json</code>. </p>
            <p>The schema is reproduced below, and can also be found in <loc href="schema-for-json.xsd">schema-for-json.xsd</loc>:</p>
            <?doc schema-for-json.xsd?>
         </div2>
      </div1> 
      
      <inform-div1 id="other-functions">
         <head>Other Functions</head>
         <p>This Appendix describes some sources of functions that fall outside the scope of the function library defined
         in this specification. It includes both function specifications and function implementations. Inclusion of a function
         in this appendix does not constitute any kind of recommendation or endorsement; neither is omission from this appendix
         to be construed negatively. This Appendix does not attempt to give any information about licensing arrangements for
         these function specifications or implementations.</p>
         
         <div2 id="functions-in-other-w3c-specs">
            <head>XPath Functions Defined in Other W3C Recommendations</head>
            
            <p>A number of W3C Recommendations make use of XPath, and in some cases such Recommmendations define additional
            functions to be made available when XPath is used in a specific host language.</p>
            
            <div3 id="functions-defined-in-XSLT">
               <head>Functions Defined in XSLT</head>
               <p>The various versions of XSLT have all included additional functions intended to be available only when XPath
               is used within XSLT, and not in other host language environments. Some of these functions were originally defined
               in XSLT, and subsequently migrated into the core function library defined in this specification.</p>
               <p>Generally, the reason that functions have been defined in XSLT rather than in the core library has been that
               they required additional static or dynamic context information.</p>
               <p>XSLT-defined functions share the core namespace <code>http://www.w3.org/2005/xpath-functions</code> (but in XPath 1.0
               and XSLT 1.0, no namespace was defined for these functions).</p>
               <p>The conformance rules for XSLT 4.0 require implementations to support either XPath 3.0 or XPath 3.1. Some of the
               new functions in XPath 3.1, however, must be supported by all XSLT 4.0 implementations whether or not they implement
               other parts of XPath 3.1.</p>
               <p>The following table lists all functions that have been defined in XSLT 1.0, 2.0, or 3.0, and summarizes their status.</p>
               
               <table role="data">
                  <thead>
                     <tr>
                        <th>Function name</th>
                        <th>Availability</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr><td>fn:accumulator-after</td><td>XSLT 3.0 only</td></tr>
                     <tr><td>fn:accumulator-before</td><td>XSLT 3.0 only</td></tr>
                     <tr><td>fn:available-system-properties</td><td>XSLT 3.0 only</td></tr>
                     <tr><td>fn:collation-key</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                     <tr><td>fn:copy-of</td><td>XSLT 3.0 only</td></tr>
                     <tr><td>fn:current</td><td>XSLT 1.0, 2.0, and 3.0</td></tr>
                     <tr><td>fn:current-group</td><td>XSLT 2.0 and 3.0</td></tr>
                     <tr><td>fn:current-grouping-key</td><td>XSLT 2.0 and 3.0</td></tr>
                     <tr><td>fn:current-merge-group</td><td>XSLT 3.0 only</td></tr>
                     <tr><td>fn:current-merge-key</td><td>XSLT 3.0 only</td></tr>
                     <tr><td>fn:current-output-uri</td><td>XSLT 3.0 only</td></tr>
                     <tr><td>fn:document</td><td>XSLT 1.0, 2.0, and 3.0</td></tr>
                     <tr><td>fn:element-available</td><td>XSLT 1.0, 2.0, and 3.0</td></tr>
                     <tr><td>fn:format-date</td><td>XSLT 2.0; migrated to XPath 3.0 and 3.1</td></tr>
                     <tr><td>fn:format-dateTime</td><td>XSLT 2.0; migrated to XPath 3.0 and 3.1</td></tr>
                     <tr><td>fn:format-number</td><td>XSLT 1.0 and 2.0; migrated to XPath 3.0 and 3.1</td></tr>
                     <tr><td>fn:format-time</td><td>XSLT 2.0; migrated to XPath 3.0 and 3.1</td></tr>
                     <tr><td>fn:function-available</td><td>XSLT 1.0, 2.0, and 3.0</td></tr>
                     <tr><td>fn:generate-id</td><td>XSLT 1.0 and 2.0; migrated to XPath 3.0 and 3.1</td></tr>
                     <tr><td>fn:json-to-xml</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                     <tr><td>fn:key</td><td>XSLT 1.0, 2.0, and 3.0</td></tr>                    
                     <tr><td>fn:regex-group</td><td>XSLT 2.0 and 3.0</td></tr>
                     <tr><td>fn:snapshot</td><td>XSLT 3.0 only</td></tr>
                     <tr><td>fn:stream-available</td><td>XSLT 3.0 only</td></tr>
                     <tr><td>fn:system-property</td><td>XSLT 1.0, 2.0, and 3.0</td></tr>
                     <tr><td>fn:type-available</td><td>XSLT 2.0 and 3.0</td></tr>
                     <tr><td>fn:unparsed-entity-public-id</td><td>XSLT 2.0 and 3.0</td></tr>
                     <tr><td>fn:unparsed-entity-uri</td><td>XSLT 1.0, 2.0, and 3.0</td></tr>
                     <tr><td>fn:unparsed-text</td><td>XSLT 2.0; migrated to XPath 3.0 and 3.1</td></tr>
                     <tr><td>fn:xml-to-json</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>                    
                     <tr><td>map:contains</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                     <tr><td>map:entry</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                     <tr><td>map:find</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                     <tr><td>map:for-each</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                     <tr><td>map:get</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                     <tr><td>map:keys</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                     <tr><td>map:merge</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                     <tr><td>map:put</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                     <tr><td>map:remove</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                     <tr><td>map:size</td><td>Common to XSLT 3.0 and XPath 3.1</td></tr>
                  </tbody>
               </table>
               
            </div3>
            <div3 id="functions-defined-in-XForms">
               <head>Functions Defined in XForms</head>
               
               <p>XForms 1.1 is based on XPath 1.0. It adds the following functions to the set defined in XPath 1.0, using the same
               namespace:</p>
               
               <p><code>boolean-from-string</code>, <code>is-card-number</code>, <code>avg</code>, <code>min</code>, <code>max</code>, 
                  <code>count-non-empty</code>, <code>index</code>, <code>power</code>, <code>random</code>, <code>compare</code>,
                  <code>if</code>, <code>property</code>, 
               <code>digest</code>, <code>hmac</code>, <code>local-date</code>, <code>local-dateTime</code>, <code>now</code>, 
                  <code>days-from-date</code>, <code>days-to-date</code>, <code>seconds-from-dateTime</code>, <code>seconds-to-dateTime</code>,
               <code>adjust-dateTime-to-timezone</code>, <code>seconds</code>, <code>months</code>, <code>instance</code>, 
                  <code>current</code>, <code>id</code>, <code>context</code>, <code>choose</code>, <code>event</code>.</p>
               
               <p>XForms 2.0 was first published as a W3C Working Draft, and subsequently as a W3C Community Group specification. These
               draft specifications do not include any additional functions beyond those in the core XPath specification.</p>
            </div3>
            <div3 id="xquery-update">
               <head>Function Defined in XQuery Update 1.0</head>
               <p>The XQuery Update 1.0 specification defines one additional function in the core namespace
                  <code>http://www.w3.org/2005/xpath-functions</code>, namely <code role="example">fn:put</code>. This function can be used
               to write a document to external storage. It is thus unusual in that it has side-effects; the XQuery Update 1.0
               specification defines semantics for updating expressions including this function.</p>
               <p>Although XQuery Update 1.0 is defined as an extension of XQuery 1.0, a number of implementors have adapted it,
               in a fairly intuitive way, to work with later versions of XQuery. At the time of this publication, later versions of the
               XQuery Update specification remain at Working Draft status.</p>
            </div3>
         </div2>       
         <div2 id="functions-defined-by-community-groups">
            <head>Functions Defined by Community Groups</head>
            <p>A number of community groups, with varying levels of formal organization, have defined specifications for
            additional function libraries to augment the core functions defined in this specification. Many of the resulting
            function specifications have implementations available for popular XPath, XQuery, and XSLT processors, though
            the level of support is highly variable.</p>
            
            <p>The first such group was EXSLT. This activity was primarily concerned with augmenting the capability of
            XSLT 1.0, and many of its specifications were overtaken by core functions that became available in XPath 2.0.
            EXSLT defined a number of function modules covering:</p>
            <slist>
               <sitem>Dates and Times</sitem>
               <sitem>Dynamic XPath Evaluation</sitem>
               <sitem>Common (containing most notably the widely used <code>node-set</code> function)</sitem>
               <sitem>Math (<code>max</code>, <code>min</code>, <code>abs</code>, and trigonometric functions)</sitem>
               <sitem>Random Number Generation</sitem>
               <sitem>Regular Expressions</sitem>
               <sitem>Sets (operations on sets of nodes including set intersection and difference)</sitem>
               <sitem>String Manipulation (tokenize, replace, join and split, etc.)</sitem>
            </slist>
            <p>Specifications from the EXSLT group can be found at <bibref ref="exslt"/>.</p>
            
            <p>A renewed attempt to define additional function libraries using XPath 2.0 as its baseline formed
            under the name EXPath. Again, the specifications are in various states of maturity and stability, and
            implementation across popular processors is patchy. At the time of this publication the function libraries that
            exist in stable published form include:</p>
            
            <slist>
               <sitem>Binary (functions for manipulating binary data)</sitem>
               <sitem>File Handling (reading and writing files)</sitem>
               <sitem>Geospatial (handling of geographic data)</sitem>
               <sitem>HTTP Client (sending HTTP requests)</sitem>
               <sitem>ZIP Facility (reading and creating ZIP files or similar archives)</sitem>
            </slist>
            
            <p>The EXPath community has also been engaged in other related projects, such as defining packaging
            standards for distribution of XSLT/XQuery components, and tools for unit testing. Its specifications
            can be found at <bibref ref="expath"/>.</p>
            
            <p>A third activity has operated under the name EXQuery, which as the name suggests has focused
            on extensions to XQuery. EXQuery has published a single specification, RestXQ, which is primarily a 
            system of function annotations allowing XQuery functions to act as endpoints for RESTful services.
            It also includes some simple functions to assist with the creation of such services. The RestXQ specification
            can be found at <bibref ref="exquery"/>.</p>
         </div2>
         

         <div2 id="functx-library">
               <head>The FunctX Library</head>

               <p>Many useful functions can be written in XSLT or XQuery, and in this case the function implementations
                  themselves can be portable across different XSLT and XQuery processors. This section describes one such library.</p>
               
               
               <p>FunctX is an open-source library of general-purpose functions, supplied in the form of XQuery 1.0 and XSLT 2.0
               implementations. It contains over a hundred functions. Typical examples of these functions are:</p>
               
               <slist>
                  <sitem>Test whether a string is all-whitespace</sitem>
                  <sitem>Trim leading and trailing whitespace</sitem>
                  <sitem>Test whether all the values in a sequence are distinct</sitem>
                  <sitem>Capitalize the first character of a string</sitem>
                  <sitem>Change the namespace of all elements in a tree</sitem>
                  <sitem>Get the number of days in a given month</sitem>
                  <sitem>Get the first or last day in a given month</sitem>
                  <sitem>Get the date of the preceding or following day</sitem>
                  <sitem>Ask whether an element has element-only, mixed, or simple content</sitem>
                  <sitem>Find the position of a node in a sequence</sitem>
                  <sitem>Count words in a string</sitem>
               </slist>
               
               <p>The FunctX library can be found at <bibref ref="functx"/>.</p>
            </div2>
         
         <div2 id="examples">
            <head>Illustrative user-written functions</head>
         <p> Certain functions that were proposed for inclusion in this function library have
                been excluded on the basis that it is straightforward for users to implement these
                functions themselves using XSLT 2.0 or XQuery 1.0.</p>
         <p>This Appendix provides sample implementations of some of these functions.</p>
         <p> To emphasize that these functions are examples of functions that vendors may write,
                their names carry the prefix 'eg'. Vendors are free to define such functions in any
                namespace. A group of vendors may also choose to create a collection of such useful
                functions and put them in a common namespace.</p>
         <div3 id="if-empty-or-absent">
            <head>eg:if-empty</head>
            <p>In some situations, users may want to provide default values for missing
                    information that may be signaled by elements that are omitted, have no value or
                    have the empty sequence as their value. For example, a missing middle initial
                    may be indicated by omitting the element or a non-existent bonus signaled with
                    an empty sequence. This section includes examples of functions that provide such
                    defaults. These functions return <code>xs:anyAtomicType*</code>. Users may want
                    to write functions that return more specific types.</p>
            <div4 id="if-empty">
               <head>eg:if-empty</head>
               <example role="signature">
                  <proto role="example" name="if-empty" return-type="xs:anyAtomicType*"
                         prefix="eg"
                         returnEmptyOk="no"
                         isSpecial="yes"
                         returnSeq="no"
                         returnVaries="no"
                         isSchema="no"
                         isDatatype="no"
                         isOp="no">
                     <arg name="node" type="node()" emptyOk="yes"/>
                     <arg name="value" type="xs:anyAtomicType"/>
                  </proto>
               </example>
               <p> If the first argument is the empty sequence or an element without simple or
                        complex content, <code>eg:if-empty()</code> returns the second argument; otherwise, it
                        returns the content of the first argument.</p>
               <p>XSLT implementation</p>
               <eg xml:space="preserve"><![CDATA[
<xsl:function name="eg:if-empty" as="xs:anyAtomicType*">
  <xsl:param name="node" as="node()?"/>
  <xsl:param name="value" as="xs:anyAtomicType"/>
  <xsl:sequence select="($node[child::node()], $value)[1]"/>
</xsl:function>]]></eg>
               <p>XQuery implementation</p>
               <eg xml:space="preserve"><![CDATA[
declare function eg:if-empty (
  $node as node()?,
  $value as xs:anyAtomicType) as xs:anyAtomicType* 
{
  ($node[child::node()], $value)[1]
}
                    ]]></eg>
            </div4>
            <div4 id="if-absent">
               <head>eg:if-absent</head>
               <example role="signature">
                  <proto role="example" name="if-absent" return-type="xs:anyAtomicType*"
                     prefix="eg"
                         returnEmptyOk="no"
                         isSpecial="yes"
                         returnSeq="no"
                         returnVaries="no"
                         isSchema="no"
                         isDatatype="no"
                         isOp="no">
                     <arg name="node" type="node()" emptyOk="yes"/>
                     <arg name="value" type="xs:anyAtomicType"/>
                  </proto>
               </example>
               <p> If the first argument is the empty sequence, <code>eg:if-absent()</code> returns the second
                        argument; otherwise, it returns the content of the first argument.</p>
               <p>XSLT implementation</p>
               <eg xml:space="preserve"><![CDATA[
<xsl:function name="eg:if-absent" as="xs:anyAtomicType*">
  <xsl:param name="node" as="node()?"/>
  <xsl:param name="value" as="xs:anyAtomicType"/>
  <xsl:sequence select="($node, $value)[1]"/>
</xsl:function>]]></eg>
               <p>XQuery implementation</p>
               <eg xml:space="preserve"><![CDATA[
declare function eg:if-absent (
  $node as node()?,
  $value as xs:anyAtomicType) as xs:anyAtomicType* 
{
  ($node, $value)[1]
}
                    ]]></eg>
            </div4>
         </div3>
         <div3 id="union-intersect-except-on-values">
            <head>Union, intersection and difference on sequences of values</head>
            <div4 id="value-union">
               <head>eg:value-union</head>
               <example role="signature">
                  <proto role="example" name="value-union" return-type="xs:anyAtomicType*"
                     prefix="eg"
                         returnEmptyOk="no"
                         isSpecial="yes"
                         returnSeq="no"
                         returnVaries="no"
                         isSchema="no"
                         isDatatype="no"
                         isOp="no">
                     <arg name="arg1" type="xs:anyAtomicType*"/>
                     <arg name="arg2" type="xs:anyAtomicType*"/>
                  </proto>
               </example>
               <p> This function returns a sequence containing all the distinct items in <code>$arg1</code>
                        and <code>$arg2</code>, in an arbitrary order.</p>
               <p>XSLT implementation</p>
               <eg xml:space="preserve"><![CDATA[
<xsl:function name="eg:value-union" as="xs:anyAtomicType*">
  <xsl:param name="arg1" as="xs:anyAtomicType*"/>
  <xsl:param name="arg2" as="xs:anyAtomicType*"/>
  <xsl:sequence
     select="fn:distinct-values(($arg1, $arg2))"/> 
</xsl:function>]]></eg>
               <p>XQuery implementation</p>
               <eg xml:space="preserve"><![CDATA[
declare function eg:value-union (
  $arg1 as xs:anyAtomicType*,
  $arg2 as xs:anyAtomicType*) as xs:anyAtomicType* 
{
  fn:distinct-values(($arg1, $arg2))
}
                    ]]></eg>
            </div4>
            <div4 id="value-intersect">
               <head>eg:value-intersect</head>
               <example role="signature">
                  <proto role="example" name="value-intersect" return-type="xs:anyAtomicType*"
                     prefix="eg"
                         returnEmptyOk="no"
                         isSpecial="yes"
                         returnSeq="no"
                         returnVaries="no"
                         isSchema="no"
                         isDatatype="no"
                         isOp="no">
                     <arg name="arg1" type="xs:anyAtomicType*"/>
                     <arg name="arg2" type="xs:anyAtomicType*"/>
                  </proto>
               </example>
               <p> This function returns a sequence containing all the distinct items that
                        appear in both <code>$arg1</code> and <code>$arg2</code>, in an arbitrary order.</p>
               <p>XSLT implementation&gt;</p>
               <eg xml:space="preserve"><![CDATA[
<xsl:function name="eg:value-intersect" as="xs:anyAtomicType*">
  <xsl:param name="arg1" as="xs:anyAtomicType*"/>
  <xsl:param name="arg2" as="xs:anyAtomicType*"/>
  <xsl:sequence 
     select="fn:distinct-values($arg1[.=$arg2])"/>
</xsl:function>]]></eg>
               <p>XQuery implementation</p>
               <eg xml:space="preserve"><![CDATA[
declare function eg:value-intersect (
  $arg1 as xs:anyAtomicType*,
  $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* 
{
  fn:distinct-values($arg1[.=$arg2])
}
                    ]]></eg>
            </div4>
            <div4 id="value-except">
               <head>eg:value-except</head>
               <example role="signature">
                  <proto role="example" name="value-except" return-type="xs:anyAtomicType*"
                     prefix="eg"
                         returnEmptyOk="no"
                         isSpecial="yes"
                         returnSeq="no"
                         returnVaries="no"
                         isSchema="no"
                         isDatatype="no"
                         isOp="no">
                     <arg name="arg1" type="xs:anyAtomicType*"/>
                     <arg name="arg2" type="xs:anyAtomicType*"/>
                  </proto>
               </example>
               <p> This function returns a sequence containing all the distinct items that
                        appear in <code>$arg1</code> but not in <code>$arg2</code>, in an arbitrary order.</p>
               <p>XSLT implementation</p>
               <eg xml:space="preserve"><![CDATA[
<xsl:function name="eg:value-except" as="xs:anyAtomicType*">
  <xsl:param name="arg1" as="xs:anyAtomicType*"/>
  <xsl:param name="arg2" as="xs:anyAtomicType*"/>
  <xsl:sequence
     select="fn:distinct-values($arg1[not(.=$arg2)])"/>
</xsl:function>]]></eg>
               <p>XQuery implementation</p>
               <eg xml:space="preserve"><![CDATA[
declare function eg:value-except (
  $arg1 as xs:anyAtomicType*,
  $arg2 as xs:anyAtomicType*) as xs:anyAtomicType* 
{
  fn:distinct-values($arg1[not(.=$arg2)])
}]]></eg>
            </div4>
         </div3>
         <div3 id="index-of-node">
            <head>eg:index-of-node</head>
            <example role="signature">
               <proto role="example" name="index-of-node" return-type="xs:integer*"
                  prefix="eg"
                      returnEmptyOk="no"
                      isSpecial="yes"
                      returnSeq="no"
                      returnVaries="no"
                      isSchema="no"
                      isDatatype="no"
                      isOp="no">
                  <arg name="seq" type="node()*"/>
                  <arg name="search" type="node()"/>
               </proto>
            </example>
            <p>This function returns a sequence of positive integers giving the positions within
                    the sequence <code>$seq</code> of nodes that are identical to <code>$search</code>.</p>
            <p>The nodes in the sequence <code>$seq</code> are compared with
               <code>$search</code> under the rules for the <code>is</code> operator. If a
                    node compares identical, then the position of that node in the sequence
                    <code>$seq</code> is included in the result.</p>
            <p>If the value of <code>$seq</code> is the empty sequence, or if no node in
               <code>$seq</code> matches <code>$search</code>, then the empty sequence is returned.</p>
            <p>The index is 1-based, not 0-based.</p>
            <p>The result sequence is in ascending numeric order.</p>
            <p>XSLT implementation</p>
            <eg xml:space="preserve"><![CDATA[
<xsl:function name="eg:index-of-node" as="xs:integer*">
  <xsl:param name="seq" as="node()*"/>
  <xsl:param name="search" as="node()"/>
  <xsl:sequence select="filter(
      1 to count($seq),
      function($i as xs:integer) as xs:boolean {$seq[$i] is $search}  
    )
  "/>
</xsl:function>]]></eg>
            <p>XQuery implementation</p>
            <eg xml:space="preserve"><![CDATA[
declare function eg:index-of-node($seq as node()*, $search as node()) as xs:integer* 
{
    fn:filter(
      1 to fn:count($seq),
      function($i as xs:integer) as xs:boolean {$seq[$i] is $search}   
    )

}]]></eg>
            <p>An alternative implementation, which might be faster in systems where indexing into a sequence
            is slow, is:</p>
            <eg xml:space="preserve"><![CDATA[
declare function eg:index-of-node($seq as node()*, $search as node()) as xs:integer* 
{
  fn:for-each-pair(
     $seq, 1 to fn:count($seq),
     function($node, $index) {
        if($node is $search) then $index else () 
     })
}]]></eg>           
         </div3>
         <div3 id="string-pad">
            <head>eg:string-pad</head>
            <example role="signature">
               <proto role="example" name="string-pad" return-type="xs:string" returnEmptyOk="no"
                  prefix="eg"
                      isSpecial="yes"
                      returnSeq="no"
                      returnVaries="no"
                      isSchema="no"
                      isDatatype="no"
                      isOp="no">
                  <arg name="padString" type="xs:string" emptyOk="yes"/>
                  <arg name="padCount" type="xs:integer"/>
               </proto>
            </example>
            <p>Returns a <code>xs:string</code> consisting of a given number of copies of an
                    <code>xs:string</code> argument concatenated together.</p>
            <p>XSLT implementation</p>
            <eg xml:space="preserve"><![CDATA[
<xsl:function name="eg:string-pad" as="xs:string">
  <xsl:param name="padString" as="xs:string?"/>
  <xsl:param name="padCount" as="xs:integer"/>
  <xsl:sequence select="
     fn:string-join(1 to $padCount ! $padString)"/>
 </xsl:function>
                ]]></eg>
            <p>XQuery implementation</p>
            <eg xml:space="preserve"><![CDATA[
declare function eg:string-pad (
  $padString as xs:string?,
  $padCount as xs:integer) as xs:string 
{
   fn:string-join(1 to $padCount ! $padString)
}
                ]]></eg>
            <p>This returns the zero-length string if <code>$padString</code> is the empty
                    sequence, which is consistent with the general principle that if an
                    <code>xs:string</code> argument is the empty sequence it is treated as if it
                    were the zero-length string.</p>
         </div3>
         <div3 id="func-distinct-nodes-stable">
            <head>eg:distinct-nodes-stable</head>
            <example role="signature">
               <proto role="example" name="distinct-nodes-stable" return-type="node()*"
                  prefix="eg"
                      returnEmptyOk="no"
                      isSpecial="no"
                      returnSeq="no"
                      returnVaries="no"
                      isSchema="no"
                      isDatatype="no"
                      isOp="no">
                  <arg name="arg" type="node()*"/>
               </proto>
            </example>
            <p>This function illustrates one possible implementation of a distinct-nodes
                    function. It removes duplicate nodes by identity, preserving the first
                    occurrence of each node.</p>
            <p>XPath</p>
            <eg xml:space="preserve"><![CDATA[$arg[empty(subsequence($arg, 1, position()-1) intersect .)]
                ]]></eg>
            <p>XSLT implementation</p>
            <eg xml:space="preserve"><![CDATA[
<xsl:function name="eg:distinct-nodes-stable" as="node()*">
  <xsl:param name="arg" as="node()*"/>
  <xsl:sequence select=""
    fn:fold-left(
      $arg, (),
      function($foundSoFar as node()*, $this as node()) as node()* {
        if ($foundSoFar intersect $this)
        then $foundSoFar
        else ($foundSoFar, $this)
      })
  "/> 
</xsl:function>
                ]]></eg>
            <p>XQuery implementation</p>
            <eg xml:space="preserve"><![CDATA[
declare function eg:distinct-nodes-stable ($arg as node()*) as node()* { 
  fn:fold-left(
      $arg, (),
      function($foundSoFar as node()*, $this as node()) as node()* {
        if ($foundSoFar intersect $this)
        then $foundSoFar
        else ($foundSoFar, $this)
      })

};]]></eg>
         </div3>
         
         
         </div2>
      </inform-div1>
	  <inform-div1 id="impl-def">
         <head>Checklist of implementation-defined features</head>
	      <?imp-def-features?>
	     
      </inform-div1>
	  <inform-div1 id="changelog" diff="chg" at="2022-11-16">
          <head>Changes since version 3.1</head>
        <div2 id="new-functions">
           <head>New Functions</head>
           <p>A number of new functions have been defined:</p>
           <ulist> 
              <item><p><code>fn:all</code></p></item>
              <item><p><code>fn:all-different</code></p></item>
              <item><p><code>fn:all-equal</code></p></item>
              <item><p><code>fn:build-uri</code></p></item>
              <item><p><code>fn:characters</code></p></item>
              <item><p><code>fn:contains-sequence</code></p></item>
              <item><p><code>fn:ends-with-sequence</code></p></item>
              <item><p><code>fn:expanded-QName</code></p></item>
              <item><p><code>fn:highest</code></p></item>
              <item><p><code>fn:identity</code></p></item>
              <item><p><code>fn:in-scope-namespaces</code></p></item>
              <item><p><code>fn:index-where</code></p></item>
              <item><p><code>fn:intersperse</code></p></item>
              <item><p><code>fn:is-NaN</code></p></item>
              <item><p><code>fn:items-after</code></p></item>
              <item><p><code>fn:items-before</code></p></item>
              <item><p><code>fn:items-ending-where</code></p></item>
              <item><p><code>fn:items-starting-where</code></p></item>
              <item><p><code>fn:iterate-while</code></p></item>
              <item><p><code>fn:lowest</code></p></item>
              <item><p><code>fn:op</code></p></item>
              <item><p><code>fn:parse-QName</code></p></item>
              <item><p><code>fn:parse-uri</code></p></item>
              <item><p><code>fn:replicate</code></p></item>
              <item><p><code>fn:some</code></p></item>
              <item><p><code>fn:starts-with-sequence</code></p></item>
               
           </ulist>

           <p>A number of functions are included in the draft specification but have not yet been reviewed or accepted:</p>
           
           <ulist>
              <item><p><code>fn:differences</code></p></item>
              <item><p><code>fn:json</code></p></item>
              <item><p><code>fn:slice</code></p></item>
              <item><p><code>fn:stack-trace</code></p></item>
              <item><p><code>map:filter</code></p></item>
              <item><p><code>map:replace</code></p></item>
              <item><p><code>map:substitute</code></p></item>
              <item><p><code>array:partition</code></p></item>
              <item><p><code>array:replace</code></p></item>
              <item><p><code>array:slice</code></p></item>
              
           </ulist>
           
	     </div2>
	     <div2 id="changes-to-existing-functions">
	        <head>Changes to Existing Functions</head>
	        <olist>
	           
	           <item><p>The keywords used for parameter names have been changed. Previously these names were
	              of no significance, but in 4.0 they can be used with <code>keyword := value</code>
	              argument syntax in function calls.</p></item>
	        </olist>
	        <p>The following changes are present in this draft, but have not been agreed by the community group:</p>
	        <olist>
	           <item><p>The third argument of <code>fn:format-number</code> can now be supplied
	              as an <code>xs:QName</code> instead of as a string that can be converted to a QName.
	              Using a <code>xs:QName</code>, especially in the (rare) cases when the value is
	              supplied dynamically, avoids the need to maintain the static namespace context
	              at execution time.</p></item>
	           
	           <item><p>The function <code>fn:xml-to-json</code> accepts an additional option:
	              <code>number-formatter</code> allows the user to control the formatting of numeric 
	              values, for example by preventing the use of exponential notation for large integers.</p></item>
	           
	           
	        </olist>
	     </div2>
	     <div2 id="editorial-changes">
	        <head>Editorial Changes</head>
	        <p>These changes are not highlighted in the change-marked version of the specification.</p>
	        <olist>
	           <item><p>The operator mapping table has been simplified so all the value comparison operators
	              are now defined in terms of two functions (for each data type): <code role="example">op:XX-equal</code>,
	              and <code role="example">op:XX-less-than</code>. The entries for <code role="example">op:XX-greater-than</code>
	           have therefore been removed.</p></item>
	           <item><p>The names of arguments appearing in function signatures have been changed. This
	           is to reflect the introduction of keyword arguments in XPath 4.0; the names chosen
	           for arguments are now more consistent across the function library.</p></item>
	           <item><p>Where appropriate, the phrase "the value of <code>$x</code>" has been replaced
	           by the simpler "<code>$x</code>". No change in meaning is intended.</p></item>
	           <item><p>The formal specifications of array functions have been rewritten to use two new
	              primitives: <code role="example">op:A2S</code> which converts an array to a sequence of zero-arity
	              functions, and <code role="example">op:S2A</code> which does the inverse. This has enabled many of the
	           functions to be specified more concisely, and with less duplication between similar functions
	           for sequences and arrays.</p></item>

	        </olist>
	     </div2>
	     <div2 id="changes-to-operators">
	     <head>Changes to Operators</head>
	     <olist>
	        <item><p>Comparison of numeric values is now transitive, and is consistent with o<code>p:same-key</code>.
	           This is achieved by changing the rules for comparing <code>xs:decimal</code> and <code>xs:double</code>
	        so that the type conversion is done without any loss of precision. </p></item>
	     </olist>
	     </div2>
	  </inform-div1>
	     
	     

     <inform-div1 id="back-compatibility" diff="chg" at="A">
         <head>Compatibility with Previous Versions</head>
         
         <p>This section summarizes the extent to which this specification is compatible with previous versions.</p>
         
         <p>Version 4.0 of this function library is fully backwards compatible with version 3.1, except as noted
         below:</p>
        
        <olist>
           <item>
              <p>In edge cases, when comparing values of different numeric types (for example, <code>xs:double</code>
                 and <code>xs:decimal</code>) where the values are numerically very close, numeric comparison may give different
              results. In previous versions of the specification, <code>xs:decimal</code> values were converted
              to <code>xs:double</code>, leading to a possible loss of precision. This could make 
              comparisons non-transitive, leading to problems when grouping (for example using <code>fn:distinct-values</code>,
              and potentially (depending on the sort algorithm) with sorting. The problem has been fixed by requiring
              comparisons to be performed based on the exact mathematical value without any loss of precision.</p>
           </item>
        </olist>
 
         <p>For compatibility issues regarding earlier versions, see the 3.1 version of this specification.</p>
         
         
         
         
      </inform-div1>
   </back>
 </spec>
