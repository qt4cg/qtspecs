<?xml version='1.0'?>
<xsl:stylesheet version="3.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:fos="http://www.w3.org/xpath-functions/spec/namespace"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	exclude-result-prefixes="fos xs"
	expand-text="yes">

	<xsl:output method="xml" doctype-system="../../../schema/xsl-query.dtd"/>

	<!-- This stylesheet expects to take xpath-functions.xml as its principal input,
     and to write xpath-functions-expanded.xml as its output. It takes a secondary
     input from function-catalog.xml -->

	<!-- It is also used to expand the function definitions in the XSLT specification,
		using a different function catalog -->

	<xsl:param name="function-catalog" select="'function-catalog.xml'"/>
	<xsl:variable name="fosdoc" select="document($function-catalog, /)"/>
	
	<xsl:key name="record-type" match="fos:record-type" use="@id"/>

	<xsl:variable name="isFO" select="contains(/spec/header/title, 'Functions and Operators')"
		as="xs:boolean"/>

   <xsl:key name="id" match="*" use="@id"/>
   <xsl:variable name="new-functions"
                select="key('id', 'new-functions')//code/string()"/>
   <xsl:variable name="changed-functions"
                select="key('id', 'changes-to-existing-functions')//code/string()"/>

	<xsl:template match="/">
		<xsl:for-each select="1 to 20">
			<xsl:comment>DO NOT EDIT: GENERATED BY merge-function-specs.xsl</xsl:comment>
			<xsl:text>&#xa;</xsl:text>
		</xsl:for-each>
		<xsl:apply-templates/>
	</xsl:template>

	<xsl:template match="*" mode="#default summary">
		<xsl:copy copy-namespaces="no">
			<xsl:copy-of select="@*"/>
			<xsl:apply-templates mode="#current"/>
		</xsl:copy>
	</xsl:template>

	<xsl:template match="processing-instruction('doc')">
		<pre class="small">
      <xsl:variable name="doc" select="unparsed-text(resolve-uri(concat('../src/', string(.)), base-uri(/)), 'iso-8859-1')"/>
      <xsl:value-of select="translate($doc, '&#xD;', '')"/>
    </pre>
	</xsl:template>

	<xsl:template match="processing-instruction()">
		<xsl:copy/>
	</xsl:template>

	<xsl:function name="fos:get-function" as="element(fos:function)?">
		<xsl:param name="prefix" as="xs:string"/>
		<xsl:param name="local" as="xs:string"/>
		<xsl:variable name="fspec" select="
				$fosdoc/fos:functions/fos:function
				[@name = $local][(@prefix, 'fn')[1] = $prefix]"/>
		<xsl:if test="empty($fspec)">
			<xsl:message>Function not found in catalog: <xsl:value-of select="$prefix, $local"
					separator=":"/></xsl:message>
		</xsl:if>
		<xsl:if test="exists($fspec[2])">
			<xsl:message>Duplicate function found in catalog: <xsl:value-of select="$prefix, $local"
					separator=":"/></xsl:message>
		</xsl:if>
		<xsl:sequence select="$fspec"/>
	</xsl:function>

	<xsl:template match="head[processing-instruction('function')]">
		<xsl:variable name="lexname" select="processing-instruction('function')/normalize-space(.)"/>
		<xsl:variable name="fspec"
			select="fos:get-function(substring-before($lexname, ':'), substring-after($lexname, ':'))"/>

                <xsl:variable name="fqfn" select="$fspec/@prefix || ':' || $fspec/@name"/>

                <!-- on the current div -->
                <xsl:if test="$fqfn = $new-functions
                              or $fspec//ednote[contains(., 'New in 4.0')]">
                  <xsl:attribute name="role" select="'new-function'"/>
                </xsl:if>

                <xsl:if test="$fqfn = $changed-functions
                              or $fspec//ednote[contains(., 'Changed in 4.0')]">
                  <xsl:attribute name="role" select="'changed-function'"/>
                </xsl:if>

		<head>
			<xsl:value-of select="$lexname"/>
		</head>
		<xsl:apply-templates select="$fspec/fos:changes"/>
		<glist>
			<gitem>
				<label>Summary</label>
				<def>
					<xsl:copy-of select="$fspec/fos:summary/(@diff, @at)"/>
					<xsl:apply-templates select="$fspec/fos:summary/node()" mode="summary"/>
				</def>
			</gitem>
			<xsl:if test="$fspec/fos:opermap">
				<gitem>
					<label>Operator Mapping</label>
					<def>
						<p>
							<xsl:copy-of select="$fspec/fos:opermap/(@diff, @at)"/>
							<xsl:copy-of select="$fspec/fos:opermap/node()" copy-namespaces="no"/>
						</p>
					</def>
				</gitem>
			</xsl:if>
			<gitem>
				<label>Signature<xsl:value-of select="'s'[$fspec/fos:signatures/fos:proto[2]]"/></label>
				<def>
					<xsl:copy-of select="$fspec/fos:signatures/(@diff, @at)"/>
					<xsl:apply-templates select="$fspec/fos:signatures/fos:proto"/>
				</def>
			</gitem>
			<xsl:if test="$fspec/fos:properties">
				<gitem>
					<label>Properties</label>
					<def>
						<xsl:copy-of select="$fspec/fos:properties/(@diff, @at)"/>
						<xsl:for-each select="$fspec/fos:properties">
							<p>
								<xsl:choose>
									<xsl:when test="last() = 1">
										<xsl:text>This function is </xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<xsl:text>The </xsl:text>
										<xsl:number value="@arity" format="w"/>
										<xsl:text>-argument form of this function is </xsl:text>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:for-each select="fos:property[not(. = 'special-streaming-rules')]">
									<xsl:call-template name="make-property-termref"/>
									<xsl:if test="position() != last()">, </xsl:if>
									<xsl:if test="position() = last() - 1"> and </xsl:if>
								</xsl:for-each>
								<xsl:text>. </xsl:text>
								<xsl:apply-templates select="fos:property/@dependency"/>
							</p>
						</xsl:for-each>
					</def>
				</gitem>
			</xsl:if>
			<gitem>
				<label>Rules</label>
				<def>
					<xsl:copy-of select="$fspec/fos:rules/(@diff, @at)"/>
					<xsl:apply-templates select="$fspec/fos:rules/node()"/>
				</def>
			</gitem>
			<xsl:if test="$fspec/fos:equivalent">
				<gitem>
					<label>Formal Equivalent</label>
					<def>
						<xsl:copy-of select="$fspec/fos:eqivalent/(@diff, @at)"/>
						<xsl:apply-templates select="$fspec/fos:equivalent"/>
					</def>
				</gitem>
			</xsl:if>
			<xsl:if test="$fspec/fos:errors">
				<gitem>
					<label>Error Conditions</label>
					<def>
						<xsl:copy-of select="$fspec/fos:errors/(@diff, @at)"/>
						<xsl:copy-of select="$fspec/fos:errors/node()" copy-namespaces="no"/>
					</def>
				</gitem>
			</xsl:if>
			<xsl:if test="$fspec/fos:notes">
				<gitem>
					<label>Notes</label>
					<def>
						<xsl:copy-of select="$fspec/fos:notes/(@diff, @at)"/>
						<!--<xsl:apply-templates select="$fspec/fos:notes/node()" mode="make-note"/>-->
						<note>
							<xsl:apply-templates select="$fspec/fos:notes/node()"/>
						</note>
					</def>
				</gitem>
			</xsl:if>

		  <xsl:if test="$fspec/fos:examples">
		    <gitem>
		      <label>Examples</label>
		      <def role="example">
					<xsl:copy-of select="$fspec/fos:examples/(@diff, @at)"/>
				   <xsl:if test="$fspec//fos:variable">
				   	<table role="medium">
				   		<thead><tr><th>Variables</th></tr></thead>
				   		<tbody>
				   			<xsl:apply-templates select="$fspec/fos:examples/fos:variable"/>
				   		</tbody>
				   	</table>
				   </xsl:if>
					<table role="medium">
					  <xsl:if test="fos:use-two-column-format($fspec/fos:examples)">
					    <thead>
					      <tr>
						<th>Expression</th>
						<th>Result</th>
					      </tr>
					    </thead>
					  </xsl:if>
					  <tbody>
					    <xsl:apply-templates select="$fspec/fos:examples/node()[not(self::fos:variable)]"/>
					  </tbody>
					</table>						
				 </def>
		    </gitem>
		  </xsl:if>
			<!--<xsl:if test="$fspec/fos:history">
				<gitem>
					<label>History</label>
					<def role="example">
						<p>
							<xsl:apply-templates select="$fspec/fos:history/fos:version/node()"/>
						</p>
					</def>
				</gitem>
			</xsl:if>-->
		</glist>
	</xsl:template>
	
	<xsl:template match="head[processing-instruction('record-description')]" expand-text="yes">
		<xsl:variable name="lexname" select="processing-instruction('record-description')/normalize-space(.)"/>
		<xsl:variable name="definition" select="$fosdoc/fos:functions/fos:record-type[@id = $lexname]"/>
		<xsl:if test="empty($definition)">
			<xsl:message terminate="yes">*** Record definition {$lexname} not found ***</xsl:message>
		</xsl:if>
		<head>Record fn:{$definition/@id}</head>
		<xsl:apply-templates select="processing-instruction('record-description')   (:$definition:)"/>
	</xsl:template>

   <xsl:template match="fos:record-type">
   	<xsl:call-template name="show-record-type">
   		<xsl:with-param name="name" select="@id"/>
   		<xsl:with-param name="definition" select="."/>
   		<xsl:with-param name="is-first" select="true()"/>
   	</xsl:call-template>
   </xsl:template>
	
	<xsl:function name="fos:use-two-column-format" as="xs:boolean">
		<xsl:param name="examples" as="element(fos:examples)"/>
		<xsl:sequence select="not(contains-token($examples/@role, 'wide'))
			and $examples//fos:result
			and not(max($examples//eg!tokenize(., '\n')!string-length(.)) gt 30)"/>			
	</xsl:function>

	<xsl:template match="*" mode="make-note">
		<xsl:copy copy-namespaces="no">
			<xsl:attribute name="role" select="'note'"/>
			<xsl:copy-of select="node()" copy-namespaces="no"/>
		</xsl:copy>
	</xsl:template>

	<xsl:template name="make-property-termref">
		<xsl:choose>
			<xsl:when test="$isFO">
				<!-- Functions and Operators spec -->
				<termref def="dt-{.}">
					<xsl:value-of select="."/>
				</termref>
			</xsl:when>
			<xsl:otherwise>
				<!-- Typically the XSLT spec -->
				<xtermref spec="FO40" ref="dt-{.}">
					<xsl:value-of select="."/>
				</xtermref>
			</xsl:otherwise>
		</xsl:choose>

	</xsl:template>
	
	<xsl:template name="show-record-type">
		<xsl:param name="name" as="xs:string"/>
		<xsl:param name="definition" as="element(fos:record-type)"/>
		<xsl:param name="is-first" as="xs:boolean"/>
		<example role="record">
			<record>
				<xsl:if test="$is-first">
					<xsl:attribute name="id" select="$name"/>
				</xsl:if>
				<!--<xsl:text>record {$name} (&#xa;</xsl:text>-->
				<xsl:for-each select="$definition/fos:field">
					<arg name="{@name}" type="{@type}" occur="{if (xs:boolean(@required)) then 'req' else 'opt'}"/>
					<!--<xsl:text>   {@name}{if (xs:boolean(@required)) then "" else "?"} as {@type}{if (position() ne last()) then "," else ""}&#xa;</xsl:text>-->
				</xsl:for-each>
				<!--<xsl:text>)&#xa;</xsl:text>-->
			</record>
		</example>
	</xsl:template>

	<xsl:template match="@dependency"> It depends on 
		<xsl:value-of
			select="replace(translate(string-join(tokenize(., '\s+'), ', and '), '-', ' '), 'uri', 'URI')"
		/>.
	</xsl:template>
	
	<xsl:template match="fos:changes">
		<changes>
			<xsl:for-each select="fos:change/p">
				<change>
					<xsl:copy-of select="../@Q{}*, child::node()" copy-namespaces="no"/>
				</change>
			</xsl:for-each>
		</changes>
	</xsl:template>

	<xsl:template match="fos:proto">
		<xsl:variable name="isOp" as="xs:boolean" select="exists(../../fos:opermap)"/>
		<example role="signature">
			<xsl:variable name="prefix" select="../../@prefix"/>
			<proto isOp="{if ($isOp) then 'yes' else 'no'}" prefix="{if ($prefix)
                                        then $prefix
                                        else if ($isOp)
                                             then 'op'
                                             else 'fn'}">
				<xsl:copy-of select="@name, @return-type, @return-type-ref, @return-type-ref-occurs, @diff, @at"/>
				<xsl:apply-templates/>
			</proto>
		</example>
	</xsl:template>

	<xsl:template match="fos:arg">
		<arg>
			<xsl:copy-of select="@name, @type, @type-ref, @type-ref-occurs, @diff, @at, @default"/>
			<xsl:if test="not(following-sibling::fos:arg) and ancestor::fos:function//fos:property = 'variadic'">
				<xsl:attribute name="type" select="@type || ' ...'"/>
			</xsl:if>
		</arg>
	</xsl:template>

	<!--<xsl:template match="fos:arg[@type='record']">
		<!-\- Capture the details of the record into a JSON structure which we squeeze into the @type attribute -\->
		<arg name="{@name}" role="record">
			<xsl:attribute name="type">
				<xsl:variable name="fields" as="map(*)*">
					<xsl:for-each select="fos:record/fos:field">
						<xsl:sequence select="map{'name':string(@name), 'type':string(@type), 'required':xs:boolean(@required)}"/>
					</xsl:for-each>
					<xsl:sequence select="map{'extensible':xs:boolean(fos:record/@extensible)}"/>
				</xsl:variable>
				<xsl:value-of select="serialize(array{$fields}, map{'method':'json'})"/>
			</xsl:attribute>
			<xsl:copy-of select="@diff, @at, @default"/>
		</arg>
	</xsl:template>-->

	<xsl:template match="fos:record">
		<example role="record" id="{../@id}">
			<record>
				<xsl:copy-of select="@* except @extensible"/>
				<xsl:apply-templates/>
            <xsl:if test="xs:boolean(@extensible)"><arg name="*"/></xsl:if>
			</record>
		</example>
	</xsl:template>

	<xsl:template match="fos:field">
		<arg occur="{if (xs:boolean(@required)) then 'req' else 'opt'}">
			<xsl:copy-of select="@name, @type, @type-ref, @diff, @at"/>
		</arg>
	</xsl:template>
	
	<xsl:template match="fos:equivalent[@style=('xpath-expression', 'xquery-expression')]">
		<xsl:variable name="lang" select="if (@style='xpath-expression') then 'XPath' else 'XQuery'"/>
		<p><xsl:text>The effect of the function is equivalent to the result of the following {$lang} expression</xsl:text>
			<xsl:if test="xs:boolean(@covers-error-cases) = false()">
				<xsl:text>, except in error cases</xsl:text>
			</xsl:if>
			<xsl:text>.</xsl:text>
		</p>
		<eg>
			<xsl:value-of select="string(.) => replace('^\s+', '') => replace('\s+$', '')"/>
		</eg>
	</xsl:template>
	
	<xsl:template match="fos:equivalent[@style='xquery-function']">
		<p><xsl:text>The function delivers the same result as the following XQuery implementation</xsl:text>
			<xsl:if test="xs:boolean(@covers-error-cases) = false()">
				<xsl:text>, except in error cases</xsl:text>
			</xsl:if>
			<xsl:text>.</xsl:text>
		</p>
		<eg>
			<xsl:value-of select="string(.) => replace('^\s+', '') => replace('\s+$', '')"/>
		</eg>
	</xsl:template>
	
	<xsl:template match="fos:equivalent[@style='dm-primitive']">
		<p>The function is defined as follows, making use of primitive constructors and accessors defined
		in <bibref ref="xpath-datamodel-40"/><xsl:text/>
			<xsl:if test="xs:boolean(@covers-error-cases) = false()">
				<xsl:text>, except in error cases</xsl:text>
			</xsl:if>
			<xsl:text>.</xsl:text>
		</p>
		<eg>
			<xsl:value-of select="string(.) => replace('^\s+', '') => replace('\s+$', '')"/>
		</eg>
	</xsl:template>
	
	<xsl:template match="fos:equivalent">
		<xsl:message terminate="yes">Non-matching fos:equivalent for {../@name}</xsl:message>
	</xsl:template>

	<xsl:template match="fos:example">
		<xsl:apply-templates/>
	</xsl:template>

	<xsl:template match="fos:variable" priority="5">
		<tr>
			<td colspan="2">
				<eg>
					<xsl:copy-of select="@diff, @at"/>
					<xsl:value-of select="concat('let $', @name, ' := ')"/>
					<xsl:if test="@select">
						<xsl:value-of select="@select"/>
					</xsl:if>
					<xsl:if test="child::node()">
						<xsl:apply-templates/>
					</xsl:if>
				</eg>
			</td>
		</tr>
	</xsl:template>
	
	<xsl:template match="fos:example/*" priority="4">
	  <tr>
	    <xsl:copy-of select="@diff, @at"/>
	    <td colspan="2">
	      <xsl:copy-of select="." copy-namespaces="no"/>
	    </td>
	  </tr>
	</xsl:template>

	<xsl:template match="fos:test[not(ancestor::fos:examples[fos:use-two-column-format(.)])]" priority="6">
	  <tr class="testdiv">
	    <xsl:copy-of select="@diff, @at"/>
            <th valign="top">Expression:</th>
	    <td valign="top">
	      <xsl:if test="fos:preamble">
		<p><xsl:copy-of select="fos:preamble/node()" copy-namespaces="no"/></p>
	      </xsl:if>
	      <xsl:choose>
		<xsl:when test="fos:expression/@xml:space = 'preserve'">
	          <p>
		    <code><xsl:value-of select="translate(fos:expression, ' ', '&#xa0;')"/></code>
                  </p>
		</xsl:when>
		<xsl:when test="fos:expression/eg">
		  <xsl:apply-templates select="fos:expression/node()"/>
		</xsl:when>
		<xsl:otherwise>
	          <p>
		    <code><xsl:value-of select="fos:expression"/></code>
                  </p>
		</xsl:otherwise>
	      </xsl:choose>
	    </td>
          </tr>
	  <tr>
	    <xsl:copy-of select="@diff, @at"/>
            <th valign="top">Result:</th>
	    <td valign="top">
	      <xsl:if test="fos:result[2]"><p>One of the following:</p></xsl:if>
	      <xsl:apply-templates select="fos:result|fos:error-result"/>
	      <xsl:if test="fos:result[@normalize-space = 'true']">
		<p>(with whitespace added for legibility)</p>
	      </xsl:if>
	      <xsl:if test="fos:result[@allow-permutation = 'true']">
		<p>(or some permutation thereof)</p>
	      </xsl:if>
	      <xsl:if test="fos:result[@approx = 'true']">
		<p>(approximately)</p>
	      </xsl:if>
	      <xsl:if test="fos:postamble">
		<p><emph>
		  <xsl:text>(</xsl:text>
		  <xsl:copy-of select="fos:postamble/node()" copy-namespaces="no"/>
		  <xsl:text>)</xsl:text>
		  <xsl:if test="not(ends-with(fos:postamble, '.'))">.</xsl:if>
		</emph></p>
	      </xsl:if>
	    </td>
	  </tr>
        </xsl:template>

	<xsl:template match="fos:test" priority="5">
	  <tr>
	    <xsl:copy-of select="@diff, @at"/>
	    <td valign="top">
	      <xsl:if test="fos:preamble">
		<p><xsl:copy-of select="fos:preamble/node()" copy-namespaces="no"/></p>
	      </xsl:if>
	      <xsl:choose>
		<xsl:when test="fos:expression/@xml:space = 'preserve'">
                  <p>
		    <code><xsl:value-of select="translate(fos:expression, ' ', '&#xa0;')"/></code>
                  </p>
		</xsl:when>
		<xsl:when test="fos:expression/eg">
		  <xsl:apply-templates select="fos:expression/node()"/>
		</xsl:when>
		<xsl:otherwise>
                  <eg>
		    <code><xsl:value-of select="fos:expression"/></code>
                  </eg>
		</xsl:otherwise>
	      </xsl:choose>
	    </td>
	    <td valign="top">
	      <xsl:if test="fos:result[2]"><p>One of the following:</p></xsl:if>
	      <xsl:apply-templates select="fos:result|fos:error-result"/>
	      <xsl:if test="fos:result[@normalize-space = 'true']">
		<p>(with whitespace added for legibility)</p>
	      </xsl:if>
	      <xsl:if test="fos:result[@allow-permutation = 'true']">
		<p>(or some permutation thereof)</p>
	      </xsl:if>
	      <xsl:if test="fos:result[@approx = 'true']">
		<p>(approximately)</p>
	      </xsl:if>
	      <xsl:if test="fos:postamble">
		<p><emph>
		  <xsl:text>(</xsl:text>
		  <xsl:copy-of select="fos:postamble/node()" copy-namespaces="no"/>
		  <xsl:text>)</xsl:text>
		  <xsl:if test="not(ends-with(fos:postamble, '.'))">.</xsl:if>
		</emph></p>
	      </xsl:if>
	    </td>
	  </tr>
	</xsl:template>
	
	<xsl:template match="fos:result">
		<xsl:choose>
			<xsl:when test="contains(., codepoints-to-string(10)) || ..//eg">
				<eg><xsl:value-of select="."/></eg>
			</xsl:when>
			<xsl:otherwise>
				<p><code><xsl:value-of select="."/></code></p>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
	<xsl:template match="fos:error-result">
		<p>Raises error <xsl:value-of select="@error-code"/>.</p>
	</xsl:template>

	<xsl:template match="text()" mode="summary">
		<xsl:value-of select="replace(., 'Summary: ', '')"/>
	</xsl:template>

	<xsl:template match="processing-instruction('local-function-index')">
		<table class="index">
			<thead>
				<tr>
					<th>Function</th>
					<th>Meaning</th>
				</tr>
			</thead>
			<tbody>
				<xsl:for-each
					select="following-sibling::*[starts-with(local-name(), 'div')][head/processing-instruction('function')]">
					<xsl:variable name="lexname" select="string(head/processing-instruction())"/>
					<xsl:variable name="fspec"
						select="fos:get-function(substring-before($lexname, ':'), substring-after($lexname, ':'))"/>
					<tr>
						<td style="white-space:nowrap; vertical-align:top">
							<code style="padding-right: 10px">
								<xsl:value-of select="$lexname"/>
							</code>
						</td>
						<td>
							<xsl:apply-templates select="$fspec/fos:summary/*/node()" mode="summary"/>
						</td>
					</tr>
				</xsl:for-each>
			</tbody>
		</table>
	</xsl:template>

	<!-- remove dummy termdefs used in XSLT to ensure no dangling references -->
	<xsl:template match="p[termdef[@role = 'placemarker']]"/>
	
	<xsl:template match="processing-instruction(record-description)">
		<xsl:variable name="record-name" select="normalize-space()"/>
		<xsl:variable name="target" select="key('record-type', $record-name, $fosdoc)"/>
		<xsl:if test="count($target) ne 1">
			<xsl:message expand-text="yes">Failed to locate record type {.}</xsl:message>
		</xsl:if>
		<xsl:if test="empty($target/@id)">
			<xsl:message expand-text="yes">Record type {.} has no name</xsl:message>
		</xsl:if>
		<xsl:variable name="record" select="$target" as="element(fos:record-type)"/>
		
		<xsl:apply-templates select="$record/fos:summary/node()"/>
		
		<!--<example role="record" id="{$record/@id}-narrative">
	    <record>
              <xsl:for-each select="$record/fos:field">
                <arg name="{@name}" type="{@type}">
                  <xsl:attribute name="occur"
                                 select="if (xs:boolean(@required)) then 'req' else 'opt'"/>
                </arg>
              </xsl:for-each>
              <xsl:if test="$record/@extensible != false()">
                <arg name="*"/>
              </xsl:if>
	    </record>
	  </example>-->
	  <table class="fos-options">
		  <thead>
		    <tr>
		      <th>Name</th>
		      <!--<xsl:if test="fos:option/fos:applies-to">
			<th>Applies to</th>
		      </xsl:if>-->
		      <xsl:if test="exists($record//fos:values)">
			      <th>Value</th>
		      </xsl:if>
		      <th>
			      <xsl:text>Meaning</xsl:text>
		      </th>
		    </tr>
		  </thead>
		  <tbody>
		    <xsl:apply-templates select="$record/fos:field" mode="narrative"/>
		    <xsl:if test="xs:boolean($record/@extensible)">
		    	<tr>
		    		<td><p><code>*</code></p></td>
		    		<td><p>The record type is extensible (it may contain additional fields beyond those listed).</p></td>
		    	</tr>
		    </xsl:if> 
		  </tbody>
		</table>

	</xsl:template>
	
	

	<!-- Handle option parameter specifications -->

	<xsl:template match="fos:options">

	  <example role="record">
	    <record>
              <xsl:copy-of select="@id"/>
              <xsl:for-each select="fos:option">
                <arg name="{@key}">
                  <xsl:if test="fos:type">
                    <xsl:attribute name="type" select="fos:type"/>
                  </xsl:if>
                  <xsl:attribute name="occur"
                                 select="if (fos:required = true()) then 'req' else 'opt'"/>
                </arg>
              </xsl:for-each>
              <xsl:if test="@extensible != false()">
                <arg name="*"/>
              </xsl:if>
	    </record>
	  </example>

<table class="fos-options">
  <xsl:copy-of select="@diff, @at"/>
  <thead>
    <tr>
      <th>Key</th>
      <xsl:if test="fos:option/fos:applies-to">
	<th>Applies to</th>
      </xsl:if>
      <xsl:if test="exists(.//fos:values)">
	<th>Value</th>
      </xsl:if>
      <th>
	<xsl:text>Meaning</xsl:text>
      </th>
    </tr>
  </thead>
  <tbody>
    <xsl:apply-templates select="fos:option" mode="narrative"/>
  </tbody>
</table>
</xsl:template>

<xsl:template match="fos:option|fos:field" mode="narrative">
<tr>
  <xsl:copy-of select="@diff, @at"/>
  <td rowspan="{1 + count(fos:values/fos:value)}">
    <p>
      <code>
	     <xsl:value-of select="@key|@name"/>
      	<xsl:if test="not(xs:boolean(@required))">?</xsl:if>
      </code>
    </p>
  </td>
  <xsl:if test="../fos:option/fos:applies-to">
    <td rowspan="{1 + count(fos:values/fos:value)}">
      <xsl:value-of select="fos:applies-to"/>
    </td>
  </xsl:if>
  <xsl:variable name="thickness"
                select="if (exists(fos:values)) then 'fos-thick' else 'fos-thin'"/>
  <td class="{$thickness}">
    <xsl:if test="exists(..//fos:values)">
      <xsl:attribute name="colspan">2</xsl:attribute>
    </xsl:if>
    <xsl:apply-templates select="fos:meaning/node()"/>
    <xsl:if test="fos:type|fos:default|fos:default-description|@type">
      <ulist>
        <xsl:if test="fos:type or @type">
          <item>
	    <p>
	      <term>Type: </term>
	      <code>
	        <xsl:value-of select="fos:type|@type"/>
	      </code>
	    </p>
          </item>
        </xsl:if>
<!--
        <xsl:if test="fos:required">
          <item>
	    <p>
	      <term>Required: </term>
	      <code>
	        <xsl:value-of select="fos:required"/>
	      </code>
	    </p>
          </item>
        </xsl:if>
-->
        <xsl:if test="fos:default | fos:default-description">
          <xsl:choose>
            <xsl:when test="not(fos:default)">
              <item>
                <p>
                  <term>Default: </term>
                  <xsl:apply-templates select="fos:default-description/node()"/>
                </p>
              </item>
            </xsl:when>
            <xsl:otherwise>
              <item>
                <p>
                  <term>Default: </term>
                  <xsl:apply-templates select="fos:default"/>
                </p>
                <xsl:apply-templates select="fos:default-description"/>
              </item>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
      </ulist>
    </xsl:if>
  </td>
</tr>

<xsl:for-each select="fos:values/fos:value">
  <xsl:variable name="thickness"
                select="if (position() = last()) then 'fos-thick' else 'fos-thin'"/>
  <tr>
    <td class="{$thickness}">
      <code>
	<xsl:value-of select="@value"/>
      </code>
    </td>
    <td>
      <xsl:apply-templates/>
    </td>
  </tr>
</xsl:for-each>
</xsl:template>

<xsl:template match="fos:default">
  <code>
    <xsl:apply-templates/>
  </code>
</xsl:template>

<xsl:template match="fos:default-description">
  <p>
    <xsl:apply-templates/>
  </p>
</xsl:template>

<xsl:template match="fos:history | fos:version"/>

	<!--<xsl:template match="processing-instruction('type')" expand-text="yes">
		<xsl:variable name="target" select="$fosdoc//fos:type[@id = normalize-space(current())]"/>
		<xsl:if test="count($target) ne 1">
			<xsl:message expand-text="yes">Failed to locate record type {.}</xsl:message>
		</xsl:if>
		<xsl:variable name="verified-target" select="$target" as="element(fos:type)"/>
		<xsl:variable name="record" select="$target/fos:record" as="element(fos:record)"/>
		<xsl:apply-templates select="$record"/>
	</xsl:template>-->

</xsl:stylesheet>
