<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE spec SYSTEM "../../../schema/xsl-query.dtd"[

<!-- Things to update in these ENTITY definitions before publishing this document:
* Relationships between doc.stage, w3c-doctype, and doc.w3c-doctype-full
* doc.stage  w3c-doctype  doc.w3c-doctype-full
* FPWD       wd           First Public Working Draft
  WD         wd           Working Draft
  WD         wd           Last Call Working Draft
  CR         cr           Candidate Recommendation
  PR         pr           Proposed Recommendation
  PER        per          Proposed Edited Recommendation
  REC        rec          Recommendation
  WGNOTE     note         Working Group Note
* date.day, date.DD, date.month, date.monthnum, and date.year must represent the date of publication of the document
* doc.w3c-prevdesignation must properly represent the stage and shortname of the immediately preceding publication of the document
* Various status section generation ENTITY definitions below must be properly updated
-->

<!ENTITY doc.version "4.0">
<!ENTITY doc.major-version "4">
<!ENTITY doc.version-code "40">
<!ENTITY doc.stage "REC">
<!ENTITY doc.w3c-doctype "rec">
<!ENTITY doc.w3c-doctype-full "Editor's Draft">

<!-- N.B. The date 2000-01-01 is magic, it means "today". -->
<!ENTITY date.day "01">
<!ENTITY date.DD "01">
<!ENTITY date.month "January"> 
<!ENTITY date.monthnum "01">
<!ENTITY date.year "2000">
<!ENTITY doc.date "&date.year;&date.monthnum;&date.DD;">

<!ENTITY w3c.tr "https://www.w3.org/TR">
<!ENTITY doc.generic-shortname "xpath-datamodel">
<!ENTITY doc.shortname "&doc.generic-shortname;-&doc.version-code;">
<!ENTITY doc.w3c-designation "&doc.stage;-&doc.shortname;">
<!ENTITY doc.publoc "&w3c.tr;/&date.year;/&doc.w3c-designation;-&doc.date;/">
<!ENTITY doc.latestloc "&w3c.tr;/&doc.shortname;/">
<!ENTITY doc.latestloc-major "&w3c.tr;/&doc.generic-shortname;-&doc.major-version;/">
<!ENTITY doc.latestloc-tech "&w3c.tr;/&doc.generic-shortname;/">
<!ENTITY language-tech "XQuery and XPath Data Model">
<!ENTITY language "XQuery and XPath Data Model &doc.version;">
<!ENTITY language-major "XQuery and XPath Data Model &doc.major-version;">
<!-- ************************ THIS MUST BE EITHER 'WG Review Draft' OR ''   ************** -->
<!ENTITY version "">
<!-- ************************************************************************************* -->

<!ENTITY ChangeLog  SYSTEM "changelog.xml">

<!ENTITY documentNode "document node">
<!ENTITY elementNode "element node">
<!ENTITY attributeNode "attribute node">
<!ENTITY namespaceNode "namespace node">
<!ENTITY processingInstructionNode "processing instruction node">
<!ENTITY commentNode "comment node">
<!ENTITY textNode "text node">

<!ENTITY dm-example.xml SYSTEM "dm-example.xml.cdata">
<!ENTITY dm-example.xsd SYSTEM "dm-example.xsd.cdata">
<!ENTITY dm-example.tbl SYSTEM "dm-example.tbl.xml">
<!ENTITY xdt-isoref     '<bibref ref="ISO8601"/>'>

<!ENTITY dm.prop.attributes   "<emph role='dm-node-property'>attributes</emph>">
<!ENTITY dm.prop.base-uri     "<emph role='dm-node-property'>base-uri</emph>">
<!ENTITY dm.prop.node-kind    "<emph role='dm-node-property'>node-kind</emph>">
<!ENTITY dm.prop.children     "<emph role='dm-node-property'>children</emph>">
<!ENTITY dm.prop.content      "<emph role='dm-node-property'>content</emph>">
<!ENTITY dm.prop.namespaces   "<emph role='dm-node-property'>namespaces</emph>">
<!ENTITY dm.prop.nilled	      "<emph role='dm-node-property'>nilled</emph>">
<!ENTITY dm.prop.node-name    "<emph role='dm-node-property'>node-name</emph>">
<!ENTITY dm.prop.parent	      "<emph role='dm-node-property'>parent</emph>">
<!ENTITY dm.prop.prefix	      "<emph role='dm-node-property'>prefix</emph>">
<!ENTITY dm.prop.string-value "<emph role='dm-node-property'>string-value</emph>">
<!ENTITY dm.prop.target	      "<emph role='dm-node-property'>target</emph>">
<!ENTITY dm.prop.type-name    "<emph role='dm-node-property'>schema-type</emph>">
<!ENTITY dm.prop.uri          "<emph role='dm-node-property'>uri</emph>">
<!ENTITY dm.prop.typed-value  "<emph role='dm-node-property'>typed-value</emph>">

<!ENTITY % status-entities SYSTEM "../../../etc/status-entities.dtd">
%status-entities;

<!ENTITY doc.WD-pubdate "24 April 2014">
<!ENTITY doc.LC-pubdate "7 October 2014">
<!ENTITY doc.LC-comments-due "7 November 2014">
<!ENTITY doc.CR-pubdate "13 December 2016">
<!ENTITY doc.CR-comments-due "10 January 2017">
<!ENTITY doc.PR-expected "10 January 2017">
<!ENTITY doc.PR-pubdate "17 January 2017">
<!ENTITY doc.PR-comments-due "28 February 2017">
<!ENTITY doc.REC-pubdate "21 March 2017">

<!ENTITY doc.pubdate "&doc.REC-repubdate;">
<!ENTITY doc.comments-due "&doc.PR-comments-due;">


<!ENTITY status-section-id "status">
<!ENTITY spec-devby    "&devby.joint1;">
<!ENTITY changelog-id  "ChangeLog">
<!ENTITY changes-para  "&post.PR.nochanges;">
<!ENTITY implementation-report '&no-implementation-report-exists;'>
<!ENTITY implementation-report-location "">
<!ENTITY implementation-report-availability "">
<!ENTITY test-suite-location "">
<!ENTITY Bugzilla-key "XDM31">
<!ENTITY patent-policy-paragraph "&ppp-two;">
<!ENTITY documents-and-relationships "&set-of-documents-30-preREC;">
<!ENTITY advancement.statement "&advance.2WGs;">
<!ENTITY document-stage "&doc-stage-REC;">
<!ENTITY doc-stability "&doc-stability-REC;">

<!ENTITY PR-entrance-criteria '<p>This document will be
considered ready for transition to Proposed Recommendation
at the same time that the XQuery 3.1 specification is ready
for transition to Proposed Recommendation. </p>'>
<!ENTITY features-at-risk-para "&no-features-at-risk;">
<!ENTITY features-at-risk "">

<!ENTITY customized-paragraph '<p>This &doc.w3c-doctype-full; specifies the XQuery and XPath Data Model (XDM)
                               version 4.0, a fully compatible extension of <loc href="https://www.w3.org/TR/xpath-datamodel-30/">XDM version 3.1</loc>. </p>'>

<!ENTITY status-section SYSTEM "../../../etc/status-general.xml">
<!ENTITY common-item-types.xml SYSTEM "../../image-sources/item-types.xml">
<!ENTITY common-anyType.xml SYSTEM "../../image-sources/anyType.xml">
<!ENTITY common-anyAtomicType.xml SYSTEM "../../image-sources/anyAtomicType.xml">
]>

<!-- <spec id="spec-top" w3c-doctype="&doc.w3c-doctype;" status="int-review"> -->
<spec id="spec-top" w3c-doctype="&doc.w3c-doctype;">
  <header id="spec-header">
    <title>&language;</title>
  <version>&version;</version>
  <w3c-designation>&doc.w3c-designation;</w3c-designation>
  <w3c-doctype>W3C &doc.w3c-doctype-full;</w3c-doctype>
  <pubdate>
    <day>&date.day;</day>
    <month>&date.month;</month>
    <year>&date.year;</year>
  </pubdate>
  <publoc>
    <loc href="&doc.publoc;">&doc.publoc;</loc>
  </publoc>
<!-- These altlocs URIs are computed from the concatenation of doc.public, doc.shortname, and either '.xml' or
     '-diff-from-yyyymmdd.html', where 'yyyymmdd' is the earlier version of the spec from which a diff has been produced -->
  <altlocs>
      <loc href="&doc.publoc;&doc.shortname;.xml">XML</loc>
  </altlocs>
<!-- The latestloc URI is computed from doc.latestloc -->
  <latestloc doc="&language;">
    <loc  href="&doc.latestloc;">&doc.latestloc;</loc>
  </latestloc>
<!-- These prevlocs URIs are always hard-coded and are never computed from entities -->
<!-- Pubrules doesn't like FPWD to have a prevloc, not even a previous Recommendation -->
  <prevlocs doc="&language;" >
    <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2017/PR-xpath-datamodel-31-20170117/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/2017/PR-xpath-datamodel-31-20170117/</loc>
    <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2016/CR-xpath-datamodel-31-20161213/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/2016/CR-xpath-datamodel-31-20161213/</loc>
    <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/TR/2014/CR-xpath-datamodel-31-20141218/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://www.w3.org/TR/2014/CR-xpath-datamodel-31-20141218/</loc>
  </prevlocs>
  <latestloc-major doc="&language-major;">
    <loc href="&doc.latestloc-major;">&doc.latestloc-major;</loc>
  </latestloc-major>
  <latestloc-tech doc="&language-tech;">
    <loc href="&doc.latestloc-tech;">&doc.latestloc-tech;</loc>
  </latestloc-tech>
  <prevrec doc="&language-tech;">
    <loc href="https://www.w3.org/TR/2014/REC-xpath-datamodel-30-20140408/">https://www.w3.org/TR/2014/REC-xpath-datamodel-30-20140408/</loc>
  </prevrec>
  <authlist>
    <author>
      <name>Norm Tovey-Walsh</name>
      <affiliation>Saxonica, Ltd</affiliation>
      <email href="mailto:norm@saxonica.com">norm@saxonica.com</email>
    </author>
    <author>
      <name><phrase><loc href="http://john.snelson.org.uk">John Snelson</loc> (XML Query WG)</phrase></name>
      <affiliation>MarkLogic Corporation</affiliation>
      <email href="mailto:john.snelson@marklogic.com">john.snelson@marklogic.com</email>
    </author>
    <author>
      <name>Andrew Coleman (XML Query WG)</name>
      <affiliation>IBM Hursley Laboratories</affiliation>
      <email href="mailto:andrew_coleman@uk.ibm.com">andrew_coleman@uk.ibm.com</email>
    </author>
  </authlist>
  <errataloc href="https://www.w3.org/XML/2017/qt-errata/xpath-datamodel-31-errata.html"
    xlink:type="simple" xmlns:xlink="http://www.w3.org/1999/xlink"/>

  <translationloc href="https://www.w3.org/2003/03/Translations/byTechnology?technology=xpath-datamodel-31"/>


&status-section;

<abstract>
<p>This document defines the &language;,
which is the data model of <bibref ref="xpath-40"/>,
<bibref ref="xslt-40"/>, and <bibref ref="xquery-40"/>, and any other
specifications that reference it.
This document is the result of joint
work by the <bibref ref="XSLWG"/> and the <bibref ref="XQWG"/>.</p>
</abstract>

<langusage>
<language id="en">English</language>
</langusage>

<revisiondesc>
<p>See the CVS changelog.</p>
</revisiondesc>
</header>

<body>

<div1 id="intro">
<head>Introduction</head>
  <changes>
    <change>Use the arrows to browse significant changes since the 3.1 version of this specification.</change>
    <change>Sections with significant changes are marked Δ in the table of contents.</change>
  </changes>

<p>This document defines the &language;,
which is the data model of <bibref ref="xpath-40"/>, <bibref ref="xslt-40"/>, and
<bibref ref="xquery-40"/>. </p>



<p>The &language; (henceforth “data model”)
serves two purposes.
First, it defines the information contained in the input to an
XSLT or XQuery processor.  Second, it defines all permissible values of
expressions in the XSLT, XQuery, and XPath languages.  A
language is <emph>closed</emph> with respect to a data model if the value
of every expression in the language is guaranteed to be in the data model.
XSLT 4.0, XQuery 4.0, and XPath 4.0 are all closed with respect to
the data model.</p>

<p>The data model describes items similar to those of
the <bibref ref="xml-infoset"/>
(henceforth “Infoset”).
 It is written to provide a data model suitable for XPath, XQuery and XSLT, which was not a goal of the Infoset,
 and this leads to a number of differences, some of which are:

</p>

<ulist>
  <item>
    <p>Support for XML Schema types. The XML Schema recommendations
    define features, such as structures (<bibref ref="xmlschema-1"/>)
    and simple data types (<bibref ref="xmlschema-2"/>), that extend
    the Infoset with precise type information.</p>
  </item>
  <item>
    <p>Representation of collections of documents and of
    complex values. </p>
  </item>
  <item>
    <p>Support for typed atomic items.</p>
  </item>
  <item>
    <p>Support for ordered, heterogeneous sequences.</p>
  </item>
  <item>
    <p>Support for additional data types such as maps, arrays, and functions.</p>
  </item>
</ulist>

<p>As with the Infoset, the &language;
specifies what information in the documents is accessible but does
not specify the programming-language interfaces or bindings used to
represent or access the data.</p>

<p>The data model can represent various
values, including not only the input and the output of a stylesheet or query but all
values of expressions used during the intermediate calculations.
Examples include the input document or document repository (represented
as a &documentNode; or a sequence of &documentNode;s), the result of a
path expression (represented as a sequence of nodes), the result of an
arithmetic or a logical expression (represented as an <termref def="dt-atomic-item"/>),
a sequence expression resulting in a sequence of items, etc.
</p>

<p>This document provides a precise definition of the properties of nodes
in the &language;, how they are accessed, and how
they relate to values in the Infoset and PSVI.</p>

</div1>
  
  <div1 id="terminology-and-notation">
    <head>Terminology and Notation</head>
    
    <p>This section introduces terminology and notational conventions that apply
    throughout the document.</p>
    
    <p>In this document, material labeled as as a <term>note</term> or <term>example</term> 
      is provided for explanatory purposes and are not normative.</p>
    
  

  <div2 id="terminology">
  <head>Terminology</head>
  
  <p>For a full glossary of terms, see <specref ref="glossary"/>.</p>
  
  <p>In this specification the phrases <rfc2119>must</rfc2119>, <rfc2119>must
                    not</rfc2119>, <rfc2119>should</rfc2119>, <rfc2119>should not</rfc2119>,
                    <rfc2119>may</rfc2119>, <rfc2119>required</rfc2119>, and
                    <rfc2119>recommended</rfc2119>, when used in normative
                    text and rendered in small capitals, are to be interpreted as described in
                    <bibref ref="RFC2119"/>.</p>
    
    <p><termdef id="dt-implementation-defined" term="implementation
      defined"><term>Implementation-defined</term> indicates an aspect that
      may differ between implementations, but must be specified by the
      implementer for each particular implementation.</termdef></p>
    
    <p><termdef id="dt-implementation-dependent" term="implementation
      dependent"><term>Implementation-dependent</term> indicates an aspect
      that may differ between implementations, is not specified by this or
      any W3C specification, and is not required to be specified by the
      implementer for any particular implementation.</termdef></p>
    
    <p>In all cases where this specification leaves the behavior
      implementation-defined or implementation-dependent, the implementation
      has the option of providing mechanisms that allow the user to
      influence the behavior.</p>
  
  <p>This specification distinguishes between the data model as a general
  concept and specific items (documents, elements, <termref def="dt-atomic-item">atomic items</termref>, etc.)
  that are concrete examples of the data model by identifying all concrete
  examples as <termref def="dt-instance">instances of the data model</termref>.
  </p>
    
    <p>Sometimes it is necessary to distinguish the case where a
      particular property has no value in the data model. The canonical
      example of such a case is the namespace URI property of an
      <termref def="dt-expanded-qname">expanded QName</termref>
      that is not in any namespace. For such properties, it is
      convenient to be able to speak of “the state of having no value”.
      <termdef id="dt-absent" term="absent">When a property has no value, we
        say that it is <term>absent</term>.</termdef>
    </p>
    
    <p>Within this specification, the term URI refers to a
      Uniform Resource Identifier as defined in
      <bibref ref="RFC3986"/> and extended in <bibref ref="RFC3987"/>
      with the new name Internationalized Reference Identifier, IRI. The term URI has been retained in preference to
      IRI to avoid introducing new names for concepts such as “Base URI”
      that are defined or referenced across the whole family of XML
      specifications.</p>
    
    
    
  </div2>
  
  <div2 id="notation">
    <head>Notation</head>
    
    <p>To explain the data model, this specification uses both prose and a defined set of accessor
    functions. The accessors are shown with the
    prefix <emph>dm:</emph>. This prefix is always shown in italics to
    emphasize that these functions are abstract; they exist to explain the
    interface between the data model and specifications that rely on the
    data model: they are not accessible directly from the host
    language.</p>
    
    <p>Several prefixes are used throughout this document for notational
    convenience. The following bindings are assumed.</p>
    
    <olist>
    <item><p><code>xs:</code> bound to
    <code>http://www.w3.org/2001/XMLSchema</code>
    </p></item>
    <item><p><code>xsi:</code> bound to
    <code>http://www.w3.org/2001/XMLSchema-instance</code>
    </p></item>
    <item><p><code>fn:</code> bound to
    <code>http://www.w3.org/2005/xpath-functions</code>
    </p></item>
    </olist>
    
    <p>In practice, any prefix that is bound to the appropriate URI may be used.</p>
    
    <p>The signature of accessor functions is shown using the same style as
    <bibref ref="xpath-functions-40"/>, described in
    <xspecref spec="FO40" ref="func-signatures"/>.</p>
    
    <p>This document relies on the <bibref ref="xml-infoset"/> and
    <loc href="https://www.w3.org/TR/xmlschema-1/#key-psvi">Post-Schema-Validation
    Infoset</loc> (PSVI). Information items
    and properties are indicated by the styles <emph role="info-item">information
    item</emph> and <emph role="infoset-property">infoset property</emph>, respectively.</p>
    
    <p>Some aspects of type assignment rely on the ability to access properties of
    the schema components. Such properties are indicated by curly brackets, e.g.,
    {component property}. Note that this does not mean a lightweight schema processor
    cannot be used, it only means that the application must have some mechanism to
    access the necessary properties.</p>
    
    </div2>
  </div1>
  
  <div1 id="concepts">
    <head>Concepts</head>

  
  <div2 id="basic-concepts">
    <head>Basic Concepts</head>
    <changes>
      <change issue="225" PR="232" date="2022-11-05">
        Clarified the terminology concerning atomic types and type annotations.
      </change>
      <change issue="1337" PR="1361" date="2024-08-02">
        The term <term>atomic value</term> has been replaced by <termref def="dt-atomic-item"/>.
      </change>
    </changes>

<p><termdef id="dt-instance" term="instance of the data model">Every
<term>instance of the data model</term> is a
<termref def="dt-sequence">sequence</termref>.</termdef>
</p>

<p><termdef id="dt-sequence" term="sequence">A <term>sequence</term>
is an ordered collection of zero or more <termref
def="dt-item">items</termref>.</termdef> A sequence cannot be a member
of a sequence. A single item appearing on its own is modeled as a
sequence containing one item. Sequences are defined in <specref
ref="sequences"/>.</p>
    
    <p diff="add" at="2022-11-05"><termdef id="dt-value" term="value">Because every value is a sequence, the term
    <term>value</term> is used synonymously with <termref def="dt-sequence"/>.</termdef></p>

<p><termdef id="dt-item" term="item">An <term>item</term>
is either
a <termref def="dt-node">node</termref>,
a <termref def="dt-function-item">function</termref>,
or an <termref def="dt-atomic-item">atomic item</termref>.</termdef>
</p>

    <p diff="add" at="2022-11-05"><termdef id="dt-item-type" term="item type">An <term>item type</term> represents
a class of <termref def="dt-item">items</termref>.</termdef> An item is said to
<emph>be an instance of</emph> an item type (or to <emph>match</emph> the item type) if it is a member
of that class. Items generally belong to more than one item type, and the
membership of different item types is overlapping.</p>
    
  </div2>
    <div2 id="sequences">
<head>Sequences</head>
 
<p>An important characteristic of the data model is that there is no
distinction between an <termref def="dt-item"/> (a node, function, or <termref def="dt-atomic-item"/>) and a
singleton <termref def="dt-sequence"/> containing that item. An item is
equivalent to a singleton sequence containing that item and vice
versa.</p>
      
      <p><termdef id="dt-singleton" term="singleton">A <term>singleton</term>
      sequence is a <termref def="dt-sequence"/> of length one, that is, a sequence
      containing exactly one item.</termdef></p>

<p>A sequence may contain any mixture of nodes, functions, and 
  <termref def="dt-atomic-item">atomic items</termref>. When a node is added to a sequence its
identity remains the same. Consequently a node may occur in more than
one sequence and a sequence may contain duplicate items.</p>

<p>Sequences never contain other sequences; if sequences are combined,
the result is always a “flattened” sequence. In other words, appending
“(d e)” to “(a b c)” produces a sequence of length 5: “(a b c d e)”.
It <emph>does not</emph> produce a sequence of length 4: “(a b c (d e))”;
such a nested sequence never occurs.</p>

<note>
<p>Sequences replace node-sets from XPath 1.0. In XPath 1.0, node-sets
do not contain duplicates. In generalizing node-sets to sequences,
duplicate removal is provided by functions on node sequences.</p>
</note>
<note>
<p>Arrays and maps are function items and
therefore can also be contained within sequences.</p>
</note>
  
  <p>The following constructor and accessor functions are defined for sequences;
  these provide a formal underpinning for user-visible functions, operators,
  and language constructs.</p>
  
  <div3 id="dm-empty-sequence">
    <head><code>empty-sequence</code> Constructor</head>
    <example role="signature">
      <proto class="dm" name="empty-sequence" return-type="item()*"/>
    </example>
    
    <p>The <code>dm:empty-sequence</code> constructor returns a sequence containing no items.</p>
    
    <p>The function is exposed in XPath as an empty sequence expression, written <code>()</code>.</p>
  </div3>
  
  <div3 id="dm-sequence-concat">
    <head><code>sequence-concat</code> Constructor</head>
    <example role="signature">
      <proto class="dm" name="sequence-concat" return-type="item()*">
        <arg name="input1" type="item()*"/>
        <arg name="input2" type="item()*"/>
      </proto>
    </example>
    
    <p>The <code>dm:sequence-concat</code> constructor returns a sequence by concatenating two supplied sequences.</p>
    <p>The returned sequence contains the items in <code>$input1</code> (retaining order), followed by the items in
      <code>$input2</code> (also retaining order).</p>
    
    <p>The function is exposed in XPath through the comma operator <code>,</code>.</p>
  </div3>
  
  <div3 id="dm-count">
    <head><code>count</code> Accessor</head>
    <example role="signature">
      <proto class="dm" name="count" return-type="xs:integer">
        <arg name="input" type="item()*"/>
      </proto>
    </example>
    
    <p>The <code>dm:count</code> accessor function returns the number of items in <code>$input</code>.</p>
    
    <p>The function is exposed in XPath through the <code>fn:count</code> function.</p>
  </div3>
  
  <div3 id="dm-iterate-sequence">
  <head><code>iterate-sequence</code> Accessor</head>
  
    <example role="signature">
      <proto class="dm" name="iterate-sequence" return-type="item()*">
        <arg name="input" type="item()*"/>
        <arg name="action" type="function(item(), xs:integer) as item()*"/>
      </proto>
    </example>
    
    <p>The <code>dm:iterate-sequence</code> accessor calls the supplied <code>$action</code>
      function once for each item in <code>$input</code>, in order,
      and returns the sequence concatenation of the results. The <code>$action</code> function
      is called with two arguments. The first argument is an item in <code>$input</code>,
      and the second is the 1-based ordinal position of the item within <code>$input</code>.</p>
      
      <p>The function is exposed in XPath most directly through the function <code>for-each</code>,
        as well as <code>for</code> expressions in XPath, <code>for</code> clauses in FLWOR expressions
        in XQuery, and the <code>xsl:for-each</code> instruction in XSLT.
        It also underpins all other functions that manipulate sequences, such as <code>fn:count</code>
       and <code>fn:filter</code>.</p>
    
  </div3>
</div2>

  
  </div1>
  <div1 id="schemas-and-types">
    <head>Schemas and Types</head>
    
    <div2 id="types">
<head>Schema Information</head>

<p>The data model supports strongly typed languages such as
<bibref ref="xpath-40"/> and <bibref ref="xquery-40"/>
that have a type system based on <bibref ref="xmlschema-1"/>. To achieve this,
the data model includes (by reference) the Schema Component Model described in
<bibref ref="xmlschema-1"/>.
</p>

<note>
<p>The Schema Component Model includes a number of kinds of
component, such as type definitions and element and attribute
declarations, and defines the properties and relationships of these
components. Many of these components and properties are not used by the
language specifications that rely on XDM, and where this is the case,
there is no requirement for implementations to make them visible.
However, this specification makes no attempt to define the minimal
subset of the schema component model that is needed to support the
semantics of XPath and XQuery processing.</p>

<p>There are two main areas where the language semantics depend on
information in schema components:</p>

<olist>
<item>
<p>Expressions are evaluated with respect to a static context, which
includes schema components, specifically type definitions, element
declarations, and attribute declarations. The names of such components
may be used in language constructs only if the components are present in
the static context.</p>
</item>
<item>
<p>Values including element and attribute nodes, and <termref def="dt-atomic-item">atomic items</termref>,
have a property called a type annotation whose value is a type: this is
a reference to a type definition in the Schema Component Model.
</p>
</item>
</olist>
</note>
  
  <p>The diagram below illustrates the 
    <phrase diff="chg" at="2022-11-05"><termref def="dt-schema-type"/></phrase>
    system, in which all types are derived from 
    <code>xs:anyType</code>. </p>
  
  &common-anyType.xml;
  
<div3 id="xs-types">
<head>Types adopted from XML Schema</head>
  
  <p diff="add" at="2022-11-05"><termdef id="dt-schema-type" term="schema type">A
  <term>schema type</term> corresponds to a <term>type definition component</term>
  as defined in XSD.</termdef> Schema types are either complex types or simple types;
  simple types are either atomic types, list types, or union types.</p>

<p>The data model adopts the following <phrase diff="add" at="2022-11-05">schema</phrase> types:</p>

<ulist>
<item>
<p>The 19 <phrase diff="add" at="2022-11-05">primitive atomic</phrase> types defined in
<xspecref spec="XS2" ref="built-in-primitive-datatypes"/>
of <bibref ref="xmlschema-2"/>.</p>
</item>
<item>
<p>Three built-in list types:
<code>xs:NMTOKENS</code>, <code>xs:IDREFS</code>, and <code>xs:ENTITIES</code>.
</p>
</item>
<item>
<p>The following types, which were originally defined in
<bibref ref="xpath-datamodel-30"/> and were subsequently adopted by
<bibref ref="xmlschema11-2"/>:
<code>xs:anyAtomicType</code>, <code>xs:dayTimeDuration</code>,
<code>xs:yearMonthDuration</code>.
</p>
</item>
<item>
<p>In the case of a processor that supports
<bibref ref="xmlschema11-2"/>, 
the new union type <code>xs:error</code> (a type with no instances)
and the new derived type <code>xs:dateTimeStamp</code>.</p>
</item>
<item>
<p>The following types, which use the <code>xs:</code> namespace
and are defined here in the data model but not in XML Schema:
<code>xs:untypedAtomic</code>, and
<code>xs:numeric</code>,
a union type whose members are <code>xs:double</code>, <code>xs:float</code>
and <code>xs:decimal</code>.
</p>
</item>
</ulist>
  
  <p diff="add" at="2022-11-05">Schema types fulfill a role different from <termref def="dt-item-type">item types</termref>.
  Schema types other than atomic types arise in the data model only as <termref def="dt-type-annotation">type annotations</termref>
  on element and attribute nodes. Nodes are not instances of schema types in the sense of the XPath <code>instance of</code>
  operator; but an element or attribute node may be an instance of the item type <code>element(*, S)</code> or <code>attribute(*, S)</code>
  where <code>S</code> is a schema type. The node matches this item type if its type annotation is <code>S</code>, or a type derived from 
    <code>S</code>, which will be the case if the node has been validated against type <code>S</code> in the course of 
  schema validation.</p>
  
  <p diff="add" at="2022-11-05">Schema types and item types form overlapping categories:</p>
  <ulist diff="add" at="2022-11-05">
    <item><p>Atomic types belong to both categories.</p></item>
    <item><p>Node types and function types are item types, but they are not schema types.</p></item>
    <item><p>Complex types, list types, and union types are schema types, but they are not item types.</p></item>
  </ulist>
</div3>

<div3 id="schema-consistency" diff="add" at="Issue451">
  <head>Schema Consistency</head>
  

  <p><termdef id="dt-schema" term="schema">Following the terminology of <bibref ref="xmlschema-1"/>,
  a <term>schema</term> is defined as set of schema components. Schema components include,
  for example, element declarations and type definitions.</termdef></p>
  
  <note><p>This contrasts with a <term>schema document</term>, which is an XML document
  containing an <code>xs:schema</code> element and other XML elements such as 
  <code>xs:element</code> and <code>xs:complexType</code>. In popular usage, the term
    <term>schema</term> is often used inaccurately to refer to a <term>schema document</term>.
  A schema generally consists of the result of processing a set of schema documents linked
  using <code>xs:include</code> and <code>xs:import</code> declarations; it may also
  include built-in schema components that are known intrinsically to a processor, or
  schema components that are constructed programmatically.</p></note>
  
  <p>It is possible for an application to use more than one schema. For example, a transformation
  may accept as input a source document validated against a schema <var>X</var>, and produce as output a result
  document validated against a different schema <var>Y</var>; the stylesheet or query might import a schema that is the
    union of <var>X</var> and <var>Y</var>. Different modules of a query, or different packages
  within a stylesheet, may import different schemas. When this happens, there is a requirement
  that the different schemas must be <termref def="dt-schema-compatible">compatible</termref> with each other. This requirement is expanded
  in the following paragraphs.</p>
  
  <p><termdef id="dt-schema-compatible" term="compatible (of schemas)">Two 
    <termref def="dt-schema">schemas</termref> 
    <var>X</var> and <var>Y</var> are 
    <term>compatible</term> if the union of 
    <var>X</var> and <var>Y</var> is a valid <termref def="dt-schema"/>.</termdef> This essentially
      means that there must be no schema components in <var>X</var> and <var>Y</var> that have
    the same name but different definitions.</p>
  
    <p>An implication of this rule is that when one schema document uses <code>xs:redefines</code>
    or <code>xs:override</code> to modify the definitions found in another schema document, the
    resulting schemas will generally be incompatible.</p>
  
  <p>The rule means that when a type <var>T</var> appears in both <var>X</var> and <var>Y</var>,
  the properties of the schema component corresponding to <var>T</var>, and the properties of all 
    the schema components that it refers to, transitively, will be the same.</p>
  
  <p>This will always be true (in the absence of <code>xs:redefines</code> and <code>xs:override</code>)
    if both schemas derive their definition of <var>T</var> from the same
    schema document. It may also be true if the definitions of <var>T</var> derive from different
  schema documents, but in this case processors <rfc2119>may</rfc2119> treat the definitions as incompatible
  without further analysis.</p>
  
  <p>It will <emph>not</emph> always be the case that validating an element node <var>N</var> against type 
    <var>T</var> using schema <var>X</var> has the same outcome as validating the same
    element node <var>N</var> against type <var>T</var> using schema <var>Y</var>. Cases where the outcome
  may be different include the following:</p>
  
  <ulist>
    <item><p>The content model of <var>T</var> includes an element particle <var>E</var>
    whose corresponding element declaration has different substitution group members
    in <var>X</var> and <var>Y</var>.</p></item>
    <item><p>Schema <var>X</var> includes a type <var>U</var> that extends <var>T</var>, and 
      <var>U</var> is not present in <var>Y</var>; element <var>N</var> has the
      attribute <code>xsi:type="U"</code>, which references this extended type definition.</p></item>
    <item><p>The content model of <var>T</var> includes a wildcard particle 
      that specifies <code>processContents="lax"</code> or <code>processContents="strict"</code>; 
      element <var>N</var> has a child <var>C</var> that is matched against this wildcard; a declaration
      for <var>C</var> is present in <var>X</var> but not in <var>Y</var>.
    </p></item>
    <item><p>The content model of <var>T</var> (in XSD 1.1) includes a wildcard particle 
      that specifies <code>notQName="##defined</code>; 
      element <var>N</var> has a child <var>C</var> that is matched against this wildcard; a declaration
      for <var>C</var> is present in <var>X</var> but not in <var>Y</var>.
    </p></item>

  </ulist>
  
  <p>It is essential that nodes validated against one schema can be passed to a stylesheet or query
  that is using a different but compatible schema. This is necessary, for example, to ensure that
  the validated output of one stylesheet can form the validated input of another. 
  The definitions for schema-based 
    <termref def="dt-item-type">item types</termref> such as <code>element(*, T)</code>
    and <code>schema-element(E)</code> therefore allow for the possibility that the node being
  tested against the item type was validated using a different but compatible schema, and by
  implication, that revalidation using the local schema might not succeed.</p>
  
  <note><p>It is potentially useful to prevent differences arising between different schemas
  that share schema components by:</p>
  <ulist>
    <item><p>Disallowing extensions to element declarations and types by using attributes such as
      <code>blockDefault="#all"</code></p></item>
    <item><p>Avoiding use of wildcards whose effect depends on the presence of unrelated
      schema components, for example <code>processContents="lax"</code>
      and <code>processContents="strict"</code>.</p></item>
  </ulist></note>
  

<!--<p>There is a constraint that the total set of <phrase diff="add" at="2022-11-05">schema</phrase> components used during
expression processing (both statically and dynamically) must constitute
a valid schema. This implies, for example, that this total set does not
include two different types with the same expanded name.</p>
-->
<note>
<p>This makes it the responsibility of the processor to ensure that
the schema components used in the static context of a query or
expression during static analysis are compatible with the schema
components used to validate documents during query or expression
evaluation. This specification does not say how this should be achieved.
</p>
</note>

<p>It is also a constraint that the schema information available to the processor must
contain at least the components and properties needed to correctly
implement the semantics of the XPath and XQuery language. For example,
this means that given <phrase diff="chg" at="2022-11-05">an element node</phrase> with a particular type annotation <var>T</var>, and a
  function that expects an argument of type <phrase diff="chg" at="2022-11-05"><code>element(*, S)</code></phrase>, there must be sufficient
information available to the processor to establish whether or not <var>T</var> is
derived from <var>S</var>. As with other consistency constraints described in this
data model, it is a precondition that these constraints are satisfied;
the specifications do not speculate on what happens if they are not.</p>
</div3>

<div3 id="types-representation">
<head>Representation of Types</head>

<p>The data model uses
<termref def="dt-expanded-qname">expanded QNames</termref> to
represent the names of schema types, which include the built-in
types defined by <bibref ref="xmlschema-2"/> and the five additional types
defined by this specification, and may include other user- or
implementation-defined types.</p>

<imp-def-feature>Support for additional user-defined or
implementation-defined types is implementation-defined.</imp-def-feature>

<p>For XML Schema types, the namespace name of the expanded QName is
the {target namespace} property of the type definition, and its local
name is the {name} property of the type definition.</p>

<p>The data model relies on the fact that an expanded QName uniquely
identifies every named type. Although it is possible for different
schemas to define different types with the same expanded QName, at
most one of them can be used in any given validation episode. The data model
cannot support environments where different types with the same expanded QName
are available.
</p>

<imp-dep-feature>The names of anonymous types are implementation-dependent.
</imp-dep-feature>

<p>The scope over which the names of anonymous types must be
meaningful and distinct depends on the processing context.
It is the responsibility of the host language to define the
size and scope of the processing context.</p>
  
  <note diff="add" at="2022-11-05"><p>The type annotation of a schema-validated node,
  or of an <termref def="dt-atomic-item"/> extracted by atomizing a schema-validated node,
  may be an anonymous type. Queries and expressions cannot refer explicitly
  to anonymous types, but it is always possible to test whether such an item
  matches a named type from which the anonymous type is derived.</p></note>

</div3>

<div3 id="types-predefined" diff="chg" at="2023-09-28">
<head>Predefined Types</head>
 
  
  <p>The three atomic types <code>xs:anyAtomicType</code>,
    <code>xs:dayTimeDuration</code>, and
    <code>xs:yearMonthDuration</code> were first introduced in the 2.0 version of this specification,
  and were subsequently adopted by XSD 1.1. These types are always present in the XDM data model,
  with the definitions as given in XSD 1.1, whether or not the processor actually supports XSD 1.1.</p>
  
  <note>
    <p>The types <code>xs:dayTimeDuration</code>, and
      <code>xs:yearMonthDuration</code> have a special status in these specifications because many
    arithmetic operations (such as comparing two durations) are available in XPath only on these
    subtypes of <code>xs:duration</code>, not on the primitive type <code>xs:duration</code> itself.</p>
    <p>The datatype <code>xs:anyAtomicType</code> is an atomic type that
      includes all atomic items (and no values that are not atomic). Its
      base type is <code>xs:anySimpleType</code>, from which all simple
      types, including atomic, list, and union types are derived. All
      primitive atomic types, such as <code>xs:decimal</code> and
      <code>xs:string</code>, have <code>xs:anyAtomicType</code>
      as their base type.</p>
    <p>No type may be derived from <code>xs:anyAtomicType</code>
      by restriction, union, or list.</p>
  </note>
  
  <p>The types <code>xs:untyped</code> and <code>xs:untypedAtomic</code>, although
  they have names in the XSD namespace, are defined in this XDM specification, and not
  in XSD.</p>

  <p>The type <term>xs:untypedAtomic</term> denotes untyped atomic
    data, such as text that has not been assigned a more specific type. It is
    classified as an atomic type. An attribute that has not been validated 
    (or that has been validated in skip mode) is represented in the data
    model by an attribute node with the type annotation <code>xs:untypedAtomic</code>. No
    predefined types are derived from <code>xs:untypedAtomic</code>
    <phrase>and no such derivations are allowed</phrase>.
  </p>
  
  <p>The datatype <term>xs:untyped</term> is used as the type annotation of
    an element node that has not been validated, or that has been validated in
    skip mode. It is a classified as a complex type. The properties of <code>xs:untyped</code>
    are the same as the properties of <code>xs:anyType</code> except for
    the base type and name. The base type of <code>xs:untyped</code> is
    <code>xs:anyType</code>.
    No predefined types are derived from <code>xs:untyped</code>
    <phrase>and no such derivations are allowed</phrase>.</p>



</div3>

<div3 id="xml-and-xsd-versions">
<head>XML and XSD Versions</head>
  
  <changes>
    <change issue="414" PR="546" date="2023-07-25">
      Relaxed the rules regarding use of non-XML characters in instances of <code>xs:string</code>.
    </change>
  </changes>

<p>Some of the types defined in XML Schema have differing definitions
in XSD 1.0 and XSD 1.1; furthermore, some types are defined by
reference to other specifications, including XML and XML Namespaces,
and these too may vary from one version of the specification to the
next.</p>

<p>As a general policy, implementations of data types
<rfc2119>should</rfc2119> support the latest definitive version of any
referenced specification, even if that is published after the date of
this specification.</p>

<p>This means, for example, that the <code>xs:string</code> data type <rfc2119>should</rfc2119>
support the set of characters defined by Unicode. Similarly, the <code>xs:anyURI</code> data
type <rfc2119>should</rfc2119> support the definition used in XSD 1.1 (which allows any
sequence of characters), and the <code>xs:NCName</code> data type <rfc2119>should</rfc2119> support
the definition based on the syntax of a name as defined in both XML
1.1 Second Edition and XML 1.0 Fifth Edition (which provide the same definition).</p>

<p>In practice interoperability problems can arise both because
specifications are not always in synchronization with each other (for
example, XSD 1.0 contains references to dated versions of XML 1.0
other than the latest version), and also because implementations <rfc2119>may</rfc2119>
use third-party components (such as XML parsers, serializers, and
schema validators) that were built against different versions of the
base specifications. For these reasons, use of the latest version of
referenced specifications is generally <emph>recommended</emph> but not
<emph>required</emph>.
It is implementation-dependent how a processor handles any such
conflicts.</p>

<p diff="chg" at="2023-06-12"><termdef term="string" id="dt-string">A
<term>string</term>
is a sequence of zero or more
<termref def="dt-character">characters</termref>.</termdef></p>

<p diff="chg" at="2023-06-12"><termdef term="character" id="dt-character">A
<term>character</term> is any Unicode character.</termdef>
Implementations <rfc2119>may</rfc2119> restrict characters
to those Unicode characters allowed by the <code>Char</code>
production in <bibref ref="xml"/>. Unpaired surrogates are always forbidden.</p>

<p><termdef id="dt-codepoint" term="codepoint">A
<term>codepoint</term> is a non-negative integer assigned to a
<termref def="dt-character">character</termref> by the Unicode
consortium, or reserved for future assignment to a
character.</termdef></p>

<p diff="add" at="2023-06-12">The definitions of <termref def="dt-string">string</termref> and
<termref def="dt-character">character</termref> in the data model
allow an implementation to accept input that cannot occur in a
well-formed XML document. For example, an implementation might allow
the <code>unparsed-text()</code> function to return the content of a
text file that includes the control character <char>U+0007</char> or might
not restrict what <code>codepoints-to-string()</code> can return.</p>

<p diff="add" at="2023-06-12">An implementation that allows a broader repertoire of characters to
be consumed by the processor, <rfc2119>must</rfc2119> ensure that</p>

<olist diff="add" at="2023-06-12">
<item>
<p>Any characters serialized with the XML or XHTML output methods satisfy the
well-formedness criteria of the selected version of XML.</p>
</item>
<item><p>Any schema validation carried out using an XML Schema 1.0 or 1.1 schema rejects
any nodes or <termref def="dt-atomic-item">atomic items</termref> containing characters that do not satisfy the
constraints of the selected version of XML.</p></item>
</olist>
  
  <note diff="add" at="2023-09-28">
    <p>The lexical space of type <code>xs:duration</code> is defined in XSD 1.1 part 2 (§3.3.6.2) 
      in two different ways:
    with a BNF grammar starting with the production <code>durationLexicalRep</code>, and with a regular 
    expression. The two definitions are inconsistent: the BNF allows a decimal point at the start or end
    of the seconds component, while the regular expression requires any decimal point to be preceded and followed
    by a digit. For the purposes of this specification, the regular expression is considered to be 
    correct, and the BNF incorrect; this makes the representation identical to that in XSD 1.0, 
    and is compatible with ISO 8601.</p>
  </note>
</div3>

</div2>
  
<div2 id="types-hierarchy">
<head>Type System</head>
  
  <p>Every value manipulated by XPath, XQuery, or XSLT is a <termref def="dt-sequence"/>
  comprising zero or more <termref def="dt-item">items</termref>.</p>
  
  <p><termdef id="dt-sequence-type" term="sequence type">A <term>sequence type</term>
    constrains the set of permitted sequences, by defining the permitted 
    <termref def="dt-item-type">item types</termref>
  and the permitted number of items in the sequence (exactly zero, exactly one, zero-or-more,
  one-or-more, zero-or-one).</termdef></p>
  
  <p diff="chg" at="2022-11-05">Every <termref def="dt-item">item</termref> is
    an instance of one or more <termref def="dt-item-type">item types</termref>:</p>
  
  <ulist diff="chg" at="2022-11-05">
    <item><p>All items are instances of the type <code>item()</code>. There are three kinds of
    item: atomic items, generic nodes (GNodes), and function items.</p></item>
    
    <item><p>Every <termref def="dt-atomic-item"/> is an instance of a specific <termref def="dt-atomic-type"/>
      determined by its <termref def="dt-type-annotation"/>; it is also an instance of every type from which that
      type is derived by restriction (directly or indirectly), and of every union type that
      includes that type as a member type.</p></item>
    
    <item><p>A generic node (GNode) is either an XNode (for "XML node"), or a JNode (for "JSON node").
      For continuity reasons, throughout these specifications the term <term>node</term>, when
      used without qualification, means an XNode; furthermore the item type <code>node()</code>
      refers exclusively to an XNode. The term <term>XNode</term> is used only when there
      is a need to distinguish clearly from JNodes.</p>
      
      <p>XNodes represent the constructs found in an XML document.
        Every <termref def="dt-node"/> (that is, every XNode) is an instance of the type <code>node()</code>, and more
      specifically it is an instance of one of seven node kinds: <code>document()</code>,
      <code>element(*)</code>, <code>attribute(*)</code>, <code>text()</code>,
      <code>comment()</code>, <code>processing-instruction()</code>, or
      <code>namespace()</code>. Nodes may also be instances of more specific
      types characterized by the node name and type annotation.</p>
    
      <p>JNodes are newly introduced in 4.0 for the purpose of navigating trees of maps and arrays,
      typically derived by parsing JSON. A JNode wraps a value (which may be any sequence). </p>
    </item>
    
    <item><p>Every <termref def="dt-function-item"/> is an instance of the generic type <code>function(*)</code>,
      and also of a specific function type defining the types of the function's parameters and the
      type of the result.</p>
      <p>A <termref def="dt-map-item"/>, as well as being a function, is also an instance of the generic
        map type <code>map(*)</code>, of more specific map types <code>map(K, V)</code> defining the
        types of the keys and values, and perhaps of one or more record types that associate a type with 
        specific key values.</p>
      <p>An <termref def="dt-array-item"/>, as well as being a function, is also an instance of the generic
        array type <code>array(*)</code>, and also of more specific array types <code>array(M)</code>
        defining the type of the array's members.</p></item>
  </ulist>
  
  
  <p>This section describes how <termref def="dt-item-type">item types</termref> relate to each other.</p>

<p>The diagrams below show how nodes, functions,
<termref def="dt-primitive-simple-type">primitive simple types</termref>,
and user defined types fit together into a type system.

In the diagrams, connecting lines represent relationships between derived types
and the types from which they are derived;
the latter are always higher and to the left of the latter. 
</p>

<p>The <code>xs:IDREFS</code>, <code>xs:NMTOKENS</code>,
<code>xs:ENTITIES</code> types, and <code>xs:numeric</code>, and both the
<code>user-defined list types</code> and
<code>user-defined union types</code>
are special types in that these types are lists or unions
rather than types derived by extension or restriction.</p>

<p>The first diagram illustrates the
relationship of various <termref def="dt-item-type">item
types</termref>. Item types in the data model form a directed graph,
rather than a hierarchy or lattice: in the relationship defined by the
<code>derived-from(A, B)</code> function, some types are derived from
more than one other type. Examples include functions
(<code>function(xs:string) as xs:int</code> is substitutable for
<code>function(xs:NCName) as xs:int</code> and also for
<code>function(xs:string) as xs:decimal</code>), and union types
(<code>A</code> is substitutable for the union type <code>(A | B)</code> and also
for the union type <code>(A | C)</code>). In XDM, item types include node types,
function types, and built-in atomic types. The list, which shows only
hierarchic relationships, is therefore a simplification of the full
model.</p>

&common-item-types.xml;

  <p>The XPath Data Model is the abstraction over which XPath expressions are evaluated.
    Historically, all of the items in the data model could be derived directly (nodes) or
    indirectly (typed values, sequences) from an XML document. However, as the XPath
    expression language has matured, new features have been added which require additional
    types of items to appear in the data model. These items have no direct XML serialization,
    but they are never the less part of the data model.
  </p>


<p id="hier_anyAtomicType">The next diagram shows all of the
atomic types, including the primitive simple types and the built-in
types derived from the primitive simple types. This includes all the
built-in datatypes defined in <bibref ref="xmlschema-2"/>. Atomic types
act both as <termref def="dt-item-type">item types</termref> (meaning
they can be used to declare the types of variables and function arguments),
and as <termref def="dt-schema-type">schema types</termref> (meaning they
can be used as type annotations on nodes).</p>

&common-anyAtomicType.xml;

<p>For further detail regarding atomic items see <specref ref="atomic-items"/>.</p>











</div2>

  </div1>
  <div1 id="atomic-items">
    <head>Atomic Items</head>
    
      <changes>
    <change issue="1337" PR="1361" date="2024-08-02">
      The term <term>atomic value</term> has been replaced by <termref def="dt-atomic-item"/>.
    </change>
  </changes>


    <p diff="chg" at="2022-11-05"><termdef id="dt-atomic-item" term="atomic item">An
<term>atomic item</term> is a pair (<var>T</var>, <var>D</var>) where <var>T</var> (the <termref def="dt-type-annotation"/>)
  is an <termref def="dt-atomic-type"/>, and <var>D</var> (the <termref def="dt-datum"/>)
  is a point in the value space of <var>T</var>.</termdef></p>
    
    <p diff="chg" at="2022-11-05"><termdef id="dt-datum" term="datum">The <term>datum</term> of an <termref def="dt-atomic-item"/>
      is a point in the value space of its type, which is also a point in the value space of
      the primitive type from which that type is derived.</termdef> There are 20 primitive atomic types (19 defined
      in XSD, plus <code>xs:untypedAtomic</code>), and these have non-overlapping value spaces, so each
      datum belongs to exactly one primitive atomic type.</p>
    
    <note diff="chg" at="2022-11-05"><p>The term <term>value space</term> is defined in <bibref ref="xmlschema11-2"/>
      as a set of <emph>values</emph>. The term <term>datum</term> is used here in preference to <emph>value</emph>,
      because <termref def="dt-value"/> has a different meaning in this data model.</p></note>

<p><termdef id="dt-atomic-type" term="atomic type">An <term>atomic type</term>
is either a <termref def="dt-primitive-simple-type">primitive simple type</termref>
  <phrase diff="add" at="2022-11-05">with variety <code>atomic</code>,</phrase>
or a type derived by restriction from
another atomic type.</termdef>
(Types derived by list or union are not atomic.)
</p>
    
    <note diff="add" at="2022-11-05"><p>Atomic types include the 19 primitive atomic
    types defined in XSD (such as <code>xs:string</code>, <code>xs:boolean</code>,
    and <code>xs:decimal</code>), the built-in non-primitive types defined in XSD
    (such as <code>xs:integer</code>, and <code>xs:NCName</code>, and <code>xs:dayTimeDuration</code>), 
    atomic types derived from these in a user-defined schema, and the 
    special type <code>xs:untypedAtomic</code>.</p></note>

<p><termdef id="dt-primitive-simple-type" term="primitive simple type">The
<term>primitive simple types</term> are the types defined
in <specref ref="xs-types"/>.</termdef></p>
    
    <p diff="chg" at="2022-11-05"><termdef id="dt-type-annotation" term="type annotation">The term <term>type annotation</term> has
      two slightly different meanings. For an <termref def="dt-atomic-item"/>, the type annotation of the value
      is the most specific <termref def="dt-atomic-type"/> that it is an instance of (it is also an instance of every type from which that
      type is derived). For an element or attribute node, the type annotation is the <termref def="dt-schema-type"/>
      (a simple or complex type) against which the node has been validated, defaulting to
      <code>xs:untypedAtomic</code> for unvalidated attribute nodes, and <code>xs:untyped</code>
      for unvalidated element nodes.</termdef></p>  

    <p><phrase diff="chg" at="2022-11-05">Named types are identified</phrase> in the data model by an
    <termref def="dt-expanded-qname">expanded QName</termref>. <phrase diff="add" at="2022-11-05">A schema 
      may also contain anonymous types, and these may be used as <termref def="dt-type-annotation">type annotations</termref> 
      on nodes and atomic items; anonymous types, however, cannot be referenced explicitly in programs.</phrase>
    </p>
    
   

    <p diff="chg" at="2022-11-05"><termdef id="dt-expanded-qname" term="expanded QName">An
<term>expanded QName</term> is a <phrase diff="del" at="2022-11-05">set of three values</phrase> 
  <phrase diff="add" at="2022-11-05">triple</phrase> consisting of a
  possibly <phrase diff="chg" at="2022-11-05">absent</phrase> prefix, a possibly 
  <phrase diff="chg" at="2022-11-05">absent</phrase> namespace URI, and a local
name.</termdef> See <specref ref="qnames-and-notations"/>.</p>


<div2 id="StringValue">
<head>String Values</head>
  
  <p>An <termref def="dt-atomic-item"/> can be constructed from a lexical
representation. Given a string and an <termref def="dt-atomic-type"/>, the atomic item is
constructed in such a way as to be
<loc href="#typed-string-relationships">consistent with schema validation</loc>.
If the
string does not represent a valid value of the type, an error is
raised. When <code>xs:untypedAtomic</code> is specified as the type,
no validation takes place. The details of the construction are
described in <xspecref spec="FO40" ref="constructor-functions"/>
and the related <xspecref spec="FO40" ref="casting"/>
section of <bibref ref="xpath-functions-40"/>.
</p>
    

<p>A string value can be constructed from an <termref def="dt-atomic-item"/>.
Such a value is constructed by
converting the atomic item to its string representation as described
in <xspecref spec="FO40" ref="casting"/>.
</p>
</div2>

<div2 id="NegativeZero">
<head>Negative Zero</head>

<p>The <code>xs:float</code> and <code>xs:double</code> data types
in the data model have the same value space as in
XML Schema 1.1 (<bibref ref="xmlschema11-2"/>).
Specifically they include both negative and positive zero, and in this
respect they differ from XML Schema 1.0.</p>

<p>To accommodate this difference,
when converting from an
<code>xs:string</code> to an <code>xs:float</code> or
<code>xs:double</code>, it is implementation-defined whether the
lexical value “-0” (and similar forms such as “-0.0”) convert to
negative zero or to positive zero in the value space.</p>

<!-- I think it's *really* weird that imp-def-feature and imp-dep-feature
     produce no output in the normal flow, but I'm not going to try to
     change that today. -->
<imp-def-feature>When converting from an
<code>xs:string</code> to an <code>xs:float</code> or
<code>xs:double</code>, it is implementation-defined whether the
lexical value “-0” (and similar forms such as “-0.0”) convert to
negative zero or to positive zero in the value space.</imp-def-feature>
</div2>

<div2 id="dates-and-times">
<head>Dates and Times</head>

<p>The date and time types require special attention. This section
applies to implementations that store the typed value of
<code>xs:dateTime</code>, <code>xs:date</code>, <code>xs:time</code>,
<code>xs:gYearMonth</code>, <code>xs:gYear</code>,
<code>xs:gMonthDay</code>, <code>xs:gMonth</code>,
<code>xs:gDay</code>, and types that are derived from them. These are
known collectively as the date/time types in this specification.</p>

<p>The values of the date/time types are represented in the data model
using seven components:</p>

<glist>
<gitem>
<label>year</label>
<def>
<p>An <code>xs:integer</code>.
</p>
</def>
</gitem>

<gitem>
<label>month</label>
<def>
<p>An <code>xs:integer</code> between 1 and 12, inclusive.
</p>
</def>
</gitem>

<gitem>
<label>day</label>
<def>
<p>An <code>xs:integer</code> between 1 and 31, inclusive, possibly
restricted further depending on the values of month and year.
</p>
</def>
</gitem>

<gitem>
<label>hour</label>
<def>
<p>An <code>xs:integer</code> between 0 and 23, inclusive.
</p>
</def>
</gitem>

<gitem>
<label>minute</label>
<def>
<p>An <code>xs:integer</code> between 0 and 59, inclusive.
</p>
</def>
</gitem>

<gitem id="tuple-timezone">
<label>second</label>
<def>
<p>An <code>xs:decimal</code> greater than or equal to zero and less
than 60. Leap seconds are not supported.
</p>
</def>
</gitem>

<gitem>
<label>timezone</label>
<def>
<p>An <code>xs:dayTimeDuration</code> between -PT14H00M and PT14H00M,
inclusive. All timezone values must be an integral number of minutes.
</p>
</def>
</gitem>
</glist>

<p>Components that are intrinsic to the datatype (for example, day,
month, and year in a <code>xs:date</code>) are required; components
that can never be part of a datatype (for example, years in a
<code>xs:time</code>) must be missing. Missing components are
represented by the empty sequence. When a component is present, it
contains the “local value” that has not been normalized in any way.
The timezone component is optional for all the date/time datatypes.</p>

<p>Thus, the lexical <code>xs:dateTime</code> representation
“<code>2003-01-02T11:30:00-05:00</code>” is stored as
“<code>{2003,&#160;1,&#160;2,&#160;11,&#160;30,&#160;0.0,&#160;-PT05H00M}</code>”.
The value of the lexical representation “<code>2003-01-16T16:30:00</code>”
is stored as
“<code>{2003,&#160;1,&#160;16,&#160;16,&#160;30,&#160;0,&#160;()}</code>”
because it has no timezone.
The value of the lexical <code>xs:gDay</code> representation
“<code>---30+10:30</code>” is
stored as
“<code>{(),&#160;(),&#160;30,&#160;(),&#160;(),&#160;(),&#160;PT10H30M}</code>”.
</p>

<p>The lexical form “<code>24:00:00</code>” is normalized in the component
model. As a <code>xs:time</code>, it is stored as
“<code>{(),&#160;(),&#160;(),&#160;0,&#160;0,&#160;0.0,&#160;()}</code>”
and the <code>xs:dateTime</code> representation
“<code>1999-12-31T24:00:00</code>” is stored as
“<code>{2000,&#160;1,&#160;1,&#160;0,&#160;0,&#160;0.0,&#160;()}</code>”.
</p>

<note><p>Implementations are permitted to store date/time values in
any representation that is convenient for them, provided that the
individual properties can be accessed and modified.</p></note>

</div2>

<div2 id="qnames-and-notations">
<head>QNames and NOTATIONS</head>

<p>The <code>QName</code> and <code>NOTATION</code> data types require
special attention. The following sections apply to
<code>xs:QName</code>, <code>xs:NOTATION</code>, and types derived
from them. These types are referred to collectively as “qualified
names”.</p>

<p>As defined in XML Schema, the lexical space for qualified names
includes a local name and an optional namespace prefix. The value
space for qualified names contains a local name and an optional
namespace URI. Therefore, it is not possible to derive a lexical value
from the typed value, or vice versa, without access to some context
that defines the namespace bindings.</p>

<p>When qualified names exist as values of nodes in a well-formed document,
it is always possible to determine such a namespace context. However,
the data model also allows qualified names to exist as freestanding
<termref def="dt-atomic-item">atomic items</termref>, or as the name or value of a parentless attribute node,
and in these cases no namespace context is available.</p>

<p>In this Data Model, therefore, the value space for qualified names
contains a local-name, an optional namespace URI, and an optional
prefix. The prefix is used only when producing a lexical
representation of the value, that is, when casting the value to a
string. The prefix plays no part in other operations involving
qualified names: in particular, two qualified names are equal if their
local names and namespace URIs match, regardless whether they have the
same prefix.</p>

<p>The following consistency constraints apply:</p>

<ulist>
<item>
<p>If the namespace URI of a qualified name is
<termref def="dt-absent">absent</termref>, then the prefix must
also be
<termref def="dt-absent">absent</termref>.</p>
</item>

<item>
<p>For every element node whose name has a prefix, the prefix must be one
that has a binding to the namespace URI of the element name in the namespaces
property of the element.</p>
</item>

<item>
<p>For every element node whose name has no prefix, the element must have
a binding for the empty prefix to the namespace URI of the element name,
or must have no binding for the empty prefix in
the case where the name of the element has no namespace URI.</p>
</item>

<item>
<p>For every attribute node whose name has a prefix, the attribute node must
either be parentless, or the prefix must be one that has a binding to the
namespace URI of the attribute name in the namespaces property of the
parent element.</p>
</item>

<item>
<p>For every qualified name that contains a prefix and that is included in
the typed value of an element node, or of an attribute node that has an
element node as its parent, the prefix must be one that is bound to the
namespace URI of the qualified name in the namespaces property of that
element.</p>
</item>

<item>
<p>For every qualified name that contains a namespace URI and no prefix, and
that is included in the typed value of an element node, or of an attribute
node that has an element node as its parent, that element node must have a
binding for the empty prefix to that namespace URI in its namespace property.
</p>
</item>

<item>
<p>For every qualified name that contains neither a namespace URI nor a
prefix, and that is included in the typed value of an element node, or of an
attribute node that has an element node as its parent, that node
must not have a binding for the empty prefix.</p>
</item>

<item>
<p>No qualified name that contains a prefix may be included in the typed value of
an attribute node that has no parent.</p>
</item>
</ulist>
</div2>

  </div1>
  
  <div1 id="generic-nodes">
    <head>Generic Nodes (GNodes)</head>
    
    <changes>
      <change issue="2025" PR="2031" date="2025-06-11">
        JNodes are introduced to represent nodes in a JSON tree. The term XNode is introduced
        when we need to distinguish XML nodes from JSON nodes; and the term GNode (for <term>generic node</term>)
        is used as a collective term for XNodes and JNodes.
      </change>
    </changes>
    <p><termdef id="dt-GNode" term="GNode">The term <term>generic node</term> or <term>GNode</term>
    is a collective term for <termref def="dt-XNode">XNodes</termref> (more commonly called simply
      <termref def="dt-node">nodes</termref>) representing
    the parts of an XML document, and <termref def="dt-JNode">JNodes</termref>, 
    often used to represent the parts of a JSON document.</termdef>
    </p>
    
    <p>An <termref def="dt-XNode">XNode</termref>, more commonly referred
      to simply as a <termref def="dt-node"/>, represents a construct found in an XML document. There are seven
      kinds: document nodes, element nodes, attribute nodes, text nodes, comment nodes,
      processing instruction nodes, and namespace nodes.</p>
    <p>A <termref def="dt-JNode">JNode</termref> represents an encapsulation
      of a value in a tree of <termref def="dt-map-item">maps</termref> and 
      <termref def="dt-array-item">arrays</termref>, such as might be obtained by parsing a JSON
      document. XDM maps and arrays, however, are more general than those found in JSON.</p>
    
    <p>Both kinds of GNode (XNodes and JNodes) form part of a tree structure. Each GNode, other
    than the root of a tree, has a single parent GNode and zero or more child GNodes.
    GNodes have unique identity, and the GNodes within a tree have an ordering called
    document order.</p>
    
    <p><termdef id="dt-root-GNode" term="root GNode">The term <term>root GNode</term> refers to the 
      topmost GNode of a tree, that is, a GNode with no parent.</termdef>
    Every tree has exactly one root GNode and every other node can be reached
    from exactly one root node.
  </p>

<note><p>In the XPath 1.0 datamodel only document nodes
  could be parentless, so the term <emph>root node</emph> was synonymous with <emph>document node</emph>.
  The term has now been generalized.</p>
</note>
    
    <note diff="add" at="2022-11-05"><p>Generally, the term <term>tree</term>
    is used to refer to a complete tree rooted at a parentless node. On occasions,
    which should be clear from the context, the same term is used to refer
    to a subtree, that is, a tree forming part of a larger tree.</p></note>
    
    <p><termdef id="dt-XTree" term="XTree">A tree that is rooted at a parentless
    <termref def="dt-XNode"/> is referred to as an <term>XTree</term>.</termdef>
    All the nodes in an XTree are XNodes.</p>
    
    <note><p>The term <term>tree</term> is often used without qualification
    to refer to an <termref def="dt-XTree"/>, when the context makes this clear.</p></note>
    
    <p><termdef id="dt-JTree" term="JTree">A tree that is rooted at a parentless
    <termref def="dt-JNode"/> is referred to as a <term>JTree</term>.</termdef>
    All the nodes in a JTree are JNodes.</p>
    
    <note><p>A JNode encapsulates an arbitrary <termref def="dt-value"/>, which may
    contain any items including <termref def="dt-XNode">XNodes</termref>. These XNodes
    are not regarded as part of the JTree.</p></note>

 <div2 id="node-identity">
    <head>Node Identity</head>
    
    <p>Each <termref def="dt-GNode"/> has a unique identity.</p>
    
    <p>The identity of a <termref def="dt-GNode"/> is distinct from its value or other intrinsic properties; nodes may be
    distinct even when they have the same values for all intrinsic
    properties other than their identity.</p>
    
   <note><p>The
    identity of <termref def="dt-atomic-item">atomic items</termref>, by contrast, is determined solely by their
    intrinsic properties. No two distinct integers, for example, have the
    same value;
    every instance of the value “5” as an integer is identical to every
    other instance of the value “5” as an integer.
    </p></note>
    
    <note>
    <p>The concept of node identity should not be confused with the
    idea that the string value of an element or attribute node can act as 
    a unique identifier for its parent
    element within the containing document, typically because it has been validated
    against a schema or DTD that declares it as an ID. Such an element or attribute
    node will have its <function>is-id</function> property set to true.</p>
    </note>
    </div2>
    
    <div2 id="document-order">
<head>Document Order</head>

<p><termdef id="dt-document-order" term="document order">A
<term>document order</term> is defined among all the GNodes
accessible during a given query or transformation. Document order is a
total ordering, although the relative order of some GNodes is
implementation-dependent. Informally, document order is the order in
which GNodes appear when serialized.</termdef>
<termdef id="dt-stable" term="stable">Document order is
<term>stable</term>, which means that the relative order of two
GNodes will not change during the processing of a given query or
transformation, even if this order is implementation-dependent.</termdef></p>

<p>Within an <termref def="dt-XTree"/>, document order satisfies the following constraints:</p>

<olist>
<item>
<p>The root <termref def="dt-XNode"/> precedes any other XNode.
</p>
</item>

<item>
<p>Every XNode precedes all of its children (and therefore precedes all of its descendants).</p>
</item>

<item>
<p>Namespace nodes associated with an element node <var>E</var> occur after
  <var>E</var> and before any attributes or children of <var>E</var>. 
  The relative order of these namespace nodes is
stable but implementation-dependent.</p>
<imp-dep-feature>The relative order of namespace nodes is
stable but implementation-dependent.</imp-dep-feature>
  <note><p>Every element node has at least one associated namespace node,
  that for the XML namespace.</p></note>
</item>

<item>
<p>Attribute nodes associated with an element node <var>E</var> 
  occur after the namespace nodes of <var>E</var>,
  and before any children of <var>E</var>.The relative order of attribute nodes is
stable but implementation-dependent.</p>
<imp-dep-feature>The relative order of attribute nodes is
stable but implementation-dependent.</imp-dep-feature>
</item>

<item>
<p>The relative order of siblings is the order in which they occur in
the &dm.prop.children; property of their parent node.</p>
</item>

<item>
<p>If <var>P</var> and <var>Q</var> are both children of an element node <var>E</var>, and
  if <var>P</var> precedes <var>Q</var>, then the children (and therefore the descendants) 
  of <var>P</var> precede <var>Q</var>.</p>
</item>
</olist>
      
      <p>Similarly, within a <termref def="dt-JTree"/>, document order satisfies the following constraints:</p>

      <olist>
        <item>
        <p>The root <termref def="dt-JNode"/> precedes any other JNode.
        </p>
        </item>
      
        <item>
          <p>Every JNode occurs before all of its children (and therefore, before all of its descendants).</p>
        </item>
        
        <item>
<p>The relative order of siblings is the order in which they occur in
the <emph role='dm-node-property'>j-children</emph> property of their parent JNode.</p>
</item>

<item>
<p>If <var>P</var> and <var>Q</var> are both children of a JNode node <var>J</var>, and
  if <var>P</var> precedes <var>Q</var>, then the children (and therefore the descendants) 
  of <var>P</var> precede <var>Q</var>.</p>
</item>
      </olist>
        


<p>The relative order of GNodes in distinct trees is stable but
implementation-dependent, subject to the following constraint: If
any GNode in a given GTree <var>T1</var> precedes any node in a different
tree <var>T2</var>, then all GNodes in <var>T1</var> are before all GNodes in
<var>T2</var>.</p>
<imp-dep-feature>The relative order of distinct trees is
stable but implementation-dependent.</imp-dep-feature>
</div2>
  </div1>

<div1 id="documents-and-nodes">
  <head>XML Documents and Nodes</head>
  
  
<div2 id="nodes">
  
  <head>XML Nodes</head>
  
  <p><termdef id="dt-XNode" term="XNode">An <term>XNode</term>
  is an <termref def="dt-item"/> that represents one of the seven kinds
  of construct found in an XML document: elements, attributes, text nodes,
  comment nodes, processing instructions, namespaces, and the document node itself.</termdef></p>
  
  <p><termdef id="dt-node" term="node">For continuity, and because the term is
  used in many other specifications, the term <term>node</term> is used as a synonym
  for <termref def="dt-XNode"/> in cases where the meaning is clear from the context.</termdef></p>
  
  <p>XNodes are used to represent the structure of an XML document in the form of a tree.</p>

<p>Every node is one of the seven kinds of nodes defined in <specref
ref="node-kinds"/>. Nodes form a tree. Each node has at most one parent
(reachable via the <function>parent</function> accessor) and zero or more descendant
nodes that are reachable directly or indirectly
via the <function>children</function>,
<function>attributes</function>, and
<function>namespace-nodes</function> accessors.</p>


<note><p>The term <term>root node</term> means any node that has no parent. 
  It may be any kind of node. In the XPath 1.0 datamodel only document nodes
  could be parentless, so the term root node always meant a document node.</p>
</note>
    
    <note><p>Generally, the term <term>tree</term>
    is used to refer to a complete tree rooted at a parentless node. On occasions,
    which should be clear from the context, the same term is used to refer
    to a subtree, that is, a tree forming part of a larger tree.</p></note>

<p><termdef id="dt-document" term="document">An
<termref def="dt-XTree"/> whose root node is a &documentNode; is referred to as a
<term>document</term>.</termdef></p>

<p><termdef id="dt-fragment"
term="fragment">An <termref def="dt-XTree"/> whose root node is not a &documentNode; is
referred to as a <term>fragment</term>.</termdef></p>



</div2>







<div2 id="namespace-names">
<head>Namespace Names</head>

<p>The specifications
<bibref ref="xml-names"/> and <bibref ref="xml-names11"/>
introduce
the concept of a namespace name. In <bibref ref="xml-names"/> a namespace name
is required to be a URI; in <bibref ref="xml-names11"/> it is required to be an
IRI; but both specifications explicitly do not require a processor to
check that namespace names appearing in an instance document are in
fact valid URIs or IRIs.</p>

<p><termdef id="dt-namespace-uri" term="Namespace URI"> This
specification uses the term <term>Namespace URI</term> to refer to a
namespace name, whether or not it is a valid URI or IRI</termdef>.
Following the lead of <bibref ref="xml-names"/> and <bibref ref="xml-names11"/>,
processors implementing this data model <rfc2119>may</rfc2119> raise an error if a
namespace name is not a valid URI or IRI (depending on whether they
support
<bibref ref="xml-names"/> or <bibref ref="xml-names11"/>),
but they are <emph>not required</emph> to make any checks.
Note that the use of a relative reference as a namespace name is
deprecated and is defined to be meaningless, but it is not an error.
Namespace names, whatever form they take, are treated as character
strings and compared for equality using codepoint-by-codepoint
comparison, subject only to whitespace normalization if they appear in
a context (for example, within an attribute value) where this is
appropriate.</p>

<p>In some interfaces, namespace names are held as values of type
<code>xs:anyURI</code>. For example, the namespace part of an expanded QName is
defined to be a value of type <code>xs:anyURI</code>. In
<bibref ref="xmlschema-2"/>, the type <code>xs:anyURI</code> imposes some
restrictions on the value space, but there is latitude for
implementers to decide exactly what these restrictions are. In
<bibref ref="xmlschema11-2"/> there are no restrictions on the form of
an <code>xs:anyURI</code> value, so any sequence of characters is
acceptable within the value space. In this and related specifications,
the use of the type <code>xs:anyURI</code> to hold a namespace name does not imply
any restrictions on the value space beyond those described in this
section: implementations <rfc2119>may</rfc2119> reject character strings that are not
valid URIs or IRIs, but they are <emph>not required</emph> to do so.
</p>
</div2>

  
<div2 id="construction">
<head>Document Construction</head>

<p>This section describes the constraints on <termref def="dt-document">documents</termref> 
  (that is, trees of nodes).</p>

<p>The data model supports well-formed XML documents conforming to
<bibref ref="xml-names"/> or <bibref ref="xml-names11"/>.
Documents that are not well-formed are,
by definition, not XML. XML documents that do not conform to
<bibref ref="xml-names"/> or <bibref ref="xml-names11"/>
are not supported (nor are they supported by
<bibref ref="xml-infoset"/>).</p>

<p>In other words, the data model supports the following classes
of XML documents:</p>

<ulist>
  <item>
    <p>Well-formed documents conforming to <bibref ref="xml-names"/> or
<bibref ref="xml-names11"/>.</p>
  </item>
  <item>
    <p>DTD-valid documents conforming to <bibref ref="xml-names"/> or
<bibref ref="xml-names11"/>, and</p>
  </item>
  <item>
    <p>W3C XML Schema-validated documents.</p>
  </item>
</ulist>

<p>This document describes how to construct a document (a tree of nodes) 
  from an infoset (<bibref ref="xml-infoset"/>) or a Post Schema Validation
Infoset (PSVI), the augmented infoset produced by an XML Schema
validation episode.</p>

<p>A document can also be constructed directly
through application APIs, or from non-XML sources such as relational
tables in a database.
Data model construction from sources other than
an Infoset or PSVI is implementation-defined.
Regardless of how an instance of the data model
is constructed, every node and <termref def="dt-atomic-item"/> in the data model must
have a typed value that is consistent with its type.</p>

<imp-def-feature>Data model construction from sources other than
an Infoset or PSVI is implementation-defined.</imp-def-feature>

<p>The data model supports some kinds of values that are not supported
by <bibref ref="xml-infoset"/>. Examples of these are
<termref def="dt-fragment">document fragments</termref>
and sequences of &documentNode;s.
The data model also supports values that are not nodes. Examples of
these are sequences of <termref def="dt-atomic-item">atomic items</termref>,
or sequences mixing nodes and atomic
items. These are necessary to be able to represent the results of
intermediate expressions in the data model during expression
processing.
</p>

<div3 id="const-other">
<head>Direct Construction</head>

<p>Although this document describes construction of an instance of the
data model in terms of infoset properties, an infoset is not a
necessary precondition for building an instance of the data model.</p>

<p>There are no constraints on how an instance of the data model may be
constructed directly, save that the resulting instance
<rfc2119>must</rfc2119> satisfy all of the constraints described in
this document.</p>

</div3>

<div3 id="const-infoset">
<head>Construction from an Infoset</head>

<p>An instance of the data model can be constructed from an infoset
that satisfies the
following general constraints:</p>

<ulist>
<item><p>All general and external parsed entities must be fully expanded. The
Infoset must not contain any <emph role="info-item">unexpanded entity
reference information items</emph>.</p>
</item>
<item><p>The infoset <rfc2119>must</rfc2119> provide all of the properties identified as
<quote>required</quote> in this document.
The properties identified as <quote>optional</quote>
may be used, if they are present. All other properties are ignored.</p>
</item>
</ulist>

<p>An instance of the data model constructed from an information set
<rfc2119>must</rfc2119> be consistent with the description provided
for each node kind.</p>

<p>Furthermore, construction of an instance
of the data model from an Infoset is guaranteed to be
well-defined only for those Infosets that could have been derived from a
conforming XML document.</p>

</div3>

<div3 id="const-psvi">
<head>Construction from a PSVI</head>

<p>An instance of the data model can be constructed from a PSVI, whose
element and attribute information items have been strictly assessed,
laxly assessed, or have not been assessed. Constructing an instance of
the data model from a PSVI <rfc2119>must</rfc2119> be consistent with
the description provided in this section and with the description
provided for each node kind.</p>

<p>Data model construction requires that the PSVI provide unique names
for all anonymous schema types.</p>

<note>
<p><bibref ref="xmlschema-1"/> does not require all schema processors to
provide unique names for anonymous schema types. In order to build an
instance of the data model
from a PSVI produced by a processor that does not provide the names,
some post-processing will be required in order to ensure that they are
all uniquely identified before construction begins.</p>
</note>

<p><termdef id="dt-incompletely-validated" term="incompletely validated">An
<term>incompletely validated</term> document is an XML document that has a
corresponding schema but whose schema-validity assessment has resulted
in one or more element or attribute information items being assigned
values other than ‘valid’ for the <emph role="infoset-property">validity</emph>
property in the PSVI.</termdef></p>

<p>The data model supports incompletely validated documents. Elements
and attributes that are not valid are treated as having unknown types.</p>

<p>The most significant difference between Infoset construction and PSVI
construction occurs in the area of schema type assignment. Other differences
can also arise from schema processing: default attribute and element values
may be provided, white space normalization of element content may occur, and the
user-supplied lexical form of elements and attributes with atomic schema types
may be lost.</p>

<div4 id="PSVI2Types">
<head>Mapping PSVI Additions to Node Properties</head>

<p>A PSVI element or attribute information item may have a
<emph role="infoset-property">validity</emph> property.
The <emph role="infoset-property">validity</emph> property may be
<quote><emph>valid</emph></quote>, <quote><emph>invalid</emph></quote>,
or <quote><emph>notKnown</emph></quote>
and reflects the outcome of schema-validity assessment. In the data
model, precise schema type information is exposed for element and
&attributeNode;s that are <quote><emph>valid</emph></quote>. Nodes
that are not <quote><emph>valid</emph></quote> are treated as if they
were simply well-formed XML and only very general schema type
information is associated with them.
</p>

<div5 id="PSVI2NodeTypes">
<head>Element and Attribute Node Types</head>

<p>The precise definition of the schema type of an element or attribute
information item depends on the properties of the PSVI.
In the PSVI, <bibref ref='xmlschema-1'/>
defines a
<emph role="infoset-property">type definition</emph> property
as well as the
<emph role="infoset-property">type definition namespace</emph>,
<emph role="infoset-property">type definition name</emph> and
<emph role="infoset-property">type definition anonymous</emph>
properties, which are effectively short-cut terms for properties of
the type definition.
Further, the <emph role="infoset-property">element declaration</emph> and
<emph role="infoset-property">attribute declaration</emph>
properties are defined for elements and attributes, respectively.
These declarations in turn will identify the
<emph role="infoset-property">type definition</emph>
declared for the element or attribute. To distinguish the
<emph role="infoset-property">type definition</emph>
given in the PSVI for the element or attribute instance
from the <emph role="infoset-property">type definition</emph> associated
with the declaration, the former is referred to below as the actual
type and the latter as the declared type of the element or attribute
instance in question.
</p>

<p>The type depends on the declared type, the actual type, and the
<emph role="infoset-property">validity</emph> and
<emph role="infoset-property">validation attempted</emph> properties in
the PSVI. If:</p>

<ulist>
<item>
<p>The <emph role="infoset-property">validity</emph> and
<emph role="infoset-property">validation attempted</emph> properties exist
and have the values <quote><emph>valid</emph></quote> and
<quote><emph>full</emph></quote>, respectively, the
schema type of an element or attribute information item is
represented by an <termref def="dt-expanded-qname">expanded QName</termref>
whose namespace and local name correspond
to the first applicable items in the following list:
</p>

<ulist>
<item>
<p>If the declared type exists and is a union and the actual type is (not the
same as the declared type, and not a type derived from the declared
type, but) one of the member types of the union, or derived from one
of its member types:
</p>
  <ulist>
  <item>
  <p>If the {name} property of the declared type is present: the
  {target namespace} and {name} properties of the declared type.
  </p>
  </item>
  <item>
  <p>If the {name} property of the declared type is absent: the
  namespace and local name of the anonymous type name supplied for the
  declared type.
  </p>
  </item>
  </ulist>
</item>

<item>
<p>If there is no declared type, and the actual type is a union, then:</p>
  <ulist>
  <item>
  <p>If the {name} property of the actual type is present: the {target
  namespace} and {name} properties of the actual type.
  </p>
  </item>
  <item>
  <p>If the {name} property of the actual type is absent: the
  namespace and local name of the anonymous type name supplied for the
  actual type.</p>
  </item>
  </ulist>
</item>

<item>
<p>Otherwise:</p>
  <ulist>
  <item>
  <p>If <emph role="infoset-property">type definition anonymous</emph>
  is false: the {target namespace} and {name} properties of the actual type.
  </p>
  </item>
  <item>
  <p>If <emph role="infoset-property">type definition anonymous</emph> is true:
  the namespace and local name of the anonymous type name supplied for
  the actual type.</p>
  </item>
  </ulist>
</item>
</ulist>

</item>
<item>
<p>The <emph role="infoset-property">validity</emph> property exists
and is <quote><emph>invalid</emph></quote>, or the
<emph role="infoset-property">validation attempted</emph> property exists
and is <quote><emph>partial</emph></quote>, the schema type of an element
is <code>xs:anyType</code> and the type of an attribute is
<code>xs:anySimpleType</code>.</p>
</item>
<item>
<p>The <emph role="infoset-property">validity</emph> property exists and is
<quote><emph>notKnown</emph></quote>, the schema type of an element is
<code>xs:anyType</code> and the type of an attribute is
<code>xs:anySimpleType</code>.
</p>
</item>
<item>
<p>The <emph role="infoset-property">validity</emph> or
<emph role="infoset-property">validation attempted</emph> properties do not
exist, the schema type of an element is
<code>xs:untyped</code> and the type of an attribute is
<code>xs:untypedAtomic</code>.
</p>
</item>
</ulist>

<p>The prefix associated with the type names is implementation-dependent.</p>

<imp-dep-feature>The prefix associated with type names is
implementation-dependent.
</imp-dep-feature>

</div5>

<div5 id="TypedValueDetermination">
<head>Typed Value Determination</head>

<p>This section describes how the typed value of an element or
&attributeNode; is computed from an element or attribute PSVI
information item, where the information item has either a simple type
or a complex type with simple content. For other kinds of
&elementNode;s, see <specref ref="const-psvi-element"/>; for other kinds of
&attributeNode;s, see <specref ref="const-psvi-attribute"/>.</p>

<p>The typed value of &attributeNode;s and some &elementNode;s is a
sequence of <termref def="dt-atomic-item">atomic items</termref>. The
types of the items in the typed value of a node may differ from
the type of the node itself. This section describes how the typed
value of a node is derived from the properties of an information item
in a PSVI.</p>

<p>The types of the items in the typed value of a node are determined as follows.
The process begins with a type, <code>T</code>. If the schema type of the node itself, as
represented in the PSVI, is a complex type with simple content, then <code>T</code> is the
{content type} of the schema type of the node; otherwise, <code>T</code> is the schema type
of the node itself. For each primitive or ordinary simple type <code>T</code>, the W3C XML
Schema specification defines a function <code>M</code> mapping the lexical representation of
a value onto the value itself.</p>

<note>
<p>For atomic and list types, the mapping is the “lexical mapping”
defined for <code>T</code> in
<bibref ref="xmlschema-2"/>; for union types, the mapping is the
lexical mapping defined in
<bibref ref="xmlschema-2"/> modified
as appropriate by any applicable rules in
<bibref ref="xmlschema-1"/>. The mapping, so modified, is a function
(in the mathematical sense) which maps to a single value even
in cases where the lexical mapping proper maps to multiple values.
</p>
</note>

<p>The typed value is determined as follows:</p>

<ulist>
<item>
<p>If the &dm.prop.nilled; property of the node in question is
<code>true</code>, then the typed value is the empty sequence.
</p>
</item>
<item>
<p>If <code>T</code> is <code>xs:anySimpleType</code> or
<code>xs:anyAtomicType</code>, the typed value
is the <emph role="infoset-property">schema normalized value</emph> as
an instance of <code>xs:untypedAtomic</code>.
</p>
</item>
<item>
<p>Otherwise, the typed value is the result of applying <code>M</code>
to the string value as an instance of the appropriate value type,
where the appropriate value type is the <emph role="infoset-property">member
type definition</emph> if <code>T</code> is a union type, otherwise it
is simply <code>T</code>.
</p>
</item>
</ulist>

<p>The typed value determination process is guaranteed to result in a
sequence of <termref def="dt-atomic-item">atomic items</termref>, 
  each having a well-defined atomic type. This
sequence of atomic items, in turn, determines the
typed-value property of the node in the data model.</p>
</div5>

<div5 id="typed-string-relationships">
<head>Relationship Between Typed-Value and String-Value</head>

<p>Element and attribute nodes have both typed-value and string-value
properties (the terms <term>typed value</term> and <term>string value</term> are 
defined at <xspecref spec="XP40" ref="id-typed-value"/> of <bibref ref="xpath-40"/>). 
However, implementations are allowed some flexibility in
how these properties are stored. An implementation may choose to store
the string-value property only and derive the typed-value property from it, or to store
the typed-value property only and derive the string-value property from it, or to store
both the string-value property and the typed-value property.</p>

<p>To permit these various implementation strategies, some
variations in the string value of a node are defined as insignificant.
Implementations that store only the typed value of a node are permitted to
return a string value that is different from the original lexical form of
the node content. For example, consider the following element:</p>

<eg>&lt;offset xsi:type="xs:integer"&gt;0030&lt;/offset&gt;</eg>

<p>Assuming that the node is valid, it has a typed value of 30 as an
<code>xs:integer</code>. An implementation may return either “<code>30</code>” or
“<code>0030</code>” as the string value of the node. Any string that is a valid
lexical representation of the typed value is acceptable. In this
specification, we express this rule by saying that the relationship
between the string value of a node and its typed value must be
“consistent with schema validation.”</p>

<p>If an implementation stores only the string value of a node, the
following considerations apply:</p>

<ulist>
<item>
<p>Where union types occur, the implementation must be able to deliver
the typed value as an instance of the appropriate member type. For
example, if the type of 
an element node is <code>my:integer-or-string</code>, which is
defined as a union of <code>xs:integer</code> and <code>xs:string</code>, and the string value
of the node is “47”, the implementation must be able to deliver the
typed value of the node as either the integer <code>47</code> or the string <code>"47"</code>,
depending on which member type validated the element.</p>
</item>
<item>
<p>Where types of <code>xs:QName</code>, <code>xs:NOTATION</code>, or
types derived from one of these types occur, the implementation must
be able to deliver the typed value as a triple consisting of a local name,
a namespace prefix, and a namespace URI, even though the namespace URI
is not part of the string-value (see
<specref ref="qnames-and-notations"/>).</p>
</item>
<item>
<p>Where an element with a complex type and element-only content
occurs, it is an error to attempt to access the typed-value of the
&elementNode;.</p>
</item>
</ulist>

<p>If an implementation stores only the typed value of a node, it must
be prepared to construct string values from not only the node, but in
some cases also the descendants of that node. For example, an element
with a complex type and element-only content has no typed value but
does have a string value that is the concatenation of the
string values of all its &textNode; descendants in document order.</p>

<p>A further caveat applies if an implementation stores the typed
value of a node. If a new data model is constructed by copying
portions of another data model, and the copy operation does not
preserve inherited namespaces, and the type is a union type that is
sensitive to the namespace context, then the typed value may be
different than what would be obtained by revalidating the node within
its new namespace context. Although this may stretch the semantics of
“consistent with schema validation”, we accept this possibility; it
is not an error.</p>

</div5>

<div5 id="pattern-facets">
<head>Pattern Facets</head>

<p>Creating a subtype by restriction generally reduces the
<emph>value</emph> space of the original schema type. For example,
expressing a hat size as a restriction of decimal with a minimum value
of 6.5 and maximum value of 8.0 creates a schema type whose valid values are
only those in the range 6.5 to 8.0.</p>

<p>The pattern facet is different because it restricts the
<emph>lexical</emph> space of the schema type, not its value space.
Expressing a three-digit number as a restriction of integer with the
pattern facet “[0-9]{3}” creates a schema type whose valid values
are only those with a lexical form consisting of three digits.</p>

<p>The pattern facet is not reversible in practice. A given point in
the value space might have several lexical representations. In
general, there is no practical way to determine which, if any, of these
representations satisfies the pattern facet of the type.</p>

<p>As a consequence, pattern facets are not respected when mapping to
an Infoset or during serialization, and values in the data model that
were originally valid with respect to a schema that contains
pattern-based restrictions may be invalid after serialization.</p>
</div5>
</div4>

<!--
<div3 id="nilled">
<head>Mapping <att>xsi:nil</att> on &elementNode;s</head>

<p><bibref ref="xmlschema-2"/> introduced a mechanism for signaling
that an element should be accepted as valid when it has no content
despite a content type which does not require or even necessarily
allow empty content. That mechanism is the <att>xsi:nil</att> attribute.
</p>

<p>The data model exposes this special semantic in the &dm.prop.nilled; property.
(It also exposes the attribute, irrespective of whether or not schema
processing has been performed.)
</p>

<p>If the <emph role="infoset-property">validity</emph> property exists on
an information item and is <quote><emph>valid</emph></quote> then if
the <emph role="infoset-property">nil</emph> property exists and is true,
then the &dm.prop.nilled; property is <quote><emph>true</emph></quote>.
In all other cases, including all cases where schema validity assessment was
not attempted or did not succeed, the
&dm.prop.nilled; property is <quote><emph>false</emph></quote>.</p>

</div3>
-->


</div3>
</div2>
  
  <div2 id="node-kinds">
<head>Node Kinds</head>

<p>There are seven kinds of
<termref def="dt-node">nodes</termref> in the data model:
<loc href="#DocumentNode">document</loc>,
<loc href="#ElementNode">element</loc>,
<loc href="#AttributeNode">attribute</loc>,
<loc href="#TextNode">text</loc>,
<loc href="#NamespaceNode">namespace</loc>,
<loc href="#ProcessingInstructionNode">processing instruction</loc>, and
<loc href="#CommentNode">comment</loc>. Each kind of
node is described in the following sections.</p>

<p>Each section consists of an overview of the node, followed by 
  information on accessors and methods construction from an Infoset or a PSVI.
  The final section provides a mapping to Infosets. No mapping 
  is provided, nor can it be provided, for producing a PSVI. 
  Validation must be used to obtain a PSVI for a (portion of a) data 
  model instance.
</p>

<p id="constraints-general">All nodes <rfc2119>must</rfc2119> satisfy
the following general constraints:</p>

<olist>
<item><p>Every node <rfc2119>must</rfc2119> have a unique identity,
distinct from all other nodes.
</p></item>
<item>
<p>The &dm.prop.children; property of a node <rfc2119>must not</rfc2119>
contain two consecutive &textNode;s.</p>
</item>
<item>
<p>The &dm.prop.children; property of a node <rfc2119>must not</rfc2119>
contain any empty &textNode;s.</p>
</item>
<item>

<p>No node may appear more than once in the
&dm.prop.children; or &dm.prop.attributes; properties of a node.</p>
</item>
</olist>

<div3 id="DocumentNode">
<head>Document nodes</head>

<div4 id="DocumentNodeOverview">
<head>Overview</head>

<p>Document nodes encapsulate XML documents. Documents have the following
properties:</p>

<ulist>
<item><p>&dm.prop.base-uri;, possibly empty.
</p></item>
<item><p>&dm.prop.children;, possibly empty.
</p></item>
<item><p><emph role='dm-node-property'>unparsed-entities</emph>, possibly empty.
</p></item>
<item><p><emph role='dm-node-property'>document-uri</emph>, possibly empty.
</p></item>
<item><p>&dm.prop.string-value;
</p></item>
<item><p>&dm.prop.typed-value;
</p></item>
</ulist>

<p id="constraints-document">Document nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p>

<olist>
<item><p>The &dm.prop.children; <rfc2119>must</rfc2119> consist exclusively
of element, processing instruction, comment, and text nodes if it is not empty.
Attribute, namespace, and &documentNode;s can never appear as children
</p></item>
<item><p>If a node <emph>N</emph> is among the &dm.prop.children; of a &documentNode;
<emph>D</emph>, then the &dm.prop.parent; of <emph>N</emph>
<rfc2119>must</rfc2119> be <emph>D</emph>.</p></item>
<item><p>If a node <emph>N</emph> has a &dm.prop.parent; &documentNode; <emph>D</emph>,
then <emph>N</emph> <rfc2119>must</rfc2119> be among the &dm.prop.children; of
<emph>D</emph>.
</p></item>
<item><p>The &dm.prop.string-value; property of a &documentNode; must
be the concatenation of the &dm.prop.string-value;s of all its
&textNode; descendants in document order or,
if the document has no such descendants, the zero-length string.
</p></item>
</olist>

<p>In the <bibref ref="xml-infoset"/>, a
<emph role="info-item">document information item</emph>
must have at least one child, its children must consist exclusively of
<emph role="info-item">element information item</emph>s,
<emph role="info-item">processing instruction information item</emph>s
and <emph role="info-item">comment information item</emph>s,
and exactly one of the children must be
an <emph role="info-item">element information item</emph>.
This data model is more permissive: a
&documentNode; may be empty, it may have more than one &elementNode; as a
child, and it also permits &textNode;s as children.</p>

<p>Implementations that support DTD processing and access to the
unparsed entity accessors use the
<emph role='dm-node-property'>unparsed-entities</emph> property to associate
information about an unordered collection of unparsed entities with a
&documentNode;. This property is accessed indirectly through the
<function>unparsed-entity-system-id</function> and
<function>unparsed-entity-public-id</function> functions.
<phrase diff="add" at="2014-12-01">There is at most one unparsed
entity associated with any given name. Conforming XML documents may include
more than one unparsed entity declaration for the same name, but XML
mandates that only the first such declaration is significant.
</phrase>
</p>
</div4>

<div4 id="DocumentNodeAccessors">
<head>Accessors</head>

<glist role="accessors">
<gitem>
<label><function>attributes</function></label>
<def>
<p>Returns the empty sequence
</p>
</def>
</gitem>

<gitem>
<label><function>base-uri</function></label>
<def>
<p>Returns the value of the &dm.prop.base-uri; property.
</p>
</def>
</gitem>

<gitem>
<label><function>children</function></label>
<def>
<p>Returns the value of the &dm.prop.children; property.
</p>
</def>
</gitem>

<gitem>
<label><function>document-uri</function></label>
<def>
<p>Returns the absolute URI of the resource from which the &documentNode; was
constructed, or the empty sequence if no such absolute URI is available.
</p>
</def>
</gitem>

<gitem>
<label><function>is-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>is-idrefs</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>namespace-nodes</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>nilled</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>node-kind</function></label>
<def>
<p>Returns “<code>document</code>”.</p>
</def>
</gitem>

<gitem>
<label><function>node-name</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>parent</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>string-value</function></label>
<def>
<p>Returns the value of the &dm.prop.string-value; property.
</p>
</def>
</gitem>

<gitem>
<label><function>type-name</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>typed-value</function></label>
<def>
<p>Returns the value of the &dm.prop.typed-value; property.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-public-id</function></label>
<def>
<p>Returns the public identifier of the specified unparsed entity or
the empty sequence if no such entity exists.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-system-id</function></label>
<def>
<p>Returns the system identifier of the specified unparsed entity or
the empty sequence if no such entity exists.
</p>
</def>
</gitem>
</glist>

</div4>

<div4 id="const-infoset-document">
<head>Construction from an Infoset</head>

<p>The <emph role="info-item">document information item</emph> is
required. A &documentNode; is constructed for each
<emph role="info-item">document information item</emph>.</p>

<p>The following infoset properties are required:
<emph role="infoset-property">children</emph> and
<emph role="infoset-property">base URI</emph>.</p>

<p>The following infoset properties are optional:
<emph role="infoset-property">unparsed entities</emph>.</p>

<p>Document node properties are derived from the infoset as
follows:</p>

<glist>
<gitem>
<label>&dm.prop.base-uri;</label>
<def>
<!--
<p>The value of the <emph role="infoset-property">base URI</emph>
property. Note that the base URI property is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the &dm.prop.base-uri; property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p>
-->
<p>The value of the <emph role="infoset-property">base URI</emph>
property, if available.
Note that the base URI property, if available,
is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the &dm.prop.base-uri; property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p>
<p>In practice a <emph role="infoset-property">base URI</emph>
is not always known. In this case the value of the
&dm.prop.base-uri; property of the document node will be the empty
sequence. This is not intrinsically an error, though it may cause some
operations that depend on the base URI to fail.
</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.children;</label>
<def>
<p>The sequence of nodes constructed from the information
items found in the <emph role="infoset-property">children</emph>
property.</p>
<p>For each element, processing instruction, and comment found in the
<emph role="infoset-property">children</emph> property, a corresponding
element, processing instruction, or &commentNode; is constructed
and that sequence of nodes is used as the value of the &dm.prop.children;
property.</p>
<p>If present among the
<emph role="infoset-property">children</emph>, the
<emph role="info-item">document type declaration information item</emph>
is ignored.
</p>
</def>
</gitem>

<gitem>
<label><emph role='dm-node-property'>unparsed-entities</emph></label>
<def>
<p>If the <emph role="infoset-property">unparsed entities</emph> property is
present and is not the empty set, the values of the
<emph role="info-item">unparsed entity information items</emph> must be used
to support the <function>unparsed-entity-system-id</function> and
<function>unparsed-entity-public-id</function> accessors.</p>
<p>The internal structure of the values of the
<emph role='dm-node-property'>unparsed-entities</emph> property is implementation
defined.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.string-value;</label>
<def>
<p>The concatenation of the string-values of all its &textNode; descendants in
document order. If the document has no such descendants, the zero-length
string.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.typed-value;</label>
<def>
<p>The <function>string-value</function> of the node as an
<code>xs:untypedAtomic</code> value.</p>
</def>
</gitem>

<gitem>
<label><emph role='dm-node-property'>document-uri</emph></label>
<def>
<p>The <emph role='dm-node-property'>document-uri</emph> property
holds the absolute URI for the resource from which the document node
was constructed, if one is available and can be made absolute. For
example, if a collection of documents is returned by the
<function>fn:collection</function> function, the
<emph role='dm-node-property'>document-uri</emph> property
may serve to distinguish between them even though each has the same
<emph role='dm-node-property'>base-uri</emph> property.</p>
<p>If the <emph role='dm-node-property'>document-uri</emph> is not
the empty sequence, then the following constraint must hold: the node returned
by evaluating <code>fn:doc()</code> with the
<emph role='dm-node-property'>document-uri</emph> as its argument must
return the document node that provided the value of the 
<emph role='dm-node-property'>document-uri</emph> property.</p>
<p>In other words, for any &documentNode; <code>$arg</code>, either
<code>fn:document-uri($arg)</code> must return the empty sequence or
<code>fn:doc(fn:document-uri($arg))</code> must return <code>$arg</code>.
</p>
</def>
</gitem>

</glist>
</div4>

<div4 id="const-psvi-document">
<head>Construction from a PSVI</head>
<p>Construction from a PSVI is identical to construction
from the Infoset.</p>
</div4>

<div4 id="infoset-mapping-document">
<head>Infoset Mapping</head>

<p>A &documentNode; maps to a
<emph role="info-item">document information item</emph>. The mapping fails
and produces no value if the &documentNode; contains &textNode; children
that do not consist entirely of white space or if the &documentNode; contains
more than one &elementNode; child.</p> 

<p>The following properties are specified by this mapping:</p>

<glist>
<gitem>
<label><emph role="infoset-property">children</emph></label>
<def>
<p>A list of information items obtained by processing each of the
<function>children</function> in order and mapping each to
the appropriate information item(s).
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">document element</emph></label>
<def>
<p>The <emph role="info-item">element information item</emph> that is among the
<emph role="infoset-property">children</emph>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">unparsed entities</emph></label>
<def>
<p>An unordered set of <emph role="info-item">unparsed entity information item</emph>s
constructed from the
<emph role='dm-node-property'>unparsed-entities</emph>.
</p>

<p>Each unparsed entity maps to an <emph role="info-item">unparsed entity
information item</emph>. The
following properties are specified by this mapping:</p>

<glist>
<gitem>
<label><emph role="infoset-property">name</emph></label>
<def>
<p>The name of the entity.</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">system identifier</emph></label>
<def>
<p>The system identifier of the entity.</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">public identifier</emph></label>
<def>
<p>The public identifier of the entity.</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">declaration base URI</emph></label>
<def>
<p>Implementation defined. In many cases, the 
<emph role='dm-node-property'>document-uri</emph>
is the correct answer and implementations <rfc2119>must</rfc2119>
use this value if they have no better information. Implementations that
keep track of the original
<emph role="infoset-property">declaration base URI</emph>
for entities should use that value.</p>
</def>
</gitem>
</glist>

<p>The following properties of the <emph role="info-item">unparsed entity
information item</emph> have no value:
<emph role="infoset-property">notation name</emph>,
<emph role="infoset-property">notation</emph>.</p>

</def>
</gitem>
</glist>

<p>The following properties of the <emph role="info-item">document
information item</emph> have no value:
<emph role="infoset-property">notations</emph>
<emph role="infoset-property">character encoding scheme</emph>
<emph role="infoset-property">standalone</emph>
<emph role="infoset-property">version</emph>
<emph role="infoset-property">all declarations processed</emph>.</p>

</div4>

</div3>

<div3 id="ElementNode">
<head>Element nodes</head>

<div4 id="ElementNodeOverview">
<head>Overview</head>

<p>Element nodes encapsulate XML elements. Elements have the following properties:</p>

<ulist>
<item><p>&dm.prop.base-uri;, possibly empty.
</p></item>
<item><p>&dm.prop.node-name;
</p></item>
<item><p>&dm.prop.parent;, possibly empty
</p></item>
<item><p>&dm.prop.type-name;
</p></item>
<item><p>&dm.prop.children;, possibly empty
</p></item>
<item><p>&dm.prop.attributes;, possibly empty
</p></item>
<item><p>&dm.prop.namespaces;
</p></item>
<item><p>&dm.prop.nilled;
</p></item>
<item><p>&dm.prop.string-value;
</p></item>
<item><p>&dm.prop.typed-value;
</p></item>
<item><p><emph role='dm-node-property'>is-id</emph>
</p></item>
<item><p><emph role='dm-node-property'>is-idrefs</emph>
</p></item>
</ulist>

<p>Element nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p>

<olist>
<item id="elem-children">
<p>The &dm.prop.children; <rfc2119>must</rfc2119> consist exclusively
of element, processing instruction, comment, and &textNode;s if it is not empty.
attribute, namespace, and &documentNode;s can never appear as children
</p></item>
<item><p>The &attributeNode;s of an element <rfc2119>must</rfc2119> have distinct
<code>xs:QName</code>s.
</p></item>
<item><p>If a node <emph>N</emph> is among the &dm.prop.children; of an element
<emph>E</emph>, then the &dm.prop.parent; of <emph>N</emph>
<rfc2119>must</rfc2119> be <emph>E</emph>.
</p></item>
<item><p>Exclusive of attribute and &namespaceNode;s, if a node
<emph>N</emph> has a &dm.prop.parent; element <emph>E</emph>, then
<emph>N</emph> <rfc2119>must</rfc2119> be among the &dm.prop.children; of
<emph>E</emph>. (Attribute and &namespaceNode;s have a parent, but
they do not appear among the children of their parent.)</p>
<p>The data model permits &elementNode;s without parents
(to represent partial results during expression processing, for example).
Such &elementNode;s <rfc2119>must not</rfc2119>
appear among the &dm.prop.children; of any other node.</p>
<p diff="add" at="2014-11-11">An element may not be its own child or its own parent.</p>
</item>
<item><p>If an &attributeNode; <emph>A</emph> is among the &dm.prop.attributes;
of an element <emph>E</emph>, then the &dm.prop.parent; of <emph>A</emph>
<rfc2119>must</rfc2119> be <emph>E</emph>.
</p>
</item>
<item><p>If an &attributeNode; <emph>A</emph> has a
&dm.prop.parent; element <emph>E</emph>,
then <emph>A</emph> <rfc2119>must</rfc2119> be among the &dm.prop.attributes;
of <emph>E</emph>.</p>
<p>The data model permits &attributeNode;s without parents.
Such &attributeNode;s <rfc2119>must not</rfc2119>
appear among the &dm.prop.attributes; of any &elementNode;.
</p>
</item>
<item><p>If a &namespaceNode; <emph>N</emph> is among the namespaces
of an element <emph>E</emph>, then the parent of <emph>N</emph>
<rfc2119>must</rfc2119> be <emph>E</emph>.</p>
</item>
<item><p>If a &namespaceNode; <emph>N</emph> has a
parent element <emph>E</emph>, then <emph>N</emph> <rfc2119>must</rfc2119>
be among the &dm.prop.namespaces; of <emph>E</emph>.</p>
<p>The data model permits &namespaceNode;s without parents. Such
&namespaceNode;s <rfc2119>must not</rfc2119> appear among the
&dm.prop.namespaces; of any &elementNode;.  This constraint
is irrelevant for implementations that do not support &namespaceNode;s.
</p>
</item>
<item><p>If the <function>type-name</function> of an &elementNode; is
<code>xs:untyped</code>, then the <function>type-name</function> of all its
descendant elements <rfc2119>must</rfc2119> also be <code>xs:untyped</code> and the
<function>type-name</function> of all its &attributeNode;s <rfc2119>must</rfc2119> be
<code>xs:untypedAtomic</code>.</p>
</item>
<item><p>If the <function>type-name</function> of an &elementNode; is
<code>xs:untyped</code>, then the
&dm.prop.nilled; property <rfc2119>must</rfc2119> be <code>false</code>.
</p>
</item>
<item><p>If the &dm.prop.nilled; property is <code>true</code>, then the
&dm.prop.children; property <rfc2119>must not</rfc2119> contain
&elementNode;s or &textNode;s.</p>
</item>
<item><p>For every <termref def="dt-expanded-qname">expanded QName</termref>
that appears in the <function>node-name</function> of the element,
in the <function>node-name</function> of any &attributeNode; among the
&dm.prop.attributes; of the element, or in any value of type
<code>xs:QName</code> or <code>xs:NOTATION</code> (or any type derived
from those types) that appears in the typed-value of the element or
the typed-value of any of its attributes, if the expanded QName has a non-empty URI, then
there <rfc2119>must</rfc2119> be a prefix binding for this URI among the
<emph role='dm-node-property'>namespaces</emph> of this
&elementNode;.</p>
<p>If any of the expanded QNames has an empty URI, then there
<rfc2119>must not</rfc2119> be any binding among the 
<emph role='dm-node-property'>namespaces</emph> of this
&elementNode; which binds the empty prefix to a URI.</p>
</item>
<item><p>Every element must include a &namespaceNode; and/or namespace binding
for the prefix <code>xml</code> bound to the URI
<code>http://www.w3.org/XML/1998/namespace</code> and there must be no other
prefix bound to that URI.</p>
</item>
<item><p>The &dm.prop.string-value; property of an &elementNode; must
be the concatenation of the &dm.prop.string-value;s of all its
&textNode; descendants in document order or,
if the element has no such descendants, the zero-length string.
</p></item>
</olist>

</div4>

<div4 id="ElementNodeAccessors">
<head>Accessors</head>

<glist role="accessors">
<gitem>
<label><function>attributes</function></label>
<def>
<p>Returns the value of the &dm.prop.attributes; property. The order of
&attributeNode;s is stable but implementation dependent.
</p>
</def>
</gitem>

<gitem>
<label><function>base-uri</function></label>
<def>
<p>Returns the value of the &dm.prop.base-uri; property.
</p>
</def>
</gitem>

<gitem>
<label><function>children</function></label>
<def>
<p>Returns the value of the &dm.prop.children; property.
</p>
</def>
</gitem>

<gitem>
<label><function>document-uri</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>is-id</function></label>
<def>
<p>Returns the value of the <emph role='dm-node-property'>is-id</emph>
property.
</p>
</def>
</gitem>

<gitem>
<label><function>is-idrefs</function></label>
<def>
<p>Returns the value of the <emph role='dm-node-property'>is-idrefs</emph>
property.
</p>
</def>
</gitem>

<gitem>
<label><function>namespace-nodes</function></label>
<def>
<p>Returns the value of the &dm.prop.namespaces; property as a sequence of
&namespaceNode;s. The order of
&namespaceNode;s is stable but implementation dependent.
</p>
</def>
</gitem>

<gitem>
<label><function>nilled</function></label>
<def>
<p>Returns the value of the &dm.prop.nilled; property.
</p>
</def>
</gitem>

<gitem>
<label><function>node-kind</function></label>
<def>
<p>Returns “<code>element</code>”.</p>
</def>
</gitem>

<gitem>
<label><function>node-name</function></label>
<def>
<p>Returns the value of the &dm.prop.node-name; property.
</p>
</def>
</gitem>

<gitem>
<label><function>parent</function></label>
<def>
<p>Returns the value of the &dm.prop.parent; property.
</p>
</def>
</gitem>

<gitem>
<label><function>string-value</function></label>
<def>
<p>Returns the value of the &dm.prop.string-value; property.
</p>
</def>
</gitem>

<gitem>
<label><function>type-name</function></label>
<def>
<p>Returns the value of the &dm.prop.type-name; property.
</p>
</def>
</gitem>

<gitem>
<label><function>typed-value</function></label>
<def>
<p>Returns the value of the &dm.prop.typed-value; property.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-public-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-system-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>
</glist>

</div4>

<div4 id="const-infoset-element">
<head>Construction from an Infoset</head>

<p>The <emph role="info-item">element information items</emph> are
required. An &elementNode; is constructed for each
<emph role="info-item">element information item</emph>.</p>

<p>The following infoset properties are required:
<emph role="infoset-property">namespace name</emph>,
<emph role="infoset-property">local name</emph>,
<emph role="infoset-property">children</emph>,
<emph role="infoset-property">attributes</emph>,
<emph role="infoset-property">in-scope namespaces</emph>,
<emph role="infoset-property">base URI</emph>, and
<emph role="infoset-property">parent</emph>.</p>

<p>Element node properties are derived from the infoset as
follows:</p>

<glist>
<gitem>
<label>&dm.prop.base-uri;</label>
<def>
<!--
<p>The value of the <emph role="infoset-property">base URI</emph>
property. Note that the base URI property is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the &dm.prop.base-uri; property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p>
-->
<p>The value of the <emph role="infoset-property">base URI</emph>
property, if available.
Note that the base URI property, if available,
is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the &dm.prop.base-uri; property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p>
<p>In practice a <emph role="infoset-property">base URI</emph>
is not always known. In this case the value of the
&dm.prop.base-uri; property of the document node will be the empty
sequence. This is not intrinsically an error, though it may cause some
operations that depend on the base URI to fail.
</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.node-name;</label>
<def>
<p>An <code>xs:QName</code> constructed from the
<emph role="infoset-property">prefix</emph>,
<emph role="infoset-property">local name</emph>,
and
<emph role="infoset-property">namespace name</emph> properties.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.parent;</label>
<def>
<p>The node that corresponds to the
value of the <emph role="infoset-property">parent</emph> property or
the empty sequence if there is no parent.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.type-name;</label>
<def><p>All &elementNode;s constructed from an infoset have the type
<code>xs:untyped</code>.</p> 
</def>
</gitem>

<gitem>
<label>&dm.prop.children;</label>
<def>
<p>The sequence of nodes constructed from the information
items found in the <emph role="infoset-property">children</emph>
property.</p>
<p>For
each element, processing instruction, comment, and maximal sequence of
adjacent <emph role="info-item">character information items</emph> found in the
<emph role="infoset-property">children</emph> property, a corresponding
element, processing instruction, comment, or &textNode; is constructed
and that sequence of nodes is used as the value of the &dm.prop.children;
property.</p>

<p>Because the data model requires
that all general entities be expanded, there will never be
<emph role="info-item">unexpanded entity reference information item</emph>
children.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.attributes;</label>
<def><p>A set of &attributeNode;s constructed from the
<emph role="info-item">attribute information items</emph>
appearing in the <emph role="infoset-property">attributes</emph>
property. This includes all of the <quote>special</quote> attributes
(<att>xml:lang</att>, <att>xml:space</att>, <att>xsi:type</att>, etc.)
but does not include namespace declarations (because they are not attributes).</p>
<p>Default and fixed attributes provided by the DTD
are added to the <emph role="infoset-property">attributes</emph> and are
therefore included in the data model &dm.prop.attributes; of an element.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.namespaces;</label>
<def>
<p>A set of &namespaceNode;s constructed from the
<emph role="info-item">namespace information items</emph>
appearing in the <emph role="infoset-property">in-scope namespaces</emph>
property. Implementations that do not support &namespaceNode;s may simply
preserve the relevant bindings in this property.</p>

<p>Implementations <rfc2119>may</rfc2119> ignore
<emph role="info-item">namespace information items</emph> for
namespaces which are not known to be used. A namespace is known to be
used if:</p>

<ulist>
<item>
<p>It appears in the <termref def="dt-expanded-qname">expanded QName</termref>
of the &dm.prop.node-name; of the element.</p>
</item>
<item>
<p>It appears in the <termref def="dt-expanded-qname">expanded QName</termref>
of the &dm.prop.node-name; of any of the element’s attributes.</p>
</item>
</ulist>

<p>Note: applications may rely on namespaces that are not known to be used,
for example when QNames are used in content and that content does not
have a type of <code>xs:QName</code> Such applications may have difficulty
processing data models where some namespaces have been ignored.</p>

</def>
</gitem>

<gitem>
<label>&dm.prop.nilled;</label>
<def><p>All &elementNode;s constructed from an infoset have a
&dm.prop.nilled; property of <quote><emph>false</emph></quote>.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.string-value;</label>
<def>
<p>The &dm.prop.string-value; is constructed from the
<emph role="info-item">character information item</emph>
<emph role="infoset-property">children</emph>
of the
element and all its descendants. The precise rules for selecting
significant
<emph role="info-item">character information items</emph> and
constructing characters from them is described in
<specref ref="const-infoset-text"/> of
<specref ref="TextNode"/>.</p>
<p>This process is equivalent to concatenating the
<function>string-value</function>s
of all of the &textNode; descendants of
the resulting &elementNode;.</p>
<p>If the element has no such descendants, the &dm.prop.string-value;
is the empty string.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.typed-value;</label>
<def>
<p>The &dm.prop.string-value; as an <code>xs:untypedAtomic</code>.
</p>
</def>
</gitem>

<gitem>
<label><emph role='dm-node-property'>is-id</emph></label>
<def>
<p>All &elementNode;s constructed from an infoset have a
<emph role='dm-node-property'>is-id</emph> property of
<quote><emph>false</emph></quote>.</p>
</def>
</gitem>

<gitem>
<label><emph role='dm-node-property'>is-idrefs</emph></label>
<def>
<p>All &elementNode;s constructed from an infoset have a
<emph role='dm-node-property'>is-idrefs</emph> property of
<quote><emph>false</emph></quote>.</p>
</def>
</gitem>
</glist>
</div4>

<div4 id="const-psvi-element">
<head>Construction from a PSVI</head>

<p>The following &elementNode; properties are affected by PSVI properties.</p>

<glist>
<gitem>
<label>&dm.prop.type-name;</label>
<def>
<p>The &dm.prop.type-name; is
determined as described in <specref ref="PSVI2NodeTypes"/>.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.children;</label>
<def>

<p>The sequence of nodes constructed from the information
items found in the <emph role="infoset-property">children</emph>
property.</p>

<p>For each element, processing instruction, comment, and maximal
sequence of adjacent <emph role="info-item">character information items</emph> found in the
<emph role="infoset-property">children</emph> property, a corresponding
element, processing instruction, comment, or &textNode; is constructed
and that sequence of nodes is used as the value of the &dm.prop.children;
property.</p>

<p>For elements with schema simple types, or complex types with simple content,
if the <emph role="infoset-property">schema normalized value</emph>
PSVI property exists, the processor
<rfc2119>may</rfc2119> use a sequence of nodes
containing the processing instruction and &commentNode;s corresponding
to the
<emph role="info-item">processing instruction</emph> and
<emph role="info-item">comment information items</emph> found in the
<emph role="infoset-property">children</emph>
property, plus an optional single &textNode; whose string value is
the <emph role="infoset-property">schema normalized value</emph> for
the &dm.prop.children; property.
If the <emph role="infoset-property">schema normalized value</emph> is
the empty string, the &textNode; <rfc2119>must not</rfc2119> be
present, otherwise it <rfc2119>must</rfc2119> be present.
<!-- No new paragraph, otherwise the reader will think it applies to all elements, not the ones 
      specified by the opening sentence of the paragraph. -->
The relative order of Processing Instruction and &commentNode;s must
be preserved, but the position of the &textNode;, if it is present, among
them is implementation defined.</p>

<p>The effect of the above rules is that where a fixed or default
value for an element is defined in the schema, and the element takes
this default value, a text node will be created to contain the value,
even though there are no character information items representing the
value in the PSVI. The position of this text node relative to any
comment or processing instruction children is
implementation-dependent.</p>

<p><bibref ref="xmlschema-1"/> also permits an element with mixed
content to take a default or fixed value (which will always be a
simple value), but it is unclear how such
a defaulted value is represented in the PSVI. Implementations
therefore <rfc2119>may</rfc2119> represent such a default value by
creating a text node, but are not required to do so.</p>

<note><p>Section 3.3.1 in
<bibref ref="xmlschema11-1"/> clarifies the PSVI
contributions of element default or fixed values in mixed content:
additional character information items are not added to the PSVI.
</p>
</note>

<p>Because the data model requires
that all general entities be expanded, there will never be
<emph role="info-item">unexpanded entity reference information item</emph>
children.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.attributes;</label>
<def><p>A set of &attributeNode;s constructed from the
<emph role="info-item">attribute information items</emph>
appearing in the <emph role="infoset-property">attributes</emph>
property. This includes all of the <quote>special</quote> attributes
(<att>xml:lang</att>, <att>xml:space</att>, <att>xsi:type</att>, etc.)
but does not include namespace declarations (because they are not attributes).</p>
<p>Default and fixed attributes provided by XML Schema processing
are added to the <emph role="infoset-property">attributes</emph> and are
therefore included in the data model &dm.prop.attributes; of an element.</p>
</def>
</gitem>


<gitem>
<label>&dm.prop.namespaces;</label>
<def>
<p>A set of &namespaceNode;s constructed from the
<emph role="info-item">namespace information items</emph>
appearing in the <emph role="infoset-property">in-scope namespaces</emph>
property. Implementations that do not support &namespaceNode;s may simply
preserve the relevant bindings in this property.</p>

<p>Implementations <rfc2119>may</rfc2119> ignore
<emph role="info-item">namespace information items</emph> for
namespaces which are not known to be used. A namespace is known to be
used if:</p>

<ulist>
<item>
<p>It appears in the <termref def="dt-expanded-qname">expanded QName</termref>
of the &dm.prop.node-name; of the element.</p>
</item>
<item>
<p>It appears in the <termref def="dt-expanded-qname">expanded QName</termref>
of the &dm.prop.node-name; of any of the element’s attributes.</p>
</item>
<item>
<p>It appears in the <termref def="dt-expanded-qname">expanded QName</termref>
of any values of type <code>xs:QName</code> that appear among the
element’s children or the typed values of its attributes.</p>
</item>
</ulist>

<p>Note: applications may rely on namespaces that are not known to be used,
for example when QNames are used in content and that content does not
have a type of <code>xs:QName</code> Such applications may have difficulty
processing data models where some namespaces have been ignored.</p>

</def>
</gitem>

<gitem>
<label>&dm.prop.nilled;</label>
<def>

<p>If the <emph role="infoset-property">validity</emph> property exists on
an information item and is <quote><emph>valid</emph></quote> then if
the <emph role="infoset-property">nil</emph> property exists and is true,
then the &dm.prop.nilled; property is <quote><emph>true</emph></quote>.
In all other cases, including all cases where schema validity assessment was
not attempted or did not succeed, the
&dm.prop.nilled; property is <quote><emph>false</emph></quote>.</p>

</def>
</gitem>

<gitem>
<label>&dm.prop.string-value;</label>
<def>
<p>The string-value is calculated as follows:</p>

<ulist>
<item>
<p>If the element is empty: its string value is the zero length string.
</p>
</item>

<item>
<p>If the element has a type of <code>xs:untyped</code>, a complex
type with element-only content, or a complex type with mixed content: its
string-value is the concatenation of the &dm.prop.string-value;s of all its
&textNode; descendants in document order.
</p>
</item>

<item>
<p>If the element has a simple type or a complex type with simple content:
its string-value is the <emph role="infoset-property">schema normalized value</emph>
of the node.
</p>
</item>
</ulist>

<p>If an implementation stores only the typed value of an element, it
may use any valid lexical representation of the typed value for the
&dm.prop.string-value; property.</p>

</def>
</gitem>

<gitem>
<label>&dm.prop.typed-value;</label>
<def>
<p>The typed-value is calculated as follows:</p>

<ulist>
<item>
<p>If the element is of type <code>xs:untyped</code>, its typed-value
is its <function>string-value</function> as an <code>xs:untypedAtomic</code>.
</p>
</item>

<item>
<p>If the element has a complex type with empty content, its typed-value
is the empty sequence.
</p>
</item>

<item>
<p>If the element has a simple type or a complex type with simple content:
its typed value is computed as described in
<specref ref="TypedValueDetermination"/>.
The result is a sequence of zero or more atomic items. The
relationship between the type-name, typed-value, and string-value of an
element node is consistent with XML Schema validation.
</p>
<p>Note that in the case of dates and times, the timezone is preserved
as described in <specref ref="dates-and-times"/>, and
in the case of <code>xs:QName</code>s and <code>xs:NOTATION</code>s,
the prefix is preserved as described in
<specref ref="qnames-and-notations"/>.</p>
</item>

<item>
<p>If the element has a complex type with mixed content
(including <code>xs:anyType</code>), its typed-value
is its <function>string-value</function> as an <code>xs:untypedAtomic</code>.
</p>
</item>

<item>
<p>Otherwise, the element must be a complex type with element-only content.
The typed-value of such an element is <termref def="dt-absent">absent</termref>.
Attempting to access this property with the
<function>typed-value</function> accessor always raises an error.
</p>
</item>
</ulist>
</def>
</gitem>

<gitem>
<label><emph role='dm-node-property'>is-id</emph></label>
<def>
<p>If the element has a complex type with element-only content,
the <emph role='dm-node-property'>is-id</emph>
property is <code>false</code>.
Otherwise, if the typed-value of the element consists of exactly
one atomic item and that value is of type <code>xs:ID</code>,
or a type derived from <code>xs:ID</code>,
the <emph role='dm-node-property'>is-id</emph>
property is <code>true</code>, otherwise it is <code>false</code>.</p>
<note><p>This means that in the case of a type constructed by list
from <code>xs:ID</code>, the ID is recognized provided that the list
is of length one. A type constructed as a union
involving <code>xs:ID</code> is recognized provided the actual value
is of type <code>xs:ID</code>.</p>
</note>
<note><p>The element that is marked with the
<emph role='dm-node-property'>is-id</emph> property, and which will
therefore be retrieved by the fn:id function, is the node whose typed
value contains the <code>xs:ID</code> value.
This node is a child of the element node that, according to XML Schema,
is uniquely identified by this ID.</p>
</note>
</def>
</gitem>                  
<!-- old text
<gitem>
<label><emph role='dm-node-property'>is-id</emph></label>
<def>
<p>If the element has a complex type with element-only content, the
<emph role='dm-node-property'>is-id</emph>
property is <code>false</code>. Otherwise, if the typed-value of the element
consists of exactly one atomic item that value is of type <code>xs:ID</code>, or
a type derived from <code>xs:ID</code>, the
<emph role='dm-node-property'>is-id</emph> property is <code>true</code>,
otherwise it is <code>false</code>.</p>
</def>
</gitem>
-->

<gitem>
<label><emph role='dm-node-property'>is-idrefs</emph></label>
<def>
<p>If the element has a complex type with element-only content, the
<emph role='dm-node-property'>is-idrefs</emph>
property is <code>false</code>. 
Otherwise, if any of the atomic items in the typed-value of the
element is of type <code>xs:IDREF</code> or <code>xs:IDREFS</code>, or
a type derived from one of those types, the
<emph role='dm-node-property'>is-idrefs</emph>
property is <code>true</code>, otherwise it is <code>false</code>.
</p>
</def>
</gitem>

</glist>

<p>All other properties have values that are consistent with construction
from an infoset.</p>
</div4>

<div4 id="infoset-mapping-element">
<head>Infoset Mapping</head>

<p>An &elementNode; maps to an <emph role="info-item">element information item</emph>.</p> 

<p>The following properties are specified by this mapping:</p>

<glist>
<gitem>
<label><emph role="infoset-property">namespace name</emph></label>
<def>
<p>The namespace name of the value of <function>node-name</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">local name</emph></label>
<def>
<p>The local part of the value of <function>node-name</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">prefix</emph></label>
<def>
<p>The prefix associated with the value of <function>node-name</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">children</emph></label>
<def>
<p>A list of information items obtained by processing each of the
<function>children</function> in order and mapping each to
the appropriate information item(s).
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">attributes</emph></label>
<def>
<p>An unordered set of information items obtained by processing each of the
<function>attributes</function> and mapping each to
the appropriate information item(s).
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">in-scope namespaces</emph></label>
<def>
<p>An unordered set of <emph role="info-item">namespace information items</emph> constructed from the
<emph role='dm-node-property'>namespaces</emph>.
</p>

<p>Each in-scope namespace maps to a <emph role="info-item">namespace information item</emph>. The
following properties are specified by this mapping:</p>

<glist>
<gitem>
<label><emph role="infoset-property">prefix</emph></label>
<def>
<p>The prefix associated with the namespace.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">namespace name</emph></label>
<def>
<p>The URI associated with the namespace.
</p>
</def>
</gitem>
</glist>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">base URI</emph></label>
<def>
<p>The value of <function>base-uri</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">parent</emph></label>
<def>
<ulist>
<item>
<p>If this node is the root of the infoset mapping operation,
<emph>unknown</emph>.</p>
</item>
<item>
<p>If this node has a parent, the information item that corresponds
to the node returned by <function>parent</function>.
</p>
</item>
<item>
<p>Otherwise <emph>no value</emph>.
</p>
</item>
</ulist>
</def>
</gitem>
</glist>

<p>The following property has no value:
<emph role="infoset-property">namespace attributes</emph>.</p>

</div4>

</div3>


<div3 id="AttributeNode">
  <head>Attribute nodes</head>

<div4 id="AttributeNodeOverview">
  <head>Overview</head>

  <p>Attribute nodes represent XML attributes. Attributes have the
following properties:</p>

<ulist>
<item><p>&dm.prop.node-name;
</p></item>
<item><p>&dm.prop.parent;, possibly empty
</p></item>
<item><p>&dm.prop.type-name;
</p></item>
<item><p>&dm.prop.string-value;
</p></item>
<item><p>&dm.prop.typed-value;
</p></item>
<item><p><emph role='dm-node-property'>is-id</emph>
</p></item>
<item><p><emph role='dm-node-property'>is-idrefs</emph>
</p></item>
</ulist>

<p>Attribute nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p>

<olist>
<item><p>If an &attributeNode; <emph>A</emph> is among the &dm.prop.attributes;
of an element <emph>E</emph>, then the &dm.prop.parent; of <emph>A</emph>
<rfc2119>must</rfc2119> be <emph>E</emph>.
</p>
</item>
<item><p>If a &attributeNode; <emph>A</emph> has a parent element
<emph>E</emph>, then <emph>A</emph> <rfc2119>must</rfc2119> be among
the &dm.prop.attributes; of <emph>E</emph>.</p>
<p>The data model permits &attributeNode;s without parents
(to represent partial results during expression processing, for example).
Such attributes <rfc2119>must not</rfc2119>
appear among the &dm.prop.attributes; of any &elementNode;.
</p>
</item>
<item><p>In the node-name of an attribute node, if a namespace URI is
present then a prefix <rfc2119>must</rfc2119> also be present.
</p>
</item> 
</olist>

<p>For convenience, the &elementNode; that owns this attribute is called
its “parent” even though an &attributeNode; is not a “child” of its
parent element. </p>

</div4>

<div4 id="AttributeNodeAccessors">
  <head>Accessors</head>

<glist role="accessors">
<gitem>
<label><function>attributes</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>base-uri</function></label>
<def>
<p>If the attribute has a parent, returns the value of the
<function>base-uri</function> of its parent; otherwise it returns
the empty sequence.</p>
</def>
</gitem>

<gitem>
<label><function>children</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>document-uri</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>is-id</function></label>
<def>
<p>Returns the value of the <emph role='dm-node-property'>is-id</emph>
property.
</p>
</def>
</gitem>

<gitem>
<label><function>is-idrefs</function></label>
<def>
<p>Returns the value of the <emph role='dm-node-property'>is-idrefs</emph>
property.
</p>
</def>
</gitem>

<gitem>
<label><function>namespace-nodes</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>nilled</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>node-kind</function></label>
<def>
<p>Returns “<code>attribute</code>”.</p>
</def>
</gitem>

<gitem>
<label><function>node-name</function></label>
<def>
<p>Returns the value of the &dm.prop.node-name; property.
</p>
</def>
</gitem>

<gitem>
<label><function>parent</function></label>
<def>
<p>Returns the value of the &dm.prop.parent; property.
</p>
</def>
</gitem>

<gitem>
<label><function>string-value</function></label>
<def>
<p>Returns the value of the &dm.prop.string-value; property.
</p>
</def>
</gitem>

<gitem>
<label><function>type-name</function></label>
<def>
<p>Returns the value of the &dm.prop.type-name; property.
</p>
</def>
</gitem>

<gitem>
<label><function>typed-value</function></label>
<def>
<p>Returns the value of the &dm.prop.typed-value; property.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-public-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-system-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>
</glist>

</div4>

<div4 id="const-infoset-attribute">
<head>Construction from an Infoset</head>

<p>The <emph role="info-item">attribute information items</emph> are
required. An &attributeNode; is constructed for each
<emph role="info-item">attribute information item</emph>.</p>

<p>The following infoset properties are required:
<emph role="infoset-property">namespace name</emph>,
<emph role="infoset-property">local name</emph>,
<emph role="infoset-property">normalized value</emph>,
<emph role="infoset-property">attribute type</emph>, and
<emph role="infoset-property">owner element</emph>.</p>

<p>Attribute node properties are derived from the infoset as
follows:</p>

<glist>
<gitem>
<label>&dm.prop.node-name;</label>
<def>
<p>An <code>xs:QName</code> constructed from the
<emph role="infoset-property">prefix</emph>,
<emph role="infoset-property">local name</emph>,
and
<emph role="infoset-property">namespace name</emph> properties.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.parent;</label>
<def>
<p>The &elementNode; that corresponds to the value of the
<emph role="infoset-property">owner element</emph> property
or the empty sequence if there is no owner.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.type-name;</label>
<def>
<p>The value <code>xs:untypedAtomic</code>.
</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.string-value;</label>
<def><p>The <emph role="infoset-property">normalized value</emph> of the
attribute.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.typed-value;</label>
<def>
<p>The attribute’s typed-value
is its <function>string-value</function> as an <code>xs:untypedAtomic</code>.
</p>
<!--
<p>The typed-value is calculated as follows:</p>

<ulist>
<item>
<p>If the attribute is of type <code>xs:untypedAtomic</code>: its typed-value
is its <function>string-value</function> as an <code>xs:untypedAtomic</code>.
</p>
</item>
<item>
<p>Otherwise: its typed-value is a sequence of zero or more atomic
values derived from the &dm.prop.string-value; of the node and its type in a way
that is consistent with XML Schema validation.</p>
<p>Note that in the case of dates and times, the timezone is preserved
as described in <specref ref="dates-and-times"/>, and
in the case of <code>xs:QName</code>s and <code>xs:NOTATION</code>s,
the prefix is preserved as described in
<specref ref="qnames-and-notations"/>.</p>
</item>
</ulist>
-->
</def>
</gitem>

<gitem>
<label><emph role='dm-node-property'>is-id</emph></label>
<def>
<p>If the attribute is named <att>xml:id</att> and its
<emph role="infoset-property">attribute type</emph> property does not
have the value <code>ID</code>, then <bibref ref="xml-id"/> processing
is performed. This will ensure that the value does have the type <code>ID</code>
and that it is properly normalized. If an error is encountered during
<att>xml:id</att> processing, an implementation <rfc2119>may</rfc2119> raise a dynamic error.
The
<emph role='dm-node-property'>is-id</emph> property is always <code>true</code> for
attributes named <att>xml:id</att>.</p>

<p>If the <emph role="infoset-property">attribute type</emph> property
has the value <code>ID</code>, <code>true</code>, otherwise <code>false</code>.
</p>
</def>
</gitem>

<gitem>
<label><emph role='dm-node-property'>is-idrefs</emph></label>
<def>
<p>If the <emph role="infoset-property">attribute type</emph> property
has the value <code>IDREF</code> or <code>IDREFS</code>,
<code>true</code>, otherwise <code>false</code>.
</p>
</def>
</gitem>
</glist>
</div4>

<div4 id="const-psvi-attribute">
<head>Construction from a PSVI</head>

<p>The following &attributeNode; properties are affected by PSVI properties.</p>

<glist>
<gitem>
<label>&dm.prop.string-value;</label>
<def>
<ulist>
<item><p>The <emph role="infoset-property">schema normalized value</emph>
PSVI property if that exists.
</p></item>
<item><p>Otherwise, the <emph role="infoset-property">normalized value</emph> property.
</p></item>
</ulist>

<p>If an implementation stores only the typed value of an attribute, it
may use any valid lexical representation of the typed value for the
&dm.prop.string-value; property.</p>

</def>
</gitem>

<gitem>
<label>&dm.prop.type-name;</label>
<def>
<p>The &dm.prop.type-name; is
determined as described in <specref ref="PSVI2NodeTypes"/>.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.typed-value;</label>
<def>
<p>The typed-value is calculated as follows:</p>

<ulist>
<item>
<p>If the attribute is of type <code>xs:untypedAtomic</code>: its typed-value
is its <function>string-value</function> as an <code>xs:untypedAtomic</code>.
</p>
</item>
<item>
<p>Otherwise, a sequence of zero or more atomic items as described in 
<specref ref="TypedValueDetermination"/>. The relationship between the 
type-name, typed-value, and string-value of an attribute node is 
consistent with XML Schema validation.</p>
</item>
</ulist>
</def>
</gitem>

<gitem>
<label><emph role='dm-node-property'>is-id</emph></label>
<def>
<p>If the attribute is named <att>xml:id</att> and
its <emph role="infoset-property">attribute type</emph> property
does not have the value <code>xs:ID</code> or a type derived from <code>xs:ID</code>,
then <bibref ref="xml-id"/> processing is performed.
This will ensure that the value does have the type <code>xs:ID</code>
and that it is properly normalized.
If an error is encountered during <att>xml:id</att> processing,
an implementation <rfc2119>may</rfc2119> raise a dynamic error.
The <emph role='dm-node-property'>is-id</emph>
property is always true for attributes named <code>xml:id</code>.</p>
<p>Otherwise, if the typed-value of the attribute consists of
exactly one atomic item and that value is of type <code>xs:ID</code>,
or a type derived from <code>xs:ID</code>,
the <emph role='dm-node-property'>is-id</emph>
property is <code>true</code>, otherwise it is <code>false</code>.</p>
<note><p>This means that in the case of a type constructed by list
from <code>xs:ID</code>, the ID is recognized provided that the list
is of length one. A type constructed as a union
involving <code>xs:ID</code> is recognized provided the actual value
is of type <code>xs:ID</code>.</p>
</note>
</def>
</gitem>             
<!-- old text
<gitem>
<label><emph role='dm-node-property'>is-id</emph></label>
<def>
<p>If the attribute is named <att>xml:id</att> and its
<emph role="infoset-property">attribute type</emph> property does not
have the value <code>xs:ID</code>, then <bibref ref="xml-id"/> processing
is performed. This will ensure that the value does have the type <code>xs:ID</code>
and that it is properly normalized. If an error is encountered during
xml:id processing, an implementation <rfc2119>may</rfc2119> raise a dynamic error.
The
<emph role='dm-node-property'>is-id</emph> property is always <code>true</code> for
attributes named <att>xml:id</att>.</p>

<p>If the &dm.prop.type-name; is <code>xs:ID</code> or a type derived from
<code>xs:ID</code>, <code>true</code>, otherwise <code>false</code>.
</p>
</def>
</gitem>
-->

<gitem>
<label><emph role='dm-node-property'>is-idrefs</emph></label>
<def>
<p>If any of the atomic items in the typed-value of the
attribute is of type <code>xs:IDREF</code> or <code>xs:IDREFS</code>, or
a type derived from one of those types, the
<emph role='dm-node-property'>is-idrefs</emph>
property is <code>true</code>, otherwise it is <code>false</code>.
</p>
<note><p>This rule means that a
<phrase diff="chg" at="2015-03-26">node whose type is</phrase>
constructed by list with an item type of <code>xs:IDREF</code>
(or a type derived from <code>xs:IDREF</code>)
<phrase diff="chg" at="2015-03-26">may have</phrase> the
<emph role='dm-node-property'>is-idrefs</emph> property,
whether or not the list type is named <code>xs:IDREFS</code> or is derived from
<code>xs:IDREFS</code>. Because union types are allowed, it also means that an
element or attribute with the
<emph role='dm-node-property'>is-idrefs</emph> property can contain atomic
items of type <code>xs:IDREF</code> alongside values of other types.
<phrase diff="add" at="2015-03-26">A node
has the
<emph role='dm-node-property'>is-idrefs</emph> property only if the typed value contains at least
one atomic item that is an instance of <code>xs:IDREF</code>;
it is not sufficient that the type annotation permits such values.</phrase>
</p>
</note>
</def>
</gitem>
</glist>

<p>All other properties have values that are consistent with construction
from an infoset.</p>

<p>Note: attributes from the XML Schema instance namespace,
<quote><code>http://www.w3.org/2001/XMLSchema-instance</code></quote>
(<att>xsi:schemaLocation</att>,
<att>xsi:type</att>, etc.), appear as ordinary attributes in the data model.
</p>
</div4>

<div4 id="infoset-mapping-attribute">
<head>Infoset Mapping</head>

<p>An &attributeNode; maps to an <emph role="info-item">attribute information item</emph>.</p> 

<p>The following properties are specified by this mapping:</p>

<glist>
<gitem>
<label><emph role="infoset-property">namespace name</emph></label>
<def>
<p>The namespace name of the value of <function>node-name</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">local name</emph></label>
<def>
<p>The local part of the value of <function>node-name</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">prefix</emph></label>
<def>
<p>The prefix associated with the value of <function>node-name</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">normalized value</emph></label>
<def>
<p>The value of <function>string-value</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">owner element</emph></label>
<def>
<ulist>
<item>
<p>If this node has a parent, the information item that corresponds
to the node returned by <function>parent</function>.
</p>
</item>
<item>
<p>Otherwise <emph>no value</emph>.
</p>
</item>
</ulist>
</def>
</gitem>
</glist>

<p>The following properties have no value:
<emph role="infoset-property">specified</emph>
<emph role="infoset-property">attribute type</emph>
<emph role="infoset-property">references</emph>.</p>

</div4>
</div3>

<div3 id="NamespaceNode">
  <head>Namespace nodes</head>

<div4 id="NamespaceNodeOverview">
  <head>Overview</head>

<p>Each &namespaceNode; represents the binding of a namespace URI to a 
namespace prefix or to the default namespace. Implementations that do not 
use &namespaceNode;s may represent the same information using the 
<emph role='dm-node-property'>namespaces</emph> property of
an element node.
Namespaces have the
following properties:</p>

<ulist>
<item><p>&dm.prop.prefix;, possibly empty
</p></item>
<item><p>&dm.prop.uri;
</p></item>
<item><p>&dm.prop.parent;, possibly empty
</p></item>
</ulist>

<p>Namespace nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p>

<olist>
<item><p>If a &namespaceNode; <emph>N</emph> is among the namespaces
of an element <emph>E</emph>, then the parent of <emph>N</emph>
<rfc2119>must</rfc2119> be <emph>E</emph>.</p>
</item>
<item><p>If a &namespaceNode; <emph>N</emph> has a parent element
<emph>E</emph>, then <emph>N</emph> <rfc2119>must</rfc2119> be among
the namespaces of <emph>E</emph>.</p>
</item>
<item><p>A &namespaceNode; <rfc2119>must</rfc2119> not have the
name <code>xmlns</code> nor the string-value
<code>http://www.w3.org/2000/xmlns/</code>.</p>
</item>   
</olist>

<p>The data model permits &namespaceNode;s without parents; see below.
</p>

<p>In XPath 1.0, &namespaceNode;s were directly accessible by applications, by
means of the namespace axis. In XPath <phrase diff="chg" at="2013-12-06">3.1</phrase> the namespace axis is deprecated,
and it is not available at all in XQuery <phrase diff="chg" at="2013-12-06">3.1</phrase>. 
XPath <phrase diff="chg" at="2013-12-06">3.1</phrase> implementations are
not required to expose the namespace axis, though they may do so if they
wish to offer backwards compatibility.</p>

<p>The information held in namespace
nodes is instead made available to applications using functions defined
in <bibref diff="chg" at="2022-11-05" ref="xpath-functions-40"/>. Some properties of &namespaceNode;s are
not exposed by these functions: in particular, properties related to the
identity of &namespaceNode;s, their parentage, and their position in document
order. Implementations that do not expose the namespace axis can therefore
avoid the overhead of maintaining this information.</p>

<p>Implementations that expose the namespace axis <rfc2119>must</rfc2119> provide unique
&namespaceNode;s for each element.
Each element has an associated set of &namespaceNode;s, one for each
distinct namespace prefix that is in scope for the element (including
the <code>xml</code> prefix, which is implicitly declared by
<bibref ref="xml-names"/> and one for the default
namespace if one is in scope for the element. The element is the
parent of each of these &namespaceNode;s; however, a &namespaceNode; is
not a child of its parent element. In implementations that expose the
namespace axis, elements never share namespace
nodes.</p>

<note>
<p>In implementations that do not expose the namespace axis, there is no
means by which the host language can tell if namespace nodes are shared or not
and, in such circumstances, sharing namespace nodes may be a very reasonable
implementation strategy.</p>
</note>

</div4>

<div4 id="NamespaceNodeAccessors">
  <head>Accessors</head>

<glist role="accessors">
<gitem>
<label><function>attributes</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>base-uri</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>children</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>document-uri</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>is-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>is-idrefs</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>namespace-nodes</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>nilled</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>node-kind</function></label>
<def>
<p>Returns “<code>namespace</code>”.</p>
</def>
</gitem>

<gitem>
<label><function>node-name</function></label>
<def>
<p>If the &dm.prop.prefix; is not empty,
returns an <code>xs:QName</code> with the value of the &dm.prop.prefix; property
in the local-name and an empty namespace name, otherwise returns
the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>parent</function></label>
<def>
<p>Returns the value of the &dm.prop.parent; property.
</p>
</def>
</gitem>

<gitem>
<label><function>string-value</function></label>
<def>
<p>Returns the value of the &dm.prop.uri; property.
</p>
</def>
</gitem>

<gitem>
<label><function>type-name</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>typed-value</function></label>
<def>
<p>Returns the value of the &dm.prop.uri; property as an
<code>xs:string</code>.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-public-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-system-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>
</glist>
</div4>

<div4 id="const-infoset-namespace">
<head>Construction from an Infoset</head>

<p>The <emph role="info-item">namespace information items</emph> are
required.</p>

<p>The following infoset properties are required:
<emph role="infoset-property">prefix</emph>,
<emph role="infoset-property">namespace name</emph>.</p>

<p>Namespace node properties are derived from the infoset as
follows:</p>

<glist>
<gitem>
  <label>&dm.prop.prefix;</label>
  <def>
    <p>The <emph role="infoset-property">prefix</emph> property.</p>
  </def>
</gitem>
<gitem>
  <label>&dm.prop.uri;</label>
  <def>
    <p>The <emph role="infoset-property">namespace name</emph> property.</p>
  </def>
</gitem>
<gitem>
  <label>&dm.prop.parent;</label>
  <def>
    <p>The element in whose <emph role="infoset-property">in-scope namespaces</emph> 
property the <emph role="info-item">namespace information item</emph> appears, if the implementation
exposes any mechanism for accessing the <function>parent</function>
accessor of &namespaceNode;s.</p>
  </def>
</gitem>
</glist>
</div4>

<div4 id="const-psvi-namespace">
<head>Construction from a PSVI</head>
<p>Construction from a PSVI is identical to construction
from the Infoset.</p>
</div4>

<div4 id="infoset-mapping-namespace">
<head>Infoset Mapping</head>

<p>A &namespaceNode; maps to a <emph role="info-item">namespace information item</emph>.</p> 

<p>The following properties are specified by this mapping:</p>

<glist>
<gitem>
<label><emph role="infoset-property">prefix</emph></label>
<def>
<p>The prefix associated with the namespace.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">namespace name</emph></label>
<def>
<p>The value of <function>string-value</function>.
</p>
</def>
</gitem>
</glist>
</div4>

</div3>

<div3 id="ProcessingInstructionNode">
  <head>Processing instruction nodes</head>

<div4 id="ProcessingInstructionNodeOverview">
<head>Overview</head>

<p>Processing instruction nodes encapsulate XML processing instructions.
Processing instructions have the following properties:</p>

<ulist>
<item><p>&dm.prop.target;
</p></item>
<item><p>&dm.prop.content;
</p></item>
<item><p>&dm.prop.base-uri;, possibly empty
</p></item>
<item><p>&dm.prop.parent;, possibly empty
</p></item>
</ulist>

<p>Processing instruction nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p>

<olist>
<item><p>The string <quote>?&gt;</quote> <rfc2119>must not</rfc2119> occur within the
&dm.prop.content;.</p>
</item>
<item><p>The &dm.prop.target; <rfc2119>must</rfc2119> be an <code>NCName</code>.
</p>
</item>
</olist>

</div4>

<div4 id="ProcessingInstructionNodeAccessors">
<head>Accessors</head>

<glist role="accessors">
<gitem>
<label><function>attributes</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>base-uri</function></label>
<def>
<p>Returns the value of the &dm.prop.base-uri; property.
</p>
</def>
</gitem>

<gitem>
<label><function>children</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>document-uri</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>is-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>is-idrefs</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>namespace-nodes</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>nilled</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>node-kind</function></label>
<def>
<p>Returns “<code>processing-instruction</code>”.</p>
</def>
</gitem>

<gitem>
<label><function>node-name</function></label>
<def>
<p>Returns an <code>xs:QName</code> with the value of the &dm.prop.target;
property in the local-name and an empty namespace URI and empty prefix.
</p>
</def>
</gitem>

<gitem>
<label><function>parent</function></label>
<def>
<p>Returns the value of the &dm.prop.parent; property.</p>
</def>
</gitem>

<gitem>
<label><function>string-value</function></label>
<def>
<p>Returns the value of the &dm.prop.content; property.
</p>
</def>
</gitem>

<gitem>
<label><function>type-name</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>typed-value</function></label>
<def>
<p>Returns the value of the &dm.prop.content; property as a
<code>xs:string</code>.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-public-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-system-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>
</glist>
</div4>
<div4 id="const-infoset-pi">
<head>Construction from an Infoset</head>

<p>A &processingInstructionNode; is constructed for each
<emph role="info-item">processing instruction information item</emph> that
is not ignored.</p>

<p>The following infoset properties are required:
<emph role="infoset-property">target</emph>,
<emph role="infoset-property">content</emph>,
<emph role="infoset-property">base URI</emph>, and
<emph role="infoset-property">parent</emph>.</p>

<p>Processing instruction node properties are derived from the infoset as
follows:</p>

<glist>
<gitem>
<label>&dm.prop.target;</label>
<def>
<p>The value of the <emph role="infoset-property">target</emph> property.</p>
</def>
</gitem>
<gitem>
<label>&dm.prop.content;</label>
<def>
<p>The value of the <emph role="infoset-property">content</emph> property.</p>
</def>
</gitem>
<gitem>
<label>&dm.prop.base-uri;</label>
<def>
<!--
<p>The value of the <emph role="infoset-property">base URI</emph>
property. Note that the base URI property is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the &dm.prop.base-uri; property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p>
-->
<p>The value of the <emph role="infoset-property">base URI</emph>
property, if available.
Note that the base URI property, if available,
is always an absolute URI
(if an absolute URI can be computed) though it may contain Unicode
characters that are not allowed in URIs. These characters, if they
occur, are present in the &dm.prop.base-uri; property and will have to
be encoded and escaped by the application to obtain a URI suitable for
retrieval, if retrieval is required.
</p>
<p>In practice a <emph role="infoset-property">base URI</emph>
is not always known. In this case the value of the
&dm.prop.base-uri; property of the document node will be the empty
sequence. This is not intrinsically an error, though it may cause some
operations that depend on the base URI to fail.
</p>
</def>
</gitem>
<gitem>
<label>&dm.prop.parent;</label>
<def>
<p>The node corresponding to the value of the
<emph role="infoset-property">parent</emph> property.</p>
</def>
</gitem>
</glist>

<p>There are no &processingInstructionNode;s for processing instructions
that are children of a
<emph role="info-item">document type declaration information item</emph>.</p>

</div4>

<div4 id="const-psvi-pi">
<head>Construction from a PSVI</head>
<p>Construction from a PSVI is identical to construction
from the Infoset.</p>
</div4>

<div4 id="infoset-mapping-processing-instruction">
<head>Infoset Mapping</head>

<p>An &processingInstructionNode; maps to a
<emph role="info-item">processing instruction information item</emph>.</p> 

<p>The following properties are specified by this mapping:</p>

<glist>
<gitem>
<label><emph role="infoset-property">target</emph></label>
<def>
<p>The local part of the value of <function>node-name</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">content</emph></label>
<def>
<p>The value of <function>string-value</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">base URI</emph></label>
<def>
<p>The value of <function>base-uri</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">parent</emph></label>
<def>
<ulist>
<item>
<p>If this node is the root of the infoset mapping operation,
<emph>unknown</emph>.</p>
</item>
<item>
<p>If this node has a parent, the information item that corresponds
to the node returned by <function>parent</function>.
</p>
</item>
<item>
<p>Otherwise <emph>no value</emph>.
</p>
</item>
</ulist>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">notation</emph></label>
<def>
<p><emph>No value</emph>.
</p>
</def>
</gitem>
</glist>
</div4>

</div3>

<div3 id="CommentNode">
  <head>Comment nodes</head>

<div4 id="CommentNodeOverview">
<head>Overview</head>

<p>Comment nodes encapsulate XML comments. Comments have the following properties:
</p>

<ulist>
<item><p>&dm.prop.content;
</p></item>
<item><p>&dm.prop.parent;, possibly empty
</p></item>
</ulist>

<p>Comment nodes <rfc2119>must</rfc2119> satisfy the following constraints.</p>

<olist>
<item><p>The string <quote>--</quote> <rfc2119>must not</rfc2119> occur within the
&dm.prop.content;.</p>
</item>
<item><p>The character <quote>-</quote> <rfc2119>must not</rfc2119> occur as the
last character of the
&dm.prop.content;.</p>
</item>
</olist>
</div4>

<div4 id="CommentNodeAccessors">
  <head>Accessors</head>

<glist role="accessors">
<gitem>
<label><function>attributes</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>base-uri</function></label>
<def>
<p>If the comment has a parent, returns the value of the
<function>base-uri</function> of its parent; otherwise, returns
the empty sequence.</p>
</def>
</gitem>

<gitem>
<label><function>children</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>document-uri</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>is-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>is-idrefs</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>namespace-nodes</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>nilled</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>node-kind</function></label>
<def>
<p>Returns “<code>comment</code>”.</p>
</def>
</gitem>

<gitem>
<label><function>node-name</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>parent</function></label>
<def>
<p>Returns the value of the &dm.prop.parent; property.
</p>
</def>
</gitem>

<gitem>
<label><function>string-value</function></label>
<def>
<p>Returns the value of the &dm.prop.content; property.
</p>
</def>
</gitem>

<gitem>
<label><function>type-name</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>typed-value</function></label>
<def>
<p>Returns the value of the &dm.prop.content; property as a
<code>xs:string</code>.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-public-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-system-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>
</glist>
</div4>

<div4 id="const-infoset-comment">
<head>Construction from an Infoset</head>

<p>The <emph role="info-item">comment information items</emph> are
optional.</p>

<p>A &commentNode; is constructed for each
<emph role="info-item">comment information item</emph>.</p>

<p>The following infoset properties are required:
<emph role="infoset-property">content</emph> and
<emph role="infoset-property">parent</emph>.</p>

<p>Comment node properties are derived from the infoset as
follows:</p>

<glist>
<gitem>
  <label>&dm.prop.content;</label>
  <def>
    <p>The value of the <emph role="infoset-property">content</emph> property.</p>
  </def>
</gitem>

<gitem>
<label>&dm.prop.parent;</label>
<def>
<p>The node corresponding to the value of the
<emph role="infoset-property">parent</emph> property.</p>
</def>
</gitem>
</glist>

<p>There are no &commentNode;s for comments that are children of a
<emph role="info-item">document type declaration information item</emph>.</p>
</div4>

<div4 id="const-psvi-comment">
<head>Construction from a PSVI</head>
<p>Construction from a PSVI is identical to construction
from the Infoset.</p>
</div4>

<div4 id="infoset-mapping-comment">
<head>Infoset Mapping</head>

<p>A &commentNode; maps to a <emph role="info-item">comment information item</emph>.</p> 

<p>The following properties are specified by this mapping:</p>

<glist>
<gitem>
<label><emph role="infoset-property">content</emph></label>
<def>
<p>The value of the <function>string-value</function>.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">parent</emph></label>
<def>
<ulist>
<item>
<p>If this node is the root of the infoset mapping operation,
<emph>unknown</emph>.</p>
</item>
<item>
<p>If this node has a parent, the information item that corresponds
to the node returned by <function>parent</function>.
</p>
</item>
<item>
<p>Otherwise <emph>no value</emph>.
</p>
</item>
</ulist>
</def>
</gitem>
</glist>
</div4>

</div3>
<div3 id="TextNode">
  <head>Text nodes</head>

<div4 id="TextNodeOverview">
  <head>Overview</head>

<p>Text nodes encapsulate XML character content. Text has the following properties:
</p>

  <ulist>
  <item><p>&dm.prop.content;
  </p></item>
  <item><p>&dm.prop.parent;, possibly empty.
  </p></item>
  </ulist>

<p>Text nodes <rfc2119>must</rfc2119> satisfy the following constraint:</p>

<olist>
<item><p>If the &dm.prop.parent; of a text node is not empty,
the &textNode; <rfc2119>must not</rfc2119> contain the zero-length string
as its
&dm.prop.content;.
</p></item>
</olist>

<p>In addition, Document and &elementNode;s impose the constraint that
two consecutive &textNode;s can never occur as adjacent siblings.
When a Document or &elementNode; is constructed, &textNode;s that would
be adjacent <rfc2119>must</rfc2119> be
combined into a single &textNode;. If the resulting &textNode;
is empty, it <rfc2119>must</rfc2119> never be placed among the children of
its parent; it is simply discarded.
</p>

</div4>

<div4 id="TextNodeAccessors">
  <head>Accessors</head>

<glist role="accessors">
<gitem>
<label><function>attributes</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>base-uri</function></label>
<def>
<p>If the &textNode; has a parent, returns the value of the
<function>base-uri</function> of its parent; otherwise, returns
the empty sequence.</p>
</def>
</gitem>

<gitem>
<label><function>children</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>document-uri</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>is-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>is-idrefs</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>namespace-nodes</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>nilled</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>node-kind</function></label>
<def>
<p>Returns “<code>text</code>”.</p>
</def>
</gitem>

<gitem>
<label><function>node-name</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>parent</function></label>
<def>
<p>Returns the value of the &dm.prop.parent; property.
</p>
</def>
</gitem>

<gitem>
<label><function>string-value</function></label>
<def>
<p>Returns the value of the &dm.prop.content; property.
</p>
</def>
</gitem>

<gitem>
<label><function>type-name</function></label>
<def>
<p>Returns <code>xs:untypedAtomic</code>.
</p>
</def>
</gitem>

<gitem>
<label><function>typed-value</function></label>
<def>
<p>Returns the value of the &dm.prop.content; property as an
<code>xs:untypedAtomic</code>.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-public-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>

<gitem>
<label><function>unparsed-entity-system-id</function></label>
<def>
<p>Returns the empty sequence.
</p>
</def>
</gitem>
</glist>
</div4>

<div4 id="const-infoset-text">
<head>Construction from an Infoset</head>

<p>The <emph role="info-item">character information items</emph> are
required. A &textNode; is constructed for each maximal sequence of
<emph role="info-item">character information items</emph> in document order.</p>

<p>The following infoset properties are required:
<emph role="infoset-property">character code</emph> and
<emph role="infoset-property">parent</emph>.</p>

<p>The following infoset properties are optional:
<emph role="infoset-property">element content whitespace</emph>.</p>

<p>A sequence of
<emph role="info-item">character information items</emph> is maximal
if it satisfies the following constraints:</p>

<olist>
<item><p>All of the information items in the sequence have the same parent.</p>
</item>
<item><p>The sequence consists of adjacent
<emph role="info-item">character information items</emph>
uninterrupted by other types of information item.</p>
</item>
<item><p>No other such sequence exists that contains any of the same
<emph role="info-item">character information items</emph> and is longer.</p>
</item>
</olist>

<p>Text node properties are derived from the infoset as
follows:</p>

<glist>
<gitem>
<label>&dm.prop.content;</label>
<def>
<p>A string comprised of characters that correspond to the
<emph role="infoset-property">character code</emph> properties of
each of the <emph role="info-item">character information items</emph>.</p>

<p>If the resulting &textNode; consists entirely of whitespace and
the <emph role="infoset-property">element content whitespace</emph> property
of the <emph role="info-item">character information items</emph> used to
construct this node are <code>true</code>,
the &dm.prop.content; of the &textNode;
is the zero-length string. &textNode;s are allowed to be empty only if they
have no parents; an empty &textNode; will be discarded when its parent
is constructed, if it has a parent.</p>

<p>The content of the &textNode; is not necessarily normalized as
described in the <bibref ref="charmod"/>. It is the
responsibility of data producers to provide normalized
text, and the responsibility of applications to make sure that
operations do not de-normalize text.</p>
</def>
</gitem>

<gitem>
<label>&dm.prop.parent;</label>
<def>
<p>The node corresponding to the value of the
<emph role="infoset-property">parent</emph> property.</p>
</def>
</gitem>
</glist>

</div4>

<div4 id="const-psvi-text">
<head>Construction from a PSVI</head>

<p>For &textNode;s constructed from the
<emph role="infoset-property">schema normalized value</emph> of elements,
&dm.prop.content; contains the value of the
<emph role="infoset-property">schema normalized value</emph>.</p>

<p>Otherwise, construction from a PSVI is the same as construction
from the Infoset except for the &dm.prop.content; property. When
constructing the &dm.prop.content; property,
<emph role="infoset-property">element content whitespace</emph>
is not used to test if whitespace is collapsed. Instead,
if the resulting &textNode; consists entirely of whitespace and the
<emph role="info-item">character information items</emph> used to
construct this node have a parent and that parent is an element and its
{content type} is not “<code>mixed</code>”, then
the &dm.prop.content; of the &textNode;
is the zero-length string.</p>

<p>&textNode;s are allowed to be empty only if they
have no parents; an empty &textNode; will be discarded when its parent
is constructed, if it has a parent.</p>

</div4>

<div4 id="infoset-mapping-text">
<head>Infoset Mapping</head>

<p>A &textNode; maps to a sequence of <emph role="info-item">character information items</emph>.</p>

<p>Each
character of the <function>string-value</function> of the node is converted
into a <emph role="info-item">character information item</emph> as specified by this mapping:</p>

<glist>
<gitem>
<label><emph role="infoset-property">character code</emph></label>
<def>
<p>The Unicode code point value of the character.
</p>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">parent</emph></label>
<def>
<ulist>
<item>
<p>If this node is the root of the infoset mapping operation,
<emph>unknown</emph>.</p>
</item>
<item>
<p>If this node has a parent, the information item that corresponds
to the node returned by <function>parent</function>.
</p>
</item>
<item>
<p>Otherwise <emph>no value</emph>.
</p>
</item>
</ulist>
</def>
</gitem>
<gitem>
<label><emph role="infoset-property">element content whitespace</emph></label>
<def>
<p><emph>Unknown</emph>.
</p>
</def>
</gitem>
</glist>

<p>This sequence of characters constitutes the infoset mapping.</p>
</div4>

</div3>


</div2>



<div2 id="accessors">
<head>Accessors</head>

<p>A set of accessors is defined on <loc href="#Node">nodes</loc> in
the data model. For consistency, all the accessors are defined on
every kind of node, although several accessors return a constant empty
sequence on some kinds of nodes.</p>

<p>In order for processors to be able to operate on instances of the
data model, the model must expose the properties of the items it contains.
The data model does this by defining a family of accessor functions.
These are not functions in the literal sense; they are not available
for users or applications to call directly. Rather they are
descriptions of the information that an implementation of the data model
must expose to applications. Functions and operators available to end users
are described in <bibref ref="xpath-functions-40"/>.</p>

<p>Some typed values in the data model
are <termref def="dt-absent">absent</termref>.
Attempting to access an absent typed value is an error. Behavior
in these cases is implementation defined and the host language is responsible
for determining the result.</p>

<imp-def-feature>Some typed values in the data model are <emph>absent</emph>.
Attempting to access an absent typed value is an error. Behavior
in these cases is implementation defined and the host language is responsible
for determining the result.</imp-def-feature>

<div3 id="dm-attributes">
<head><code>attributes</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="attributes" return-type="attribute()" returnSeq="yes">
    <arg name="n" type="node()"/>
  </proto>
</example>

<p>The <function>attributes</function> accessor returns the attributes of
a node as a sequence containing zero or more &attributeNode;s.
The order of &attributeNode;s is stable but implementation dependent.</p>


<p>It is defined on
<loc href="#acc-summ-attributes">all seven</loc> node kinds.</p>

</div3>

<div3 id="dm-base-uri">
<head><code>base-uri</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="base-uri" return-type="xs:anyURI" returnEmptyOk="yes">
    <arg name="n" type="node()"/>
  </proto>
</example>

<p>The <function>base-uri</function> accessor returns the base URI of a node
as a sequence containing zero or one URI reference. For more information
about base URIs, see <bibref ref="xmlbase"/>.</p>

<p>It is defined on
<loc href="#acc-summ-base-uri">all seven</loc> node kinds.</p>
</div3>

<div3 id="dm-children">
<head><code>children</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="children" return-type="node()" returnSeq="yes">
    <arg name="n" type="node()"/>
  </proto>
</example>

<p>The <function>children</function> accessor returns the children of a node
as a sequence containing zero or more nodes.</p>

<p>It is defined on
<loc href="#acc-summ-children">all seven</loc> node kinds.</p>

</div3>

<div3 id="dm-document-uri">
<head><code>document-uri</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="document-uri" return-type="xs:anyURI" returnEmptyOk="yes">
    <arg name="node" type="node()"/>
  </proto>
</example>

<p>The <function>document-uri</function> accessor returns the
absolute URI of the resource from which the &documentNode; was constructed, if
the absolute URI is available. If there is no URI available, or if it cannot
be made absolute when the &documentNode; is constructed, or if it is used
on a node other than a &documentNode;,
the empty sequence is returned.
</p>

<p>It is defined on
<loc href="#acc-summ-document-uri">all seven</loc> node kinds.</p>
</div3>

<div3 id="dm-is-id">
<head><code>is-id</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="is-id" return-type="xs:boolean" returnEmptyOk="yes">
    <arg name="node" type="node()"/>
  </proto>
</example>

<p>The <function>is-id</function> accessor returns true if the
node is an XML ID. Exactly what constitutes an ID depends in part on
how the data model was constructed, see
<specref ref="ElementNode"/> and <specref ref="AttributeNode"/>.
</p>

<p>It is defined on <loc href="#acc-summ-is-id">all seven</loc>
node kinds.</p>
</div3>

<div3 id="dm-is-idrefs">
<head><code>is-idrefs</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="is-idrefs" return-type="xs:boolean" returnEmptyOk="yes">
    <arg name="node" type="node()"/>
  </proto>
</example>

<p>The <function>is-idrefs</function> accessor returns true if the
node is an XML IDREF or IDREFS.
Exactly what constitutes an IDREF or IDREFS depends in part on
how the data model was constructed, see
<specref ref="ElementNode"/> and <specref ref="AttributeNode"/>.</p>

<p>It is defined on <loc href="#acc-summ-is-idrefs">all seven</loc>
node kinds.</p>
</div3>



<div3 id="dm-namespace-nodes">
<head><code>namespace-nodes</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="namespace-nodes" return-type="node()" returnSeq="yes">
    <arg name="n" type="node()"/>
  </proto>
</example>

<p>The <function>namespace-nodes</function> accessor returns the dynamic,
in-scope namespaces associated with a node as a sequence containing
zero or more &namespaceNode;s. The order of &namespaceNode;s is stable
but implementation dependent.</p>

<p>It is defined on
<loc href="#acc-summ-namespace-nodes">all seven</loc> node kinds.</p>



</div3>

<div3 id="dm-nilled">
<head><code>nilled</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="nilled" return-type="xs:boolean" returnSeq="no"
	 returnEmptyOk="yes">
    <arg name="n" type="node()"/>
  </proto>
</example>

<p>The <function>nilled</function> accessor returns true if the
node is <quote>nilled</quote>.
<bibref ref="xmlschema-1"/> introduced the nilled mechanism to
signal that an element should be accepted as valid when it has no
content even when it has a content type which does not require or even
necessarily allow empty content.
</p>

<p>It is defined on
<loc href="#acc-summ-nilled">all seven</loc> node kinds.</p>
</div3>

<div3 id="dm-node-kind">
<head><code>node-kind</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="node-kind" return-type="xs:string" returnEmptyOk="no">
    <arg name="n" type="node()"/>
  </proto>
</example>

<p>The <function>node-kind</function> accessor returns a string identifying the
kind of node. It will be one of the following, depending on the kind of
node:
“attribute”,
“comment”,
“document”,
“element”,
“namespace”,
“processing-instruction”, or
“text”.
</p>

<p>It is defined on
<loc href="#acc-summ-node-kind">all seven</loc> node kinds.</p>

</div3>

<div3 id="dm-node-name">
<head><code>node-name</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="node-name" return-type="xs:QName" returnEmptyOk="yes">
    <arg name="n" type="node()"/>
  </proto>
</example>

<p>The <function>node-name</function> accessor returns the name of the node
as a sequence of zero or one <code>xs:QName</code>s. Note that the
QName value includes an optional prefix as described in
<specref ref="qnames-and-notations"/>.</p>

<p>It is defined on
<loc href="#acc-summ-node-name">all seven</loc> node kinds.</p>

</div3>

<div3 id="dm-parent">
<head><code>parent</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="parent" return-type="node()" returnEmptyOk="yes">
    <arg name="n" type="node()"/>
  </proto>
</example>

<p>The <function>parent</function> accessor returns the parent of a node
as a sequence containing zero or one nodes.</p>

<p>It is defined on
<loc href="#acc-summ-parent">all seven</loc> node kinds.</p>

</div3>

<div3 id="dm-string-value">
<head><code>string-value</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="string-value" return-type="xs:string" returnEmptyOk="no">
    <arg name="n" type="node()"/>
  </proto>
</example>

<p>The <function>string-value</function> accessor returns the string value
of a node.</p>

<p>It is defined on
<loc href="#acc-summ-string-value">all seven</loc> node kinds.</p>

</div3>

<div3 id="dm-type-name">
<head><code>type-name</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="type-name" return-type="xs:QName" returnEmptyOk="yes">
    <arg name="n" type="node()"/>
  </proto>
</example>

<p>The <function>type-name</function> accessor returns the name of the schema type
of a node as a sequence of zero or one <code>xs:QName</code>s.</p>

<p>It is defined on
<loc href="#acc-summ-type-name">all seven</loc> node kinds.</p>

</div3>

<div3 id="dm-typed-value">
<head><code>typed-value</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="typed-value" return-type="xs:anyAtomicType" returnSeq="yes">
    <arg name="n" type="node()"/>
  </proto>
</example>

<p>The <function>typed-value</function> accessor returns the
typed value of the node as a sequence of zero or more atomic
items.</p>

<p>It is defined on
<loc href="#acc-summ-typed-value">all seven</loc> node kinds.</p>

</div3>

<div3 id="dm-unparsed-entity-public-id">
<head><code>unparsed-entity-public-id</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="unparsed-entity-public-id" return-type="xs:string" returnEmptyOk="yes">
    <arg name="node" type="node()"/>
    <arg name="entityname" type="xs:string"/>
  </proto>
</example>

<p>The <function>unparsed-entity-public-id</function> accessor returns
the public identifier of an unparsed external entity declared in the
specified document. If no entity with the name specified in
<code>$entityname</code> exists, or if the entity is not an external
unparsed entity, or if the entity has no public identifier, the empty
sequence is returned.</p>

<p>It is defined on
<loc href="#acc-summ-unparsed-entity-public-id">all seven</loc> node kinds.</p>
</div3>

<div3 id="dm-unparsed-entity-system-id">
<head><code>unparsed-entity-system-id</code> Accessor</head>

<example role="signature">
  <proto class="dm" name="unparsed-entity-system-id" return-type="xs:anyURI" returnEmptyOk="yes">
    <arg name="node" type="node()"/>
    <arg name="entityname" type="xs:string"/>
  </proto>
</example>

<p>The <function>unparsed-entity-system-id</function> accessor returns the
system identifier of an unparsed external entity declared in the
specified document.
The value is an absolute URI, and is obtained by resolving the
<emph role="infoset-property">system identifier</emph>
of the unparsed entity information item against the
<emph role="infoset-property">declaration base URI</emph>
of the same item.
If no entity with the name specified in <code>$entityname</code>
exists, or if the entity is not an external unparsed entity, the empty sequence
is returned.</p>

<p>It is defined on
<loc href="#acc-summ-unparsed-entity-system-id">all seven</loc> node kinds.</p>
</div3>
</div2>
</div1>
  
  <div1 id="functions-maps-arrays">
    <head>Function Items, Maps, and Arrays</head>
    
    <div2 id="function-items">
<head>Function Items</head>
  <changes>
    <change issue="520" PR="525" date="2023-05-30">
      Introduced the concept of function identity.
    </change>
    <change issue="1896">
      The <term>parameter names</term> property of a function item is dropped;
      the property never had any effect on the semantics of the language.
    </change>
  </changes>

<p>
<termdef term="function item" id="dt-function-item">
  A <term>function item</term> is an <termref def="dt-item"/> that can be called with zero or more
  arguments to return a result.
</termdef>
Function items <phrase diff="del" at="2023-05-25">cannot be compared for
identity, equality, or otherwise, and</phrase> have no serialization.
</p>
  
  <note diff="add" at="2023-03-11"><p>XDM 4.0 uses the term <term>function item</term> where XDM 3.1 used
    <term>function</term>. There is no distinction
    in meaning, but <term>function item</term> is preferred for clarity, because the unqualified
    term <term>function</term> has additional meanings in relation to
    <term>function definitions</term> in XSLT and XQuery.</p></note>

<p>A function item has the following properties:
</p>

<ulist>
  <item>
    <p>
      <term role="property-definition" id="prop-function-name">name</term>:
      An expanded QName, possibly
      <termref def="dt-absent">absent</termref>. 
    </p>
  </item>
  <item>
    <p diff="add" at="2023-05-25">
      <term role="property-definition" id="prop-function-identity">identity</term>: An abstract property that can be used to test whether
      two variables refer to the same function or to different functions. This property
      is exposed only for this purpose.
    </p>
    <note><p>Currently, the concept of function identity is used for two purposes: firstly,
    when functions appear in the arguments supplied to the <code>fn:deep-equal</code> function;
    and secondly, in establishing whether the arguments and results of a function are "the same"
    when deciding whether the function is deterministic.</p></note>
  </item>
  
  <item>
    <p>
      <term role="property-definition" id="prop-function-signature">signature</term>
      <termdef term="function signature" id="dt-signature">
        A <term>function signature</term>
        represents the type of a
        <termref def="dt-function-item">function</termref>.</termdef>
      The signature of a function item comprises:
    </p>
    <ulist>
      <item><p>The required types of its parameters (each one being a <xnt spec="XP40" ref="doc-xpath40-SequenceType">SequenceType</xnt>)</p></item>
      <item><p>The required types of the function result (also a <xnt spec="XP40" ref="doc-xpath40-SequenceType">SequenceType</xnt>)</p></item>
    </ulist>

  </item>
  <item>
    <p>
      <term role="property-definition" id="prop-function-annotations">annotations</term>
      A sequence of zero or more <term>function annotations</term>. 
      <termdef term="function annotation" id="dt-function-annotation">A <term>function annotation</term> 
      consists of an annotation name (an instance of <code>xs:QName</code>) and an annotation value
      (an arbitrary sequence of atomic items).</termdef> Annotations are ordered and it is permitted for two
      annotations to share the same name.
    </p>
  </item>
  <item>
    <p>
      <term role="property-definition" id="prop-function-body">body</term>
      The body of a function provides the logic
      to map the arguments supplied in a function call into an instance of 
      the function’s result type.</p>
    
    <p diff="chg" at="2023-03-11"> 
      The function body is generally one of the following:</p>
      <ulist>
        <item>
          <p>a user-written construct in XPath, XQuery, XSLT, or some
            other host language known to the processor.
          </p>
        </item>
        <item>
          <p>vendor-supplied logic internal to the processor.</p>
        </item>
        <item>
          <p>external logic written in some third-party programming
            language, to be invoked by the processor using implementation-dependent
            mechanisms.</p>
        </item>
      </ulist>
    <p>These categories are not mutually exclusive; they may be used in combination.</p> 
    <note><p>The term “function body” replaces “function implementation”, to avoid confusion with
    the use of the term “implementation” in phrases such as “implementation-defined”.</p></note>
  </item>
  <item>
    <p>
      <term role="property-definition" id="prop-function-captured-context">captured context</term> This includes a static and dynamic context for evaluation
      of the function body, as described in <xspecref spec="XP40" ref="context"/>. In particular
      it includes a set of <term>nonlocal variable bindings</term>
      (a mapping from <code>xs:QName</code> to <code>item()*</code>),
      which provides a value for each of the function’s free variables
      (i.e., variables referenced by the function’s body, other than locals and parameters).
    </p>
    <note diff="chg" at="2023-03-11">
      <p>Where the function body is implemented in XPath, XQuery, or XSLT, the captured
      context includes the static context for the user-written code (for example, its in-scope namespaces)
      as well as any nonlocal variable bindings.</p>
      <p>Functions implemented internally by the processor may capture specific parts of the static or dynamic context,
      for example <code>fn:position#0</code> captures the value of the context position.</p>
    </note>
  </item>
</ulist>

<p>
<termdef term="function arity" id="dt-function-arity">
  The <term>arity</term> of a <termref def="dt-function-item"/> is the number of its parameters.
</termdef>
The number of parameter types in a function's signature,
must equal the function’s arity.
</p>

  <p diff="chg" at="2022-12-17">All function items match the generic function type <code>function(*)</code>,
    which is itself a subtype of <code>item()</code>. 
    A <termref def="dt-signature">function signature</termref> defines a more specific function type, which is always
    a subtype of <code>function(*)</code>. A function signature 
    <code>function(<var>T/1</var>, <var>T/2</var>, <var>T/3</var>, ...) as <var>T/R</var></code> is a subtype of another
    function signature <code>function(<var>U/1</var>, <var>U/2</var>, <var>U/3</var>, ...) as <var>U/R</var></code>
    if (a) the two signatures have the same <termref def="dt-function-arity">arity</termref>, (b) the return type <var>T/R</var>
    is a subtype of <var>U/R</var>, and (c) for each pair of parameter types, <var>T/n</var> is a supertype of <var>U/n</var>.
    The rules are explained more fully in <xspecref spec="XP40" ref="id-sequencetype-subtype"/>. For example:
</p>

<ulist>
  <item><p><code>function(item()) as item()</code> is a subtype of <code>function(*)</code>
  </p></item>
  <item><p><code>function(item()) as xs:integer</code> is a subtype of <code>function(item()) as item()</code>
  </p></item>
  <item><p>
    <code>function(item()) as item()</code> is a subtype of <code>function(xs:string) as item()</code>
  </p></item>
</ulist>

</div2>

<div2 id="map-items">
<head>Map Items</head>
  
  <changes>
    <change issue="1335" date="2024-07-20">Constructors are added, and the single accessor function
    is now an iterator over the key/value pairs in the map.</change>
    <change issue="1651" PR="1703" date="2025-01-14">Ordered maps are introduced.</change>
  </changes>

<p><termdef term="map item" id="dt-map-item">A <term>map item</term>
(also called simply a <term>map</term>)
is a <termref def="dt-function-item"/> that represents an ordered sequence of key/value pairs,
in which the keys are unique.</termdef> 
  In other languages this is sometimes 
called a hash, dictionary, or associative array.
  The keys are atomic items, and each key in the map is unique (there is no other key
to which it is equal). Each key is associated with a value that may be any sequence 
of zero or more items. There is no uniqueness constraint on
values, only on keys. The semantics of equality when comparing keys are described in
<xspecref spec="FO40" ref="func-atomic-equal"/>.</p>
  
  <p><termdef id="dt-entry" term="entry">The key/value pairs in a map are
    referred to as <term>entries</term>.</termdef></p>
  
    <p>Considered as a <termref def="dt-function-item"/>, a map is a function from
  atomic items to values: if <var>M</var> is a map and <var>K</var> is an atomic item,
  then the function call <code><var>M</var>(<var>K</var>)</code> returns the
  value associated with the key <var>K</var>, if present, or an empty sequence otherwise. More specifically,
    the properties of a map when considered as a function item are:</p>
  
  <ulist>
  <item>
    <p>
      <term>name</term>:
      <termref def="dt-absent">absent</termref>. 
    </p>
  </item>
  <item>
    <p>
      <term>identity</term>: <termref def="dt-implementation-dependent"/>.
    </p>
  </item>
  <item>
    <p>
      <term>signature</term>: <code>function(xs:anyAtomicType) as item()*</code>.
    </p>
  </item>
  <item>
    <p>
      <term>annotations</term>: none.
    </p>
  </item>
  <item>
    <p>
      <term>body</term>: equivalent to a call on <function>map:get</function>.
    </p>
  </item>
  <item>
    <p>
      <term>captured context</term>: empty.
    </p>
  </item>
</ulist>
  
  
  
  <p><termdef id="dt-single-entry-map" term="single-entry map">A map containing exactly
    one entry is referred to as a <term>single-entry map</term>.</termdef></p>
  
  <p><termdef id="dt-empty-map" term="empty map">A map containing no entries 
    is referred to as an <term>empty map</term>.</termdef></p>
  

<note>
<p>Note the distinction between a <termref def="dt-singleton"/> map, which is a sequence
    of length one containing a single map item, and a <termref def="dt-single-entry-map"/>,
    which is a map containing exactly one <termref def="dt-entry"/>.</p>
</note>


  
  <p><termdef id="dt-entry-order" term="entry order">The order of entries in a map
            is referred to as <term>entry order</term>.</termdef>
  The entry order affects the result of functions such as <function>map:keys</function>
  and <function>map:for-each</function>, and also determines the order of entries
  when a map is serialized using the JSON output method.</p>


<p>Constructor and accessor functions for maps are defined in the following sections.</p>
  
  <div3 id="dm-empty-map">
    <head><code>empty-map</code> Constructor</head>
    <example role="signature">
      <proto class="dm" name="empty-map" return-type="map(*)" returnSeq="no"/>     
    </example>
    
    <p>The <code>dm:empty-map</code> constructor returns an <termref def="dt-empty-map"/>,
      that is, a map containing no key/value pairs.</p>
    
    <note><p>In XPath an <termref def="dt-empty-map"/> may be constructed using the expression <code>{}</code>
    or <code>map {}</code>.</p></note>
  </div3>
  
  <div3 id="dm-map-put">
    <head><code>map-put</code> Constructor</head>
    <example role="signature">
      <proto class="dm" name="map-put" return-type="map(*)" returnSeq="no">
        <arg name="map" type="map(*)"/>
        <arg name="key" type="xs:anyAtomicType"/>
        <arg name="value" type="item()*"/>
      </proto>
    </example>
    
    <p>The <code>dm:map-put</code> constructor returns a map based on the contents of a supplied map.</p>
    <p>The key/value pairs in the returned map are as follows, in order:</p>
    <olist>
      <item><p>If <code>$map</code> includes a key/value pair (call it <var>E0</var>) whose key is
      atomic-equal to <code>$key</code>, then:</p>
      <olist>
        <item><p>All the key/value pairs in <code>$map</code> that precede <var>E0</var> in 
        <termref def="dt-entry-order"/>.</p></item>
        <item><p>A key/value pair whose key is either <code>$key</code> or the existing key of <var>E0</var>, and
        whose value part is <code>$value</code>. It is <termref def="dt-implementation-dependent"/>
        which key is chosen.</p>
        <note><p>Most commonly, the two keys will be indistinguishable. However, they may
        have different type annotations (for example, <code>xs:string</code> versus <code>xs:untypedAtomic</code>,
        or they may be date/time values in different timezones.</p></note></item>
        <item><p>All the key/value pairs in <code>$map</code> that follow <var>E0</var> in 
        <termref def="dt-entry-order"/>.</p></item>
      </olist></item>
      
      <item>
        <p>Otherwise:</p>
        <olist>
        <item><p>All the key/value pairs in <code>$map</code>.</p></item>
          <item><p>A key/value pair whose key is <code>$key</code> and
        whose value part is <code>$value</code>.</p></item>
        </olist>
      </item>
      
      
    </olist>
    
    <note>
    <p>The <termref def="dt-entry-order"/> in the returned
      map reflects the <termref def="dt-entry-order"/> in the supplied <code>$map</code>. If the key of
      the new entry was present in <code>$map</code> then the new entry replaces that entry retaining
      its current position; otherwise, the new entry is added after all existing entries.</p>
    </note>
    
    <p>The function is exposed in XPath through the function <function>map:put</function>.</p>
  </div3>

  <div3 id="dm-iterate-map">
  <head><code>iterate-map</code> Accessor</head>
  
    <example role="signature">
      <proto class="dm" name="iterate-map" return-type="item()*">
        <arg name="map" type="map(*)"/>
        <arg name="action" type="function(xs:anyAtomicType, item()*) as item()*"/>
      </proto>
    </example>
    
    <p>The <code>dm:iterate-map</code> accessor calls the supplied <code>$action</code>
      function once for each key/value pair in <code>$map</code>,
      and returns the sequence concenation of the results. The order in which entries
    are processed is the <termref def="dt-entry-order"/> of the map.</p>
      
      <p>The function is exposed in XPath most directly through the function <function>map:for-each</function>, but
      it also underpins all other functions giving access to maps, such as <function>map:size</function>,
      <function>map:contains</function>, and <function>map:get</function>.</p>
    
  </div3>

</div2>

<div2 id="array-items">
  <head>Array Items</head>
  
  <changes>
    <change issue="1335" date="2024-07-20">Constructors are added, and the single accessor function
    is now an iterator over the members of the array.</change>
  </changes>

<p><termdef term="array item" id="dt-array-item">An <term>array item</term> 
  (also called simply an <term>array</term>)
is a <termref def="dt-function-item"/> that represents an array.</termdef>
<termdef id="dt-member" term="member">An array is an ordered list of values; these values are called the
<term>members</term> of the array.</termdef> Unlike sequences, a member of an array can be
any value (including a sequence or an array). The number of members in
an array is called its size, and they are referenced by their
position, in the range 1 to the size of the array.</p>
  
  <p>Considered as a <termref def="dt-function-item"/>, an array is a function from
  integers to values: if <var>A</var> is an array and <var>N</var> is an integer,
  then the function call <code><var>A</var>(<var>N</var>)</code> returns the
  <var>N</var>th member of the array (counting from one). More specifically,
  the properties of an array, considered as a function item, are:</p>
  
  <p>Considered as a <termref def="dt-function-item"/>, a map is a function from
  atomic items to values: if <var>M</var> is a map and <var>K</var> is an atomic item,
  then the function call <code><var>M</var>(<var>K</var>)</code> returns the
  value associated with the key <var>K</var>, if present, or an empty sequence otherwise. More specifically,
    the properties of a map when considered as a function item are:</p>
  
  <ulist>
  <item>
    <p>
      <term>name</term>:
      <termref def="dt-absent">absent</termref>. 
    </p>
  </item>
  <item>
    <p>
      <term>identity</term>: <termref def="dt-implementation-dependent"/>.
    </p>
  </item>
  <item>
    <p>
      <term>signature</term>: <code>function(xs:integer) as item()*</code>.
    </p>
  </item>
  <item>
    <p>
      <term>annotations</term>: none.
    </p>
  </item>
  <item>
    <p>
      <term>body</term>: equivalent to a call on <function>array:get</function>.
    </p>
  </item>
  <item>
    <p>
      <term>captured context</term>: empty.
    </p>
  </item>
</ulist>
 
  <p><termdef id="dt-single-member-array" term="single-member array">An array containing exactly
    one member is referred to as a <term>single-member array</term>.</termdef></p>
  
  <p><termdef id="dt-empty-array" term="empty array">An array containing no members 
    is referred to as an <term>empty array</term>.</termdef></p>

  <note><p>Note the distinction between a <termref def="dt-singleton"/> array, which is a sequence
    of length one containing a single array item, and a <termref def="dt-single-member-array"/>,
    which is a map containing exactly one <termref def="dt-member"/>.</p></note>

<p>Constructor and accessor functions for arrays are defined in the following sections.</p>
  
  <div3 id="dm-empty-array">
    <head><code>empty-array</code> Constructor</head>
    <example role="signature">
      <proto class="dm" name="empty-array" return-type="array(*)"/>
    </example>
    
    <p>The <code>dm:empty-array</code> constructor returns an <termref def="dt-empty-array"/>,
      that is, an array item containing no members.</p>
    
    <p>The function is exposed in XPath as an empty array constructor, written <code>[]</code>
    or <code>array {}</code>.</p>
  </div3>
  
  <div3 id="dm-array-append">
    <head><code>array-append</code> Constructor</head>
    <example role="signature">
      <proto class="dm" name="array-append" return-type="array(*)">
        <arg name="array" type="array(*)"/>
        <arg name="member" type="item()*"/>
      </proto>
    </example>
    
    <p>The <code>dm:array-append</code> constructor returns an array based on the contents of a supplied array.</p>
    <p>The returned array contains:</p>
    <ulist>
      <item><p>One member for every member present in <code>$array</code>, at the same position; plus</p></item>
      <item><p>One additional member, <code>$member</code>, as the last member in the returned array.</p></item>
    </ulist>
    
    <p>The function is exposed in XPath through the function <code>array:append</code>.</p>
  </div3>
  
  <div3 id="dm-iterate-array">
  <head><code>iterate-array</code> Accessor</head>
  
    <example role="signature">
      <proto class="dm" name="iterate-array" return-type="item()*">
        <arg name="array" type="array(*)"/>
        <arg name="action" type="function(item()*, xs:integer) as item()*"/>
      </proto>
    </example>
    
    <p>The <code>dm:iterate-array</code> accessor calls the supplied <code>$action</code>
      function once for each member in <code>$array</code>, in order,
      and returns the sequence concenation of the results. The <code>$action</code> function
      is called with two arguments. The first argument is the array member (an arbitrary sequence),
      and the second is its 1-based ordinal position within the array.</p>
      
      <p>The function is exposed in XPath most directly through the function <code>array:for-each</code> (but
        note that <code>array:for-each</code> delivers an array rather than a sequence). 
        It also underpins all other functions giving access to arrays, such as <code>array:size</code>
       and <code>array:get</code>.</p>
    
  </div3>


    
</div2>
    
    <div2 id="id-JNodes">
    <head>JNodes</head>
    <changes>
      <change issue="2025" PR="2031" date="2025-06-11">
        Introduced the concept of JNodes.
      </change>
    </changes>
    
    <p><termdef id="dt-JNode" term="JNode">A <term>JNode</term> is a kind of <termref def="dt-item"/>
      used to represent a value within the context of a tree of <termref def="dt-map-item">maps</termref>
      and <termref def="dt-array-item">arrays</termref>. A root <term>JNode</term> represents
      a map or array; a non-root <term>JNode</term> represents a <termref def="dt-member"/> of an 
      array or an <termref def="dt-entry"/> in a map.</termdef></p> 
      
      <p>The type JNode is a subtype of 
      <termref def="dt-GNode"/> (a generic node).
    JNodes have identity, and are organized into trees called <termref def="dt-JTree">JTrees</termref>.
    </p>
      <p><termdef id="prop-jnode-value" term="value">Every <termref def="dt-JNode"/> has a property <term>·content·</term> which is an 
        arbitrary <termref def="dt-value"/> (that is, in general, a <termref def="dt-sequence"/>).</termdef></p>
      
      <p>In addition a JNode that is not a root JNode has the following properties:</p>
      
      <slist>
        <sitem><term>·parent·</term>: a JNode</sitem>
        <sitem><term>·position·</term>: a positive integer</sitem>
        <sitem><term>·selector·</term>: an atomic item</sitem>
      </slist>
      
      <p>In effect, there are four kinds of JNode (though they are not distinguished
      as different types in the type system):</p>
      
      <ulist>
        <item><p>A root JNode that represents a map.</p></item>
        <item><p>A root JNode that represents an array.</p></item>
        <item><p>A non-root JNode that represents an entry in a map.</p></item>
        <item><p>A non-root JNode that represents a member of an array.</p></item>
      </ulist>
      
      <p><termdef id="dt-j-children" term="j-children">The accessor <code>j-children</code>, applied to a JNode <var>$P</var>, returns a sequence
      of non-root JNodes representing the children of <var>$P</var>.</termdef></p>
      

      
      
      <p>Values are classified as <term>leaf</term> or <term>non-leaf</term>. A value is classified
        as <term>non-leaf</term> if and only if at least one item in the value
      is a non-empty map or array. If the ·content· property of a JNode is classified as <term>leaf</term>, then
      the <code>j-children</code> accessor returns an empty sequence.</p>
      
      <note><p>If the <code>j-children</code> accessor of a JNode returns an empty sequence,
      then it is necessary to examine the ·content· property in order to distinguish whether
      the value is (for example) an empty sequence, an atomic item, an empty map,
      or an empty array.</p></note>
      
      <p>If the ·content· property of a JNode <var>P</var> is classified as <term>non-leaf</term>, then
      the <code>j-children</code> accessor returns a sequence of JNodes that includes
        one JNode for each member of an array in <var>J</var> and one JNode for each entry
        of a map in <var>J</var>. More specifically, the result is determined
        by the expression below. This expression uses
        the following notation:</p>
      
      <ulist>
        <item><p>The function
        <code>dm:j-value</code> is used to access the ·content· property of a JNode</p></item>
        <item><p>The function <code>dm:JNode</code> is used to construct (or obtain)
        a JNode whose properties correspond to the names of the argument keywords.</p></item>
      </ulist>
      
      <eg>         
for $item at $pos in dm:j-value($P)
return
  if ($item instance of array(*))
  then for member $member at $index in $item
       return dm:JNode(parent := $P,
                       position := $pos,
                       selector := $index,
                       value := $member)
  else if ($item instance of map(*))
  then for key $key value $value in $item
       return dm:JNode(parent := $P,
                       position := $pos,
                       selector := $key
                       value := $value)
  else ()
</eg> 
      
      <p>The order of JNodes returned by the <code>j-children</code> accessor is significant, and is
      as defined by the above expression.</p>
  
      <example>
        <head>A JTree derived by parsing JSON</head>
        <p>In a JTree derived from JSON, every member of an array will always be either a single item
          (a string, number, boolean, array, or map),
        or an empty sequence representing the JSON value <code>null</code>. Similarly, every entry
        in a map will have a key that is a single <code>xs:string</code>, and a corresponding
        value that is either a single item (as above) or an empty sequence representing <code>null</code>.</p>
        
        <p>Consider a tree constructed by parsing the following JSON input:</p>
        
        <eg role="json">[
  {"a": 1, "b": "XXX", "c": true, "d": null},
  {"a": 2, "b": "YYY", "c": false, "d": null}
]
  </eg>
        <p>Then:</p>
        <ulist>
          <item><p>The root JNode <var>R</var> has a ·content· property that is an 
            array of two maps.</p></item>
          <item><p>The 
            result of the <code>dm:j-children</code> accessor applied to <var>R</var> is a sequence of two 
            JNodes <var>M1</var> and <var>M2</var>, each
            representing one of the two maps.</p></item>
          <item><p>For <var>M1</var>:</p>
            <ulist>
              <item><p><term>·parent·</term> is <var>R</var>.</p></item>
              <item><p><term>·content·</term> is the first map.</p></item>
              <item><p><term>·position·</term> is 1.</p></item>
              <item><p><term>·selector·</term> is 1.</p></item>
              <item><p>The <emph>dm:j-children</emph> accessor returns a sequence of four
              JNodes, as follows:</p>
              <ulist>
                <item><p>All four have <term>·parent·</term> set to <var>M1</var>.</p></item>
                <item><p>The <term>·content·</term> properties are respectively <code>1</code>,
                  <code>"XXX"</code>, <code>true()</code>, and <code>()</code>.</p></item>
                <item><p>The <term>·position·</term> properties are all set to 1.</p></item>
                <item><p>The <term>·selector·</term> properties are respectively <code>"a"</code>
                <code>"b"</code>, <code>"c"</code>, and <code>"d"</code>.</p></item>
                <item><p>For each of these JNodes, the <emph>dm:j-children</emph> accessor returns
                an empty sequence.</p></item>
              </ulist></item>
            </ulist>
          </item>
          <item><p>For <var>M2</var>:</p>
            <ulist>
              <item><p><term>·parent·</term> is <var>R</var>.</p></item>
              <item><p><term>·content·</term> is the second map.</p></item>
              <item><p><term>·position·</term> is 1.</p></item>
              <item><p><term>·selector·</term> is 2.</p></item>
              <item><p>The <emph>dm:j-children</emph> accessor returns a sequence of four
              JNodes, as follows:</p>
              <ulist>
                <item><p>All four have <term>·parent·</term> set to <var>M2</var>.</p></item>
                <item><p>The <term>·content·</term> properties are respectively <code>2</code>,
                  <code>"YYY"</code>, <code>false()</code>, and <code>()</code>.</p></item>
                <item><p>The <term>·position·</term> properties are all set to 1.</p></item>
                <item><p>The <term>·selector·</term> properties are respectively <code>"a"</code>
                <code>"b"</code>, <code>"c"</code>, and <code>"d"</code>.</p></item>
                <item><p>For each of these JNodes, the <emph>dm:j-children</emph> accessor returns
                an empty sequence.</p></item>
              </ulist></item>
            </ulist>
          </item>
        </ulist>
        <p>Note that all JNodes in a JTree that represents parsed JSON input will have the
        <term>·position·</term> property set to 1. This is because every construct in JSON 
        (arrays, objects, strings, number, booleans, and <code>null</code>) maps to an XDM sequence
        of length 0 or 1.</p>
      </example>
      
      <example>
        <head>A JTree representing arbitrary XDM content</head>
        <p>Consider a JTree that wraps a map constructed by the following XQuery expression:</p>
        
        <eg><![CDATA[{
   "a": 1,
   "b": ("x", "y"),
   "c": [(10, 20), 30],
   "d": (10, [20, 30]),
   "e": (<p/>, <q/>)
}]]></eg>
        
        <p>Then:</p>
        <ulist>
          <item><p>The root JNode <var>R</var> has a ·content· property that is a 
            map with five entries.</p></item>
          <item><p>The result of the <code>dm:j-children</code> accessor applied to <var>R</var>
          is a sequence of five JNodes <var>J1</var>, <var>J2</var>, <var>J3</var>, <var>J4</var>, and <var>J5</var>,
          as follows:</p>
          <ulist>
            <item><p><var>J1</var> is a leaf node. It has <term>·parent·</term>=<var>R</var>, <term>·content·</term>=1, <term>·position·</term>=1, and
            <term>·selector·</term>="a". Its <code>dm:j-children</code> accessor returns an empty sequence.</p></item>
            <item><p><var>J2</var> is a leaf node. It has <term>·parent·</term>=<var>R</var>, <term>·content·</term>=("x", "y"), <term>·position·</term>=1, and
            <term>·selector·</term>="b". Its <code>dm:j-children</code> accessor returns an empty sequence.</p></item>
            <item><p><var>J3</var> has <term>·parent·</term>=<var>R</var>, <term>·content·</term>=[(10, 20), 30], <term>·position·</term>=1, and
            <term>·selector·</term>="c". Its <code>dm:j-children</code> accessor returns a sequence of two
              JNodes <var>J/31</var> and <var>J/32</var>, representing the two members of the contained
              array, as follows:</p>
              <ulist>
                <item><p><var>J/31</var> is a leaf node. It has <term>·parent·</term>=<var>J3</var>, <term>·content·</term>=(10, 20), <term>·position·</term>=1, and
                 <term>·selector·</term>="1". Its <code>dm:j-children</code> accessor returns an empty sequence.</p></item>
                <item><p><var>J/32</var> is a leaf node. It has <term>·parent·</term>=<var>J3</var>, <term>·content·</term>=30, <term>·position·</term>=1, and
                 <term>·selector·</term>="2". Its <code>dm:j-children</code> accessor returns an empty sequence.</p></item>
              </ulist>
            </item>
            <item><p><var>J4</var> has <term>·parent·</term>=<var>R</var>, 
              <term>·content·</term>=(10, [20, 30]), <term>·position·</term>=1, and
            <term>·selector·</term>="d". Its <code>dm:j-children</code> accessor returns a sequence of two
              JNodes <var>J/41</var> and <var>J/42</var>, representing the two members of the
              contained array, as follows:</p>
              <ulist>
                <item><p><var>J/41</var> is a leaf node. It has <term>·parent·</term>=<var>J4</var>, <term>·content·</term>=20, <term>·position·</term>=2, and
                 <term>·selector·</term>="1". Its <code>dm:j-children</code> accessor returns an empty sequence.</p></item>
                <item><p><var>J/42</var> is a leaf node. It has ·parent·=<var>J4</var>, <term>·content·</term>=30, <term>·position·</term>=2, and
                 <term>·selector·</term>="2". Its <code>dm:j-children</code> accessor returns an empty sequence.</p></item>
              </ulist>
            </item>
            <item><p><var>J5</var> is a leaf node. It has ·parent·=<var>R</var>, a <term>·content·</term> that is a sequence
              of two element nodes named <code>p</code> and <code>q</code>, <term>·position·</term>=1, and
            <term>·selector·</term>="e". Its <code>dm:j-children</code> accessor returns an empty sequence.</p></item>
          </ulist>
          </item>
        </ulist>
          
          <note><p>Sequences (as distinct from maps and arrays) are not represented by an 
          extra layer of JNodes in the tree. This is because the structure is designed primarily to
          assist navigation of JTrees derived from JSON processing, in which sequence-valued nodes
          never arise. Generally, JTrees are easier to manipulate if none of the contained arrays
          or maps contain sequence-valued members or entries. JTrees containing non-homogenous
          content (for example, sequences that mix arrays, maps, and other items) can be represented
          using JNodes without loss of information, but may be difficult to navigate.</p></note>
          
      </example>
      
      
        
          <p>For a JNode representing the root of a JTree, the <term>·parent·</term>, <term>·position·</term>,
            and <term>·selector·</term>
          properties will always be absent. For a non-root JNode, these properties will always be present.</p>
          
          <p>The identity of a root JNode is established when the root JNode is constructed, so that
          every operation that constructs a root JNode returns a JNode with distinct identity. The
          identity of a non-root JNode is a function of its <term>·parent·</term>, <term>·position·</term>, and <term>·selector·</term>
          properties: two non-root JNodes are identical by definition if and only if their
            <term>·parent·</term>s are identical and their <term>·position·</term> and <term>·selector·</term>
            properties are equal as determined by the <function>atomic-equal</function> function.</p>
          
          <p>A root JNode is constructed, wrapping a map or array, by a call on the <function>jnode</function>
          function applied to that map or array. This can be called explicitly, but it is also called
          implicitly in a number of situations: for example when a map or array is used as the left-hand 
          operand of the path operator <code>/</code>.</p>
      
      <note><p>An efficient implementation is likely to construct JNodes lazily, as and when a map or
      array is reached by downward navigation using XPath axis steps, which implicitly invoke
      the <code>dm:j-children</code> accessor. Typical implementations of maps and arrays do not
      include parent pointers to a containing map or array; these are contained only transiently
      in the JNode that wraps a map or array reached by downward navigation in the JTree.
      A benefit of not storing parent pointers is that a map or array does not need to be copied
      in order to participate in multiple trees.</p>
      
      <p>This implementation strategy mirrors the concept of a <term>Zipper</term> data structure
      commonly encountered in other functional programming languages. The general idea is that
      while the core data structure maintains references in one direction only (in this case from
      parent to child), an operation that navigates the data structure can retain additional information
      about the path that was followed, effectively allowing access to nodes of the structure
      that were visited <emph>en route</emph>. This additional information is reified in the
      <term>·parent·</term>, <term>·position·</term>, and <term>·selector·</term> properties
      of a non-root JNode.</p></note>
      
      
  </div2>
    
    
  </div1>


<div1 id="conformance">
<head>Conformance</head>

<p>The data model is intended primarily as a component that can be
used by other specifications. Therefore, the data model relies on
specifications that use it (such as <bibref ref="xpath-40"/>,
<bibref ref="xslt-40"/>, and <bibref ref="xquery-40"/>) to specify conformance
criteria for the data model in their respective environments.
Specifications that set conformance criteria for their use of the data
model must not relax the constraints expressed in this
specification.</p>

<p>Authors of conformance criteria for the use of the data
model should pay particular attention to the following features of
the data model:</p>

<olist>
<item>
<p>Support for the normative construction from an infoset described in
<specref ref="const-infoset"/>.
</p>
</item>
<item>
<p>Support for the normative construction from a PSVI described in
<specref ref="const-psvi"/>.
</p>
</item>
<item>
<p>Support for XML 1.0 and XML 1.1.
</p>
</item>
<item>
<p>Support for data types in XML Schema 1.0 and XML Schema 1.1.
</p>
</item>
<item>
<p>How namespaces are supported, through nodes or through the
alternative, implementation-dependent representation.</p>
</item>
</olist>

<note>
<p>In addition, the <function>is-id</function> 
and <function>base-uri</function> accessors are required by functions in <bibref ref="xpath-functions-40" />.
These refer to the specifications  <bibref ref="xml-id"/>
and <bibref ref="xmlbase"/> respectively.</p>
</note>

</div1>

</body>

<back>
<div1 id="infoset-conformance">
<head>XML Information Set Conformance</head>

<p>This specification conforms to the XML Information Set
<bibref ref="xml-infoset"/>.
The following information items <rfc2119>must</rfc2119> be exposed
by the infoset producer to construct a data model unless they are explicitly
identified as optional:</p>

<ulist>
  <item><p>The <emph role="info-item">Document Information Item</emph> with
           <emph role="infoset-property">base URI</emph>,
           <emph role="infoset-property">children</emph>, and, optionally,
           <emph role="infoset-property">unparsed entities</emph>
           properties. If the
           <emph role="infoset-property">unparsed entities</emph> property
	   is supported, the <emph role="info-item">Unparsed Entity
           Information Items</emph> must also be supported.</p></item>

  <item><p><emph role="info-item">Element Information Items</emph> with
           <emph role="infoset-property">base URI</emph>,
           <emph role="infoset-property">children</emph>,
           <emph role="infoset-property">attributes</emph>,
           <emph role="infoset-property">in-scope namespaces</emph>,
           <emph role="infoset-property">prefix</emph>,
           <emph role="infoset-property">local name</emph>,
           <emph role="infoset-property">namespace name</emph>,
           <emph role="infoset-property">parent</emph> properties.</p></item>

  <item><p><emph role="info-item">Attribute Information Items</emph> with
           <emph role="infoset-property">namespace name</emph>,
           <emph role="infoset-property">prefix</emph>,
           <emph role="infoset-property">local name</emph>,
           <emph role="infoset-property">normalized value</emph>,
           <emph role="infoset-property">attribute type</emph>, and
           <emph role="infoset-property">owner element</emph> properties.</p></item>

  <item><p><emph role="info-item">Character Information Items</emph> with
           <emph role="infoset-property">character code</emph>,
           <emph role="infoset-property">parent</emph>, and, optionally,
           <emph role="infoset-property">element content whitespace</emph>
           properties.</p></item>

  <item><p><emph role="info-item">Processing Instruction Information Items</emph> with
           <emph role="infoset-property">base URI</emph>,
           <emph role="infoset-property">target</emph>,
           <emph role="infoset-property">content</emph> and
           <emph role="infoset-property">parent</emph> properties.</p></item>

  <item><p><emph role="info-item">Comment Information Items</emph> with
           <emph role="infoset-property">content</emph> and
           <emph role="infoset-property">parent</emph> properties.</p></item>

  <item><p><emph role="info-item">Namespace Information Items</emph> with
           <emph role="infoset-property">prefix</emph> and
           <emph role="infoset-property">namespace name</emph> properties.</p></item>
</ulist>

<p>Other information items and properties made available by the
Infoset processor are ignored.  In addition to the properties above,
the following PSVI properties are required
on
<emph role="info-item">Element Information Items</emph> and
<emph role="info-item">Attribute Information Items</emph>
if the data model is constructed from a PSVI:</p>

<ulist>
  <item><p><emph role="infoset-property">validity</emph>,
  <emph role="infoset-property">validation attempted</emph>,
  <emph role="infoset-property">type definition</emph>,
  <emph role="infoset-property">type definition namespace</emph>,
  <emph role="infoset-property">type definition name</emph>,
  <emph role="infoset-property">type definition anonymous</emph>,
  <emph role="infoset-property">nil</emph>,
  <emph role="infoset-property">member type definition</emph>,
  <emph role="infoset-property">member type definition namespace</emph>,
  <emph role="infoset-property">member type definition name</emph>,
  <emph role="infoset-property">member type definition anonymous</emph> and
  <emph role="infoset-property">schema normalized value</emph>.</p>
  </item>
</ulist>

</div1>

<div1 id="references">
<head>References</head>

<div2 id="normative-references">
<head>Normative References</head>

<blist>

<!--FIXME: update ../etc/tr with the latest TR page info! -->

<bibl id="xml"                key="XML"/>
<bibl id="xml-infoset"        key="Infoset"/>
<bibl id="xml-names"          key="Namespaces in XML"/>
<bibl id="xml-names11"        key="Namespaces in XML 1.1"/>
<bibl id="xml-id"             key="xml:id"/>

<bibl id="xpath-datamodel-30" key="XDM 3.0"/>
<bibl id="xpath-datamodel-40" key="XDM 4.0"/>
<bibl id="xpath-40"           key="XPath 4.0"/>
<bibl id="xpath-functions-40" key="Functions and Operators 4.0"/>

<bibl id="xmlschema-1"        key="Schema Part 1"/>
<bibl id="xmlschema-2"        key="Schema Part 2"/>
<bibl id="xmlschema11-1"      key="Schema 1.1 Part 1"/>
<bibl id="xmlschema11-2"      key="Schema 1.1 Part 2"/>

<bibl id="xslt-xquery-serialization-40" key="Serialization 4.0"/>

<bibl id="xquery-semantics"   key="XQuery 1.0 and XPath 2.0 Formal Semantics"/>
<bibl id="RFC2119"            key="RFC 2119"/>
  
<bibl id="RFC3986"            key="RFC 3986"/>
<bibl id="RFC3987"            key="RFC 3987"/>
<bibl id="charmod"            key="Character Model"/>

</blist>
</div2>

<div2 id="informative-references">
<head>Other References</head>

<blist>

<bibl id="xmlbase"            key="XML Base"/>

<bibl id="xslt-40"            key="XSL Transformations (XSLT) Version 4.0"/>

<bibl id="XQWG" key="XML Query Working Group">
<titleref href="https://www.w3.org/XML/Query/"
>XML Query Working Group</titleref>,
World Wide Web Consortium.
Home page: https://www.w3.org/XML/Query/
</bibl>

<bibl id="XSLWG" key="XSLT Working Group">
<titleref href="https://www.w3.org/Style/XSL/"
>XSL Working Group</titleref>,
World Wide Web Consortium.
Home page: https://www.w3.org/Style/XSL/
</bibl>

<bibl id="xquery-40" key="XQuery 4.0: An XML Query Language"/>

<!--<bibl id="xquery-31-requirements" key="XQuery 3.1 Requirements"/>-->

<bibl id="ISO8601"
      key="ISO 8601">ISO (International Organization for Standardization).
<emph>Representations of dates and times, 2000-08-03.</emph>
Available from: <loc href="http://www.iso.org/">http://www.iso.org/</loc>
</bibl>

</blist>
</div2>
</div1>


<inform-div1 id="glossary">
<head>Glossary</head>
<?glossary?>
</inform-div1>

<inform-div1 id="example">
<head>Example</head>

<p>The following XML document is used to illustrate the information
contained in a data model:</p>

<eg>&dm-example.xml;</eg>

<p>The document is associated with the URI
<quote>http://www.example.com/catalog.xml</quote>,
and is valid with respect to the following XML schema:</p>

<eg>&dm-example.xsd;</eg>

<p>The schema is associated with the URI
<quote>http://www.example.com/dm-example.xsd</quote>.</p>

<p>This example exposes the data model for a document that has an associated
schema and has been validated successfully against it.
In general, an XML Schema is not required,
that is, the data model can represent a schemaless, well-formed XML
document with the rules described in <specref ref="types"/>.</p>

<p>The XML document is represented by the nodes described below.
The value <emph>D1</emph> represents a &documentNode;;
the values <emph>E1, E2, etc.</emph> represent &elementNode;s;
the values <emph>A1, A2, etc.</emph> represent &attributeNode;s;
the values <emph>N1, N2, etc.</emph> represent &namespaceNode;s;
the values <emph>P1, P2, etc.</emph> represent &processingInstructionNode;s;
the values <emph>T1, T2, etc.</emph> represent &textNode;s.</p>

<p>For brevity:</p>

<ulist>
<item><p>Text nodes in the data model that contain only white space are not shown.</p>
</item>
<item><p>Literal strings are shown in quotes without the <code>xs:string()</code>
constructor.
</p></item>
<item><p>Literal decimals are shown without the <code>xs:decimal()</code>
constructor.
</p></item>
<item><p>Nodes are referred to using the syntax <code>[nodeID].</code>
</p></item>
<item><p>xs:QNames are used with the following prefixes bindings:</p>

<table>
<tbody>
  <tr>
    <td>xs</td><td>http://www.w3.org/2001/XMLSchema</td>
  </tr>
  <tr>
    <td>xsi</td><td>http://www.w3.org/2001/XMLSchema-instance</td>
  </tr>
  <tr>
    <td>cat</td><td>http://www.example.com/catalog</td>
  </tr>
  <tr>
    <td>xlink</td><td>http://www.w3.org/1999/xlink</td>
  </tr>
  <tr>
    <td>html</td><td>http://www.w3.org/1999/xhtml</td>
  </tr>
  <tr>
    <td>anon</td><td>An implementation-dependent prefix associated with
anonymous type names</td>
  </tr>
</tbody>
</table>

</item>
<item><p>The abbreviation <quote><code>\n</code></quote> is used in string literals
to represent a newline character; this is not supported in XPath, but it makes
this presentation clearer.</p></item>
<item><p>Accessors that return the empty sequence have been omitted.</p>
</item>
<item><p>To simplify the presentation, we assume an implementation
that does not expose the namespace axis. Therefore,
&namespaceNode;s are shared across multiple elements.
See <specref ref="NamespaceNode"/>.</p>
</item>
</ulist>

&dm-example.tbl;

<p>A graphical representation of the data model for the preceding
example is shown below. Document order in this representation can be
found by following the traditional left-to-right,
depth-first traversal; however, because the image has been rotated for
easier presentation, this appears to be bottom-to-top,
depth-first order.</p>

<table>
  <tbody>
    <tr>
      <td><graphic source="dm-example.png"
                   alt="Graphical depiction of the example data model."/>
      </td>
    </tr>
    <tr>
      <td>Graphic representation of the data model.
[<loc href="dm-example-large.png">large view</loc>,
<loc href="dm-example.svg">SVG</loc>]
      </td>
    </tr>
  </tbody>
</table>

</inform-div1>

<inform-div1 id="impl-summary">
<head>Implementation-Defined and Implementation-Dependent Items</head>

<div2 id="implementation-defined">
<head>Implementation-Defined Items</head>

<p>The following items are
<termref def="dt-implementation-defined">implementation-defined</termref>.
</p>

<?imp-def-feature?>
</div2>

<div2 id="implementation-dependent">
<head>Implementation-Dependent Items</head>

<p>The following items are
<termref def="dt-implementation-dependent">implementation-dependent</termref>.
</p>

<?imp-dep-feature?>
</div2>
</inform-div1>

&ChangeLog;

<inform-div1 id="id-accessor-summary">
<head>Accessor Summary</head>
<?xdm-accessor-summary?>
</inform-div1>

<inform-div1 id="id-infoset-construction-summary">
<head>Infoset Construction Summary</head>
<?xdm-infoset-construction-summary?>
</inform-div1>

<inform-div1 id="id-psvi-construction-summary">
<head>PSVI Construction Summary</head>
<?xdm-psvi-construction-summary?>
</inform-div1>

<inform-div1 id="id-infoset-mapping-summary">
<head>Infoset Mapping Summary</head>
<?xdm-infoset-mapping-summary?>
</inform-div1>

</back>
</spec>
