<?xml version="1.0" encoding="utf-8"?>

   <div1 id="id-basics">
      <head>Basics</head>
      
      <p>The basic  building block of &language; is the
	 <term>expression</term>, which is a string of <bibref
            ref="Unicode"/> characters; the version of Unicode to be used is <termref
            def="dt-implementation-defined"
            >implementation-defined</termref>.
	 The language provides several kinds of expressions which may be constructed
	 from keywords, symbols, and operands. In general, the operands of an expression
	 are other expressions. &language; allows expressions to be nested with full
generality. <phrase
            role="xquery"
            >(However, unlike a pure functional
language, it does not allow variable substitution if the variable
declaration contains construction of new nodes.)</phrase>
      </p>
      <note>
         <p>This specification contains no
assumptions or requirements regarding the character set encoding of strings
of <bibref
               ref="Unicode"/> characters.</p>
      </note>
      <p>Like XML, &language; is a case-sensitive language. Keywords in
	 &language; use lower-case characters and are not reserved&mdash;that is, names in &language; expressions are allowed to be the same as language keywords, except for certain unprefixed function-names listed in <specref
            ref="id-reserved-fn-names"/>.</p>

      <p>
         <termdef term="value" id="dt-value">In the <termref def="dt-datamodel"
               >data model</termref>, a <term>value</term> is always a <termref def="dt-sequence"
               >sequence</termref>.</termdef>
         <termdef id="dt-sequence" term="sequence"
               >A
<term>sequence</term> is an ordered collection of zero or more
<termref
               def="dt-item">items</termref>.</termdef>
         <termdef id="dt-item" term="item">
  An <term>item</term> is either an <termref
               def="dt-atomic-value">atomic value</termref>, a <termref def="dt-node"
               >node</termref>,
or a <xtermref spec="DM31" ref="dt-function-item"
               >function</xtermref>.</termdef>
         <termdef id="dt-atomic-value" term="atomic value"
               >An <term>atomic
	 value</term> is a value in the value space of an <term>atomic
	 type</term>, as defined in <bibref
               ref="XMLSchema10"/>  or <bibref ref="XMLSchema11"/>.</termdef>
         <termdef id="dt-node" term="node"
               >A <term>node</term> is an instance of one of the
	  <term>node kinds</term> defined in <xspecref
               spec="DM31" ref="Node"
            />.</termdef>
Each node has a unique <term>node identity</term>, a <term>typed value</term>, and a <term>string value</term>. In addition, some nodes have a <term>name</term>. The <term>typed value</term> of a node is a sequence
	 of zero or more atomic values. The <term>string value</term> of a node is a
	 value of type <code>xs:string</code>. The <term>name</term> of a node is a value of type <code>xs:QName</code>.</p>

      <p>
         <termdef id="dt-singleton" term="singleton"
               >A sequence containing exactly one item is called a
	 <term>singleton</term>.</termdef> An item is identical to a singleton sequence
	 containing that item. Sequences are never nested&mdash;for example, combining the
	 values 1, (2, 3), and ( ) into a single sequence results in the sequence (1, 2,
	 3). <termdef
            id="dt-empty-sequence" term="empty sequence"
               >A sequence containing zero items is called an <term>empty sequence</term>.</termdef>
      </p>
      <p>
         <termdef id="dt-data-model-instance" term="XDM instance"
               >The term <term>XDM instance</term> is used,
    synonymously with the term <termref
               def="dt-value">value</termref>, to denote an unconstrained
    <termref
               def="dt-sequence">sequence</termref> of <termref def="dt-item"
            >items</termref>.</termdef>
      </p>



      <p>Element nodes have a property called <term>in-scope namespaces</term>. <termdef
            term="in-scope namespaces" id="dt-in-scope-namespaces"
               >The <term>in-scope namespaces</term> property of an element node is a set of namespace bindings, each of which associates a namespace prefix with a URI.</termdef>
For a given element, one namespace binding may have an empty prefix; the URI of this namespace binding is the default namespace within the scope of the element.</p>
      <p role="xpath">In <bibref ref="xpath"
            />, the in-scope namespaces of an element node are represented by a collection of <term>namespace nodes</term> arranged on a <term>namespace axis</term>. 
As of XPath 2.0, the namespace axis is deprecated and need not be supported by a host language. A host language that does not support the namespace axis need not represent namespace bindings in the form of nodes.</p>
      <note role="xquery">
         <p>In <bibref ref="xpath"
               />, the in-scope namespaces of an element node are represented by a collection of <term>namespace nodes</term> arranged on a <term>namespace axis</term>, which is optional and deprecated in <bibref
               ref="xpath-31"
            />. XQuery does not support the namespace axis and does not represent namespace bindings in the form of nodes.</p>

         <p>However, where other specifications such as <bibref ref="xslt-xquery-serialization-31"
               /> refer to namespace nodes, these nodes may be synthesized from the in-scope namespaces of an element node by interpreting each namespace binding as a namespace node. An application that needs to create a set of namespace nodes to represent these bindings for an element bound to <code>$e</code> can do so using the following code.


<eg
               role="parse-test"><![CDATA[
in-scope-prefixes($e) ! namespace {.}{ namespace-uri-for-prefix(., $e)} 
]]></eg>
         </p>
      </note>


      <!-- -->





      <p>
         <termdef id="dt-expanded-qname" term="expanded QName"
            >An <term>expanded QName</term> is a
      triple: its components are a prefix, a local name, and a
      namespace URI. In the case of a name in no namespace, the
      namespace URI and prefix are both absent. In the case of a name
      in the default namespace, the prefix is absent.</termdef> When
      comparing two expanded QNames, the prefixes are ignored: the
      local name parts must be equal under the Unicode Codepoint
      Collation, and the namespace URI parts must either both be
      absent, or must be equal under the Unicode Codepoint
      Collation.</p>

      <p>In the &language;
      grammar, QNames representing the names of
      elements, attributes, functions, variables, types, or other such
      constructs are written as instances of the grammatical
      production <nt
            def="EQName">EQName</nt>.</p>

      <scrap>
         <head/>
         <prodrecap id="EQName" ref="EQName"/>
         <prodrecap id="QName" ref="QNameToken"/>
         <prodrecap ref="NCNameTok"/>
         <prodrecap ref="URILiteral" id="URILiteral" role="xquery"/>
         <prodrecap id="URIQualifiedName" ref="URIQualifiedName"/>
         <prodrecap id="BracedURILiteral" ref="BracedURILiteral"/>
      </scrap>


      <p>The <nt def="EQName">EQName</nt> production allows a QName to
      be written in one of three ways:
      <ulist>
            <item>
               <p>local-name only (for example, <code>invoice</code>).</p>
               <p>A name written in this form has no prefix, and the rules
        for determining the namespace depend on the context in which
        the name appears. This form is a <termref
                     def="dt-qname">lexical QName</termref>.</p>
            </item>
            <item>
               <p>prefix plus local-name (for example, <code>my:invoice</code>).</p>
               <p>In this case the prefix and local name of the QName are as
        written, and the namespace URI is inferred from the prefix by
        examining the in-scope namespaces in the static context where
        the QName appears; the context must include a binding for the
        prefix. This form is a <termref
                     def="dt-qname">lexical
        QName</termref>.</p>
            </item>
            <item>
               <p>URI plus local-name (for example,
        <code>Q{http://example.com/ns}invoice)</code>.</p>
               <p>In this case the local name and namespace URI are as
        written, and the prefix is absent. This way of writing a QName
        is context-free, which makes it particularly suitable for use
        in  <phrase role="xquery">queries</phrase>
            <phrase role="xpath">expressions</phrase>
        that are generated by software. This
        form is a <nt
                     def="URIQualifiedName">URIQualifiedName</nt>.  
        If the <nt
                     def="BracedURILiteral"
                     >
        BracedURILiteral</nt> has no content (for example, <code>Q{}invoice</code>) 
        then the namespace URI of the QName is absent.</p>
            </item>
         </ulist>
      </p>



      <p>
         <termdef id="dt-qname" term="lexical QName"
               >A
          <term>lexical QName</term> is a name that conforms to the syntax of the
          <nt
               def="QName">QName</nt> production</termdef>.
          </p>

      <p>
	  The namespace URI value in a <nt def="URIQualifiedName"
            >URIQualifiedName</nt> is whitespace normalized according
	  to the rules for the <code>xs:anyURI</code> type in
          <xspecref
            spec="XS1-2" ref="anyURI"/> or 
          <xspecref spec="XS11-2" ref="anyURI"
            />. 

          It is a <termref def="dt-static-error">static
          error</termref>
         <errorref class="ST" code="0070"
            /> if the
          namespace URI for an EQName is
          <code>http://www.w3.org/2000/xmlns/</code>.
          </p>

      <p>Here are some examples of <nt def="EQName">EQName</nt>s:</p>

      <ulist>
         <item>
            <p>
               <code role="parse-test">pi</code> is a <termref def="dt-qname"
                  >lexical QName</termref> without a namespace prefix.</p>
         </item>
         <item>
            <p>
               <code role="parse-test">math:pi</code> is a <termref def="dt-qname"
                  >lexical QName</termref> with a namespace prefix.</p>
         </item>
         <item>
            <p>
               <code role="parse-test"
                  >Q{http://www.w3.org/2005/xpath-functions/math}pi</code> specifies the namespace URI using a  <nt
                  def="BracedURILiteral">BracedURILiteral</nt>; it is not a  <termref def="dt-qname"
                  >lexical QName</termref>.</p>
         </item>
      </ulist>


      <p>This document uses the following namespace prefixes to represent the namespace URIs with which they are listed. Although these prefixes are used within this specification to refer to the corresponding namespaces, not all of these bindings will necessarily be present in the static context of every expression, and authors are free to use different prefixes for these namespaces, or to bind these prefixes to different namespaces.</p>
      <ulist>

         <item role="xquery">
            <p>
               <code>xml = http://www.w3.org/XML/1998/namespace</code>
            </p>
         </item>

         <item>
            <p>
               <code>xs = http://www.w3.org/2001/XMLSchema</code>
            </p>
         </item>

         <item role="xquery">
            <p>
               <code>xsi = http://www.w3.org/2001/XMLSchema-instance</code>
            </p>
         </item>

         <item>
            <p>
               <code>fn = http://www.w3.org/2005/xpath-functions</code>
            </p>
         </item>
         <item>
            <p>
               <code>map = http://www.w3.org/2005/xpath-functions/map</code>
            </p>
         </item>
         <item>
            <p>
               <code>array = http://www.w3.org/2005/xpath-functions/array</code>
            </p>
         </item>
         <item>
            <p>
               <code>math = http://www.w3.org/2005/xpath-functions/math</code>
            </p>
         </item>

         <item role="xquery">
            <p>
               <code>local = http://www.w3.org/2005/xquery-local-functions</code> (see <specref
                  ref="FunctionDeclns"/>.)</p>
         </item>

         <item role="xpath">
            <p>
               <code>err = http://www.w3.org/2005/xqt-errors</code> (see <specref
                  ref="id-identifying-errors"/>).</p>
         </item>
      </ulist>

      <p role="xquery"
            >In addition to the prefixes in the above list, this document uses the prefix <code>err</code> to represent the namespace URI <code>http://www.w3.org/2005/xqt-errors</code> (see <specref
            ref="id-identifying-errors"
            />). This namespace prefix is not predeclared and its use in this document is not normative. It also uses the namespace URI <code>http://www.w3.org/2012/xquery</code> for which no prefix is used in this document, which is reserved for use in this specification. It is currently used for annotations and option declarations that are defined by the XML Query Working Group.</p>

      <p>
         <termdef term="URI" id="dt-URI"
               >Within this specification, the term <term>URI</term> refers to a Universal Resource Identifier as defined in <bibref
               ref="RFC3986"/> and extended in <bibref ref="RFC3987"
               /> with the new name <term>IRI</term>.</termdef>
The term URI has been retained in preference to IRI to avoid introducing new names for concepts such as "Base URI" that are defined or referenced across the whole family of XML specifications.</p>

      <note>
         <p>In most contexts, processors are not required to raise errors if a URI is not lexically valid according to  <bibref
               ref="RFC3986"/> and  <bibref ref="RFC3987"/>. See <specref ref="id-uri-literals"/>
            <phrase role="xquery">and <specref ref="id-namespaces"/>
            </phrase> for details.</p>
      </note>

      <div2 id="context">
         <head>
            <phrase role="xquery">Module Context and </phrase>Expression Context</head>

         <p>
            <termdef id="dt-expression-context" term="expression context"
                  >The <term>expression
		context</term> for a given expression consists of all
		the information that can affect the result of the
		expression.</termdef>
         </p>

         <p role="xquery">
            <termdef id="dt-module-context" term="module context"
               >The <term>module context</term> for a given
		module consists of all the information that is
		accessible to top-level expressions in the
		module.</termdef> The context of a top-level
		expression is defined based on the context of the
		module in which it is defined: the context of the <nt
               def="QueryBody"
            >QueryBody</nt> is the context of the
		main module, and the context for evaluating a function
		body or for a variable's initializing expression is
		defined based on the context of the module in which
		the function or variable is defined.</p>

         <p>This information is organized into two categories
		called the <termref
               def="dt-static-context">static
		context</termref> and the <termref
               def="dt-dynamic-context">dynamic
		context</termref>.</p>

         <div3 id="static_context">
            <head>Static Context</head>
            <p>
               <termdef id="dt-static-context" term="static context"
                  >The <term>static context</term> of an expression is
		  the information that is available during static analysis of the expression, prior
		  to its evaluation.</termdef> This information can be used to decide whether the
		  expression contains a <termref
                  def="dt-static-error">static error</termref>. </p>
            <p>The individual components of the <termref def="dt-static-context"
                  >static context</termref> are described below. 
      <phrase role="xpath"
                     >A default initial value for each component must be specified by the host language. 
      The scope of each component is specified in <specref
                     ref="id-xp-static-context-components" role="xpath"/>.</phrase>
               <phrase role="xquery"
                     >Rules governing the initialization and alteration of  these components can be found in  <specref
                     ref="id-xq-static-context-components" role="xquery"/>.</phrase>
            </p>

            <ulist>


               <item>
                  <p>
                     <termdef id="dt-xpath-compat-mode" term="XPath 1.0 compatibility     mode">
                        <term>XPath 1.0 compatibility
			 mode.</term>
                        <phrase role="xquery"
                              >This
			 component must be set by all host languages
			 that include XPath 3.1  as a subset,
			 indicating whether rules for compatibility
			 with XPath 1.0 are in effect.
			 XQuery sets the value of this component to
			 <code>false</code>.
                         </phrase>
                        <phrase role="xpath"
                              >This value is <code>true</code> if rules for backward compatibility with XPath Version 1.0 are in effect; otherwise it is <code>false</code>.</phrase>
                     </termdef>
                  </p>
               </item>


               <item>
                  <p>
                     <termdef id="dt-static-namespaces" term="statically known namespaces">
                        <term>Statically known namespaces.</term> 
        This is a mapping from prefix to namespace URI that defines all the namespaces 
        that are known during static processing of a given expression.</termdef></p> 
                  <p>The URI value is whitespace normalized according to the rules for the
                     <code>xs:anyURI</code> type in <xspecref spec="XS1-2" ref="anyURI"/> or 
                     <xspecref spec="XS11-2" ref="anyURI"/>.</p>
                  <p diff="add" at="A">The statically known namespaces may include a binding for the zero-length prefix;
                  however, this is only used in limited circumstances because the rules for resolving
                  unprefixed QNames depend on the how such a name is used.</p>
                  <p>Note the difference between <termref def="dt-in-scope-namespaces"
                        >in-scope namespaces</termref>, which is a dynamic property of an element node, and <termref
                        def="dt-static-namespaces"
                     >statically known namespaces</termref>, which is a static property of an expression.</p>
                  <p role="xquery"
                        >Some namespaces are predefined; additional  namespaces can be added to the statically known namespaces by <termref
                        def="dt-namespace-declaration">namespace declarations</termref>,
<termref
                        def="dt-schema-import">schema imports</termref>, or  <termref
                        def="dt-module-import">module imports</termref> in a <termref
                        def="dt-prolog">Prolog</termref>, by  a <termref def="dt-module-declaration"
                        >module declaration</termref>, 
and by <termref def="dt-namespace-decl-attr"
                        >namespace declaration attributes</termref> in <termref
                        def="dt-direct-elem-const">direct element constructors</termref>.</p>
               </item>


               <item>
                  <p diff="chg" at="A">
                     <termdef id="dt-def-element-ns" term="default element namespace">
                        <term>Default element namespace.</term> This is a
				namespace URI or <xtermref
                           spec="DM31" ref="dt-absent"
                        />. The namespace URI, if present, is used for any unprefixed QName appearing in a
				position where an element name is expected.</termdef> The URI value is
whitespace normalized according to the rules for the <code>xs:anyURI</code> type in <xspecref
                        spec="XS1-2" ref="anyURI"/> or <xspecref spec="XS11-2" ref="anyURI"/>.</p>
               </item>

               <item>
                  <p diff="add" at="A">
                     <termdef id="dt-def-type-ns" term="default type namespace">
                        <term>Default type namespace.</term> This is a namespace URI or <xtermref
                           spec="DM31" ref="dt-absent"
                        />. The namespace URI, if present, is used for any unprefixed QName appearing in a
		                      position where a type name is expected.</termdef> The URI value is
		                   whitespace normalized according to the rules for the <code>xs:anyURI</code> type in <xspecref
                        spec="XS1-2" ref="anyURI"/> or <xspecref spec="XS11-2" ref="anyURI"/>.</p>
               </item>


               <item diff="chg" at="A">
                  <p>
                     <termdef id="dt-default-function-namespace" term="default function namespace">
                        <term>Default function namespace.</term> This is an algorithm that takes as input
                        an unprefixed QName and arity used in a context where a function name is expected, and delivers 
                        as its result a namespace URI.</termdef> 
                  </p>
                  <p>
                        In its simplest form its value is simply a whitespace-normalized <code>xs:anyURI</code>
                        value (most commonly, the URI <code>http://www.w3.org/2005/xpath-functions</code>)
                        to be used as the default namespace for unprefixed function names. However, the use of a more
                        complex algorithm is not precluded, for example an algorithm which searches multiple namespaces for
                        a matching name.
                  </p>
                  <p role="xquery">
                     In XQuery, a default function namespace can be
                     declared in the prolog in a <term>default function namespace declaration</term>
                     (see <specref ref="id-default-namespace"/>); in the absence of such a declaration, the namespace
                     <code>http://www.w3.org/2005/xpath-functions</code> is used.</p>
               </item>


               <item>
                  <p>
                     <termdef id="dt-issd" term="in-scope schema definitions">
                        <term>In-scope schema
			 definitions.</term> This is a generic term
			 for all the element declarations, attribute declarations, and schema type
			 definitions that are in scope during
			 static analysis of an expression.</termdef> It includes the
			 following three
			 parts:</p>
                  <ulist>

                     <item>
                        <p>

                           <termdef id="dt-is-types" term="in-scope schema type">
                              <term>In-scope schema types.</term> Each schema type
			        definition is identified either by an <termref
                                 def="dt-expanded-qname"
                                 >expanded
			        QName</termref> (for a <term>named type</term>)
			        or by an <termref
                                 def="dt-implementation-dependent"
                                 >implementation-dependent</termref> type
			        identifier (for an <term>anonymous
			        type</term>). The in-scope schema types include the predefined schema types described in <specref
                                 ref="id-predefined-types"
                                 />.

                                <phrase role="xquery"
                                    >If the
                                <termref
                                    def="dt-schema-aware-feature"
                                 >Schema Aware Feature</termref>
                                is supported, in-scope schema types
                                also include all type definitions
                                found in imported schemas.</phrase>
                           </termdef>
                        </p>

                     </item>




                     <item>
                        <p>
                           <termdef id="dt-is-elems" term="in-scope element declarations">
                              <term>In-scope element declarations.</term> Each element
declaration is identified either by an <termref
                                 def="dt-expanded-qname"
                                 >expanded QName</termref> (for a top-level element
declaration) or by an <termref
                                 def="dt-implementation-dependent"
                                 >implementation-dependent</termref> element identifier (for a
local element declaration). <phrase
                                 role="xquery"> If the
<termref def="dt-schema-aware-feature"
                                    >Schema Aware Feature</termref>
is supported, in-scope element declarations include all element
declarations found in imported schemas. </phrase>
                           </termdef> An element
declaration includes information about the element's <termref
                              def="dt-substitution-group"
                           >substitution group</termref> affiliation.</p>
                        <p>
                           <termdef term="substitution group" id="dt-substitution-group">
                              <term>Substitution groups</term> are defined in <xspecref spec="XS1-1"
                                 ref="Element_Equivalence_Class"/> and 
<xspecref spec="XS11-1"
                                 ref="Element_Equivalence_Class"
                                 />. Informally, the substitution group headed by a given element (called the <term>head element</term>) consists of  the set of elements that can be substituted for the head element without affecting the outcome of schema validation.</termdef>
                        </p>
                     </item>

                     <item>
                        <p>
                           <termdef id="dt-is-attrs" term="in-scope attribute declarations">
                              <term>In-scope attribute
declarations.</term> Each attribute declaration is identified either
by an <termref
                                 def="dt-expanded-qname"
                                 >expanded QName</termref> (for a top-level attribute declaration) or by an
<termref
                                 def="dt-implementation-dependent"
                                 >implementation-dependent</termref> attribute identifier (for a local attribute
declaration).  <phrase
                                 role="xquery">If the
<termref def="dt-schema-aware-feature"
                                    >Schema Aware Feature</termref>
is supported, in-scope attribute declarations include all attribute
declarations found in imported
schemas.</phrase>
                           </termdef>
                        </p>
                     </item>
                  </ulist>
               </item>

               <item>
                  <p>
                     <termdef id="dt-in-scope-variables" term="in-scope variables">
                        <term>In-scope variables.</term> 
This is a mapping from <termref
                           def="dt-expanded-qname"
                           >expanded QName</termref> to type. It defines the
set of variables that are available for reference within an
expression. The <termref
                           def="dt-expanded-qname"
                           >expanded QName</termref> is the name of the variable, and the type is the
<termref
                           def="dt-static-type">static type</termref> of the
variable.</termdef>
                  </p>

                  <p>
                     <phrase role="xquery">Variable declarations in a <termref def="dt-prolog"
                           >Prolog</termref> are added to <termref def="dt-in-scope-variables"
                           >in-scope variables</termref>.</phrase>
An expression that binds a variable extends the <termref
                        def="dt-in-scope-variables"
                        >in-scope variables</termref>, within the scope of the variable, with the variable and its type. 
Within the body of an
<termref
                        def="dt-inline-func">inline function expression</termref>
                     <phrase role="xquery"> or <termref def="dt-udf">user-defined function</termref>
                     </phrase>, the
<termref def="dt-in-scope-variables"
                        >in-scope variables</termref> are extended
by the names and types of the <term>function
parameters</term>.</p>

                  <p role="xquery"
                        >The static type of a variable may either be declared in a query or
inferred by static type inference as discussed in  <specref
                        ref="id-static-analysis"/>.</p>

               </item>

               <item>
                  <p>
                     <termdef term="context item static type" id="dt-context-item-static-type">
                        <term>Context item static type.</term> This component defines the <termref
                           def="dt-static-type"
                        >static type</termref> of the context item within the scope of a given expression.</termdef>
                  </p>
               </item>
               
               <item diff="add" at="A">
                  <p>
                     <termdef id="dt-item-type-aliases" term="item type aliases">
                        <term>Item type aliases.</term> This is a mapping from 
                        <termref def="dt-expanded-qname">expanded QName</termref> to <code>ItemTypes</code>.</termdef></p>
                   <p><termdef id="dt-type-alias" term="type alias">A <term>type alias</term>
                        is an <termref def="dt-expanded-qname">expanded QName</termref> that
                     is mapped to an <code>ItemType</code> in the <termref def="dt-item-type-aliases"/> of
                     the <termref def="dt-static-context"/>.</termdef>
                  </p>
                  <p>Item type aliases allow frequently-used item types, especially complex item types such as
                  record types, to be given simple names, so that the definition of the type is not repeated
                  every time it is used.</p>
                  <note>
                     <p role="xquery">In XQuery, named item types can be declared in the Query Prolog.</p>
                     <p role="xpath">Item type aliases can be defined in XQuery 4.0 and in XSLT 4.0, but not
                     in XPath 4.0 itself.</p>
                  </note>
               </item>


               <item diff="chg" at="variadicity">
                  <p>
                     <termdef id="dt-declared-functions"
                        term="declared functions">
                        <term>Declared functions.</term> This is a set of 
                        <termref def="dt-declared-function">declared functions</termref>.</termdef></p>
                  
                  <p><termdef id="dt-declared-function" term="declared function">A <term>declared function</term>
                     contains the information needed to evaluate a static function call. It may be derived
                     from an actual declaration in a host language such as XQuery or XSLT, or it may represent
                     a built-in function, or it may represent information registered with the 
                     processor using some <termref def="dt-implementation-defined"/> API.</termdef></p>
                  
                  <p>The properties of a <termref def="dt-declared-function"/> include:</p>
                  
                  <ulist>
                     <item><p>The function name, which is an <termref def="dt-expanded-qname"/>.</p></item>
                     <item><p>A (possibly empty) list of required parameters, each having:</p>
                        <ulist>
                           <item><p>a parameter name (an <termref def="dt-expanded-qname"/>)</p></item>
                           <item><p>a required type (a <termref def="dt-sequence-type"/>)</p></item>
                        </ulist>
                     </item>
                     <item><p>A (possibly empty) list of optional parameters, each having:</p>
                        <ulist>
                           <item><p>a parameter name (an <termref def="dt-expanded-qname"/>)</p></item>
                           <item><p>a required type (a <termref def="dt-sequence-type"/>)</p></item>
                           <item><p>a default value (a <termref def="dt-sequence-type"/>)</p></item>
                        </ulist>
                     </item>
                     <item><p>A return type (a <termref def="dt-sequence-type"/>)</p></item>
                     <item><p>A (possibly empty) set of <term>function annotations</term></p>
                        <p role="xquery">In XQuery, function annotations are described in <specref ref="id-annotations"/>.</p></item>
                     <item><p>An implementation. The function implementation contains the logic that enables the function
                     result to be computed from the supplied parameters and information in the dynamic context.</p></item>
                  </ulist>
                  
                  <p>The names of the parameters must be distinct.</p>
                  
                  <note><p>Despite the name, a <termref def="dt-declared-function"/> is not actually a <xtermref
                     spec="DM31" ref="dt-function-item"
                     >function</xtermref> (or <term>function item</term>) in the sense of the XDM data model. Rather, it provides information about
                     a family of functions which can be obtained, for example, by means of a <termref def="dt-named-function-ref"/>.</p></note>
                  
                  <p>Declared functions can be categorized as:</p>
                  <ulist>
                     <item><p>User-written functions, implemented in a host language such as XQuery or XSLT.</p></item>
                     <item><p>Built-in functions, for example functions specified in <bibref ref="xpath-functions-40"/>,
                     and <termref def="dt-constructor-function">constructor functions</termref> for built-in and user-defined
                     types.</p></item>
                     <item><p>External functions, for example functions implemented in a general-purpose programming
                     language such as Java or Python.</p></item>
                  </ulist>
                  
                  <p>However, this is not a hard-and-fast distinction. For example, the processor might implement built-in functions
                     using the same mechanisms as user-written functions or external functions.</p>
                  
                  <p><termdef id="dt-arity-range" term="arity range">A <termref def="dt-declared-function"/> has an <term>arity range</term>
                     which is a range of consecutive non-negative integers. If the declared function has <var>M</var> required parameters
                     and <var>N</var> optional parameters, then its arity range is from <var>M</var> to <var>M</var>+<var>N</var>
                     inclusive.</termdef></p>
                  <p>The static context may contain several <termref def="dt-declared-function">declared functions</termref> with the
                     same name, but the <termref def="dt-arity-range">arity ranges</termref> of two such declared functions must not 
                     overlap. For example, it is acceptable to have a declared function with two required parameters and no optional
                     parameters, and another declared function (with the same name) that has three required parameters and one optional
                     parameter. It is not acceptable to have a declared function with one required parameter and another (with the same name)
                     having three optional parameters.</p>
                  <p><phrase role="xquery"
                     >It is a <termref def="dt-static-error">static error</termref>
                     <errorref class="ST" code="0034"
                     /> if two declared functions have the same
                     <termref def="dt-expanded-qname"
                        >expanded QName</termref> and overlapping
                     arity ranges (even if the signatures are consistent).</phrase>
                  <phrase role="xpath"
                     >Implementations must ensure that no two declared functions have the same <termref
                        def="dt-expanded-qname"
                        >expanded QName</termref> and the overlapping
                     arity ranges (even if the signatures are consistent).</phrase></p>
 
    <p>The declared functions are available to be called from a 
    <termref
                        def="dt-static-function-call"
                        >static function call</termref>,
    or referenced from a 
    <termref
                        def="dt-named-function-ref"
                        >named function reference</termref>.
    
</p>


                  <p>The declared functions typically 
                     include functions from a variety of sources, including
                     the <phrase role="xpath"><termref def="dt-built-in-function">built-in functions</termref>.</phrase>
                         <phrase role="xquery"><termref
                        def="dt-built-in-function"
                        >built-in functions</termref>, functions declared in the current module (see <specref
                        ref="FunctionDeclns"/>), module imports (see <specref ref="id-module-import"
                        />), <termref def="dt-constructor-function"
                        >constructor functions</termref> for user-defined types (see  <specref
                        ref="id-constructor-functions"
                        />), and functions provided by an
implementation or via an implementation-defined API (see <specref
                        ref="id-xq-static-context-components"/>).</phrase>


                  </p>

               </item>

               <item>
                  <p>
                     <termdef id="dt-static-collations" term="statically known collations">
                        <term>Statically known collations.</term> This is an <termref
                           def="dt-implementation-defined"
                           >implementation-defined</termref>
        mapping from URI to collation. It defines the names of the collations that are available for
				use in processing <phrase
                           role="xquery">queries and</phrase> expressions.</termdef>
                     <termdef term="collation" id="dt-collation"
                           >A <term>collation</term> is a specification of the manner in which strings and URIs are compared and, by extension, ordered. For a more complete definition of collation, see <xspecref
                           spec="FO31" ref="string-compare"/>.</termdef>
                  </p>
               </item>


               <item>

                  <p>
                     <termdef id="dt-def-collation" term="default collation">
                        <term>Default
				collation.</term> This identifies one of the collations in <termref
                           def="dt-static-collations"
                           >statically known collations</termref> as the  collation to be
				used by functions and operators for comparing and ordering values of type <code>xs:string</code> and <code>xs:anyURI</code> (and types derived from them) when no
				explicit collation is
				specified.</termdef>
                  </p>

               </item>

               <item role="xquery">
                  <p>
                     <termdef id="dt-construction-mode" term="construction mode">
                        <term>Construction mode.</term> The
			 construction mode governs the behavior of element and document node constructors. If construction mode is <code>preserve</code>, the type of a constructed element node is <code>xs:anyType</code>, and all attribute and element nodes copied during node construction    retain their original types. If construction mode is <code>strip</code>, the type of a constructed element node is <code>xs:untyped</code>; all element nodes copied during node construction receive the type <code>xs:untyped</code>, and all attribute nodes copied during node construction receive the type <code>xs:untypedAtomic</code>.</termdef>
                  </p>
               </item>

               <item role="xquery">
                  <p>
                     <termdef id="dt-ordering-mode" term="ordering mode">
                        <term>Ordering mode.</term> Ordering mode, which has the value <code>ordered</code> or <code>unordered</code>, affects the ordering of the result sequence returned by certain expressions, as discussed in <specref
                           ref="id-unordered-expressions"/>.</termdef>
                  </p>
               </item>

               <item role="xquery">
                  <p>
                     <termdef id="dt-default-empty-order" term="default order for empty sequences">
                        <term>Default order for empty sequences.</term> This component controls the processing of empty sequences and <code>NaN</code> values as ordering keys in an <code>order by</code> clause in a FLWOR expression, as described in <specref
                           ref="id-order-by-clause"
                        />.</termdef>  Its value may be <code>greatest</code> or <code>least</code>.</p>
               </item>

               <item role="xquery">
                  <p>
                     <termdef id="dt-boundary-space-policy" term="boundary-space policy">
                        <term>Boundary-space
			 policy.</term> This component controls the processing of <termref
                           def="dt-boundary-whitespace"
                           >boundary whitespace</termref>
			 by <termref def="dt-direct-elem-const"
                           >direct element constructors</termref>, as described in <specref
                           ref="id-whitespace"
                        />.</termdef> Its value may be <code>preserve</code> or <code>strip</code>.</p>
               </item>


               <item role="xquery">
                  <p>
                     <termdef id="dt-copy-namespaces-mode" term="copy-namespaces mode">
                        <term>Copy-namespaces mode.</term> This component controls the namespace bindings that
are assigned when an existing element node is copied by an element
constructor, as described in <specref
                           ref="id-element-constructor"
                           />. Its value consists of two parts: <code>preserve</code> or <code>no-preserve</code>, and <code>inherit</code> or <code>no-inherit</code>.</termdef>
                  </p>
               </item>

               <item>

                  <p>
                     <termdef id="dt-static-base-uri" term="Static Base URI">
                        <term>Static Base URI.</term>
        This is an absolute URI, used to resolve
        <phrase
                           role="xquery"
                           >relative URIs both during static analysis and during dynamic evaluation.</phrase>
                        <phrase role="xpath">relative URI references.</phrase>
                     </termdef>
                     <phrase role="xquery"
                           >
        All expressions within a module have the same static base URI.
        The Static Base URI can be set using a <termref
                           def="dt-base-uri-decl">base URI declaration</termref>.
      </phrase>
                     <phrase role="xpath"
                           >
        If <var>E</var> is a subexpression of <var>F</var> then the Static 
        Base URI of <var>E</var> is the same as the Static Base URI of <var>F</var>.
        There are no constructs in XPath that require resolution of relative URI references 
        during static analysis.
      </phrase>
      The Static Base URI is available during dynamic evaluation by use of the 
      <code>fn:static-base-uri</code> function, and is used implicitly during dynamic 
      evaluation by functions such as <code>fn:doc</code>. Relative URI references are 
      resolved as described in <specref
                        ref="id-resolve-relative-uri"/>.</p>

                  <p role="xquery"
                        >
      If the value of the Static Base URI is based on the location of the 
      query module (in the terminology of <bibref
                        ref="RFC3986"
                        />, the URI used to retrieve 
      the encapsulating entity), then the implementation <rfc2119>may</rfc2119> use 
      different values for the Static Base URI during static analysis and 
      during dynamic evaluation. This might be necessary, for example, if a 
      query consisting of several modules is compiled, and the resulting 
      object code is distributed to a different location for execution. It 
      would then be inappropriate to use the same location when resolving 
      <code>import module</code> declarations as when retrieving source 
      documents using the <code>fn:doc</code> function. If an implementation uses different 
      values for the Static Base URI during static analysis and during dynamic 
      evaluation, then it is implementation-defined which of the two values is 
      used for particular operations that rely on the Static Base URI; for 
      example, it is implementation-defined which value is used for resolving 
      collation URIs.</p>

               </item>


               <item>
                  <p>
                     <termdef id="dt-known-docs" term="statically known  documents">
                        <term>Statically known documents.</term> This is a mapping
from strings to types.  The string represents the absolute URI of a
resource that is potentially available using the <code>fn:doc</code>
function.  The type is the <termref
                           def="dt-static-type"
                           >static type</termref> of a call to <code>fn:doc</code>  with the given URI as its
literal argument. </termdef>
If the argument to <code>fn:doc</code> is a
string literal that is not present in <term>statically known documents</term>, then the
<termref
                        def="dt-static-type"
                        >static type</termref> of
<code>fn:doc</code> is <code>document-node()?</code>.</p>
                  <note>
                     <p>The purpose of the <term>statically known
documents</term> is to provide static type information, not to determine
which documents are available. A URI need not be found in the
<term>statically known documents</term> to be accessed using
<code>fn:doc</code>. </p>
                  </note>
               </item>



               <item>
                  <p>
                     <termdef id="dt-known-collections" term="statically known  collections">
                        <term>Statically known collections.</term> This is a
mapping from strings to types.  The string represents the absolute
URI of a resource that is potentially available using the
<code>fn:collection</code> function.  The type is the type of the
sequence of items that would result from calling the
<code>fn:collection</code> function with this URI as its
argument.</termdef> If the argument to
<code>fn:collection</code> is a string literal that is not present in
<term>statically known collections</term>, then the <termref
                        def="dt-static-type"
                        >static type</termref> of
<code>fn:collection</code> is <code>item()*</code>.</p>
                  <note>
                     <p>The purpose of the <term>statically known
collections</term> is to provide static type information, not to determine
which collections are available. A URI need not be found in the
<term>statically known collections</term> to be accessed using
<code>fn:collection</code>.
</p>
                  </note>
               </item>

               <item>
                  <p>
                     <termdef id="dt-known-default-collection"
                        term="statically known default collection type">
                        <term>Statically known default collection type.</term> This is the type of the sequence of 
items that would result from calling the <code>fn:collection</code> function with no arguments.</termdef> Unless initialized to some other value by an implementation, the value of <term>statically known default collection type</term> is  <code>item()*</code>.</p>
               </item>


               <item>
                  <p>
                     <termdef id="dt-static-decimal-formats" term="statically known decimal formats">
                        <term>Statically known decimal
		      formats.</term> This is a mapping from QNames to decimal formats, with one default format that has no visible name,
		      referred to as the unnamed decimal format. Each
		      format is available for use when formatting numbers using the <code>fn:format-number</code> function.</termdef>
                  </p>

                  <p>Each decimal format defines a set of properties, which control the interpretation of characters
		        in the picture string supplied to the <code>fn:format-number</code>
		        function, and also specify characters to be used in the result
		        of formatting the number.</p>

                  <p>The following properties specify characters used both in the picture string, and in the formatted number. In each case the value is a single character:</p>

                  <ulist>
                     <item>
                        <p>
                           <termdef id="id-static-decimal-format-decimal-separator"
                              term="decimal-separator">
                              <term>decimal-separator</term> is
		          the character used to separate the integer part of the number from the fractional part, both in the picture
		          string and in the formatted number; the default
		          value is the period character (.)</termdef>
                        </p>
                     </item>

                     <item>
                        <p>
                           <termdef id="id-static-decimal-format-exponent-separator"
                              term="exponent-separator">
                              <term>exponent-separator</term> is
		          the character used to separate the mantissa from the exponent in
		          scientific notation both in the picture string and in the
		          formatted number; the default value is the character (e).</termdef>
                        </p>
                     </item>

                     <item>
                        <p>
                           <termdef id="id-static-decimal-format-grouping-separator"
                              term="grouping-separator">
                              <term>grouping-separator</term>
		          is the character typically used as a thousands separator, both in the picture string and in the formatted number; the default value is the
		          comma character (,)</termdef>
                        </p>
                     </item>

                     <item>
                        <p>
                           <termdef id="id-static-decimal-format-percent" term="percent">
                              <term>percent</term>
		          is the character used both in the picture string and in the formatted number to indicate that the number is written as a per-hundred fraction; the default
		          value is the percent character (%)</termdef>
                        </p>
                     </item>

                     <item>
                        <p>
                           <termdef id="id-static-decimal-format-per-mille" term="per-mille">
                              <term>per-mille</term>
		          is the character used both in the picture string and in the formatted number to indicate that the number is written as a per-thousand fraction; the default
		          value is the Unicode per-mille character
		          (#x2030)</termdef>
                        </p>
                     </item>

                     <item>
                        <p>
                           <termdef id="id-static-decimal-format-zero-digit" term="zero-digit">
                              <term>zero-digit</term>
		          is the character used to represent the digit zero; the default
		          value is the Western digit zero (#x30). This character must be a digit
		          (category Nd in the Unicode property database), and it must have
		          the numeric value zero. This property implicitly defines the
		          ten Unicode characters that are used to represent the values 0
		          to 9: Unicode is organized so that each
		          set of decimal digits forms a contiguous block of characters in
		          numerical sequence. Within the picture string any of these ten character 
		          can be used (interchangeably) as a place-holder for a mandatory digit.
		          Within the final result string, these ten characters are used to represent
		          the digits zero to nine.</termdef>
                        </p>
                     </item>

                  </ulist>

                  <p>The following properties specify 
		        characters to be used in the picture string supplied to the <code>fn:format-number</code>
		        function, but not in the formatted number. In each case the value must be a single character.
		      </p>

                  <ulist>
                     <item>
                        <p>
                           <termdef id="id-static-decimal-format-digit" term="digit">
                              <term>digit</term> 
		          is a character used in the picture string to represent an optional digit; the default value is the number sign character (#)</termdef>
                        </p>
                     </item>

                     <item>
                        <p>
                           <termdef id="id-static-decimal-format-pattern-separator"
                              term="pattern-separator">
                              <term>pattern-separator</term> is a character used
		          to separate positive and negative sub-pictures
		          in a picture string; the default value is the semi-colon character (;)</termdef>
                        </p>
                     </item>
                  </ulist>

                  <p>The following properties specify characters or strings that
		        may appear in the result of formatting the number, but not in the picture string:</p>

                  <ulist>
                     <item>
                        <p>
                           <termdef id="id-static-decimal-format-infinity" term="infinity">
                              <term>infinity</term> is the string used to represent the double value infinity (<code>INF</code>); the
		          default value is the string "Infinity"</termdef>
                        </p>
                     </item>

                     <item>
                        <p>
                           <termdef id="id-static-decimal-format-NaN" term="NaN">
                              <term>NaN</term> is the string used to
		          represent the double value NaN (not-a-number); the default value is the string "NaN"</termdef>
                        </p>
                     </item>

                     <item>
                        <p>
                           <termdef id="id-static-decimal-format-minus-sign" term="minus-sign">
                              <term>minus-sign</term> is the single character used to mark negative numbers; the
		          default value is the hyphen-minus character (#x2D). </termdef>
                        </p>
                     </item>
                  </ulist>
               </item>
            </ulist>


         </div3>
         <div3 id="eval_context">
            <head>Dynamic Context</head>
            <p>
               <termdef id="dt-dynamic-context" term="dynamic context"
                     >The <term>dynamic
context</term> of an expression is defined as information that is needed for the dynamic evaluation of an expression.</termdef> If
evaluation of an expression relies on some part of the <termref
                  def="dt-dynamic-context">dynamic context</termref> that 
is <xtermref spec="DM31"
                  ref="dt-absent"/>, a <termref def="dt-dynamic-error"
                  >dynamic
error</termref> is raised <errorref class="DY" code="0002"/>.</p>
            <p>The individual
components of the <termref def="dt-dynamic-context"
                  >dynamic
context</termref> are described below. 
<phrase role="xquery"
                     >Rules governing the initialization and alteration of  these components can be found in  <specref
                     ref="id-xq-evaluation-context-components" role="xquery"/>.</phrase>
               <phrase role="xpath"
                     >Further rules governing the semantics of these components can be found in <specref
                     ref="id-xp-evaluation-context-components" role="xpath"/>.</phrase>
            </p>

            <p>The
<termref def="dt-dynamic-context"
                  >dynamic context</termref> consists
of all the components of the <termref
                  def="dt-static-context"
               >static
context</termref>, and the additional components listed below.</p>
            <p>
               <termdef id="dt-focus" term="focus">The first three components of
the <termref
                     def="dt-dynamic-context"
                     >dynamic context</termref>
(context item, context position, and context size) are called the
<term>focus</term> of the expression. </termdef> The focus enables the
processor to keep track of which items are being processed by the
expression.

<phrase
                  role="xquery"
                  >If any component in the focus is defined, all components of the focus are defined.</phrase>

<phrase role="xpath"
                  >If any component in the focus is defined, both the context item and context position are known.</phrase> 
<note
                  role="xpath">
                  <p>If any component in the focus is defined, context size is usually defined as well.  However, when streaming, 
the context size cannot be determined without lookahead, so it may be undefined.  If so, expressions like <code>last()</code> will raise a dynamic error because the context size is undefined.</p>
               </note>
               <termdef id="dt-singleton-focus" term="singleton focus"
                     >A <term>singleton focus</term> is a focus that refers to a single item; in a singleton focus, context item is set to the item, context position = 1 and context size = 1.</termdef>
            </p>

            <p>Certain language constructs, notably the <termref def="dt-path-expression"
                  >path
operator</termref>
               <code role="parse-test">E1/E2</code>, the <nt def="SimpleMapExpr"
                  >simple map operator</nt>
               <code role="parse-test">E1!E2</code>, and the <termref def="dt-predicate"
                  >predicate</termref>
               <code role="parse-test"
                  >E1[E2]</code>, create a new focus
for the evaluation of a sub-expression. In these constructs, <code
                  role="parse-test"
                  >E2</code> is evaluated once for each item in the
sequence that results from evaluating <code
                  role="parse-test">E1</code>. Each time <code role="parse-test"
                  >E2</code> is evaluated, it is evaluated with a
different focus. The focus for evaluating <code
                  role="parse-test"
                  >E2</code> is referred to below as the <term>inner
focus</term>, while the focus for evaluating <code
                  role="parse-test"
                  >E1</code> is referred to as the <term>outer
focus</term>. The inner focus is used only for the evaluation of <code
                  role="parse-test"
               >E2</code>. Evaluation of E1 continues with its original focus unchanged.</p>
            <ulist>

               <item>
                  <p>
                     <termdef id="dt-context-item" term="context item"
                           >The <term>context item</term>
is the <termref def="dt-item"
                           >item</termref> currently being processed.</termdef>
                     <termdef id="dt-context-node" term="context node"
                           >When the context item is a
node, it can also be referred to as the <term>context
node</term>.</termdef> The context item is returned by an expression
consisting of a single dot (<code
                        role="parse-test">.</code>). When an expression <code role="parse-test"
                        >E1/E2</code> or <code role="parse-test"
                        >E1[E2]</code> is evaluated, each item in the
sequence obtained by evaluating <code
                        role="parse-test"
                        >E1</code>
becomes the context item in the inner focus for an evaluation of <code
                        role="parse-test">E2</code>. </p>
                  <p role="xquery">
                     <termdef id="dt-initial-context-item" term="initial context item"
                           >
    
    
      In the dynamic context of every module in a query,
      the context item component must have the same setting.
      If this shared setting is not <xtermref
                           spec="DM31" ref="dt-absent"
                           />,
      it is referred to as the <term>initial context item</term>.
    
  </termdef>
                  </p>

               </item>

               <item>
                  <p>
                     <termdef id="dt-context-position" term="context position"
                           >The <term>context
position</term> is the position of the context item within the
sequence of items currently being processed.</termdef> It changes whenever the context item
changes. When the focus is defined, the value of the context position is an integer greater than zero. The context
position is returned by the expression <code
                        role="parse-test">fn:position()</code>. When an expression <code
                        role="parse-test">E1/E2</code> or <code role="parse-test"
                        >E1[E2]</code> is evaluated, the context position in
the inner focus for an evaluation of <code
                        role="parse-test"
                        >E2</code>
is the position of the context item in the sequence obtained by
evaluating <code
                        role="parse-test"
                     >E1</code>. The position of the
first item in a sequence is always 1 (one). The context position is
always less than or equal to the context size.</p>
               </item>

               <item>
                  <p>
                     <termdef id="dt-context-size" term="context size"
                        >The <term>context
size</term> is the number of items in the sequence of items currently
being processed.</termdef> Its value is always an
integer greater than zero. The context size is returned by the
expression <code
                        role="parse-test">fn:last()</code>. When an expression
<code
                        role="parse-test">E1/E2</code> or <code role="parse-test"
                        >E1[E2]</code> is evaluated, the context size in the
inner focus for an evaluation of <code
                        role="parse-test"
                        >E2</code> is
the number of items in the sequence obtained by evaluating <code
                        role="parse-test">E1</code>. </p>
               </item>




               <item>
                  <p>
                     <termdef id="dt-variable-values" term="variable values">
                        <term>Variable values</term>. 
        This is a mapping from <termref
                           def="dt-expanded-qname"
                           >expanded QName</termref> to value. 
        It contains the
				same <termref
                           def="dt-expanded-qname">expanded QNames</termref> as the <termref
                           def="dt-in-scope-variables"
                           >in-scope variables</termref> in the
				<termref def="dt-static-context"
                           >static context</termref> for the expression. The <termref
                           def="dt-expanded-qname"
                           >expanded QName</termref> is the name of the variable and the value is the dynamic value of the variable, which includes its <termref
                           def="dt-dynamic-type">dynamic type</termref>.</termdef>
                  </p>


               </item>

               <item>
                  <p diff="chg" at="variadicity">
                     <termdef term="named functions" id="dt-named-functions">
                        <term>Named functions</term>.
        This is a mapping from (expanded QName, arity) to 
        <xtermref
                           spec="DM31" ref="dt-function-item"
                        >function</xtermref>.
      </termdef>
      It contains:</p>
                  <ulist>
                     <item><p>For each <termref def="dt-declared-function"/> in the <termref def="dt-declared-functions"/>,
                     and for each integer <code>A</code> in the <termref def="dt-arity-range"/> of that declared function,
                        a <xtermref spec="DM31" ref="dt-function-item">function item</xtermref> equivalent to that
                     obtained using the <termref def="dt-named-function-ref"/> <code>N#A</code>, where <var>N</var>
                     is the name of the declared function.</p></item>
                     <item><p>Optionally, an <termref def="dt-implementation-defined"/> set of additional named
                        <xtermref spec="DM31" ref="dt-function-item">function items</xtermref>.</p></item>
                  </ulist>
                  <p>The named functions in the dynamic context are used primarily by the <code>fn:function-lookup</code>
                  function.</p>
                  <p>Each function must be uniquely identified by its name and arity.</p>
                  <note><p>The reason for allowing named functions to be available dynamically beyond those that are
                  available statically is primarily to allow for cases where the run-time execution
                  environment is significantly different from the compile-time environment. This could happen, for example,
                  if a stylesheet or query is compiled within a web server and then executed in the web browser.
                  The <code>fn:function-lookup</code> function allows dynamic discovery of resources that were not
                  available statically.</p></note>
                  
                  <p><termdef id="dt-external-function" term="external function">
                     <term>External functions</term> are functions that are implemented outside the query
                     environment.</termdef> For example, an implementation might provide a set of 
                     <termref
                        def="dt-implementation-defined"
                        >implementation-defined</termref>
                     external functions in addition to the core function library described in <bibref
                        ref="xpath-functions-40"/>.
                     </p>
                  
  <!--                supplies a function for each signature in 
      <termref
                        def="dt-known-func-signatures"
                        >
        statically known function signatures
      </termref>
      and may supply other functions 
      (see <specref
                        ref="id-consistency-constraints"
                        />).  Named functions can include 
      
      
      <termref
                        def="dt-external-function">external functions</termref>.
      
                        id="dt-implementation-defined-function"
                        term="implementation-defined function"
                           >An <term>implementation-defined function</term> is an <termref
                           def="dt-external-function">external function</termref> that is <termref
                           def="dt-implementation-defined">implementation-defined</termref>
                     </termdef>.
        
        <phrase role="xpath">
                        <termdef id="dt-host-language-function" term="host language function"
                           role="xpath">A <term>host language function</term> is an <termref
                              def="dt-external-function"
                              >external function</termref> defined by the <termref
                              def="dt-host-language">host language</termref>.</termdef>
                     </phrase>
                  </p>-->
               </item>

               <item>
                  <p>
                     <termdef id="dt-date-time" term="current dateTime">
                        <term>Current dateTime.</term> This information represents
				an <termref
                           def="dt-implementation-dependent"
                           >implementation-dependent</termref> point in time during the processing of <phrase
                           role="xquery">a query</phrase>
                        <phrase role="xpath"
                           >an expression</phrase>, and includes an explicit timezone. It can be retrieved by the  <code>fn:current-dateTime</code> function. If invoked multiple times during the execution of <phrase
                           role="xquery">a query</phrase>
                        <phrase role="xpath"
                        >an expression</phrase>,
				this function always returns the same result.</termdef>
                  </p>
               </item>

               <item>
                  <p>
                     <termdef id="dt-timezone" term="implicit timezone">
                        <term>Implicit timezone.</term> This is the timezone to be used when a date,
time, or dateTime value that does not have a timezone is used in a
comparison or arithmetic operation. The implicit timezone is an  <termref
                           def="dt-implementation-defined"
                           >implementation-defined</termref> value of type
<code>xs:dayTimeDuration</code>. See <xspecref
                           spec="XS1-2" ref="dateTime-timezones"/> or
<xspecref spec="XS11-2"
                           ref="dateTime"/> for the range of valid values of a timezone.</termdef>
                  </p>
               </item>

               <item>
                  <p>
                     <termdef id="dt-default-language" term="default language">
                        <term>Default language.</term>
  This is the natural language used when creating human-readable output
  (for example, by the functions <code>fn:format-date</code> and <code>fn:format-integer</code>)
  if no other language is requested. 
  The value is a language code as defined by the type <code>xs:language</code>.</termdef>
                  </p>
               </item>

               <item>
                  <p>
                     <termdef id="dt-default-calendar" term="default calendar">
                        <term>Default calendar.</term>
    This is the calendar used when formatting dates in human-readable output
    (for example, by the functions <code>fn:format-date</code> and <code>fn:format-dateTime</code>)
    if no other calendar is requested. 
    The value is a string.</termdef>
                  </p>
               </item>

               <item>
                  <p>
                     <termdef id="dt-default-place" term="default place">
                        <term>Default place.</term>
    This is a geographical location used to identify the place where events happened (or will happen) when
    formatting dates and times using functions such as <code>fn:format-date</code> and <code>fn:format-dateTime</code>,
    if no other place is specified. It is used when translating timezone offsets to civil timezone names,
    and when using calendars where the translation from ISO dates/times to a local representation is dependent
    on geographical location. Possible representations of this information are an ISO country code or an
    Olson timezone name, but implementations are free to use other representations from which the above
    information can be derived.</termdef>
                  </p>
               </item>

               <item>
                  <p>
                     <termdef id="dt-available-docs" term="available documents">
                        <term>Available
    documents.</term> This is a mapping of strings to document nodes.  Each string
    represents the absolute URI of a resource. The document node is the root of a tree that represents that resource 
    using the <termref
                           def="dt-datamodel"
                           >data model</termref>. The document node is returned by the <code>fn:doc</code> 
    function when applied to that URI.</termdef> The set of available documents is not limited to the set of 
    <termref
                        def="dt-known-docs"
                     >statically known documents</termref>, and it may be empty.</p>
                  <p>If there are one or more 
    URIs in <termref def="dt-available-docs"
                        >available documents</termref> that map to a document
    node <code>D</code>, then the document-uri property of <code>D</code> must either be absent, or must
    be one of these URIs.</p>
                  <note>
                     <p>This means that given a document node <code>$N</code>, the result of
    <code
                           role="parse-test"
                           >fn:doc(fn:document-uri($N)) is $N</code> will always be <code>true</code>, unless
  <code
                           role="parse-test">fn:document-uri($N)</code> is an empty sequence.</p>
                  </note>
               </item>


               <item>
                  <p>
                     <termdef id="dt-available-text-resources" term="available text resources">
                        <term>Available text resources</term>. 
  This is a mapping of strings to text resources. Each string
  represents the absolute URI of a resource. The resource is returned
  by the <code>fn:unparsed-text</code> function when applied to that
  URI.</termdef> The set of available text resources is not limited to
  the set of <termref
                        def="dt-known-docs"
                     >statically known
  documents</termref>, and it may be empty.</p>
               </item>


               <item>
                  <p>
                     <termdef id="dt-available-collections" term="available item collections">
                        <term>Available
                           collections.</term> This is a mapping of
                         strings to sequences of items. Each string
                         represents the absolute URI of a
                         resource. The sequence of items represents
                         the result of the <code>fn:collection</code>
                         function when that URI is supplied as the
                         argument. </termdef> The set of available
                            collections is not limited to the set of <termref
                        def="dt-known-collections"
                        >statically known
                         collections</termref>, and it may be empty.</p>

                  <p>For every document node <code>D</code> that is in the target of a mapping in <termref
                        def="dt-available-collections"
                        >available   collections</termref>, or that is the root of a tree containing such a node, the document-uri property of <code>D</code> must either be absent, or must be a
URI <code>U</code> such that <termref
                        def="dt-available-docs"
                        >available documents</termref> contains a mapping from <code>U</code> to <code>D</code>.

</p>
                  <note>
                     <p>This means that for any document node <code>$N</code> retrieved using the
<code>fn:collection</code> function, either directly or by navigating to the root of a
node that was returned, the result of <code
                           role="parse-test"
                           >fn:doc(fn:document-uri($N)) is $N</code>
will always be <code>true</code>, unless <code>fn:document-uri($N)</code> is an empty sequence. This
implies a requirement for the <code>fn:doc</code> and <code>fn:collection</code> functions to be
consistent in their effect. If the implementation uses catalogs or
user-supplied URI resolvers to dereference URIs supplied to the <code>fn:doc</code>
function, the implementation of the <code>fn:collection</code> function must take these
mechanisms into account. For example, an implementation might achieve this
by mapping the collection URI to a set of document URIs, which are then
resolved using the same catalog or URI resolver that is used by the <code>fn:doc</code> function.</p>
                  </note>
               </item>


               <item>
                  <p>
                     <termdef id="dt-default-collection" term="default collection">
                        <term>Default  collection.</term>
    This is the sequence of items  that would result from calling the <code>fn:collection</code> function
    with no arguments.</termdef> The value of <term>default   collection</term> may be initialized by the
    implementation.</p>
               </item>

               <item>
                  <p>
                     <termdef id="dt-available-uri-collections" term="available uri collections">
                        <term>Available
    URI collections.</term> This is a mapping of
    strings to sequences of URIs. The string
    represents the absolute URI of a
    resource which can be interpreted as an aggregation of a number of individual resources each of which
    has its own URI. The sequence of URIs represents
    the result of the <code>fn:uri-collection</code>
    function when that URI is supplied as the
    argument. </termdef> There is no implication that the URIs in this sequence
    can be successfully dereferenced, or that the resources they refer to have any particular media type.</p>
                  <note>
                     <p>An implementation <rfc2119>may</rfc2119> maintain some consistent relationship between the available
    collections and the available URI collections, for example by ensuring that the result of
  <code>fn:uri-collection(X)!fn:doc(.)</code> is the same as the result of <code>fn:collection(X)</code>.
    However, this is not required. The <code>fn:uri-collection</code> function is more 
    general than <code>fn:collection</code> in that <phrase diff="del" at="A">it allows access to resources other 
    than XML documents; at the same time,</phrase> <code>fn:collection</code> allows access to 
    nodes that might lack individual URIs, for example nodes corresponding 
    to XML fragments stored in the rows of a relational database.</p>
                  </note>
               </item>

               <item>
                  <p>
                     <termdef id="dt-default-uri-collection" term="default URI collection">
                        <term>Default URI collection.</term>
    This is the sequence of URIs that would result from calling the <code>fn:uri-collection</code> function
    with no arguments.</termdef> The value of <term>default URI collection</term> may be initialized by the
    implementation.</p>
               </item>

               <item>
                  <p>
                     <termdef id="dt-environment-variables" term="environment variables">
                        <term>Environment variables.</term>
  This is a mapping from names to values. 
    Both the names and the values are strings. The names are compared using an
    <termref
                           def="dt-implementation-defined"
                           >implementation-defined</termref> collation, and are unique under this collation. The set of environment variables is
  <termref
                           def="dt-implementation-defined"
                           >implementation-defined</termref> and <rfc2119>may</rfc2119> be empty.</termdef>
                  </p>
                  <note>
                     <p>A possible implementation is to provide the set of POSIX environment variables (or their equivalent on other
      operating systems) appropriate to the process in which the <phrase
                           role="xquery">query is initiated</phrase>
                        <phrase role="xpath">expression is evaluated</phrase>.</p>
                  </note>
               </item>

            </ulist>
         </div3>
      </div2>

      <div2 id="id-processing-model">
         <head>Processing
                         Model</head>
         <p>&language; is defined in terms
                         of the <termref
               def="dt-datamodel">data
                         model</termref> and the <termref
               def="dt-expression-context"
            >expression
                         context</termref>.</p>
         <graphic source="ProcMod-XQuery.gif"
            alt="Processing                          Model Overview" role="xquery"/>
         <graphic source="ProcMod-XPath.gif"
            alt="Processing                          Model Overview" role="xpath"/>
         <p>Figure 1:
                         Processing Model Overview</p>

         <p>Figure 1 provides a schematic overview of the processing steps that
are discussed in detail below. Some of these steps are completely
outside the domain of &language;; in Figure 1, these are depicted
outside the line that represents the boundaries of the language, an
area labeled <term>external processing</term>. The external processing
domain includes generation of <termref
               def="dt-data-model-instance"
               >XDM instances</termref> that represent the data to be queried (see <specref
               ref="id-data-model-generation"/>), schema import processing (see
<specref
               ref="id-schema-import-processing"/>) and serialization<phrase role="xquery"
                  > (see
<specref ref="id-serialization"
               />)</phrase>. The area inside the boundaries of
the language is known as the <phrase
               role="xquery">
               <term>query processing domain</term>
            </phrase>
            <phrase role="xpath">
               <term>XPath processing domain</term>
            </phrase>, which includes the static
analysis and dynamic evaluation phases (see <specref
               ref="id-expression-processing"/>).  Consistency constraints on the
<phrase
               role="xquery">query</phrase>
            <phrase role="xpath">XPath</phrase> processing domain are defined in <specref
               ref="id-consistency-constraints"/>.</p>


         <div3 id="id-data-model-generation">
            <head>Data Model Generation</head>

            <p>The input data for <phrase role="xquery">a query</phrase>
               <phrase role="xpath"
                  >an expression</phrase> must be represented as one or more <termref
                  def="dt-data-model-instance"
                  >XDM instances</termref>. This process occurs outside
the domain of &language;, which is why Figure 1 represents it in the
external processing domain. Here are some steps by which an XML
document might be converted to an <termref
                  def="dt-data-model-instance">XDM instance</termref>:</p>

            <olist>

               <item>
                  <p>A document may be parsed using an XML parser that
generates an <term>XML Information Set</term> (see <bibref
                        ref="XINFO"
                        />). The parsed document may then be validated against one
or more schemas. This process, which is described in <loc
                        href="http://www.w3.org/TR/xmlschema-1/"
                        >[XML Schema 1.0 Part 1]</loc> or
<loc
                        href="http://www.w3.org/TR/xmlschema11-1/"
                        >[XML Schema 1.1 Part 1]</loc>, results in an abstract information structure called
the <term>Post-Schema Validation Infoset</term> (PSVI). If a document
has no associated schema, its Information Set is preserved. (See DM1
in Fig. 1.)</p>
               </item>

               <item>
                  <p>The Information Set or PSVI may be
transformed into an <termref
                        def="dt-data-model-instance"
                        >XDM instance</termref>
by a process described in <bibref
                        ref="xpath-datamodel-31"/>. (See DM2 in
Fig. 1.)</p>
               </item>
            </olist>
            <p>The above steps provide an example of how an <termref def="dt-data-model-instance"
                  >XDM instance</termref> might be constructed. An XDM instance might
also be synthesized directly from a relational database, or
constructed in some other way (see DM3 in Fig. 1.) &language; is defined in terms
of the <termref
                  def="dt-datamodel"
               >data model</termref>,
but it does not place any constraints on how XDM instances are constructed.</p>

            <p>
               <termdef term="type annotation" id="dt-type-annotation"
                     >Each element node and attribute node in an <termref
                     def="dt-data-model-instance"
                     >XDM instance</termref> has a <term>type annotation</term> (described in <xspecref
                     spec="DM31" ref="types"
                  />). 
The type annotation of a node is a reference to an XML Schema type. 
</termdef>  The <code>type-name</code> of a node is the name of the type referenced by its <termref
                  def="dt-type-annotation">type annotation</termref>. 
If the <termref
                  def="dt-data-model-instance"
                  >XDM instance</termref> was derived from a validated XML document as described in <xspecref
                  spec="DM31" ref="const-psvi"
               />, the type annotations of the element and attribute nodes are derived from schema
validation. &language; does
not provide a way to directly access the type annotation of an element
or attribute node.</p>
            <p>The value of an attribute is represented directly within the
attribute node. An attribute node whose type is unknown (such as might
occur in a schemaless document) is given the <termref
                  def="dt-type-annotation">type annotation</termref>
               <code>xs:untypedAtomic</code>.</p>

            <p>The value of an element is represented by the children of the
element node, which may include text nodes and other element
nodes. The <termref
                  def="dt-type-annotation"
                  >type annotation</termref> of an element node indicates how the values in
its child text nodes are to be interpreted. An element that has not been validated (such as might occur in a schemaless document) is annotated
with the schema type <code>xs:untyped</code>. An element that has been validated and found to be partially valid is annotated with the schema type <code>xs:anyType</code>. If an element node is annotated as <code>xs:untyped</code>, all its descendant element nodes are also annotated as <code>xs:untyped</code>. However, if an element node is annotated as <code>xs:anyType</code>, some of its descendant element nodes may have a more specific <termref
                  def="dt-type-annotation">type annotation</termref>.</p>




         </div3>

         <div3 id="id-schema-import-processing">
            <head>Schema Import Processing</head>
            <p role="xquery">The <termref def="dt-issd"
                  >in-scope
schema definitions</termref> in the <termref def="dt-static-context"
                  >static context</termref> may be extracted from
actual XML schemas (see step SI1 in Figure 1) or may be
generated by some other mechanism (see step SI2 in Figure 1). In
either case, the result must satisfy the consistency constraints
defined in <specref
                  ref="id-consistency-constraints"/>.</p>

            <p role="xpath">The <termref def="dt-issd"
                  >in-scope schema
definitions</termref> in the <termref def="dt-static-context"
                  >static
context</termref> are provided by the host language (see step SI1 in
Figure 1) and must satisfy the consistency constraints defined in
<specref
                  ref="id-consistency-constraints"/>.

</p>
         </div3>
         <div3 id="id-expression-processing">
            <head>Expression
Processing</head>
            <p>&language; defines two phases of processing called
the <termref
                  def="dt-static-analysis">static analysis phase</termref>
and the <termref
                  def="dt-dynamic-evaluation"
                  >dynamic evaluation
phase</termref> (see Fig. 1).  During the static analysis phase, <termref
                  def="dt-static-error">static errors</termref>,  <termref def="dt-dynamic-error"
                  >dynamic errors</termref>, or <termref def="dt-type-error"
                  >type errors</termref> may be raised. During the dynamic evaluation phase, only <termref
                  def="dt-dynamic-error">dynamic errors</termref> or <termref def="dt-type-error"
                  >type errors</termref> may be raised. These kinds of errors are defined in <specref
                  ref="id-kinds-of-errors"/>.  </p>
            <p>Within each phase, an implementation is free to use any
strategy or algorithm whose result conforms to the
specifications in this document.</p>

            <div4 id="id-static-analysis">
               <head>Static Analysis Phase</head>
               <p>
                  <termdef id="dt-static-analysis" term="static analysis phase"
                        >The
<term>static analysis phase</term> depends on the expression itself
and on the <termref
                        def="dt-static-context"
                        >static context</termref>. The <term>static analysis phase</term> does
not depend on input data (other than schemas).</termdef>
               </p>
               <p>During the static analysis phase, the <phrase role="xquery">query</phrase>
                  <phrase role="xpath"
                     >XPath expression</phrase> is parsed into an
internal representation called the <term>operation tree</term> (step
SQ1 in Figure 1).  A parse error is raised as a <termref
                     def="dt-static-error">static error</termref>
                  <errorref class="ST" code="0003"/>. The <termref def="dt-static-context"
                     >static context</termref> is initialized by the implementation (step SQ2). <phrase
                     role="xquery">The <termref def="dt-static-context"
                        >static context</termref> is then changed and augmented based on information in the  <term>prolog</term> (step SQ3). If the
<termref
                        def="dt-schema-aware-feature"
                        >Schema Aware Feature</termref>
is supported, the <termref def="dt-issd"
                        >in-scope schema definitions</termref> are populated with information from imported schemas. If the <termref
                        def="dt-module-feature"
                     >Module
Feature</termref> is supported, the static context is extended with function
declarations and variable declarations from imported modules.</phrase> The <termref
                     def="dt-static-context"
                     >static context</termref> is used to resolve schema type names, function names, namespace prefixes, and variable names (step
SQ4).
If a name of one of these kinds in the <term>operation tree</term> is
not found in the <termref
                     def="dt-static-context">static context</termref>, a <termref
                     def="dt-static-error">static error</termref> (<errorref class="ST" code="0008"
                     /> or <errorref class="ST" code="0017"
                     />) is raised (however, see exceptions to this rule in <specref
                     ref="id-element-test"/> and <specref ref="id-attribute-test"/>.)</p>

               <p>The <term>operation tree</term> is then
<term>normalized</term> by making explicit the implicit operations
such as <termref
                     def="dt-atomization">atomization</termref> and extraction of <termref
                     def="dt-ebv">Effective Boolean Values</termref> (step SQ5).</p>

               <p>During the <termref def="dt-static-analysis"
                     >static analysis
phase</termref>, a processor may perform type analysis. The
effect of type analysis is to assign a <termref
                     def="dt-static-type"
                     >static type</termref> to each expression in the
operation tree. <termdef
                     id="dt-static-type" term="static type"
                     >The
<term>static type</term> of an expression is the best inference that
the processor is able to make statically about the type of the result
of the expression.</termdef> This specification does not define the
rules for type analysis nor the static types that are assigned to
particular expressions: the only constraint is that the inferred type
must match all possible values that the expression is capable of
returning.</p>

               <p>Examples of inferred static types might be:</p>

               <ulist>
                  <item>
                     <p>For the expression <code>concat(a,b)</code> the inferred static type is <code>xs:string</code>
                     </p>
                  </item>

                  <item>
                     <p>For the expression <code>$a = $v</code> the inferred static type is <code>xs:boolean</code>
                     </p>
                  </item>


                  <item>
                     <p>For the expression <code>$s[exp]</code> the inferred static
    type has the same item type as the static type of <code>$s</code>,
    but a cardinality that allows the empty sequence even if the
    static type of <code>$s</code> does not allow an empty
    sequence.</p>
                  </item>


                  <item>
                     <p>The inferred static type of the expression <code>data($x)</code> (whether written
    explicitly or inserted into the operation tree in places where atomization
    is implicit) depends on the inferred static type of <code>$x</code>: for example, if <code>$x</code>
    has type <code>element(*, xs:integer)</code> then <code>data($x)</code> has static type <code>xs:integer</code>.</p>
                  </item>
               </ulist>


               <p>In XQuery 1.0 and XPath 2.0, rules for static type inferencing were published
normatively in <bibref
                     ref="xquery-semantics"
                  />, but implementations were allowed to
refine these rules to infer a more precise type where possible. In
XQuery 3.1 and XPath 3.1, the rules for static type inferencing are entirely implementation-dependent.</p>

               <p>Every kind of expression also imposes requirements on the type of its
operands. For example, with the expression <code>substring($a, $b, $c)</code>, <code>$a</code> must be
of type <code>xs:string</code> (or something that can be converted to <code>xs:string</code> by the
function calling rules), while <code>$b</code> and <code>$c</code> must be of type <code>xs:double</code>.</p>

               <p>If the <termref def="dt-static-typing-feature" role="xquery"
                     >Static Typing Feature</termref>
                  <termref def="dt-xpath-static-typing-feature" role="xpath"
                     >Static Typing Feature</termref> is in effect, a processor must raise a
type error during static analysis if the inferred static type of an
expression is not subsumed by the required type of the context where the
expression is used. For example, the call of substring above would cause a
type error if the inferred static type of <code>$a</code> is <code>xs:integer</code>; equally, a type
error would be reported during static analysis if the inferred static type
is <code>xs:anyAtomicType</code>.</p>

               <p diff="chg" at="A">If the <termref def="dt-static-typing-feature" role="xquery"
                     >Static Typing Feature</termref>
                  <termref def="dt-xpath-static-typing-feature" role="xpath"
                     >Static Typing Feature</termref> is not in effect, a processor may raise a type
                  error during static analysis only when one of the following conditions is met:</p>
               <olist diff="add" at="A">
                  <item><p>When the inferred static type of an
                     expression has no overlap (intersection) with the required type, and cannot be converted
                     to the required type using the <termref def="dt-coercion-rules"/>. For example,
                     given the call <code>fn:upper-case($s)</code>, the processor may raise an error if the
                     declared or inferred type of <code>$s</code> is <code>xs:integer</code>, 
                     but not if it is <code>xs:anyAtomicType</code>.
                  </p></item>
                  <item><p>When the only possible value of an expression that is consistent with the required
                     type is the empty sequence. Consider for example the expression
                     <code>fn:codepoints-to-string(fn:tokenize($in))</code>. Since <code>fn:codepoints-to-string</code>
                     requires <code>xs:integer*</code> while <code>fn:tokenize($in)</code> delivers <code>xs:string*</code>,
                     this expression can succeed only in the special case where the value is empty,
                     so processors <rfc2119>may</rfc2119> report this as an error. An error
                  <rfc2119>must not</rfc2119> be raised under this rule unless both the inferred static type and the required type permit
                  values other than the empty sequence.</p></item>
                  
                  <item><p>When an <nt def="ForwardStep">ForwardStep</nt> or 
                     <nt def="ReverseStep">ReverseStep</nt> is used, and it is known during static
                  analysis that the step will select no nodes.</p>
                  <p>One example of this is an expression such as <code>@price/text()</code>: attribute nodes
                  never have children, so this expression will never select anything.</p>
                  <p>Another example arises when schema information is available: if it is known
                  that the variable <code>$emp</code> holds a value of type <code>schema-element(employee)</code>,
                  and that no element of this type can have an attribute named <code>@sallary</code> (sic), then
                  a type error may be reported if the expression <code>$emp/@sallary</code> is encountered.</p>
                  <note><p>A static error <rfc2119>must not</rfc2119> be reported simply because a predicate
                  will always return false: the expression <code>a[name()='b']</code> will always return
                  an empty sequence, but it is not an error.</p></note>
                  </item>  
                  
                  <item><p>When the <nt def="KeySpecifier">KeySpecifier</nt> in a 
                     <nt def="Lookup">Lookup</nt> expression is such that the result of the lookup
                  will inevitably be empty. For example if the context item is known to be of type
                  <code>record(longitude, latitude)</code> then a static type error <rfc2119>may</rfc2119> be raised
                  against the expression <code>?altitude</code>.</p></item>
               </olist>
               
               <p diff="add" at="A">For backwards compatibility, processors <rfc2119>should</rfc2119> provide
               an option to avoid reporting type errors in respect of constructs such as <code>@a/@b</code>
               that were executed without error in previous versions. Note in particular that the construct
               <code>/..</code> was sometimes recommended in XPath 1.0 as the preferred way to denote an empty 
               node-set.</p>
               
               <p>Alternatively, if the <termref
                     def="dt-static-typing-feature" role="xquery">Static Typing Feature</termref>
                  <termref def="dt-xpath-static-typing-feature" role="xpath"
                     >Static Typing Feature</termref> is not in effect, the processor
                  <rfc2119>may</rfc2119> defer all type checking until the dynamic evaluation phase.</p>


            </div4>
            <div4 id="id-dynamic-evaluation">
               <head>Dynamic Evaluation Phase</head>
               <p>
                  <termdef id="dt-dynamic-evaluation" term="dynamic evaluation phase"
                        >The <term>dynamic evaluation phase</term> is the phase during which the value of an expression is computed.</termdef> It is dependent on successful completion of the <termref
                     def="dt-static-analysis">static analysis phase</termref>.</p>
               <p>The dynamic evaluation phase can occur only if no errors were detected during the <termref
                     def="dt-static-analysis">static analysis phase</termref>. If the <termref
                     def="dt-static-typing-feature" role="xquery">Static Typing Feature</termref>
                  <termref def="dt-xpath-static-typing-feature" role="xpath"
                     >Static Typing Feature</termref> is in effect, all <termref def="dt-type-error"
                     >type errors</termref> are detected during static analysis and serve to inhibit the dynamic evaluation phase.</p>
               <p>The dynamic evaluation phase depends on the <term>operation
tree</term> of the expression being evaluated (step DQ1), on the input
data (step DQ4), and on the <termref
                     def="dt-dynamic-context"
                     >dynamic context</termref> (step DQ5), which in turn draws information from  the external environment (step DQ3) and the <termref
                     def="dt-static-context"
                     >static context</termref> (step DQ2). The dynamic evaluation phase may create new data-model values (step DQ4) and it may extend the <termref
                     def="dt-dynamic-context"
                  >dynamic context</termref> (step DQ5)&mdash;for example, by binding values to variables.</p>

               <p>
                  <termdef term="dynamic type" id="dt-dynamic-type"
                        >A <term>dynamic type</term> is associated with each value as it is computed. The dynamic type of a value may be more specific than the <termref
                        def="dt-static-type"
                        >static type</termref> of the expression that computed it (for example, the  static type of an expression might be <code>xs:integer*</code>, denoting a sequence of zero or more integers, but at evaluation time its value may have the dynamic type <code>xs:integer</code>, denoting exactly one integer.)</termdef>
               </p>
               <p> If an operand of an expression is found
to have a <termref def="dt-dynamic-type"
                     >dynamic type</termref> that is not appropriate for that operand, a
<termref
                     def="dt-type-error">type error</termref> is
raised <errorref class="TY"
                     code="0004"/>.</p>
               <p>Even though static typing can catch many <termref def="dt-type-error"
                     >type errors</termref> before an expression is executed, it is possible for an expression to raise an error during evaluation that was not detected by static  analysis. For example, an expression may contain a cast of a string into an integer, which is statically valid. However, if the actual value of the string at run time cannot be cast into an integer, a <termref
                     def="dt-dynamic-error"
                     >dynamic error</termref> will result. Similarly, an expression may apply an arithmetic operator to a value whose <termref
                     def="dt-static-type"
                     >static type</termref> is <code>xs:untypedAtomic</code>. This is not a <termref
                     def="dt-static-error"
                     >static error</termref>, but at run time, if the value cannot be successfully cast to a <termref
                     def="dt-numeric">numeric</termref> type, a <termref def="dt-dynamic-error"
                     >dynamic error</termref> will be raised.</p>
               <p>When the <termref def="dt-static-typing-feature" role="xquery"
                     >Static Typing Feature</termref>
                  <termref def="dt-xpath-static-typing-feature" role="xpath"
                     >Static Typing Feature</termref> is in effect, it is also possible for static analysis of an expression to raise a <termref
                     def="dt-type-error"
                     >type error</termref>, even though execution of the expression on certain inputs would be successful. For example, an expression might contain a function that requires an element as its parameter, and the static analysis phase might infer the <termref
                     def="dt-static-type"
                     >static type</termref> of the function parameter to be an optional element. This case is treated as a <termref
                     def="dt-type-error"
                  >type error</termref> and inhibits evaluation, even though the function call would have been successful for input data in which the optional element is present.</p>
            </div4>
         </div3>

         <div3 id="id-serialization" role="xquery">
            <head>Serialization</head>

            <p>
               <termdef id="dt-serialization" term="serialization">
                  <term>Serialization</term> is the process of
converting an <termref
                     def="dt-data-model-instance"
                     >XDM
instance</termref> to a sequence of octets (step DM4 in Figure 1.),
as described in <bibref
                     ref="xslt-xquery-serialization-31"/>.</termdef>
            </p>

            <note>
               <p>This definition of serialization is the definition
used in this specification. Any form of serialization that is
not based on <bibref
                     ref="xslt-xquery-serialization-31"
                  /> is outside
the scope of the &language; specification.</p>
            </note>

            <p role="xpath">The host language may provide a serialization
option.</p>

            <note>
               <p>The <loc href="http://expath.org"
                     >EXPath Community Group</loc> has developed a <loc
                     href="http://expath.org/spec/file"
                  >File Module</loc>, which some implementations use to perform file system related operations such as listing, reading, or writing files or directories. Multiple files can be written from a single query.</p>
            </note>

            <p role="xquery"
                  >An XQuery implementation is not required to provide a
serialization interface. For example, an implementation may 
provide only a DOM interface (see <bibref
                  ref="DOM"/>) or an interface
based on an event stream. </p>

            <p role="xquery">
               <bibref ref="xslt-xquery-serialization-31"
                  /> defines a set
of <term>serialization parameters</term> that govern the serialization
process. If an XQuery implementation provides a serialization
interface, it may support (and may expose to users) any of the
serialization parameters listed (with default values) in
<specref
                  ref="id-xq-static-context-components"
               />. 
If an implementation does not support one of these parameters, it must ignore it without raising an error.</p>

            <p role="xquery">
               <termdef id="dt-output-declaration" term="output declaration"
                     >An <term>output declaration</term>
is an option declaration in the namespace "http://www.w3.org/2010/xslt-xquery-serialization";
it is used to declare serialization parameters.</termdef>
Except for <code>parameter-document</code>, each option corresponds to a serialization parameter element defined in <xspecref
                  spec="SER31" ref="serparams-schema"
                  />. 
The name of each option is the same as the name of the corresponding serialization parameter element, 
and the values permitted for each option are the same as the values allowed in the serialization parameter element. 
For QName values, prefixes are
expanded to namespace URIs by means of the statically known namespaces, or 
if unprefixed, <phrase
                  diff="chg" at="A">the default element namespace</phrase>.</p>

            <p role="xquery"
               >There is no output declaration for <code>use-character-maps</code>, it can be set only by means of a parameter document. 
When the application requests serialization of the output, the
processor may use these parameters to control the way in which the
serialization takes place.  Processors may also allow external
mechanisms for specifying serialization parameters, which may or may
not override serialization parameters specified in the query prolog.</p>

            <p>The following example illustrates the use of declaration options. </p>

            <example role="xquery">
               <eg role="frag-prolog-parse-test"><![CDATA[
declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
declare option output:method   "xml";
declare option output:encoding "iso-8859-1";
declare option output:indent   "yes";
declare option output:parameter-document "file:///home/me/serialization-parameters.xml";
]]></eg>
            </example>

            <p role="xquery"
                  >An <term>output declaration</term> may appear only in a main module;
it is a static error  <errorref
                  class="ST" code="0108"/> if an output declaration appears in a <termref
                  def="dt-library-module">library module</termref>. 
It is a static error  <errorref
                  class="ST" code="0110"
                  /> if the same serialization parameter is declared more than once.
It is a <termref
                  def="dt-static-error">static error</termref>
               <errorref class="ST" code="0109"
                  /> if the local name of an
output declaration in the <code>http://www.w3.org/2010/xslt-xquery-serialization</code> namespace is not  one of the
serialization parameter names listed in <specref
                  ref="id-xq-static-context-components"
                  /> or <code>parameter-document</code>,
or if the name of an output declaration is <code>use-character-maps</code>. 
The default value for the <code>method</code> parameter is <code>"xml"</code>. An
implementation may define additional <termref
                  def="dt-implementation-defined"
               >implementation-defined</termref>
serialization parameters in its own namespaces.
</p>

            <p role="xquery"
                  >If the local name of an output declaration in the
<code>http://www.w3.org/2010/xslt-xquery-serialization</code> namespace is
<code>parameter-document</code>, the value of the output declaration is treated as a
URI literal.  The value is a location hint, and identifies an XDM instance
in an implementation-defined way.  If a processor is performing
serialization, it is a static error <errorref
                  class="ST" code="0119"
                  />  if the implementation
is not able to process the value of the
<code>output:parameter-document</code> declaration to produce an XDM instance.</p>

            <p role="xquery"
                  >If a processor is performing serialization, the XDM instance identified by
an <code>output:parameter-document</code> output declaration specifies the values of
serialization parameters in the manner defined by
<xspecref
                  spec="SER31" ref="serparams-in-xdm-instance"/>.
It is a static error  <errorref
                  class="ST" code="0115"
                  />  if this
yields a serialization error.  The value of any other output declaration
overrides any value that might have been specified for the same
serialization parameter using an output declaration in the
<code>http://www.w3.org/2010/xslt-xquery-serialization</code> namespace with the local name
parameter-document declaration.</p>

            <p role="xquery"
               >A serialization parameter that is not applicable to the chosen output method
must be ignored, except that if its value is not a valid value for that
parameter, an error may be raised.</p>

            <p role="xquery"
               >A processor that is performing serialization must raise a
serialization error if the values of any serialization parameters that it supports (other than any that are ignored under the previous paragraph) are
incorrect.</p>

            <p role="xquery"
               >A processor that is not performing serialization may report errors if any
serialization parameters are incorrect, or may ignore such parameters.</p>

            <p role="xquery"
               >Specifying serialization parameters in a query does not by itself demand
that the output be serialized. It merely defines the desired form of the
serialized output for use in situations where the processor has been asked
to perform serialization. </p>

            <note role="xquery">
               <p>The <termref def="dt-datamodel"
                     >data
model</termref> permits an element node to have
fewer <termref
                     def="dt-in-scope-namespaces"
                     >in-scope
namespaces</termref> than its parent. Correct serialization of such an
element node would require "undeclaration" of namespaces, which is a
feature of <bibref
                     ref="XMLNAMES11"/>. An implementation that does not
support <bibref
                     ref="XMLNAMES11"
                  /> is permitted to serialize such an
element without "undeclaration" of namespaces, which effectively
causes the element to inherit the in-scope namespaces of its
parent. </p>
            </note>

         </div3>



         <div3 id="id-consistency-constraints">

            <head>Consistency Constraints</head>
            <p>In order for &language; to
be well defined, the input <termref
                  def="dt-data-model-instance">XDM instances</termref>, the <termref
                  def="dt-static-context">static context</termref>, and the <termref
                  def="dt-dynamic-context"
                  >dynamic context</termref> must be mutually
consistent. The consistency constraints listed below are prerequisites
for correct functioning of an &language; implementation. Enforcement
of these consistency constraints is beyond the scope of this
specification. This specification does not
define the result of  <phrase
                  role="xquery">a query</phrase>
               <phrase role="xpath"
               >an expression</phrase> under any condition in which one
or more of these constraints is not satisfied.</p>

            <ulist>

               <item>
                  <p>For every  node that has a type annotation, if that type annotation is found in the <termref
                        def="dt-issd"
                     >in-scope schema definitions</termref> (ISSD), then its definition in the ISSD must be equivalent to its definition in the type annotation.
</p>
               </item>


               <item>
                  <p>Every element name, attribute name, or schema type name referenced in <termref
                        def="dt-in-scope-variables">in-scope variables</termref> or <termref
                           def="dt-declared-functions"
                        >declared functions</termref> must be in the <termref
                        def="dt-issd"
                        >in-scope schema definitions</termref>, unless it is an element name referenced as part of an <nt
                        def="ElementTest"
                        >ElementTest</nt> or an attribute name referenced as part of an <nt
                        def="AttributeTest">AttributeTest</nt>.</p>
               </item>

               <item>
                  <p>Any reference to a global element, attribute, or type name in
the <termref
                        def="dt-issd"
                        >in-scope schema definitions</termref> must have a corresponding element, attribute or type
definition in the <termref
                        def="dt-issd">in-scope schema definitions</termref>.</p>
               </item>




               <item>
                  <p> For each mapping of a string to a
document node in <termref
                        def="dt-available-docs"
                        >available
documents</termref>, if there exists a mapping of the same string to a document type in <termref
                        def="dt-known-docs"
                        >statically known documents</termref>, the document node must match the document type, using the matching rules in <specref
                        ref="id-sequencetype-matching"/>.</p>
               </item>


               <item>
                  <p>For each mapping of a string to a sequence of  items in
<termref
                        def="dt-available-collections"
                        >available   
collections</termref>, if there exists a mapping of the same string to
a type in <termref
                        def="dt-known-collections"
                        >statically known collections</termref>, the sequence of items  must match the type, using the matching rules in  <specref
                        ref="id-sequencetype-matching"/>.</p>
               </item>

               <item>
                  <p>The sequence of items in the <termref def="dt-default-collection"
                        >default collection</termref> must match the <termref
                        def="dt-known-default-collection"
                        >statically known default collection type</termref>, using the matching rules in  <specref
                        ref="id-sequencetype-matching"/>.</p>
               </item>

               <item>
                  <p>The value of the <termref def="dt-context-item"
                        >context item</termref> must match the <termref
                        def="dt-context-item-static-type"
                        >context item static type</termref>, using the
matching rules in <specref
                        ref="id-sequencetype-matching"/>.</p>
               </item>


               <item>
                  <p>For each (variable, type) pair in <termref def="dt-in-scope-variables"
                        >in-scope variables</termref> and the corresponding (variable, value) pair in <termref
                        def="dt-variable-values"
                        >variable values</termref> such that the variable names are equal, the value must match the type, using the matching rules in  <specref
                        ref="id-sequencetype-matching"/>.</p>
               </item>

               <item role="xquery">
                  <p>For each variable declared as external, if the variable declaration does
not include a <nt
                        def="VarDefaultValue"
                     >VarDefaultValue</nt>, the external environment must provide a value
for the variable.</p>

                  <p>For each variable declared as external for which the external environment
provides a value: If the variable declaration includes a declared type,
the value provided by the external environment must match the
declared type, using the matching rules in  <specref
                        ref="id-sequencetype-matching"
                     />. If the variable declaration does not include a declared type, the
external environment must provide a type to accompany the value provided, using the same matching rules.</p>
               </item>

               <item role="xquery">
                  <p>For each function declared as external: the function's <xtermref spec="DM31"
                        ref="dt-function-item"
                        >implementation</xtermref> must either return a value that matches the declared result type,
using the matching rules in <specref
                        ref="id-sequencetype-matching"/>, or raise an
<termref
                        def="dt-implementation-defined">implementation-defined</termref> error.</p>
               </item>

               <item role="xquery">
                  <p>For a given query, define a <term>participating ISSD</term> as the <termref
                        def="dt-issd"
                        >in-scope schema definitions</termref> of a module that is used in evaluating the query. 
  If two participating ISSDs contain a definition for the same schema type, element name, or attribute name, the definitions must be equivalent in both ISSDs. 
  In this context, equivalence means that validating an instance against type
  <emph>T</emph> in one ISSD will always have the same effect as validating the
  same instance against type <emph>T</emph> in the other ISSD (that is, it will
  produce the same PSVI, insofar as the PSVI is used during
  subsequent processing). This means, for example, that the
  membership of the substitution group of an element declaration in
  one ISSD must be the same as that of the corresponding element
  declaration in the other ISSD; that the set of types derived by
  extension from a given type must be the same; and that in the
  presence of a strict or lax wildcard, the set of global
  element (or attribute) declarations capable of matching the
  wildcard must be the same. </p>

               </item>

               <item>
                  <p>In the <termref def="dt-static-namespaces"
                        >statically known namespaces</termref>, the prefix <code>xml</code> must not be bound to any namespace URI other than <code>http://www.w3.org/XML/1998/namespace</code>, and no prefix other than <code>xml</code> may be bound to this namespace URI.
The prefix <code>xmlns</code> must not be bound to any namespace URI, and no prefix may be bound to the namespace URI <code>http://www.w3.org/2000/xmlns/</code>.</p>
               </item>

               <item>
                  <p>
      For each 
      <code>(expanded QName, arity) -&gt; FunctionTest</code>
      entry in the <termref def="dt-declared-functions"/>,
      there must exist an 
      <code>(expanded QName, arity) -&gt; function</code>
      entry in 
      <termref
                        def="dt-named-functions"
                        >named functions</termref>
      such that the function's 
      <xtermref
                        spec="DM31" ref="dt-signature"
                        >signature</xtermref>
      is 
      <code>FunctionTest</code>. 
    </p>
               </item>

            </ulist>
         </div3>
      </div2>

      <div2 id="errors">
         <head>Error Handling</head>

         <div3 id="id-kinds-of-errors">
            <head>Kinds of Errors</head>
            <p>
As described in <specref ref="id-expression-processing"
                  />, &language;
defines a <termref def="dt-static-analysis"
                  >static analysis phase</termref>, which does not depend on input
data, and a <termref
                  def="dt-dynamic-evaluation"
               >dynamic evaluation
phase</termref>, which does depend on input
data.  Errors may be raised during each phase.</p>

            <p>
               <termdef id="dt-static-error" term="static error"
                     >
An error that can be detected during the static analysis phase, and is not a type error, is a <term>static error</term>.</termdef> A syntax error is an example of a <termref
                  def="dt-static-error">static error</termref>.</p>
            <p>
               <termdef id="dt-dynamic-error" term="dynamic error"
                     >A <term>dynamic
error</term> is an error that
must be detected during the dynamic evaluation phase and may be detected
during the static analysis phase.
Numeric overflow is an example of a <termref
                     def="dt-dynamic-error">dynamic error</termref>.</termdef>
            </p>
            <p>
               <termdef id="dt-type-error" term="type error"
                     >A <term>type
error</term> may be raised during the static analysis phase or the dynamic evaluation phase.
During the static analysis phase, a <termref
                     def="dt-type-error">type error</termref> occurs
when the <termref
                     def="dt-static-type"
                     >static type</termref> of an expression does not match the expected type
of the context in which the expression occurs.
During the dynamic evaluation phase, a <termref
                     def="dt-type-error">type error</termref> occurs
when the <termref
                     def="dt-dynamic-type"
                  >dynamic type</termref> of a value does not match the expected type of
the context in which the value occurs.</termdef>
            </p>

            <p>The outcome of the <termref def="dt-static-analysis"
                  >static analysis
phase</termref> is either success or one or more <termref
                  def="dt-type-error">type errors</termref>, <termref def="dt-static-error"
                  >static errors</termref>, or statically-detected <termref def="dt-dynamic-error"
                  >dynamic errors</termref>. The result of the <termref def="dt-dynamic-evaluation"
                  >dynamic evaluation
phase</termref> is either a result value, a <termref
                  def="dt-type-error">type
error</termref>, or a <termref def="dt-dynamic-error"
                  >dynamic error</termref>.</p>
            <p>If more than one error is present, or if an error condition comes within the
scope of more than one error defined in this specification, then any non-empty
subset of these errors may be reported.</p>

            <p> During the <termref def="dt-static-analysis"
                  >static
analysis phase</termref>, if the <termref def="dt-static-typing-feature"
                  role="xquery">Static Typing Feature</termref>
               <termref def="dt-xpath-static-typing-feature" role="xpath"
                  >Static Typing Feature</termref> is in effect and the <termref
                  def="dt-static-type"
                  >static type</termref> assigned to an expression other than <code>()</code> or <code>data(())</code> is <code>empty-sequence()</code>, a <termref
                  def="dt-static-error">static error</termref> is raised <errorref class="ST"
                  code="0005"
                  />. This catches cases in which a query refers to an element or attribute that is not present in the <termref
                  def="dt-issd"
               >in-scope schema definitions</termref>, possibly because of a spelling error.</p>
            <p>Independently of whether the <termref def="dt-static-typing-feature" role="xquery"
                  >Static Typing Feature</termref>
               <termref def="dt-xpath-static-typing-feature" role="xpath"
                  >Static Typing Feature</termref> is in effect, if an implementation can determine during the
<termref
                  def="dt-static-analysis">static
analysis phase</termref> that <phrase
                  role="xquery">a <nt def="QueryBody">QueryBody</nt>
               </phrase>
               <phrase role="xpath"
                  >an XPath expression</phrase>, if evaluated, would necessarily
raise a <termref
                  def="dt-dynamic-error"
                  >dynamic error</termref> or that an expression, if evaluated, would necessarily raise a <termref
                  def="dt-type-error"
                  >type error</termref>, the implementation may (but is not required to) report that
error during the <termref
                  def="dt-static-analysis">static
analysis phase</termref>.</p>

            <p>An implementation can raise a <termref def="dt-dynamic-error"
                  >dynamic error</termref> for <phrase role="xquery">a <nt def="QueryBody"
                     >QueryBody</nt>
               </phrase>
               <phrase role="xpath">an XPath expression</phrase> statically only if the <phrase
                  role="xquery">query</phrase>
               <phrase role="xpath"
               >expression</phrase> can never execute without raising that error, as in the following example:</p>

            <eg role="parse-test"><![CDATA[
error()
]]></eg>

            <p>The following example contains a type error, which can be reported statically even if the implementation can not prove that the expression will actually be evaluated.</p>

            <eg role="parse-test"><![CDATA[
if (empty($arg))
then
  "cat" * 2
else
  0
]]></eg>


            <p>
               <termdef id="dt-warning" term="warning">In addition to <termref def="dt-static-error"
                     >static errors</termref>, <termref def="dt-dynamic-error"
                     >dynamic errors</termref>, and <termref def="dt-type-error"
                     >type
errors</termref>, an &language;
implementation may raise <term>warnings</term>, either during the <termref
                     def="dt-static-analysis">static analysis
phase</termref> or the
<termref
                     def="dt-dynamic-evaluation"
                     >dynamic evaluation
phase</termref>. The circumstances in which warnings are raised, and
the ways in which warnings are handled, are <termref
                     def="dt-implementation-defined">implementation-defined</termref>.</termdef>
            </p>
            <p>In addition to the errors defined in this
specification, an implementation may raise a <termref
                  def="dt-dynamic-error"
                  >dynamic error</termref> for a reason beyond the scope of this specification. For
example, limitations may exist on the maximum
numbers or sizes of various objects. 
<phrase
                  id="id-error-limit-exceeded"
                     >An error must be raised if such a limitation is exceeded  <errorref class="DY"
                     code="0130"/>.</phrase>
            </p>
         </div3>
         <div3 id="id-identifying-errors">
            <head>Identifying and Reporting Errors</head>
            <p>The errors defined in this specification are identified by QNames that have the form <code
                  role="xpath">err:XPYYnnnn</code>
               <code role="xquery">err:XXYYnnnn</code>, where:</p>
            <ulist>

               <item>
                  <p>
                     <code>err</code> denotes the namespace for XPath and XQuery errors, <code>http://www.w3.org/2005/xqt-errors</code>. This binding of the namespace prefix <code>err</code> is used for convenience in this document, and is not normative.</p>
               </item>

               <item role="xpath">
                  <p>
                     <code>XP</code> identifies the error as an XPath error (some errors, originally defined by XQuery and later added to XPath, use the code <code>XQ</code> instead).</p>
               </item>

               <item role="xquery">
                  <p>
                     <code>XX</code> denotes the language in which the error is defined, using the following encoding:</p>

                  <ulist role="xquery">

                     <item>
                        <p>
                           <code>XP</code> denotes an error defined by XPath. Such an error may also occur XQuery since XQuery  includes XPath as a subset.</p>
                     </item>

                     <item>
                        <p>
                           <code>XQ</code> denotes an error defined by XQuery (or an error originally defined by XQuery and later added to XPath).</p>
                     </item>
                  </ulist>
               </item>

               <item>
                  <p>
                     <code>YY</code> denotes the error category, using the following encoding:</p>
                  <ulist>

                     <item>
                        <p>
                           <code>ST</code> denotes a static error.</p>
                     </item>

                     <item>
                        <p>
                           <code>DY</code> denotes a dynamic error.</p>
                     </item>

                     <item>
                        <p>
                           <code>TY</code> denotes a type error.</p>
                     </item>
                  </ulist>
               </item>

               <item>
                  <p>
                     <code>nnnn</code> is a unique numeric code.</p>
               </item>
            </ulist>
            <note>
               <p>The namespace URI for  XPath and XQuery errors is not expected to
change from one version of <phrase
                     role="xquery">XQuery</phrase>
                  <phrase role="xpath"
                  >XPath</phrase> to another. However, the contents of this
namespace may be extended to include additional error definitions.</p>
            </note>
            <p>The method by which an &language; processor reports error information to the external environment is <termref
                  def="dt-implementation-defined">implementation-defined</termref>.</p>
            <p>An error can be represented by a URI reference that is derived from the error QName as follows: an error with namespace URI <emph>
                  <code>NS</code>
               </emph> and local part <emph>
                  <code>LP</code>
               </emph> can be represented as the URI reference <emph>
                  <code>NS</code>
               </emph>
               <code>#</code>
               <emph>
                  <code>LP</code>
               </emph>. For example, an error whose QName is <code>err:XPST0017</code> could be represented as <code>http://www.w3.org/2005/xqt-errors#XPST0017</code>.</p>
            <note>
               <p>Along with a code identifying an error, implementations may wish to return additional information, such
as the location of the error or the processing phase in which it was detected. If an implementation chooses to do so, then the mechanism that
it uses to return this information is <termref
                     def="dt-implementation-defined">implementation-defined</termref>.</p>
            </note>
         </div3>

         <div3 id="id-handling-dynamic">
            <head>Handling Dynamic Errors</head>
            <p>Except as noted in this document, if any operand of an expression
raises a <termref
                  def="dt-dynamic-error"
                  >dynamic error</termref>, the expression also raises a <termref
                  def="dt-dynamic-error"
                  >dynamic error</termref>.
If an expression can validly return a value or raise a dynamic
error, the implementation may choose to return the value or raise
the dynamic error (see <specref
                  ref="id-errors-and-opt"
                  />).  For example, the logical expression
<code>expr1 and expr2</code> may return the value <code>false</code>
if either operand returns <code>false</code>,
or may raise a dynamic error if either operand raises a dynamic
error.</p>
            <p> If more than one operand of an expression raises
an error, the
implementation may choose which error is raised by the expression.
For example, in this expression:

</p>
            <eg role="parse-test"><![CDATA[($x div $y) + xs:decimal($z)]]></eg>
            <p>

both the sub-expressions <code role="parse-test">($x div $y)</code> and <code
                  role="parse-test"
                  >xs:decimal($z)</code> may
raise an error.  The
implementation may choose which error is raised by the "<code>+</code>"
expression.  Once one operand raises an error, the implementation is
not required, but is permitted, to evaluate any other operands.</p>

            <p>
               <termdef id="dt-error-value" term="error value"
                     >In addition to its identifying QName, a dynamic error may also carry a descriptive string and one or more additional values called <term>error values</term>.</termdef> An implementation may provide a mechanism whereby an application-defined error handler can process error values and produce diagnostic messages. 
  <phrase role="xquery">XQuery 3.1 provides standard error handling via <xspecref
                  spec="XQ31" ref="id-try-catch"
               />.</phrase>
  <phrase role="xpath">The host language may also provide error handling mechanisms.</phrase>
</p>

            <p>A dynamic error may be raised by a <termref def="dt-built-in-function"
                  >built-in
function</termref> or operator.  For example,
the <code>div</code> operator raises an error if its operands are <code>xs:decimal</code> values and its second operand
is equal to zero. Errors raised by built-in functions and operators are defined in <bibref
                  ref="xpath-functions-40"/>.</p>

            <p>A dynamic error can also be raised explicitly by calling the
<code>fn:error</code> function, which always raises a dynamic error and never
returns a value.  This function is defined in <xspecref
                  spec="FO31" ref="func-error"
                  />. For example, the following
function call raises a dynamic
error, providing a QName that identifies the error, a descriptive string, and a diagnostic value (assuming that the prefix <code>app</code> is bound to a namespace containing application-defined error codes):</p>

            <eg role="parse-test"
               ><![CDATA[fn:error(xs:QName("app:err057"), "Unexpected value", fn:string($v))]]></eg>

         </div3>
         <div3 id="id-errors-and-opt">
            <head>Errors and
      Optimization</head>
            <p>Because different implementations may
      choose to evaluate or optimize an expression in different ways,
      certain aspects of raising <termref
                  def="dt-dynamic-error">dynamic errors</termref> are <termref
                  def="dt-implementation-dependent"
               >implementation-dependent</termref>, as described in this section.</p>
            <p>An implementation is always free to evaluate the operands of an operator in any order.</p>
            <p>In some cases,  a processor can determine the result of an expression without accessing all the data that would be implied by the formal expression semantics. For example, the formal description of <termref
                  def="dt-filter-expression">filter expressions</termref> suggests that <code
                  role="parse-test"
                  >$s[1]</code> should be evaluated by examining all the items in sequence <code>$s</code>, and selecting all those that satisfy the predicate <code
                  role="parse-test"
                  >position()=1</code>. In practice, many implementations will recognize that they can evaluate this expression by taking the first item in the sequence and then exiting. If <code>$s</code> is defined by an expression such as <code
                  role="parse-test"
                  >//book[author eq 'Berners-Lee']</code>, then this strategy may avoid a complete scan of a large document and may therefore greatly improve performance. However, a consequence of this strategy is that a dynamic error or type error that would be detected if the expression semantics were followed literally might not be detected at all if the evaluation exits early. In this example, such an error might occur if there is a <code>book</code> element in the input data with more than one <code>author</code> subelement.</p>
            <p>The extent to which a processor may optimize its access to data, at the cost of not raising errors, is defined by the following rules.</p>
            <p>Consider an expression <emph>Q</emph> that has an operand (sub-expression) <emph>E</emph>. In general the value of <emph>E</emph> is a sequence. At an intermediate stage during evaluation of the sequence, some of its items will be known and others will be unknown. If, at such an intermediate stage of evaluation, a processor is able to establish that there are only two possible outcomes of evaluating <emph>Q</emph>, namely the value <emph>V</emph> or an error, then the processor may deliver the result <emph>V</emph> without evaluating further items in the operand <emph>E</emph>. For this purpose, two values are considered to represent the same outcome if their items are pairwise the same, where nodes are the same if they have the same identity, and values are the same if they are equal and have exactly the same type.</p>
            <p>There is an exception to this rule: If a processor evaluates an operand <emph>E</emph> (wholly or in part), then it  is required to establish that the actual value of the operand <emph>E</emph> does not violate any constraints on its cardinality. For example, the expression <code
                  role="parse-test"
                  >$e eq 0</code> results in a type error if the value of <code>$e</code> contains two or more items. A processor is not allowed to decide, after evaluating the first item in the value of <code>$e</code> and finding it equal to zero, that the only possible outcomes are the value <code>true</code> or a type error caused by the cardinality violation. It must establish that the value of <code>$e</code> contains no more than one item.</p>
            <p>These rules apply to all the operands of an expression considered in combination: thus if an expression has two operands <emph>E1</emph> and <emph>E2</emph>, it may be evaluated using any samples of the respective sequences that satisfy the above rules.</p>
            <p>The rules cascade: if <emph>A</emph> is an operand of <emph>B</emph> and <emph>B</emph> is an operand of <emph>C</emph>, then the processor needs to evaluate only a sufficient sample of <emph>B</emph> to determine the value of <emph>C</emph>, and needs to evaluate only a sufficient sample of <emph>A</emph> to determine this sample of <emph>B</emph>.</p>
            <p>The effect of these rules is that the processor is free to stop examining further items in a sequence as soon as it can establish that further items would not affect the result except possibly by causing an error. For example, the processor may return <code>true</code> as the result of the expression <code
                  role="parse-test"
               >S1 = S2</code> as soon as it finds a pair of equal values from the two sequences.</p>
            <p>Another consequence of these rules is that where none of the items in a sequence contributes to the result of an expression, the processor is not obliged to evaluate any part of the sequence. Again, however, the processor cannot dispense with a required cardinality check: if an empty sequence is not permitted in the relevant context, then the processor must ensure that the operand is not an empty sequence.</p>
            <p>Examples:</p>


            <ulist>

               <item>
                  <p>If an implementation can find (for example, by using an index) that at
least one item returned by <code>$expr1</code> in the following example has the value <code>47</code>, it is allowed to
return <code>true</code> as the result of the <code>some</code> expression, without searching for
another item returned by <code>$expr1</code> that would raise an error if it were evaluated.
</p>
                  <eg role="parse-test"><![CDATA[some $x in $expr1 satisfies $x = 47]]></eg>
               </item>

               <item>
                  <p>In the following example, if an implementation can find (for example, by using an index) the
<code>product</code> element-nodes that have an <code>id</code> child with the value <code>47</code>, it is allowed to return these nodes as the
result of the <termref
                        def="dt-path-expression"
                        >path expression</termref>, without searching for another <code>product</code> node that
would raise an error because it has an <code>id</code> child whose value is not an integer.</p>
                  <eg role="parse-test"><![CDATA[//product[id = 47]]]></eg>
               </item>
            </ulist>

            <!-- <change diff="chg" at="XQ.E4 and XP.E4"> -->
            <p>For a variety of reasons, including optimization, implementations
          may rewrite expressions into a different
          form. There are a number of rules that limit the extent of this freedom:
          </p>
            <ulist>
               <item>
                  <p>
                Other than the raising or not raising of errors, the result
                of evaluating a rewritten expression must
                conform to the semantics
                defined in this specification for the original expression.
             </p>
                  <note>
                     <p>
                This allows an implementation to return a result in cases where the
                original expression would have raised an error, or to raise an error in cases
                where the original expression would have returned a result. The main cases
                where this is likely to arise in practice are (a) where a rewrite changes the
                order of evaluation, such that a subexpression causing an error is evaluated
                when the expression is written one way and is not evaluated when the expression
                is written a different way, and (b) where intermediate results of the
                evaluation cause overflow or other out-of-range conditions.
             </p>
                  </note>
                  <note>
                     <p>
                This rule does not mean that the result of the expression will always
                be the same in non-error cases as if it had not been rewritten, because there
                are many cases where the result of an expression is to some degree
                <termref
                           def="dt-implementation-dependent"
                           >implementation-dependent</termref>
                or <termref
                           def="dt-implementation-defined"
                        >implementation-defined</termref>.
             </p>
                  </note>
               </item>
               <item>
                  <p>
                     <phrase role="xpath">Conditional</phrase>
                     <phrase role="xquery"
                        >Conditional, switch, and typeswitch</phrase> expressions
                must not raise a dynamic error in
                respect of subexpressions occurring in a branch that is not selected,
                and must not
                return the value delivered by a branch unless that branch is selected.
                Thus, the following example must not raise a
                dynamic error if the document <code>abc.xml</code> does not exist:
             </p>
                  <eg xml:space="preserve" role="parse-test"><![CDATA[if (doc-available('abc.xml')) then doc('abc.xml') else ()]]></eg>
                  <p>Of course, the condition must be evaluated in order to determine which branch is selected, and the query must not be rewritten in a way that would bypass evaluating the condition.</p>
               </item>
               <item>
                  <p>
                As stated earlier, an expression
                must not be rewritten to dispense with a
                required cardinality check: for example, <code
                        role="parse-test"
                     >string-length(//title)</code>
                must raise an
                error if the document contains more than one title element.
             </p>
               </item>
               <item>
                  <p>
                Expressions must not be rewritten in such a way
                as to create or remove static errors.

                The static errors in this specification are defined
                for the original expression, and must be preserved if
                the expression is rewritten.</p>
               </item>
            </ulist>
            <p>
          Expression rewrite is illustrated by the following examples.
          </p>
            <!-- </change> -->

            <ulist>

               <item>
                  <p>Consider the expression <code role="parse-test"
                        >//part[color eq "Red"]</code>. An implementation might
choose to rewrite this expression as <code
                        role="parse-test"
                        >//part[color = "Red"][color eq
"Red"]</code>. The implementation might then process the expression as follows:
First process the "<code>=</code>" predicate by probing an index on parts by color to
quickly find all the parts that have a Red color; then process the "<code>eq</code>"
predicate by checking each of these parts to make sure it has only a
single color. The result would be as follows:

<ulist> <item>
                           <p>Parts that have exactly one color that is Red are returned.</p>
                        </item> <item>
                           <p>If some part has color Red together with some other color, an error is
raised.</p>
                        </item> <item>
                           <p>The existence of some part that has no color Red but has multiple non-Red
colors does not trigger an error.</p>
                        </item>
                     </ulist>
                  </p>
               </item>

               <item>
                  <p>The expression in the following example cannot raise a casting error if it is evaluated
exactly as written (i.e., left to right). Since neither predicate depends on the context position, an implementation might choose to reorder the predicates to achieve better
performance (for example, by taking advantage of an index). This
reordering could cause the expression to raise an
error.</p>
                  <eg role="parse-test"
                     ><![CDATA[$N[@x castable as xs:date][xs:date(@x) gt xs:date("2000-01-01")]]]></eg>

                  <p at="XQ.E4 and XP.E4"
                        >To avoid unexpected errors caused by expression rewrite,
tests that are designed to prevent dynamic errors should be expressed
using conditional <phrase
                        role="xquery">or <code>typeswitch</code>
                     </phrase> expressions. For example, the above expression can be written as
follows:</p>


                  <eg role="parse-test"><![CDATA[$N[if (@x castable as xs:date)
   then xs:date(@x) gt xs:date("2000-01-01")
   else false()]]]></eg>
               </item>
            </ulist>

         </div3>
      </div2>
      <div2 id="id-important-concepts">
         <head>Concepts</head>

         <p>This section explains some concepts that are important to the processing of &language; expressions.</p>

         <div3 id="id-document-order">
            <head>Document Order</head>

            <p>An ordering called <term>document order</term> is defined among all the nodes accessible during processing of a given <phrase
                  role="xquery">query</phrase>
               <phrase role="xpath"
                  >expression</phrase>, which may consist of one or more <term>trees</term> (documents or fragments). 

Document order is defined in <xspecref
                  spec="DM31" ref="document-order"
                  />, and its definition is repeated here for convenience. 

Document order is a total ordering, although the relative order of some nodes is <termref
                  def="dt-implementation-dependent">implementation-dependent</termref>.  

<termdef
                  term="document order" id="dt-document-order"
                     >Informally, <term>document order</term> is the order in which nodes appear in the XML serialization of a document.</termdef>
               <termdef term="stable" id="stable"
                     >Document order is <term>stable</term>, which means that the relative order of two nodes will not change during the processing of a given <phrase
                     role="xquery">query</phrase>
                  <phrase role="xpath">expression</phrase>, even if this order is <termref
                     def="dt-implementation-dependent">implementation-dependent</termref>.</termdef>
               <termdef term="reverse document order" id="dt-reverse-document-order"
                     >The node ordering that is the reverse of document order is called <term>reverse document order</term>.</termdef>
            </p>

            <p>Within a tree, document order satisfies the following constraints:</p>

            <olist>


               <item>
                  <p>The root node is the first node.</p>
               </item>



               <item>
                  <p>Every node occurs before all of its children and descendants.</p>
               </item>



               <item role="xpath">
                  <p>Namespace nodes immediately follow the element node with
which they are associated. The relative order of namespace nodes is
stable but <termref
                        def="dt-implementation-dependent">implementation-dependent</termref>.</p>
               </item>



               <item>
                  <p>Attribute nodes immediately follow the <phrase role="xpath"
                        >namespace nodes of the
</phrase> element node with which they are associated. The relative order of
attribute nodes is stable but <termref
                        def="dt-implementation-dependent">implementation-dependent</termref>.</p>
               </item>



               <item>
                  <p>The relative order of siblings is the order in which they occur
in the <code>children</code> property of their parent node.</p>
               </item>

               <item>
                  <p>Children and descendants occur before following siblings.</p>
               </item>
            </olist>

            <p>The relative order of nodes in distinct trees is stable but
<termref
                  def="dt-implementation-dependent"
               >implementation-dependent</termref>,
subject to the following constraint: If any node in a given tree T1 is before
any node in a different tree T2, then all nodes in tree T1 are before all nodes in
tree T2.</p>

         </div3>

         <div3 id="id-atomization">
            <head>Atomization</head>
            <p>The semantics of some
&language; operators depend on a process called <termref
                  def="dt-atomization"
                  >atomization</termref>. Atomization is
applied to a value when the value is used in a context in which a
sequence of atomic values is required. The result of atomization is
either a sequence of atomic values or a <termref
                  def="dt-type-error">type error</termref>
               <xerrorref spec="FO31" class="TY" code="0012"/>.  <termdef id="dt-atomization"
                  term="atomization">
                  <term>Atomization</term> of a sequence
is defined as the result of invoking the <code>fn:data</code> function, as defined in <xspecref
                     spec="FO31" ref="func-data"/>.</termdef>
            </p>
            <p> The semantics of
<code>fn:data</code> are repeated here for convenience. The result of
<code>fn:data</code> is the sequence of atomic values produced by
applying the following rules to each item in the input
sequence:</p>
            <ulist>

               <item>
                  <p>If the item is an atomic value, it is
returned.</p>
               </item>

               <item>
                  <p>If the item is a node,
its <termref def="dt-typed-value"
                        >typed value</termref> is returned (a <termref def="dt-type-error"
                        >type error</termref>
                     <xerrorref spec="FO31" class="TY" code="0012"
                     /> is raised if the node has no typed value.)</p>
               </item>

               <item>
                  <p>If the item is a <xtermref spec="DM31" ref="dt-function-item"
                        >function</xtermref> (other than an array) or map a <termref
                        def="dt-type-error">type error</termref>
                     <xerrorref spec="FO31" class="TY" code="0013"/> is raised.</p>
               </item>

               <item>
                  <p>If the item is an array <code>$a</code>, atomization is defined as <code>$a?* ! fn:data(.)</code>, which is equivalent to atomizing the members of the array.</p>
                  <note>
                     <p>This definition recursively atomizes members that are arrays. Hence, the result of atomizing the array <code>[ [1, 2, 3], [4, 5, 6] ]</code> is the sequence <code>(1, 2, 3, 4, 5, 6)</code>.</p>
                  </note>
               </item>

            </ulist>
            <p>Atomization is  used in
processing the following types of expressions: </p>
            <ulist>

               <item>
                  <p>Arithmetic expressions</p>
               </item>

               <item>
                  <p>Comparison expressions</p>
               </item>

               <item>
                  <p>Function calls and returns</p>
               </item>

               <item>
                  <p>Cast expressions</p>
               </item>

               <item role="xquery">
                  <p>Constructor expressions for various kinds of nodes</p>
               </item>

               <item role="xquery">
                  <p>
                     <code>order by</code> clauses in FLWOR expressions</p>
               </item>

               <item role="xquery">
                  <p>
                     <code>group by</code> clauses in FLWOR expressions</p>
               </item>

               <item role="xquery">
                  <p>Switch expressions</p>
               </item>

            </ulist>
         </div3>


         <div3 id="id-ebv">
            <head>Effective Boolean Value</head>
            <p>Under certain circumstances (listed below), it is necessary to find
the <termref
                  def="dt-ebv">effective boolean value</termref> of a
value. <termdef id="dt-ebv"
                  term="effective boolean value"
                     >The
<term>effective boolean value</term> of a value is defined as the result
of applying the <code>fn:boolean</code> function to the value, as
defined in <xspecref
                     spec="FO31" ref="func-boolean"/>.</termdef>
            </p>

            <p>The dynamic semantics of <code>fn:boolean</code> are repeated here for convenience:</p>

            <olist>

               <item>
                  <p>If its operand is an empty sequence, <code>fn:boolean</code> returns <code>false</code>.</p>
               </item>

               <item>
                  <p>If its operand is a sequence whose first item is a node, <code>fn:boolean</code> returns <code>true</code>.</p>
               </item>

               <item>
                  <p>If its operand is a <termref def="dt-singleton"
                        >singleton</termref> value of type <code>xs:boolean</code> or derived from <code>xs:boolean</code>, <code>fn:boolean</code> returns the value of its operand unchanged.</p>
               </item>

               <item>
                  <p>If its operand is a <termref def="dt-singleton"
                        >singleton</termref> value of type <code>xs:string</code>, <code>xs:anyURI</code>, <code>xs:untypedAtomic</code>, or a type derived from one of these, <code>fn:boolean</code> returns <code>false</code> if the operand value has zero length; otherwise it returns <code>true</code>.</p>
               </item>

               <item>
                  <p>If its operand is a <termref def="dt-singleton"
                        >singleton</termref> value of any <termref def="dt-numeric"
                        >numeric</termref> type or derived from a numeric type, <code>fn:boolean</code> returns <code>false</code> if the operand value is <code>NaN</code> or is numerically equal to zero; otherwise it returns <code>true</code>.</p>
               </item>

               <item>
                  <p>In all other cases, <code>fn:boolean</code> raises a type error <xerrorref
                        spec="FO31" class="RG" code="0006"/>.</p>
                  <note>
                     <p>For instance, <code>fn:boolean</code> raises a type error if the operand is a function, a map, or an array.</p>
                  </note>
               </item>
            </olist>

            <note role="xquery">
               <p>The <termref def="dt-ebv"
                     >effective boolean value</termref> of a sequence that contains at least one node and at least one atomic value is <termref
                     def="dt-implementation-dependent"
                     >implementation-dependent</termref> in regions of a query where <termref
                     def="dt-ordering-mode">ordering mode</termref> is <code>unordered</code>.</p>
            </note>
            <p>The <termref def="dt-ebv"
               >effective boolean value</termref> of a sequence is computed implicitly during  processing of the following types of expressions: </p>
            <ulist>

               <item>
                  <p>Logical expressions (<code>and</code>, <code>or</code>)</p>
               </item>

               <item>
                  <p>The <code>fn:not</code> function</p>
               </item>

               <item role="xquery">
                  <p>The <code>where</code> clause of a FLWOR expression</p>
               </item>

               <item>
                  <p>Certain types of <termref def="dt-predicate"
                        >predicates</termref>, such as <code>a[b]</code>
                  </p>
               </item>

               <item>
                  <p>Conditional expressions (<code>if</code>)</p>
               </item>

               <item>
                  <p>Quantified expressions (<code>some</code>, <code>every</code>)</p>
               </item>

               <item role="xpath">
                  <p>General comparisons, in <termref def="dt-xpath-compat-mode"
                        >XPath 1.0
		compatibility mode</termref>.</p>
               </item>

               <item role="xquery">
                  <p>
                     <nt def="WindowStartCondition">WindowStartCondition</nt> and <nt
                        def="WindowEndCondition"
                     >WindowEndCondition</nt> in <code>window</code> clauses.</p>
               </item>

            </ulist>

            <note>
               <p>The definition of <termref def="dt-ebv"
                     >effective boolean
  value</termref> is <emph>not</emph> used when casting a value to the
  type <code>xs:boolean</code>, for example in a <code>cast</code>
  expression or when passing a value to a function whose expected
  parameter is of type <code>xs:boolean</code>.</p>
            </note>

         </div3>

         <div3 id="id-input-sources">
            <head>Input Sources</head>

            <p>&language; has a set of functions that provide access to XML documents (<code>fn:doc</code>, <code>fn:doc-available</code>), collections (<code>fn:collection</code>, <code>fn:uri-collection</code>), text files (<code>fn:unparsed-text</code>, <code>fn:unparsed-text-lines</code>, <code>fn:unparsed-text-available</code>), and environment variables (<code>fn:environment-variable</code>, <code>fn:available-environment-variables</code>).  These functions are defined in <xspecref
                  spec="FO31" ref="fns-on-docs"/>.</p>



            <p>An expression can access input data either by calling one
    of these input functions or by referencing some part of the
    <termref
                  def="dt-dynamic-context"
                  >dynamic context</termref> that is initialized by the external
    environment, such as a <termref
                  def="dt-variable-values">variable</termref> or
    <termref def="dt-context-item"
                  >context item</termref>.</p>








         </div3>

         <div3 id="id-uri-literals">
            <head>URI Literals</head>

            <p>&language; requires a statically known, valid URI in <phrase role="xquery">a <nt
                     def="URILiteral">URILiteral</nt> or
      </phrase>a <nt def="BracedURILiteral"
                  >BracedURILiteral</nt>. 

      An implementation may raise a <termref
                  def="dt-static-error">static error</termref>
               <errorref class="ST" code="0046"/> if the value of <phrase role="xquery"
                  >a
      URI Literal or</phrase> a Braced URI Literal is of nonzero length
      and is neither an
      absolute URI nor a relative URI.</p>

            <p role="xquery">As in a string literal, any <termref
                  def="dt-predefined-entity-reference"
                  >predefined entity
      reference</termref> (such as <code>&amp;amp;</code>), <termref
                  def="dt-character-reference"
                  >character reference</termref> (such
      as <code>&amp;#x2022;</code>), or <nt
                  def="EscapeQuot">EscapeQuot</nt> or <nt def="EscapeApos"
                  >EscapeApos</nt> (for example, <code>""</code>)
      is replaced by its appropriate expansion. Certain characters,
      notably the ampersand, can only be represented using a <termref
                  def="dt-predefined-entity-reference"
                  >predefined entity
      reference</termref> or a <termref
                  def="dt-character-reference">character reference</termref>.</p>

            <note>
               <p>The <code>xs:anyURI</code>
      type is designed to anticipate the introduction of
      Internationalized Resource Identifiers (IRI's) as defined in
      <bibref
                     ref="RFC3987"/>.</p>
            </note>

            <p>Whitespace is normalized using the whitespace normalization rules
      of <code>fn:normalize-space</code>. If the result of whitespace
      normalization contains only whitespace, the corresponding URI
      consists of the empty string.  <phrase
                  role="xquery"
                     >Whitespace
      normalization is done after the expansion of <termref
                     def="dt-character-reference"
                     >character references</termref>, so
      writing a newline (for example) as <code>&amp;#xA;</code> does
      not prevent its being normalized to a space
      character.</phrase>
            </p>


            <p>A Braced URI Literal or URI Literal is not
      subjected to percent-encoding
      or decoding as defined in <bibref
                  ref="RFC3986"/>.</p>

         </div3>

         <div3 id="id-resolve-relative-uri">
            <head>Resolving a Relative URI Reference</head>

            <p>
               <termdef id="dt-resolve-relative-uri" term="resolve"
                     >To
      <term>resolve a relative URI</term>
                  <code>$rel</code> against a
      base URI <code>$base</code> is to expand it to an absolute URI,
      as if by calling the function <code>fn:resolve-uri($rel,
      $base)</code>.</termdef> During static analysis, the base URI is
      the Static Base URI. During dynamic evaluation, the base URI
      used to resolve a relative URI reference depends on the semantics of the
      expression.</p>

            <p>Any process that attempts to <termref def="dt-resolve-relative-uri"
                  >resolve URI</termref> against a
      base URI, or to dereference the URI, may apply percent-encoding
      or decoding as defined in the relevant RFCs.</p>

         </div3>

      </div2>
   </div1>
   <div1 id="id-types">
         <head>Types</head>
         <p>The type system of &language; is based on
		<bibref ref="XMLSchema10"/> or <bibref
               ref="XMLSchema11"/>.
                </p>


         <p>
            <termdef id="dt-sequence-type" term="sequence type"
                  >A <term>sequence type</term> is a type that can be expressed using the <nt
                  def="SequenceType"
                  >SequenceType</nt>
syntax. Sequence types are used whenever it is necessary to refer to a type in an &language; expression. The term <term>sequence type</term> suggests that this syntax is used to describe the type of an &language; value, which is always a sequence.</termdef>
         </p>
         <p>
            <termdef id="dt-schema-type" term="schema type"
                  >A <term>schema type</term> is a type that is (or could be) defined using the facilities of <bibref
                  ref="XMLSchema10"/> or <bibref ref="XMLSchema11"
               /> (including the built-in types).</termdef> A schema type  can be used as a type annotation on an
element or attribute node (unless it is a non-instantiable type such as <code>xs:NOTATION</code> or <code>xs:anyAtomicType</code>, in which case its derived
types can be so used). Every schema type is either a <term>complex type</term> or a
<term>simple type</term>; simple types are further subdivided into <term>list types</term>, <term>union
types</term>, and <term>atomic types</term> (see <bibref
               ref="XMLSchema10"/> or <bibref ref="XMLSchema11"
            /> for definitions and explanations of these terms.)</p>

         <p>
            <termdef id="dt-generalized-atomic-type" term="generalized atomic type"
                  >A <term>generalized atomic type</term> is a <phrase diff="add" at="A">schema-defined</phrase> 
               type which is either (a) an atomic type or (b) a <termref def="dt-pure-union-type">pure union type</termref>
            </termdef>.</p>

         <p>
            <termdef id="dt-pure-union-type" term="pure union type"
                  >A <term>pure union type</term> is an XML Schema union type that satisfies the following constraints:
(1) <code>{variety}</code> is <code>union</code>, (2) the <code>{facets}</code> property is empty, (3) no type in the transitive membership of the union type has <code>{variety}</code>
               <code>list</code>, and (4) no type in the transitive membership of the union type is a type with <code>{variety}</code>
               <code>union</code> having a non-empty <code>{facets}</code> property</termdef>.</p>

         <note>
            <p>The definition of <termref def="dt-pure-union-type"
               >pure union type</termref>
excludes union types derived by non-trivial restriction from other
union types, as well as union types that include list types in their
membership. Pure union types have the property that every
instance of an atomic type defined as one of the member types of the
union is also a valid instance of the union type.</p>
         </note>

         <note>
            <p>The current (second) edition of XML Schema 1.0 contains an
error in respect of the substitutability of a union type by one of its
members: it fails to recognize that this is unsafe if the union is
derived by restriction from another union.</p>

            <p>This problem is fixed in XSD 1.1, but the effect of the resolution
is that an atomic value labeled with an atomic type cannot be treated
as being substitutable for a union type without explicit validation.
This specification therefore allows union types to be used as item
types only if they are defined directly as the union of a number of
atomic types.</p>
         </note>

         <p>
            <termref def="dt-generalized-atomic-type"
               >Generalized atomic types</termref>
represent the intersection between the categories of <termref
               def="dt-sequence-type">sequence type</termref> and <termref def="dt-schema-type"
               >schema type</termref>. A generalized atomic type, such as <code>xs:integer</code> or <code>my:hatsize</code>, is both a <termref
               def="dt-sequence-type">sequence type</termref> and a
<termref def="dt-schema-type"
               >schema type</termref>.</p>
         


     <div2 id="id-predefined-types">
            <head>Predefined Schema Types</head>


            <p role="xpath">The <termref def="dt-is-types"
                  >in-scope schema types</termref>
                 in the <termref
                  def="dt-static-context"
                  >static
                 context</termref> are initialized with a set of
                 predefined schema types that is determined by the host
                 language. This set may include some or all of the
                 schema types in the
                 namespace
                 <code>http://www.w3.org/2001/XMLSchema</code>,
                 represented in this document by the namespace prefix
                 <code>xs</code>. The schema types in this namespace are defined in <bibref
                  ref="XMLSchema10"/> or <bibref ref="XMLSchema11"
                  />
                 and augmented by additional types defined in <bibref
                  ref="xpath-datamodel-31"
                  />. An implementation
                 that has based its type system on <bibref
                  ref="XMLSchema10"
                  /> is not required to support the <code>xs:dateTimeStamp</code> or <code>xs:error</code> types.</p>

            <p>The schema types defined in  <xspecref spec="DM31" ref="types-predefined"
               /> are summarized below.</p>


            <p role="xquery">The <termref def="dt-is-types"
                  >in-scope schema types</termref> in the <termref def="dt-static-context"
                  >static context</termref>
                   are initialized with certain predefined schema types,
                   including the built-in schema types in the namespace
                   <code>http://www.w3.org/2001/XMLSchema</code>,
                   which has the predefined namespace prefix
                   <code>xs</code>.  The schema types in this namespace are defined in <bibref
                  ref="XMLSchema10"/> or  <bibref ref="XMLSchema11"
                  />
                 and augmented by additional types defined in <bibref
                  ref="xpath-datamodel-31"
                  />.  Element and attribute
                   declarations in the <code>xs</code> namespace are
                   not implicitly included in the static context. The schema types defined in  <bibref
                  ref="xpath-datamodel-31"/> are summarized below.</p>

            <olist>

               <item>
                  <p>
                     <termdef term="xs:untyped" id="dt-untyped">
                        <code>xs:untyped</code> is  used as the <termref def="dt-type-annotation"
                           >type annotation</termref> of an element node that has not been validated, or has been validated in <code>skip</code> mode.</termdef> No predefined schema types are derived from <code>xs:untyped</code>.</p>
               </item>

               <item>
                  <p>
                     <termdef id="dt-untypedAtomic" term="xs:untypedAtomic">
                        <code>xs:untypedAtomic</code>
is an atomic type that is used to denote untyped atomic data, such as text that has not been assigned a more specific type.</termdef> An attribute that has been validated in <code>skip</code> mode is represented in the <termref
                        def="dt-datamodel"
                        >data model</termref> by an attribute node with the <termref
                        def="dt-type-annotation">type annotation</termref>
                     <code>xs:untypedAtomic</code>. No predefined schema types are derived from <code>xs:untypedAtomic</code>.</p>
               </item>

               <item>
                  <p>
                     <termdef term="xs:dayTimeDuration" id="dt-dayTimeDuration">
                        <code>xs:dayTimeDuration</code> is derived by restriction from <code>xs:duration</code>. The  lexical representation of <code>xs:dayTimeDuration</code>
is restricted to contain only day, hour, minute, and second
components.</termdef>
                  </p>
               </item>

               <item>
                  <p>
                     <termdef term="xs:yearMonthDuration" id="dt-yearMonthDuration">
                        <code>xs:yearMonthDuration</code> is derived by restriction from <code>xs:duration</code>. The lexical representation of <code>xs:yearMonthDuration</code> is
restricted to contain only year and month
components.</termdef>
                  </p>
               </item>

               <item>
                  <p>
                     <termdef term="xs:anyAtomicType" id="dt-anyAtomicType">
                        <code>xs:anyAtomicType</code> is an atomic type that includes all atomic values (and no values that
are not atomic). Its base type is
<code>xs:anySimpleType</code> from which all simple types, including atomic,
list, and union types, are derived. All primitive atomic types, such as
<code>xs:decimal</code> and <code>xs:string</code>, have <code>xs:anyAtomicType</code> as their base type.</termdef>
                  </p>
                  <note>
                     <p>
                        <code>xs:anyAtomicType</code>  will not appear as the type of an actual value in an <termref
                           def="dt-data-model-instance">XDM instance</termref>.</p>
                  </note>
               </item>

               <item>
                  <p>
                     <termdef term="xs:error" id="dt-xs-error">
                        <code>xs:error</code> is a simple type with no value space.  It is defined in <xspecref
                           spec="XS11-1" ref="xsd-error"/> and  can be used in the <specref
                           ref="id-sequencetype-syntax"/> to raise errors.</termdef>
                  </p>
               </item>
            </olist>

            <p>The relationships among the schema types in the <code>xs</code> namespace are illustrated in Figure 2. A more complete description of the &language; type hierarchy can be found in 
<xspecref
                  spec="FO31" ref="datatypes"/>.</p>
            <graphic source="types.jpg" alt="Type Hierarchy Diagram"/>
            <p>Figure 2: Hierarchy of Schema Types used in &language;.</p>
         </div2>



         <div2 id="id-namespace-sensitive">
            <head>Namespace-sensitive Types</head>

            <p>
               <termdef term="namespace-sensitive" id="dt-namespace-sensitive"
                     >The <term>namespace-sensitive</term>
  types are <code>xs:QName</code>, <code>xs:NOTATION</code>, types
  derived by restriction from <code>xs:QName</code> or
  <code>xs:NOTATION</code>, list types that have a namespace-sensitive
  item type, and union types with a namespace-sensitive type in their
  transitive membership.</termdef>
            </p>


            <p>It is not possible to preserve the type of a <termref def="dt-namespace-sensitive"
                  >namespace-sensitive</termref> value without also preserving the namespace binding that defines the meaning of each namespace prefix used in the value. Therefore, &language; defines some error conditions that occur only with <termref
                  def="dt-namespace-sensitive"
                  >namespace-sensitive</termref> values. For instance, casting to a <termref
                  def="dt-namespace-sensitive"
                  >namespace-sensitive</termref> type raises 
 a <termref def="dt-type-error"
                  >type error</termref>
               <xerrorref spec="FO31" class="NS" code="0004"
               /> if the namespace bindings for the result cannot be determined. </p>
         </div2>

         <div2 id="id-typed-value">
            <head>Typed Value and String Value</head>

            <p>Every node has a <term>typed value</term> and a <term>string value</term>, except for nodes whose value is <xtermref
                  spec="DM31" ref="dt-absent"/>.

<termdef term="typed value" id="dt-typed-value"
                     >The <term>typed
value</term> of a node is a sequence of atomic values and can be
extracted by applying the <xspecref
                     spec="FO31" ref="func-data"/> function to the
node.</termdef>
               <termdef id="dt-string-value" term="string value"
                     >The
<term>string value</term> of a node is a string and can be extracted
by applying the <xspecref
                     spec="FO31" ref="func-string"/>
function to the node.</termdef>
            </p>


            <p>An implementation may store both the <termref def="dt-typed-value"
                  >typed value</termref> and the <termref def="dt-string-value"
                  >string value</termref> of a node, or it may store only one of these and derive the other as needed. The string value of a node must be a valid lexical representation of the typed value of the node, but the node is not required to preserve the string representation from the original source document. For example, if the typed value of a node is the <code>xs:integer</code> value <code>30</code>, its string value might be "<code>30</code>" or "<code>0030</code>".</p>
            <p role="xpath">The <termref def="dt-typed-value">typed value</termref>, <termref
                  def="dt-string-value">string value</termref>, and <termref
                  def="dt-type-annotation"
                  >type annotation</termref> of a node are closely related.  If the node was created by mapping from an Infoset or PSVI, the relationships among these properties are defined by rules in <xspecref
                  spec="DM31" ref="types"/>.</p>
            <p role="xquery">The <termref def="dt-typed-value">typed value</termref>, <termref
                  def="dt-string-value">string value</termref>, and <termref
                  def="dt-type-annotation"
               >type annotation</termref> of a node are closely related, and are defined by rules found in the following locations:</p>

            <ulist role="xquery">

               <item>
                  <p>If the node was created by mapping from an Infoset or PSVI, see rules in <xspecref
                        spec="DM31" ref="types"/>.</p>
               </item>

               <item>
                  <p>If the node was created by an XQuery node constructor, see rules in <specref
                        ref="id-element-constructor"/>, <specref ref="id-computedElements"
                        />, or <specref ref="id-computedAttributes"/>.</p>
               </item>

               <item>
                  <p>If the node was created by a <code>validate</code> expression, see rules in <specref
                        ref="id-validate"/>.</p>
               </item>
            </ulist>
            <p>As a convenience to the reader, the relationship between <termref
                  def="dt-typed-value">typed value</termref> and
 <termref def="dt-string-value"
                  >string value</termref> for various kinds of nodes is summarized and illustrated
 by examples below.</p>

            <olist>

               <item>
                  <p>For text and document nodes, the typed value of the node is the same as its
string value, as an instance of  the type <code>xs:untypedAtomic</code>. The
string value of a document node is formed by concatenating the string
values of all its descendant text nodes, in <termref
                        def="dt-document-order">document
order</termref>.</p>
               </item>

               <item>
                  <p>The typed value of a comment<phrase role="xpath"
                        >, namespace,</phrase> or processing instruction node is the same as its string value. It is an instance of the type <code>xs:string</code>.</p>
               </item>

               <item>
                  <p>The typed value of an attribute node with
the <termref def="dt-type-annotation"
                        >type annotation</termref>
                     <code>xs:anySimpleType</code> or <code>xs:untypedAtomic</code> is the same as its
string value, as an instance of <code>xs:untypedAtomic</code>. The
typed value of an attribute node with any other type annotation is
derived from its string value and type annotation using the lexical-to-value-space mapping defined in <bibref
                        ref="XMLSchema10"/> or <bibref ref="XMLSchema11"
                     /> Part 2 for
the relevant type.</p>
                  <p>Example: A1 is an attribute
having string value <code>"3.14E-2"</code> and type annotation
<code>xs:double</code>.  The typed value of A1 is the
<code>xs:double</code> value whose lexical representation is
<code>3.14E-2</code>. </p>
                  <p>Example: A2 is an attribute with type
annotation <code>xs:IDREFS</code>, which is a list datatype whose item type is the atomic datatype <code>xs:IDREF</code>. Its string value is
"<code>bar baz faz</code>". The typed value of A2 is a sequence of
three atomic values ("<code>bar</code>", "<code>baz</code>",
"<code>faz</code>"), each of type <code>xs:IDREF</code>. The typed
value of a node is never treated as an instance of a named list
type. Instead, if the type annotation of a node is a list type (such
as <code>xs:IDREFS</code>), its typed value is treated as a sequence
of the <termref
                        def="dt-generalized-atomic-type"
                        >generalized atomic type</termref> from which it is derived (such as
<code>xs:IDREF</code>).</p>
               </item>

               <item>
                  <p>For an element node, the
relationship between typed value and string value depends on the
node's <termref
                        def="dt-type-annotation">type annotation</termref>, as follows:</p>

                  <olist>



                     <item>

                        <p>If the type annotation is <code>xs:untyped</code> or <code>xs:anySimpleType</code> or
denotes a complex type with mixed content (including <code>xs:anyType</code>), then the typed value of the
node is equal to its string value, as an instance of
<code>xs:untypedAtomic</code>.  However, if the <code>nilled</code>
property of the node is <code>true</code>, then its typed value is the empty sequence.</p>



                        <p>Example: E1 is an element node
having type annotation <code>xs:untyped</code> and string value
"<code>1999-05-31</code>". The typed value of E1 is
"<code>1999-05-31</code>", as an instance of
<code>xs:untypedAtomic</code>.</p>


                        <p>Example: E2 is an element node
with the type annotation <code>formula</code>, which is a complex type
with mixed content. The content of E2 consists of the character
"<code>H</code>", a child element named <code>subscript</code> with
string value "<code>2</code>", and the character "<code>O</code>". The
typed value of E2 is "<code>H2O</code>" as an instance of
<code>xs:untypedAtomic</code>.</p>
                     </item>



                     <item>
                        <p>If the type
annotation denotes a simple type or a complex type with simple
content, then the typed value of the node is derived from its string
value and its type annotation in a way that is consistent with schema
validation. However, if the <code>nilled</code>
property of the node is <code>true</code>, then its typed value is the empty sequence.</p>
                        <p>Example: E3 is an element node with the type
annotation <code>cost</code>, which is a complex type that has several
attributes and a simple content type of <code>xs:decimal</code>. The
string value of E3 is "<code>74.95</code>". The typed value of E3 is
<code>74.95</code>, as an instance of
<code>xs:decimal</code>.</p>
                        <p>Example: E4 is an element node with the
type annotation <code>hatsizelist</code>, which is a simple type
derived from the atomic type <code>hatsize</code>, which in turn is
derived from <code>xs:integer</code>. The string value of E4 is
"<code>7 8 9</code>". The typed value of E4 is a sequence of three
values (<code>7</code>, <code>8</code>, <code>9</code>), each of type
<code>hatsize</code>.</p>
                        <p>Example: E5 is an element node with the type annotation <code>my:integer-or-string</code> which is a union type with member types <code>xs:integer</code> and <code>xs:string</code>. The string value of E5 is "<code>47</code>". The typed value of E5 is <code>47</code> as an <code>xs:integer</code>, since <code>xs:integer</code> is the member type that validated the content of E5. In general, when the type annotation of a node is a union type, the typed value of the node will be an instance of one of the member types of the union.</p>
                        <note>
                           <p>If an implementation stores only the string value of a node, and the type annotation of the node is a union type, the implementation must be able to deliver the typed value of the node as an instance of the appropriate member type.</p>
                        </note>
                     </item>

                     <item>
                        <p>If the type annotation
denotes a complex type with empty content, then the typed value of the
node is the empty sequence and its string value is the zero-length string.</p>
                     </item>

                     <item>
                        <p>If the type annotation
denotes a complex type with element-only content, then the typed value
of the node is <xtermref
                              spec="DM31" ref="dt-absent"
                              />. The <code>fn:data</code> function raises a
<termref
                              def="dt-type-error">type error</termref>
                           <xerrorref spec="FO31" class="TY" code="0012"
                           /> when applied to such a node. The string value of such a node is equal to the concatenated string values of all its text node descendants, in document order.</p>
                        <p>Example: E6 is an
element node with the type annotation <code>weather</code>, which is a
complex type whose content type specifies
<code>element-only</code>. E6 has two child elements named
<code>temperature</code> and <code>precipitation</code>. The typed
value of E6 is <xtermref
                              spec="DM31" ref="dt-absent"
                           />, and the <code>fn:data</code> function
applied to E6 raises an error.
</p>
                     </item>
                  </olist>
               </item>
            </olist>
         </div2>


         <div2 id="id-sequencetype-syntax">
            <head>Sequence Types</head>
            <p>Whenever it is necessary to refer to a type in an &language; expression, the <nt
                  def="SequenceType">SequenceType</nt> syntax is used.</p>
            <scrap>
               <head/>
               <prodrecap id="SequenceType" ref="SequenceType"/>
               <prodrecap id="ItemType" ref="ItemType"/>
               <prodrecap id="OccurrenceIndicator" ref="OccurrenceIndicator"/>
            </scrap>



            <p>With the exception of the special type
<code>empty-sequence()</code>, a <termref
                  def="dt-sequence-type"
                  >sequence type</termref> consists of an
<term>item type</term> that constrains the type of each item in the
sequence, and a <term>cardinality</term> that constrains the number of
items in the sequence. Apart from the item type <code>item()</code>,
which permits any kind of item, item types divide into <term>node
types</term> (such as <code>element()</code>), <term>generalized atomic
types</term> (such as <code>xs:integer</code>) and function types
(such as function() as item()*).</p>

            <p>
               <termref def="dt-qname">Lexical QNames</termref> appearing in a <termref
                  def="dt-sequence-type"
                  >sequence type</termref> have their
		  prefixes expanded to namespace URIs by means of the
		  <termref
                  def="dt-static-namespaces"
                  >statically known namespaces</termref> and (where applicable) the
		  <phrase
                  diff="chg" at="A"><termref def="dt-def-element-ns"
                     >default element namespace</termref>
               or <termref def="dt-def-type-ns">default type namespace</termref></phrase>.
      Equality of QNames is defined by the <code>eq</code> operator.</p>


            <p>Item types representing element
and attribute nodes may specify the required <termref
                  def="dt-type-annotation"
                  >type annotations</termref> of those nodes, in
the form of a <termref
                  def="dt-schema-type"
                  >schema
type</termref>. Thus the item type <code>element(*, us:address)</code>
denotes any element node whose type annotation is (or is derived from)
the schema type named <code>us:address</code>.</p>

            <p>The occurrence indicators '+', '*', and '?' bind to the last <nt def="ItemType"
                  >ItemType</nt> in the <nt def="SequenceType"
                  >SequenceType</nt>, as described in <loc href="#parse-note-occurrence-indicators"
                  >occurrence-indicators</loc> constraint.</p>

            <p>Here are some examples of <termref def="dt-sequence-type"
               >sequence types</termref> that
		  might be used in &language;:</p>

            <ulist>
               <item>
                  <p>
                     <code>xs:date</code> refers to the built-in atomic schema type named <code>xs:date</code>
                  </p>
               </item>
               <item>
                  <p>
                     <code>attribute()?</code> refers to an optional attribute node</p>
               </item>
               <item>
                  <p>
                     <code>element()</code> refers to any element node</p>
               </item>
               <item>
                  <p>
                     <code>element(po:shipto, po:address)</code> refers to an element node that has the name <code>po:shipto</code> and has the type annotation <code>po:address</code> (or a schema type derived from <code>po:address</code>)</p>
               </item>
               <item>
                  <p>
                     <code>element(*, po:address)</code> refers to an element node of any name that has the type annotation <code>po:address</code> (or a type derived from <code>po:address</code>)</p>
               </item>

               <item>
                  <p>
                     <code>element(customer)</code> refers to an element node named <code>customer</code> with any type annotation</p>
               </item>



               <item>
                  <p>
                     <code>schema-element(customer)</code> refers to an element node whose name is <code>customer</code> (or is in the substitution group headed by <code>customer</code>) and whose type annotation matches the schema type declared for a <code>customer</code> element in the <termref
                        def="dt-is-elems">in-scope element declarations</termref>
                  </p>
               </item>

               <item>
                  <p>
                     <code>node()*</code> refers to a sequence of zero or more nodes of any kind</p>
               </item>
               <item>
                  <p>
                     <code>item()+</code> refers to a sequence of one or more <termref def="dt-item"
                        >items</termref>
                  </p>
               </item>
               <item>
                  <p>
                     <code>function(*)</code> refers to any <xtermref spec="DM31"
                        ref="dt-function-item">function</xtermref>, regardless of arity or type</p>
               </item>
               <item>
                  <p>
                     <code>function(node()) as xs:string*</code> refers to a <xtermref spec="DM31"
                        ref="dt-function-item"
                     >function</xtermref> that takes a single argument whose value is a single node,
        and returns a sequence of zero or more xs:string values</p>
               </item>
               <item>
                  <p>
                     <code>(function(node()) as xs:string)*</code> refers to a sequence of zero or more <xtermref
                        spec="DM31" ref="dt-function-item"
                     >functions</xtermref>, each of which takes a single
        argument whose value is a single node, and returns as its result a single xs:string value</p>
               </item>
            </ulist>

         </div2>


         <div2 id="id-sequencetype-matching">
            <head>Sequence Type Matching</head>
            <p>
               <termdef id="dt-sequencetype-matching" term="SequenceType matching">
                  <term>SequenceType matching</term> compares the <termref def="dt-dynamic-type"
                     >dynamic type</termref> of a value
		  with an expected <termref
                     def="dt-sequence-type"
                  >sequence type</termref>. </termdef> For example, an <code>instance of</code> expression returns <code>true</code> if the <termref
                  def="dt-dynamic-type"
                  >dynamic type</termref> of a given value matches a given <termref
                  def="dt-sequence-type"
               >sequence type</termref>, or <code>false</code> if it does not.</p>


            <p>An &language; implementation must be able to determine relationships among the types in type annotations in an <termref
                  def="dt-data-model-instance">XDM instance</termref> and the types in the  <termref
                  def="dt-issd">in-scope schema definitions</termref> (ISSD). <phrase role="xquery"
                  >An &language; implementation must be able to determine relationships among the types in ISSDs used in different modules of the same query.</phrase>
            </p>

            <p>
               <termdef term="subtype substitution" id="dt-subtype-substitution"
                     >The use of a value whose <termref def="dt-dynamic-type"
                     >dynamic type</termref> is derived from an
		  expected type is known as <term>subtype substitution</term>.</termdef>
		  Subtype substitution does not change the actual type of a value. For
		  example, if an <code>xs:integer</code> value is used where an
		  <code>xs:decimal</code> value is expected, the value retains its type
		  as <code>xs:integer</code>.</p>

            <p>The definition of <termref def="dt-sequencetype-matching"
                  >SequenceType matching</termref> relies
		  on a pseudo-function named <code>derives-from(</code>
               <emph>AT</emph>,
		  <emph>ET</emph>
               <code>)</code>, which takes an actual simple or complex
		  schema type <emph>AT</emph> and an expected simple or complex schema
		  type <emph>ET</emph>, and either returns a boolean value or raises a
		  <termref
                  def="dt-type-error">type error</termref>
               <errorref class="TY" code="0004"/>.  This function is defined as follows:</p>

            <ulist>

               <item>
                  <p>
                     <code>derives-from(</code>
                     <emph>AT</emph>, <emph>ET</emph>
                     <code>)</code> raises a type error <errorref class="TY" code="0004"
                        /> if <emph>ET</emph> is
		    not present in the <termref def="dt-issd"
                        >in-scope schema definitions</termref> (ISSD). </p>
               </item>

               <item>
                  <p>
                     <code>derives-from(</code>
                     <emph>AT</emph>,
		    <emph>ET</emph>
                     <code>)</code> returns <code>true</code>  
		    if any of the following conditions applies:

		    <ulist> <item>
                           <p>
                              <emph>AT</emph> is <emph>ET</emph>
                           </p>
                        </item> <item>
                           <p>
                              <emph>ET</emph> is the base type of <emph>AT</emph>
                           </p>
                        </item> <item>
                           <p>
                              <emph>ET</emph> is a pure union type of which <emph>AT</emph> is a member type</p>
                        </item> <item>
                           <p>There is a type <emph>MT</emph> such that <code>derives-from(</code>
                              <emph>AT</emph>, <emph>MT</emph>
                              <code>)</code> 
		      and <code>derives-from(</code>
                              <emph>MT</emph>, <emph>ET</emph>
                              <code>)</code>
                           </p>
                        </item> </ulist>
                  </p>
               </item>

               <item>
                  <p>Otherwise, <code>derives-from(</code>
                     <emph>AT</emph>, <emph>ET</emph>
                     <code>)</code> returns <code>false</code>
                  </p>
               </item>

            </ulist>

            <p>The rules for <termref def="dt-sequencetype-matching"
                  >SequenceType
		  matching</termref> are given below, with examples (the examples are
		  for purposes of illustration, and do not cover all possible
		  cases).</p>


            
               
               <ulist>

                  <item>
                     <p>The <termref def="dt-sequence-type">sequence type</termref>
                        <code>empty-sequence()</code> matches a value that is the empty sequence.</p>
                  </item>

                  <item>
                     <p>An <nt def="ItemType">ItemType</nt> with no <nt def="OccurrenceIndicator"
                           >OccurrenceIndicator</nt> matches any value that contains exactly one item if the <nt
                           def="ItemType">ItemType</nt> matches that item (see <specref
                           ref="id-matching-item"/>).</p>
                  </item>

                  <item>
                     <p>An <nt def="ItemType">ItemType</nt> with an <nt def="OccurrenceIndicator"
                           >OccurrenceIndicator</nt> matches a value if the number of items in the value matches the <nt
                           def="OccurrenceIndicator">OccurrenceIndicator</nt> and the <nt
                           def="ItemType">ItemType</nt> matches each of the items in the value.</p>
                  </item>
               </ulist>
               <p>An <nt def="OccurrenceIndicator"
                  >OccurrenceIndicator</nt> specifies the number of items in
		    a sequence, as follows:</p>

               <ulist>


                  <item>
                     <p>
                        <code>?</code> matches zero or one items</p>
                  </item>
                  <item>
                     <p>
                        <code>*</code> matches zero or more items</p>
                  </item>
                  <item>
                     <p>
                        <code>+</code> matches one or more items</p>
                  </item>
               </ulist>

               <p>As a consequence of these rules, any <termref def="dt-sequence-type"
                     >sequence type</termref> whose
		    <nt def="OccurrenceIndicator"
                     >OccurrenceIndicator</nt> is <code>*</code> or <code>?</code> matches a
		    value that is an empty sequence.</p>
            
         </div2>
         <div2 id="id-matching-item">
               <head>Item Types</head>
            
            <scrap>
               <head/>
               <prodrecap ref="ItemType"/>
               <prodrecap id="TypeName" ref="TypeName"/>
               
               <prodrecap ref="LocalUnionType"/>
               <prodrecap id="KindTest" ref="KindTest"/>
               
               <prodrecap id="DocumentTest" ref="DocumentTest"/>
               
               <prodrecap ref="ElementTest"/>
               <prodrecap ref="SchemaElementTest"/>
               <prodrecap ref="ElementDeclaration"/>
               <prodrecap ref="AttributeTest"/>
               
               <prodrecap ref="SchemaAttributeTest"/>
               <prodrecap ref="AttributeDeclaration"/>
               
               <!--<prodrecap ref="ElementNameOrWildcard"/>-->
               <prodrecap id="ElementName" ref="ElementName"/>
               <!--<prodrecap ref="AttribNameOrWildcard"/>-->
               
               <prodrecap id="AttributeName" ref="AttributeName"/>
               
               <prodrecap id="PITest" ref="PITest"/>
               <prodrecap id="CommentTest" ref="CommentTest"/>
               <prodrecap id="NamespaceNodeTest" ref="NamespaceNodeTest"/>
               
               <prodrecap ref="TextTest" id="TextTest"/>
               <prodrecap id="AnyKindTest" ref="AnyKindTest"/>
               <prodrecap ref="FunctionTest"/>
               <prodrecap ref="AnyFunctionTest"/>
               <prodrecap ref="TypedFunctionTest"/>
               <prodrecap id="ParenthesizedItemType" ref="ParenthesizedItemType"/>
               <prodrecap ref="MapTest"/>
               <prodrecap ref="RecordTest"/>
               <prodrecap ref="ArrayTest"/>
            </scrap>
            
               
               <p>This section defines the semantics of different <code>ItemTypes</code>
               in terms of the values that they match.</p>
            
            <p diff="add" at="A">An item type written simply as an <code>EQName</code>
               (that is, a <code>NamedType</code>) is interpreted as follows:</p>
            
            <olist diff="add" at="A">
               <item><p>If the name is written as a lexical QName, then it is expanded using the
               <termref def="dt-in-scope-namespaces"/> in the <termref def="dt-static-context"/>. If the
               name is an unprefixed <code>NCName</code>, then it is taken as being in the
               <termref def="dt-def-type-ns"/>.</p></item>
               <item><p>If the name matches an entry in the <termref def="dt-item-type-aliases"/> in the <termref def="dt-static-context"/>,
                  then it is taken as a reference to the corresponding item type. The rules that
               apply are the rules for the expanded item type definition.</p></item>
               <item><p>Otherwise, it must match the name of a type in the <termref def="dt-is-types">in-scope schema types</termref>
                  in the <termref def="dt-static-context"/>: specifically, an atomic type or a plain union type.
                  See <specref ref="id-atomic-and-union-types"/> for details.
                  </p>
               <note><p>A name in the <code>xs</code> namespace will always fall into this category, since the namespace
               is reserved.</p></note>
               </item>
               <item><p>If the name cannot be resolved to a type, a <termref def="dt-static-error">static error</termref> 
                  is raised <errorref class="ST" code="0051"/>.</p></item>
                           
            </olist>
            
            
            <div3 id="general-item-types">
               <head>General item types</head>
            <ulist>
               <item><p>
                        <code>item()</code> matches
                        any single <termref def="dt-item">item</termref>.</p>
                     <p>Example: <code>item()</code> matches the atomic
                        value <code>1</code>, the element <code>&lt;a/&gt;</code>, or the function <code>fn:concat#3</code>.</p>
               </item>
               <item>
                  
                     <p>A <nt def="ParenthesizedItemType"
                        >ParenthesizedItemType</nt> matches an item if and only if the
                        item matches the <nt
                           def="ItemType">ItemType</nt> that is in parentheses.</p>
                      <note><p>Parenthesized item types are used primarily when defining nested item types in a function
                      signature: for example a sequence of functions that return booleans might be denoted
                      <code>(function () as xs:boolean)*</code>. In this example the parentheses
                      are needed to indicate where the occurrence indicator belongs.</p></note>
                  
               </item>
            </ulist>
               </div3>
               
               <div3 id="id-atomic-and-union-types">
                  <head>Atomic and Union Types</head>
                  
                  <p>A <termref def="dt-generalized-atomic-type"/> may be expressed as an <nt def="ItemType"/> in 
                  any of the following ways:</p>
                  
                  <ulist>
                     <item><p>Using the QName of a type in the <termref def="dt-issd"/> that is an atomic type
                     or a <termref def="dt-pure-union-type"></termref></p></item>
                     <item><p>Using a QName that identifies a <termref def="dt-type-alias"/> that resolves
                        to a <termref def="dt-generalized-atomic-type"/>.</p></item>
                     <item><p>Using a <nt def="ParenthesizedItemType"/> where the parentheses enclose
                        a <termref def="dt-generalized-atomic-type"/>.</p></item>
                     <item><p>Using a <nt def="LocalUnionType"/> as described below.</p></item>
                     <item><p>Using an <nt def="EnumerationType"/> as described below.</p></item>
                  </ulist>
               
               

                     <p>Example: The <nt def="ItemType">ItemType</nt>
                        <code>xs:decimal</code> matches any value of type
    <code>xs:decimal</code>.  It also matches any value of type
    <code>shoesize</code>, if <code>shoesize</code> is an atomic type
    derived by restriction from <code>xs:decimal</code>.</p>

                     <p>Example: Suppose <nt def="ItemType">ItemType</nt>
                        <code>dress-size</code> is a union type that allows
    either <code>xs:decimal</code> values for numeric sizes (e.g. 4, 6, 10, 12),
    or one of an enumerated set of <code>xs:strings</code> (e.g. "small", "medium", "large"). The <nt
                           def="ItemType">ItemType</nt>
                        <code>dress-size</code> matches any of these values.</p>

                     <note>
                        <p>The names of <phrase diff="chg" at="A">list</phrase>
    types such as <code>xs:IDREFS</code> are not accepted in this context,
    but can often be replaced by a <termref
                              def="dt-generalized-atomic-type"
                              >generalized atomic type</termref> with an occurrence indicator, such as
    <code>xs:IDREF+</code>.</p>
                     </note>
                  
                  <div4 id="id-local-union-types" diff="add" at="A">
                     <head>Local Union Types</head>
                     <p>A <code>LocalUnionType</code> defines an anonymous union type locally (for example,
                     within a function signature) which may be more convenient than defining the type in an
                     imported schema.</p>
                        <scrap headstyle="show">
                           <head/>
                           <prodrecap id="LocalUnionType" ref="LocalUnionType"/>   
                        </scrap>
                        
                        <p>Although the grammar allows any <code>ItemType</code> to appear, each <code>ItemType</code>
                        must identify a <termref def="dt-generalized-atomic-type"/>. [TODO: error code]</p>
                     
                        <p>An item matches a <code>LocalUnionType</code> if it matches any of the 
                           <termref def="dt-generalized-atomic-type">generalized atomic types</termref>
                           listed within the parentheses.</p>
                        
                        <p>For example, the type <code>union(xs:date, xs:dateTime, xs:time)</code> matches any value that is an instance
                           of <code>xs:date</code>, <code>xs:dateTime</code>, or <code>xs:time</code>.</p>
                     
                        <p>Similarly, the type <code>union(xs:NCName, enum(""))</code> matches any value that is either
                        an instance of <code>xs:NCName</code>, or a zero-length string. This might be a suitable type for
                        a variable that holds a namespace prefix.</p>
                        
                        <note>
                           <p>Local union types are particularly useful in function signatures, allowing a function to take arguments
                           of a variety of types. The semantics are identical to using a named union type, but a local union type is more
                           convenient because it does not need to be defined in a schema, and does not require a schema-aware processor.</p>
                           <p>A local union type can also be used in a cast expression: <code>cast @when as union(xs:date, xs:dateTime)</code>
                           allows the attribute <code>@when</code> to be either a date, or a dateTime.</p>
                           <p>An <code>instance of</code> expression can be used to test whether a value belongs to one
                           of a number of specified types: <code>$x instance of union(xs:string, xs:anyURI, xs:untypedAtomic)</code>
                           returns true if <code>$x</code> is an instance of any of these three atomic types.</p>
                        </note>
                  </div4>
                  
                  <div4 id="id-enumeration-types" diff="add" at="A">
                     <head>Enumeration Types</head>
                     <p><termdef id="dt-EnumerationType" term="EnumerationType">An <term>EnumerationType</term> 
                        accepts a fixed set of string values.</termdef></p>
                     <scrap headstyle="show">
                        <head/>
                        <prodrecap id="EnumerationType" ref="EnumerationType"/>   
                     </scrap>
                     
                     <p>An item matches an <code>EnumerationType</code> if it is an instance of <code>xs:string</code>,
                        and is equal to one of the string literals listed within the parentheses, when compared
                     using the codepoint collation.</p>
                     
                     <p>For example, the type <code>enum("red", "green", "blue")</code> matches the string "green".</p>
                     
                     <note>
                        <p>Unlike a schema-defined type that restricts <code>xs:string</code> with an enumeration facet,
                        matching of an <code>EnumerationType</code> is based purely on value comparison, and not on type
                        annotations. For example, if <code>color</code> is a schema-defined atomic type derived from
                        <code>xs:string</code> with an enumeration facet permitting the values ("red", "green", "blue"),
                        the expression <code>"green" instance of color</code> is false, because the type annotation
                        does not match. By contrast, <code>"green" instance of enum("red", "green", "blue")</code>
                        is true.</p>
                        <p>An <term>EnumerationType</term> only matches <code>xs:string</code> values, not
                        <code>xs:untypedAtomic</code> or <code>xs:anyURI</code> values, even though these might compare
                           equal. However, the <termref def="dt-coercion-rules">coercion rules</termref> allow <code>xs:untypedAtomic</code> or 
                           <code>xs:anyURI</code> values to be supplied where the required type is an enumeration type.</p>
                     </note>
                  </div4>   

               
               </div3>
            <div3>
               <head>Node Types</head>
               
               <p diff="add" at="A">Some of the constructs described in this section include a <nt def="TypeName">TypeName</nt>. This appears 
                  as <var>T</var> in:</p>
               
               <ulist diff="add" at="A">
                  <item><p><code>element(N, T)</code></p></item>
                  <item><p><code>attribute(N, T)</code></p></item>
                  <item><p><code>document-node(element(N, T))</code></p></item>
               </ulist>
               
               <p diff="add" at="A">In these constructs, the type name <var>T</var> is expanded using the <termref def="dt-in-scope-namespaces"/>
               in the <termref def="dt-static-context"/>, using the <termref def="dt-def-type-ns"/> if it is unprefixed. The resulting
               QName must identify a type in the <termref def="dt-issd"/>. This can be any schema type: either a simple type,
               or (except in the case of attributes) a complex type. If it is a simple type then it can be an atomic, union, or
               list type. It can be a built-in type (such as <code>xs:integer</code>) or a user-defined type. It must however
               be the name of a type defined in a schema; it cannot be a <termref def="dt-type-alias"/>.</p>
            
               <div4 id="id-simple-node-tests">
                  <head>Simple Node Tests</head>
               <ulist>

                  <item>
                     <p>
                        <code>node()</code>
    matches any node.</p>
                  </item>

                  <item>
                     <p>
                        <code>text()</code> matches any
    text node.</p>
                  </item>

                  <item>
                     <p>
                        <code>processing-instruction()</code>
    matches any processing-instruction
    node.</p>
                  </item>

                  <item>
                     <p at="XQ.E27 and XP.E19">
                        <code>processing-instruction(</code>
                        <emph>N</emph>
                        <code>)</code>
    matches any processing-instruction node whose PITarget is equal to <code
                           role="parse-test"
                           >fn:normalize-space(N)</code>. If <code>fn:normalize-space(N)</code> is not in the lexical space of NCName, a type error is raised <errorref
                           class="TY" code="0004"/>
                     </p>

                     <p>Example:
    <code role="parse-test"
                           >processing-instruction(xml-stylesheet)</code> matches any
    processing instruction whose PITarget is
    <code>xml-stylesheet</code>.</p>

                     <p>For backward compatibility with
    XPath 1.0, the PITarget of a
    processing instruction may also be expressed as a
    string literal, as in this example:
    <code
                           role="parse-test">processing-instruction("xml-stylesheet")</code>.</p>
                     <p>If the specified PITarget is not a syntactically valid NCName, a type error is raised <errorref
                           class="TY" code="0004"/>.</p>
                  </item>


                  <item>
                     <p>
                        <code role="parse-test">comment()</code> matches any comment node.</p>
                  </item>




                  <item>
                     <p>
                        <code role="parse-test"
                        >namespace-node()</code> matches any
    namespace node.</p>
                  </item>




                  <item>
                     <p>
                        <code role="parse-test"
                        >document-node()</code> matches any document
    node.</p>
                  </item>

                  <item>
                     <p>
                        <code>document-node(</code>
                        <emph>E</emph>
                        <code>)</code>
    matches any document node that contains exactly one element node, optionally accompanied by one or more comment and processing instruction nodes, if
    <emph>E</emph> is an <nt
                           def="ElementTest">ElementTest</nt> or <nt def="SchemaElementTest"
                           >SchemaElementTest</nt> that matches the element node (see
    <specref
                           ref="id-element-test"/> and <specref ref="id-schema-element-test"/>).</p>
                     <p>Example:
    <code role="parse-test"
                           >document-node(element(book))</code> matches a document node
    containing
    exactly one element node that is matched by the ElementTest
    <code
                           role="parse-test">element(book)</code>.</p>
                  </item>

 
                  <item>
                     <p>An <nt def="ItemType">ItemType</nt> that is an
    <nt def="ElementTest"
                           >ElementTest</nt>, <nt def="SchemaElementTest"
                           >SchemaElementTest</nt>, <nt def="AttributeTest"
                           >AttributeTest</nt>,
    <nt def="SchemaAttributeTest"
                           >SchemaAttributeTest</nt>, or <nt def="FunctionTest"
                        >FunctionTest</nt> matches an item as described in the following sections.
    </p>
                  </item>

                  
               </ulist>
            </div4>
                  
               
            <div4 id="id-element-test">
               <head>Element Test</head>

               <scrap diff="chg" at="A">
                  <head/>
                  <prodrecap id="ElementTest" ref="ElementTest"/>
                  <prodrecap ref="NameTest"/>
                  <prodrecap ref="ElementName"/>
                  <prodrecap ref="TypeName"/>
               </scrap>


               <p>
    An <nt def="ElementTest"
                     >ElementTest</nt> is used to match an
    element node by its name and/or <termref
                     def="dt-type-annotation">type annotation</termref>.
  </p>

               <p>
    The <nt def="ElementName">ElementName</nt> and <nt def="TypeName"
                     >TypeName</nt> of an <nt def="ElementTest"
                     >ElementTest</nt>
    have their prefixes expanded to namespace URIs by means of the
    <termref
                     def="dt-static-namespaces"
                     >statically known namespaces</termref>, or if unprefixed, <phrase diff="chg"
                     at="A">the
                  <termref def="dt-def-element-ns"
                        >default element namespace</termref> or 
                  <termref def="dt-def-type-ns">default type namespace</termref> respectively</phrase>.

    The <nt
                     def="ElementName">ElementName</nt> need not be
    present in the <termref
                     def="dt-is-elems">in-scope element declarations</termref>, but the <nt
                     def="TypeName">TypeName</nt> must be present in the
    <termref
                     def="dt-is-types">in-scope schema types</termref>
                  <errorref class="ST" code="0008"/>. Note that
    <termref
                     def="dt-substitution-group"
                     >substitution groups</termref> do not affect the semantics of <nt
                     def="ElementTest">ElementTest</nt>.
  </p>

               <p>
    An <nt def="ElementTest"
                  >ElementTest</nt> may take any of the following forms:
  </p>

               <olist>

                  <item>
                     <p>
                        <code role="parse-test">element()</code> and

<code role="parse-test"
                           >element(*)</code>  match any
single element node, regardless of its name or
type annotation.</p>
                  </item>

                  <item>
                     <p>
                        <code>element(</code>
                        <nt def="ElementName">ElementName</nt>
                        <code>)</code>
matches any element node whose name is <nt def="ElementName"
                           >ElementName</nt>, regardless of its type annotation or <code>nilled</code> property.</p>
                     <p>Example: <code role="parse-test"
                           >element(person)</code> matches any element node whose name is <code>person</code>.</p>
                  </item>

                  <item diff="add" at="A">
                     <p>
                        <code>element(prefix:*)</code>
                        matches any element node whose name is in the namespace bound to the given prefix, regardless of its type annotation or <code>nilled</code> property.</p>
                     <p>Example: <code role="parse-test"
                           >element(xhtml:*)</code> matches any element node whose name is in the namespace
                        bound to the prefix <code>xhtml</code>.</p>
                  </item>

                  <item diff="add" at="A">
                     <p>
                        <code>element(Q{uri}*)</code>
                        matches any element node whose name is in the namespace given as <code>uri</code>, regardless of its type annotation or <code>nilled</code> property.</p>
                     <p>Example: <code role="parse-test"
                           >element(Q{"http://www.w3.org/2000/svg"}*)</code> matches any element node whose name is in the SVG namespace.</p>
                  </item>

                  <item diff="add" at="A">
                     <p>
                        <code>element(*:local)</code>
                        matches any element node whose local name is the name given as <code>local</code>, regardless of its namespace, 
                        type annotation or <code>nilled</code> property.</p>
                     <p>Example: <code role="parse-test"
                        >element(*:html)</code> matches any element node whose local name is "html".</p>
                  </item>

                  <item>
                     <p>
                        <code>element(</code>
                        <nt def="ElementName">ElementName</nt>
                        <code>,</code>
                        <nt def="TypeName">TypeName</nt>
                        <code>)</code>
matches an element node whose name is <nt def="ElementName"
                           >ElementName</nt> if <code>derives-from(</code>
                        <emph>AT</emph>, <nt def="TypeName">TypeName</nt>
                        <code>)</code> is <code>true</code>, where <emph>AT</emph> is the type annotation of the element node, and the <code>nilled</code> property of the node is <code>false</code>.</p>
                     <p>Example: <code role="parse-test"
                           >element(person, surgeon)</code> matches a
non-nilled element node whose name is <code>person</code> and whose
type annotation is <code>surgeon</code> (or is derived from <code>surgeon</code>). </p>
                     <p diff="add" at="A"
                           >The <code>ElementName</code> in this example can also be replaced by one of the forms
                     <code>prefix:*</code>, <code>Q{uri}*</code>, or <code>*:local</code>.</p>
                  </item>

                  <item>
                     <p>
                        <code>element(</code>
                        <nt def="ElementName">ElementName</nt>, <nt def="TypeName">TypeName</nt>
                        <code> ?)</code>
matches an element node whose name is <nt def="ElementName"
                           >ElementName</nt> if <code>derives-from(</code>
                        <emph>AT</emph>, <nt def="TypeName">TypeName</nt>
                        <code>)</code> is <code>true</code>, where <emph>AT</emph> is the type annotation of the element node. The <code>nilled</code> property of the node may be either <code>true</code> or  <code>false</code>.</p>
                     <p>Example: <code role="parse-test"
                           >element(person, surgeon?)</code> matches a nilled or non-nilled element node whose name is <code>person</code> and whose type
annotation is <code>surgeon</code> (or is derived from <code>surgeon</code>).</p>
                     <p diff="add" at="A"
                           >The <code>ElementName</code> in this example can also be replaced by one of the forms
                        <code>prefix:*</code>, <code>Q{uri}*</code>, or <code>*:local</code>.</p>
                  </item>





                  <item>
                     <p>
                        <code>element(*,
</code>
                        <nt def="TypeName">TypeName</nt>
                        <code>)</code> matches an element
node regardless of its name, if
<code>derives-from(</code>
                        <emph>AT</emph>, <nt def="TypeName">TypeName</nt>
                        <code>)</code> is
<code>true</code>, where <emph>AT</emph> is the type annotation of the element node, and the <code>nilled</code> property of the node is <code>false</code>.</p>

                     <p>Example: <code role="parse-test"
                           >element(*, surgeon)</code>
matches any non-nilled element node whose type annotation is
<code>surgeon</code> (or is derived from <code>surgeon</code>), regardless of its name.</p>
                  </item>

                  <item>
                     <p>
                        <code>element(*,</code>
                        <nt def="TypeName">TypeName</nt>
                        <code> ?)</code> matches an element
node regardless of its name, if
<code>derives-from(</code>
                        <emph>AT</emph>, <nt def="TypeName">TypeName</nt>
                        <code>)</code> is
<code>true</code>, where <emph>AT</emph> is the type annotation of the element node. The <code>nilled</code> property of the node may be either <code>true</code> or  <code>false</code>.</p>

                     <p>Example: <code role="parse-test"
                           >element(*, surgeon?)</code>
matches any nilled or non-nilled element node whose type annotation is
<code>surgeon</code> (or is derived from <code>surgeon</code>), regardless of its name.</p>
                  </item>
               </olist>

            </div4>
               

            <div4 id="id-schema-element-test">
               <head>Schema Element Test</head>

               <scrap>
                  <head/>
                  <prodrecap id="SchemaElementTest" ref="SchemaElementTest"/>
                  <prodrecap id="ElementDeclaration" ref="ElementDeclaration"/>
                  <prodrecap ref="ElementName"/>
               </scrap>

               <p>
    A <nt def="SchemaElementTest"
                     >SchemaElementTest</nt> matches an element node against a corresponding
    element declaration found in the <termref
                     def="dt-is-elems">in-scope element declarations</termref>.
  </p>

               <p>
    The <nt def="ElementName">ElementName</nt> of a <nt def="SchemaElementTest"
                     >SchemaElementTest</nt>
    has its prefixes expanded to a namespace URI by means of the
    <termref
                     def="dt-static-namespaces"
                     >statically known namespaces</termref>, or if unprefixed, the
    <phrase
                     diff="chg" at="A"><termref def="dt-def-element-ns"
                        >default element namespace</termref></phrase>.

    If the <nt
                     def="ElementName">ElementName</nt> specified in the <nt def="SchemaElementTest"
                     >SchemaElementTest</nt>
    is not found in the <termref def="dt-is-elems"
                     >in-scope element declarations</termref>, a
    <termref def="dt-static-error"
                     >static error</termref> is raised <errorref class="ST" code="0008"/>.
  </p>

               <p>
    A <nt def="SchemaElementTest"
                  >SchemaElementTest</nt> matches a candidate element node if all of the following conditions are satisfied:
  </p>

               <olist>
                  <item>
                     <p>Either:</p>
                     <olist>
                        <item>
                           <p>The name <emph>N</emph> of the candidate node matches the specified <nt
                                 def="ElementName">ElementName</nt>, or</p>
                        </item>
                        <item>
                           <p>The name <emph>N</emph> of the candidate node matches the name of an element declaration that is a member of the actual substitution group headed by the declaration of element <nt
                                 def="ElementName">ElementName</nt>.</p>
                        </item>

                     </olist>

                     <note>
                        <p>The term "actual substitution group" is defined in <bibref
                              ref="XMLSchema11"
                              />. The actual substitution group of an element declaration <emph>H</emph> includes those element declarations <emph>P</emph> that are declared to have <emph>H</emph> as their direct or indirect substitution group head, provided that <emph>P</emph> is not declared as abstract, and that <emph>P</emph> is validly substitutable for <emph>H</emph>, which means that there must be no blocking constraints that prevent substitution.</p>
                     </note>
                  </item>

                  <item>
                     <p>The schema element declaration named <emph>N</emph> is not abstract.</p>
                  </item>

                  <item>
                     <p>
                        <code>derives-from( AT, ET )</code> is true, where <emph>AT</emph> is the type annotation of the candidate node and <emph>ET</emph> is the schema type declared in the schema element declaration named <emph>N</emph>.</p>
                  </item>

                  <item>
                     <p>If the schema element declaration named <emph>N</emph> is not nillable, then the nilled property of the candidate node is false.</p>
                  </item>

               </olist>

               <p>Example: The <nt def="SchemaElementTest">SchemaElementTest</nt>
                  <code role="parse-test">schema-element(customer)</code> matches a candidate element node 
in the following two situations:
<olist>
                     <item>
                        <p>customer is a top-level element declaration in the in-scope element declarations; the name of the candidate node is customer; the element declaration of customer is not abstract; the type annotation of the candidate node is the same as or derived from the schema type declared in the customer element declaration; and either the candidate node is not nilled, or customer is declared to be nillable.</p>
                     </item>
                     <item>
                        <p>customer is a top-level element declaration in the in-scope element declarations; the name of the candidate node is client; client is an actual (non-abstract and non-blocked) member of the substitution group of customer; the type annotation of the candidate node is the same as or derived from the schema type declared for the client element; and either the candidate node is not nilled, or client is declared to be nillable.</p>
                     </item>
                  </olist>
               </p>

            </div4>

            <div4 id="id-attribute-test">
               <head>Attribute Test</head>

               <scrap diff="chg" at="A">
                  <head/>
                  <prodrecap id="AttributeTest" ref="AttributeTest"/>
                  <prodrecap ref="NameTest"/>
                  <prodrecap ref="AttributeName"/>
                  <prodrecap ref="TypeName"/>
               </scrap>


               <p>
    An <nt def="AttributeTest"
                     >AttributeTest</nt> is used to match an
    attribute node by its name and/or <termref
                     def="dt-type-annotation">type annotation</termref>.
  </p>

               <p>
    The <nt def="AttributeName">AttributeName</nt> and <nt def="TypeName"
                     >TypeName</nt> of an <nt def="AttributeTest"
                     >AttributeTest</nt>
    have their prefixes expanded to namespace URIs by means of the
    <termref
                     def="dt-static-namespaces"
                     >statically known namespaces</termref>. If unprefixed, the
    <nt
                     def="AttributeName"
                     >AttributeName</nt> is in no namespace, but an unprefixed <nt def="TypeName"
                     >TypeName</nt> is in the
    <phrase diff="chg" at="A"><termref def="dt-def-type-ns">default type namespace</termref></phrase>.

    The <nt
                     def="AttributeName">AttributeName</nt> need not be present in the <termref
                     def="dt-is-attrs">in-scope attribute declarations</termref>,
    but the <nt
                     def="TypeName">TypeName</nt> must be present in the <termref def="dt-is-types"
                     >in-scope schema types</termref>
                  <errorref class="ST" code="0008"/>.
  </p>

               <p>
    An <nt def="AttributeTest"
                  >AttributeTest</nt> may take any of the following forms:
  </p>
               <olist>
                  <item>
                     <p>
                        <code role="parse-test">attribute()</code> and <code role="parse-test"
                           >attribute(*)</code> match any single attribute node,
regardless of its name or type annotation.</p>
                  </item>



                  <item>
                     <p>
                        <code>attribute(</code>
                        <nt def="AttributeName">AttributeName</nt>
                        <code>)</code>
matches any attribute node whose name is <nt
                           def="AttributeName"
                        >AttributeName</nt>, regardless of its type annotation.</p>
                     <p>Example: <code role="parse-test"
                           >attribute(price)</code>
matches any attribute node whose name is <code>price</code>.</p>
                  </item>

                  <item diff="add" at="A">
                     <p>
                        <code>attribute(prefix:*)</code>
                        matches any attribute node whose name is in the namespace bound to the given prefix, regardless of its type annotation.</p>
                     <p>Example: <code role="parse-test"
                           >attribute(xlink:*)</code> matches any attribute node whose name is in the namespace
                        bound to the prefix <code>xlink</code>.</p>
                  </item>

                  <item diff="add" at="A">
                     <p>
                        <code>attribute(Q{uri}*)</code>
                        matches any attribute node whose name is in the namespace given as <code>uri</code>, regardless of its type annotation.</p>
                     <p>Example: <code role="parse-test"
                           >element(Q{"http://www.w3.org/2000/svg"}*)</code> matches any attribute node whose name is in the SVG namespace.</p>
                  </item>

                  <item diff="add" at="A">
                     <p>
                        <code>attribute(*:local)</code>
                        matches any attribute node whose local name is the name given as <code>local</code>, regardless of its namespace or 
                        type annotation.</p>
                     <p>Example: <code role="parse-test"
                        >attribute(*:default-collation)</code> matches any attribute node whose local name is "default-collation".</p>
                  </item>


                  <item>
                     <p>
                        <code>attribute(</code>
                        <nt def="AttributeName">AttributeName</nt>, <nt def="TypeName">TypeName</nt>
                        <code>)</code>
matches an attribute node whose name is <nt
                           def="AttributeName">AttributeName</nt> if <code>derives-from(</code>
                        <emph>AT</emph>, <nt def="TypeName">TypeName</nt>
                        <code>)</code> is <code>true</code>, where <emph>AT</emph> is the type annotation of the attribute node.</p>

                     <p>Example: <code role="parse-test"
                           >attribute(price, currency)</code> matches an
attribute node whose name is <code>price</code> and whose type
annotation is
<code>currency</code> (or is derived from <code>currency</code>).</p>
                     <p diff="add" at="A"
                           >The <code>AttributeName</code> in this example can also be replaced by one of the forms
                        <code>prefix:*</code>, <code>Q{uri}*</code>, or <code>*:local</code>.</p>
                  </item>

                  <item>
                     <p>
                        <code>attribute(*,
</code>
                        <nt def="TypeName">TypeName</nt>
                        <code>)</code> matches an attribute
node regardless of its name, if
<code>derives-from(</code>
                        <emph>AT</emph>, <nt def="TypeName">TypeName</nt>
                        <code>)</code> is
<code>true</code>, where <emph>AT</emph> is the type annotation of the attribute node.</p>
                     <p>Example:
<code role="parse-test"
                           >attribute(*, currency)</code> matches any attribute node whose
type annotation is <code>currency</code> (or is derived from <code>currency</code>), regardless of its
name.</p>

                  </item>

               </olist>
            </div4>

            <div4 id="id-schema-attribute-test">
               <head>Schema Attribute Test</head>

               <scrap>
                  <head/>
                  <prodrecap id="SchemaAttributeTest" ref="SchemaAttributeTest"/>
                  <prodrecap id="AttributeDeclaration" ref="AttributeDeclaration"/>
                  <prodrecap ref="AttributeName"/>
               </scrap>

               <p>
    A <nt def="SchemaAttributeTest"
                     >SchemaAttributeTest</nt> matches an attribute node against a corresponding
    attribute declaration found in the <termref
                     def="dt-is-attrs">in-scope attribute declarations</termref>.
  </p>
               <p>
    The <nt def="AttributeName">AttributeName</nt> of a <nt
                     def="SchemaAttributeTest"
                     >SchemaAttributeTest</nt>
    has its prefixes expanded to a namespace URI by means of the
    <termref
                     def="dt-static-namespaces"
                     >statically known namespaces</termref>. If unprefixed, an
    <nt
                     def="AttributeName">AttributeName</nt> is in no namespace.

    If the <nt
                     def="AttributeName">AttributeName</nt> specified in the <nt
                     def="SchemaAttributeTest"
                     >SchemaAttributeTest</nt>
    is not found in the <termref def="dt-is-attrs"
                     >in-scope attribute declarations</termref>, a
    <termref
                     def="dt-static-error">static error</termref> is raised <errorref class="ST"
                     code="0008"/>.
  </p>
               <p>
    A <nt def="SchemaAttributeTest"
                  >SchemaAttributeTest</nt> matches a candidate attribute node if both of the
  following conditions are satisfied:
  </p>
               <olist>

                  <item>
                     <p>The name of the candidate node matches the specified <nt def="AttributeName"
                           >AttributeName</nt>.</p>
                  </item>

                  <item>
                     <p>
                        <code>derives-from(</code>
                        <emph>AT, ET</emph>
                        <code>)</code> is <code>true</code>, where <emph>AT</emph> is the type annotation of the candidate node and <emph>ET</emph> is the schema type declared for attribute <nt
                           def="AttributeName">AttributeName</nt> in the <termref def="dt-is-attrs"
                           >in-scope attribute declarations</termref>.</p>
                  </item>
               </olist>
               <p>Example: The <nt def="SchemaAttributeTest">SchemaAttributeTest</nt>
                  <code role="parse-test"
                     >schema-attribute(color)</code> matches a candidate attribute node if <code>color</code> is a top-level attribute declaration in the <termref
                     def="dt-is-attrs"
                     >in-scope attribute declarations</termref>, the name of the candidate node is <code>color</code>, and the type annotation of the candidate node  is the same as or derived from the schema type declared for the <code>color</code> attribute.</p>
            </div4>
         </div3>
         <div3 id="id-function-map-array-tests">
            <head>Function, Map, and Array Tests</head>
            <ulist>
               <item>
                  <p>The <code>ItemType</code>
                     <code>map(K, V)</code> matches an item <var>M</var> if (a) <var>M</var> is a 
                     <termref
                        def="dt-map"
                        >map</termref>, and (b) every
                     entry in <var>M</var> has a key that matches <code>K</code> and an associated value that matches <code>V</code>. For example,
                     <code>map(xs:integer, element(employee))</code> matches a map if all the keys in the map are integers, and all the associated
                     values are <code>employee</code> elements. Note that a map (like a sequence) carries no intrinsic type information separate
                     from the types of its entries, and the type of existing entries in a map does not constrain the type of new entries that can be
                     added to the map.</p>
                  <note>
                     <p>In consequence, <code>map(K, V)</code> matches an empty map, 
                        whatever the types <var>K</var> and <var>V</var> might be.</p>
                  </note>
               </item>
               <item>
                  <p>The <code>ItemType</code>
                     <code>map(*)</code> matches
                     any map regardless of its contents. It is equivalent to <code>map(xs:anyAtomicType, item()*)</code>.</p>
               </item>
               <item diff="add" at="A">
                  <p>The <code>ItemType</code> <code>record(K1 as T1, K2 as T2)</code> matches a map
                  having keys <code>K1</code> and <code>K2</code>, with associated values matching <code>T1</code>
                  and <code>T2</code> respectively. Record tests are described in more detail in <specref ref="id-record-test"/>.</p>
               </item>
               <item>
                  <p>The <code>ItemType</code>
                     <code>array(T)</code> matches any array in which the type of every member is <code>T</code>.</p>
               </item>
               <item>
                  <p>The <code>ItemType</code>
                     <code>array(*)</code> matches any array regardless of its contents.</p>
               </item>
               
            </ulist>
            <div4 id="id-function-test">
               <head>Function Test</head>

               <scrap>
                  <head/>
                  <prodrecap id="FunctionTest" ref="FunctionTest"/>
                  <prodrecap id="AnyFunctionTest" ref="AnyFunctionTest"/>
                  <prodrecap id="TypedFunctionTest" ref="TypedFunctionTest"/>
               </scrap>

               <p>
    A <nt def="FunctionTest">FunctionTest</nt> matches a <xtermref spec="DM31"
                     ref="dt-function-item"
                     >function</xtermref>,
    potentially also checking its <xtermref spec="DM31"
                     ref="dt-signature">function signature</xtermref>
                  <phrase role="xquery">and
    annotations (see <specref ref="id-annotations"
                     />)</phrase>.

    An <nt def="AnyFunctionTest"
                     >AnyFunctionTest</nt>
    matches any item that is a function.

    A <nt
                     def="TypedFunctionTest"
                     >TypedFunctionTest</nt> matches an
    item if it is a <xtermref spec="DM31"
                     ref="dt-function-item"
                     >function</xtermref> and the function's type signature (as defined in
    <xspecref
                     spec="DM31" ref="function-items"/>) is a <termref def="dt-subtype"
                     >subtype</termref> of the <nt def="TypedFunctionTest"
                  >TypedFunctionTest</nt>.
  </p>

               <p>
    Here are some examples of <nt def="FunctionTest">FunctionTest</nt>s:
  </p>
               <olist>
                  <item>
                     <p>
                        <code>function(*)</code> matches any function, including maps and arrays.</p>
                  </item>
                  <item role="xquery">
                     <p>
                        <code>%assertion function(*)</code> matches any <xtermref spec="DM31"
                           ref="dt-function-item"
                           >function</xtermref> if the implementation-defined function assertion <code>%assertion</code> is satisfied.
    </p>
                  </item>
                  <item>
                     <p>
                        <code>function(int, int) as int</code> matches any <xtermref spec="DM31"
                           ref="dt-function-item"
                           >function</xtermref> with the function signature <code>function(int, int) as int</code>.
    </p>
                  </item>
                  <item role="xquery">
                     <p>
                        <code>%assertion function(int, int) as int</code> matches any <xtermref
                           spec="DM31" ref="dt-function-item"
                           >function</xtermref> with the function signature <code>function(int, int) as int</code>  if the implementation-defined function assertion <code>%assertion</code> is satisfied.
    </p>
                  </item>
                  <item>
                     <p>
                        <code>function(xs:anyAtomicType) as item()*</code> matches any map, or any function with the required signature.</p>
                  </item>
                  <item>
                     <p>
                        <code>function(xs:integer) as item()*</code> matches any array, or any function with the required signature.</p>
                  </item>
               </olist>

               <p id="id-function-assertion" role="xquery">
                  <termdef id="dt-function-assertion" term="function assertion"
                        > A
    <term>function assertion</term> is a predicate that restricts the
    set of functions matched by a FunctionTest. It uses the same
    syntax as <specref
                        ref="id-annotations"
                  />.</termdef> &language; does not currently
    define any function assertions, but future versions may. Other
    specifications in the XQuery family may also use function
    assertions in the future.</p>

               <p role="xquery"
                  >Implementations are free to define their own function
    assertions, whose behavior is completely implementation-defined. Implementations may also provide a way for
    users to define their own function assertions.</p>

               <p role="xquery"
                     >An implementation may raise implementation-defined
    errors or warnings for function assertions, e.g. if the parameters
    are not correct for a given assertion. If the namespace URI of a function 
    assertion's <termref
                     def="dt-expanded-qname"
                  >expanded QName</termref> 
    is not recognized by an implementation, it is ignored, and has no
    effect on the semantics of the function test.</p>

               <note role="xquery">
                  <p>An implementation is free to raise warnings for function
    assertions that it does not recognize.</p>
               </note>

               <note role="xquery">
                  <p>Although function assertions use the same syntax as
    annotations, they are not directly related to annotations. If an
    implementation defines the annotation <code>blue</code> and uses it in
    function declarations, there is no guarantee that it will also
    define a function assertion <code>blue</code>, or that a function
    assertion named <code>blue</code> matches a function declared with
    the annotation <code>blue</code>. Of course, an implementation
    that does so may be more intuitive to users.</p>
               </note>

               <p role="xquery">
    Implementations must not define function assertions in <termref
                     def="dt-reserved-namespaces">reserved namespaces</termref>; it is is a <termref
                     def="dt-static-error">static error</termref>
                  <errorref class="ST" code="0045"
                     /> for a user to define a function assertion  in a <termref
                     def="dt-reserved-namespaces">reserved namespace</termref>.

  
  </p>

            </div4>

            <div4 id="id-map-test">
               <head>Map Test</head>
               <scrap headstyle="show">
                  <head/>
                  <prodrecap id="MapTest" ref="MapTest"/>
                  <prodrecap id="AnyMapTest" ref="AnyMapTest"/>
                  <prodrecap id="TypedMapTest" ref="TypedMapTest"/>
               </scrap>



               <p>The <nt def="MapTest">MapTest</nt>
                  <code>map(*)</code> matches any map. The <nt def="MapTest">MapTest</nt>
                  <code>map(X, Y)</code> matches any map where the type of every key
  is an instance of <code>X</code> and the type of every value is an
  instance of <code>Y</code>.</p>
               
               <p diff="add" at="A">Although the grammar for <code>TypedMapTest</code>
               allows the key to be described using the full <code>ItemType</code> syntax, the item type used must be
               a <termref def="dt-generalized-atomic-type"/>. [TODO: error code].</p>

               <p>Examples:</p>

               <p>Given a map <code>$M</code> whose keys are integers and whose
  results are strings, such as <code>map{0:"no", 1:"yes"}</code>,
  consider the results of the following expressions:
  </p>

               <ulist>
                  <item>
                     <p>
                        <code>$M instance of map(*)</code>  returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>$M instance of map(xs:integer, xs:string)</code>  returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>$M instance of map(xs:decimal, xs:anyAtomicType)</code>  returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>not($M instance of map(xs:int, xs:string))</code>  returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>not($M instance of map(xs:integer, xs:token))</code>  returns <code>true()</code>
                     </p>
                  </item>
               </ulist>

               <p>Because of the rules for subtyping of function types according to their signature, it follows that the item type
  <code>function(A) as item()*</code>, where A is an atomic type, also matches any map, regardless of the type of the keys actually
  found in the map. For example, a map whose keys are all strings can be supplied where the required type is 
  <code>function(xs:integer) as item()*</code>; a call on the map that treats it as a function with an integer argument will always succeed,
  and will always return an empty sequence.</p>



               <p>The function signature of a map matching type
  <code>map(K, V)</code>, treated as a function, is
  <code>function(xs:anyAtomicType) as V?</code>.  It is thus always a
  subtype of <code>function(xs:anyAtomicType) as item()*</code> regardless of the
  actual types of the keys and values in the map.  The rules for
                  <termref
                     def="dt-function-coercion"
                     >function coercion</termref> mean that any map can be supplied as a value in a
  context where the required type has a more specific return type,
  such as <code>function(xs:anyAtomicType) as xs:integer</code>, even when the map
  does not match in the sense required to satisfy the instance of
  operator. In such cases, a type error will only occur if an actual
  call on the map (treated as a function) returns a value that is not
  an instance of the required return type.
</p>

               <p>Examples:</p>

               <ulist>
                  <item>
                     <p>
                        <code>$M instance of function(*)</code>  returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>$M instance of function(xs:anyAtomicType) as item()*</code> returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>$M instance of function(xs:integer) as item()*</code>  returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>$M instance of function(xs:int) as item()*</code>  returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>$M instance of function(xs:string) as item()*</code>  returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>not($M instance of function(xs:integer) as xs:string)</code>  returns <code>true()</code>
                     </p>
                  </item>
               </ulist>
               <note>
                  <p>The last case might seem surprising; 
                     however, <termref
                        def="dt-function-coercion"
                        >function coercion</termref>n ensures that <code>$M</code> can be used successfully 
  anywhere that the required type is <code>function(xs:integer) as xs:string</code>.</p>
               </note>

            </div4>
            
            
            
            <div4 id="id-record-test" diff="add" at="A">
               <head>Record Test</head>
               <scrap headstyle="show">
                  <head/>
                  <prodrecap id="RecordTest" ref="RecordTest"/>
                  <prodrecap id="FieldDeclaration" ref="FieldDeclaration"/>
                  <prodrecap id="FieldName" ref="FieldName"/>
                  <prodrecap id="SelfReference" ref="SelfReference"/>    
                  <prodrecap id="ExtensibleFlag" ref="ExtensibleFlag"/>    
               </scrap>

              
               <p>A <nt def="RecordTest">RecordTest</nt> matches maps that meet specific criteria.</p>

               <p>For example, the <code>RecordTest</code>
                  <code>record(r as xs:double, i as xs:double)</code>
		             matches a map if the map has exactly two entries: an entry with key <code>"r"</code>
		                whose value is a singleton <code>xs:double</code> value, and an entry with key <code>"i"</code>
		                whose value is also a singleton <code>xs:double</code> value.</p>


               <p>If the list of fields ends with <code>",*"</code> then the record test is said to be
		                <term>extensible</term>. For example, the <code>RecordTest</code>
                  <code>record(e as element(Employee), *)</code>
		             matches a map if it has an entry with key <code>"e"</code> whose value matches <code>element(Employee)</code>,
		             regardless what other entries the map might contain.</p>
               
               <p>A record test can only constrain entries whose keys are strings, but when the record
		             test is marked as extensible, then other entries may be present in the map with non-string keys.
		             Entries whose key is a string can be expressed using an (unquoted) NCName if the key conforms to
		             NCName syntax, or using a (quoted) string literal otherwise.</p>

               <note>
                  <p>Lookup expressions have been extended so that non-NCName keys can be used without
		             parentheses: <code>employee?"middle name"</code></p>
               </note>


               <p>If the type declaration for a field is omitted, then <code>item()*</code> is assumed: that is,
		             the map entry may have any type.</p>

               <p>If the field name is followed by a question mark,
		             then the value must have the specified type if it is present, but it may also be absent. For example,
		             the <code>RecordTest</code>
                  <code>record(first as xs:string, middle? as xs:string, last as xs:string, *)</code>
		                requires the map to have string-valued entries with keys <code>"first"</code> and <code>"last"</code>;
		                it also declares that if the map has an entry with key <code>"middle"</code>, the value of that
		                entry must be a single <code>xs:string</code>. Declaring the type as 
		                <code>record(first as xs:string, middle? as xs:string?, last as xs:string, *)</code> also allows
		             the entry with key <code>"middle"</code> to be present but empty.</p>
               
               <note>
                  <p>Within an extensible record test, a <code>FieldDeclaration</code> that is marked optional 
                     and has no declared type does not constrain the
                     map in any way, so it serves no practical purpose, but it is permitted because it may have
                     documentary value.</p>
               </note>
               
               <p>If a field is declared using <code>..</code> (optionally followed
               by an occurrence indicator) in place of a <code>SequenceType</code>,
                  this indicates that the record type is recursive: the value
               of this field, if present, must be an instance of the record type being declared. For example, a record
               designed to hold error information might be declared as:</p>
               
               <eg>record(error-code as xs:QName, message as xs:string, cause? as ..)</eg>
               
               <p>A map conforms to this type if it has entries with keys <code>error-code</code> and <code>message</code>
               of the correct types, and if the <code>cause</code> entry is either absent, or is a map that itself conforms
               to this type.</p>
               
               <p>A <code>FieldDeclaration</code> that a <code>SelfReference</code> to identify its type must either
               be optional (marked with a question mark after the name), or must allow the empty sequence as a permitted
               value (marked by using the occurrence indicator <code>?</code> or <code>*</code> after the item type).
                  If the field is not optional and does not allow an empty sequence, a 
                  <termref def="dt-static-error">static error</termref> 
                  is raised <errorref class="ST" code="0140"/>.   
               This rule ensures that finite instances of the type can be constructed.</p>
               
              
               <example id="e-binary-tree">
                  <p>A record used to represent a node in a binary tree might be represented as:</p>
                  <eg>record(left? as .., value, right? as ..)</eg>
                  <p>A function to walk this tree and enumerate all the values in depth-first order might be written 
                     (using XQuery syntax) as:</p>
                  <eg><![CDATA[declare item-type binary-tree as
    record(left? as .., value, right? as ..);                 
declare function flatten($tree as binary-tree?) as item()* {
    $tree ! (flatten(?left), ?value, flatten(?right))   
}]]></eg>
               </example>
               
               <example id="e-arbitrary-tree">
                  <p>A record used to represent a node in a tree where each node has an arbitrary number
                     of children might be represented as:</p>
                  <eg>record(value, children as ..*)</eg>
                  <p>A function to walk this tree and enumerate all the values in order might be written 
                     (using XQuery syntax) as:</p>
                  <eg><![CDATA[declare item-type tree as
    record(value, children as ..*);                 
declare function flatten($tree as tree) as item()* {
    $tree?value, $tree?children ! flatten(.))   
}]]></eg>
               </example>
               
               <note>
                  <p>If a <code>RecordTest</code> contains a <code>SelfReference</code> field that is not optional,
                  and whose type does not permit an empty sequence, then it will not be possible to construct an instance.
                  So a <code>RecordTest</code> such as <code>record(a as ..)</code> serves no practical
                  purpose; but it is not disallowed.</p>
               </note>

               

               <p>Record tests describe a subset of the value space of maps. They do not define any new kinds of
		             values, or any additional operations. They are useful in many cases to describe more accurately the
		             type of a variable, function parameter, or function result, giving benefits both in the readability
		             of the code, and in the ability of the processor to detect and diagnose type errors and to optimize
		             execution.</p>

               <p>In particular, if a variable <code>$rec</code> is known to conform to a particular
		             record type, then when a lookup expression <code>$rec?field</code> is used, (a) the processor
		             can report a type error if <code>$rec</code> cannot contain an entry with name <code>field</code>,
		             and (b) the processor can make static type inferences about the type of value returned by 
		             <code>$rec?field</code>.</p>

               <note>
                  <p>A number of functions in the standard function library use maps as function arguments;
		                this is a useful technique where the information to be supplied across the interface is highly
		                variable. However, the type signature for such functions typically declares the argument type
		                as <code>map(*)</code>, which gives very little information (and places very few constraints)
		                on the values that are actually passed across. Using record tests offers the possibility of
		                improving this: for example, the options argument of <code>fn:parse-json</code>, previously
		                given as <code>map(*)</code>, can now be expressed as <code>record(liberal? as xs:boolean, 
		                   duplicates? as xs:string, escape? as xs:boolean, fallback as function(xs:string) as xs:string, *)</code>.
		                In principle the <code>xs:string</code> type used to describe the <code>duplicates</code>
		                   option could also be replaced by a schema-defined subtype
		                of <code>xs:string</code> that enumerates the permitted values (<code>"reject"</code>,
		                   "<code>use-first"</code>, "<code>use-last"</code>). 
		                </p>
                  <p>The use of a record test in the signature of such a function causes the 
		                   <termref def="dt-coercion-rules">coercion rules</termref>
		                to be invoked: so, for example, if the function expects an entry in the map to be an <code>xs:double</code>
		                value, it becomes possible to supply a map in which the corresponding entry has type <code>xs:integer</code>.</p>
                  <p>Greater precision in defining the types of such arguments also enables better type checking,
		                better diagnostics, better optimization, better documentation, and better syntax-directed
		                editing tools.</p>
               </note>

               <note>
                  <p>One of the motivations for introducing record tests is to enable better pattern matching
		             in XSLT when processing JSON input. With XML input, patterns are often based
		             around XML element names. JSON has no direct equivalent of XML's element names; matching a JSON object
		             such as <code>{longitude: 130.2, latitude: 53.4}</code> relies instead on recognizing the property
		             names appearing in the object. XSLT 4.0, by integrating record tests into pattern matching syntax,
		             allows such an object to be matched with a pattern of the form 
		                <code>match="record(longitude, latitude)"</code></p>
               </note>



            </div4>

            <div4 id="id-array-test">
               <head>Array Test</head>

               <scrap>
                  <head/>
                  <prodrecap id="ArrayTest" ref="ArrayTest"/>
                  <prodrecap id="AnyArrayTest" ref="AnyArrayTest"/>
                  <prodrecap id="TypedArrayTest" ref="TypedArrayTest"/>
               </scrap>


               <p>The <nt def="AnyArrayTest">AnyArrayTest</nt>
                  <code>array(*)</code> matches any
  array. The <nt def="TypedArrayTest"
                     >TypedArrayTest</nt>
                  <code>array(X)</code> matches any array
  in which every array member matches the <nt
                     def="SequenceType">SequenceType</nt>
                  <code>X</code>.</p>

               <p>Examples:</p>

               <ulist>
                  <item>
                     <p>
                        <code>[ 1, 2 ] instance array(*)</code> returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>[] instance of array(xs:string)</code> returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>[ "foo" ] instance of array(xs:string)</code> returns <code>true()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>[ "foo" ] instance of array(xs:integer)</code> returns <code>false()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>[(1,2),(3,4)] instance of array(xs:integer)</code> returns <code>false()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>[(1,2),(3,4)] instance of array(xs:integer+)</code> returns <code>true()</code>
                     </p>
                  </item>
               </ulist>

               <p>An array also matches certain other ItemTypes, including:</p>

               <ulist>
                  <item>
                     <p>
                        <code>item()</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>function(*)</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>function(xs:integer) as item()*</code>
                     </p>
                  </item>
               </ulist>




               <p>The function signature of an array
  matching <code>array(X)</code>, treated as a function, is
  <code>function(xs:integer) as X</code>.  It is thus always a subtype of
  <code>function(xs:integer) as item()*</code>
  regardless of the actual member types in the array.  The rules for
                  <termref
                     def="dt-function-coercion"
                     >function coercion</termref> mean that any array can be supplied as a value in
  a context where the required type has a more specific return type,
  such as <code>function(xs:integer) as xs:integer</code>, even when the array does
  not match in the sense required to satisfy the instance of
  operator. In such cases, a type error will only occur if an actual
  call on the array (treated as a function) returns a value that is
  not an instance of the required return type.</p>

            </div4>
         </div3>
            <div3 id="id-xs-error">
               <head>xs:error</head>
               <p>The type <code>xs:error</code> has an empty value space; it never appears as a dynamic type or as the content type of a dynamic element or attribute type. 
                  
                  
                  It was defined in XML Schema in the interests of making the type system complete and closed, and it is also available in &language;
                  for similar reasons.</p>
               
               <note>
                  <p>Even though it cannot occur in an instance, <code>xs:error</code> is a valid type name in a sequence type. The
                     practical uses of <code>xs:error</code> as a sequence type are limited, but they do exist. For instance, an error handling function that always raises a dynamic error 
                     never returns a value, so <code>xs:error</code> is a good choice for the return type of the function.</p>
                  
                  <p>The semantics of <code>xs:error</code> are well-defined as a consequence of the fact that <code>xs:error</code> is defined as a union type with
                     no member types. For example:</p>
                  
                  <ulist>
                     <item>
                        <p>
                           <code role="parse-test"
                              >$x instance of xs:error</code> always returns false, regardless of the value of <code>$x</code>.</p>
                     </item>
                     <item>
                        <p>
                           <code role="parse-test"
                              >$x cast as xs:error</code> fails dynamically with error <xerrorref
                                 spec="FO31" class="RG" code="0001"
                              />,  regardless of the value of <code>$x</code>.</p>
                     </item>
                     <item>
                        <p>
                           <code role="parse-test">$x cast as xs:error?</code> raises a <termref
                              def="dt-dynamic-error">dynamic error</termref>
                           <xerrorref spec="FO31" class="RG" code="0001"
                           /> if <code>exists($x)</code>, evaluates to the empty sequence if <code>empty($x)</code>.</p>
                     </item>
                     <item>
                        <p>
                           <code role="parse-test"
                              >xs:error($x)</code> has the same semantics as <code>$x cast as xs:error?</code> (see the previous bullet point)</p>
                     </item>
                     <item>
                        <p>
                           <code role="parse-test"
                              >$x castable as xs:error</code> evaluates to <code>false</code>, regardless of the value of <code>$x</code>.</p>
                     </item>
                     <item>
                        <p>
                           <code role="parse-test">$x treat as xs:error</code>  raises a <termref
                              def="dt-dynamic-error">dynamic error</termref>
                           <errorref code="0050" class="DY"
                           /> if evaluated, regardless of the value of <code>$x</code>. It never fails statically.</p>
                     </item>
                     <item role="xquery">
                        <p>
                           <code role="parse-test"
                              >let $x as xs:error := 1 return 2</code>  raises a <termref
                                 def="dt-type-error">type error</termref>
                           <errorref code="0004" class="TY"
                           />, which can be raised statically or dynamically, and need not be raised if the variable <code>$x</code> is never evaluated by the query processor.</p>
                     </item>
                     <item role="xquery">
                        <p>
                           <code>declare function ns:f($arg as xs:error) {...};</code> is a valid function declaration, but it always  raises a <termref
                              def="dt-type-error">type error</termref>
                           <errorref code="0004" class="TY"/> if the function is called.</p>
                     </item>
                  </ulist>
                  
                  <p>All of the above examples assume that <code>$x</code> is actually evaluated. If the result of the query does not depend on the value of <code>$x</code>. the rules specified in <specref
                     ref="id-errors-and-opt"
                  /> permit an implementation to avoid evaluating <code>$x</code> and thus to avoid raising an error.</p>
               </note>
               
            </div3>
         </div2>
      
      

         <div2 id="id-sequencetype-subtype">
            <head>Subtype Relationships</head>

            <p>
  Given two <termref def="dt-sequence-type"
                  >sequence types</termref>, it is possible to determine if one is a subtype of the other.
  <termdef
                  term="subtype" id="dt-subtype">A <termref def="dt-sequence-type"
                     >sequence type</termref>
                  <code>A</code> is a <term>subtype</term> of a sequence type <code>B</code>
  if the judgement <code>subtype(A, B)</code> is true.</termdef>
  
  When the judgement <code>subtype(A, B)</code> is true, it is always the case that for any value <code>V</code>, <code>(V instance of A)</code> implies <code>(V instance of B)</code>.</p>


            <div3 id="id-seqtype-subtype">
               <head>The judgement <code>subtype(A, B)</code>
               </head>

               <p>The judgement <code>subtype(A, B)</code> determines if the <termref
                     def="dt-sequence-type">sequence type</termref>
                  <code>A</code>
    is a <termref def="dt-subtype"
                     >subtype</termref> of the sequence type <code>B</code>.

    <code>A</code> can either be <code>empty-sequence()</code>, <code>xs:error</code>, or an <nt
                     def="ItemType"
                     >ItemType</nt>, <code>Ai</code>, possibly followed by an occurrence indicator. Similarly
    <code>B</code> can either be <code>empty-sequence()</code>, <code>xs:error</code>, or an <nt
                     def="ItemType"
                     >ItemType</nt>, <code>Bi</code>, possibly followed by an occurrence indicator.
    The result of the <code>subtype(A, B)</code> judgement can be determined from the table below, which makes use of the auxiliary judgement <code>subtype-itemtype(Ai, Bi)</code> defined
    in <specref
                     ref="id-itemtype-subtype"/>.
    </p>

               <table role="medium">
                  <tbody>
                     <tr>
                        <th rowspan="2" colspan="2"/>
                        <th colspan="6">
                           <termref def="dt-sequence-type">Sequence type</termref>
                           <code>B</code>
                        </th>
                     </tr>
                     <tr>
                        <th>
                           <code>empty-sequence()</code>
                        </th>
                        <th>
                           <code>Bi?</code>
                        </th>
                        <th>
                           <code>Bi*</code>
                        </th>
                        <th>
                           <code>Bi</code>
                        </th>
                        <th>
                           <code>Bi+</code>
                        </th>
                        <th>xs:error</th>
                     </tr>
                     <tr>
                        <th rowspan="6">
                           <termref def="dt-sequence-type">Sequence type</termref>
                           <code>A</code>
                        </th>
                        <th>
                           <code>empty-sequence()</code>
                        </th>
                        <td>true</td>
                        <td>true</td>
                        <td>true</td>
                        <td>false</td>
                        <td>false</td>
                        <td>false</td>
                     </tr>
                     <tr>
                        <th>
                           <code>Ai?</code>
                        </th>
                        <td>false</td>
                        <td>
                           <code>subtype-itemtype(Ai, Bi)</code>
                        </td>
                        <td>
                           <code>subtype-itemtype(Ai, Bi)</code>
                        </td>
                        <td>false</td>
                        <td>false</td>
                        <td>false</td>
                     </tr>
                     <tr>
                        <th>
                           <code>Ai*</code>
                        </th>
                        <td>false</td>
                        <td>false</td>
                        <td>
                           <code>subtype-itemtype(Ai, Bi)</code>
                        </td>
                        <td>false</td>
                        <td>false</td>
                        <td>false</td>
                     </tr>
                     <tr>
                        <th>
                           <code>Ai</code>
                        </th>
                        <td>false</td>
                        <td>
                           <code>subtype-itemtype(Ai, Bi)</code>
                        </td>
                        <td>
                           <code>subtype-itemtype(Ai, Bi)</code>
                        </td>
                        <td>
                           <code>subtype-itemtype(Ai, Bi)</code>
                        </td>
                        <td>
                           <code>subtype-itemtype(Ai, Bi)</code>
                        </td>
                        <td>false</td>
                     </tr>
                     <tr>
                        <th>
                           <code>Ai+</code>
                        </th>
                        <td>false</td>
                        <td>false</td>
                        <td>
                           <code>subtype-itemtype(Ai, Bi)</code>
                        </td>
                        <td>false</td>
                        <td>
                           <code>subtype-itemtype(Ai, Bi)</code>
                        </td>
                        <td>false</td>
                     </tr>
                     <tr>
                        <th>
                           <code>xs:error</code>
                        </th>
                        <td>true</td>
                        <td>true</td>
                        <td>true</td>
                        <td>true</td>
                        <td>true</td>
                        <td>true</td>
                     </tr>
                  </tbody>
               </table>


               <p>
                  <code>xs:error+</code> is treated the same way as <code>xs:error</code> in the above table. <code>xs:error?</code> and <code>xs:error*</code> are treated the same way as <code>empty-sequence()</code>.</p>

            </div3>

            <div3 id="id-itemtype-subtype">
               <head>The judgement <code>subtype-itemtype(A, B)</code>
               </head>

               <p>The judgement <code>subtype-itemtype(A, B)</code> determines whether the <nt
                     def="ItemType">ItemType</nt>
                  <code>A</code>
    is a <termref def="dt-subtype"
                     >subtype</termref> of the ItemType <code>B</code>.</p>
               
               <p diff="add" at="A">Before applying these rules, any ItemType written
               as <code>item-type(N)</code> is replaced with the definition of the named item type
                  <code>N</code>, recursively. The rules are written in terms of the lexical
               form of the two ItemTypes, but it is assumed that trivial variations are first 
               eliminated: comments and unnecessary whitespace are removed, lexical QNames are
               replaced by URI-qualified names applying appropriate defaults in the case of unprefixed
               names, equivalent forms such as <code>element()</code> and <code>element(*)</code>
               are normalized.</p>
               
               <p><code>A</code> is a subtype of <code>B</code>
    if and only if at least one of the following conditions applies:</p>

               <olist>
                  <item>
                     <p>
                        <emph>General rules:</emph>
                     </p>
                     <olist>
                        <item diff="chg" at="A">
                           <p><code>A</code> is <code>xs:error</code>.</p>
                        </item>
                        <item>
                           <p><code>B</code> is <code>item()</code>.</p>
                        </item>
                        <item diff="chg" at="A">
                           <p><code>A</code> and <code>B</code> are the same <code>ItemType</code>.</p> 
                        </item>
                        <item diff="chg" at="A">
                           <p>There is an <nt def="ItemType">ItemType</nt>
                              <code>C</code> such that <code>subtype-itemtype(A, C)</code>
                        and <code>subtype-itemtype(C, B)</code>. (This is referred to below as the <term>transitivity rule</term>).</p>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>
                        <emph>Conditions for atomic and union types:</emph>
                     </p>
                     <olist>
                        <item>
                           <p><code>A</code> and <code>B</code> are <termref def="dt-generalized-atomic-type">generalized atomic types</termref>, 
                              and <code>derives-from(A, B)</code> returns <code>true</code>.</p>
                        </item>
                        <item>
                           <p><code>A</code> is the name of a pure union type, 
                              and every type <code>T</code> in the transitive membership of <code>A</code>
                              satisfies <code>subtype-itemType(T, B)</code>.</p>
                        </item>
                        <item diff="add" at="A">
                           <p><code>A</code> is a <code>LocalUnionType</code> in the form <code>union(T1, T2, ...)</code>
                              and every type <code>T</code> in (T1, T2, ...) satisfies <code>subtype-itemType(T, B)</code>.</p>
                        </item>
                        <item diff="add" at="A">
                           <p><code>A</code> is an <termref def="dt-EnumerationType"/>, and <code>B</code> matches
                              every string literal in the enumeration of <code>A</code>.</p>
                           <note>
                              <p>This means, for example, that the type <code>enum("red", "green", "blue")</code>
                              is a subtype of <code>enum("red", "green", "blue", "yellow")</code>, as
                              well as being a subtype of <code>xs:string</code>.</p>
                           </note>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>
                        <emph>Conditions for node types:</emph>
                     </p>
                     <olist>
                        <item>
                           <p><code>A</code> is a <nt def="KindTest">KindTest</nt> and <code>B</code> is <code>node()</code>.</p>
                        </item>
                        <item>
                           <p><code>A</code> is <code>processing-instruction(N)</code> for any name <code>N</code>,
                              and <code>B</code> is <code>processing-instruction()</code>.</p>
                        </item>
                        <item>
                           <p><code>A</code> is <code>document-node(E)</code> for any <nt def="ElementTest">ElementTest</nt> <code>E</code>,
                              and <code>B</code> is <code>document-node()</code>.</p>
                        </item>
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>document-node(Ae)</code></p></item>
                              <item><p><code>B</code> is <code>document-node(Be)</code></p></item>
                              <item><p><code>subtype-itemtype(Ae, Be)</code></p></item>
                           </olist>
                        </item>
                        <item>
                           <p><code>A</code> is an <nt def="ElementTest">ElementTest</nt> and
                              <code>B</code> is <code>element()</code> (or <code>element(*)</code>).</p>
                        </item>
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is either <code>element(An)</code> or <code>element(An, T)</code>  
                                 or <code>element(An, T?)</code> for some type T</p></item>
                              <item><p><code>B</code> is either <code>element(Bn)</code> or <code>element(Bn, xs:anyType?)</code></p></item>
                              <item><p>the <termref def="dt-expanded-qname">expanded QName</termref> of <code>An</code> 
                                 equals the <termref def="dt-expanded-qname">expanded QName</termref> of <code>Bn</code>.</p></item>
                           </olist>
                        </item>
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>element(An, At)</code></p></item>
                              <item><p><code>B</code> is <code>element(Bn, Bt)</code></p></item>
                              <item><p>the <termref def="dt-expanded-qname">expanded QName</termref> of <code>An</code> equals the <termref
                                    def="dt-expanded-qname">expanded QName</termref> of <code>Bn</code></p></item>
                              <item><p><code>derives-from(At, Bt)</code>.</p></item>
                           </olist>
                           <p>TODO: An and Bn as wildcards</p>
                        </item>
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is either <code>element(An, At)</code> or <code>element(An, At?)</code></p></item>
                              <item><p><code>B</code> is <code>element(Bn, Bt?)</code></p></item>
                              <item><p>the <termref def="dt-expanded-qname">expanded QName</termref> of <code>An</code> equals the <termref
                                 def="dt-expanded-qname">expanded QName</termref> of <code>Bn</code></p></item>
                              <item><p><code>derives-from(At, Bt)</code>.</p></item>
                           </olist>
                           <p>TODO: An and Bn as wildcards</p>
                        </item>
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>Ai</code> is either <code>element(*, At)</code> or <code>element(N, At)</code> for any name N</p></item>
                              <item><p><code>Bi</code> is <code>element(*, Bt)</code></p></item>
                              <item><p><code>derives-from(At, Bt)</code>.</p></item>
                           </olist>
                           
                        </item>
                        
                        
                        
                        
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is either <code>element(*, At)</code>, <code>element(*, At?)</code>, 
                                 <code>element(N, At)</code>, or <code>element(N, At?)</code> for any name N</p></item>
                              <item><p><code>B</code> is <code>element(*, Bt?)</code></p></item>
                              <item><p><code>derives-from(At, Bt)</code>.</p></item>
                           </olist>
                        </item>

                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>schema-element(An)</code></p></item>
                              <item><p><code>B</code> is <code>schema-element(Bn)</code></p></item>
                              <item><p>every element declaration that is an actual member of the substitution group of <code>An</code> 
                                 is also an actual member of the substitution group of <code>Bn</code></p></item>
                           </olist>
                           <note>
                                <p>The fact that <code>P</code> is a member of the substitution group of <code>Q</code> 
                                   does not mean that every element declaration in the substitution group of <code>P</code> 
                                   is also in the substitution group of <code>Q</code>. For example, <code>Q</code> might 
                                   block substitution of elements whose type is derived by extension, while <code>P</code> does not.</p>
                           </note>
                        </item>

                        <item>
                           <p><code>A</code> is an <nt
                                 def="AttributeTest">AttributeTest</nt> and
                              <code>B</code> is either <code>attribute()</code> or <code>attribute(*)</code>
                           </p>
                        </item>
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is either <code>attribute(An)</code> or <code>attribute(An, T)</code> 
                                 for any type T.</p></item>
                              <item><p><code>B</code> is either <code>attribute(Bn)</code> or <code>attribute(Bn, xs:anyType)</code></p></item>
                              <item><p>the <termref def="dt-expanded-qname">expanded QName</termref> of <code>An</code> equals the <termref
                                 def="dt-expanded-qname">expanded QName</termref> of <code>Bn</code></p></item>
                           </olist>
                           
                           </item>
                        
                        
                        
                        
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>attribute(An, At)</code></p></item>
                              <item><p><code>B</code> is <code>attribute(Bn, Bt)</code></p></item>
                              <item><p>the <termref def="dt-expanded-qname">expanded QName</termref> of 
                                 <code>An</code> equals the <termref
                                 def="dt-expanded-qname">expanded QName</termref> of <code>Bn</code></p></item>
                              <item><p><code>derives-from(At, Bt)</code>.</p></item>
                           </olist>
                           
                        </item>
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is either <code>attribute(*, At)</code>, or <code>attribute(N, At)</code> for any name N</p></item>
                              <item><p><code>B</code> is <code>attribute(*, Bt)</code></p></item>
                              <item><p><code>derives-from(At, Bt)</code>.</p></item>
                           </olist>
                        </item>

                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>schema-attribute(An)</code></p></item>
                              <item><p><code>B</code> is <code>schema-attribute(Bn)</code></p></item>
                              <item><p>the <termref
                                 def="dt-expanded-qname"
                                 >expanded QName</termref> of <code>An</code> equals the <termref
                                 def="dt-expanded-qname"
                                 >expanded QName</termref> of <code>Bn</code></p></item>
                              <item><p><code>derives-from(At, Bt)</code>.</p></item>
                           </olist>
                        </item>
                     </olist>
                  </item>
                  <item>
                     <p>
                        <emph>Conditions for functions, maps and arrays:</emph>
                     </p>
                     <olist>
                        <item><p>All the following are true:</p>
                        <olist>
                           <item><p><code>A</code> is a <nt def="FunctionTest">FunctionTest</nt>
                              <phrase role="xquery"> with annotations <code>[AnnotationsA]</code></phrase></p></item>
                           <item><p><code>Bi</code> is <code>
                                 <phrase role="xquery">[AnnotationsB]</phrase> function(*)</code></p></item>
                           <item role="xquery"><p><code>subtype-assertions(AnnotationsA, AnnotationsB)</code>, 
                              where <code>[AnnotationsB]</code> and <code>[AnnotationsA]</code> 
                              are optional lists of one or more annotations.</p></item>
                        </olist></item>
                        

                        <item>
                           <p>All the following are true:</p>
                              <olist>
                                 <item><p><code>A</code> is <code>
                                    <phrase role="xquery"
                                       >AnnotationsA </phrase>function(Aa_1, Aa_2, ... Aa_M) as Ar</code></p></item>
                                 <item><p><code>B</code> is <code>
                                    <phrase role="xquery"
                                       >AnnotationsB </phrase>function(Ba_1, Ba_2, ... Ba_N) as Br</code></p></item>
                                 <item role="xquery"><p><code>[AnnotationsB]</code> and <code>[AnnotationsA]</code> are optional lists of one or more annotations;</p></item>
                                 <item><p><code>N</code> (arity of B) equals <code>M</code> (arity of A)
                                    </p></item>
                                 <item><p><code>subtype(Ar, Br)</code></p></item>
                                 <item><p>for all values of <code>I</code> between 1 and <code>N</code>, <code>subtype(Ba_I, Aa_I)</code>
                                    <phrase role="xquery">, and <code>subtype-assertions(AnnotationsA, AnnotationsB)</code>
                                    </phrase></p></item>
                              </olist>
                           
              
                           <note>
                              <p>Function return types are covariant because this rule invokes subtype(Ar, Br) for  return types. 
                                 Function arguments are contravariant because this rule invokes subtype(Ba_I, Aa_I) for arguments.</p>
                           </note>
                        </item>

                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>map(K, V)</code>,
                                 for any <code>K</code> and <code>V</code></p></item>
                              <item><p><code>B</code> is <code>map(*)</code></p></item>
                           </olist>
                        </item>
                        
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>map(Ka, Va)</code></p></item>
                              <item><p><code>B</code> is <code>map(Kb, Vb)</code></p></item>
                              <item><p><code>subtype-itemtype(Ka, Kb)</code></p></item>
                              <item><p><code>subtype(Va, Vb)</code></p></item>
                           </olist>
                           
                        </item>
                        
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>map(*)</code>
                                 (or, because of the transitivity rules, any other map type)</p></item>
                              <item><p><code>B</code> is <code>function(*)</code></p></item>
                           </olist>
                        </item>
                        
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>map(*)</code>
                                 (or, because of the transitivity rules, any other map type)</p></item>
                              <item><p><code>B</code> is 
                                 <code>function(xs:anyAtomicType) as item()*</code></p></item>
                           </olist>
                        </item>
                        
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>map(K, V)</code></p></item>
                              <item><p><code>B</code> is <code>function(xs:anyAtomicType) as V?</code></p></item>
                           </olist>
                        </item>
                        
                        
                        
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>array(X)</code></p></item>
                              <item><p><code>B</code> is <code>array(*)</code></p></item>
                           </olist>
                        </item>
                        
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>array(X)</code></p></item>
                              <item><p><code>B</code> is <code>array(Y)</code></p></item>
                              <item><p><code>subtype(X, Y)</code></p></item>
                           </olist>
                        </item>
                        
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>array(*)</code>
                                 (or, because of the transitivity rules, any other array type)</p></item>
                              <item><p><code>B</code> is <code>function(*)</code></p></item>
                           </olist>
                        </item>
                        
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>array(*)</code>
                                 (or, because of the transitivity rules, any other array type)</p></item>
                              <item><p><code>Bi</code> is <code>function(xs:integer) as item()*</code></p></item>
                           </olist>
                        </item>
                      
                        <item>
                           <p>All the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is <code>array(X)</code></p></item>
                              <item><p><code>B</code> is <code>function(xs:integer) as X</code></p></item>
                           </olist>
                        </item>
                        

                        <item diff="add" at="A">
                           <p>All of the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is a record test</p></item>
                              <item><p><code>B</code> is <code>map(*)</code></p></item>
                           </olist>
                        </item>
                        
                        <item diff="add" at="A">
                           <p>All of the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is a record test</p></item>
                              <item><p><code>A</code> is not extensible</p></item>
                              <item><p><code>B</code> is <code>map(K, V)</code></p></item>
                              <item><p><code>K</code> is either <code>xs:string</code> or <code>xs:anyAtomicType</code></p></item>
                              <item><p>For every field <code>F</code> in <code>A</code>,
                                 where <code>T</code> is the declared type of <code>F</code> (or its default, <code>item()*</code>,
                                 <code>subtype(T, V)</code> is true.</p></item>
                           </olist>
                        </item>
                        
                        <item diff="add" at="A">
                           <p>All of the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is a record test</p></item>
                              <item><p><code>B</code> is a record test</p></item>
                              <item><p><code>A</code> is extensible</p></item>
                              <item><p><code>B</code> is extensible</p></item>
                              <item><p>For every field <code>F</code> that is declared in <code>B</code>,
                                 where the declared type of <code>F</code> is <code>U</code>,
                                 one of the following is true:</p>
                                 <olist>
                                    <item>
                                       <p>All of the following are true:</p>
                                       <olist>
                                          <item><p><code>F</code> is also declared in <code>A</code>,
                                          with required type T</p></item>
                                          <item><p>If the field <code>F</code> in <code>B</code>
                                             is mandatory, then the field <code>F</code> in <code>A</code>is also 
                                             mandatory</p></item>
                                          <item><p><code>subtype(T, U)</code></p></item>
                                       </olist>
                                    </item>
                                    <item><p>TODO: other possibilities?</p></item>
                                 </olist>
                              </item>
                           </olist>
                        </item>
                        
                        <item diff="add" at="A">
                           <p>All of the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is a record test</p></item>
                              <item><p><code>B</code> is a record test</p></item>
                              <item><p><code>A</code> is not extensible</p></item>
                              <item><p><code>B</code> is extensible</p></item>
                              <item><p>For every field <code>F</code> that is declared in <code>B</code>,
                                 where the declared type of <code>F</code> is <code>U</code>,
                                 one of the following is true:</p>
                                 <olist>
                                    <item>
                                       <p>All of the following are true:</p>
                                       <olist>
                                          <item><p><code>F</code> is also declared in <code>A</code>,
                                             with required type T</p></item>
                                          <item><p>If the field <code>F</code> in <code>B</code>
                                             is mandatory, then the field <code>F</code> in <code>A</code>is also 
                                             mandatory</p></item>
                                          <item><p><code>subtype(T, U)</code></p></item>
                                       </olist>
                                    </item>
                                    <item><p>TODO: other possibilities?</p></item>
                                 </olist>
                              </item>
                           </olist>
                        </item>
                        
                        <item diff="add" at="A">
                           <p>All of the following are true:</p>
                           <olist>
                              <item><p><code>A</code> is a record test</p></item>
                              <item><p><code>B</code> is a record test</p></item>
                              <item><p><code>A</code> is not extensible</p></item>
                              <item><p><code>B</code> is not extensible</p></item>
                              <item><p>For every field <code>F</code> that is declared in <code>B</code>,
                                 where the declared type of <code>F</code> is <code>U</code>,
                                 one of the following is true:</p>
                                 <olist>
                                    <item>
                                       <p>All of the following are true:</p>
                                       <olist>
                                          <item><p><code>F</code> is also declared in <code>A</code>,
                                             with required type T</p></item>
                                          <item><p>If the field <code>F</code> in <code>B</code>
                                             is mandatory, then the field <code>F</code> in <code>A</code>is also 
                                             mandatory</p></item>
                                          <item><p><code>subtype(T, U)</code></p></item>
                                       </olist>
                                    </item>
                                    <item><p>TODO: other possibilities?</p></item>
                                 </olist>
                              </item>
                           </olist>
                        </item>
                     </olist>
                  </item>

               </olist>

            </div3>

 

            <div3 id="id-assertions-subtype" role="xquery">
               <head>The judgement <code>subtype-assertions(AnnotationsA, AnnotationsB)</code>
               </head>

               <p>
      The judgement <code>subtype-assertions(AnnotationsA, AnnotationsB)</code> determines if <code>AnnotationsA</code> is a subtype of <code>AnnotationsB</code>,
      where <code>AnnotationsA</code> and <code>AnnotationsB</code> are annotation lists from two FunctionTests.
      It is defined to ignore function assertions in namespaces not understood by the XQuery
      implementation. For assertions that are understood, their effect on the result
      of <code>subtype-assertions()</code> is implementation defined.
    </p>

               <p>
      The following examples are some possible ways to define <code>subtype-assertions()</code> for some
      implementation defined assertions in the <code>local</code> namespace. These examples assume that some implementation uses annotations to label functions as deterministic or nondeterministic, and treats deterministic functions as a subset of nondeterministic functions. In this implementation, nondeterministic functions are not a subset of deterministic functions.
    </p>

               <ulist>
                  <item>
                     <p>
        AnnotationsA is
        <eg><![CDATA[%local:inline]]></eg>
        It has no influence on the outcome of <code>subtype-assertions()</code>.
      </p>
                  </item>
                  <item>
                     <p>
        AnnotationsA is
        <eg><![CDATA[%local:deterministic]]></eg>
        AnnotationsB is
        <eg><![CDATA[%local:nondeterministic]]></eg>
        Since deterministic functions are a subset of nondeterministic functions, <code>subtype-assertions()</code> is true.
      </p>
                  </item>
                  <item>
                     <p>
        AnnotationsA contains
        <eg><![CDATA[%local:nondeterministic]]></eg>
        AnnotationsB is empty.
        If FunctionTests without the <code>%local:nondeterministic</code> annotation only match deterministic functions,
        <code>subtype-assertions()</code> must be false.
      </p>
                  </item>
               </ulist>

            </div3>

         </div2>
         

      </div1>



   <div1 id="id-expressions">
      <head>Expressions</head>
      <p>This section discusses each of the basic kinds of expression. Each kind of expression has a name such as <code>PathExpr</code>, which is introduced on the left side of the grammar production that defines the expression. Since &language; is a composable language, each kind of expression is defined in terms of other expressions whose operators have a higher precedence. In this way, the precedence of operators is represented explicitly in the grammar.</p>
      <p>The order in which expressions are discussed in this document does not reflect the order of operator precedence. In general, this document introduces the simplest kinds of expressions first, followed by more complex expressions.  For the complete grammar, see Appendix [<specref
            ref="nt-bnf"/>].</p>
      <p>
         <phrase role="xpath">The highest-level symbol in the XPath grammar is XPath.</phrase>
         <phrase role="xquery">
            <termdef id="dt-query" term="query"
                  >A <term>query</term> consists of one or more <termref def="dt-module"
                  >modules</termref>.</termdef>  If a query is executable, one of its modules has a <termref
               def="dt-queryBody"
               >Query Body</termref>  containing an expression whose value is the result of the query. An expression is represented in the XQuery grammar by the symbol <nt
               def="Expr">Expr</nt>.</phrase>
      </p>
      <scrap>
         <head/>
         <prodrecap ref="XPath" id="XPath" role="xpath"/>
         <prodrecap ref="Expr" id="Expr"/>
         <prodrecap id="ExprSingle" ref="ExprSingle"/>
      </scrap>
      <p>The &language; operator that has lowest precedence is the <termref def="dt-comma-operator"
            >comma operator</termref>, which is used to combine two operands to form a sequence. As shown in the grammar, a general expression (<nt
            def="Expr">Expr</nt>) can consist of multiple <nt def="ExprSingle"
            >ExprSingle</nt> operands, separated by commas. The name <nt def="ExprSingle"
            >ExprSingle</nt> denotes an expression that does not contain a top-level <termref
            def="dt-comma-operator">comma operator</termref> (despite its name, an <nt
            def="ExprSingle"
         >ExprSingle</nt> may evaluate to a sequence containing more than one item.)</p>
      <p>The symbol <nt def="ExprSingle"
            >ExprSingle</nt> is used in various places in the grammar where an expression is not allowed to contain a top-level comma. For example, each of the arguments of a function call must be an <nt
            def="ExprSingle"
         >ExprSingle</nt>, because commas are used to separate the arguments of a function call.</p>
      <p>After the comma, the expressions that have next lowest precedence are
<phrase role="xquery">
            <nt def="FLWORExpr">FLWORExpr</nt>,</phrase>
         <phrase role="xpath">
            <nt def="ForExpr">ForExpr</nt>, <nt def="LetExpr">LetExpr</nt>, </phrase>
         <nt def="QuantifiedExpr">QuantifiedExpr</nt>,
<phrase role="xquery">
            <nt def="SwitchExpr">SwitchExpr</nt>, <nt def="TypeswitchExpr"
            >TypeswitchExpr</nt>, </phrase>
         <nt def="IfExpr">IfExpr</nt>,
<phrase role="xquery">
            <nt def="TryCatchExpr">TryCatchExpr</nt>, </phrase>
and <nt def="OrExpr"
         >OrExpr</nt>. Each of these expressions is described in a separate section of this document.</p>
      
      <div2 id="with-expressions" diff="add" at="A">
         <head>Setting Namespace Context</head>
         <scrap headstyle="suppress">
            <head/>
            <prodrecap id="WithExpr" ref="WithExpr"/>
            <prodrecap id="NamespaceDeclaration" ref="NamespaceDeclaration"/>
            <prodrecap role="xquery" ref="URILiteral"/>
            <prodrecap ref="EnclosedExpr"/>
         </scrap>
         
         <p>The namespace context for an expression can be set using a construct of the form:</p>
         
         <eg><![CDATA[with xmlns="http://example.com/,
     xmlns:a="http://example.com/a" {
       /doc/a:element/b
}]]></eg>
         
         <p>The static context for the enclosed expression will be the same as the static context for the
         <nt def="WithExpr">WithExpr</nt> itself, except for modifications defined below.</p>
         
         <p>The <code>QName</code> used in a <nt def="NamespaceDeclaration">NamespaceDeclaration</nt>
         must be either <code>xmlns</code> or <code>xmlns:prefix</code> where <code>prefix</code> is some
         <code>NCName</code>.</p>
         
         <p>If more than one <nt def="NamespaceDeclaration">NamespaceDeclaration</nt> specifies
         the same <code>QName</code>, all but the last of the duplicates are ignored.</p>
         
         <p>If the QName is <code>"xmlns"</code> then:</p>
         <ulist>
            <item>
               <p>If the <code role="xquery">URILiteral</code><code role="xpath">StringLiteral</code> is a zero-length string:</p>
               <ulist>
                  <item><p>The <termref def="dt-def-element-ns"/> is set to <emph>absent</emph>, meaning
                  that unprefixed element names are treated as being in no namespace.</p></item>
                  <item><p>Any binding for the zero-length prefix in the 
                     <termref def="dt-static-namespaces"/> is removed.</p></item>
               </ulist>
            </item>
            <item>
               <p>If the <code role="xquery">URILiteral</code><code role="xpath">StringLiteral</code> is not zero-length:</p>
               <ulist>
                  <item><p>The <termref def="dt-def-element-ns"/> is set to the supplied namespace URI, meaning
                     that unprefixed element names are treated as being in that namespace.</p></item>
                  <item><p>A binding that maps the zero-length prefix to the specified namespace URI is
                     added to the <termref def="dt-static-namespaces"/>.</p></item>
               </ulist>
            </item>
         </ulist>
         
         <p>If the QName is in the form <code>xmlns:prefix</code> then the <code role="xquery">URILiteral</code><code role="xpath">StringLiteral</code>
            must not be zero-length; the effect is that a binding that maps the given <code>prefix</code> to 
            the specified namespace URI is added to the <termref def="dt-static-namespaces"/>.</p>
         
         <p>For example, the expression:</p>
         
         <eg>with xmlns="http://www.acme.com/" {a/b[c=3]}</eg>
         
         <p>is equivalent to the expression:</p>
         
         <eg>Q{http://www.acme.com/}a/Q{http://www.acme.com/}b[Q{http://www.acme.com/}c=3]</eg>
         
      </div2>
      
      <div2 id="comments">
         <head>Comments</head>
         <scrap headstyle="suppress">
            <head/>
            <prodrecap id="Comment" ref="Comment"/>
            <prodrecap id="CommentContents" ref="CommentContents"/>
         </scrap>
         <p>Comments may be used to provide information relevant to programmers who read <phrase
            role="xquery">a query, either in the <termref def="dt-prolog"
               >Prolog</termref> or in the <termref def="dt-queryBody">Query Body</termref>
         </phrase>
            <phrase role="xpath"
               >an expression</phrase>. Comments are lexical constructs only, and do not affect  <phrase
                  role="xquery">query</phrase>
            <phrase role="xpath">expression</phrase> processing.</p>
         <p>Comments are strings, delimited by the symbols <code>(:</code> and <code>:)</code>. Comments may be nested.</p>
         
         
         <p>A comment may be used anywhere <termref def="IgnorableWhitespace"
            >ignorable whitespace</termref> is allowed (see <specref
               ref="DefaultWhitespaceHandling"/>).</p>
         <p>The following is an example of a comment:</p>
         <eg><![CDATA[(: Houston, we have a problem :)]]></eg>
      </div2>
      
      <div2 id="id-primary-expressions">
         <head>Primary Expressions</head>
         <p>
            <termdef id="dt-primary-expression" term="primary expression">
               <term>Primary expressions</term> are the basic primitives of the
	 language. They include literals, variable references,  context item expressions, <phrase
                  role="xquery"
               >constructors, </phrase> and function calls. A primary expression may also be created by enclosing any expression in parentheses, which is sometimes helpful in controlling the precedence of operators.</termdef>
            <phrase role="xquery">Node Constructors are described in <specref ref="id-constructors"
               />.</phrase>Map and Array Constructors are described in <specref
               ref="id-maps-and-arrays"/>.
<phrase role="xquery">String Constructors are described in <specref
               ref="id-string-constructors"/>.</phrase>
</p>
         <scrap>
            <head/>
            <prodrecap id="PrimaryExpr" ref="PrimaryExpr"/>
            <prodrecap id="FunctionItemExpr" ref="FunctionItemExpr"/>
            <!--<prodrecap id="TildeExpr" ref="TildeExpr"/>-->
         </scrap>
 
         <!--<p>The usage of the <nt def="TildeExpr"/> is described in <specref ref="id-arrow-operator"/>.</p>
-->
         <div3 id="id-literals">
            <head>Literals</head>
            <p>
               <termdef id="dt-literal" term="literal"
                  >A <term>literal</term> is a direct syntactic representation of an
		atomic value.</termdef> &language; supports two kinds of literals: numeric literals and
		string literals.</p>
            <scrap>
               <head/>
               <prodrecap id="Literal" ref="Literal"/>
               <prodrecap id="NumericLiteral" ref="NumericLiteral"/>
               <prodrecap id="IntegerLiteral" ref="IntegerLiteral"/>
               <prodrecap id="DecimalLiteral" ref="DecimalLiteral"/>
               <prodrecap id="DoubleLiteral" ref="DoubleLiteral"/>
               <prodrecap id="StringLiteral" ref="StringLiteral"/>
               <prodrecap id="PredefinedEntityRef" ref="PredefinedEntityRef" role="xquery"/>
               <prodrecap id="EscapeQuot" ref="EscapeQuot"/>
               <prodrecap id="EscapeApos" ref="EscapeApos"/>
               <prodrecap id="Digits" ref="Digits"/>
            </scrap>
            <p> The value of a <term>numeric literal</term> containing no "<code>.</code>" and no <code>e</code> or <code>E</code> character is  an atomic value of type <code>xs:integer</code>. The value of a numeric literal containing "<code>.</code>" but no <code>e</code> or <code>E</code> character is an atomic value of type <code>xs:decimal</code>. The value of a numeric literal containing an <code>e</code> or <code>E</code> character is an atomic value of type <code>xs:double</code>. The value of the numeric literal is determined by casting it to the
appropriate type according to the rules for casting from <code>xs:untypedAtomic</code>
to a numeric type as specified in <xspecref
                  spec="FO31" ref="casting-from-strings"/>.</p>

            <note>
               <p>The effect of the above rule is that in the case of an integer or decimal literal, a dynamic error <xerrorref
                     spec="FO31" class="AR" code="0002"
                     /> will generally be raised if the literal is outside the range of values supported by the implementation (other options are available: see <xspecref
                     spec="FO31" ref="op.numeric"/> for details.)</p>
               <p role="xquery">The limits of numeric datatypes are specified in <specref
                     ref="id-data-model-conformance"/>.</p>
               <p role="xpath"
                     >The XML Schema specification allows implementations to impose a limit (which
must not be less than 18 digits) on the size of integer and decimal
values. The full range of values of built-in subtypes of <code>xs:integer</code>,
such as <code>xs:long</code> and <code>xs:unsignedLong</code>, can be supported only if the
limit is 20 digits or higher. Negative numbers such as the minimum
value of <code>xs:long</code> (<code>-9223372036854775808</code>) are technically unary
expressions rather than literals, but implementations may prefer to
ensure that they are expressible.</p>
            </note>

            <p id="id-string-literal"
                  >The value of a <term>string literal</term> is an atomic value whose  type is <code>xs:string</code> and whose value is the string denoted by the characters between the
		delimiting apostrophes or quotation marks. If the literal is delimited by apostrophes, two adjacent apostrophes within the literal are interpreted as a single apostrophe. Similarly, if the literal is delimited by quotation marks, two adjacent quotation marks within the literal are interpreted as one quotation mark.</p>

            <p role="xquery"
                  >A string literal may contain a <term>predefined entity reference</term>. <termdef
                  term="predefined entity reference" id="dt-predefined-entity-reference"
                     >A <term>predefined entity reference</term> is a short sequence of characters, beginning with an ampersand, that represents a single character that might otherwise have syntactic significance.</termdef> Each predefined entity reference is replaced by the character it represents when the string literal is processed. The predefined entity references recognized by XQuery are as follows:</p>
            <p role="xquery">
               <table width="60%" border="1" role="medium">
                  <tbody>
                     <tr>
                        <th align="center">Entity Reference</th>
                        <th align="center">Character Represented</th>
                     </tr>
                     <tr>
                        <td align="center">
                           <code>&amp;lt;</code>
                        </td>
                        <td align="center">
                           <code>&lt;</code>
                        </td>
                     </tr>
                     <tr>
                        <td align="center">
                           <code>&amp;gt;</code>
                        </td>
                        <td align="center">
                           <code>&gt;</code>
                        </td>
                     </tr>
                     <tr>
                        <td align="center">
                           <code>&amp;amp;</code>
                        </td>
                        <td align="center">
                           <code>&amp;</code>
                        </td>
                     </tr>
                     <tr>
                        <td align="center">
                           <code>&amp;quot;</code>
                        </td>
                        <td align="center">
                           <code>&quot;</code>
                        </td>
                     </tr>
                     <tr>
                        <td align="center">
                           <code>&amp;apos;</code>
                        </td>
                        <td align="center">
                           <code>'</code>
                        </td>
                     </tr>
                  </tbody>
               </table>
            </p>
            <p role="xquery"
                  >A string literal may also contain a <term>character reference</term>. <termdef
                  term="character reference" id="dt-character-reference"
                     >A <term>character reference</term> is an XML-style reference to a <bibref
                     ref="Unicode"
                  /> character, identified by its decimal or hexadecimal codepoint.</termdef> For example, the Euro symbol (€) can be represented by the character reference <code>&amp;#8364;</code>. Character references are normatively defined in Section 4.1 of the XML specification (it is <termref
                  def="dt-implementation-defined"
                  >implementation-defined</termref> whether the rules in   <bibref ref="XML"
                  /> or <bibref ref="XML1.1"/> apply.) A <termref def="dt-static-error"
                  >static error</termref>
               <errorref class="ST" code="0090"
               /> is raised if a character reference does not identify a valid character in the version of XML that is in use.</p>

            <p>Here are some examples of literal expressions:</p>

            <ulist>


               <item>
                  <p>
                     <code role="parse-test"
                     >"12.5"</code> denotes the string containing the characters '1', '2', '.', and
			 '5'.</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >12</code> denotes the <code>xs:integer</code> value twelve.</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >12.5</code> denotes the <code>xs:decimal</code> value twelve and one half.</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >125E2</code> denotes the <code>xs:double</code> value twelve thousand, five hundred.</p>
               </item>

               <item>
                  <p>
                     <code role="parse-test"
                     >"He said, ""I don't like it."""</code> denotes a string containing two quotation marks and one apostrophe.</p>
                  <note role="xpath">
                     <p>When XPath expressions are embedded in contexts where quotation
marks have special significance, such as inside XML attributes, additional
escaping may be needed.</p>
                  </note>
               </item>

               <item role="xquery">
                  <p>
                     <code role="parse-test"
                        >"Ben &amp;amp; Jerry&amp;apos;s"</code> denotes the <code>xs:string</code> value  "<code>Ben &amp; Jerry's</code>".</p>
               </item>

               <item role="xquery">
                  <p>
                     <code role="parse-test"
                        >"&amp;#8364;99.50"</code> denotes the <code>xs:string</code>  value "<code>€99.50</code>".</p>
               </item>
            </ulist>

            <p>
      The <code>xs:boolean</code> values <code>true</code> and <code>false</code> can be constructed by calls to the
      <termref
                  def="dt-built-in-function">built-in functions</termref>
               <code>fn:true()</code> and <code>fn:false()</code>, respectively.
    </p>

            <p>Values of other simple types can be constructed by calling the <termref
                  def="dt-constructor-function"
                  >constructor function</termref> for the given type. The constructor functions for XML Schema
		built-in types are defined in <xspecref
                  spec="FO31" ref="constructor-functions-for-xsd-types"
               />. In general, the name of a constructor function for a given type is the same as the name of the type (including its namespace). For
		example:</p>

            <ulist>



               <item>
                  <p>
                     <code role="parse-test"
                     >xs:integer("12")</code> returns the integer value twelve.</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >xs:date("2001-08-25")</code> returns an item whose type is <code>xs:date</code> and whose value represents the date 25th August 2001.</p>
               </item>

               <item>
                  <p>
                     <code role="parse-test"
                        >xs:dayTimeDuration("PT5H")</code> returns an item whose type is <code>xs:dayTimeDuration</code> and whose value represents a duration of five hours.</p>
               </item>
            </ulist>
            <p>Constructor functions can also be used to create special values that have no literal representation, as in the following examples:
<ulist> <item>
                     <p>
                        <code role="parse-test"
                        >xs:float("NaN")</code> returns the special floating-point value, "Not a Number."</p>
                  </item> <item>
                     <p>
                        <code role="parse-test"
                        >xs:double("INF")</code> returns the special double-precision value, "positive infinity."</p>
                  </item>
               </ulist>
            </p>

            <p>Constructor functions are available for all simple types,
including union types. For example, if <code>my:dt</code> is a user-defined union
type whose member types are <code>xs:date</code>, <code>xs:time</code>, and <code>xs:dateTime</code>, then
the expression <code>my:dt("2011-01-10")</code> creates an atomic value of type
<code>xs:date</code>. The rules follow XML Schema validation rules for union types:
the effect is to choose the first member type that accepts the given
string in its lexical space.</p>

            <p>It is also possible to construct values of various types by using a <code>cast</code> expression. For example:</p>

            <ulist>


               <item>
                  <p>
                     <code role="parse-test"
                        >9 cast as
                        hatsize</code> returns the atomic value <code>9</code>
			 whose type is  <code>hatsize</code>.</p>
               </item>
            </ulist>
         </div3>
         <div3 id="id-variables">
            <head>Variable References</head>
            <scrap>
               <head/>
               <prodrecap id="VarRef" ref="VarRef"/>
               <prodrecap id="VarName" ref="VarName"/>
            </scrap>
            <p>
               <termdef id="dt-variable-reference" term="variable reference"
                     >A <term>variable reference</term> is an EQName preceded by a $-sign.</termdef> 
An unprefixed variable reference is in no namespace. Two variable references are equivalent if their  <termref
                  def="dt-expanded-qname"
                  >expanded QNames</termref>  are equal (as defined by the <code>eq</code> operator). The scope of a variable binding is defined separately for each kind of
expression that can bind variables.</p>

            <p>Every variable reference must match a name in the <termref
                  def="dt-in-scope-variables">in-scope variables</termref>. </p>

            <p>Every variable binding has a static scope. The scope defines where
references to the variable can validly occur.

It is a <termref
                  def="dt-static-error">static error</termref>
               <errorref class="ST" code="0008"
                  /> to reference a variable that is not in scope. If a variable is bound in the <termref
                  def="dt-static-context"
               >static context</termref> for an expression, that variable is in scope for the entire expression except where it is occluded by another binding that uses the same name within that scope.</p>
            <p role="xquery"
                  >A reference to a variable that was declared <code>external</code>, but was not bound to a value by the external environment, raises a <termref
                  def="dt-dynamic-error">dynamic error</termref>
               <errorref code="0002" class="DY"/>.</p>
            <p>
At evaluation time, the value of a variable reference is the value to which the relevant variable is bound.</p>
            
            <!--<p diff="add" at="A">A <code>VarRef</code> consisting of a $-sign followed by an integer literal is refered to as a
            <term>numeric parameter reference</term>, and is allowed only within an inline function declared using hash notation:
            see <specref ref="id-hash-inline-functions"/></p>-->
         </div3>
         <div3 id="id-paren-expressions">
            <head>Parenthesized Expressions</head>
            <scrap>
               <head/>
               <prodrecap id="ParenthesizedExpr" ref="ParenthesizedExpr"/>


            </scrap>
            <p>Parentheses may be used to override the precedence rules.
        For example, the expression <code
                  role="parse-test"
                  >(2 + 4)
		    * 5</code> evaluates to thirty, since the parenthesized expression <code
                  role="parse-test"
                  >(2 + 4)</code> is evaluated first and its result is multiplied by five. Without
			 parentheses, the expression <code
                  role="parse-test"
               >2 + 4 * 5</code> evaluates to twenty-two, because the multiplication operator has higher
			 precedence than the addition operator.</p>

            <p>Empty parentheses are used to denote an empty sequence, as
		described in <specref
                  ref="construct_seq"/>.</p>
         </div3>

         <div3 id="id-context-item-expression">
            <head>Context Item Expression</head>
            <scrap>
               <head/>
               <prodrecap id="ContextItemExpr" ref="ContextItemExpr"/>
            </scrap>

            <p>A <term>context item expression</term> evaluates to
              the <termref
                  def="dt-context-item"
                  >context item</termref>, which may be either a node (as in the
              expression
              <code
                  role="parse-test"
                  >fn:doc("bib.xml")/books/book[fn:count(./author)&gt;1]</code>),
              or an atomic value or function (as in the expression <code
                  role="parse-test">(1 to
              100)[. mod 5 eq 0]</code>).</p>
            <p>If the <termref def="dt-context-item">context item</termref> is <xtermref spec="DM31"
                  ref="dt-absent"/>, a context item expression raises a <termref
                  def="dt-dynamic-error">dynamic error</termref>
               <errorref class="DY" code="0002"/>.</p>

         </div3>

 

         <div3 id="id-enclosed-expr">
            <head>Enclosed Expressions</head>
            <p>
               <scrap>
                  <head/>
                  <prodrecap id="EnclosedExpr" ref="EnclosedExpr"/>
               </scrap>
               <termdef term="enclosed expression" id="dt-enclosed-expression"
                  >An <term>enclosed expression</term> is an instance of the <nt def="EnclosedExpr"
                     >EnclosedExpr</nt> production, which allows an optional expression within curly braces.</termdef>
               <termdef id="dt-content-expression" term="content expression">In an  <termref
                  def="dt-enclosed-expression"
                  >enclosed expression</termref>, the optional expression enclosed in curly braces is called the <term>content expression</term>.</termdef> If the <termref
                     def="dt-content-expression"
                     >content expression</termref> is not provided explicitly,  the content expression is <code>()</code>.</p>
            
            <note diff="add" at="A">
               <p>Despite the name, an enclosed expression is not actually an expression
                  in its own right; rather it is a construct that is used in the grammar of many other expressions.</p>
            </note>
            
         </div3>


      </div2>
      
      <div2 id="id-functions">
         <head>Functions</head>
         
         <p>Functions in &language; take two forms:</p>
         
         <ulist>
            <item role="xpath"><p><termref def="dt-declared-functions">Declared functions</termref> are named 
               constructs in the <specref ref="static_context"/>,
            typically originating either as built-in functions made available by the implementation,
            or as user-defined functions declared using the constructs of the host language.</p></item>
            <item role="xquery"><p><termref def="dt-declared-functions">Declared functions</termref> 
               are named constructs in the <specref ref="static_context"/>,
               typically originating either as built-in functions made available by the implementation,
               or as user-defined functions declared in the query prolog.</p></item>
            <item><p>Dynamic functions are XDM items: values that can be bound to variables, passed as
            arguments, returned as function results, and generally manipulated in the same way as other
            XDM values.</p></item>
         </ulist>
         
         <p>Declared and dynamic functions, and the mechanisms for calling them, are described in the
         following sections.</p>
         
            <div3 id="id-static-functions" diff="add" at="A">
               <head>Declared Functions</head>
               <p>The static context for an expression includes a set of <termref def="dt-declared-functions"/>. Every declared function
               in the static context has a name (which is a QName) and a range of permitted arities for
               calls on that function. Two function families having the same name must not have overlapping arity ranges.
               This means that for a given static function call, it is possible to identify the target function
               in the static context unambiguously from knowledge of the function name and the number of supplied arguments.</p>
               
               <p>Declared functions in the static context may include any or all of the following:</p>
               <ulist>
                  <item><p>Built-in functions defined in these specifications or in a host language
                  referencing these specifications.</p></item>
                  <item role="xpath"><p>User-defined functions declared using the syntax of a host language such
                  as XQuery or XSLT.</p></item>
                  <item role="xquery"><p>User-defined functions declared in the <termref def="dt-prolog">prolog</termref>.</p></item>
                  <item><p>External functions made available in some implementation-defined way.</p></item>
               </ulist>
               
               <p>
                  <termdef term="built-in function" id="dt-built-in-function">The 
                     <term>built-in functions</term>  are 
                     the functions defined in <bibref ref="xpath-functions-40"/>in the 
                     <code>http://www.w3.org/2005/xpath-functions</code>,
                     <code>http://www.w3.org/2001/XMLSchema</code>,
                     <code>http://www.w3.org/2005/xpath-functions/math</code>,
                     <code>http://www.w3.org/2005/xpath-functions/map</code>,
                     and <code>http://www.w3.org/2005/xpath-functions/array</code> namespaces.
                     
                  </termdef> 
                  <phrase role="xquery">The set of built-in functions is specified in <specref
                     ref="id-minimal-conformance"/> and <specref ref="id-conform-optional-features"
                     />.</phrase>
                  <phrase role="xpath">The set of built-in functions is specified by the host language.</phrase>
                  
                  <phrase role="xpath">Additional functions may be provided in
                     the <termref def="dt-static-context">static
                        context</termref>. XPath per se does not provide a way
                     to declare named functions, but a host language may provide
                     such a mechanism.</phrase>
                  <phrase role="xquery">Additional functions may be declared in a
                     <termref  def="dt-library-module">library module</termref>, or provided by
                     the external environment as part of the <termref
                        def="dt-static-context">static
                        context</termref>.</phrase>
               </p>
               
               <!--<p>Static functions may be variadic. If a function is variadic, the number of arguments appearing
               in a function call may differ from the number of parameters declared in the function signature.
               Different kinds of variadic functions are defined, distinguished by the value of the annotation
               <code>%variadic</code>, which is present on all static functions, and takes one of four values:</p>
               <ulist>
                  <item><p><code>%variadic("no")</code> indicates that the function is not variadic.
                  In a function call, an argument must be supplied for every parameter in the function signature.
                  It can be supplied either positionally or by keyword, but there must be a one-to-one mapping
                  between arguments and parameter declarations.</p></item>
                  <item><p><code>%variadic("bounded")</code> indicates that the function is bounded-variadic.
                  A bounded-variadic function declares zero or more required parameters and one or more
                  optional parameters. In a function call, an argument must be supplied for every required
                  parameter, and arguments may be supplied for optional parameters: in both cases, the
                  argument may be supplied either positionally or by keyword.</p></item>
                  <item><p><code>%variadic("sequence")</code> indicates that the function is sequence-variadic.
                   A sequence-variadic function declares one or more parameters, of which the last typically
                  has an occurrence indicator of <code>*</code> or <code>+</code> to indicate that a sequence 
                  may be supplied. If the declaration includes <var>N</var> parameters, then a call on the 
                  function may supply <var>N-1</var> or more arguments; the values of the <var>N</var>th
                  and subsequent arguments are concatenated to form a single sequence, which is supplied
                  as the value of the last parameter in the declaration.
                  In a sequence-variadic function, the last parameter is implicitly optional (it defaults
                  to an empty sequence), and all other parameters are required. In a call of a 
                  sequence-variadic function, all arguments must be supplied positionally.</p></item>
                  
                  <item><p><code>%variadic("map")</code> indicates that the function is map-variadic.
                     A map-variadic function declares one or more parameters, of which the last must
                     be a type that accepts a map. It may restrict what kind of map is accepted (for example,
                     by using a <code>RecordTest</code>), and it may
                     accept things other than maps, but it must accept a single map as the supplied value.
                     The last parameter is implicitly optional (it defaults to an empty map). All
                     other parameters are required, and must be supplied positionally.
                     All keyword arguments in the
                     function call are assembled into a map, and this map is supplied as the value of
                     the last parameter. Alternatively, the last parameter can be supplied positionally
                     (typically, as an already-assembled map).</p>
                     <p>The names and types of the keyword arguments supplied to a map-variadic
                     function may be constrained by declaring the required type in the function signature
                     as a <term>Record Test</term>, which then allows static type checking. However, there
                     is no requirement to use such a type.</p>
                  </item>
               </ulist>-->
               
               <!--<p>A function has a <term>declared arity</term> which is the number of parameters
               defined in the function declaration. This value, together with the value of the
               <code>variadic</code> annotation, determine the number of positional arguments
               and keyword arguments that may appear in a function call. Specifically, for each function
               there are six properties that can be computed:</p>
               
               <ulist>
                  <item><p>The minimum number of arguments in total <var>MinA</var>.</p></item>
                  <item><p>The maximum number of arguments in total <var>MaxA</var>.</p></item>
                  <item><p>The minimum number of positional arguments <var>MinP</var>.</p></item>
                  <item><p>The maximum number of positional arguments <var>MaxP</var>.</p></item>
                  <item><p>The minimum number of keyword arguments <var>MinK</var>.</p></item>
                  <item><p>The maximum number of keyword arguments <var>MaxK</var>.</p></item>
               </ulist>
               
               <p>The values of these properties are given by the following table, where <var>A</var>
                  is the declared arity and <var>R</var> is the number of parameters that do not have
                  a default value. The last parameter in a map-variadic or sequence-variadic value
                  has an implicit default value, so it is not included in this count.
               </p>
              
               <table role="medium" width="100%">
                  <caption>Number of Arguments allowed in a Function Call</caption>
                  <thead>
                     <tr>
                        <th>%variadic</th>
                        <th>MinA</th>
                        <th>MaxA</th>
                        <th>MinP</th>
                        <th>MaxP</th>
                        <th>MinK</th>
                        <th>MaxK</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>no</td>
                        <td>A</td>
                        <td>A</td>
                        <td>0</td>
                        <td>A</td>
                        <td>0</td>
                        <td>A</td>
                     </tr>
                     <tr>
                        <td>bounded</td>
                        <td>R</td>
                        <td>A</td>
                        <td>0</td>
                        <td>A</td>
                        <td>0</td>
                        <td>A</td>
                     </tr>
                     <tr>
                        <td>map</td>
                        <td>R</td>
                        <td>unbounded</td>
                        <td>R</td>
                        <td>R</td>
                        <td>0</td>
                        <td>unbounded</td>
                     </tr>
                     <tr>
                        <td>sequence</td>
                        <td>R</td>
                        <td>unbounded</td>
                        <td>R</td>
                        <td>unbounded</td>
                        <td>0</td>
                        <td>0</td>
                     </tr>
                  </tbody>
               </table>
               
               <p>If two functions <var>F</var> and <var>G</var> in the static context have the same name, 
               then both of the following conditions must be true:</p>
               
               <ulist>
                  <item><p>MinP(F) > MaxP(G) or MinP(G) > MaxP(F)</p></item>
                  <item><p>MinK(F) > MaxK(G) or MinK(G) > MaxK(F)</p></item>
               </ulist>
               
               <p>In consequence, a function call with a known number of positional arguments and a known
               number of keyword arguments can never match more than one function in the static context.</p>
               -->
               <p>Similarly, a named function reference such as <code>fn#3</code> is a reference to a
               function in the static context with name <code>fn</code> and arity 3,
               and there can be at most one such function.</p>
               
               <!--<p>Taking examples from the standard function library:</p>
               <ulist>
                  <item><p>The function <code>fn:position</code> takes no arguments. It has
                     <var>MinA</var>=0, <var>MaxA</var>=0, <var>MinP</var>=0, <var>MaxP</var>=0, 
                     <var>MinK</var>=0, <var>MaxK</var>=0.</p></item>
                  <item><p>The function <code>fn:node-name</code>  is bounded-variadic.
                     It has one optional argument, which
                     can be supplied either by position or by keyword. It has
                     <var>MinA</var>=0, <var>MaxA</var>=1, <var>MinP</var>=0, <var>MaxP</var>=1, 
                     <var>MinK</var>=0, <var>MaxK</var>=1.</p></item>
                  
                  <item><p>The function <code>fn:format-date</code> is bounded-variadic. It defines
                  two required parameters (<code>value</code> and <code>picture</code>), followed by
                  three optional parameters (<code>language</code>, <code>calendar</code>, and
                  <code>place</code>). For all three optional parameters, the default value is an empty
                  sequence. The function can be called with any number of positional arguments from 2 to 5.
                  Alternatively the optional parameters can be supplied by keyword: for example
                  <code>format-date(current-date(), "[D1] [MNn] [Y0001]", place: "America/New_York")</code>.
                  It is also possible to supply the required parameters by keyword.</p>
                  <p>The function thus has <var>MinA</var>=2, <var>MaxA</var>=5, <var>MinP</var>=0, 
                     <var>MaxP</var>=5, <var>MinK</var>=0, <var>MaxK</var>=5.</p></item>
                  <item><p>The <code>fn:concat</code> function is sequence-variadic. This means
                  that the function calls <code>fn:concat("a", "b", "c")</code>, 
                     <code>fn:concat(("a", "b", "c"))</code>, and <code>fn:concat(("a", "b"), "c")</code>
                  all have the same effect (delivering the result <code>"abc"</code>). Keyword
                  arguments cannot be used with this function.</p>
                     <p>The function thus has <var>MinA</var>=0, <var>MaxA</var>=unbounded, <var>MinP</var>=0, 
                        <var>MaxP</var>=unbounded, <var>MinK</var>=0, <var>MaxK</var>=0.</p></item>
                  <item><p>The <code>fn:serialize</code> function is map-variadic. This means
                     that the function call <code>fn:serialize($doc, method: "xml", indent: true())</code>
                  has the same effect as the function call 
                     <code>fn:serialize($doc, map{"method":"xml", "indent":true()})</code></p>
                     <p>The function thus has <var>MinA</var>=1, <var>MaxA</var>=unbounded, <var>MinP</var>=1, 
                        <var>MaxP</var>=2, <var>MinK</var>=0, <var>MaxK</var>=unbounded.</p>
                     </item>
               </ulist>-->
               
               <p>A static function call is bound to a declared function in the static context by matching the name
               and arity. If the function call has <var>P</var> positional arguments followed by
                  <var>K</var> keyword arguments, then the required arity is <var>P+K</var>, and the static context 
                  must include a declared function whose name matches the name in the function call, and whose arity range 
               includes this required arity. This is the function chosen for execution.
               The function is evaluated by executing its implementation, with
               a dynamic context that provides values for all the declared parameters, initialized
               as described in <specref ref="id-eval-static-function-call"/> below.</p>
               
             
 
               
               <p>Similarly, a function reference of the form <code>f#N</code> binds to a function in the
                  static context whose name matches <var>f</var> given the required arity <code>N</code>.
               The result of evaluating a function reference is a (dynamic) function which can be invoked
               using a dynamic function call. Dynamic functions have a fixed arity and their arguments
               are always supplied positionally. For example, the function reference <code>fn:concat#3</code>
               returns a function with arity 3, which is always invoked by supplying three positional
               arguments, and whose effect is the same as a static call on <code>fn:concat</code> with
               three positional arguments. <!--The arity must not exceed the number of arguments that
               can be supplied positionally. Therefore, in the case of a function reference to a map-variadic functions
               such as <code>fn:serialize#2</code>, a dynamic call must supply the map-valued argument
               (the serialization parameters) in the form of a map; the function reference <code>fn:serialize#3</code>
               is an error, because <var>MaxP</var> = 2.--></p>
               
               <p>The detailed rules for evaluating static function calls and function references are defined
               in subsequent sections.</p>
                  
         
         <div4 id="id-function-calls">
            <head>Static Function Call Syntax</head>
            
            <scrap>
               <head/>
               <prodrecap id="FunctionCall" ref="FunctionCall"/>
               <prodrecap ref="ArgumentList"/>
               <prodrecap ref="PositionalArguments"/>               
               <prodrecap id="Argument" ref="Argument"/>
               <prodrecap id="ArgumentPlaceholder" ref="ArgumentPlaceholder"/>
               <prodrecap ref="KeywordArguments"/>
               <prodrecap ref="KeywordArgument"/>
            </scrap>
            <p><termdef term="static function call" id="dt-static-function-call">A <term>static function call</term> 
               consists of an EQName followed by a parenthesized list of zero or more arguments.</termdef></p>
            <p diff="add" at="A">The argument list consists of zero or more positional arguments,
               followed by zero or more keyword arguments.</p>
            <note><p>In some circumstances, it is necessary to include whitespace before or after the
            separating colon in a <code>KeywordArgument</code> to ensure that it is parsed as intended. See the
               note in <specref ref="id-map-constructors"/> for details of how this applies in map constructors.
            The situation for function calls is similar, except that an argument written as <code>a:b</code>
            would be misinterpreted as a QName (probably with an undeclared prefix) rather than automatically 
            being a syntax error.</p></note>
            <p><termdef term="argument expression" id="dt-arg-expr">An argument to a function call is either an
               <term>argument expression</term> or an ArgumentPlaceholder ("?"); in both cases it may
            either be supplied positionally, or identified by a name (called a keyword).</termdef></p>
            <p>This section is concerned with static function calls in which none of the arguments are
               <code>ArgumentPlaceHolders</code>. Calls using one or more <code>ArgumentPlaceHolders</code> are covered in the 
               section <specref ref="id-partial-function-application"/>.</p>
            <p>If the EQName in a static function call is an unprefixed <termref def="dt-qname"
               >lexical QName</termref>, it is expanded by invoking the <termref def="dt-default-function-namespace"/> 
               in the <termref def="dt-static-context">static context</termref>.
            </p>
            <p><phrase diff="del" at="A">In other cases, </phrase>The <termref def="dt-expanded-qname"
               >expanded QName</termref> used as the function name, and the number of arguments in the static function call 
               (the required arity) must match the name and arity range of a <termref def="dt-declared-function"/> 
               in the <termref def="dt-static-context">static context</termref> 
               <phrase>using the rules defined in the previous section</phrase>; if there is no match, a
               <termref def="dt-static-error">static error</termref> is raised <errorref class="ST" code="0017"/>.
               </p>
            <p>
               <termdef term="partial function application" id="dt-partial-function-application">
                  A static or <termref def="dt-dynamic-function-invocation">dynamic</termref>
                  function call is a <term>partial function application</term>
                  if one or more arguments is an ArgumentPlaceholder.</termdef>
            </p>
            
            <p>Evaluation of static function calls is described in <specref ref="id-eval-static-function-call"/>,
               while evaluation of dynamic function calls is described in 
               <specref ref="id-eval-dynamic-function-call"/>.</p>
            
            
            <p>Since the arguments of a function call are separated by commas, any <termref
               def="dt-arg-expr">argument expression</termref> that contains a top-level <termref
                  def="dt-comma-operator">comma operator</termref> must be
               enclosed in parentheses. Here are some illustrative examples of
               static function calls:</p>
            
            <ulist>
               
               
               <item>
                  <p>
                     <code role="parse-test"
                        >my:three-argument-function(1, 2, 3)</code> denotes a static function call with three 
                     <phrase diff="add" at="A">positional</phrase> arguments. <phrase diff="add" at="A">The 
                  corresponding function declaration must define at least three parameters, and may define
                  more, provided they are optional.</phrase></p>
               </item>
               
               
               <item>
                  <p>
                     <code role="parse-test"
                        >my:two-argument-function((1,2), 3)</code> denotes a static function call with two arguments, the first of which is a
                     sequence of two values. <phrase diff="add" at="A">The 
                        corresponding function declaration must define at least two parameters, and may define
                        more, provided they are optional.</phrase></p>
               </item>
               
               
               <item>
                  <p>
                     <code role="parse-test"
                        >my:two-argument-function(1, ())</code> denotes a static function call with two arguments, 
                     the second of which is an empty sequence.</p>
               </item>
               
               
               <item>
                  <p>
                     <code role="parse-test"
                        >my:one-argument-function((1, 2,
                        3))</code> denotes a static function call with one argument that is a sequence of three
                     values. </p>
               </item>
               
               
               <item>
                  <p>
                     <code role="parse-test"
                        >my:one-argument-function(( ))</code> denotes a static function call with one argument that is an empty sequence.</p>
               </item>
               
               <item>
                  <p>
                     <code role="parse-test"
                        >my:zero-argument-function( )</code> denotes a static function call with zero arguments.</p>
               </item>
               <item diff="add" at="A">
                  <p>
                     <code role="parse-test">fn:lang(node: $n, language: 'de')</code> is a static function 
                     call with two keyword arguments. The corresponding function declaration defines two parameters,
                     a required parameter <code>language</code> and an optional parameter <code>node</code>.
                     This call supplies values for both parameters. It is equivalent to the call 
                     <code>fn:lang('de', $n)</code>: note that the keyword arguments are in a different
                     order from the parameter declarations.
                  </p>
               </item>
               <item diff="add" at="A">
                  <p>
                     <code role="parse-test">fn:sort(//employee, key: ->{xs:decimal(salary)})</code> is a static function 
                     call with one positional argument and one keyword argument. 
                     The corresponding function declaration defines three parameters,
                     a required parameter <code>$input</code>, an optional parameter <code>$collation</code>,
                     and an optional parameter <code>$key</code>
                     This call supplies values for the first and third parameters, leaving the second parameter (<code>$collation</code>)
                     to take its default value. The default value of the <code>$collation</code> parameter
                     is given as <code>fn:default-collation()</code>, so the value supplied to the function is the
                     default collation from the dynamic context of the caller. It is equivalent to the call 
                     <code>fn:sort(//employee, fn:default-collation(), ->{xs:decimal(salary)})</code>.
                  </p>
               </item>
               <!--<item diff="add" at="A">
                  <p>
                     <code role="parse-test"
                        >fn:serialize($value, method: 'json', indent: true())</code> is a static function call
                     with three arguments. This function is declared as map-variadic, so it is effectively
                     called supplying <code>$value</code> for the first parameter, and 
                     <code>map{'method':'json', 'indent':true()}</code> for the second.</p>
               </item>-->
               <!--<item diff="add" at="A">
                  <p>
                     <code role="parse-test"
                        >fn:codepoints-to-string(66, 65, 67, 72)</code> is a static function call with
                     four arguments. This function is declared as sequence-variadic, so the four arguments
                     are effectively combined into a sequence <code>(66, 65, 67, 72)</code> which is supplied
                     as the value of the first (and only) parameter. The call is thus equivalent to
                     the single-argument call <code>fn:codepoints-to-string((66, 65, 67, 72))</code>: it returns "BACH".
                     The call could also be written with two arguments: 
                     <code>fn:codepoints-to-string((66, 65), (67, 72)))</code>.</p>
               </item>-->
            </ulist>
            
            <p>An <code>EQName</code> in a <code>KeywordArgument</code> is expanded to a QName value; if there
            is no prefix, then the name is in no namespace (otherwise the prefix is resolved in the usual way).
            The keywords used in a function call (after expansion to QNames) must be distinct [TODO: error condition].</p>
         </div4> 
         
         <div4 id="id-eval-static-function-call" diff="chg" at="A">
               <head>Evaluating Static Function Calls</head>
            
            <p>This section applies to static function calls where none of the
            arguments is an <code>ArgumentPlaceHolder</code>. For function calls involving
            placeholders, see <specref ref="id-partial-function-application"/>.</p>

               <p>
                      When a static function call <var>FC</var> is evaluated
                      with respect to a static context <var>SC</var> and
                      a dynamic context <var>DC</var>,
                      the result is obtained as follows:
                    </p>


               <olist>


                  <item>
                     <p>
                          The <termref def="dt-declared-function"/> <var>FF</var> to be used is found in the static context.
                        </p>
                     
                     <p>The <term>required arity</term> is the total number of arguments in the
                        function call, including both positional and keyword arguments.</p>
                     
                           <p>
                              There can be at most one declared function <var>FF</var> in the <termref def="dt-named-functions"
                                 >named functions</termref> component of <var>DC</var> whose function name
                              matches the expanded QName in <var>FC</var> and whose arity range
                              and the arity of <var>FC</var>'s <code>ArgumentList</code>.
                           </p>
                     
                     <p>If there is no such declared function, a static error <errorref
                        class="ST" code="0017"/> is raised.</p>
                     
                     
 
                     
                  </item>

                  <!--<item>
                     <p>
                        <termdef term="argument value" id="dt-arg-value">
                           <termref def="dt-arg-expr"
                              >Argument expressions</termref> are evaluated with respect to <var>DC</var>, producing <term>argument
                        values</term>.</termdef> The order of argument evaluation is <termref
                           def="dt-implementation-dependent"
                        >implementation-dependent</termref> and it is not required that an argument be evaluated 
                        if the function can evaluate its body without evaluating that argument.</p>
                  </item>-->
            
                  <item>
                     <p>Each parameter in the declaration of <var>FF</var> is associated with an argument
                     expression as follows:</p>
                     <olist>
                        <item><p>If there are <var>N</var> positional arguments in the function call,
                           the corresponding argument expressions are associated pairwise with the first <var>N</var>
                           parameters in the declaration. For this purpose the required parameters and optional parameters
                        in the declared function are concatenated into a single list, in order.</p></item>
                        <item><p>Any keyword arguments in the function call are then matched against
                           the names of the parameters (whether required or optional) in the declared function. Each keyword must match
                        the name of a declared parameter, and this must be one that has not already
                        been associated with a positional argument. [TODO: error condition]. 
                        The expression supplied in the keyword
                        argument is then associated with the corresponding parameter.</p></item>
                        <item><p>Any parameters that have not been associated with any argument expression
                        by applying the above rules (which are necessarily optional parameters) are then associated 
                        with the default expression for the relevant parameter in the declared function.</p></item>
                     </olist>
                  </item>   
  

                  <item>
                     <p>
                          Each argument expression established by the above rules is evaluated with respect to DC.
                          The order of argument evaluation is <termref def="dt-implementation-dependent"/> and it is not
                        required that an argument be evaluated if the function can evaluate its body without evaluating
                        that argument.</p>
                     
                     <note><p>All argument expressions, including default value expressions, are evaluated in the dynamic
                     context of the function call. It is therefore possible to use a default value expression such as 
                     <code>.</code>, or <code>/</code>, or <code>fn:current-dateTime()</code>, whose value depends on the
                     dynamic context of the function call.</p></note>
                     
                     <p>If the expression used for the default value of a parameter has no dependencies on the dynamic
                     context, then an implementation <rfc2119>may</rfc2119> choose to reuse the same value on repeated
                     function calls rather than re-evaluating it each time.</p>
                     
                     <note><p>This is relevant, for example, if the expression constructs new nodes.</p></note>
 

                  </item>
                     
                     <item><p>The result of evaluating the argument expression is converted to the required type (the
                     declared type associated with the corresponding parameter in the function declaration, defaulting
                     to <code>item()*</code>) by applying the <termref def="dt-coercion-rules"/>.</p></item>
                  
                  

                  <item>
                     <p>The result of the function call is obtained as follows:</p>
                                 <ulist>
                                    <item>
                                       <p>
                                          <var>FF</var>'s implementation is invoked
                                      in an implementation-dependent way.
                                      The processor makes the following information
                                      available to that invocation:
                                      
                                    </p>
                                       <ulist>
                                          <item>
                                             <p>the converted argument values;</p>
                                          </item>
                                          <item>
                                             <p>
                                                An empty set of nonlocal variable bindings; and</p>
                                          </item>
                                          <item>
                                             <p>
                                          a static context and dynamic context.
                                          If <var>FF</var>'s implementation is associated with a static and a dynamic context,
                                          then these are supplied,
                                          otherwise <var>SC</var> and <var>DC</var> are supplied.
                                        </p>
                                          </item>
                                       </ulist>
                                       <p>
                                      How this information is used is <termref
                                             def="dt-implementation-defined"
                                             >implementation-defined</termref>.
                                      An API used to invoke external functions must state
                                      how the static and dynamic contexts are provided
                                      to a function that is invoked.
                                      The F&amp;O specification states how the static and dynamic contexts
                                      are used in each function that it defines. 
                                      <phrase
                                             role="xpath"
                                             >
                                      A host language must state how the static and dynamic contexts
                                      are used in functions that it provides.
                                      </phrase>
                                       </p>
                                    </item>
                                    <item>
                                       <p>
                                      The result is either an instance of <var>FF</var>'s return type
                                      or a dynamic error.
                                      This result is then the result of evaluating <var>FC</var>.
                                    </p>
                                    </item>
                                    <item>
                                       <p>
                                      Errors raised by built-in functions are defined in
                                      <bibref
                                             ref="xpath-functions-40"
                                          />.
                                    </p>
                                    </item>
                                    <item role="xquery">
                                       <p>
                                      Errors raised by external functions are
                                      <termref
                                             def="dt-implementation-defined"
                                             >implementation-defined</termref>
                                      (see <specref
                                             ref="id-consistency-constraints"
                                          />).
                                    </p>
                                    </item>
                                    <item role="xpath">
                                       <p>
                                      Errors raised by host-language-dependent functions are
                                      <termref
                                             def="dt-implementation-defined"
                                             >implementation-defined</termref>.
                                    </p>
                                    </item>
                                 </ulist>
                                 <example>
                                    <head>A Built-in Function</head>
                                    <p>The following function call uses the function 
                                  <xspecref
                                          spec="FO31" ref="func-base-uri"
                                          />.  Use of <code>SC</code> and <code>DC</code> and errors raised by this function are all defined in 
                                  <bibref
                                          ref="xpath-functions-40"/>.</p>

                                    <eg role="parse-test"><![CDATA[fn:base-uri()]]></eg>

                                 </example>
                             
                  </item>

               
               </olist>

            
               </div4>
               
            </div3>
         
         <div3 id="id-dynamic-functions">
            <head>Dynamic Functions</head>

            <p>A dynamic function (or <xtermref spec="DM31" ref="dt-function-item"
               >function</xtermref>, or <term>function item</term>) is an XDM
            value that can be bound to a variable, or manipulated in various ways by &language; expressions.
            The most significant such expression is a <term>dynamic function call</term>, which supplies
            values of arguments and evaluates the function to produce a result.</p>
            
            <p>The syntax of dynamic function calls is defined in <specref ref="id-dynamic-function-invocation"/>.</p>
            
            <p>A number of constructs can be used to produce a dynamic function, notably:</p>
            
            <ulist>
               <item><p>A <term>named function reference</term> (see <specref ref="id-named-function-ref"/>)
               constructs a function that refers to a static function: for example <code>fn:node-name#1</code>
               returns a function whose effect is to call the static <code>fn:node-name</code> function
               with one argument.</p></item>
               <item><p>An <term>inline function</term> (see <specref ref="id-inline-func"/>)
                  constructs a function whose implementation is defined locally. For example the
               construct <code>->($x){$x+1}</code> returns a function whose effect is to increment
               the value of the supplied argument.</p></item>
               <item><p>A <term>partial function application</term> (see 
                  <specref ref="id-partial-function-application"/>) derives one function from another by supplying
               the values of some of its arguments. For example, <code>fn:ends-with(?, ".txt")</code> returns
               a function with one argument that tests whether the supplied string ends with the substring
                  <code>".txt"</code>.</p></item>
               <item><p>Maps and arrays are also functions. See <specref ref="id-map-constructors"/>
               and <specref ref="id-array-constructors"/>.</p></item>
            </ulist>
            
            <p>These constructs are described in detail in the following sections.</p>
         
         <div4 id="id-eval-dynamic-function-call">
               <head>Evaluating Dynamic Function Calls</head>
            
            <p>This section applies to dynamic function calls whose arguments do not include
            an <code>ArgumentPlaceHolder</code>. For function calls that include a placeholder,
            see <specref ref="id-partial-function-application"/>.</p>

               <p>
                      When a dynamic function call <var>FC</var> is evaluated,
                      the result is obtained as follows:
                    </p>


               <olist>

                  <!--<item diff="chg" at="A">
                     <p>The <term>arity</term> of a <code>PositionalArgumentList</code>
                        is the number of positional arguments in the <code>PositionalArgumentList</code>.
                        Keyword arguments are not allowed in a dynamic function call.
                     </p>
                  </item>
-->
                  <item>
                     <p>
                          The function <var>F</var> to be called
                          is obtained by evaluating the base expression of the function call.
                              If this yields a sequence consisting of a single function
                              whose arity matches the number of arguments in the <code>ArgumentList</code>,
                              let <var>F</var> denote that function.
                              Otherwise, a type error is raised
                              <errorref
                                 class="TY" code="0004"/>.
                            </p>
                     <note diff="add" at="A"><p>Keyword arguments are not allowed in a dynamic function call.</p></note>
                       
                  </item>

                  <item>
                     <p>
                        <termref def="dt-arg-expr">Argument expressions</termref> are evaluated, 
                        producing <term>argument values</term>. The order of argument evaluation is <termref
                           def="dt-implementation-dependent"
                        >implementation-dependent</termref> and an argument need not be evaluated 
                        if the function can evaluate its body without evaluating that argument.</p>
                  </item>


                  <item>
                     <p>
                          Each argument value is converted
                          to the corresponding parameter type in <var>F</var>'s signature
                          by applying the <termref def="dt-coercion-rules">coercion rules</termref>, resulting in a
                        <term>converted argument value</term><!--<termref
                           def="dt-arg-value"
                        >converted argument value</termref>-->. <!--The correspondence of arguments to parameters
                        is by matching position.-->
                     </p>

                  </item>
                  
                  
                  <item>
                     <p>If <var>F</var> is a map, it is evaluated as described in <specref
                           ref="id-map-lookup"/>.</p>
                  </item>
                  
                  <item>
                     <p>If <var>F</var> is an array, it is evaluated as described in <specref
                        ref="id-array-lookup"/>.</p>
                  </item>

                              <item>
                                 
                                 <p>
                                  If <var>F</var>'s implementation is 
                                  
                                  an &language; expression
                                  
                                    (e.g., <var>F</var> is
                                    <phrase
                                       role="xquery">a <termref def="dt-udf"
                                          >user-defined function</termref> or</phrase>
                                    an <termref
                                       def="dt-anonymous-function"
                                       >anonymous function</termref>,
                                    or a
                                    <termref
                                       def="dt-partially-applied-function"
                                       >partial application</termref>
                                    of such a function):
                                  
                                </p>

                                 <olist>
                                    <item>
                                       <p>
                                          <var>F</var>'s implementation 
                                      is evaluated.
                                      
                                        The static context for this evaluation
                                        is the static context of the &language; expression.
                                      
                                      The dynamic context for this evaluation is obtained
                                      by taking the dynamic context of the
                                      <phrase
                                             role="xquery">module</phrase>
                                          <phrase role="xpath">
                                             <code>InlineFunctionExpr</code>
                                          </phrase>
                                      that contains the <code>FunctionBody</code>, and
                                      making the following changes:
                                    </p>
                                       <ulist>
                                          <item>
                                             <p>
                                          The <termref
                                                  def="dt-focus"
                                                  >focus</termref>
                                          (context item, context position, and context size)
                                          is <xtermref
                                                  spec="DM31" ref="dt-absent"
                                                />.
                                        </p>
                                          </item>

                                          <item>
                                             <p>
                                          In the <termref
                                                  def="dt-variable-values"
                                                >variable values</termref> component of the dynamic context,
                                          each converted argument value is bound to the
                                          corresponding parameter name.
                                        </p>

                                             <p>
                                          When
                                          this is done,
                                          the converted argument value retains
                                          its most specific
                                          <termref
                                                  def="dt-dynamic-type"
                                                  >dynamic type</termref>,
                                          even though this type
                                          may be derived from the type of the formal parameter.
                                          For example, a function with
                                          a parameter <code>$p</code> of type <code>xs:decimal</code>
                                          can be invoked with an argument of type <code>xs:integer</code>,
                                          which is derived from <code>xs:decimal</code>.
                                          During the processing of this function
                                          call,
                                          the <termref
                                                  def="dt-dynamic-type"
                                                  >dynamic type</termref>
                                          of <code>$p</code> inside the body of the function
                                          is considered to be <code>xs:integer</code>.
                                        </p>
                                          </item>

                                          <item>
                                             <p>
                                          F's nonlocal variable bindings
                                          are also added to the <termref
                                                  def="dt-variable-values"
                                                >variable values</termref>.
                                          (Note that the names of the nonlocal variables
                                          are by definition disjoint from the parameter names,
                                          so there can be no conflict.)
                                        </p>
                                          </item>

                                       </ulist>

                                    </item>

                                    <item>
                                       <p>
                                      The value returned by evaluating the function body
                                      is then converted to the declared return type of <var>F</var>
                                      by applying the
                                      <termref
                                             def="dt-coercion-rules"
                                             >coercion rules</termref>.
                                      The result is then the result of evaluating <var>FC</var>.
                                    </p>

                                       <p>
                                      As with argument values,
                                      the value returned by a function
                                      retains its most specific type,
                                      which may be derived from the declared return type of <var>F</var>.
                                      For example, a function that has
                                      a declared return type of <code>xs:decimal</code>
                                      may in fact return a value of dynamic type <code>xs:integer</code>.
                                    </p>
                                    </item>
                                 </olist>
                                 <example>
                                    <head>Derived Types and Nonlocal Variable Bindings</head>
                                    <p>
                                       <code>$incr</code> is a nonlocal variable that is available within the function because its variable binding has been added to the variable values of the function..  Even though the parameter and return type of this function are both <code>xs:decimal</code>,
                                  the more specific type <code>xs:integer</code> is preserved in both cases.</p>
                                    <eg role="parse-test"><![CDATA[
let $incr := 1,
    $f := function ($i as xs:decimal) as xs:decimal { $i + $incr }
return $f(5)                      ]]></eg>
                                 </example>
                                 <example>
                                    <head>Using the Context Item in an Anonymous Function</head>
                                    <p>The following example will raise a dynamic error <errorref
                                          class="DY" code="0002"/>:</p>
                                    <eg role="parse-test"><![CDATA[
let $vat := function() { @vat + @price }
return shop/article/$vat()]]></eg>
                                    <p>Instead, the context item can be used as an argument to the anonymous function:</p>
                                    <eg role="parse-test"><![CDATA[
let $vat := function($art) { $art/@vat + $art/@price }
return shop/article/$vat(.)]]></eg>
                                    <p>Or, the value can be referenced as a nonlocal variable binding:</p>
                                    <eg role="parse-test"><![CDATA[
let $ctx := shop/article,
$vat := function() { for $a in $ctx return $a/@vat + $a/@price }
return $vat()
]]></eg>
                                 </example>

                              </item>

                              <item>
                                 <p>                                  
                                  If <var>F</var>'s implementation is
                                  
                                  not an &language; expression
                                  (e.g., <var>F</var> is
                                  a <termref
                                       def="dt-built-in-function">built-in function</termref>
                                    <phrase role="xquery">or an <termref def="dt-external-function"
                                          >external function</termref>,
                                    </phrase>
                                    <!--<phrase role="xpath">or a <termref
                                          def="dt-host-language-function"
                                          >host language function</termref>
                                    </phrase>
                                  or a
                                  <termref
                                       def="dt-partially-applied-function"
                                       >partial application</termref>
                                       of such a function)--> the implementation of the function is
                                       evaluated, and the result is converted
                                       to the declared return type, in the same way as for a 
                                       static function call (see <specref ref="id-function-calls"/>).</p>
                                 
                                 <p>Errors may be raised in the same way.</p>
                                    
                                
                                 
                              </item>

                           
               </olist>
            </div4>


            <div4 id="id-partial-function-application">
               <head>Partial Function Application</head>
               
               <p>A partial function application is a static or dynamic function call
               in which one or more of the arguments is supplied as an <code>ArgumentPlaceHolder</code>.</p>
               
               <p>The result of a partial function application is a (dynamic) function, whose
               arity is equal to the number of placeholders in the call.</p>

               <p>The result is obtained as follows:</p>

               <olist>
                  <item>
               <p>The function <var>F</var> to be partially applied is determined in the same way as for a 
                  (static or dynamic) function call without placeholders, as described in the preceding sections.
                  For this purpose an <code>ArgumentPlaceHolder</code> contributes to the count of
                  arguments.</p>
                  </item>

                  
                  <item>
                     <p>Arguments other than placeholders are evaluated, mapped to corresponding
                     parameters in the function signature of <var>F</var>, and converted to the required
                     type of the parameter, using the rules for static and dynamic function calls as 
                     appropriate. <phrase diff="add" at="variadicity">In the case of static function calls,
                     this includes optional parameters for which no argument expression is supplied in the
                     call.</phrase></p>
                  </item>


                  
                  
                  
                     
                     
                        <item>
                           <p>
                              The result of the partial function application is a new function, which is a <termref
                                 def="dt-partially-applied-function"
                                 >partially applied function</termref>.
                              <termdef
                                 term="partially applied function"
                                 id="dt-partially-applied-function"
                                    >A <term>partially applied function</term>
                              is a function created by  <termref
                                    def="dt-partial-function-application"
                                    >partial function application</termref>.</termdef>
                              <termdef term="fixed position" id="dt-fixed-position" diff="chg" at="variadicity"
                                    >In a partial function application, a <term>supplied parameter</term>
                              is any parameter other than one for which the <code>ArgumentList</code> includes
                              a placeholder.</termdef>
                              A partial function application need not have any supplied parameters.  A <termref
                                 def="dt-partially-applied-function"
                                 >partially applied function</termref> has
                              the following properties (which are defined in <xspecref
                                 spec="DM31" ref="function-items"
                              />):
                            </p>
                           <ulist>
                              <item>
                                 <p>
                                    <term>name</term>:
                                  Absent.
                                </p>
                              </item>

                              <item>
                                 <p>
                                    <term>parameter names</term>:
                                  The parameter names of <var>F</var>,
                                  removing the names of supplied parameters.
                                  (So the function's arity is
                                  the arity of F
                                  minus
                                  the number of fixed positions.)
                                </p>
                              </item>

                              <item>
                                 <p>
                                    <term>signature</term>:
                                  The signature of <var>F</var>,
                                  removing the types of supplied parameters.
				  
				    An implementation which can determine a more specific signature (for example, through use of type analysis) is permitted to do so.
                                </p>
                              </item>

                              <item>
                                 <p>
                                    <term>implementation</term>:
                                  
                                  
                                  The implementation of <var>F</var>.
                                  If this is not an &language; expression
                                  then the new function's implementation
                                  is associated with a static context and a dynamic context in one of two ways:
                                  if <var>F</var>'s implementation is already associated with contexts, then those are used; otherwise, <var>SC</var> and <var>DC</var> are used. 
                                  
                                </p>
                              </item>

                              <item>
                                 <p>
                                    <term>nonlocal variable bindings</term>:
                                  The nonlocal variable bindings of <var>F</var>,
                                  plus, for each supplied parameter,
                                  a binding of the converted argument value
                                  to the corresponding parameter name.
                                </p>
                              </item>
                           </ulist>
                           <example>
                              <head>Partial Application of an Anonymous Function</head>
                              <p>In the following example, <code>$f</code> is an anonymous function, and <code>$paf</code> is a partially applied function created from <code>$f</code>.</p>
                              <eg role="parse-test"><![CDATA[
let $f := function ($seq, $delim) { fn:fold-left($seq, "", fn:concat(?, $delim, ?)) },
    $paf := $f(?, ".")
return $paf(1 to 5)
]]></eg>
                              <p>
                                 <code>$paf</code> is also an anonymous function.  It has one parameter, named <code>$delim</code>, which is taken from the corresponding parameter in <code>$f</code>
                              (the other parameter is fixed).  The implementation of <code>$paf</code> is the implementation of <code>$f</code>, which is <code>fn:fold-left($seq, "", fn:concat(?, $delim, ?))</code>.  This implementation is associated with the <code>SC</code> and <code>DC</code> of the original expression in <code>$f</code>.  The nonlocal bindings associate the value <code>"."</code> with the parameter <code>$delim</code>.</p>
                           </example>
                           <example>
                              <head>Partial Application of a Built-In Function</head>

                              <p>The following partial function application creates a function that computes the sum of squares of a sequence.</p>
                              <eg role="parse-test"><![CDATA[let $sum-of-squares := fn:fold-right(?, 0, function($a, $b) { $a*$a + $b })
return $sum-of-squares(1 to 3)]]></eg>
                              <p>
                                 <code>$sum-of-squares</code> is an anonymous function. It has one parameter, named <code>$seq</code>, which is taken from the corresponding parameter in <code>fn:fold-right</code> (the other two parameters are fixed). The implementation is the implementation of <code>fn:fold-right</code>, which is a built-in context-independent function.  The nonlocal bindings contain the fixed bindings for the second and third parameters of <code>fn:fold-right</code>.</p>
                           </example>
                           <p>Partial function application never returns a map or an array.  If <code>$F</code> is a map or an array, then <code>$F(?)</code> is 
                            a partial function application that returns a function, but the function it returns is not a map nor an array.</p>
                           <example>
                              <head>Partial Application of a Map</head>
                              <p>The following partial function application converts a map to an equivalent function that is not a map.</p>
                              <eg role="parse-test"><![CDATA[let $a := map {"A": 1, "B": 2}(?)
return $a("A")]]></eg>
                           </example>
                        </item>


                    </olist>
                  
               
               
            </div4>



         



         <!-- ******************************************************************** -->

         <div4 id="id-named-function-ref">
            <head>Named Function References</head>

            <scrap>
               <head/>
               <prodrecap id="NamedFunctionRef" ref="NamedFunctionRef"/>
               <prodrecap ref="EQName"/>
            </scrap>

            <p>
               <termdef term="named function reference" id="dt-named-function-ref">
          A <term>named function reference</term> is an expression
          which evaluates to a <termref def="dt-named-func">named function</termref>.</termdef></p>
            
            <p>The name and arity of the required function are known statically.</p>
          
            <p diff="chg" at="A">If the EQName is a <termref def="dt-qname">lexical QName</termref>, it is expanded using the 
               <termref def="dt-default-function-namespace"/> in the <termref def="dt-static-context">static context</termref>.</p>
            
            <p>The expanded QName and arity must correspond to a <termref def="dt-declared-function"/>
               present in the <termref def="dt-static-context">static context</termref>.
            <phrase diff="add" at="variadicity">More specifically, for a named function reference <code>F#N</code>,
               there must be a declared function in the static context
               whose name matches <var>F</var>, and whose <termref def="dt-arity-range"/> includes <var>N</var></phrase>.</p>
            
            <p>If the function is
          context dependent, then the returned function is associated
          with the static context of the named function reference and
          the dynamic context in which it is evaluated.</p>
            
          <p>
               <termdef term="named function" id="dt-named-func"
                     >A <term>named function</term> is a function defined in the
          static context for the <phrase
                     role="xquery">query</phrase>
                  <phrase role="xpath"
                  >expression</phrase>. 
          To uniquely identify a particular named function, both its name as an expanded QName
          and its arity are required.</termdef>
            </p>

           
            <p>If the <termref def="dt-expanded-qname"
                  >expanded QName</termref> and arity in a named function reference do not match the name and arity of a function signature in the
          static context, a static error is raised <errorref
                  class="ST" code="0017"/>.</p>

            <p>
            The value of a <code>NamedFunctionRef</code>
            is the function obtained by looking up
            the expanded QName and arity
            in the <termref
                  def="dt-named-functions"
               >named functions</termref> component
            of the dynamic context.
            </p>
            
            <note diff="add" at="variadicity"><p>Consider the declared function <code>fn:format-date</code>
            with an arity range of 2 to 5. The named function reference <code>fn:format-date#3</code>
            returns a (dynamic) function whose three arguments correspond to the first three arguments
            of <code>fn:format-date</code>; the remaining two arguments will take their default values.
               To obtain a 3-argument function that binds to arguments 1, 2, and 5 of <code>fn:format-date</code>,
            use the partial function application <code>format-date(?, ?, place:?)</code>.</p></note>

            <p>
            Furthermore, if the function returned by the evaluation of
            a <code>NamedFunctionRef</code> has an
            implementation-dependent implementation, then the
            implementation of this function is associated with the
            static context of this <code>NamedFunctionRef</code>
            expression and with the dynamic context in which
            the <code>NamedFunctionRef</code> is evaluated.
          </p>





            <p>The following are examples of named function references:
          </p>

            <ulist>
               <item>
                  <p>
                     <code role="parse-test"
                     >fn:abs#1</code> references the <code>fn:abs</code> function which takes a single argument.</p>
               </item>
               <item>
                  <p>
                     <code role="parse-test"
                     >fn:concat#5</code> references the <code>fn:concat</code> function which takes 5 arguments.</p>
               </item>
               <item>
                  <p>
                     <code role="parse-test"
                     >local:myfunc#2</code> references a function named <code>local:myfunc</code> which takes 2 arguments.</p>
               </item>
            </ulist>
            
            <note diff="add" at="A"><p>Function items, as values in the data model, have a fixed arity, and
            a dynamic function call always supplies the arguments positionally. Although the base function
            referred to may be variadic, the result of evaluating the function reference is a function that
            has fixed arity. In effect, the result of evaluating <code>my:func#3</code> is the
            same as the result of evaluating the inline function expression <code>function($x, $y, $z){my:func($x, $y, $z)}</code>,
            except that the returned function has a name (it retains the name <code>my:func</code>).</p></note>

         </div4>

         <div4 id="id-inline-func">
            <head>Inline Function Expressions</head>

            <scrap>
               <head/>
               <prodrecap id="InlineFunctionExpr" ref="InlineFunctionExpr"/>
               <prodrecap ref="Annotation" role="xquery"/>
               <prodrecap ref="FunctionSignature" id="FunctionSignature"/>
               <prodrecap ref="ParamList" role="xpath"/>
               <prodrecap ref="Param" role="xpath"/>
               <prodrecap ref="TypeDeclaration" role="xpath"/>
               <prodrecap ref="FunctionBody" role="xpath"/>
            </scrap>


            <p>
               <termdef term="inline function expression" id="dt-inline-func"
                     >An <term>inline function expression</term> creates
          an <termref def="dt-anonymous-function">anonymous function</termref>
          defined directly in the inline function expression.</termdef> 
               An inline function expression specifies the names and SequenceTypes of the parameters to the function,
          the SequenceType of the result, and the body of the function. <termdef
                  id="dt-anonymous-function" term="anonymous function"
                     >An <term>anonymous function</term> is a function with no name.  
             Anonymous functions may be created, for example, by evaluating an inline function 
             expression or by partial function application.</termdef>
            </p>

 

            <note diff="add" at="A">
               <p>A more concise notation is introduced for simple functions in &language; because it 
                  can improve the readability of code
           by reducing visual clutter. For example, a sort operation previously written as <code>sort(//employee, (), 
              function($emp as element(employee)) as xs:string { $emp/@dateOfBirth })</code> can now be written
           <code>sort(//employee, (), ->{@dateOfBirth})</code>.</p>
               <p>The use of the notation <code>->{expr}</code> mirrors the use of <code>-></code>
                  as an <termref def="dt-arrow-operator"/>.</p>
      
            </note>

   

               <p>The full inline function syntax allows the names and types of the function argument to be declared, along
           with the type of the result:</p>

               <eg>function($x as xs:integer, $y as xs:integer) as xs:integer {$x + $y}</eg>

               <p>The types can be omitted:</p>

               <eg>function($x, $y) {$x + $y}</eg>
               
               <p diff="add" at="A">For brevity, the keyword <code>function</code> can be replaced by the symbol <code>-></code>:</p>
               
               <eg diff="add" at="A">->($x, $y) {$x + $y}</eg>
               
               <p diff="add" at="A">This avoids visual clutter when a function is used as an argument to another
               function:</p>
               
               <eg diff="add" at="A">fn:for-each-pair($A, $B, ->($a, $b) {$a + $b})</eg>
               
            <p diff="add" at="A">The common case where a function accepts a single argument of type
               <code>item()</code> can be further abbreviated to <code>->{EXPR}</code>. This is equivalent to the 
               expanded syntax <code>function($x as item()} as item()* {$x -> {EXPR}}</code>,
               where <code>x</code> is a system-allocated name that does not conflict with any user-defined variables. That is,
               it defines an anonymous arity-one function, accepting any single item as its argument value, and returns the
               result of evaluating the supplied expression with that item as the <termref def="dt-singleton-focus"/>.
            For example, the following function call returns the sequence <code>(2, 3, 4, 5, 6)</code>.</p>
            
            <eg diff="add" at="A">fn:for-each(1 to 5, ->{.+1})</eg>
            
 
            <p diff="add" at="A">A zero-arity function can be written as, for example, <code>->(){current-date()}</code>.</p>


         
               <p>
          If a function parameter is declared using a name but no type, its default type is <code>item()*</code>.
                  <!--<phrase diff="add" at="A">If it is bound to the context item using the notation <code>.</code>,
                  the implicit type is <code>item()</code>.</phrase>-->
               If the result type is omitted, its default result type is <code>item()*</code>.
          </p>

               <p>
          The parameters of an inline function expression are considered to be variables whose scope is the function body. It is a static error
          <errorref
                     class="ST" code="0039"
                  /> for an inline function expression to have more than one parameter with the same name.
          </p>

               <p role="xquery"
                     >An inline function
	  expression may have
	  annotations. &language; does not define annotations that
	  apply to inline function
	  expressions, in particular it is a <termref
                     def="dt-static-error">static error</termref>
                  <errorref class="ST" code="0125"
                     /> if an inline function expression is annotated as
	  <code>%public</code> or <code>%private</code>. An
	  implementation can define annotations, in its own namespace,
	  to support functionality beyond the scope of this
	  specification.</p>

               <p>
          The static context for the function body is inherited from the location of the inline function expression, with the exception of the
          static type of the context item which is initially <xtermref
                     spec="DM31" ref="dt-absent"/>.
          </p>
         
               <p>
          The variables in scope for the function body include all variables representing the function parameters, as well as all variables that
          are in scope for the inline function expression.</p>
          
          

          <note>
                     <p>
            Function parameter names can mask variables that would otherwise be in scope for the function body.
          </p>
                  </note>
            
            

               <p>The result of an inline function expression is a single function with the following properties (as defined in <xspecref
                     spec="DM31" ref="function-items"/>):</p>

          <ulist>
                     <item>
                        <p>
                           <term>name</term>:
              An absent name.
              Absent.
            </p>
                     </item>
                     <item>
                        <p>
                           <term>parameter names</term>:
              The parameter names in
              the <code>InlineFunctionExpr</code>'s
              <code>ParamList</code>.
            </p>
                     </item>
                     <item>
                        <p>
                           <term>signature</term>:
              A <code>FunctionTest</code>
              constructed from the
              <phrase
                              role="xquery">
                              <code>Annotation</code>s and</phrase>
                           <code>SequenceType</code>s in the <code>InlineFunctionExpr</code>.
	      An implementation which can determine a more specific signature (for example, through use of type analysis of the function's body) is permitted to do so.
            </p>
                     </item>
                     <item>
                        <p>
                           <term>implementation</term>:
              The <code>InlineFunctionExpr</code>'s <code>FunctionBody</code>.
            </p>
                     </item>
                     <item>
                        <p>
                           <term>nonlocal variable bindings</term>:
              For each nonlocal variable,
              a binding of it to its value in the
              <termref
                              def="dt-variable-values"
                              >variable values</termref> component
              of the dynamic context of the <code>InlineFunctionExpr</code>.
            </p>
                     </item>
                  </ulist>
              
         
               <p>The following are examples of some inline function expressions:</p>

               <ulist>
                  <item>
                     <p>This example creates a function that takes no arguments and returns a sequence of the first 6 primes:
                <eg
                           role="parse-test"
                           ><![CDATA[function() as xs:integer+ { 2, 3, 5, 7, 11, 13 }]]></eg>
                     </p>
                  </item>
                  <item>
                     <p>This example creates a function that takes two xs:double arguments and returns their product:
                <eg
                           role="parse-test"
                           ><![CDATA[function($a as xs:double, $b as xs:double) as xs:double { $a * $b }]]></eg>
                     </p>
                  </item>
                  <item diff="add" at="A">
                     <p>This example creates a function that prepends "$" to a supplied value:
                        <eg
                           role="parse-test"
                           ><![CDATA[->{"$" || .}]]></eg>
                     </p>
                     <p>It is equivalent to the function <code>concat("$", ?)</code>.</p>
                  </item>
                  <item diff="add" at="A">
                     <p>This example creates a function that returns the <code>name</code>
                        attribute of a supplied element node:
                        <eg
                           role="parse-test"
                           ><![CDATA[->{@name}]]></eg>
                     </p>
                     <p>It is equivalent to the function <code>function($x as item()) as item()* {$x ! @name}</code>.</p>
                  </item>
                  
   
               </ulist>    
         
         </div4>
         </div3>
         
                     <div3 id="id-coercion-rules">
               <head>Coercion Rules</head>

               <p diff="chg" at="A">
                  <termdef term="coercion rules" id="dt-coercion-rules"
                        >The <term>coercion rules</term> are used to convert an argument value <phrase
                        role="xquery"
                        >or a return value </phrase> to its expected type; that is, to the declared type of the function <phrase
                        role="xpath">parameter.</phrase>
                     <phrase role="xquery">parameter or return.</phrase>
                  </termdef> The expected type is expressed as a <termref def="dt-sequence-type"
                     >sequence type</termref>. 
		                The coercion rules are applied to a given value as follows:</p>

               <note role="xpath">
                  <p>In XSLT, the coercion rules are also used to convert the value of a variable to its declared type.</p>
               </note>

               <note diff="add" at="A">
                  <p>In previous versions of this specification, the coercion rules were referred to as the
               <emph>function conversion</emph> rules. The terminology has changed because the rules are not exclusively
               associated with functions or function calling.</p>
               </note>
               <ulist>

                  <item role="xpath">
                     <p>In a static function call, if  <termref def="dt-xpath-compat-mode">XPath
                          1.0 compatibility mode</termref> is <code>true</code> and an
                          argument of a static function is not of
                          the expected type, then the following conversions are applied
                          sequentially to the argument value V:</p>

                     <olist>

                        <item>
                           <p>If the expected type calls for a single item or optional single item (examples: <code>xs:string</code>, <code>xs:string?</code>, <code>xs:untypedAtomic</code>, <code>xs:untypedAtomic?</code>, <code>node()</code>, <code>node()?</code>, <code>item()</code>, <code>item()?</code>), then the value V is effectively replaced by V[1].</p>
                        </item>

                        <item>
                           <p>If the expected type is <code>xs:string</code> or <code>xs:string?</code>,
                      		then the  value <code>V</code> is effectively replaced by
                      		<code>fn:string(V)</code>.</p>
                        </item>

                        <item>
                           <p>If
		the expected type is <code>xs:double</code> or <code>xs:double?</code>, then the value <code>V</code> is effectively replaced by
		<code>fn:number(V)</code>.</p>
                        </item>
                     </olist>

                     <note>
                        <p>
                           <termref def="dt-xpath-compat-mode"
                              >XPath 1.0 compatibility
    mode</termref> has no effect on dynamic function calls,
    converting the result of an inline function to its required type,
    partial function application, or implicit function calls that
    occur when evaluating functions such as fn:for-each and fn:filter.</p>
                     </note>

                  </item>

                  <item>
                     <p>If the expected type is <phrase diff="add" at="A">a <code>SequenceType</code>
                     whose <code>ItemType</code> is a <termref def="dt-generalized-atomic-type"/> 
                     other than a union type or enumeration type,</phrase> (possibly with an occurrence indicator 
                        <code>*</code>, <code>+</code>, or <code>?</code>), then the following conversions are applied,
                        <phrase diff="add" at="A">in order</phrase>:</p>

                     <olist>

                        <item>
                           <p>
                              <termref def="dt-atomization">Atomization</termref> is applied to the given value, 
                              resulting in a sequence of atomic values.</p>
                        </item>

                        <item>
                           <p>Each item in the atomic sequence that is of type
		<code>xs:untypedAtomic</code> is cast to the expected 
                              atomic type. <phrase diff="add" at="A">If the expected atomic type is an 
                                 <termref def="dt-EnumerationType"/>,
		the value is cast to <code>xs:string</code></phrase>. If the item is of type <code>xs:untypedAtomic</code> 
                              and the expected type is <termref
                                 def="dt-namespace-sensitive"
                                 >namespace-sensitive</termref>, a <termref def="dt-type-error"
                                 >type error</termref>
                              <errorref class="TY" code="0117"/> is raised.</p>
                        </item>

                        <item>
                           <p>For each <termref def="dt-numeric">numeric</termref> item
                      		in the atomic sequence that can be
                      		<termref def="dt-type-promotion">promoted</termref> to the expected atomic type
		                      using numeric promotion as described in <specref ref="promotion"/>, the promotion is
		                      done.</p>
                        </item>

                        <item>
                           <p>For each item of type <code>xs:anyURI</code>
                              in the atomic sequence that can be <termref def="dt-type-promotion">promoted</termref> to the 
		                         expected atomic type using URI promotion as described in <specref
                                 ref="promotion"/>, the promotion is done.</p>
                        </item>
                        
                        <item diff="add" at="A">
                           <p>If the expected type is a sequence type whose item type is an atomic type <var>D</var>,
                              where <var>D</var> is derived from the primitive type <var>P</var>, then any item <var>V</var>in the 
                              atomic sequence is <term>relabeled</term> as an instance of <var>D</var> if it satisfies
                              all the following conditions: 
                           </p>
                           <olist>
                              <item><p><var>V</var> is an instance of <var>P</var>.</p></item>
                              <item><p><var>V</var> is not an instance of <var>D</var>.</p></item>
                              <item><p><var>V</var> is within the value space of <var>D</var>.</p></item>
                           </olist>
                           <p>Relabeling an atomic value changes the type annotation but not the value. For example, the
                           <code>xs:integer</code> value 3 can be relabeled as an instance of <code>xs:unsignedByte</code>, because
                              the value is within the value space of <code>xs:unsignedByte</code>.</p>
                           <p>Relabeling is not the same as casting. For example, the <code>xs:decimal</code> value 10.1
                           can be cast to <code>xs:integer</code>, but it cannot be relabeled as <code>xs:integer</code>,
                           because it is not within the value space of <code>xs:integer</code>.</p>
                           <note><p>The effect of this rule is that if, for example, a function parameter is declared
                           with an expected type of <code>xs:positiveInteger</code>, then a call that supplies the literal
                           value 3 will succeed, whereas a call that supplies -3 will fail.</p>
                              
                           <p>This differs from previous versions of this specification, where both these calls would fail.</p>
                           <p>In principle this change allows the arguments of existing functions to be defined with a 
                           more precise type. For example, the <code>$position</code> argument of <code>array:get</code>
                           could be defined as <code>xs:positiveInteger</code> rather than <code>xs:integer</code>. In practice,
                           however, it is not always possible to do this, because it would change the error codes thrown
                           when an invalid value is supplied.</p>
                           <p>TODO: define the interaction of numeric promotion and relabeling. For example, required type
                           = <code>xs:unsignedByte</code>, supplied value = <code>xs:decimal</code> 255.3.</p></note>
                        </item>
                     </olist>
                  </item>

                  <item diff="add" at="A">
                     <p>If the expected type is a <nt def="RecordTest"
                           >RecordTest</nt> (possibly with an occurrence indicator <code>*</code>,
                        <code>+</code>, or <code>?</code>), then the supplied value must be a map or sequence of maps, and the values of any
                     entries in these maps whose keys correspond to field declarations in the <code>RecordTest</code> are converted
                     to the required type defined by that field declaration, by applying these rules recursively 
                     (but with XPath 1.0 compatibility mode treated as false).</p>
                     <p>For example, if the required type is
                     <code>record(longitude as xs:double, latitude as xs:double)</code> and the supplied value is <code>map{"longitude": 0, "latitude":53.2}</code>,
                        then the map is converted to <code>map{"longitude": 0.0e0, "latitude": 53.2e0}</code>.</p>
                  </item>

                  <item>
                     <p>If the
		expected type is a <nt def="TypedFunctionTest"
                           >TypedFunctionTest</nt> (possibly with an occurrence indicator <code>*</code>,
		<code>+</code>, or <code>?</code>), <termref
                           def="dt-function-coercion"
                        >function coercion</termref> is applied to each function in the given value.</p>
                     <note>
                        <p>Maps and arrays are functions, so function coercion applies to them as well.</p>
                     </note>
                  </item>

                  <item>
                     <p> If, after the
		above conversions, the resulting value does not match
		the expected type according to the rules for <termref
                           def="dt-sequencetype-matching"
                           >SequenceType
		Matching</termref>, a <termref def="dt-type-error"
                           >type error</termref> is
		raised <errorref class="TY" code="0004"
                           />.
		<phrase role="xquery"
                              >If the function call takes place in a <termref def="dt-module"
                              >module</termref> other
		than the <termref def="dt-module"
                              >module</termref> in which the function is defined, this
		rule must be satisfied in both the module where the
		function is called and the module where the function
		is defined (the test is repeated because the two
		modules may have different <termref
                              def="dt-issd"
                           >in-scope schema definitions</termref>.)</phrase>
		Note that the rules for <termref
                           def="dt-sequencetype-matching"
                        >SequenceType
		Matching</termref> permit a value of a derived type to
		be substituted for a value of its base
		type. </p>
                  </item>
               </ulist>
            </div3>


            <div3 id="id-function-coercion">
               <head>Function Coercion</head>

               <p>
        Function coercion is a transformation applied to <xtermref spec="DM31"
                     ref="dt-function-item"
                     >functions</xtermref> during application of the
        <termref
                     def="dt-coercion-rules">coercion rules</termref>.
        <termdef
                     term="function coercion" id="dt-function-coercion">
                     <term>Function coercion</term> wraps a <xtermref spec="DM31"
                        ref="dt-function-item"
                     >function</xtermref>
        in a new function
        whose signature is the same as the expected type.
        This effectively delays the checking
        of the argument and return types
        until the function is invoked.</termdef>
               </p>

               <p>
        Function coercion
        is only defined to operate on
        <xtermref
                     spec="DM31" ref="dt-function-item"
                     >functions</xtermref>.
        Given a function
        <var>F</var>,
	and an expected function type,
                  <termref
                     def="dt-function-coercion"
                  >function coercion</termref>
	proceeds as follows:</p>
               <olist>
                  <item>
                     <p>If <var>F</var> has higher arity than the expected type,
                     a type error is raised <errorref
                           class="TY" code="0004"/></p>
                  </item>
                  <item diff="add" at="A">
                     <p>If <var>F</var> has lower arity than the expected type,
                     then <var>F</var> is wrapped in a new function that declares and ignores the
                  additional argument; the following steps are then applied to this new function.</p>
                     <p>For example, if the expected type is <code>function(node(), xs:boolean) as xs:string</code>,
                  and the supplied function is <code>fn:name#1</code>, then the supplied function is effectively
                  replaced by <code>function($n as node(), $b as xs:boolean) as xs:string {fn:name($n)}</code></p>
                     <note>
                        <p>This mechanism makes it easier to design versatile and extensible higher-order functions. 
                     For example, in previous versions of this specification, the second argument of
                     the <code>fn:filter</code> function expected an argument of type 
                     <code>function (item()) as xs:boolean</code>. This has now been extended to
                     <code>function (item(), xs:integer) as xs:boolean</code>, but existing code continues
                     to work, because callback functions that are not interested in the value of the second
                     argument simply ignore it.                    
                  </p>
                        <p>TODO: this change to fn:filter has not yet been made.</p>
                     </note>
                  </item>


                  <item>
                     <p>Function coercion then
        returns a new function
        with the following properties
        (as defined in <xspecref
                           spec="DM31" ref="function-items"/>):

        <ulist>
                           <item>
                              <p>
                                 <term>name</term>:
            The name of 
            <var>F</var>.
          </p>
                           </item>
                           <item>
                              <p>
                                 <term>parameter names</term>:
	      The parameter names of <var>F</var>.
            </p>
                           </item>
                           <item>
                              <p>
                                 <term>signature</term>:
            <code>Annotations</code> is set to the annotations of <var>F</var>. <code>TypedFunctionTest</code> is set to the expected type.
          </p>
                           </item>
                           <item>
                              <p>
                                 <term>implementation</term>:
            In effect,
            a <code>FunctionBody</code> that calls <var>F</var>,
            passing it the parameters of this new function,
            in order.
          </p>
                           </item>
                           <item>
                              <p>
                                 <term>nonlocal variable bindings</term>:
            An empty mapping.
          </p>
                           </item>
                        </ulist>
                     </p>
                  </item>
               </olist>
               <p>
        If the result of invoking the new function would
        necessarily result in a type error, that
        error may be raised during
                  <termref
                     def="dt-function-coercion"
                  >function coercion</termref>. It is implementation dependent whether this
        happens or not.
      </p>

               <p>
        These rules have the following consequences:

        <ulist>
                     <item>
                        <p>
            SequenceType matching of the function's arguments and result are delayed until that function is invoked.
          </p>
                     </item>
                     <item>
                        <p>
                           The <termref def="dt-coercion-rules"
                              >coercion rules</termref> rules applied to the function's arguments and result are defined by the SequenceType
            it has most recently been coerced to. Additional coercion rules could apply when the wrapped function
            is invoked.
          </p>
                     </item>
                     <item>
                        <p>
            If an implementation has static type information about a function, that can be used to type check the
            function's argument and return types during static analysis.
          </p>
                     </item>
                  </ulist>
               </p>

               <p role="xquery">
      For instance, consider the following query:
      <eg
                     role="parse-test"><![CDATA[
declare function local:filter($s as item()*, $p as function(xs:string) as xs:boolean) as item()*
{
  $s[$p(.)]
};

let $f := function($a) { starts-with($a, "E") }
return
  local:filter(("Ethel", "Enid", "Gertrude"), $f)
      ]]></eg>
               </p>

               <p role="xquery"
                     >
        The function <code>$f</code> has a static type of <code>function(item()*) as item()*</code>. When the <code>local:filter()</code> function
        is called, the following occurs to the function:

        <olist>
                     <item>
                        <p>
                           The <termref def="dt-coercion-rules"
                              >coercion rules</termref> result in applying 
                           <termref
                              def="dt-function-coercion"
                              >function coercion</termref> to 
            <code>$f</code>,
            wrapping $f in a new function ($p)
            with the signature <code>function(xs:string) as xs:boolean</code>.
          </p>
                     </item>
                     <item>
                        <p>
            $p is matched against the SequenceType of <code>function(xs:string) as xs:boolean</code>, and succeeds.
          </p>
                     </item>
                     <item>
                        <p>
                           When $p is invoked inside the predicate, <termref
                              def="dt-coercion-rules"
                              >coercion</termref> 
                           and SequenceType matching rules are applied to the context item argument,
            resulting in an <code>xs:string</code> value or a type error.
          </p>
                     </item>
                     <item>
                        <p>
            $f is invoked with the <code>xs:string</code>, which returns an <code>xs:boolean</code>.
          </p>
                     </item>
                     <item>
                        <p>$p applies <termref def="dt-coercion-rules"
                              >coercion rules</termref> to the result sequence from $f, which already matches its declared return type of <code>xs:boolean</code>.
          </p>
                     </item>
                     <item>
                        <p>
            The <code>xs:boolean</code> is returned as the result of $p.
          </p>
                     </item>
                  </olist>
               </p>

               <note>
                  <p>
                     Although the semantics of <termref
                        def="dt-function-coercion"
                     >function coercion</termref> are specified in terms of wrapping the functions,
        static typing will often be able to reduce the number of places where this is actually necessary.
      </p>
               </note>

               <p>Since maps and arrays are also functions in &language;, 
                  <termref
                     def="dt-function-coercion"
                  >function coercion</termref> applies to them as well.

        For instance, consider the following expression:
      </p>

               <eg role="parse-test"><![CDATA[
let $m := map {
  "Monday" : true(),
  "Wednesday" : true(),
  "Friday" : true(),
  "Saturday" : false(),
  "Sunday" : false()
},
$days := ("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
return fn:filter($days,$m)
      ]]></eg>

               <p>
        The map <code>$m</code> has a function signature of <code>function(xs:anyAtomicType) as item()*</code>. When the <code>fn:filter()</code> function is called, the following occurs to the map:

<olist>
                     <item>
                        <p>The map <code>$m</code> is treated as <code>function ($f)</code>,  equivalent to <code>map:get($m,?)</code>.</p>
                     </item>
                     <item>
                        <p>The <termref def="dt-coercion-rules"
                              >coercion rules</termref> result in applying 
                           <termref
                              def="dt-function-coercion"
                              >function coercion</termref> 
                           to <code>$f</code>, wrapping <code>$f</code> in a new function (<code>$p</code>) with the 
                           signature <code>function(item()) as xs:boolean</code>.</p>
                     </item>
                     <item>
                        <p>
                           <code>$p</code> is matched against the SequenceType <code>function(item()) as xs:boolean</code>, and succeeds.</p>
                     </item>
                     <item>
                        <p>When <code>$p</code> is invoked by <code>fn:filter()</code>, <termref
                              def="dt-coercion-rules"
                              >coercion</termref> 
                           and SequenceType matching rules are applied to the argument, resulting in an <code>item()</code> value 
                           (<code>$a</code>) or a type error.</p>
                     </item>
                     <item>
                        <p>
                           <code>$f</code> is invoked with <code>$a</code>, which returns an <code>xs:boolean</code> or the empty sequence.</p>
                     </item>
                     <item>
                        <p>
                           <code>$p</code> applies <termref def="dt-coercion-rules"
                              >coercion rule</termref> and SequenceType matching to the result sequence from <code>$f</code>. When the result is an <code>xs:boolean</code> the SequenceType matching succeeds. When it is an empty sequence (such as when <code>$m</code> does not contain a key for <code>"Tuesday"</code>), SequenceType matching results in a type error  <errorref
                              class="TY" code="0004"
                              />, since the expected type is <code>xs:boolean</code> and the actual type is an empty sequence.</p>
                     </item>
                  </olist>
               </p>

               <p>Consider the following expression:
      </p>

               <eg role="parse-test"><![CDATA[
let $m := map {
   "Monday" : true(),
   "Tuesday" : false(),
   "Wednesday" : true(),
   "Thursday" : false(),
   "Friday" : true(),
   "Saturday" : false(),
   "Sunday" : false()
}
let $days := ("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
return fn:filter($days,$m)
      ]]></eg>

               <p>The result of the expression is the sequence <code>("Monday", "Wednesday", "Friday")</code>
               </p>
            </div3>
      </div2>
      
      <div2 id="id-postfix-expression">
         <head>Postfix Expressions</head>

         <scrap>
            <head/>
            <prodrecap id="PostfixExpr" ref="PostfixExpr"/>
            <prodrecap ref="Predicate"/>
            <prodrecap ref="PositionalArgumentList"/>
            <prodrecap ref="PositionalArguments"/>               
            <prodrecap ref="Argument"/>
         </scrap>

         <p>
            <termdef term="filter expression" id="dt-filter-expression"
                  >An
    expression followed by a predicate (that is, <code>E1[E2]</code>)
    is referred to as a <term>filter expression</term>: its effect is
    to return those items from the value of <code>E1</code> that
    satisfy the predicate in E2.</termdef> Filter expressions are
    described in <specref
               ref="id-filter-expression"/>
         </p>

         <p>An expression (other than a raw EQName) followed by an argument
    list in parentheses (that is, <code>E1(E2, E3, ...)</code>) is
    referred to as a <termref
               def="dt-dynamic-function-invocation"
               >dynamic function call</termref>. Its
    effect is to evaluate <code>E1</code> to obtain a function,
    and then call that function, with
    <code>E2</code>, <code>E3</code>, <code>...</code> as
    arguments. Dynamic function calls are described in <specref
               ref="id-dynamic-function-invocation"/>.</p>

         <div3 id="id-filter-expression">
            <head>Filter Expressions</head>

            <scrap>
               <head/>
               <prodrecap ref="PostfixExpr"/>
               <prodrecap id="Predicate" ref="Predicate"/>
            </scrap>

            <p>A filter expression consists of a base expression followed by
      a predicate, which is an expression written in square
      brackets. The result of the filter expression consists of the
      items returned by the base expression, filtered by applying the
      predicate to each item in turn. The ordering of the items
      returned by a filter expression is the same as their order in
      the result of the primary expression.</p>

            <note>
               <p>Where the expression before the square brackets is a
      <nt def="ReverseStep"
                     >ReverseStep</nt> or <nt def="ForwardStep"
                     >ForwardStep</nt>, the expression is technically not a
      filter expression but an <nt
                     def="AxisStep"
                     >AxisStep</nt>. There are minor differences
      in the semantics: see <specref
                     ref="id-predicate"/>
               </p>
            </note>



            <p>Here are some examples of filter expressions:</p>

            <ulist>

               <item>
                  <p>Given a sequence of products in a variable, return only those products whose price is greater than 100.</p>
                  <eg role="parse-test"><![CDATA[$products[price gt 100]]]></eg>
               </item>

               <item>
                  <p>List all the integers from 1 to 100 that are divisible by 5. (See <specref
                        ref="construct_seq"
                     /> for an explanation of the <code>to</code> operator.)</p>
                  <eg role="parse-test"><![CDATA[(1 to 100)[. mod 5 eq 0]]]></eg>
               </item>

               <item>
                  <p>The result of the following expression is the integer 25:</p>
                  <eg role="parse-test"><![CDATA[(21 to 29)[5]]]></eg>
               </item>

               <item>
                  <p>The following example returns the fifth through ninth items in the sequence bound to variable <code>$orders</code>.</p>
                  <eg role="parse-test"><![CDATA[$orders[fn:position() = (5 to 9)]]]></eg>
               </item>

               <item>
                  <p>The following example illustrates the use of a filter expression as a <termref
                        def="dt-step">step</termref> in a <termref def="dt-path-expression"
                        >path expression</termref>. It returns the last chapter or appendix within the book bound to variable <code>$book</code>:</p>
                  <eg role="parse-test"><![CDATA[$book/(chapter | appendix)[fn:last()]]]></eg>
               </item>

            </ulist>

            <p>For each item in the input sequence, the predicate expression
      is evaluated using an <term>inner focus</term>, defined as
      follows: The context item is the item currently being tested
      against the predicate. The context size is the number of items
      in the input sequence. The context position is the position of
      the context item within the input sequence. </p>

            <p>For each item in the input sequence, the result of the
      predicate expression is coerced to an <code>xs:boolean</code>
      value, called the <term>predicate truth value</term>, as
      described below. Those items for which the predicate truth value
      is <code>true</code> are retained, and those for which the
      predicate truth value is <code>false</code> are discarded.</p>


            <p>The predicate truth value is derived by applying the following rules,
       in order:</p>

            <olist>

               <item>
                  <p>If the value of the predicate expression is a <termref def="dt-singleton"
                        >singleton</termref> atomic value of a
	   <termref def="dt-numeric"
                        >numeric</termref> type or derived
	   from a <termref def="dt-numeric"
                        >numeric</termref> type,
	   the predicate truth value is <code>true</code> if the value
	   of the predicate expression is equal (by the
	   <code>eq</code> operator) to the <term>context
	   position</term>, and is <code>false</code>
	   otherwise. <termdef
                        term="numeric predicate" role="xquery" id="dt-numeric-predicate"
                           >A predicate whose predicate
	   expression returns a numeric type is called a <term>numeric
	   predicate</term>.</termdef>
                  </p>

                  <note role="xquery">
                     <p>In a region of a query where <termref def="dt-ordering-mode"
                           >ordering mode</termref> is
	 <code>unordered</code>, the result of a numeric predicate is
	 <termref
                           def="dt-implementation-dependent"
                           >implementation-dependent</termref> , as explained in <specref
                           ref="id-unordered-expressions"/>.</p>
                  </note>
               </item>


               <item>
                  <p>Otherwise, the predicate truth value is the <termref def="dt-ebv"
                        >effective boolean value</termref> of the
	   predicate expression.</p>
               </item>

            </olist>
         </div3>

         <div3 id="id-dynamic-function-invocation">
            <head>Dynamic Function Calls</head>

            <scrap>
               <head/>
               <prodrecap ref="PostfixExpr"/>
               <prodrecap id="ArgumentList" ref="ArgumentList"/>              
               <prodrecap ref="PositionalArguments"/>  
               <prodrecap ref="Argument"/>
               <prodrecap ref="ArgumentPlaceholder"/>
               <prodrecap id="KeywordArguments" ref="KeywordArguments"/>
               <prodrecap id="KeywordArgument" ref="KeywordArgument"/>
            </scrap>

            <p>
               <termdef term="dynamic function call" id="dt-dynamic-function-invocation"
                     >A <term>dynamic function call</term>
            consists of a
            base expression
            that returns the function and a
            parenthesized list of zero or more arguments (<termref
                     def="dt-arg-expr"
                  >argument expressions</termref> or
            ArgumentPlaceholders).</termdef>
            </p>

            <p>
            A dynamic function call
            is evaluated as described in
            <specref
                  ref="id-eval-dynamic-function-call"/>.
          </p>

            <p>The following are examples of some dynamic function calls:</p>

            <ulist>
               <item>
                  <p>This example invokes the function contained in $f, passing the arguments 2 and 3:
                <eg
                        role="parse-test"><![CDATA[$f(2, 3)]]></eg>
                  </p>
               </item>
               <item>
                  <p>This example fetches the second item from sequence $f, treats it as a function and invokes it, passing an <code>xs:string</code> argument:
                <eg
                        role="parse-test"><![CDATA[$f[2]("Hi there")]]></eg>
                  </p>
               </item>
               <item>
                  <p>This example invokes the function <code>$f</code> passing no arguments, and filters the result with a positional predicate:
                <eg
                        role="parse-test"><![CDATA[$f()[2]]]></eg>
                  </p>
               </item>

            </ulist>
            
            <note diff="add" at="A">
               <p>Arguments in a dynamic function call are always supplied positionally.</p>
            </note>

         </div3>
      </div2>

      <div2 id="id-path-expressions">
         <head>Path Expressions</head>

         <scrap>
            <head/>
            <prodrecap id="PathExpr" ref="PathExpr"/>
            <prodrecap ref="RelativePathExpr"/>
         </scrap>
         <p>
            <termdef id="dt-path-expression" term="path expression"
                  >A <term>path expression</term> can be used to locate nodes
	 within trees. A path expression consists of a series of one or more
	 <termref
                  def="dt-step"
                  >steps</termref>, separated by "<code>/</code>" or
	 "<code>//</code>", and optionally beginning with
	 "<code>/</code>" or "<code>//</code>".</termdef> An initial
	 "<code>/</code>" or "<code>//</code>" is an abbreviation for
	 one or more initial steps that are implicitly added to the
	 beginning of the path expression, as described below.</p>
         <p>A
	 path expression consisting of a single step is evaluated as
	 described in <specref
               ref="id-steps"/>.</p>
         <p>A "<code>/</code>"
	 at the beginning of a path expression is an abbreviation for
	 the initial step <code>(fn:root(self::node()) treat as document-node())/</code> (however, if the
	 "<code>/</code>" is the entire path expression, the trailing "<code>/</code>" is omitted from the expansion.) The effect
	 of this initial step is to begin the path at the root node of
	 the tree that contains the context node. If the context item
	 is not a node, a <termref
               def="dt-type-error">type
	 error</termref> is raised <errorref class="TY" code="0020"
               />. At
	 evaluation time, if the root node of the context node is
	 not a document node, a <termref
               def="dt-dynamic-error">dynamic error</termref> is
	 raised <errorref class="DY"
               code="0050"/>.</p>

         <p>A "<code>//</code>" at the beginning of a path expression
	 is an abbreviation for the initial steps
	 <code>(fn:root(self::node()) treat as
	 document-node())/descendant-or-self::node()/</code> (however, "<code>//</code>" by itself is not a valid path expression <errorref
               class="ST" code="0003"
               />.)  The
	 effect of these initial steps is to establish an initial node
	 sequence that contains the root of the tree in which the
	 context node is found, plus all nodes descended from this
	 root.
	 This node sequence is used as the input to subsequent steps
	 in the path expression. If the context item is not a node, a
	 <termref
               def="dt-type-error">type error</termref> is
	 raised <errorref class="TY" code="0020"
               />. At evaluation time, if the
	 root node of the context node is not a document node, a
	 <termref
               def="dt-dynamic-error">dynamic error</termref> is
	 raised <errorref class="DY"
               code="0050"/>.</p>

         <note>
            <p>The descendants of a node do not include attribute
	 nodes<phrase role="xpath"
                  > or namespace nodes</phrase>.</p>
         </note>

         <p>
         A path expression that starts with "<code>/</code>"
         or "<code>//</code>" selects nodes starting from the root of
         the tree containing the context item; it is often referred to
         as an absolute path expression.
         </p>

         <div3 id="id-relative-path-expressions">
            <head>Relative Path Expressions</head>

            <scrap>
               <head/>
               <prodrecap id="RelativePathExpr" ref="RelativePathExpr"/>
            </scrap>

            <p>
          A relative path expression is a path expression that selects
          nodes within a tree by following a series of steps starting
          at the context node (which, unlike an absolute path
          expression, may be any node in a tree).
          </p>
            <p>
          Each non-initial occurrence of "<code>//</code>" in a path expression is
          expanded as described in <specref
                  ref="abbrev"
                  />, leaving a
          sequence of steps separated by "<code>/</code>". This sequence of steps
          is then evaluated from left to right. So a path such as
          <code>E1/E2/E3/E4</code> is evaluated
          as <code>((E1/E2)/E3)/E4</code>. The semantics of a path
          expression are thus defined by the semantics of the
          binary "<code>/</code>" operator, which is defined in
          <specref
                  ref="id-path-operator"/>.
          </p>

            <note>
               <p>
         Although the semantics describe the evaluation of a path with
         more than two steps as proceeding from left to right, the "<code>/</code>"
         operator is in most cases associative, so evaluation from
         right to left usually delivers the same result. The cases
         where "<code>/</code>" is not associative arise when the functions
         <code>fn:position()</code> and <code>fn:last()</code> are
         used: <code>A/B/position()</code> delivers a sequence of
         integers from 1 to the size of <code>(A/B)</code>, whereas
         <code>A/(B/position())</code> restarts the counting at each <code>B</code> element.
         </p>
            </note>

            <p>The following example illustrates the use of relative path expressions.</p>

            <example>
               <ulist>
                  <item>
                     <p>
                        <code role="parse-test">child::div1/child::para</code>
                     </p>
                     <p>Selects the
	     <code>para</code> element children of the <code>div1</code>
	     element children of the context node; that is, the
	     <code>para</code> element grandchildren of the context node
	     that have <code>div1</code> parents.</p>
                  </item>
               </ulist>
            </example>



            <note>
               <p>Since each step in a path provides context nodes for the following step, in effect, only the last step in a path is allowed to return a sequence of non-nodes.</p>
            </note>


            <note>
               <p id="Chg-slash-note"
                     >The "<code>/</code>" character
	 can be used either as a complete path expression or as the
	 beginning of a longer path expression such as
	 "<code>/*</code>".  Also, "<code
                     role="parse-test"
                     >*</code>"
	 is both the multiply operator and a wildcard in path
	 expressions.  This can cause parsing difficulties when
	 "<code>/</code>" appears on the left-hand side of
	 "<code>*</code>".  This is resolved using the <loc
                     href="#parse-note-leading-lone-slash"
                     >leading-lone-slash
	 </loc> constraint.  For example, "<code role="parse-test"
                     >/*</code>" and "<code role="parse-test"
                     >/
	 *</code>" are valid path expressions containing wildcards,
	 but "<code>/*5</code>" and "<code>/ * 5</code>" raise syntax
	 errors. Parentheses must be used when "<code>/</code>" is
	 used on the left-hand side of an operator, as in "<code
                     role="parse-test"
                     >(/) * 5</code>". Similarly, "<code>4 + / *
	 5</code>" raises a syntax error, but "<code
                     role="parse-test"
                     >4 + (/) * 5</code>" is a valid expression.
	 The expression "<code
                     role="parse-test"
                  >4 + /</code>" is also
	 valid, because <code>/</code> does not occur on the left-hand
	 side of the operator.</p>

               <p>Similarly, in the expression <code role="parse-test"
                     >/
	 union /*</code>, "union" is interpreted as an element name
	 rather than an operator. For it to be parsed as an operator,
	 the expression should be written <code
                     role="parse-test">(/)
	 union /*</code>.</p>

            </note>


            <div4 id="id-path-operator">
               <head>Path operator (<code>/</code>)</head>

               <p>The path operator "/" is used to build expressions for locating nodes within trees. Its left-hand side expression must return a sequence of nodes. The operator returns either a sequence of nodes, in which case it additionally performs document ordering and duplicate elimination, or a sequence of non-nodes.</p>

               <p>Each operation <code>E1/E2</code> is evaluated as follows: Expression <code>E1</code> is evaluated, and if the result is not a (possibly empty) sequence <code>S</code> of nodes, a <termref
                     def="dt-type-error">type error</termref> is raised <errorref class="TY"
                     code="0019"
                     />. Each node in <code>S</code> then serves in turn to provide an inner focus (the node as the context item, its position in <code>S</code> as the context position, the length of <code>S</code> as the context size) for an evaluation of <code>E2</code>, as described in  <specref
                     ref="eval_context"
                     />. The sequences resulting from all the evaluations of <code>E2</code> are combined as follows:</p>


               <olist>
                  <item>
                     <p>If every evaluation of <code>E2</code> returns a (possibly empty) sequence of nodes, these sequences are combined, and duplicate nodes are eliminated based on node identity.
  <phrase
                           role="xpath">The resulting node sequence is returned in <termref
                              def="dt-document-order">document order</termref>.</phrase>
                        <phrase role="xquery"
                              >If ordering mode is ordered, the resulting node sequence is returned in <termref
                              def="dt-document-order"
                              >document order</termref>; otherwise it is returned in  <termref
                              def="dt-implementation-dependent"
                           >implementation-dependent</termref> order.</phrase>
                     </p>
                  </item>

                  <item>
                     <p>If every evaluation of <code>E2</code> returns a (possibly empty) sequence of non-nodes, these sequences are concatenated<phrase
                           role="xpath">, in order,</phrase> and returned.
  <phrase role="xquery"
                              >If <termref def="dt-ordering-mode"
                              >ordering mode</termref> is <code>ordered</code>, the</phrase>
                        <phrase role="xpath"
                           >The</phrase> returned sequence preserves the orderings within and among the subsequences generated by the evaluations of <code>E2</code>
                        <phrase role="xpath">.</phrase>
                        <phrase role="xquery"
                              >; otherwise the order of the returned sequence is <termref
                              def="dt-implementation-dependent"
                           >implementation-dependent</termref>.</phrase>
                     </p>
                  </item>

                  <item>
                     <p>If the multiple evaluations of <code>E2</code> return at least one node and at least one non-node, a <termref
                           def="dt-type-error">type error</termref> is raised <errorref class="TY"
                           code="0018"/>.</p>
                  </item>
               </olist>

               <note>
                  <p>The semantics of the path operator can also be defined using the simple map operator as follows (forming the union with an empty sequence <code>($R | ())</code> has the effect of eliminating duplicates and sorting nodes into document order):</p>
                  <eg><![CDATA[E1/E2 ::= let $R := E1!E2
  return
    if (every $r in $R satisfies $r instance of node())
    then ($R|())
    else if (every $r in $R satisfies not($r instance of node()))
    then $R
    else error()]]></eg>
               </note>
            </div4>

         </div3>



         <div3 id="id-steps">
            <head>Steps</head>
            <scrap>
               <head/>
               <prodrecap id="StepExpr" ref="StepExpr"/>
               <prodrecap ref="AxisStep"/>
               <prodrecap id="ForwardStep" ref="ForwardStep"/>
               <prodrecap id="ReverseStep" ref="ReverseStep"/>
               <prodrecap ref="PredicateList"/>
            </scrap>
            <p>
               <termdef term="step" id="dt-step">A <term>step</term> is a part of a <termref
                     def="dt-path-expression"
                     >path expression</termref> that generates a sequence of items
		and then filters the sequence by zero or more
		<termref
                     def="dt-predicate"
                     >predicates</termref>. The value of the step
		consists of those items that satisfy the
		predicates, working from left to right. A step may be either an <termref
                     def="dt-axis-step"
                  >axis step</termref> or a postfix expression.</termdef> Postfix expressions are described in <specref
                  ref="id-postfix-expression"/>.</p>
            <p>
               <termdef term="axis step" id="dt-axis-step"
                     >An <term>axis step</term> returns a sequence of nodes that are reachable from the context node via a specified axis. Such a step has two parts: an
		<term>axis</term>, which defines the "direction of
		movement" for the step, and a <termref
                     def="dt-node-test"
                     >node test</termref>,
		which selects nodes based on their kind, name, and/or
		<termref
                     def="dt-type-annotation"
                  >type annotation</termref>.</termdef> If the context item is a node, an axis
		step returns a sequence of zero or more
		nodes; otherwise, a <termref
                  def="dt-type-error">type error</termref> is
		raised <errorref class="TY"
                  code="0020"/>.   <phrase role="xpath"
                     >The resulting node sequence is returned in <termref def="dt-document-order"
                     >document
	 order</termref>.</phrase>
               <phrase role="xquery">If <termref def="dt-ordering-mode"
                     >ordering mode</termref> is <code>ordered</code>, the resulting node sequence is returned in <termref
                     def="dt-document-order"
                     >document
	 order</termref>; otherwise it is returned in <termref
                     def="dt-implementation-dependent"
                  >implementation-dependent</termref> order.</phrase> An axis step may be either a <term>forward
		step</term> or a <term>reverse step</term>, followed
		by zero or more <termref
                  def="dt-predicate">predicates</termref>.</p>

            <p>In the <term>abbreviated syntax</term> for a step, the axis can
		be omitted and other shorthand notations can be used as described in
		<specref
                  ref="abbrev"/>.</p>
            <p>The unabbreviated syntax for an axis step consists of the axis name
		and node test separated by a double colon. The result of the step consists of the nodes
		reachable from the context node via the specified axis that have the node kind, name,
		and/or <termref
                  def="dt-type-annotation"
                  >type annotation</termref> specified by the node test. For example, the
		step <code
                  role="parse-test"
                  >child::para</code> selects the <code>para</code> element children of the context node: <code>child</code> is the name of the axis, and <code>para</code> is the name of the element nodes to be selected on this axis. The available axes are described in <specref
                  ref="axes"/>. The
		available node tests are described in <specref
                  ref="node-tests"/>. Examples of
		steps are provided in <specref ref="unabbrev"
                  /> and <specref ref="abbrev"/>.</p>

            <div4 id="axes">
               <head>Axes</head>
               <scrap>
                  <head/>
                  <prodrecap id="ForwardAxis" ref="ForwardAxis"/>
                  <prodrecap id="ReverseAxis" ref="ReverseAxis"/>
               </scrap>




               <p role="xpath"
                     >XPath defines a full set of <term>axes</term>
		  for traversing documents, but a <term>host language</term> may define a subset
		  of these axes. The following axes are defined:</p>

               <p role="xquery"
                  >XQuery supports the following axes<!-- <phrase diff="del"/>
		  (subject to limitations as described in <specref ref="id-full-axis-feature"/>)-->:</p>


               <ulist>


                  <item>

                     <p>The <code>child</code> axis
				contains the children of the context
				node, which are the nodes returned by the
				<xspecref
                           spec="DM31" ref="dm-children"/>.
                                </p>


                     <note>

                        <p>Only document
                                                  nodes and element
                                                  nodes have
                                                  children. If the
                                                  context node is any
                                                  other kind of node,
                                                  or if the context
                                                  node is an empty
                                                  document or element
                                                  node, then the child
                                                  axis is an empty
                                                  sequence.  The
                                                  children of a
                                                  document node or
                                                  element node may be
                                                  element, processing
                                                  instruction,
                                                  comment, or text
                                                  nodes.  Attribute<phrase
                              role="xpath"
                              >,
                                                  namespace,</phrase> and
                                                  document nodes can
                                                  never appear as
                                                  children.</p>
                     </note>

                  </item>

                  <item>
                     <p>the <code>descendant</code>
			 axis is defined as the transitive closure of
			 the child axis; it contains the descendants
			 of the context node (the children, the children of the children, and so on)</p>

                  </item>



                  <item>

                     <p>the <code>parent</code>
                                          axis contains the sequence
                                          returned by the
				          <xspecref
                           spec="DM31" ref="dm-parent"
                        />, 
                                          which returns
                                          the parent of the context
                                          node, or an empty sequence
                                          if the context node has no
                                          parent</p>

                     <note>
                        <p>An attribute node may have an element node as its parent, even though the attribute node is not a child of the element node.</p>
                     </note>
                  </item>



                  <item>
                     <p>the
                                        <code>ancestor</code> axis is
                                        defined as the transitive
                                        closure of the parent axis; it
                                        contains the ancestors of the
                                        context node (the parent, the
                                        parent of the parent, and so
                                        on)</p>

                     <note>
                        <p>The ancestor axis
                                        includes the root node of the
                                        tree in which the context node
                                        is found, unless the context
                                        node is the root node.</p>
                     </note>

                  </item>



                  <item>
                     <p>the <code>following-sibling</code>
			 axis contains the context node's following
			 siblings, those children of the context
			 node's parent that occur after the context
			 node in <termref
                           def="dt-document-order"
                           >document order</termref>; if the context node
			 is an attribute <phrase
                           role="xpath"
                           > or namespace </phrase> node, the
			 <code>following-sibling</code> axis is
			 empty</p>
                  </item>



                  <item>
                     <p>the <code>preceding-sibling</code>
			 axis contains the context node's preceding
			 siblings, those children of the context
			 node's parent that occur before the context
			 node in <termref
                           def="dt-document-order"
                           >document order</termref>; if the context node
			 is an attribute <phrase
                           role="xpath"
                           > or namespace </phrase> node, the
			 <code>preceding-sibling</code> axis is
			 empty</p>
                  </item>



                  <item>

                     <p>the <code>following</code> axis
				contains all nodes that are
				descendants of the root of the tree in
				which the context node is found, are
				not descendants of the context node,
				and occur after the context node in
				<termref
                           def="dt-document-order">document order</termref>
                     </p>

                  </item>



                  <item>

                     <p>the <code>preceding</code> axis
				contains all nodes that are
				descendants of the root of the tree in
				which the context node is found, are
				not ancestors of the context node, and
				occur before the context node in
				<termref
                           def="dt-document-order">document order</termref>
                     </p>

                  </item>



                  <item>
                     <p>the <code>attribute</code> axis
			 contains the attributes of the context node,
			 which are the nodes returned by the
			 <phrase diff="chg" at="B">
			 <xspecref spec="DM31" ref="dm-attributes"/></phrase>; the axis will be
			 empty unless the context node is an
			 element</p>

                  </item>



                  <item>
                     <p>the <code>self</code> axis contains just the context node itself</p>
                  </item>


                  <item>
                     <p>the <code>descendant-or-self</code> axis contains the context node and the descendants of the context
				node</p>
                  </item>


                  <item>
                     <p>the <code>ancestor-or-self</code> axis contains the context node and the ancestors of the context node;
				thus, the ancestor-or-self axis will always include the root node</p>
                  </item>



                  <item role="xpath">

                     <p>the <code>namespace</code> axis
				contains the namespace nodes of the
				context node, which are the nodes
				returned by the
                                <xspecref
                           spec="DM31" ref="dm-namespace-nodes"
                           />; this axis
				is empty unless the context node is an
				element node. The
				<code>namespace</code> axis is
				deprecated as of XPath 2.0. If <termref
                           def="dt-xpath-compat-mode"
                           >XPath 1.0
		compatibility mode</termref> is <code>true</code>, the <code>namespace</code> axis must be supported. If <termref
                           def="dt-xpath-compat-mode"
                           >XPath 1.0
		compatibility mode</termref> is <code>false</code>, then support for the
				<code>namespace</code> axis is
				<termref
                           def="dt-implementation-defined"
                           >implementation-defined</termref>. An implementation
				that does not support the
				<code>namespace</code> axis when <termref
                           def="dt-xpath-compat-mode"
                           >XPath 1.0
		compatibility mode</termref> is <code>false</code> must raise
				a <termref
                           def="dt-static-error">static
				error</termref>
                        <errorref class="ST" code="0010"
                           /> if it is
				used. Applications needing information
				about the <termref
                           def="dt-in-scope-namespaces"
                           >in-scope namespaces</termref> of an element
				should use the functions
				<xspecref
                           spec="FO31" ref="func-in-scope-prefixes"/>, 
				and
				<xspecref
                           spec="FO31" ref="func-namespace-uri-for-prefix"
                        />.
                                </p>

                  </item>
               </ulist>
               <p>Axes can be categorized as <term>forward axes</term> and
		  <term>reverse axes</term>. An axis that only ever contains the context node or
		  nodes that are after the context node in <termref
                     def="dt-document-order"
                     >document order</termref> is a forward axis. An
		  axis that only ever contains the context node or nodes that are before the
		  context node in <termref
                     def="dt-document-order">document order</termref> is a reverse axis.</p>
               <p>The <code>parent</code>, <code>ancestor</code>, <code>ancestor-or-self</code>, <code>preceding</code>, and <code>preceding-sibling</code> axes are reverse axes; all other axes are forward axes. The <code>ancestor</code>, <code>descendant</code>, <code>following</code>, <code>preceding</code> and <code>self</code> axes partition a document (ignoring attribute <phrase
                     role="xpath"
                  >and namespace</phrase> nodes):
		  they do not overlap and together they contain all the nodes in the
		  document.</p>

               <p>
                  <termdef id="dt-principal-node-kind" term="principal node kind"
                        >Every axis has a <term>principal node kind</term>. If an axis can
		  contain elements, then the principal node kind is element; otherwise, it is the
		  kind of nodes that the axis can contain.</termdef> Thus:</p>

               <ulist>


                  <item>
                     <p>For the attribute axis, the principal node kind is
				attribute.</p>
                  </item>


                  <item role="xpath">
                     <p>For the namespace axis, the principal node kind is
				namespace.</p>
                  </item>


                  <item>
                     <p>For all other axes, the principal node kind is element.</p>
                  </item>
               </ulist>

            </div4>
            <div4 id="node-tests">
               <head>Node Tests</head>
               <p>
                  <termdef id="dt-node-test" term="node test"
                        >A <term>node test</term> is a condition on the name, kind (element, attribute, text, document, comment,
		  or processing instruction), and/or  <termref
                        def="dt-type-annotation"
                        >type annotation</termref> of a node. 
      A node test determines which nodes contained by an axis are selected by a <termref
                        def="dt-step">step</termref>.</termdef>
               </p>
               <scrap>
                  <head/>
                  <prodrecap id="NodeTest" ref="NodeTest"/>
                  <prodrecap id="NameTest" ref="NameTest"/>
                  <prodrecap id="Wildcard" ref="Wildcard"/>
                  <prodrecap ref="EQName"/>
               </scrap>

               <p>
                  <termdef id="dt-name-test" term="name test"
                        >A node test that consists only of an EQName or a
		  Wildcard is called a <term>name test</term>.</termdef> A name
		  test that consists of an EQName is true if and only if the <term>kind</term> of
		  the node is the <termref
                     def="dt-principal-node-kind"
                     >principal node kind</termref> for the step axis and the
		  <termref
                     def="dt-expanded-qname"
                     >expanded QName</termref> of the node is equal (as defined by the <code>eq</code> operator) to the
		  <termref
                     def="dt-expanded-qname"
                     >expanded QName</termref> specified by the name test. For
		  example, <code
                     role="parse-test"
                     >child::para</code>
		  selects the <code>para</code> element children of
		  the context node; if the context node has no
		  <code>para</code> children, it selects an empty set
		  of nodes. <code
                     role="parse-test"
                     >attribute::abc:href</code> selects
		  the attribute of the context node with the QName
		  <code>abc:href</code>; if the context node has no
		  such attribute, it selects an empty set of
		  nodes.</p>
               <p>If the EQName is a <termref def="dt-qname"
                     >lexical QName</termref>, it is resolved into an <termref
                     def="dt-expanded-qname">expanded QName</termref> using the
		  <termref
                     def="dt-static-namespaces"
                     >statically known namespaces</termref> in the expression
		  context. It is a <termref
                     def="dt-static-error">static error</termref>
                  <errorref class="ST" code="0081"
                     /> if the QName has a prefix that does not
		  correspond to any statically known namespace.

          An unprefixed QName, when used as a
		  name test on an axis whose <termref
                     def="dt-principal-node-kind"
                     >principal node kind</termref> is
		  element, has the namespace URI of the <termref
                     def="dt-def-element-ns" diff="chg" at="A"
                  >default element namespace</termref> in
		  the expression context; otherwise, it has no namespace URI. </p>
               <p>A name test is not satisfied by an element node whose name does not match the <termref
                     def="dt-expanded-qname"
                     >expanded QName</termref> of the name test, even if it is in a <termref
                     def="dt-substitution-group"
                  >substitution group</termref> whose head is the named element.</p>
               <p>A node test <code>*</code> is true for any node of the
		  <termref
                     def="dt-principal-node-kind"
                     >principal node
		  kind</termref> of the step axis. For example, <code
                     role="parse-test"
                     >child::*</code> will select all element
		  children of the context node, and <code
                     role="parse-test"
                  >attribute::*</code> will select all
		  attributes of the context node.</p>

               <p>A node test can have the form
		  <code role="parse-test"
                     >NCName:*</code>. In this case, the prefix is
		  expanded in the same way as with a <termref
                     def="dt-qname">lexical QName</termref>, using the
		  <termref
                     def="dt-static-namespaces"
                     >statically known
		  namespaces</termref> in the <termref
                     def="dt-static-context"
                     >static context</termref>. If
		  the prefix is not found in the statically known namespaces,
		  a <termref
                     def="dt-static-error">static
		  error</termref> is raised <errorref class="ST"
                     code="0081"/>.
		  The node test is true for any node of the <termref
                     def="dt-principal-node-kind"
                     >principal
		  node kind</termref> of the step axis whose <termref
                     def="dt-expanded-qname"
                  >expanded QName</termref> has the namespace URI
		  to which the prefix is bound, regardless of the
		  local part of the name.</p>

               <p>A node test can contain a BracedURILiteral, e.g.
		  <code role="parse-test"
                     >Q{http://example.com/msg}*</code> Such a node test is true for any node of the principal node kind of the step axis whose expanded QName has the namespace URI specified in the BracedURILiteral, regardless of the local part of the name.</p>

               <p>A node test can also
		  have the form <code role="parse-test"
                     >*:NCName</code>. In this case,
		  the node test is true for any node of the <termref
                     def="dt-principal-node-kind"
                  >principal
		  node kind</termref> of the step axis whose local name matches the given NCName,
		  regardless of its namespace or lack of a namespace.</p>
               <p>
                  <termdef term="kind test" id="dt-kind-test"
                        >An alternative
		  form of a node test called a
		  <term>kind test</term> can select nodes based
		  on their kind, name, and <termref
                        def="dt-type-annotation"
                     >type annotation</termref>.</termdef> The syntax
		  and semantics of a kind test are described in
		  <specref
                     ref="id-sequencetype-syntax"/> and <specref ref="id-sequencetype-matching"
                     />. When a kind test is used
		  in a <termref def="dt-node-test"
                     >node test</termref>, only those nodes on the designated
		  axis that match the kind test are selected. Shown
		  below are several examples of kind tests that might
		  be used in path
		  expressions:</p>
               <ulist>

                  <item>
                     <p>
                        <code role="parse-test">node()</code>
		  matches any
		  node.</p>
                  </item>

                  <item>
                     <p>
                        <code role="parse-test">text()</code> matches
		  any text
		  node.</p>
                  </item>

                  <item>
                     <p>
                        <code role="parse-test"
                        >comment()</code>
		  matches any comment
		  node.</p>
                  </item>


                  <item>
                     <p>
                        <code role="parse-test"
                        >namespace-node()</code> matches any
		  namespace node.</p>
                  </item>



                  <item>
                     <p>
                        <code role="parse-test"
                        >element()</code>
		  matches any element
		  node.</p>
                  </item>

                  <item>
                     <p>
                        <code role="parse-test"
                           >schema-element(person)</code>
		  matches any element node whose name is
		  <code>person</code> (or is in the <termref
                           def="dt-substitution-group"
                           >substitution group</termref>
		  headed by <code>person</code>), and whose type
		  annotation is the same as (or is derived from) the declared type of the <code>person</code>
		  element in the <termref
                           def="dt-is-elems">in-scope element declarations</termref>.</p>
                  </item>

                  <item>
                     <p>
                        <code role="parse-test"
                           >element(person)</code> matches any element node whose name is
		  <code>person</code>, regardless of its type annotation.</p>
                  </item>

                  <item>
                     <p>
                        <code role="parse-test"
                           >element(person, surgeon)</code> matches any non-nilled element node whose name
		  is <code>person</code>, and whose type
		  annotation is
		  <code>surgeon</code> or is derived from <code>surgeon</code>.</p>
                  </item>

                  <item>
                     <p>
                        <code role="parse-test"
                           >element(*,
		  surgeon)</code> matches any non-nilled element node whose type
		  annotation is <code>surgeon</code> (or is derived from <code>surgeon</code>), regardless of
		  its
		  name.</p>
                  </item>




                  <item>
                     <p>
                        <code role="parse-test"
                        >attribute()</code> matches any
                  attribute node.</p>
                  </item>



                  <item>
                     <p>
                        <code role="parse-test"
                           >attribute(price)</code> matches
                  any attribute whose name is <code>price</code>,
                  regardless of its type annotation.</p>
                  </item>

                  <item>
                     <p>
                        <code role="parse-test"
                           >attribute(*,
                  xs:decimal)</code> matches any attribute whose type
                  annotation is <code>xs:decimal</code> (or is derived from <code>xs:decimal</code>), regardless of
                  its
                  name.</p>
                  </item>

                  <item>
                     <p>
                        <code role="parse-test"
                        >document-node()</code>
                  matches any document
                  node.</p>
                  </item>

                  <item>
                     <p>
                        <code role="parse-test"
                           >document-node(element(book))</code>
                  matches any document node whose content consists of
                  a single element node that satisfies the <termref
                           def="dt-kind-test">kind test</termref>
                        <code role="parse-test"
                        >element(book)</code>, interleaved with zero or more
                  comments and processing
                  instructions.</p>
                  </item>

               </ulist>
            </div4>
         </div3>

         <div3 id="id-predicate">
            <head>Predicates within Steps</head>

            <scrap>
               <head/>
               <prodrecap id="AxisStep" ref="AxisStep"/>
               <prodrecap id="PredicateList" ref="PredicateList"/>
               <prodrecap ref="Predicate"/>
            </scrap>
            <p id="dt-predicate"
                  >A predicate within a Step has similar syntax and semantics
	 to a predicate within a <termref
                  def="id-filter-expression"
               >filter expression</termref>.  The
	 only difference is in the way the context position is set for
	 evaluation of the predicate.</p>

            <p>For the purpose of evaluating the context position within
	 a predicate, the input sequence is considered to be sorted as
	 follows: into document order if the predicate is in a
	 forward-axis step, into reverse document order if the
	 predicate is in a reverse-axis step, or in its original order
	 if the predicate is not in a step.</p>

            <p>Here are some examples of <termref def="dt-axis-step"
               >axis steps</termref> that contain predicates:</p>

            <ulist>


               <item>
                  <p>This example selects the second <code>chapter</code> element that is a child
			 of the context node:</p>
                  <eg role="parse-test"><![CDATA[child::chapter[2]]]></eg>
               </item>


               <item>
                  <p>This example selects all the descendants of the
		  context node that are elements named
		  <code>"toy"</code> and whose <code>color</code>
		  attribute has the value <code>"red"</code>:</p>
                  <eg role="parse-test"><![CDATA[descendant::toy[attribute::color = "red"]]]></eg>
               </item>


               <item>
                  <p>This example selects all the <code>employee</code> children of the context node
		that have both a <code>secretary</code> child element and an <code>assistant</code> child element:</p>
                  <eg role="parse-test"><![CDATA[child::employee[secretary][assistant]]]></eg>
               </item>
            </ulist>






            <note>
               <p>When using <termref def="dt-predicate"
                     >predicates</termref> with a sequence of nodes selected using a
<term>reverse axis</term>, it is important to remember that the
context positions for such a sequence are assigned in <termref
                     def="dt-reverse-document-order"
                     >reverse
document order</termref>. For example, <code role="parse-test"
                     >preceding::foo[1]</code>
returns the first qualifying <code>foo</code> element in <termref
                     def="dt-reverse-document-order"
                     >reverse document order</termref>, because the predicate is part of an <termref
                     def="dt-axis-step">axis step</termref> using a reverse axis. By
contrast, <code
                     role="parse-test"
                     >(preceding::foo)[1]</code> returns the first qualifying <code>foo</code>
element in <termref
                     def="dt-document-order"
                     >document order</termref>, because the parentheses cause  <code
                     role="parse-test">(preceding::foo)</code> to be parsed as a <termref
                     def="dt-primary-expression"
                     >primary expression</termref> in which context positions are assigned in document order. Similarly, <code
                     role="parse-test"
                     >ancestor::*[1]</code>
returns the nearest ancestor element, because the <code>ancestor</code> axis is a
reverse axis, whereas <code
                     role="parse-test"
                  >(ancestor::*)[1]</code> returns the root element (first ancestor in document order).</p>
               <p>The fact that a reverse-axis step assigns context positions in reverse
document order for the purpose of evaluating predicates does not alter the
fact that the final result of the step <phrase
                     role="xquery">(when in ordered mode) </phrase> is always in document order.</p>
            </note>
         </div3>
         <div3 id="unabbrev">
            <head>Unabbreviated Syntax</head>
            <p>This section provides a number of examples of path expressions in which the
axis is explicitly specified in each <termref
                  def="dt-step"
                  >step</termref>. The syntax used in these examples is
called the <term>unabbreviated syntax</term>. In many common cases, it is
possible to write path expressions more concisely using an <term>abbreviated
syntax</term>, as explained in <specref
                  ref="abbrev"/>.</p>

            <ulist>


               <item>
                  <p>
                     <code role="parse-test"
                     >child::para</code> selects
the <code>para</code> element children of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >child::*</code> selects all element children of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >child::text()</code> selects all text node children of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >child::node()</code> selects all the children of the context node. Note that no attribute nodes are returned, because attributes are not children.</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >attribute::name</code> selects the <code>name</code> attribute of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >attribute::*</code> selects all the attributes of the context node</p>
               </item>

               <item>
                  <p>
                     <code role="parse-test"
                     >parent::node()</code> selects the parent of the context node. If the context node is an attribute node, this expression returns the element node (if any) to which the attribute node is attached.</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >descendant::para</code> selects the <code>para</code> element descendants of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >ancestor::div</code> selects all <code>div</code> ancestors of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >ancestor-or-self::div</code> selects the <code>div</code> ancestors of the context node and, if the context node is a <code>div</code> element, the context node as well</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >descendant-or-self::para</code> selects the <code>para</code> element descendants of the context node and, if the context node is a <code>para</code> element, the context node as well</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >self::para</code> selects the context node if it is a <code>para</code> element, and otherwise returns an empty sequence</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >child::chapter/descendant::para</code> selects the <code>para</code> element
descendants of the <code>chapter</code> element children of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >child::*/child::para</code> selects all <code>para</code> grandchildren of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >/</code> selects the root of the tree that contains the context node, but raises a dynamic error if this root is not a document node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >/descendant::para</code> selects all the <code>para</code> elements in the same document as the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >/descendant::list/child::member</code> selects all
the <code>member</code> elements that have a <code>list</code> parent and that are in the same document as the context node</p>

               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >child::para[fn:position() = 1]</code> selects the first <code>para</code> child of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >child::para[fn:position() = fn:last()]</code> selects the last <code>para</code> child of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >child::para[fn:position() = fn:last()-1]</code> selects the last but one <code>para</code> child of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >child::para[fn:position() &gt; 1]</code> selects all the <code>para</code> children of the context node other than the first <code>para</code> child of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >following-sibling::chapter[fn:position() = 1]</code> selects the next <code>chapter</code> sibling of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >preceding-sibling::chapter[fn:position() = 1]</code> selects the previous <code>chapter</code> sibling of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >/descendant::figure[fn:position() = 42]</code> selects the forty-second <code>figure</code> element in the document containing the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >/child::book/child::chapter[fn:position() = 5]/child::section[fn:position() = 2]</code> selects the
second <code>section</code> of the fifth <code>chapter</code> of the <code>book</code> whose parent is the document node that contains the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >child::para[attribute::type eq "warning"]</code> selects
all <code>para</code> children of the context node that have a <code>type</code> attribute with value <code>warning</code>
                  </p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >child::para[attribute::type eq 'warning'][fn:position() = 5]</code> selects the fifth <code>para</code> child of the context node that has a <code>type</code> attribute with value <code>warning</code>
                  </p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >child::para[fn:position() = 5][attribute::type eq "warning"]</code> selects the fifth <code>para</code> child of the context node if that child has a <code>type</code> attribute with value <code>warning</code>
                  </p>
               </item>



               <item>
                  <p>
                     <code role="parse-test"
                        >child::chapter[child::title = 'Introduction']</code> selects
the <code>chapter</code> children of the context node that have one or
more <code>title</code> children whose <termref
                        def="dt-typed-value"
                        >typed value</termref> is equal to the
string <code>Introduction</code>
                  </p>
               </item>



               <item>
                  <p>
                     <code role="parse-test"
                        >child::chapter[child::title]</code> selects the <code>chapter</code> children of the context node that have one or more <code>title</code> children</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >child::*[self::chapter or self::appendix]</code>
selects the <code>chapter</code> and <code>appendix</code> children of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >child::*[self::chapter or
self::appendix][fn:position() = fn:last()]</code> selects the
last <code>chapter</code> or <code>appendix</code> child of the context node</p>
               </item>
            </ulist>
         </div3>
         <div3 id="abbrev">
            <head>Abbreviated Syntax</head>
            <scrap>
               <head/>
               <prodrecap id="AbbrevForwardStep" ref="AbbrevForwardStep"/>
               <prodrecap id="AbbrevReverseStep" ref="AbbrevReverseStep"/>
            </scrap>
            <p>The abbreviated syntax permits the following abbreviations:</p>


            <olist>


               <item>
                  <p>The attribute axis <code>attribute::</code> can be
    abbreviated by <code>@</code>. For example, a path expression <code
                        role="parse-test">para[@type="warning"]</code> is short
    for <code
                        role="parse-test"
                        >child::para[attribute::type="warning"]</code> and
    so selects <code>para</code> children with a <code>type</code> attribute with value
    equal to <code>warning</code>.</p>
               </item>

               <item>
                  <p>If the axis name is omitted from an <termref def="dt-axis-step"
                        >axis step</termref>, the default axis is
    <code>child</code>, with two exceptions:

    (1) if the <nt
                        def="NodeTest">NodeTest</nt> in an axis step contains an <nt
                        def="AttributeTest">AttributeTest</nt> or <nt def="SchemaAttributeTest"
                        >SchemaAttributeTest</nt> then the
    default axis is <code>attribute</code>;     
    (2) if the <nt
                        def="NodeTest">NodeTest</nt> in an axis step is a <nt
                        def="NamespaceNodeTest">NamespaceNodeTest</nt>
                     <phrase role="xquery">then a static error
    is raised <errorref class="ST"
                           code="0134"/>.</phrase>
                     <phrase role="xpath"
                           >then the default axis is <code>namespace</code> - in an implementation that does not support
    the namespace axis, an error is raised <errorref
                           class="ST" code="0134"/>.</phrase>
                     <note>
                        <p> The namespace
    axis is deprecated as of XPath 2.0, but required in some languages
    that use XPath, including XSLT.</p>
                     </note>

    For example, the path expression <code role="parse-test"
                        >section/para</code> is an abbreviation for <code role="parse-test"
                        >child::section/child::para</code>, and the path
    expression <code
                        role="parse-test">section/@id</code> is an
    abbreviation for <code
                        role="parse-test">child::section/attribute::id</code>.  Similarly,
    <code
                        role="parse-test"
                        >section/attribute(id)</code> is an
    abbreviation for <code
                        role="parse-test"
                        >child::section/attribute::attribute(id)</code>. Note
    that the latter expression contains both an axis specification and
    a <termref
                        def="dt-node-test">node test</termref>.</p>
               </item>


               <item>
                  <p> Each non-initial occurrence of <code>//</code> is effectively replaced by  <code>/descendant-or-self::node()/</code> during processing of a path expression. For example, <code
                        role="parse-test">div1//para</code> is
short for <code role="parse-test"
                        >child::div1/descendant-or-self::node()/child::para</code> and so will select all <code>para</code> descendants of <code>div1</code> children.</p>
                  <note>
                     <p>The path expression <code role="parse-test"
                           >//para[1]</code> does <emph>not</emph> mean the same as the path
expression <code
                           role="parse-test"
                           >/descendant::para[1]</code>. The latter selects the first descendant <code>para</code> element; the former
selects all descendant <code>para</code> elements that are the first <code>para</code> children of their respective parents.</p>
                  </note>
               </item>


               <item>
                  <p>A step consisting
of <code role="parse-test">..</code> is short
for <code
                        role="parse-test">parent::node()</code>. For example, <code
                        role="parse-test">../title</code> is short for <code role="parse-test"
                        >parent::node()/child::title</code> and so will select the <code>title</code> children of the parent of the context node.</p>
                  <note>
                     <p>The expression <code>.</code>, known as a <term>context item
   expression</term>, is a <termref
                           def="dt-primary-expression"
                           >primary expression</termref>,
   and is described in <specref
                           ref="id-context-item-expression"/>.</p>
                  </note>
               </item>
            </olist>



            <p>Here are some examples of path expressions that use the abbreviated
syntax:</p>

            <ulist>


               <item>
                  <p>
                     <code>para</code> selects the <code>para</code> element children of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >*</code> selects all element children of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >text()</code> selects all text node children of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >@name</code> selects
the <code>name</code> attribute of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >@*</code> selects all the attributes of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >para[1]</code> selects the first <code>para</code> child of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >para[fn:last()]</code> selects the last <code>para</code> child of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >*/para</code> selects
all <code>para</code> grandchildren of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >/book/chapter[5]/section[2]</code> selects the
second <code>section</code> of the fifth <code>chapter</code> of the <code>book</code> whose parent is the document node that contains the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >chapter//para</code> selects the <code>para</code> element descendants of the <code>chapter</code> element children of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >//para</code> selects all
the <code>para</code> descendants of the root document node and thus selects all <code>para</code> elements in the same document as the context node</p>
               </item>

               <item>
                  <p>
                     <code role="parse-test"
                     >//@version</code> selects all the <code>version</code> attribute nodes that are in the same document as the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >//list/member</code> selects all the <code>member</code> elements in the same document as the context node that have a <code>list</code> parent</p>

               </item>



               <item>
                  <p>
                     <code role="parse-test"
                     >.//para</code> selects
the <code>para</code> element descendants of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test">..</code> selects the parent of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                     >../@lang</code> selects
the <code>lang</code> attribute of the parent of the context node</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >para[@type="warning"]</code> selects all <code>para</code> children of the context node that have a <code>type</code> attribute with value <code>warning</code>
                  </p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >para[@type="warning"][5]</code> selects the fifth <code>para</code> child of the context node that has a <code>type</code> attribute with value <code>warning</code>
                  </p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >para[5][@type="warning"]</code> selects the fifth <code>para</code> child of the context node if that child has a <code>type</code> attribute with value <code>warning</code>
                  </p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >chapter[title="Introduction"]</code> selects the <code>chapter</code> children of the context node that have one
or more <code>title</code> children whose <termref
                        def="dt-typed-value"
                        >typed value</termref> is equal to the string <code>Introduction</code>
                  </p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >chapter[title]</code> selects the <code>chapter</code> children of the context node that have one or more <code>title</code> children</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >employee[@secretary and @assistant]</code> selects all
the <code>employee</code> children of the context node that have both a <code>secretary</code> attribute and
an <code>assistant</code> attribute</p>
               </item>


               <item>
                  <p>
                     <code role="parse-test"
                        >book/(chapter|appendix)/section</code> selects
every <code>section</code> element that has a parent that is either a <code>chapter</code> or an <code>appendix</code> element, that in turn is a child of a <code>book</code> element that is a child of the context node.</p>
               </item>


               <item>
                  <p>If <code>E</code> is any expression that returns a sequence of nodes, then the expression <code
                        role="parse-test">E/.</code> returns the same nodes in <termref
                        def="dt-document-order"
                     >document order</termref>, with duplicates eliminated based on node identity.</p>
               </item>
            </ulist>
         </div3>
      </div2>
      <div2 id="id-sequence-expressions">
         <head>Sequence Expressions</head>
         <p>&language; supports operators to construct, filter,  and combine
<termref
               def="dt-sequence">sequences</termref> of <termref def="dt-item"
               >items</termref>.
Sequences are never nested&mdash;for
example, combining the values <code>1</code>, <code>(2, 3)</code>, and <code>( )</code> into a single sequence results
in the sequence <code>(1, 2, 3)</code>.</p>
         <div3 id="construct_seq">
            <head>Sequence Concatenation</head>
            <scrap>
               <head/>
               <prodrecap ref="Expr"/>
            </scrap>
            <p>
               <termdef term="comma operator" id="dt-comma-operator"
                     >One way to construct a sequence is by using the <term>comma operator</term>, which evaluates each of its operands and concatenates the resulting sequences, in order, into a single result sequence.</termdef> Empty parentheses can be used to denote an empty sequence.</p>
            <p>A sequence may contain duplicate
<termref def="dt-item"
               >items</termref>, but a sequence is never an item in another sequence. When a
new sequence is created by concatenating two or more input sequences, the new
sequence contains all the items of the input sequences and its length is the
sum of the lengths of the input sequences.</p>
            <note>
               <p>In places where the grammar calls for <nt def="ExprSingle"
                  >ExprSingle</nt>, such as the arguments of a function call, any expression that contains a top-level comma operator must be enclosed in parentheses.</p>
            </note>
            <p>Here are some examples of expressions that construct sequences:
</p>

            <ulist>


               <item>
                  <p>The result of this expression is a sequence of five integers:</p>
                  <eg role="parse-test"><![CDATA[(10, 1, 2, 3, 4)]]></eg>
               </item>


               <item>
                  <p>This expression combines four sequences of length one, two, zero, and two, respectively, into a single sequence of length five. The result of this expression is the sequence <code>10, 1, 2, 3, 4</code>.</p>
                  <eg role="parse-test"><![CDATA[(10, (1, 2), (), (3, 4))]]></eg>


               </item>


               <item>
                  <p>The result of this expression is a sequence containing
all <code>salary</code> children of the context node followed by all <code>bonus</code> children.</p>
                  <eg role="parse-test"><![CDATA[(salary, bonus)]]></eg>
               </item>


               <item>
                  <p>Assuming that <code>$price</code> is bound to
the value <code>10.50</code>, the result of this expression is the sequence <code>10.50, 10.50</code>.</p>
                  <eg role="parse-test"><![CDATA[($price, $price)]]></eg>


               </item>
            </ulist>
         </div3>
         <div3 id="id-range-expressions" diff="chg" at="A">
            <head>Range Expressions</head>
            <scrap>
               <head/>
               <!--<prodrecap id="ByExpr" ref="ByExpr"/>-->
               <prodrecap id="RangeExpr" ref="RangeExpr"/>
            </scrap>
            <p>A <term>RangeExpression</term> can be used to construct a sequence of 
integers. Each of the operands is
converted as though it was an argument of a function with the expected
parameter type <code>xs:integer?</code>.
If either operand is an empty sequence, or if the integer derived from the first operand is greater than the integer derived from the second operand, the result of the range expression is an empty sequence. If the two operands convert to the same integer, the result of the range expression is that integer. Otherwise, the result is a sequence containing the two integer operands and
every integer between the two operands, in increasing order. </p>
            
            <p>The following examples illustrate the semantics:</p>

            <ulist>
               <item><p><code>1 to 4</code> returns the sequence <code>1, 2, 3, 4</code></p></item>
               <item><p><code>10 to 10</code> returns the singleton sequence <code>10</code></p></item>
               <item><p><code>10 to 1</code> returns the empty sequence</p></item>
               <item><p><code>-13 to -10</code> returns the sequence <code>-13, -12, -11, -10</code></p></item>
            </ulist>
            
            <!--<p>A <term>ByExpression</term> can be used in conjunction with a <term>RangeExpression</term>
            to select some of the integers in the range, in forwards or reverse sequence. For example:</p>
            
            <ulist>
               <item><p><code>1 to 10 by 2</code> returns the sequence <code>1, 3, 5, 7, 9</code></p></item>
               <item><p><code>1 to 4 by -1</code> returns the sequence <code>4, 3, 2, 1</code></p></item>
               <item><p><code>0 to 10 by -2</code> returns the sequence <code>10, 8, 6, 4, 2, 0</code></p></item>
            </ulist>
            
            <p>Although the <code>to</code> and <code>by</code> expressions are designed to work well when
            used together, both are binary operators defined quite independently of each other, and the
            <code>by</code> operator can be applied to any sequence, not just a sequence of integers.</p>
            -->
            <p>More formally, a <term>RangeExpression</term> is evaluated as follows:</p>
            <olist>
               <item><p>Each of the operands of the <code>to</code> operator is converted as though it was an argument of a function
                  with the expected parameter type <code>xs:integer?</code>.</p></item>
               <item><p>If either operand is an empty sequence, or if the integer derived from the first operand is greater
                  than the integer derived from the second operand, the result of the range expression is an empty sequence.</p></item>
               <item><p>If the two operands convert to the same integer, the result of the range expression is that integer.</p></item>
               <item><p>Otherwise, the result is a sequence containing the two integer operands and every integer between the 
                  two operands, in increasing order.</p></item>
            </olist>
            
<!--            <p>A <term>ByExpression</term> is evaluated as follows:</p>
            <olist>
               <item><p>The left-hand operand is evaluated; the result is an arbitrary sequence: call it <code>$seq</code>.</p></item>
               <item><p>The right operand of the <code>by</code> operator is converted as though it was an argument 
                  of a function with the expected parameter type <code>xs:integer?</code>: 
                  call the result <code>$step</code>.</p></item>
               <item><p>If <code>$step</code> is an empty sequence or zero, the result of the
               <code>ByExpression</code> is an empty sequence.</p></item>
               <item><p>If <code>$step</code> is an integer greater than zero, 
                  the result consists of all items in <code>$seq</code> whose zero-based position is an integer
               multiple of <code>$seq</code>, in order. </p></item>
               <item><p>If <code>$step</code> is an integer less than zero, 
                  the result consists of all items in <code>fn:reverse($seq)</code> whose zero-based position is an integer
                  multiple of <code>fn:abs($seq)</code>, in order. </p></item>
            </olist>-->
            
            <p>The following examples illustrate the use of <code>RangeExpressions</code><!-- and
            <code>ByExpressions</code>, independently and in conjunction-->.</p>
            
            <example>
               <p>This example uses a range expression as one operand in constructing a sequence. 
                  It evaluates to the sequence <code>10, 1, 2, 3, 4</code>.</p>
               <eg role="parse-test">(10, 1 to 4)</eg>
               <p>This example selects the first four items from an input sequence:</p>
               <eg role="parse-test">$input[position() = 1 to 4]</eg>
               <!--<p>This example selects the first four items from an input sequence, in reverse order:</p>
               <eg role="parse-test">fn:slice($input, 1 to 4 by -1)</eg>
               <p>This example returns the array <code>["b", "c"]</code>:</p>
               <eg role="parse-test">array:slice(["a", "b", "c", "d"], 2 to 3)</eg>
               <p>This example returns the array <code>["d", "b"]</code>:</p>
               <eg role="parse-test">array:slice(["a", "b", "c", "d"], 1 to 4 by -2)</eg>
               <p>This example tests whether <code>$x</code> is an even number in the range 100 to 200:</p>
               <eg role="parse-test">$x = (100 to 200 by 2)</eg>-->
               <p>This example returns the sequence (0, 0.1, 0.2, 0.3, 0.5):</p>
               <eg role="parse-test">$x = (1 to 5)!.*0.1</eg>
               <!--<p>This example returns the same result as <code>fn:reverse($input)</code>:</p>
               <eg role="parse-test">$input by -1</eg>
               <p>This example returns <code>"ACE"</code>:</p>
               <eg role="parse-test">(fn:characters("ABCDE") by 2) => fn:string-join()</eg>-->
               <p>This example constructs a sequence of length one containing the single integer 10.</p>
               <eg role="parse-test">10 to 10</eg>
               <p>The result of this example is a sequence of length zero.</p>
               <eg role="parse-test">15 to 10</eg>
               <p>This example uses the fn:reverse function to construct a sequence of six integers in decreasing order. 
                  It evaluates to the sequence 15, 14, 13, 12, 11, 10.</p>
               <eg role="parse-test">fn:reverse(10 to 15)</eg>
            </example>
          
            <!--<note>
               <p>Since <code>10 to 1</code> returns an empty sequence, <code>10 to 1 by -1</code>
               also returns an empty sequence. The correct expression is <code>1 to 10 by -1</code>.</p>
               <p>The expression <code>1 by 2 to 10</code> means <code>1 by (2 to 10)</code> which
               fails with a type error because the second argument of <code>by</code> is not
               a singleton integer. However, <code>-200 by 2 to -100</code> returns an empty
               sequence, because <code>(2 to -100)</code> is an empty sequence. The correct expression
               is <code>-200 to -100 by 2</code>.</p>
            </note>-->

         </div3>


         <div3 id="combining_seq">
            <head>Combining Node Sequences</head>
            <scrap>
               <head/>
               <prodrecap id="UnionExpr" ref="UnionExpr"/>
               <prodrecap id="IntersectExceptExpr" ref="IntersectExceptExpr"/>
            </scrap>
            <p>&language; provides the following operators for combining sequences of
nodes:</p>
            <ulist>

               <item>
                  <p>The <code>union</code> and <code>|</code> operators are equivalent. They take two node sequences as operands and
return a sequence containing all the nodes that occur in either of the
operands.</p>
               </item>

               <item>
                  <p>The <code>intersect</code> operator takes two node sequences as operands and returns a sequence
containing all the nodes that occur in both operands.</p>
               </item>

               <item>
                  <p>The <code>except</code> operator takes two node sequences as operands and returns a sequence
containing all the nodes that occur in the first operand but not in the second
operand.</p>
               </item>
            </ulist>
            <p>
 All these operators eliminate duplicate nodes from their result sequences based on node identity. <phrase
                  role="xpath">The resulting sequence is returned in <termref
                     def="dt-document-order">document
	 order</termref>.</phrase>
               <phrase role="xquery">If <termref def="dt-ordering-mode"
                     >ordering mode</termref> is <code>ordered</code>, the resulting sequence is returned in <termref
                     def="dt-document-order"
                     >document
	 order</termref>; otherwise it is returned in <termref
                     def="dt-implementation-dependent"
                  >implementation-dependent</termref> order.</phrase>
            </p>
            <p>If an operand
of <code>union</code>, <code>intersect</code>, or <code>except</code> contains an item that is not a node, a <termref
                  def="dt-type-error">type error</termref> is raised <errorref class="TY"
                  code="0004"/>.</p>

            <p>
If an IntersectExceptExpr contains more than two InstanceofExprs,
they are grouped from left to right.
With a UnionExpr, it makes no difference how operands are grouped,
the results are the same.
</p>
            <example>
               <p>Here are some examples of expressions that combine sequences. Assume the existence of three element nodes that we will refer to by symbolic names A, B, and C. <phrase
                     role="xquery">Assume that <termref def="dt-ordering-mode"
                        >ordering mode</termref> is <code>ordered</code>.</phrase> Assume that the variables <code>$seq1</code>,  <code>$seq2</code>  and <code>$seq3</code> are bound to the following sequences of these nodes:</p>
               <ulist>

                  <item>
                     <p>
                        <code>$seq1</code> is bound to (A, B)</p>
                  </item>

                  <item>
                     <p>
                        <code>$seq2</code> is bound to (A, B)</p>
                  </item>

                  <item>
                     <p>
                        <code>$seq3</code> is bound to (B, C)</p>
                  </item>
               </ulist>
               <p>Then: </p>

               <ulist>


                  <item>
                     <p>
                        <code role="parse-test"
                        >$seq1 union $seq2</code>  evaluates to the sequence (A, B). </p>
                  </item>


                  <item>
                     <p>
                        <code role="parse-test"
                        >$seq2 union $seq3</code>   evaluates to the sequence (A, B, C). </p>
                  </item>


                  <item>
                     <p>
                        <code role="parse-test"
                        >$seq1 intersect $seq2</code>  evaluates to the sequence (A, B). </p>
                  </item>


                  <item>
                     <p>
                        <code role="parse-test"
                        >$seq2 intersect $seq3</code>  evaluates to the sequence containing B only.</p>
                  </item>


                  <item>
                     <p>
                        <code role="parse-test"
                        >$seq1 except $seq2</code>   evaluates to the empty sequence.</p>
                  </item>


                  <item>
                     <p>
                        <code role="parse-test"
                        >$seq2 except $seq3</code>  evaluates to the sequence containing A only.</p>
                  </item>
               </ulist>
            </example>
            <p>In addition to the sequence operators described here, see <xspecref spec="FO31"
                  ref="sequence-functions"/> for functions defined on sequences.
</p>
         </div3>
      </div2>
      <div2 id="id-arithmetic">
         <head>Arithmetic Expressions</head>
         <p>&language; provides arithmetic operators for addition, subtraction,
multiplication, division, and modulus, in their usual binary and unary
forms.</p>
         <scrap>
            <head/>
            <prodrecap id="AdditiveExpr" ref="AdditiveExpr"/>
            <prodrecap id="MultiplicativeExpr" ref="MultiplicativeExpr"/>
            <prodrecap id="UnaryExpr" ref="UnaryExpr"/>
            <prodrecap id="ValueExpr" ref="ValueExpr"/>
         </scrap>
         <p>A subtraction operator must be preceded by whitespace if
it could otherwise be interpreted as part of the previous token. For
example, <code
               role="parse-test">a-b</code> will be interpreted as a
name, but <code
               role="parse-test">a - b</code> and <code role="parse-test"
               >a -b</code> will be interpreted as arithmetic expressions. (See <specref
               ref="whitespace-rules"/> for further details on whitespace handling.)</p>

         <p>
If an AdditiveExpr contains more than two MultiplicativeExprs,
they are grouped from left to right. So, for instance,
<eg
               role="parse-test"><![CDATA[A - B + C - D]]></eg>
is equivalent to
<eg
               role="parse-test"
            ><![CDATA[((A - B) + C) - D]]></eg>
Similarly, the operands of a MultiplicativeExpr are grouped from left to right.
</p>

         <p>The first step in evaluating an arithmetic expression is to evaluate its operands. The order in which the operands are evaluated is <termref
               def="dt-implementation-dependent">implementation-dependent</termref>.</p>
         <p role="xpath">If <termref def="dt-xpath-compat-mode"
               >XPath 1.0 compatibility mode</termref> is <code>true</code>, each operand is evaluated by applying the following steps, in order:</p>


         <olist role="xpath">

            <item>
               <p>
                  <termref def="dt-atomization"
                     >Atomization</termref> is applied to the operand. The result of this
    operation is called the <term>atomized operand</term>.</p>

            </item>

            <item>
               <p>If the atomized operand is an empty sequence, the result of
    the arithmetic expression is the <code>xs:double</code> value <code>NaN</code>, and the implementation
    need not evaluate the other operand or apply the operator. However,
    an implementation may choose to evaluate the other operand in order
    to determine whether it raises an error.</p>
            </item>

            <item>
               <p>If the atomized operand is a sequence of length greater than one, any items after the first item in the sequence are discarded.</p>
            </item>

            <item>
               <p>If the atomized operand is now an instance of type <code>xs:boolean</code>, <code>xs:string</code>,
<code>xs:decimal</code> (including <code>xs:integer</code>), <code>xs:float</code>, or <code>xs:untypedAtomic</code>, then it
is converted to the type <code>xs:double</code> by applying the <code>fn:number</code> function. (Note that <code>fn:number</code> returns the value <code>NaN</code> if its operand cannot be converted to a number.)</p>
            </item>
         </olist>
         <p>
            <phrase role="xpath">If <termref def="dt-xpath-compat-mode"
                  >XPath 1.0 compatibility mode</termref> is <code>false</code>, each</phrase>
            <phrase role="xquery"
            >Each</phrase> operand is evaluated by applying the following steps, in order:</p>

         <olist>

            <item>
               <p>
                  <termref def="dt-atomization"
                     >Atomization</termref> is applied to the operand. The result of this
    operation is called the <term>atomized operand</term>.</p>

            </item>

            <item>
               <p>If the atomized operand is an empty sequence, the result of
    the arithmetic expression is an empty sequence, and the implementation
    need not evaluate the other operand or apply the operator. However,
    an implementation may choose to evaluate the other operand in order
    to determine whether it raises an error.</p>
            </item>

            <item>
               <p> If the atomized operand is a sequence of
length greater than one, a <termref
                     def="dt-type-error">type error</termref> is raised <errorref class="TY"
                     code="0004"/>.</p>
            </item>

            <item>
               <p>If the atomized operand is of type <code>xs:untypedAtomic</code>, it is cast to  <code>xs:double</code>. If
the cast fails, a <termref
                     def="dt-dynamic-error">dynamic
error</termref> is raised. <xerrorref
                     spec="FO31" class="RG" code="0001"/>
               </p>
            </item>
         </olist>
         <p>After evaluation of the operands, if the types of the operands are a valid combination
for the given arithmetic operator, the operator is applied to the operands,
resulting in an atomic value or a <termref
               def="dt-dynamic-error"
               >dynamic error</termref> (for example, an error
might result from dividing by zero.) The combinations of atomic types
that are accepted by the various arithmetic operators, and their
respective result types, are listed in <specref
               ref="mapping"/>
together with the <termref def="dt-operator-function"
               >operator functions</termref>
that define the semantics of the operator for each
type combination, including the dynamic errors that can be raised by the operator. The definitions of the operator functions are found in <bibref
               ref="xpath-functions-40"/>.</p>
         <p>If the types of the operands, after evaluation, are not a valid combination for the given operator, according to the rules in <specref
               ref="mapping"/>, a <termref def="dt-type-error"
               >type error</termref> is raised <errorref class="TY" code="0004"/>.</p>
         <p>&language; supports two division operators named <code>div</code> and <code>idiv</code>. Each of these operators accepts two operands of any <termref
               def="dt-numeric"
               >numeric</termref> type. 

The semantics of <code>div</code> are defined in <xspecref
               spec="FO31" ref="func-numeric-integer-divide"
               />.
The semantics of <code>idiv</code> are defined in <xspecref spec="FO31"
               ref="func-numeric-divide"/>.
</p>

         <p>Here are some examples of arithmetic expressions:</p>

         <ulist>


            <item>
               <p>The first expression below returns the <code>xs:decimal</code> value <code
                     role="parse-test"
                     >-1.5</code>, and the second expression returns the <code>xs:integer</code> value <code
                     role="parse-test">-1</code>:</p>
               <eg role="parse-test"><![CDATA[-3 div 2
-3 idiv 2]]></eg>
            </item>


            <item>

               <p>Subtraction of two date values results in a value of type <code>xs:dayTimeDuration</code>:</p>
               <eg role="parse-test"><![CDATA[$emp/hiredate - $emp/birthdate]]></eg>
            </item>



            <item>
               <p>This example illustrates the difference between a subtraction operator and a
hyphen:</p>
               <eg role="parse-test"><![CDATA[$unit-price - $unit-discount]]></eg>
            </item>


            <item>
               <p>Unary operators have higher precedence than binary operators (other than "<code>!</code>", "<code>/</code>", and "<code>[]</code>"), subject of
course to the use of parentheses. Therefore, the following two examples have different meanings:</p>
               <eg><![CDATA[-$bellcost + $whistlecost
-($bellcost + $whistlecost)]]></eg>
            </item>
         </ulist>
         <note>
            <p id="note-consecutive-unary-ops"
               >Multiple consecutive unary arithmetic operators are permitted.</p>
         </note>
      </div2>
      <div2 id="id-string-concat-expr">
         <head>String Concatenation Expressions</head>
         <scrap>
            <head/>
            <prodrecap ref="StringConcatExpr" id="StringConcatExpr"/>
         </scrap>
         <p>String concatenation expressions allow the string representations of values to be concatenated. In &language;, <code>$a || $b</code> is equivalent to <code>fn:concat($a, $b)</code>. The following expression evaluates to the string <code>concatenate</code>:</p>
         <eg><![CDATA["con" || "cat" || "enate"]]></eg>

      </div2>
      <div2 id="id-comparisons">
         <head>Comparison Expressions</head>
         <p>Comparison expressions allow two values to be compared. &language; provides
three kinds of comparison expressions, called value comparisons, general
comparisons, and node comparisons.</p>
         <scrap>
            <head/>
            <prodrecap ref="ComparisonExpr" id="ComparisonExpr"/>
            <prodrecap ref="ValueComp" id="ValueComp"/>
            <prodrecap id="GeneralComp" ref="GeneralComp"/>
            <prodrecap id="NodeComp" ref="NodeComp"/>

         </scrap>

         <note role="xpath">
            <p role="xpath"
                  >When an XPath expression is written
within an XML document, the XML escaping rules for special characters
must be followed; thus "<code>&lt;</code>" must be written as
"<code>&amp;lt;</code>".</p>
         </note>


         <div3 id="id-value-comparisons">
            <head>Value Comparisons</head>
            <p>The value comparison operators are <code>eq</code>, <code>ne</code>, <code>lt</code>, <code>le</code>, <code>gt</code>, and <code>ge</code>. Value comparisons are used for comparing single values.</p>
            <p>The first step in evaluating a value comparison is to evaluate its operands. The order in which the operands are evaluated is <termref
                  def="dt-implementation-dependent"
               >implementation-dependent</termref>. Each operand is evaluated by applying the following steps, in order:</p>

            <olist>

               <item>
                  <p>
                     <termref def="dt-atomization"
                        >Atomization</termref> is applied to each  operand. The result of this
    operation is called the <term>atomized operand</term>.</p>

               </item>

               <item>
                  <p>If an atomized operand is an empty sequence, the result of
    the value comparison is an empty sequence, and the implementation
    need not evaluate the other operand or apply the operator. However,
    an implementation may choose to evaluate the other operand in order
    to determine whether it raises an error.</p>
               </item>

               <item>
                  <p> If an atomized operand is a sequence of
length greater than one, a <termref
                        def="dt-type-error">type error</termref> is raised <errorref class="TY"
                        code="0004"/>.</p>
               </item>

               <item>
                  <p>If an  atomized operand is of type
  <code>xs:untypedAtomic</code>, it is cast to
  <code>xs:string</code>.</p>
                  <note>
                     <p>The purpose of this rule is to
  make value comparisons transitive. Users should be aware that the
  general comparison operators have a different rule for casting of
  <code>xs:untypedAtomic</code> operands. Users should also be aware
  that transitivity of value comparisons may be compromised by loss of
  precision during type conversion (for example, two
  <code>xs:integer</code> values that differ slightly may both be
  considered equal to the same <code>xs:float</code> value because
  <code>xs:float</code> has less precision than
  <code>xs:integer</code>).</p>
                  </note>
               </item>

               <item>


                  <p>If the two operands are instances of different primitive types (meaning the 19 primitive types defined in <xspecref
                        spec="XS2" ref="built-in-primitive-datatypes"/>), then:
    <olist>
                        <item>
                           <p>If each operand is an instance of one of the types <code>xs:string</code> or <code>xs:anyURI</code>, then both operands are cast to type <code>xs:string</code>.</p>
                        </item>
                        <item>
                           <p>If each operand is an instance of one of the types <code>xs:decimal</code> or <code>xs:float</code>, then both operands are cast to type <code>xs:float</code>.</p>
                        </item>
                        <item>
                           <p>If each operand is an instance of one of the types <code>xs:decimal</code>, <code>xs:float</code>, or <code>xs:double</code>, then both operands are cast to type <code>xs:double</code>.</p>
                        </item>
                        <item>
                           <p>Otherwise, a <termref def="dt-type-error"
                                 >type error</termref> is raised <errorref class="TY" code="0004"
                              />.</p>
                           <note>
                              <p>The primitive type of an <code>xs:integer</code> value for this purpose is <code>xs:decimal</code>.</p>
                           </note>
                        </item>
                     </olist>
                  </p>
               </item>

               <item>
                  <p>Finally, if the types of the operands are a valid
  combination for the given operator, the operator is applied to the
  operands.</p>
               </item>

            </olist>

            <p>The combinations of atomic types that are accepted by the various
value comparison operators, and their respective result types, are
listed in <specref
                  ref="mapping"/> together with the <termref def="dt-operator-function"
                  >operator functions</termref> that define
the semantics of the operator for each type combination. The
definitions of the operator functions are found in <bibref
                  ref="xpath-functions-40"/>.</p>

            <p>Informally, if both atomized operands consist of exactly one atomic
value, then the result of the comparison is <code>true</code> if the value of the
first operand is (equal, not equal, less than, less than or equal,
greater than, greater than or equal) to the value of the second
operand; otherwise the result of the comparison is <code>false</code>.</p>

            <p>If the types of the operands, after evaluation, are not a valid
combination for the given operator, according to the rules in <specref
                  ref="mapping"/>, a <termref def="dt-type-error"
                  >type error</termref>
is raised <errorref class="TY" code="0004"/>.</p>

            <p>Here are some examples of value comparisons:</p>

            <ulist>


               <item>
                  <p>The following comparison atomizes the node(s) that are returned by the expression <code>$book/author</code>. The comparison is true only if the result of atomization is the value "Kennedy" as an instance of <code>xs:string</code> or <code>xs:untypedAtomic</code>. If the result of atomization is an empty sequence, the result of the comparison is an empty sequence. If the result of atomization is a sequence containing more than one value, a <termref
                        def="dt-type-error">type error</termref> is raised <errorref class="TY"
                        code="0004"/>.</p>
                  <eg role="parse-test"><![CDATA[$book1/author eq "Kennedy"]]></eg>
               </item>


               <item>
                  <p>The following comparison is <code>true</code> because atomization converts an array to its member sequence:</p>
                  <eg role="parse-test"><![CDATA[[ "Kennedy" ] eq "Kennedy"]]></eg>
               </item>

               <item>
                  <p>The following <termref def="dt-path-expression"
                        >path expression</termref> contains a predicate that selects products whose weight is greater than 100. For any product that does not have a <code>weight</code> subelement, the value of the predicate is the empty sequence, and the product is not selected. This example assumes that <code>weight</code> is a validated element with a numeric type.</p>
                  <eg role="parse-test"><![CDATA[//product[weight gt 100]]]></eg>
               </item>

               <item role="xquery">
                  <p>The following comparisons are true because, in each case, the two constructed nodes have the same value after atomization, even though they have different identities and/or names:</p>
                  <eg role="parse-test"
                     ><![CDATA[&lt;a&gt;5&lt;/a&gt; eq &lt;a&gt;5&lt;/a&gt;]]></eg>
                  <eg role="parse-test"
                     ><![CDATA[&lt;a&gt;5&lt;/a&gt; eq &lt;b&gt;5&lt;/b&gt;]]></eg>
               </item>

               <item>
                  <p>The following comparison is true if <code>my:hatsize</code> and <code>my:shoesize</code> are both user-defined types that are derived by restriction from a primitive <termref
                        def="dt-numeric">numeric</termref> type:</p>
                  <eg role="parse-test"><![CDATA[my:hatsize(5) eq my:shoesize(5)]]></eg>
               </item>


               <item>
                  <p>The following comparison is true. The <code>eq</code> operator compares two QNames by performing codepoint-comparisons of their namespace URIs and their local names, ignoring their namespace prefixes.</p>
                  <eg role="parse-test"
                     ><![CDATA[fn:QName("http://example.com/ns1", "this:color") eq fn:QName("http://example.com/ns1", "that:color")]]></eg>
               </item>
            </ulist>
         </div3>
         <div3 id="id-general-comparisons">
            <head>General Comparisons</head>
            <p>The general comparison operators are <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code>. General comparisons are existentially quantified comparisons that may be applied to operand sequences of any length. The result of a general comparison that does not raise an error is
always <code>true</code> or <code>false</code>.</p>
            <p role="xpath">If <termref def="dt-xpath-compat-mode"
                  >XPath 1.0 compatibility mode</termref> is <code>true</code>, a general comparison is evaluated by applying the following rules, in order:</p>

            <olist role="xpath">

               <item>
                  <p>If either operand is a single atomic value that is an instance of
<code>xs:boolean</code>, then the other operand is converted to <code>xs:boolean</code> by taking its
<termref
                        def="dt-ebv">effective boolean value</termref>.</p>
               </item>

               <item>
                  <p>
                     <termref def="dt-atomization"
                     >Atomization</termref> is applied to each operand. After atomization, each operand is a sequence of atomic values.</p>

               </item>

               <item>
                  <p>If the comparison operator is <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, or <code>&gt;=</code>, then each item in both of the
operand sequences is converted to the type  <code>xs:double</code> by applying the
<code>fn:number</code> function. (Note that <code>fn:number</code> returns the value <code>NaN</code> if its operand cannot be converted to a number.)</p>
               </item>

               <item>
                  <p>The result of the comparison is <code>true</code> if and only if there is a pair of
atomic values, one in the first operand sequence and the other in the second operand sequence, that have the required
<term>magnitude relationship</term>. Otherwise the result of the  comparison is
<code>false</code> or an error. The <term>magnitude relationship</term> between two atomic values is determined by
applying the following rules. If a <code>cast</code> operation called for by these rules is not successful, a <termref
                        def="dt-dynamic-error">dynamic error</termref>  is raised. <xerrorref
                        spec="FO31" class="RG" code="0001"/>
                  </p>

                  <olist>

                     <item>
                        <p>If at least one of the two atomic values is an instance of a <termref
                              def="dt-numeric"
                              >numeric</termref> type, then both atomic values are converted to the type <code>xs:double</code> by
applying the <code>fn:number</code> function.</p>
                     </item>

                     <item>
                        <p>If at least one of the two atomic values is an instance of <code>xs:string</code>,
or if both atomic values are instances of <code>xs:untypedAtomic</code>, then both
atomic values are cast to the type <code>xs:string</code>.</p>
                     </item>

                     <item>
                        <p>If one of the atomic values is an instance of <code>xs:untypedAtomic</code> and the other is not an instance of <code>xs:string</code>, <code>xs:untypedAtomic</code>, or any <termref
                              def="dt-numeric"
                              >numeric</termref> type, then the <code>xs:untypedAtomic</code> value is
cast to the <termref
                              def="dt-dynamic-type">dynamic type</termref> of the other value.</p>
                     </item>

                     <item>
                        <p>After performing the conversions described above, the atomic values are
compared using one of the value comparison operators <code>eq</code>, <code>ne</code>, <code>lt</code>, <code>le</code>, <code>gt</code>, or
<code>ge</code>, depending on whether the general comparison operator was <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>,
<code>&gt;</code>, or <code>&gt;=</code>. The values have the required <term>magnitude relationship</term> if and only if the result
of this value comparison is <code>true</code>.</p>
                     </item>
                  </olist>
               </item>
            </olist>
            <p>
               <phrase role="xpath">If <termref def="dt-xpath-compat-mode"
                     >XPath 1.0 compatibility mode</termref> is <code>false</code>, a</phrase>
               <phrase role="xquery"
               >A</phrase> general comparison is evaluated by applying the following rules, in order:</p>

            <olist>

               <item>
                  <p>
                     <termref def="dt-atomization"
                     >Atomization</termref> is applied to each operand. After atomization, each operand is a sequence of atomic values.</p>

               </item>

               <item>
                  <p>The result of the comparison is <code>true</code> if and only if there is a pair of
atomic values, one in the first operand sequence and the other in the second operand sequence, that have the required
<term>magnitude relationship</term>. Otherwise the result of the  comparison is
<code>false</code> or an error. The <term>magnitude relationship</term> between two atomic values is determined by
applying the following rules. If a <code>cast</code> operation called for by these rules is not successful, a <termref
                        def="dt-dynamic-error">dynamic error</termref>  is raised. <xerrorref
                        spec="FO31" class="RG" code="0001"/>
                  </p>
                  <note role="xquery">
                     <p>The purpose of these rules is to preserve compatibility with XPath 1.0, in which (for example) <code
                           role="parse-test"
                           >x &lt; 17</code> is a numeric comparison if <code>x</code> is an untyped value. Users should be aware that the value comparison operators have different rules for casting of <code>xs:untypedAtomic</code> operands.</p>
                  </note>

                  <olist>

                     <item>
                        <p>If both atomic values are instances of <code>xs:untypedAtomic</code>,
                then the values are cast to the type <code>xs:string</code>.
             </p>
                     </item>
                     <item>
                        <p>If exactly one of the atomic values is an instance of
                <code>xs:untypedAtomic</code>, it is cast to a type depending on
                the other value's dynamic type T according to the following rules,
                in which V denotes the value to be cast:
             </p>
                        <olist>
                           <item>
                              <p>If T is a numeric type or is derived from a numeric type,
                      then V is cast to <code>xs:double</code>.</p>
                           </item>
                           <item>
                              <p>If T is <code>xs:dayTimeDuration</code> or is derived from
                      <code>xs:dayTimeDuration</code>,
                      then V is cast to <code>xs:dayTimeDuration</code>.</p>
                           </item>
                           <item>
                              <p>If T is <code>xs:yearMonthDuration</code> or is derived from
                      <code>xs:yearMonthDuration</code>,
                      then V is cast to <code>xs:yearMonthDuration</code>.</p>
                           </item>
                           <item>
                              <p>In all other cases, V is cast to the primitive base type of T.</p>
                           </item>
                        </olist>
                        <note>
                           <p>
                The special treatment of the duration types is required to avoid
                errors that may arise when comparing the primitive type
                <code>xs:duration</code> with any duration type.
             </p>
                        </note>
                     </item>
                     <item>
                        <p>After performing the conversions described above, the atomic values are
compared using one of the value comparison operators <code>eq</code>, <code>ne</code>, <code>lt</code>, <code>le</code>, <code>gt</code>, or
<code>ge</code>, depending on whether the general comparison operator was <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>,
<code>&gt;</code>, or <code>&gt;=</code>. The values have the required <term>magnitude relationship</term> if and only if the result
of this value comparison is <code>true</code>.</p>
                     </item>
                  </olist>
               </item>
            </olist>
            <p>When evaluating a general comparison in which either operand is a sequence of items, an implementation may return <code>true</code> as soon as it finds an item in the first operand and an item in the second operand that have the required <term>magnitude relationship</term>. Similarly, a general comparison may raise a <termref
                  def="dt-dynamic-error"
               >dynamic error</termref> as soon as it encounters an error in evaluating either operand, or in comparing a pair of items from the two operands. As a result of these rules, the result of a general comparison is not deterministic in the presence of errors.</p>


            <p>Here are some examples of  general comparisons:</p>

            <ulist>


               <item>
                  <p>The following comparison is true if the <termref def="dt-typed-value"
                        >typed value</termref> of any
<code>author</code> subelement of <code>$book1</code> is "Kennedy" as an instance of <code>xs:string</code> or <code>xs:untypedAtomic</code>:</p>
                  <eg role="parse-test"><![CDATA[$book1/author = "Kennedy"]]></eg>
               </item>

               <item>
                  <p>The following comparison is <code>true</code> because atomization converts an array to its member sequence:</p>
                  <eg role="parse-test"><![CDATA[[ "Obama", "Nixon", "Kennedy" ] = "Kennedy"]]></eg>
               </item>

               <item>
                  <p>The following example contains three general comparisons. The value of the first two comparisons is <code>true</code>, and the value of the third comparison is <code>false</code>. This example illustrates the fact that general comparisons are not transitive.</p>
                  <eg><![CDATA[(1, 2) = (2, 3)
(2, 3) = (3, 4)
(1, 2) = (3, 4)]]></eg>
               </item>

               <item>
                  <p>The following example contains two general comparisons, both of which are <code>true</code>. This example illustrates the fact that the <code>=</code> and <code>!=</code> operators are not inverses of each other.</p>
                  <eg><![CDATA[(1, 2) = (2, 3)
(1, 2) != (2, 3)]]></eg>
               </item>

               <item>
                  <p>Suppose that <code>$a</code>, <code>$b</code>, and <code>$c</code> are bound to element nodes with type annotation <code>xs:untypedAtomic</code>, with <termref
                        def="dt-string-value"
                        >string values</termref> "<code>1</code>", "<code>2</code>", and "<code>2.0</code>" respectively. Then <code
                        role="parse-test"
                        >($a, $b) = ($c, 3.0)</code> returns <code>false</code>, because <code>$b</code> and <code>$c</code> are compared as strings. However, <code
                        role="parse-test"
                        >($a, $b) = ($c, 2.0)</code> returns <code>true</code>, because <code>$b</code> and <code>2.0</code> are compared as numbers.</p>
               </item>
            </ulist>
         </div3>
         <div3 id="id-node-comparisons">
            <head>Node Comparisons</head>
            <p>Node comparisons are used to compare two nodes, by their identity or by their <termref
                  def="dt-document-order"
               >document order</termref>. The result of a node comparison is defined by the following rules:</p>


            <olist>


               <item>
                  <p>The operands of a node comparison are evaluated in <termref
                        def="dt-implementation-dependent"
                     >implementation-dependent</termref> order.</p>
               </item>


               <item>
                  <p>If either operand is an empty sequence, the result of the
    comparison is an empty sequence, and the implementation need not
    evaluate the other operand or apply the operator. However, an
    implementation may choose to evaluate the other operand in order to
    determine whether it raises an error.</p>
               </item>


               <item>
                  <p> Each operand must be either a single node or an empty sequence; otherwise
a <termref
                        def="dt-type-error">type error</termref> is raised <errorref class="TY"
                        code="0004"/>.</p>
               </item>

               <item>
                  <p>A comparison with the <code>is</code> operator is <code>true</code> if the two operand nodes are the same node; otherwise it
is <code>false</code>. See <bibref
                        ref="xpath-datamodel-31"/> for  the definition of node identity.</p>
               </item>


               <item>
                  <p>A comparison with the <code>&lt;&lt;</code> operator returns <code>true</code> if the left operand node precedes the right operand node in
<termref
                        def="dt-document-order"
                        >document order</termref>; otherwise it returns <code>false</code>.</p>
               </item>


               <item>
                  <p>A comparison with the <code>&gt;&gt;</code> operator returns <code>true</code> if the left operand node follows the right operand node in
<termref
                        def="dt-document-order"
                        >document order</termref>; otherwise it returns <code>false</code>.</p>
               </item>
            </olist>
            <p>Here are some examples of node comparisons:</p>

            <ulist>


               <item>
                  <p>The following comparison is true only if the left and right sides each
evaluate to exactly the same single node:</p>
                  <eg role="parse-test"
                     ><![CDATA[/books/book[isbn="1558604820"] is /books/book[call="QA76.9 C3845"]]]></eg>
               </item>

               <item role="xquery">
                  <p>The following comparison is false because each constructed node has its own identity:</p>
                  <eg role="parse-test"
                     ><![CDATA[&lt;a&gt;5&lt;/a&gt; is &lt;a&gt;5&lt;/a&gt;]]></eg>
               </item>


               <item>
                  <p>The following comparison is true only if the node identified by the left
side occurs before the node identified by the right side in document order:</p>
                  <eg role="parse-test"
                     ><![CDATA[/transactions/purchase[parcel="28-451"] &lt;&lt; /transactions/sale[parcel="33-870"]]]></eg>
               </item>
            </ulist>
         </div3>

      </div2>
      <div2 id="id-logical-expressions">
         <head>Logical Expressions</head>
         <p>A <term>logical expression</term> is either an <term>and-expression</term> or
an <term>or-expression</term>. If a logical expression does not raise an error, its value is always one
of the boolean values <code>true</code> or <code>false</code>.</p>
         <scrap>
            <head/>
            <prodrecap ref="OrExpr" id="OrExpr"/>
            <prodrecap ref="AndExpr" id="AndExpr"/>
         </scrap>
         <p>The first step in evaluating a logical expression is to find the  <termref def="dt-ebv"
               >effective boolean value</termref> of each of its operands (see <specref ref="id-ebv"
            />).</p>

         <p>The value of an and-expression is determined by the effective
boolean values (EBV's) of its operands, as shown in the following table:</p>
         <table role="medium" width="80%">
            <tbody>
               <tr>
                  <th>AND:</th>
                  <th>EBV<sub>2</sub> =
<code>true</code>
                  </th>
                  <th>EBV<sub>2</sub> = <code>false</code>
                  </th>
                  <th>error in EBV<sub>2</sub>
                  </th>
               </tr>
               <tr>
                  <th>EBV<sub>1</sub> =
<code>true</code>
                  </th>
                  <td>
                     <code>true</code>
                  </td>
                  <td>
                     <code>false</code>
                  </td>
                  <td>error</td>
               </tr>
               <tr>
                  <th>EBV<sub>1</sub>
= <code>false</code>
                  </th>
                  <td>
                     <code>false</code>
                  </td>
                  <td>
                     <code>false</code>
                  </td>
                  <td>
                     <phrase role="xquery">either <code>false</code> or
error</phrase>
                     <phrase role="xpath">if <termref def="dt-xpath-compat-mode"
                           >XPath 1.0 compatibility mode</termref> is <code>true</code>, then <code>false</code>; otherwise either <code>false</code> or error.</phrase>
                  </td>
               </tr>
               <tr>
                  <th>error in EBV<sub>1</sub>
                  </th>
                  <td>error</td>
                  <td>
                     <phrase role="xquery">either <code>false</code> or
error</phrase>
                     <phrase role="xpath">if <termref def="dt-xpath-compat-mode"
                           >XPath 1.0 compatibility mode</termref> is <code>true</code>, then error; otherwise either <code>false</code> or error.</phrase>
                  </td>
                  <td>error</td>
               </tr>
            </tbody>
         </table>
         <p>The value of an
or-expression is determined by the effective boolean values (EBV's) of
its operands, as shown in
the following table:</p>
         <table role="medium" width="80%">
            <tbody>
               <tr>
                  <th>OR:</th>
                  <th>EBV<sub>2</sub> =
<code>true</code>
                  </th>
                  <th>EBV<sub>2</sub> = <code>false</code>
                  </th>
                  <th>error in
EBV<sub>2</sub>
                  </th>
               </tr>
               <tr>
                  <th>EBV<sub>1</sub> =
<code>true</code>
                  </th>
                  <td>
                     <code>true</code>
                  </td>
                  <td>
                     <code>true</code>
                  </td>
                  <td>
                     <phrase role="xquery">either <code>true</code> or
error</phrase>
                     <phrase role="xpath">if <termref def="dt-xpath-compat-mode"
                           >XPath 1.0 compatibility mode</termref> is <code>true</code>, then <code>true</code>; otherwise either <code>true</code> or error.</phrase>
                  </td>
               </tr>
               <tr>
                  <th>EBV<sub>1</sub> =
<code>false</code>
                  </th>
                  <td>
                     <code>true</code>
                  </td>
                  <td>
                     <code>false</code>
                  </td>
                  <td>error</td>
               </tr>
               <tr>
                  <th>error
in EBV<sub>1</sub>
                  </th>
                  <td>
                     <phrase role="xquery">either <code>true</code> or
error</phrase>
                     <phrase role="xpath">if <termref def="dt-xpath-compat-mode"
                           >XPath 1.0 compatibility mode</termref> is <code>true</code>, then error; otherwise either <code>true</code> or error.</phrase>
                  </td>
                  <td>error</td>
                  <td>error</td>
               </tr>
            </tbody>
         </table>
         <p role="xpath">If <termref def="dt-xpath-compat-mode"
               >XPath 1.0 compatibility mode</termref> is <code>true</code>, the order in which the operands of a logical expression are evaluated is effectively prescribed. Specifically, it is defined that when there is no
need to evaluate the second operand in order to determine the result, then
no error can occur as a result of evaluating the second operand.</p>
         <p>
            <phrase role="xpath">If <termref def="dt-xpath-compat-mode"
                  >XPath 1.0 compatibility mode</termref> is <code>false</code>, the
order in which the operands of a logical expression are evaluated is
<termref
                  def="dt-implementation-dependent"
               >implementation-dependent</termref>. In this case,</phrase>
            <phrase role="xquery"
                  >The
order in which the operands of a logical expression are evaluated is
<termref
                  def="dt-implementation-dependent"
               >implementation-dependent</termref>. The tables above are defined in such a way
that</phrase> an or-expression can return <code>true</code> if the first
expression evaluated is true, and it can raise an error if evaluation
of the first expression raises an error. Similarly, an and-expression
can return <code>false</code> if the first expression evaluated is
false, and it can raise an error if evaluation of the first expression
raises an error. As a result of these rules, a logical expression is
not deterministic in the presence of errors, as illustrated in the examples
below.</p>
         <p>Here are some examples of logical expressions:</p>


         <ulist>

            <item>
               <p>The following expressions return
<code>true</code>:</p>
               <eg role="parse-test"><![CDATA[1 eq 1 and 2 eq 2]]></eg>
               <eg role="parse-test"><![CDATA[1 eq 1 or 2 eq 3]]></eg>
            </item>

            <item>
               <p>The following
expression may return either <code>false</code> or raise a <termref
                     def="dt-dynamic-error">dynamic error</termref>
                  <phrase role="xpath"> (in <termref def="dt-xpath-compat-mode"
                        >XPath 1.0 compatibility mode</termref>, the result must be <code>false</code>)</phrase>:</p>
               <eg role="parse-test"><![CDATA[1 eq 2 and 3 idiv 0 = 1]]></eg>
            </item>

            <item>
               <p>The
following expression may return either <code>true</code> or raise a
<termref
                     def="dt-dynamic-error">dynamic error</termref>
                  <phrase role="xpath"> (in <termref def="dt-xpath-compat-mode"
                        >XPath 1.0 compatibility mode</termref>, the result must be <code>true</code>)</phrase>:</p>
               <eg role="parse-test"><![CDATA[1 eq 1 or 3 idiv 0 = 1]]></eg>
            </item>

            <item>
               <p>The
following expression must raise a <termref def="dt-dynamic-error"
                     >dynamic error</termref>:</p>
               <eg role="parse-test"><![CDATA[1 eq 1 and 3 idiv 0 = 1]]></eg>
            </item>
         </ulist>

         <p>In addition to and- and or-expressions, &language; provides a
function named <code>fn:not</code> that takes a general sequence as
parameter and returns a boolean value.  The <code>fn:not</code> function
is defined in <bibref
               ref="xpath-functions-40"
               />. The
<code>fn:not</code> function reduces its parameter to an <termref
               def="dt-ebv"
               >effective boolean value</termref>. It then returns
<code>true</code> if the effective boolean value of its parameter is
<code>false</code>, and <code>false</code> if the effective boolean
value of its parameter is <code>true</code>. If an error is
encountered in finding the effective boolean value of its operand,
<code>fn:not</code> raises the same error.</p>


      </div2>
      <div2 role="xquery" id="id-constructors">
         <head role="xquery">Node Constructors</head>
         <p>XQuery provides node constructors that can create XML nodes within a query.</p>

         <scrap>
            <head/>
            <prodrecap id="NodeConstructor" ref="NodeConstructor"/>
            <prodrecap id="DirectConstructor" ref="DirectConstructor"/>
            <prodrecap id="DirElemConstructor" ref="DirElemConstructor"/>
            <prodrecap id="DirElemContent" ref="DirElemContent"/>
            <prodrecap id="ElementContentChar" ref="ElementContentChar"/>
            <prodrecap id="CommonContent" ref="CommonContent"/>
            <prodrecap id="CDataSection" ref="CDataSection"/>
            <prodrecap id="CDataSectionContents" ref="CDataSectionContents"/>
            <prodrecap id="DirAttributeList" ref="DirAttributeList"/>
            <prodrecap id="DirAttributeValue" ref="DirAttributeValue"/>

            <prodrecap ref="QuotAttrValueContent" id="QuotAttrValueContent"/>
            <prodrecap ref="AposAttrValueContent" id="AposAttrValueContent"/>
            <prodrecap id="QuotAttrContentChar" ref="QuotAttrContentChar"/>
            <prodrecap id="AposAttrContentChar" ref="AposAttrContentChar"/>
            <prodrecap ref="EscapeQuot"/>
            <prodrecap ref="EscapeApos"/>
            <prodrecap ref="EnclosedExpr"/>
         </scrap>

         <p>Constructors are provided for element, attribute, document, text, comment, and processing instruction nodes. Two kinds of constructors are provided: <term>direct constructors</term>, which use an XML-like notation that can incorporate enclosed expressions, and <term>computed constructors</term>, which use a notation based on enclosed expressions. </p>

         <p>The rest of this section contains a conceptual description of the semantics of various kinds of constructor expressions. An XQuery implementation is free to use any implementation technique that produces the same result as the processing steps described here.</p>

         <div3 id="id-element-constructor">
            <head>Direct Element Constructors</head>
            <p>An <term>element constructor</term> creates an element node. <termdef
                  term="direct element constructor" id="dt-direct-elem-const"
                     >A <term>direct element constructor</term> is a form of element constructor in which the name of the constructed element is a constant.</termdef> Direct element constructors are based on standard XML notation. For example, the following expression is a direct element constructor
that creates a <code>book</code> element containing an attribute and some nested elements:</p>
            <eg role="parse-test"><![CDATA[<book isbn="isbn-0060229357">
    <title>Harold and the Purple Crayon</title>
    <author>
        <first>Crockett</first>
        <last>Johnson</last>
    </author>
</book>]]></eg>
            <p>If the element name in a direct element constructor has a namespace prefix, the namespace prefix
               is resolved to a namespace URI using the <termref
                  def="dt-static-namespaces"
                  >statically known namespaces</termref>. 
               If the element name  has no namespace prefix, it is implicitly qualified by the
               <phrase diff="chg" at="A">namespace bound to the zero-length prefix in the
               statically known namespaces</phrase>: if there is no such binding, then the expanded
               name of the element will be in no namespace.</p>
               <note><p>Both the statically known namespaces and the <phrase
                  diff="chg" at="A"
                  >default element namespace</phrase> 
               may be affected by <termref
                  def="dt-namespace-decl-attr"
                  >namespace declaration attributes</termref> 
               found inside the element constructor.</p></note>
            <p>The namespace prefix of the element name is retained after 
               expansion of the <termref
                  def="dt-qname">lexical QName</termref>, as described in 
               <bibref
                  ref="xpath-datamodel-31"/>. The resulting <termref def="dt-expanded-qname"
                  >expanded QName</termref> 
               becomes the <code>node-name</code> property of the constructed element node.</p>
            <p>In a direct element constructor, the name used in the end tag must exactly match the name
used in the corresponding start tag, including its prefix or absence of a prefix  <errorref
                  class="ST" code="0118"/>.</p>

            <p>In a direct element constructor, curly braces { } delimit  <termref
                  def="dt-enclosed-expression"
               >enclosed expressions</termref>, distinguishing them from literal text. Enclosed expressions
are evaluated and replaced by their value, as illustrated by the following
example:</p>
            <eg role="parse-test"><![CDATA[<example>
   <p> Here is a query. </p>
   <eg> $b/title </eg>
   <p> Here is the result of the query. </p>
   <eg>{ $b/title }</eg>
</example>]]></eg>
            <p>The above query might generate the following result (whitespace has been added for readability to this result and other result examples in this document):</p>
            <eg role="parse-test"><![CDATA[
<example>
  <p> Here is a query. </p>
  <eg> $b/title </eg>
  <p> Here is the result of the query. </p>
  <eg><title>Harold and the Purple Crayon</title></eg>
</example>]]></eg>
            <p>Since XQuery uses curly braces to denote enclosed expressions, some
convention is needed to denote a curly brace used as an ordinary character. For
this purpose, a pair of identical curly brace characters within the content of an element or attribute are interpreted by XQuery  as a single curly brace
character (that is, the pair "<code>{{</code>" represents the
  character "<code>{</code>" and the pair "<code>}}</code>" represents
  the character "<code>}</code>".) Alternatively, the <termref
                  def="dt-character-reference">character references</termref>
               <code>&amp;#x7b;</code> and <code>&amp;#x7d;</code> can be used to denote curly brace characters.  A single left curly brace
  ("<code>{</code>") is interpreted as the beginning delimiter for an
  enclosed expression. A single right curly brace ("<code>}</code>")
  without a matching left curly brace is treated as a <termref
                  def="dt-static-error">static error</termref>
               <errorref class="ST" code="0003"/>.</p>
            <p>The result of an element constructor is a new element node, with its own node identity. All the attribute and descendant nodes of the new element node are also new nodes with their own identities, even if they are copies of existing nodes.</p>
            <div4 id="id-attributes">
               <head>Attributes</head>
               <p>The start tag of a direct element constructor may contain one or more attributes. As in XML, each attribute is specified by a name and a value. In a direct element constructor, the name of each attribute is specified by a constant <termref
                     def="dt-qname"
                     >lexical QName</termref>, and the value of the attribute is specified by a string of characters enclosed in single or double quotes. As in the main content of the element constructor, an attribute value may contain  <termref
                     def="dt-enclosed-expression"
                  >enclosed expressions</termref>, which are evaluated and replaced by their value during processing of the element constructor.</p>
               <p>Each attribute in a direct element constructor creates a new attribute node, with its own node identity, whose parent is the constructed element node. However, note that <termref
                     def="dt-namespace-decl-attr"
                     >namespace declaration attributes</termref> (see <specref ref="id-namespaces"
                  />) do not create attribute nodes.</p>
               <p>If an attribute name has a namespace prefix, the prefix is resolved to a namespace URI using the <termref
                     def="dt-static-namespaces"
                     >statically known namespaces</termref>. If the attribute name  has no namespace prefix, the attribute is in no namespace. Note that the statically known namespaces used in  resolving an attribute name may be affected by <termref
                     def="dt-namespace-decl-attr"
                     >namespace declaration attributes</termref> that are found inside the same element constructor. The namespace prefix of the attribute name is retained after expansion of the <termref
                     def="dt-qname">lexical QName</termref>, as described in <bibref
                     ref="xpath-datamodel-31"/>. The resulting <termref def="dt-expanded-qname"
                     >expanded QName</termref> becomes the <code>node-name</code> property of the constructed attribute node.</p>
               <p>If the attributes in a direct element constructor do not have distinct <termref
                     def="dt-expanded-qname"
                     >expanded
			        QNames</termref> as their respective <code>node-name</code> properties, a <termref
                     def="dt-static-error">static error</termref> is raised <errorref class="ST"
                     code="0040"/>.</p>
               <p>Conceptually, an attribute (other than a namespace declaration attribute) in a direct element constructor is processed by the following steps:</p>

               <olist>

                  <item>

                     <p>Each consecutive sequence of literal characters in the
	attribute content is processed as a string literal containing
	those characters, with the following exceptions:</p>
                     <olist>
                        <item>
                           <p>Each occurrence of two consecutive <code>{</code>
             characters is replaced by a single <code>{</code> character.
             </p>
                        </item>
                        <item>
                           <p>Each occurrence of two consecutive <code>}</code>
             characters is replaced by a single <code>}</code> character.
             </p>
                        </item>
                        <item>
                           <p>Each occurrence of <nt def="EscapeQuot"
                                 >EscapeQuot</nt> is replaced by a single
             <code>"</code> character.  </p>
                        </item>
                        <item>
                           <p>Each occurrence of <nt def="EscapeApos"
                                 >EscapeApos</nt> is replaced by a single
             <code>'</code> character.  </p>
                        </item>
                     </olist>

                     <p>Attribute value normalization is then applied to
          normalize whitespace and expand <termref
                           def="dt-character-reference"
                           >character references</termref>
          and <termref
                           def="dt-predefined-entity-reference"
                           >predefined
          entity references</termref>. 
	  The rules for attribute value
	  normalization are the rules from Section 3.3.3 of [XML 1.0]
	  or Section 3.3.3 of [XML 1.1] (it is implementation-defined
	  which version is used). The rules are applied as though the
	  type of the attribute were CDATA (leading and trailing
	  whitespace characters are not stripped.)
          </p>
                  </item>


                  <item>
                     <p>Each enclosed expression is converted to a string as follows:</p>

                     <olist>

                        <item>
                           <p>
                              <termref def="dt-atomization"
                              >Atomization</termref> is applied to the value of the enclosed expression, converting it to a sequence of atomic values.</p>

                        </item>

                        <item>
                           <p>If the result of atomization is an empty sequence, the result is the zero-length string. Otherwise, each atomic value in the atomized sequence is cast into a string.</p>
                        </item>

                        <item>
                           <p>The individual strings resulting from the previous step are merged into a single string by concatenating them with a single space character between each pair.</p>
                        </item>
                     </olist>
                  </item>

                  <item>
                     <p>Adjacent strings resulting from the above steps are concatenated with no intervening blanks. The resulting string becomes the <code>string-value</code> property of the attribute node. The attribute node is given a <termref
                           def="dt-type-annotation"
                           >type annotation</termref> of <code>xs:untypedAtomic</code> (this type annotation may change if the parent element is validated). The <code>typed-value</code> property of the attribute node is the same as its <code>string-value</code>, as an instance of <code>xs:untypedAtomic</code>.</p>
                  </item>

                  <item>
                     <p>The <code>parent</code> property of the attribute node is set to the element node constructed by the direct element constructor that contains this attribute.</p>
                  </item>

                  <item>
                     <p>If the attribute name is <code>xml:id</code>, then <code>xml:id</code> processing is performed as defined in <bibref
                           ref="XMLID"
                           />. This ensures that the attribute has the type <code>xs:ID</code> and that its value is properly normalized. If an error is encountered during <code>xml:id</code> processing, an implementation may raise a <termref
                           def="dt-dynamic-error">dynamic error</termref>
                        <errorref class="DY" code="0091"/>.</p>
                  </item>

                  <item>
                     <p>If the attribute name is <code>xml:id</code>, the <code>is-id</code> property of the resulting attribute node is set to <code>true</code>; otherwise the <code>is-id</code> property is set to <code>false</code>. The <code>is-idrefs</code> property of the attribute node is unconditionally set to <code>false</code>.</p>
                  </item>
               </olist>
               <ulist>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;shoe size="7"/&gt;]]></eg>
                     <p>The string value of the <code>size</code> attribute is "<code>7</code>".</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;shoe size="{7}"/&gt;]]></eg>
                     <p>The string value of the <code>size</code> attribute is "<code>7</code>".</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;shoe size="{()}"/&gt;]]></eg>
                     <p>The string value of the <code>size</code> attribute is the zero-length string.</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;chapter ref="[{1, 5 to 7, 9}]"/&gt;]]></eg>
                     <p>The string value of the <code>ref</code> attribute is "<code>[1 5 6 7 9]</code>".</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"
                        ><![CDATA[&lt;shoe size="As big as {$hat/@size}"/&gt;]]></eg>
                     <p>The string value of the <code>size</code> attribute is the
string "<code>As big as </code>", concatenated with the string value of the
node denoted by the expression
  <code>$hat/@size</code>.</p>
                  </item>
               </ulist>
            </div4>
            <div4 id="id-namespaces">
               <head>Namespace Declaration Attributes</head>
               <p>The names of
  a constructed element and its attributes may be <termref
                     def="dt-qname"
                     >lexical QNames</termref> that
  include <term>namespace prefixes</term>. Namespace prefixes can be
  bound to namespaces in the <termref
                     def="dt-prolog"
                     >Prolog</termref> or by  <term>namespace
  declaration attributes</term>. It is a
  <termref
                     def="dt-static-error"
                     >static error</termref> to use a
  namespace prefix that has not been bound to a namespace <errorref
                     class="ST" code="0081"/>.</p>

               <p at="XQ.E13">
                  <termdef term="namespace declaration attribute" id="dt-namespace-decl-attr"
                        >A <term>namespace declaration
attribute</term> is used inside a direct element constructor. Its
purpose is to bind a namespace prefix <phrase diff="add" at="A">(including the zero-length prefix)</phrase> for
the constructed element node, including its attributes.</termdef>
Syntactically, a namespace declaration attribute has the form of an
attribute with namespace prefix <code>xmlns</code>, or with name
<code>xmlns</code> and no namespace prefix. All the namespace
declaration attributes of a given element must have distinct names
<errorref
                     class="ST" code="0071"
                  />. Each namespace declaration
attribute is processed as follows:</p>


               <ulist>

                  <item at="XQ.E13">
                     <p>The value of the namespace declaration attribute (a <nt
                           def="DirAttributeValue"
                           >DirAttributeValue</nt>) is processed as
  follows. If the <nt
                           def="DirAttributeValue">DirAttributeValue</nt>
  contains an <nt
                           def="EnclosedExpr"
                           >EnclosedExpr</nt>, a static error
  is raised <errorref class="ST"
                           code="0022"
                           />. Otherwise, it is
  processed as described in rule 1 of <specref
                           ref="id-attributes"
                           />. An implementation may raise a static error
  <errorref class="ST"
                           code="0046"
                        /> if the resulting value is of
  nonzero length and is neither an absolute URI nor a
  relative URI. The resulting value is used as the namespace
  URI in the following rules.
  </p>
                  </item>

                  <item>
                     <p>If the prefix of the attribute name is <code>xmlns</code>, then the
                local part of the attribute name is interpreted as a namespace prefix.
                This prefix and the namespace URI are added to the
                <termref
                           def="dt-static-namespaces"
                           >statically known namespaces</termref>
                of the constructor expression (overriding any existing binding of
                the given prefix), and are also added as a namespace binding to the
                <termref
                           def="dt-in-scope-namespaces"
                           >in-scope namespaces</termref>
                of the constructed element. If the namespace URI is a zero-length
                string and the implementation supports <bibref
                           ref="XMLNAMES11"
                           />,
                any existing namespace binding for the given prefix is removed from the
                <termref
                           def="dt-in-scope-namespaces"
                           >in-scope namespaces</termref>
                of the constructed element and from the
                <termref
                           def="dt-static-namespaces"
                           >statically known namespaces</termref>
                of the constructor expression. If the namespace URI is a zero-length
                string and the implementation does not support <bibref
                           ref="XMLNAMES11"/>,
                a static error is raised <errorref
                           code="0085" class="ST"/>. It is
                <termref
                           def="dt-implementation-defined"
                           >implementation-defined</termref>
                whether an implementation supports <bibref
                           ref="XMLNAMES"/> or
                <bibref ref="XMLNAMES11"
                        />.
             </p>
                  </item>

                  <item diff="chg" at="A">
                     <p>If the name of the namespace declaration attribute is <code>xmlns</code>
                with no prefix, then a binding of the zero-length prefix to the namespace URI
                is added to the  <termref def="dt-static-namespaces">statically known namespaces</termref>
                        of the constructor expression (overriding any existing binding of
                        the zero-length prefix),
                and is also added (with no prefix) to the
                <termref
                           def="dt-in-scope-namespaces"
                           >in-scope namespaces</termref>
                of the constructed element (overriding any existing namespace binding
                with no prefix). If the namespace URI is a zero-length string then any no-prefix
                namespace binding is removed from the
                <termref
                           def="dt-in-scope-namespaces"
                        >in-scope namespaces</termref>
                of the constructed element.
             </p>
                     <p diff="chg" at="A">For backwards compatibility reasons, if the query prolog does not contain an explicit
                        default type namespace declaration, then the
                        <termref def="dt-def-element-ns">default element namespace</termref>
                           and <termref def="dt-def-type-ns">default type namespace</termref>
                        of the constructor expression are set to <xtermref
                           spec="DM31" ref="dt-absent"/>.
                    </p>
                     <note diff="chg" at="A"><p>In earlier versions of XQuery,
                        given the expression <code><![CDATA[<output xmlns="">{$x/input}</output>]]></code>,
                        both the unprefixed names <code>output</code> and <code>input</code> were
                        interpreted as no-namespace names. Furthermore, the <code>xmlns=""</code>
                        declaration would affect the interpretation
                        of any unprefixed type names (though in practice, unprefixed type names were rarely used.)
                        This behavior is retained in XQuery 4.0 for compatibility reasons. 
                        However, the behavior can be changed by adding
                        a declaration such as <code>declare default type namespace "http://www.w3.org/2001/XMLSchema"</code>
                        to the query prolog. If a default type namespace is declared, then the attribute <code>xmlns=""</code>
                        only affects the <code>output</code> namespace, not the <code>input</code> namespace; it also has
                        no effect on unprefixed type names.
                     
                     </p>
                        <p>The same applies to a default namespace declaration such as 
                           <code>xmlns="http://www.w3.org/1999/xhtml/</code>. If a default type namespace
                        is declared, the default namespace declaration only affects names used in element constructors,
                        it no longer affects the interpretation of names in path expressions. This removes a
                        usability problem that otherwise arises when the input is no-namespace XML and the output
                        is XHTML.</p></note>
                  </item>

                  <item>
                     <p>It is a <termref def="dt-static-error">static error</termref>
                        <errorref class="ST" code="0070"/> if a namespace declaration
                attribute attempts to do any of the following:
                <ulist>
                           <item>
                              <p>Bind the prefix <code>xml</code> to some namespace URI
                      other than <code>http://www.w3.org/XML/1998/namespace</code>.
                   </p>
                           </item>
                           <item>
                              <p>Bind a prefix other than <code>xml</code> to the namespace
                      URI <code>http://www.w3.org/XML/1998/namespace</code>.
                   </p>
                           </item>
                           <item>
                              <p>Bind the prefix <code>xmlns</code> to any namespace URI.
                   </p>
                           </item>
                           <item>
                              <p>Bind a prefix to the namespace
                      URI <code>http://www.w3.org/2000/xmlns/</code>.
                   </p>
                           </item>
                        </ulist>
                     </p>
                  </item>

               </ulist>

               <p> A namespace declaration attribute does not cause an attribute node to be created. </p>
               <p>The following examples illustrate namespace declaration attributes:</p>
               <ulist>

                  <item>
                     <p>In this element constructor, a namespace declaration attribute
                        is used to set the <phrase
                           diff="chg" at="A"><termref def="dt-def-element-ns"
                              >default element namespace</termref>
                           and <termref def="dt-def-type-ns">default type namespace</termref></phrase> 
                        to <code>http://example.org/animals</code>:<eg
                           role="parse-test"><![CDATA[<cat xmlns = "http://example.org/animals">
  <breed>Persian</breed>
</cat>]]></eg>
                     </p>
                  </item>

                  <item>
                     <p>In this element constructor, namespace declaration attributes are used to bind the namespace prefixes <code>metric</code> and <code>english</code>:</p>
                     <eg role="parse-test"><![CDATA[<box xmlns:metric = "http://example.org/metric/units"
     xmlns:english = "http://example.org/english/units">
  <height> <metric:meters>3</metric:meters> </height>
  <width> <english:feet>6</english:feet> </width>
  <depth> <english:inches>18</english:inches> </depth>
</box>]]></eg>
                  </item>
               </ulist>
            </div4>
            <div4 id="id-content">
               <head>Content</head>
               <p>The part of a direct element constructor between the start tag and the end tag is called the <term>content</term> of the element constructor. This content may consist of text characters (parsed as <nt
                     def="ElementContentChar"
                     >ElementContentChar</nt>), nested direct constructors, <nt def="CDataSection"
                     >CDataSections</nt>, character and <termref
                     def="dt-predefined-entity-reference"
                     >predefined entity references</termref>, and <termref
                     def="dt-enclosed-expression"
                  >enclosed expressions</termref>. In general, the value of an enclosed expression may be any sequence of nodes and/or atomic values. Enclosed expressions can be used in the content of an element  constructor to compute both the content and the attributes of the constructed node.</p>

               <p>Conceptually, the content of an element constructor is processed as
follows:</p>

               <olist>

                  <item>
                     <p>The content is evaluated to produce a
sequence of nodes called the <term>content sequence</term>, as
follows:</p>

                     <olist>

                        <item>
                           <p>If the <termref def="dt-boundary-space-policy"
                                 >boundary-space policy</termref> in the <termref
                                 def="dt-static-context"
                                 >static context</termref> is <code>strip</code>, <termref
                                 def="dt-boundary-whitespace"
                                 >boundary whitespace</termref> is identified and deleted (see <specref
                                 ref="id-whitespace"
                              /> for the definition of boundary whitespace.)</p>
                        </item>

                        <item>
                           <p>
                              <termref def="dt-predefined-entity-reference"
                                 >Predefined entity references</termref>
and <termref
                                 def="dt-character-reference"
                                 >character references</termref> are expanded into their
referenced strings, as described in <specref
                                 ref="id-literals"/>. Characters inside a <nt def="CDataSection"
                                 >CDataSection</nt>, including special characters such as <code>&lt;</code> and <code>&amp;</code>, are treated as literal characters rather than as markup characters (except for the sequence <code>]]&gt;</code>, which terminates the CDataSection).</p>
                        </item>

                        <item>
                           <p>Each consecutive sequence of
literal characters evaluates to a single text node containing the
characters.</p>
                        </item>

                        <item>
                           <p>Each nested direct constructor is evaluated according to the rules in <specref
                                 ref="id-element-constructor"/> or <specref
                                 ref="id-otherConstructors"
                              />, resulting in a new element, comment, or processing instruction node. Then:</p>

                           <olist>

                              <item>
                                 <p>The <code>parent</code> property of the resulting node is then set to the newly constructed element node.</p>
                              </item>

                              <item>
                                 <p>The <code>base-uri</code> property of the
resulting node, and of each of its descendants, is set to be the same as that
of its new parent, unless it (the child node) has an <code>xml:base</code> attribute, in
which case its <code>base-uri</code> property is set to the value of that attribute,
<termref
                                       def="dt-resolve-relative-uri"
                                       >resolved (if it is relative)</termref> against the <code>base-uri</code> property of its new parent
node.</p>
                              </item>
                           </olist>
                        </item>

                        <item>
                           <p>Enclosed expressions are evaluated as follows: </p>

                           <olist>
                              <item>
                                 <p>Each array returned by the enclosed expression is flattened by calling the function <code>array:flatten()</code> before the steps that follow.</p>
                              </item>

                              <item>
                                 <p>If an enclosed expression returns a <xtermref spec="DM31"
                                       ref="dt-function-item"
                                       >function</xtermref>, a type error is raised <errorref
                                       class="TY" code="0105"/>.</p>
                              </item>

                              <item>
                                 <p>For each adjacent sequence of one or more atomic values returned by an enclosed expression, a new text node is constructed, containing the result of casting each atomic value to a string, with a single space character inserted between adjacent values.</p>
                                 <note>
                                    <p>The insertion of blank characters between adjacent values applies even if one or both of the values is a zero-length string.</p>
                                 </note>
                              </item>

                              <item>
                                 <p>For each node returned by an enclosed expression, a new copy is made of the given node and all nodes that have the given node as an ancestor,  collectively referred to as <term>copied nodes</term>. The properties of the copied nodes are as follows:</p>

                                 <olist>

                                    <item>
                                       <p>Each copied node receives a new node identity.</p>
                                    </item>

                                    <item>
                                       <p>The <code>parent</code>, <code>children</code>, and <code>attributes</code> properties of the copied nodes are set so as to preserve their inter-node relationships. For the topmost node (the node directly returned by the enclosed expression), the <code>parent</code> property is set to the node constructed by this constructor.</p>
                                    </item>

                                    <item>
                                       <p>If <termref def="dt-construction-mode"
                                             >construction mode</termref> in the <termref
                                             def="dt-static-context"
                                             >static context</termref> is <code>strip</code>:</p>

                                       <olist>

                                          <item>
                                             <p>If the copied node is an element node, its <termref
                                                  def="dt-type-annotation"
                                                  >type annotation</termref> is set to  <code>xs:untyped</code>. Its <code>nilled</code>, <code>is-id</code>, and <code>is-idrefs</code> properties are set to <code>false</code>.</p>
                                          </item>

                                          <item>
                                             <p>If the copied node is an attribute node, its <code>type-name</code> property  is set to <code>xs:untypedAtomic</code>. Its <code>is-idrefs</code> property is set to <code>false</code>. Its <code>is-id</code> property is set to <code>true</code> if the qualified name of the attribute node is <code>xml:id</code>; otherwise it is set to <code>false</code>.</p>
                                          </item>

                                          <item>
                                             <p>The <code>string-value</code> of each copied element and attribute node remains unchanged, and its <code>typed-value</code> becomes equal to its <code>string-value</code> as an instance of <code>xs:untypedAtomic</code>.<note>
                                                  <p> Implementations that store only the <termref
                                                  def="dt-typed-value"
                                                  >typed value</termref> of a node are required at this point to convert the typed value to a string form.</p>
                                                </note>
                                             </p>
                                          </item>
                                       </olist>
                                       <p>On the other hand, if <termref def="dt-construction-mode"
                                             >construction mode</termref> in the <termref
                                             def="dt-static-context"
                                             >static context</termref> is <code>preserve</code>, the <code>type-name</code>, <code>nilled</code>, <code>string-value</code>, <code>typed-value</code>, <code>is-id</code>, and <code>is-idrefs</code> properties of the copied nodes are preserved.</p>
                                    </item>

                                    <item>
                                       <p>The <code>in-scope-namespaces</code> property of a copied element node is
determined by the following rules. In applying these rules, the default
namespace or absence of a default namespace is treated like any other
namespace binding:</p>

                                       <olist>

                                          <item>
                                             <p>If <termref def="dt-copy-namespaces-mode"
                                                  >copy-namespaces mode</termref> specifies <code>preserve</code>, all in-scope-namespaces of the original element are
retained in the new copy.
If <termref
                                                  def="dt-copy-namespaces-mode"
                                                  >copy-namespaces mode</termref> specifies <code>no-preserve</code>, the new copy retains only those in-scope namespaces of the original element that are used in the names of the element and its
attributes.</p>
                                          </item>

                                          <item>
                                             <p>If <termref def="dt-copy-namespaces-mode"
                                                  >copy-namespaces mode</termref> specifies <code>inherit</code>, the copied node inherits all the in-scope namespaces of the constructed node, augmented and overridden by the in-scope namespaces of the original element that were preserved by the preceding rule. If <termref
                                                  def="dt-copy-namespaces-mode"
                                                  >copy-namespaces mode</termref> specifies <code>no-inherit</code>, the copied node does not inherit any in-scope namespaces from the constructed node.</p>
                                          </item>

                                       </olist>
                                    </item>



                                    <item>
                                       <p>An enclosed expression in the content of an element constructor may cause one or more existing nodes to be copied. Type error
<errorref
                                             class="TY" code="0086"
                                          />
is raised in the following cases:</p>
                                       <olist>
                                          <item>
                                             <p>
An element node is copied, and the
<termref
                                                  def="dt-typed-value"
                                                  >typed value</termref> of the element node or one of its attributes is
<termref
                                                  def="dt-namespace-sensitive"
                                                  >namespace-sensitive</termref>,
and <termref
                                                  def="dt-construction-mode"
                                                  >construction mode</termref>
is <code>preserve</code>, and
<termref
                                                  def="dt-copy-namespaces-mode"
                                                  >copy-namespaces mode</termref>
is <code>no-preserve</code>.
</p>
                                          </item>
                                          <item>
                                             <p>
An attribute node is copied but its parent element node is not
copied, and the <termref
                                                  def="dt-typed-value"
                                                  >typed value</termref>
of the copied attribute node is
<termref
                                                  def="dt-namespace-sensitive"
                                                  >namespace-sensitive</termref>,
and <termref
                                                  def="dt-construction-mode"
                                                  >construction mode</termref>
is <code>preserve</code>.</p>
                                          </item>
                                       </olist>

                                       <note>
                                          <p>
                The rationale for error <errorref
                                                class="TY" code="0086"
                                             /> is as follows:
                It is not possible to preserve the type of a QName without also preserving
                the namespace binding that defines the prefix of the QName.</p>
                                       </note>
                                    </item>



                                    <item>
                                       <p>When an element or processing instruction node is copied, its <code>base-uri</code>
property is set to be the same as that of its new parent,
with the following exception: if a copied element node has an <code>xml:base</code> attribute, its <code>base-uri</code> property is set to
the value of that attribute, <termref
                                             def="dt-resolve-relative-uri"
                                             >resolved (if it is relative)</termref> against
the <code>base-uri</code> property of the new parent node.</p>
                                    </item>

                                    <item>
                                       <p>All other properties of the copied nodes are preserved.</p>
                                    </item>
                                 </olist>
                              </item>
                           </olist>
                        </item>
                     </olist>
                  </item>

                  <item>
                     <p> If the content sequence contains a document node, the document node is replaced in the content sequence by its children.</p>
                  </item>

                  <item>
                     <p>Adjacent text nodes in the content sequence are merged into a single text node by concatenating their contents, with no intervening blanks. After concatenation, any text node whose content is a zero-length string is deleted from the content sequence.</p>
                  </item>



                  <item>
                     <p>If the content sequence contains an attribute node or a
namespace node following a node that is not an attribute node or a
namespace node, a <termref
                           def="dt-type-error">type error</termref> is
raised <errorref class="TY"
                           code="0024"/>.</p>
                  </item>




                  <item>
                     <p>The properties of the newly constructed element node are determined as follows:</p>

                     <olist>

                        <item>
                           <p>
                              <code>node-name</code> is the <termref def="dt-expanded-qname"
                                 >expanded QName</termref> resulting from resolving the element name in the start tag, including its original namespace prefix (if any), as described in <specref
                                 ref="id-element-constructor"/>.</p>
                        </item>

                        <item>
                           <p>
                              <code>parent</code> is set to empty.</p>
                        </item>

                        <item>
                           <p>
                              <code>attributes</code> consist of all the attributes specified in the start tag as described in <specref
                                 ref="id-attributes"
                                 />, together with all the attribute nodes in the content sequence, in <termref
                                 def="dt-implementation-dependent"
                                 >implementation-dependent</termref> order. Note that the <code>parent</code> property of each of these attribute nodes has been set to the newly constructed element node. If two or more attributes have the same <code>node-name</code>,  a <termref
                                 def="dt-dynamic-error">dynamic error</termref> is raised <errorref
                                 class="DY" code="0025"
                                 />. If an attribute named <code>xml:space</code> has a value other than <code>preserve</code> or <code>default</code>, a <termref
                                 def="dt-dynamic-error"
                                 >dynamic error</termref>  may be raised <errorref code="0092"
                                 class="DY"/>.</p>
                        </item>

                        <item>
                           <p>
                              <code>children</code> consist of all the element, text, comment, and processing
   instruction nodes in the content sequence. Note that the <code>parent</code> property of each of these nodes has been set to the newly constructed element node.</p>
                        </item>

                        <item>
                           <p>
                              <code>base-uri</code> is set to the following value:

<olist> <item>
                                    <p>If the constructed node has an attribute named <code>xml:base</code>, then the value of this attribute, <termref
                                          def="dt-resolve-relative-uri"
                                          >resolved (if it is relative)</termref> against the
    <termref
                                          def="dt-static-base-uri"
                                          >Static Base URI</termref>, as described in
      <specref
                                          ref="id-resolve-relative-uri"/>. </p>
                                 </item> <item>
                                    <p>Otherwise,
    the <termref def="dt-static-base-uri"
                                          >Static Base URI</termref>.</p>
                                 </item>
                              </olist>
                           </p>
                        </item>

                        <item>
                           <p>
                              <code>in-scope-namespaces</code> consist of all the namespace bindings resulting from namespace declaration attributes as described in <specref
                                 ref="id-namespaces"
                                 />, and possibly additional namespace bindings as described in <specref
                                 ref="id-ns-nodes-on-elements"/>.</p>
                        </item>

                        <item>
                           <p>The <code>nilled</code> property is <code>false</code>.</p>
                        </item>

                        <item>
                           <p>The <code>string-value</code> property is equal to the concatenated contents of the text-node descendants in document order. If there are no text-node descendants, the <code>string-value</code> property is a zero-length string.</p>
                        </item>

                        <item>
                           <p>The <code>typed-value</code> property is equal to the <code>string-value</code> property, as an instance of <code>xs:untypedAtomic</code>.</p>
                        </item>

                        <item>
                           <p>If <termref def="dt-construction-mode"
                                 >construction mode</termref> in the <termref
                                 def="dt-static-context"
                                 >static context</termref> is <code>strip</code>, the <code>type-name</code> property is <code>xs:untyped</code>. On the other hand, if construction mode is <code>preserve</code>, the <code>type-name</code> property is <code>xs:anyType</code>.</p>
                        </item>

                        <item>
                           <p>The <code>is-id</code> and <code>is-idrefs</code> properties are set to <code>false</code>.</p>
                        </item>
                     </olist>
                  </item>
               </olist>
               <ulist>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;a&gt;{1}&lt;/a&gt;]]></eg>
                     <p>The constructed element node has one child, a text node containing the value "<code>1</code>".</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;a&gt;{1, 2, 3}&lt;/a&gt;]]></eg>
                     <p>The constructed element node has one child, a text node containing the value "<code>1 2 3</code>".</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;c&gt;{1}{2}{3}&lt;/c&gt;]]></eg>
                     <p>The constructed element node has one child, a text node containing the value "<code>123</code>".</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;b&gt;{1, "2", "3"}&lt;/b&gt;]]></eg>
                     <p>The constructed element node has one child, a text node containing the value "<code>1 2 3</code>".</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;fact&gt;I saw 8 cats.&lt;/fact&gt;]]></eg>
                     <p>The constructed element node has one child, a text node containing the value "<code>I saw 8 cats.</code>".</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"
                        ><![CDATA[&lt;fact&gt;I saw {5 + 3} cats.&lt;/fact&gt;]]></eg>
                     <p>The constructed element node has one child, a text node containing the value "<code>I saw 8 cats.</code>".</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"
                        ><![CDATA[&lt;fact&gt;I saw &lt;howmany&gt;{5 + 3}&lt;/howmany&gt; cats.&lt;/fact&gt;]]></eg>
                     <p>The constructed element node has three children: a text node containing "<code>I saw </code> ", a child element node named <code>howmany</code>, and a text node containing "<code> cats.</code>". The child element node in turn has a single text node child containing the value "<code>8</code>".</p>
                  </item>
               </ulist>
            </div4>
            <div4 id="id-whitespace">
               <head>Boundary Whitespace</head>
               <p>In a direct element constructor, whitespace characters may appear in the content of the constructed element. In some cases, enclosed expressions and/or nested elements may be separated only by whitespace characters.   For
example, in the expression below, the end-tag
<code>&lt;/title&gt;</code> and the start-tag <code>&lt;author&gt;</code> are separated by a newline character and four space
characters:</p>
               <eg role="parse-test"><![CDATA[<book isbn="isbn-0060229357">
    <title>Harold and the Purple Crayon</title>
    <author>
        <first>Crockett</first>
        <last>Johnson</last>
    </author>
</book>]]></eg>
               <p>
                  <termdef term="boundary whitespace" id="dt-boundary-whitespace">
                     <term>Boundary whitespace</term> is a
sequence of consecutive whitespace characters within the content of a <termref
                        def="dt-direct-elem-const"
                        >direct element constructor</termref>, that is delimited at each end either by the start or
end of the content, or by a <nt
                        def="DirectConstructor">DirectConstructor</nt>, or by an <nt
                        def="EnclosedExpr"
                        >EnclosedExpr</nt>. For this purpose, characters generated by
   <termref
                        def="dt-character-reference"
                        >character references</termref> such as <code>&amp;#x20;</code> or by <nt
                        def="CDataSection"
                     >CDataSections</nt> are not
   considered to be whitespace characters.</termdef>
               </p>
               <p>The <termref def="dt-boundary-space-policy"
                     >boundary-space policy</termref> in the <termref def="dt-static-context"
                     >static context</termref> controls whether boundary whitespace is
   preserved by element constructors. If boundary-space policy is <code>strip</code>, boundary whitespace is not considered significant and
   is discarded. On the other hand, if boundary-space policy is <code>preserve</code>, boundary whitespace is
   considered significant and is
   preserved.</p>
               <ulist>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;cat&gt;
   &lt;breed&gt;{$b}&lt;/breed&gt;
   &lt;color&gt;{$c}&lt;/color&gt;
&lt;/cat&gt;]]></eg>
                     <p>The constructed
   <code>cat</code> element node has two child element nodes named
   <code>breed</code> and <code>color</code>. Whitespace surrounding
   the child elements will be stripped away by the element
   constructor if boundary-space policy is
   <code>strip</code>.</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;a&gt;  {"abc"}  &lt;/a&gt;]]></eg>
                     <p>If
   boundary-space policy is <code>strip</code>, this example is equivalent to <code
                           role="parse-test"
                           >&lt;a&gt;abc&lt;/a&gt;</code>. However, if
   boundary-space policy is <code>preserve</code>, this example is
   equivalent to <code
                           role="parse-test"
                        >&lt;a&gt;&nbsp;&nbsp;abc&nbsp;&nbsp;&lt;/a&gt;</code>.</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;a&gt; z {"abc"}&lt;/a&gt;]]></eg>
                     <p>Since the
   whitespace surrounding the <code>z</code> is not boundary
   whitespace, it is always preserved. This example is equivalent to
   <code
                           role="parse-test">&lt;a&gt;&nbsp;z&nbsp;abc&lt;/a&gt;</code>.</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;a&gt;&amp;#x20;{"abc"}&lt;/a&gt;]]></eg>
                     <p>This
   example is equivalent to <code role="parse-test"
                           >&lt;a&gt;&nbsp;abc&lt;/a&gt;</code>, regardless
   of the boundary-space policy, because the space generated by the <termref
                           def="dt-character-reference"
                        >character reference</termref> is not treated as a whitespace character.</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"><![CDATA[&lt;a&gt;{"  "}&lt;/a&gt;]]></eg>
                     <p>This example constructs an element containing two space characters,
   regardless of the boundary-space policy, because whitespace inside an enclosed expression is never considered to be boundary whitespace.</p>
                  </item>

                  <item>
                     <p>Example:</p>
                     <eg role="parse-test"
                        ><![CDATA[&lt;a&gt;{ [ "one", "little", "fish" ] }&lt;/a&gt;]]></eg>
                     <p>This example constructs an element containing the text <code>one little fish</code>, because the array is flattened, and the resulting sequence of atomic values is converted to a text node with a single blank between values.</p>
                  </item>

               </ulist>
               <note>
                  <p>Element constructors treat attributes named <code>xml:space</code> as ordinary attributes. An <code>xml:space</code> attribute does not affect the handling of whitespace by an element constructor.</p>
               </note>
            </div4>
         </div3>
         <div3 id="id-otherConstructors">
            <head>Other Direct Constructors</head>
            <p>XQuery allows an expression to generate a processing instruction node or a comment node. This can be accomplished by using a <term>direct processing instruction constructor</term> or a <term>direct comment constructor</term>. In each case, the syntax of the constructor expression is
based on the syntax of a similar construct in XML.</p>
            <scrap>
               <head/>

               <prodrecap id="DirPIConstructor" ref="DirPIConstructor"/>
               <prodrecap id="DirPIContents" ref="DirPIContents"/>
               <prodrecap id="DirCommentConstructor" ref="DirCommentConstructor"/>
               <prodrecap id="DirCommentContents" ref="DirCommentContents"/>
               <!--prodrecap id="PITarget" ref="PITarget" not included here
because it invalidates the document.-->
            </scrap>
            <p>A direct processing instruction constructor creates a processing instruction node whose <code>target</code> property is <nt
                  def="PITarget" id="PITarget"
                  >PITarget</nt> and whose <code>content</code> property is <nt def="DirPIContents"
                  >DirPIContents</nt>. The <code>base-uri</code> property of the node is empty.  The <code>parent</code> property of the node is empty.</p>
            <p>The <nt def="PITarget"
                  >PITarget</nt> of a processing instruction must not consist of the characters "XML" in any combination of upper and lower case. The <nt
                  def="DirPIContents"
                  >DirPIContents</nt> of a processing instruction must not contain the string "<code>?&gt;</code>".</p>
            <p>The following example illustrates a direct processing instruction constructor:</p>
            <eg role="parse-test"><![CDATA[&lt;?format role="output" ?&gt;]]></eg>
            <p>A direct comment constructor creates a comment node whose  <code>content</code> property is <nt
                  def="DirCommentContents"
               >DirCommentContents</nt>. Its <code>parent</code> property is empty.</p>
            <p>The <nt def="DirCommentContents"
               >DirCommentContents</nt> of a comment must not contain two consecutive hyphens or end with a hyphen. These rules are syntactically enforced by the grammar shown above.</p>
            <p>The following example illustrates a direct comment constructor:</p>
            <eg role="parse-test"
               ><![CDATA[&lt;!-- Tags are ignored in the following section --&gt;]]></eg>
            <note>
               <p>A direct comment constructor is different from a <nt def="Comment"
                     >comment</nt>, since a direct comment constructor actually constructs a comment node, whereas a <nt
                     def="Comment"
                  >comment</nt> is simply used in documenting a query and is not evaluated.</p>
            </note>



         </div3>


         <div3 id="id-computedConstructors">
            <head>Computed Constructors</head>

            <scrap>
               <head/>
               <prodrecap id="ComputedConstructor" ref="ComputedConstructor"/>
            </scrap>

            <p>An alternative way to create nodes is by using a <term id="term-elem-ctor"
                  >computed constructor</term>. A computed
constructor begins with a keyword that identifies the type of node to
be created: <code>element</code>, <code>attribute</code>,
<code>document</code>, <code>text</code>,
<code>processing-instruction</code>, <code>comment</code>, or
<code>namespace</code>.</p>

            <p>For those kinds of nodes that have names (element, attribute, and
processing instruction nodes), the keyword that specifies the node
kind is followed by the name of the node to be created. This name may
be specified either as an EQName or as an expression enclosed in
braces. <termdef
                  term="name expression" id="dt-name-expression"
                     >When
an expression is used to specify the name of a constructed node, that
expression is called the <term>name expression</term> of the
constructor.</termdef>
            </p>

            <p>The following example illustrates the use of computed element and
attribute constructors in a simple case where the names of the
constructed nodes are constants. This example generates exactly the
same result as the first example in <specref
                  ref="id-element-constructor"/>:</p>

            <eg role="parse-test"><![CDATA[element book {
   attribute isbn {"isbn-0060229357" },
   element title { "Harold and the Purple Crayon"},
   element author {
      element first { "Crockett" },
      element last {"Johnson" }
   }
}]]></eg>

            <div4 id="id-computedElements">
               <head>Computed Element Constructors</head>

               <scrap>
                  <head/>
                  <prodrecap id="CompElemConstructor" ref="CompElemConstructor"/>
                  <prodrecap ref="EQName"/>
                  <prodrecap id="EnclosedContentExpr" ref="EnclosedContentExpr"/>
                  <prodrecap ref="EnclosedExpr"/>
               </scrap>

               <p>
                  <termdef term="computed element constructor" id="dt-computed-elem-const"
                        >A <term>computed element constructor</term> creates an element node, allowing both the name and the content of the node to be computed.</termdef>
               </p>

               <p>If the keyword <code>element</code> is followed by an EQName, it is expanded to an  <termref
                     def="dt-expanded-qname"
                     >expanded QName</termref> as follows:
if the EQName has a BracedURILiteral it is expanded using the specified URI;
if the EQName is a <termref
                     def="dt-qname"
                     >lexical QName</termref> with a namespace prefix 
                  it is expanded using the <termref
                     def="dt-static-namespaces"
                     >statically known namespaces</termref>;
if the EQName is a  <termref
                     def="dt-qname"
                     >lexical QName</termref> without a prefix 
                  it is implicitly qualified by the <phrase diff="chg" at="A">namespace URI that is bound
                  to the zero-length prefix in the <termref def="dt-static-namespaces">statically known namespaces</termref>;
                     if there is no such binding, the expanded name will be in no namespace.
                  </phrase>.
                  The resulting <termref def="dt-expanded-qname">expanded QName</termref> is used as the
                  <code>node-name</code> property of the constructed element node. If expansion of the QName 
                  is not successful, a <termref def="dt-static-error">static error</termref> is raised
                  <errorref code="0081" class="ST"/>.</p>

               <p>If the keyword <code>element</code> is followed by a <termref
                     def="dt-name-expression"
                  >name expression</termref>, the name expression is processed as follows:</p>

               <olist>

                  <item>
                     <p>
                        <termref def="dt-atomization"
                           >Atomization</termref> is applied to the value of the <termref
                           def="dt-name-expression"
                           >name expression</termref>. If the result of atomization is not a single atomic value of type <code>xs:QName</code>, <code>xs:string</code>, or <code>xs:untypedAtomic</code>, a <termref
                           def="dt-type-error">type
   error</termref> is raised <errorref
                           class="TY" code="0004"/>.</p>
                  </item>

                  <item>
                     <p>If the atomized value of the <termref def="dt-name-expression"
                           >name expression</termref> is of type
   <code>xs:QName</code>, that <termref
                           def="dt-expanded-qname"
                           >expanded QName</termref> is used as the <code>node-name</code> property of the constructed
   element, retaining the prefix part of the QName.</p>
                  </item>

                  <item>
                     <p>If the atomized value of the <termref def="dt-name-expression"
                        >name expression</termref> is of type <code>xs:string</code> or <code>xs:untypedAtomic</code>, 
                        that value is converted to an <termref def="dt-expanded-qname"
                           >expanded QName</termref> <phrase diff="add" at="A">as follows:</phrase></p>
                     <olist>
                        <item><p>Leading and trailing whitespace is removed.</p></item>
                        <item><p>If the value is an unprefixed <code>NCName</code>, it is treated as a local name in the <termref
                           def="dt-def-element-ns">default element namespace</termref>.</p></item>
                        <item><p>If the value is a lexical QName with a prefix, that prefix is <termref
                           def="dt-resolve-relative-uri">resolved to a namespace URI</termref> using the <termref
                              def="dt-static-namespaces">statically known namespaces</termref>.</p></item>
                        <item><p>If the value is a URI-qualified name (<code>Q{uri}local</code>), it
                           is converted to an <termref def="dt-expanded-qname"/> with the supplied namespace URI and
                           local name, and with no prefix.</p></item>
                     </olist>
                     <note diff="add" at="A"><p>This was under-specified in XQuery 3.1.</p></note>
                     
                     <p>The resulting <termref def="dt-expanded-qname">expanded QName</termref> is used as the
                        <code>node-name</code> property of the constructed element, retaining the prefix part of the QName
                        <phrase diff="add" at="A">(or its absence)</phrase>. If conversion of the atomized <termref
                           def="dt-name-expression">name expression</termref> to an <termref
                              def="dt-expanded-qname">expanded QName</termref> is not successful, a <termref
                                 def="dt-dynamic-error">dynamic error</termref> is raised <errorref
                                    class="DY" code="0074"/>.</p>
                  </item>
               </olist>

               <!--	<change diff="add" at="XQ.E19"> -->
               <p>A <termref def="dt-dynamic-error"
                     >dynamic error</termref> is raised
             <errorref class="DY"
                     code="0096"
                  /> if the node-name of the constructed
             element node has any of the following properties:
          </p>
               <ulist>
                  <item>
                     <p>Its namespace prefix is <code>xmlns</code>.
             </p>
                  </item>
                  <item>
                     <p>Its namespace URI is <code>http://www.w3.org/2000/xmlns/</code>.
             </p>
                  </item>
                  <item>
                     <p>Its namespace prefix is <code>xml</code> and its namespace
                URI is not <code>http://www.w3.org/XML/1998/namespace</code>.
             </p>
                  </item>
                  <item>
                     <p>Its namespace prefix is other than <code>xml</code> and its
                namespace URI is <code>http://www.w3.org/XML/1998/namespace</code>.
             </p>
                  </item>
               </ulist>
               <!--	</change> -->


               <p>The <termref def="dt-content-expression"
                     >content expression</termref> of a computed element constructor (if present) is processed in exactly the same way as an enclosed expression in the content of a <termref
                     def="dt-direct-elem-const"
                     >direct element constructor</termref>, as described in Step 1e of <specref
                     ref="id-content"
                     />. The result of processing the content expression is a sequence of nodes called the <term>content sequence</term>. If the <termref
                     def="dt-content-expression"
                  >content expression</termref> is absent, the content sequence is an empty sequence.</p>
               <p>Processing of the computed element constructor proceeds as follows:</p>

               <olist>

                  <item>
                     <p>If the content sequence contains a document node, the document node is replaced in the content sequence by its children.</p>
                  </item>
                  <item>
                     <p>Adjacent text nodes in the content sequence are merged into a single text node by concatenating their contents, with no intervening blanks. After concatenation, any text node whose content is a zero-length string is deleted from the content sequence.</p>
                  </item>

                  <item>
                     <p> If the content
   sequence contains an attribute node or a namespace node following a node that is not an
   attribute node or a namespace node, a <termref
                           def="dt-type-error">type error</termref>
   is raised <errorref
                           class="TY" code="0024"/>.</p>
                  </item>

                  <item>
                     <p>The properties of the newly constructed element node are determined as follows:</p>

                     <olist>

                        <item>
                           <p>
                              <code>node-name</code> is the <termref def="dt-expanded-qname"
                                 >expanded QName</termref> resulting from processing the specified <termref
                                 def="dt-qname">lexical QName</termref> or <termref
                                 def="dt-name-expression"
                              >name expression</termref>, as described above.</p>
                        </item>

                        <item>
                           <p>
                              <code>parent</code> is empty.</p>
                        </item>

                        <item>
                           <p>
                              <code>attributes</code> consist of all the attribute nodes in the content sequence, in <termref
                                 def="dt-implementation-dependent"
                                 >implementation-dependent</termref> order. Note that the <code>parent</code> property of each of these attribute nodes has been set to the newly constructed element node. If two or more  attributes have the same <code>node-name</code>,  a <termref
                                 def="dt-dynamic-error">dynamic error</termref> is raised <errorref
                                 class="DY" code="0025"
                                 />. If an attribute named <code>xml:space</code> has a value other than <code>preserve</code> or <code>default</code>, a <termref
                                 def="dt-dynamic-error"
                                 >dynamic error</termref>  may be raised <errorref code="0092"
                                 class="DY"/>.</p>
                        </item>

                        <item>
                           <p>
                              <code>children</code> consist of all the element, text, comment, and processing
   instruction nodes in the content sequence. Note that the <code>parent</code> property of each of these nodes has been set to the newly constructed element node.</p>
                        </item>

                        <item>
                           <p>
                              <code>base-uri</code> is set to the following value:

<olist> <item>
                                    <p>If the constructed node has an attribute named <code>xml:base</code>, then the value of this attribute, <termref
                                          def="dt-resolve-relative-uri"
                                          >resolved (if it is relative)</termref> against the 
  <termref
                                          def="dt-static-base-uri"
                                          >Static Base URI</termref>, as described
    in <specref
                                          ref="id-resolve-relative-uri"/>.</p>
                                 </item> <item>
                                    <p>Otherwise,
    the <termref def="dt-static-base-uri"
                                          >Static Base URI</termref>.</p>
                                 </item>
                              </olist>
                           </p>
                        </item>

                        <item>
                           <p>
                              <code>in-scope-namespaces</code> are computed as described in <specref
                                 ref="id-ns-nodes-on-elements"/>.</p>
                        </item>

                        <item>
                           <p>The <code>nilled</code> property is <code>false</code>.</p>
                        </item>

                        <item>
                           <p>The <code>string-value</code> property is equal to the concatenated contents of the text-node descendants in document order.</p>
                        </item>

                        <item>
                           <p>The <code>typed-value</code> property is equal to the <code>string-value</code> property, as an instance of <code>xs:untypedAtomic</code>.</p>
                        </item>

                        <item>
                           <p>If <termref def="dt-construction-mode"
                                 >construction mode</termref> in the <termref
                                 def="dt-static-context"
                                 >static context</termref> is <code>strip</code>, the <code>type-name</code> property is <code>xs:untyped</code>. On the other hand, if construction mode is <code>preserve</code>, the <code>type-name</code> property is <code>xs:anyType</code>.</p>
                        </item>

                        <item>
                           <p>The <code>is-id</code> and <code>is-idrefs</code> properties are set to <code>false</code>.</p>
                        </item>
                     </olist>
                  </item>
               </olist>
               <p>A computed element constructor might be
   used to make a modified copy of an existing element. For example,
   if the variable <code>$e</code> is bound to an element with <termref
                     def="dt-numeric"
                     >numeric</termref>
   content, the following constructor might be used to create a new
   element with the same name and attributes as <code>$e</code> and
   with numeric content equal to twice the value of
   <code>$e</code>:</p>
               <eg role="parse-test"><![CDATA[element {fn:node-name($e)}
   {$e/@*, 2 * fn:data($e)}]]></eg>
               <p>In this example, if <code>$e</code> is
   bound by the expression <code>let $e := &lt;length
   units="inches"&gt;{5}&lt;/length&gt;</code>, then the result of the
   example expression is the element <code>&lt;length
   units="inches"&gt;10&lt;/length&gt;</code>.</p>
               <note>
                  <p>The <termref def="dt-static-type">static type</termref> of the expression <code
                        role="parse-test"
                        >fn:node-name($e)</code> is <code>xs:QName?</code>, denoting zero or one QName. Therefore, if the <termref
                        def="dt-static-typing-feature"
                        >Static Typing Feature</termref> is in effect, the above example raises a static type error, since the name expression in a computed element constructor is required to return exactly one string or QName. In order to avoid the static type error, the name expression <code
                        role="parse-test">fn:node-name($e)</code> could be rewritten as <code
                        role="parse-test">fn:exactly-one(fn:node-name($e))</code>. If the <termref
                        def="dt-static-typing-feature"
                        >Static Typing Feature</termref> is not in effect, the example can be successfully evaluated as written, provided that <code>$e</code> is bound to exactly one element node with numeric content.</p>
               </note>
               <p>One important
   purpose of computed constructors is to allow the name of a node to
   be computed. We will illustrate this feature by an expression that
   translates the name of an element from one language to
   another. Suppose that the variable <code>$dict</code> is bound to a
   <code>dictionary</code> element containing a sequence of <code>entry</code> elements, each of which encodes translations for a specific word.  Here is an example
   entry that encodes the German and Italian variants of the word "address":</p>
               <eg role="parse-test"><![CDATA[
<entry word="address">
   <variant xml:lang="de">Adresse</variant>
   <variant xml:lang="it">indirizzo</variant>
</entry>
]]></eg>
               <p>Suppose further that the variable <code>$e</code> is bound to the following element:</p>
               <eg role="parse-test"
                  ><![CDATA[<address>123 Roosevelt Ave. Flushing, NY 11368</address>]]></eg>
               <p>Then the following expression generates a new element in which the name of <code>$e</code> has been translated into Italian and the content of <code>$e</code> (including its attributes, if any) has been preserved. The first enclosed expression after the <code>element</code> keyword generates the name of the element, and the second enclosed
expression generates the content and attributes:</p>
               <eg role="parse-test"><![CDATA[
  element
    {$dict/entry[@word=name($e)]/variant[@xml:lang="it"]}
    {$e/@*, $e/node()}]]></eg>
               <p>The result of this expression is as follows:</p>
               <eg role="parse-test"
                  ><![CDATA[<indirizzo>123 Roosevelt Ave. Flushing, NY 11368</indirizzo>]]></eg>
               <note>
                  <p>As in the previous example, if the <termref def="dt-static-typing-feature"
                        >Static Typing Feature</termref> is in effect, the enclosed expression that computes the element name in the above computed element constructor must be wrapped in a call to the <code>fn:exactly-one</code> function in order to avoid a static type error.</p>
               </note>
               <p>Additional examples of computed element constructors can be found
   in <specref
                     ref="id-recursive-transformations"/>.</p>
            </div4>

            <div4 id="id-computedAttributes">
               <head>Computed Attribute Constructors</head>
               <scrap>
                  <head/>
                  <prodrecap id="CompAttrConstructor" ref="CompAttrConstructor"/>
                  <prodrecap ref="EQName"/>
                  <prodrecap ref="EnclosedExpr"/>
               </scrap>

               <p>A computed attribute constructor creates a new attribute node,
   with its own node identity.</p>

               <p>Attributes have no default namespace. The rules that expand attribute names create an  <termref
                     def="dt-implementation-dependent"
                  >implementation-dependent</termref> prefix if an attribute name has a namespace URI but no prefix is provided.</p>

               <p>If the keyword <code>attribute</code> is followed by an EQName, it is expanded to an  <termref
                     def="dt-expanded-qname">expanded QName</termref> as follows:</p>
               <ulist>
                  <item>
                     <p>If the EQName has a BracedURILiteral it is expanded using the specified URI to create an <termref
                           def="dt-expanded-qname"
                           >expanded QName</termref>; the name of the attribute is constructed using the namespace URI and local name of the expanded QName and an <termref
                           def="dt-implementation-dependent"
                        >implementation-dependent</termref> prefix.</p>
                  </item>
                  <item>
                     <p>If the EQName is a <termref def="dt-qname"
                           >lexical QName</termref> with a namespace prefix it is expanded using the <termref
                           def="dt-static-namespaces">statically known namespaces</termref>.</p>
                  </item>
                  <item>
                     <p>If the EQName is a  <termref def="dt-qname"
                        >lexical QName</termref> without a prefix, the expanded QName is in no namespace.</p>
                  </item>
               </ulist>

               <p>The resulting <termref def="dt-expanded-qname"
                     >expanded QName</termref> (including its
   prefix) is used as the <code>node-name</code> property of the
   constructed attribute node. If expansion of the QName is not
   successful, a <termref
                     def="dt-static-error">static error</termref>
   is raised <errorref code="0081"
                     class="ST"/>.</p>

               <p>If the keyword <code>attribute</code> is followed by a <termref
                     def="dt-name-expression"
                  >name expression</termref>, the name
   expression is processed as follows:</p>

               <olist>


                  <item>
                     <p>
                        <termref def="dt-atomization"
                           >Atomization</termref> is
     applied to the result of the <termref
                           def="dt-name-expression"
                           >name expression</termref>. If the result
     of <termref
                           def="dt-atomization"
                           >atomization</termref> is not a
     single atomic value of type <code>xs:QName</code>,
     <code>xs:string</code>, or <code>xs:untypedAtomic</code>, a
     <termref
                           def="dt-type-error">type error</termref> is raised
     <errorref
                           class="TY" code="0004"/>.</p>
                  </item>



                  <item>
                     <p>If the atomized value of the <termref def="dt-name-expression"
                           >name expression</termref> is of type
   <code>xs:QName</code>:</p>
                     <olist>
                        <item>
                           <p>If the <termref def="dt-expanded-qname"
                                 >expanded QName</termref> returned by the atomized name expression has a namespace URI but has no prefix, it is given an <termref
                                 def="dt-implementation-dependent"
                                 >implementation-dependent</termref> prefix.</p>
                        </item>

                        <item>
                           <p>The resulting <termref def="dt-expanded-qname"
                                 >expanded QName</termref> (including its prefix) is used as the <code>node-name</code> property of the constructed
attribute node.</p>
                        </item>
                     </olist>
                  </item>


                  <item>
                     <p>If the atomized value of the <termref def="dt-name-expression"
                        >name expression</termref> is of type <code>xs:string</code> or <code>xs:untypedAtomic</code>, 
                        that value is converted to an <termref def="dt-expanded-qname"
                           >expanded QName</termref> <phrase diff="add" at="A">as follows:</phrase></p> 
                     
                     
                     <olist>
                        <item><p>Leading and trailing whitespace is removed.</p></item>
                        <item><p>If the value is an unprefixed <code>NCName</code>, it is treated as a local name 
                           in no namespace.</p></item>
                        <item><p>If the value is a lexical QName with a prefix, that prefix is <termref
                           def="dt-resolve-relative-uri">resolved to a namespace URI</termref> using the <termref
                              def="dt-static-namespaces">statically known namespaces</termref>.</p></item>
                        <item><p>If the value is a URI-qualified name (<code>Q{uri}local</code>), it
                           is converted to an <termref def="dt-expanded-qname"/> with the supplied namespace URI and
                           local name, and with an <termref def="dt-implementation-dependent"/> prefix.</p></item>
                     </olist>
                     <note diff="add" at="A"><p>This was under-specified in XQuery 3.1.</p></note>
                     
                     <p>The resulting <termref def="dt-expanded-qname">expanded
                        QName</termref> (including its prefix) is used as the
                        <code>node-name</code> property of the constructed attribute. If
                        conversion of the atomized <termref
                           def="dt-name-expression">name
                           expression</termref> to an <termref
                              def="dt-expanded-qname"
                              >expanded QName</termref> is not
                        successful, a <termref
                           def="dt-dynamic-error">dynamic
                           error</termref> is raised <errorref
                              class="DY" code="0074"/>.</p>
                  </item>

               </olist>

               <!--	<change diff="chg" at="XQ.E19"> -->
               <p>A <termref def="dt-dynamic-error"
                     >dynamic error</termref> is raised
             <errorref class="DY"
                     code="0044"
                  /> if the node-name of the constructed
             attribute node has any of the following properties:
          </p>
               <ulist>
                  <item>
                     <p>Its namespace prefix is <code>xmlns</code>.
             </p>
                  </item>
                  <item>
                     <p>It has no namespace prefix and its local name is
                <code>xmlns</code>.
             </p>
                  </item>
                  <item>
                     <p>Its namespace URI is <code>http://www.w3.org/2000/xmlns/</code>.
             </p>
                  </item>
                  <item>
                     <p>Its namespace prefix is <code>xml</code> and its namespace
                URI is not <code>http://www.w3.org/XML/1998/namespace</code>.
             </p>
                  </item>
                  <item>
                     <p>Its namespace prefix is other than <code>xml</code> and its
                namespace URI is <code>http://www.w3.org/XML/1998/namespace</code>.
             </p>
                  </item>
               </ulist>
               <!--	</change> -->

               <p>The <termref def="dt-content-expression"
                  >content
   expression</termref> of a computed attribute constructor is
   processed as follows:</p>



               <olist>


                  <item>
                     <p>
                        <termref def="dt-atomization"
                           >Atomization</termref> is
     applied to the result of the <termref
                           def="dt-content-expression"
                           >content expression</termref>,
     converting it to a sequence of atomic values. (If the <termref
                           def="dt-content-expression"
                        >content expression</termref> is
     absent, the result of this step is an empty
     sequence.)</p>

                  </item>



                  <item>
                     <p>If the result of atomization is an empty sequence, the
     value of the attribute is the zero-length string. Otherwise, each
     atomic value in the atomized sequence is cast into a
     string.</p>
                  </item>



                  <item>
                     <p>The individual strings resulting from the previous step
     are merged into a single string by concatenating them with a
     single space character between each pair. The resulting string
     becomes the <code>string-value</code> property of the new
     attribute node. The <termref
                           def="dt-type-annotation"
                           >type
     annotation</termref> (<code>type-name</code> property) of the new
     attribute node is <code>xs:untypedAtomic</code>. The
     <code>typed-value</code> property of the attribute node is the
     same as its <code>string-value</code>, as an instance of
     <code>xs:untypedAtomic</code>.</p>
                  </item>



                  <item>
                     <p>The <code>parent</code> property of the attribute node
     is set to empty.</p>
                  </item>



                  <item>
                     <p>If the attribute name is <code>xml:id</code>, then
     <code>xml:id</code> processing is performed as defined in <bibref
                           ref="XMLID"
                           />. This ensures that the attribute node has the type
     <code>xs:ID</code> and that its value is properly normalized. If
     an error is encountered during <code>xml:id</code> processing, an
     implementation may raise a <termref
                           def="dt-dynamic-error">dynamic error</termref>
                        <errorref class="DY" code="0091"/>.</p>
                  </item>



                  <item>
                     <p>If the attribute name is <code>xml:id</code>, the
     <code>is-id</code> property of the resulting attribute node is
     set to <code>true</code>; otherwise the <code>is-id</code>
     property is set to <code>false</code>. The <code>is-idrefs</code>
     property of the attribute node is unconditionally set to
     <code>false</code>.</p>
                  </item>



                  <item>
                     <p>If the attribute name is <code>xml:space</code> and the
     attribute value is other than <code>preserve</code> or
     <code>default</code>, a <termref
                           def="dt-dynamic-error">dynamic error</termref>  may be raised <errorref
                           code="0092" class="DY"/>.</p>
                  </item>
               </olist>
               <ulist>



                  <item>
                     <p>Example:</p>

                     <eg role="parse-test"><![CDATA[attribute size {4 + 3}]]></eg>

                     <p>The <termref def="dt-string-value"
                           >string
     value</termref> of the <code>size</code> attribute is
     "<code>7</code>" and its type is
     <code>xs:untypedAtomic</code>.</p>
                  </item>



                  <item>
                     <p>Example:</p>

                     <eg role="parse-test"><![CDATA[
attribute
   { if ($sex = "M") then "husband" else "wife" }
   { &lt;a&gt;Hello&lt;/a&gt;, 1 to 3, &lt;b&gt;Goodbye&lt;/b&gt; }
]]></eg>

                     <p>The name of the constructed attribute is
     either <code>husband</code> or
     <code>wife</code>. Its <termref
                           def="dt-string-value"
                           >string
     value</termref> is "<code>Hello 1 2 3
     Goodbye</code>".</p>
                  </item>
               </ulist>
            </div4>


            <div4 id="id-documentConstructors">



               <head>Document Node Constructors</head>

               <scrap>
                  <head/>
                  <prodrecap id="CompDocConstructor" ref="CompDocConstructor"/>
                  <prodrecap ref="EnclosedExpr"/>
               </scrap>

               <p>All document node constructors are computed constructors. The result of a document node constructor is a new document node, with its own node identity.</p>
               <p>A document node constructor is useful when the result of a query is to be a document in its own right. The following example illustrates a query that returns an XML document containing a root element named <code>author-list</code>:</p>

               <eg role="parse-test"><![CDATA[document
  {
      &lt;author-list&gt;
         {fn:doc("bib.xml")/bib/book/author}
      &lt;/author-list&gt;
  }]]></eg>

               <p>The <termref def="dt-content-expression"
                     >content expression</termref> of a document node constructor is processed in exactly the same way as an enclosed expression in the content of a <termref
                     def="dt-direct-elem-const"
                     >direct element constructor</termref>, as described in Step 1e of <specref
                     ref="id-content"
                     />. The result of processing the content expression is a sequence of nodes called the <term>content sequence</term>. Processing of the document node constructor then proceeds as follows:</p>

               <olist>

                  <item>
                     <p>If the content sequence contains a document node, the document node is replaced in the content sequence by its children.</p>
                  </item>
                  <item>
                     <p>Adjacent text nodes in the content sequence are merged into a single text node by concatenating their contents, with no intervening blanks. After concatenation, any text node whose content is a zero-length string is deleted from the content sequence.</p>
                  </item>



                  <item>
                     <p> If the content sequence contains an attribute node, a
<termref
                           def="dt-type-error">type error</termref> is raised <errorref class="TY"
                           code="0004"/>.</p>
                  </item>



                  <item>
                     <p> If the content sequence contains a namespace node, a
<termref
                           def="dt-type-error">type error</termref> is raised <errorref class="TY"
                           code="0004"/>.</p>
                  </item>




                  <item>
                     <p>The properties of the newly constructed document node are determined as follows:</p>

                     <olist>

                        <item>
                           <p>
                              <code>base-uri</code> is
    set to the <termref
                                 def="dt-static-base-uri">Static Base URI</termref>.</p>
                        </item>

                        <item>
                           <p>
                              <code>children</code> consist of all the element, text, comment, and processing
   instruction nodes in the content sequence. Note that the <code>parent</code> property of each of these nodes has been set to the newly constructed document node.</p>
                        </item>

                        <item>
                           <p>The <code>unparsed-entities</code> and <code>document-uri</code> properties are empty.</p>
                        </item>

                        <item>
                           <p>The <code>string-value</code> property is equal to the concatenated contents of the text-node descendants in document order.</p>
                        </item>

                        <item>
                           <p>The <code>typed-value</code> property is equal to the <code>string-value</code> property, as an instance of <code>xs:untypedAtomic</code>.</p>
                        </item>
                     </olist>
                  </item>
               </olist>
               <p>No validation is performed on the constructed document node. The <bibref ref="XML"
                  /> rules that govern the structure of an XML document (for example, the document node must have exactly one child that is an element node)  are not enforced by the XQuery document node constructor.</p>
            </div4>
            <div4 id="id-textConstructors">
               <head>Text Node Constructors</head>

               <scrap>
                  <head/>
                  <prodrecap id="CompTextConstructor" ref="CompTextConstructor"/>
                  <prodrecap ref="EnclosedExpr"/>
               </scrap>

               <p>All text node constructors are computed constructors. The result of a text node constructor is a new text node, with its own node identity.</p>
               <p>The <termref def="dt-content-expression"
                  >content expression</termref> of a text node constructor is processed as follows:</p>

               <olist>

                  <item>
                     <p>
                        <termref def="dt-atomization"
                           >Atomization</termref> is applied to the value of the <termref
                           def="dt-content-expression"
                        >content expression</termref>, converting it to a sequence of atomic values.</p>
                  </item>

                  <item>
                     <p>If the result of atomization is an empty sequence, no text node is constructed. Otherwise, each atomic value in the atomized sequence is cast into a string.</p>
                  </item>

                  <item>
                     <p>The individual strings resulting from the previous step are merged into a single string by concatenating them with a single space character between each pair. The resulting string becomes the <code>content</code> property of the constructed text node.</p>
                  </item>
               </olist>
               <p>The <code>parent</code> property of the constructed text node is set to empty.</p>
               <note>
                  <p>It is possible for a text node constructor to construct a text node containing a zero-length string. However, if used in the content of a constructed element or document node, such a text node will be deleted or merged with another text node.</p>
               </note>
               <p>The following example illustrates a text node constructor:</p>
               <eg role="parse-test"><![CDATA[text {"Hello"}]]></eg>
            </div4>

            <div4 id="id-computed-pis">
               <head>Computed Processing Instruction Constructors</head>

               <scrap>
                  <head/>
                  <prodrecap id="CompPIConstructor" ref="CompPIConstructor"/>
                  <prodrecap ref="EnclosedExpr"/>
               </scrap>

               <p>A computed processing instruction constructor (<nt def="CompPIConstructor"
                     >CompPIConstructor</nt>) constructs a new processing instruction node with its own node identity.
   </p>
               <p>If the keyword <code>processing-instruction</code> is followed by an NCName, that NCName is used as the <code>target</code> property of the constructed  node. If the keyword <code>processing-instruction</code> is followed by a <termref
                     def="dt-name-expression"
                  >name expression</termref>, the name expression is processed as follows:</p>

               <olist>

                  <item>
                     <p>
                        <termref def="dt-atomization"
                           >Atomization</termref> is applied to the value of the <termref
                           def="dt-name-expression"
                           >name expression</termref>. If the result of <termref
                           def="dt-atomization"
                           >atomization</termref> is not a single atomic value of type <code>xs:NCName</code>, <code>xs:string</code>, or <code>xs:untypedAtomic</code>, a <termref
                           def="dt-type-error">type
   error</termref> is raised <errorref
                           class="TY" code="0004"/>.</p>
                  </item>

                  <item>
                     <p>If the atomized value of the <termref def="dt-name-expression"
                           >name expression</termref> is of type <code>xs:string</code> or <code>xs:untypedAtomic</code>, that value is cast to the type <code>xs:NCName</code>. If the value cannot be cast to <code>xs:NCName</code>, a <termref
                           def="dt-dynamic-error">dynamic error</termref> is raised <errorref
                           class="DY" code="0041"/>.</p>
                  </item>

                  <item>
                     <p>The resulting NCName is then used as the <code>target</code> property of the newly constructed processing instruction node. However, a <termref
                           def="dt-dynamic-error"
                           >dynamic error</termref>   is raised if the  NCName is equal to "<code>XML</code>" (in any combination of upper and lower case) <errorref
                           class="DY" code="0064"/>.</p>
                  </item>
               </olist>
               <p>The
   <termref def="dt-content-expression"
                  >content expression</termref> of a computed processing instruction constructor
   is processed as follows:</p>

               <olist>

                  <item>
                     <p>
                        <termref def="dt-atomization"
                           >Atomization</termref> is applied to the value of the <termref
                           def="dt-content-expression"
                           >content expression</termref>, converting it to a sequence of atomic values. (If the <termref
                           def="dt-content-expression"
                        >content expression</termref> is absent, the result of this step is an empty sequence.)</p>
                  </item>

                  <item>
                     <p>If the result of atomization is an empty sequence, it is replaced by a zero-length string. Otherwise, each atomic value in the atomized sequence is cast into a string. If any of the resulting strings contains the string "<code>?&gt;</code>", a <termref
                           def="dt-dynamic-error">dynamic error</termref>
                        <errorref class="DY" code="0026"/> is raised.</p>
                  </item>

                  <item>
                     <p>The individual strings resulting from the previous step are merged into a single string by concatenating them with a single space character between each pair. Leading whitespace is removed from the resulting string. The resulting string then becomes the <code>content</code> property of the constructed processing instruction node.</p>
                  </item>
               </olist>
               <p>The remaining properties of the new processing instruction node are determined as follows:</p>

               <olist>

                  <item>
                     <p>The <code>parent</code> property is empty.</p>
                  </item>

                  <item>
                     <p>The <code>base-uri</code> property is empty.</p>
                  </item>
               </olist>
               <p>The following example illustrates a computed processing instruction constructor:</p>
               <eg role="parse-test"><![CDATA[let $target := "audio-output",
    $content := "beep"
return processing-instruction {$target} {$content}]]></eg>
               <p>The processing instruction node constructed by this example might be serialized as follows:</p>
               <eg><![CDATA[&lt;?audio-output beep?&gt;]]></eg>
            </div4>

            <div4 id="id-computed-comments">
               <head>Computed Comment Constructors</head>

               <scrap>
                  <head/>
                  <prodrecap id="CompCommentConstructor" ref="CompCommentConstructor"/>
                  <prodrecap ref="EnclosedExpr"/>
               </scrap>

               <p>A computed comment constructor (<nt def="CompCommentConstructor"
                     >CompCommentConstructor</nt>) constructs a new comment node with its own node identity.
   The <termref
                     def="dt-content-expression"
                  >content expression</termref> of a computed comment constructor is processed as follows:</p>

               <olist>

                  <item>
                     <p>
                        <termref def="dt-atomization"
                           >Atomization</termref> is applied to the value of the <termref
                           def="dt-content-expression"
                        >content expression</termref>, converting it to a sequence of atomic values.</p>
                  </item>

                  <item>
                     <p>If the result of atomization is an empty sequence, it is replaced by a zero-length string. Otherwise, each atomic value in the atomized sequence is cast into a string.</p>
                  </item>

                  <item>
                     <p>The individual strings resulting from the previous step are merged into a single string by concatenating them with a single space character between each pair. The resulting string becomes the <code>content</code> property of the constructed comment node.</p>
                  </item>

                  <item>
                     <p>It is a <termref def="dt-dynamic-error">dynamic
 error</termref>
                        <errorref class="DY" code="0072"/> if the result of the <termref
                           def="dt-content-expression"
                        >content expression</termref> of a computed comment constructor contains two adjacent hyphens or ends with a hyphen.</p>
                  </item>
               </olist>
               <p>The <code>parent</code> property of the constructed comment node is set to empty.</p>
               <p>The following example illustrates a computed comment constructor:</p>
               <eg role="parse-test"><![CDATA[let $homebase := "Houston"
return comment {fn:concat($homebase, ", we have a problem.")}]]></eg>
               <p>The comment node constructed by this example might be serialized as follows:</p>
               <eg><![CDATA[&lt;!--Houston, we have a problem.--&gt;]]></eg>
            </div4>



            <div4 id="id-computed-namespaces">
               <head>Computed Namespace Constructors</head>
               <scrap>
                  <head/>
                  <prodrecap id="CompNamespaceConstructor" ref="CompNamespaceConstructor"/>
                  <prodrecap ref="Prefix"/>
                  <prodrecap id="EnclosedPrefixExpr" ref="EnclosedPrefixExpr"/>
                  <prodrecap id="EnclosedURIExpr" ref="EnclosedURIExpr"/>
                  <prodrecap ref="EnclosedExpr"/>
               </scrap>


               <p>A computed namespace constructor creates a new namespace node,
   with its own node identity. The parent of the newly created
   namespace node is empty.</p>

               <p>If the constructor specifies a <code>Prefix</code>, it is used
    as the prefix for the namespace node.</p>

               <p>If the constructor specifies a <code>PrefixExpr</code>, the
    prefix expression is evaluated as follows:</p>

               <olist>

                  <item>
                     <p>
                        <termref def="dt-atomization"
                           >Atomization</termref> is
  applied to the result of the <code>PrefixExpr</code>.</p>
                  </item>

                  <item>
                     <p>
  If the result of <termref def="dt-atomization"
                           >atomization</termref>
    is an empty sequence
    or a single atomic value of type <code>xs:string</code> or <code>xs:untypedAtomic</code>,
  then the following rules are applied in order:</p>

                     <olist>
                        <item>
                           <p>If the result is castable to <code>xs:NCName</code>, then it is used as the local name
     of the newly constructed namespace node. (The local name of a namespace node
     represents the prefix part of the namespace binding.)</p>
                        </item>

                        <item>
                           <p>If the result is the empty sequence
                  or a zero-length <code>xs:string</code>
                  or <code>xs:untypedAtomic</code> value,
           the new namespace node has no name (such a namespace node represents a binding for the default namespace).</p>
                        </item>

                        <item>
                           <p>Otherwise, a <termref def="dt-dynamic-error"
                                 >dynamic error</termref>  is raised  <errorref class="DY"
                                 code="0074"/>.</p>
                        </item>

                     </olist>
                  </item>

                  <item>
                     <p>If the result of atomization is not an empty sequence
                           or a single atomic value of type <code>xs:string</code> or <code>xs:untypedAtomic</code>,
  a type error is raised <errorref
                           class="TY" code="0004"/>.</p>
                  </item>
               </olist>

               <p>The <termref def="dt-content-expression"
                     >content expression</termref> is evaluated, and the result is cast
    to <code>xs:anyURI</code> to create the <code>URI</code> property
    for the newly created node.  
    An implementation may raise a <termref
                     def="dt-dynamic-error">dynamic error</termref>
                  <errorref class="DY" code="0074"
                     /> if the <code>URIExpr</code> of a computed namespace constructor is not a valid instance of <code>xs:anyURI</code>.</p>

               <p>An error <errorref class="DY" code="0101"
                  /> is raised if a
    computed namespace constructor attempts to do any of the
    following:</p>

               <ulist>
                  <item>
                     <p>Bind the prefix <code>xml</code> to some namespace URI
      other than <code>http://www.w3.org/XML/1998/namespace</code>.
      </p>
                  </item>
                  <item>
                     <p>Bind a prefix other than <code>xml</code> to the namespace
      URI <code>http://www.w3.org/XML/1998/namespace</code>.
      </p>
                  </item>
                  <item>
                     <p>Bind the prefix <code>xmlns</code> to any namespace URI.
      </p>
                  </item>
                  <item>
                     <p>Bind a prefix to the namespace
      URI <code>http://www.w3.org/2000/xmlns/</code>.
      </p>
                  </item>
                  <item>
                     <p>Bind any prefix (including the empty prefix) to a zero-length namespace URI.</p>
                  </item>
               </ulist>

               <p>By itself, a computed namespace constructor has no effect on
    in-scope namespaces, but if an element constructor's content
    sequence contains a namespace node, the namespace binding it
    represents is added to the element's <termref
                     def="dt-in-scope-namespaces">in-scope namespaces</termref>.</p>

               <p>A computed namespace constructor has no effect on the statically
    known namespaces.</p>

               <note>
                  <p>The newly created namespace node has all properties defined
      for a namespace node in the data model.  As defined in the
      data model, the name of the node is the prefix, the string value
      of the node is the URI, the
      relative order of nodes that share no common ancestor is
      implementation dependent, and the relative order of namespace
      nodes that share a parent is also implementation
      dependent.</p>
               </note>

               <p>Examples:</p>


               <ulist>


                  <item>
                     <p>A computed namespace constructor with a prefix:</p>
                     <eg role="parse-test"><![CDATA[namespace a {"http://a.example.com" }]]></eg>
                  </item>


                  <item>
                     <p>A computed namespace constructor with a prefix expression:</p>
                     <eg role="parse-test"
                        ><![CDATA[namespace {"a"} {"http://a.example.com" }]]></eg>
                  </item>


                  <item>
                     <p>A computed namespace constructor with an empty prefix:</p>
                     <eg role="parse-test"
                        ><![CDATA[namespace { "" } {"http://a.example.com" }]]></eg>
                  </item>
               </ulist>

               <p>Computed namespace constructors are generally used to add to the
in-scope namespaces of elements created with element constructors:</p>
               <eg role="parse-test"><![CDATA[
<age xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> {
  namespace xs {"http://www.w3.org/2001/XMLSchema"},
  attribute xsi:type {"xs:integer"},
  23
}</age>
]]></eg>

               <p>In the above example, note that the <code>xsi</code> namespace binding is created for the element because it is used in an attribute name. The attribute's content is simply character data, and has no effect on namespace bindings. The computed namespace constructor ensures that the <code>xs</code> binding is created.</p>

               <p>Computed namespace constructors have no effect on the statically known
namespaces. If the prefix a is not already defined in the statically
known namespaces, the following expression results in a static error
<errorref
                     class="ST" code="0081"/>.</p>
               <eg role="parse-test"><![CDATA[
<a:form>
 {
  namespace a { "http://a.example.com" }
 }
</a:form>
]]></eg>


            </div4>


         </div3>

         <div3 id="id-ns-nodes-on-elements">
            <head>In-scope Namespaces of a Constructed Element</head>

            <p>An element node constructed by a direct or computed element
constructor has an <termref
                  def="dt-in-scope-namespaces"
                  >in-scope
namespaces</termref> property that consists of a set of <termref
                  def="dt-in-scope-namespaces"
                  >namespace bindings</termref>.  The
in-scope namespaces of an element node may affect the way the node is
serialized (see <specref
                  ref="id-serialization"
                  />), and may also
affect the behavior of certain functions that operate on nodes, such
as <code>fn:name</code>. Note the difference between <termref
                  def="dt-in-scope-namespaces"
                  >in-scope namespaces</termref>, which is a
dynamic property of an element node, and <termref
                  def="dt-static-namespaces"
               >statically known namespaces</termref>,
which is a static property of an expression.  Also note that one of
the namespace bindings in the in-scope namespaces may have no prefix
(denoting the default namespace for the given element). The in-scope
namespaces of a constructed element node consist of the following
namespace bindings:</p>


            <ulist>


               <item>
                  <p>A namespace binding is created for each namespace declared
  in the current element constructor by a <termref
                        def="dt-namespace-decl-attr"
                     >namespace declaration
  attribute</termref>.</p>
               </item>



               <item>
                  <p>A namespace binding is created for each namespace node in
  the content sequence of the current element constructor.</p>
               </item>



               <item>
                  <p>A namespace binding is created for each namespace that is
  declared in a <termref
                        def="dt-namespace-decl-attr"
                        >namespace
  declaration attribute</termref> of an enclosing <termref
                        def="dt-direct-elem-const"
                     >direct element constructor</termref> and
  not overridden by the current element constructor or an intermediate
  constructor.</p>
               </item>



               <item>
                  <p>A namespace binding is always created to bind the prefix
  <code>xml</code> to the namespace URI
  <code>http://www.w3.org/XML/1998/namespace</code>.</p>
               </item>



               <item>
                  <p>For each prefix used in the name of the
  constructed element or in the names of its attributes, a namespace
  binding must exist.

  If a namespace binding does not already exist for one of these
  prefixes, a new namespace binding is created for it.

  If this would result in a conflict, because it would require two
  different bindings of the same prefix, then the prefix used in the
  node name is changed to an arbitrary <termref
                        def="dt-implementation-dependent"
                     >implementation-dependent</termref>
  prefix that does not cause such a conflict, and a namespace binding
  is created for this new prefix.

  If there is an in-scope default namespace, then a binding is created
  between the empty prefix and that URI.</p>
               </item>
            </ulist>


            <note>
               <p>
                  <termref def="dt-copy-namespaces-mode"
                  >Copy-namespaces
mode</termref> does not affect the namespace bindings of a newly
constructed element node. It applies only to existing nodes that are
copied by a constructor expression.</p>
            </note>

            <p>In an element constructor, if two or more namespace bindings in the
in-scope bindings would have the same prefix, then an error is raised
if they have different URIs <errorref
                  class="DY" code="0102"
                  />; if they
would have the same prefix and URI, duplicate bindings are
ignored. 
If the name of an element in an element constructor is in no namespace,
creating a default namespace for that element using a computed namespace constructor is an error <errorref
                  class="DY" code="0102"
               />. 
For instance, the following computed constructor raises an error because the element's name is not in a namespace, but a default namespace is defined.</p>

            <eg role="parse-test"><![CDATA[element e { namespace {''} {'u'} }]]></eg>

            <p>The following query illustrates the in-scope namespaces of a constructed element:</p>

            <eg role="parse-test"><![CDATA[declare namespace p="http://example.com/ns/p";
declare namespace q="http://example.com/ns/q";
declare namespace f="http://example.com/ns/f";

&lt;p:a q:b="{f:func(2)}" xmlns:r="http://example.com/ns/r"/&gt;
]]></eg>
            <p>The <termref def="dt-in-scope-namespaces"
                  >in-scope namespaces</termref> of the resulting <code>p:a</code> element consists of the following namespace bindings:</p>
            <ulist>

               <item>
                  <p>
                     <code>p = "http://example.com/ns/p"</code>
                  </p>
               </item>

               <item>
                  <p>
                     <code>q = "http://example.com/ns/q"</code>
                  </p>
               </item>

               <item>
                  <p>
                     <code>r = "http://example.com/ns/r"</code>
                  </p>
               </item>


               <item>
                  <p>
                     <code>xml = "http://www.w3.org/XML/1998/namespace"</code>
                  </p>
               </item>
            </ulist>

            <p>The namespace bindings for <code>p</code> and <code>q</code> are added to the result element because their respective namespaces
are used in the names of the element and its attributes. The namespace binding <code>r="http://example.com/ns/r"</code> is added to the in-scope namespaces of the constructed
element because it is defined by a <termref
                  def="dt-namespace-decl-attr"
               >namespace declaration attribute</termref>, even though it is not used in a name.</p>

            <p>No  namespace binding corresponding to <code>f="http://example.com/ns/f"</code> is created, because the namespace prefix <code>f</code> appears only in the query prolog and is not used in an element or attribute name of the constructed node. This namespace binding does not appear in the query result, even though it is present in the <termref
                  def="dt-static-namespaces"
               >statically known namespaces</termref> and is available for use during processing of the query.</p>

            <p>Note that the following constructed element, if nested within a <code>validate</code> expression, cannot be validated:
</p>
            <eg role="parse-test"><![CDATA[&lt;p xsi:type="xs:integer"&gt;3&lt;/p&gt;]]></eg>

            <p>The constructed element will have namespace bindings for the prefixes <code>xsi</code> (because it is used in a name) and <code>xml</code> (because it is defined for every constructed element node). During validation of the constructed element, the validator will be unable to interpret the namespace prefix <code>xs</code> because it is has no namespace binding. Validation of this constructed element could be made possible by providing a <termref
                  def="dt-namespace-decl-attr"
               >namespace declaration attribute</termref>, as in the following example:</p>

            <eg role="parse-test"><![CDATA[&lt;p xmlns:xs="http://www.w3.org/2001/XMLSchema"
   xsi:type="xs:integer"&gt;3&lt;/p&gt;]]></eg>
         </div3>
      </div2>



      <div2 role="xpath" id="id-for-expressions">
         <head>For Expressions</head>

         <p>XPath provides an iteration facility called a <term>for expression</term>. 
         <phrase diff="add" at="A">It can be used to iterate over the items of a sequence, or the
         members of an array. In this section the term <term>collection</term> is used to mean
         the sequence or array, and the term <term>component</term> is used to refer to the
         items of the sequence or the members of the array.</phrase></p>

         <scrap>
            <head/>
            <prodrecap id="ForExpr" ref="ForExpr"/>
            <prodrecap id="SimpleForClause" ref="SimpleForClause"/>
            <prodrecap id="SimpleForBinding" ref="SimpleForBinding"/>
         </scrap>

         <p>A <code>for</code> expression is evaluated as follows:</p>
      
         <olist>

            <item>
               <p>If the <code>for</code> expression uses multiple variables, it is first expanded to a set of nested <code>for</code> expressions, each of which uses only one variable.</p>
               <p>For example, the expression
               <code role="parse-test">for $x in X, $y in Y return $x + $y</code> is expanded to
               <code role="parse-test">for $x in X return for $y in Y return $x + $y</code>.</p>
               <p diff="add" at="A">Similarly, the expression 
                  <code role="parse-test">for member $x in X, member $y in Y return $x + $y</code> is expanded to
                  <code role="parse-test">for member $x in X return for member $y in Y return $x + $y</code>.</p>
            </item>
            
            <item>
               <p>In a single-variable <code>for</code> expression, 
                  the variable is called the <term>range variable</term>, 
                  the value of the expression that follows the <code>in</code> keyword is called the <term>binding collection</term>, 
                  and the expression that follows the <code>return</code> keyword is called the <term>return expression</term>. 
               </p>  
            </item>
            <item>
               <p><phrase diff="add" at="A">When the <code>member</code> keyword is absent</phrase>,
                  the result of the single-variable <code>for</code> expression is obtained by evaluating the <code>return</code> expression once 
                  for each item in the binding collection, with the range variable bound to that item. The resulting sequences 
                  are concatenated (as if by the <termref def="dt-comma-operator"
                  >comma operator</termref>) in the order of the items in the binding collection from which they were derived.
               </p>
            </item>
            <item diff="add" at="A">
               <p>When the <code>member</code> keyword is present,
                  the value of the <term>binding collection</term> must be a single array.
                  The result of the single-variable <code>for member</code> expression is obtained by evaluating the <code>return</code> expression once 
                  for each member of that array, with the range variable bound to that member. The resulting sequences 
                  are concatenated (as if by the <termref def="dt-comma-operator"
                     >comma operator</termref>) in the order of the members of the binding collection from which they were derived.
               </p>
               <p>Note that the result is a sequence, not an array.</p>
            </item>
         </olist>
         <p role="xpath"
            >The following example illustrates the use of a <code>for</code> expression in restructuring an input document. The example is based on the following
input:</p>
         <eg><![CDATA[<bib>
  <book>
    <title>TCP/IP Illustrated</title>
    <author>Stevens</author>
    <publisher>Addison-Wesley</publisher>
  </book>
  <book>
    <title>Advanced Programming in the Unix Environment</title>
    <author>Stevens</author>
    <publisher>Addison-Wesley</publisher>
  </book>
  <book>
    <title>Data on the Web</title>
    <author>Abiteboul</author>
    <author>Buneman</author>
    <author>Suciu</author>
  </book>
</bib>]]></eg>



         <p>The following example transforms the input document into a list in
which each author's name appears only once, followed by a list of
titles of books written by that author. This example assumes that the
context item is the <code>bib</code> element in the input
document.</p>


         <eg role="parse-test">
            <phrase role="parse-test"
               >for $a in fn:distinct-values(book/author)
return ((book/author[. = $a])[1], book[author = $a]/title)</phrase>
         </eg>

         <p>The result of the above expression consists of the following
sequence of elements. The titles of books written by a given author
are listed after the name of the author.

The ordering of <code>author</code> elements in the result is <termref
               def="dt-implementation-dependent"
               >implementation-dependent</termref> due to the semantics of the <code>fn:distinct-values</code> function.</p>
         <eg><![CDATA[<author>Stevens</author>
<title>TCP/IP Illustrated</title>
<title>Advanced Programming in the Unix environment</title>
<author>Abiteboul</author>
<title>Data on the Web</title>
<author>Buneman</author>
<title>Data on the Web</title>
<author>Suciu</author>
<title>Data on the Web</title>]]></eg>
         <p>The following example illustrates a <code>for</code> expression containing more than one variable:</p>
         <eg role="parse-test">
            <phrase role="parse-test">for $i in (10, 20),
    $j in (1, 2)
return ($i + $j)</phrase>
         </eg>
         <p>The result of the above expression, expressed as a sequence of numbers, is as follows: <code>11, 12, 21, 22</code>
         </p>
         <p>The scope of a variable bound in a <code>for</code> expression comprises all subexpressions of the <code>for</code> expression
that appear after the variable binding. The scope does not
include the expression to which the variable is bound. The following example illustrates how a variable binding may reference another variable bound earlier in the same  <code>for</code> expression:</p>
         <eg role="parse-test">
            <phrase role="parse-test">for $x in $z, $y in f($x)
return g($x, $y)</phrase>
         </eg>

         <p diff="add" at="A">The following example illustrates processing of an array.</p>
         <eg diff="add" at="A">for member $map in parse-json('[{"x":1, "y":2}, {"x":10, "y":20}]') return $map!(?x+?y)</eg>
         <p diff="add" at="A">The result is the sequence <code>(3, 30)</code>.</p>
         
         <note>
            <p>The focus for evaluation of the <code>return</code> clause of a <code>for</code> expression
is the same as the focus for evaluation of the <code>for</code> expression itself. The
following example, which attempts to find the total value of a set of
order-items, is therefore incorrect:

</p>
            <eg role="error"><![CDATA[fn:sum(for $i in order-item return @price * @qty)]]></eg>
            <p>

Instead, the expression must be written to use the variable bound in the <code>for</code> clause:</p>
            <eg role="parse-test"
               ><![CDATA[fn:sum(for $i in order-item return $i/@price * $i/@qty)]]></eg>
         </note>
      </div2>

      <div2 id="id-let-expressions" role="xpath">
         <head>Let Expressions</head>

         <p>XPath allows a variable to be declared and bound to a value using a <term>let expression</term>.</p>

         <scrap>
            <head/>
            <prodrecap id="LetExpr" ref="LetExpr"/>
            <prodrecap id="SimpleLetClause" ref="SimpleLetClause"/>
            <prodrecap id="SimpleLetBinding" ref="SimpleLetBinding"/>
         </scrap>

         <p>A let expression is evaluated as follows:</p>

         <ulist>
            <item>
               <p>If the let expression uses multiple variables, it is first expanded to a
set of nested let expressions, each of which uses only one variable. For
example, the expression <code
                     role="parse-test"
                     >let $x := 4, $y := 3 return $x + $y</code> is expanded to
<code
                     role="parse-test">let $x := 4 return let $y := 3 return $x + $y</code>.</p>
            </item>

            <item>
               <p>In a single-variable let expression, the variable is called the range
variable, the value of the expression that follows the <code>:=</code> symbol is called
the binding sequence, and the expression that follows the return keyword is
called the return expression. The result of the let expression is obtained
by evaluating the return expression with the range variable bound to the
binding sequence. </p>
            </item>

         </ulist>

         <p>The scope of a variable bound in a let expression comprises all
subexpressions of the let expression that appear after the variable binding.
The scope does not include the expression to which the variable is bound.
The following example illustrates how a variable binding may reference
another variable bound earlier in the same let expression:</p>

         <eg role="parse-test"><![CDATA[
let $x := doc('a.xml')/*, $y := $x//*
return $y[@value gt $x/@min]
]]></eg>

      </div2>

      <div2 id="id-string-constructors" role="xquery">
         <head>String Constructors</head>

         <p>
            <termdef term="string constructor" id="dt-string-constructor"
                  >A
<term>String Constructor</term> creates a string from literal text and interpolated expressions.
</termdef>
         </p>

         <p>The syntax of a string constructor is convenient for generating
JSON, JavaScript, CSS, SPARQL, XQuery, XPath, or other languages that
use curly brackets, quotation marks, or other strings that are
delimiters in &language;.</p>

         <scrap>
            <head/>
            <prodrecap id="StringConstructor" ref="StringConstructor"/>
            <prodrecap id="StringConstructorContent" ref="StringConstructorContent"/>
            <prodrecap ref="StringConstructorChars" id="StringConstructorChars"/>
            <prodrecap id="StringConstructorInterpolation" ref="StringConstructorInterpolation"/>
         </scrap>

         <p>In a <nt def="StringConstructor">string constructor</nt>, adjacent
<nt
               def="StringConstructorChars"
               >string constructor characters</nt>
are treated as literal text. Line endings are processed as elsewhere
in XQuery; no other processing is performed on this text. 

To evaluate a string constructor, each sequence of adjacent string
constructor characters is converted to a string containing the same
characters, and each <nt
               def="StringConstructorInterpolation">string
constructor interpolation</nt>
            <code>$i</code> is evaluated, then
converted to a string using the expression <code
               role="parse-test"
               >string-join($i, ' ')</code>.  

A string constructor interpolation that does not contain an expression (<code>`{ }`</code>) is ignored. 

The strings
created from string constructor characters and the strings created
from string constructor interpolations are then concatenated, in
order.</p>

         <p>For instance, the following expression:</p>
         <eg role="parse-test"><![CDATA[for $s in ("one", "two", "red", "blue")
return ``[`{$s}` fish]``
]]></eg>
         <p>evaluates to the sequence  <code>("one fish", "two fish", "red fish", "blue fish")</code>.</p>

         <note>
            <p>Character entities are not expanded in string constructor
content.  Thus, <code>``[&amp;lt;]``</code> evaluates to the string
<code>"&amp;lt;"</code>, not the string
<code>"&lt;"</code>.</p>
         </note>


         <p>Interpolations can contain string constructors. For instance, consider the following expression:</p>

         <eg><![CDATA[``[`{ $i, ``[literal text]``, $j, ``[more literal text]`` }`]``]]></eg>

         <p>Assuming the values <code>$i := 1</code> and <code>$j := 2</code>, this evaluates to the string <code>"1 literal text 2 more literal text"</code>.</p>

         <p>The following examples are based on an example taken from the documentation of <bibref
               ref="Moustache"
            />, a JavaScript template library. Each function takes a map, containing values like these:</p>

         <eg><![CDATA[map {
  "name": "Chris",
  "value": 10000,
  "taxed_value": 10000 - (10000 * 0.4),
  "in_ca": true
}]]></eg>

         <p>This function creates a simple string.</p>

         <eg><![CDATA[declare function local:prize-message($a) as xs:string
{
``[Hello `{$a?name}`
You have just won `{$a?value}` dollars!
`{ 
   if ($a?in_ca) 
   then ``[Well, `{$a?taxed_value}` dollars, after taxes.]``
   else ""
}`]``
};]]></eg>

         <p>This is the output of the above function :</p>

         <eg><![CDATA[Hello Chris
You have just won 10000 dollars!
Well, 6000 dollars, after taxes.]]></eg>

         <p>This function creates a similar string in HTML syntax.</p>

         <eg><![CDATA[declare function local:prize-message($a) as xs:string
{
``[<div>
  <h1>Hello `{$a?name}`</h1>
  <p>You have just won `{$a?value}` dollars!</p>
    `{ 
      if ($a?in_ca) 
      then ``[  <p>Well, `{$a?taxed_value}` dollars, after taxes.</p> ]``
      else ""
    }`
</div>]``
};]]></eg>

         <p>This is the output of the above function :</p>

         <eg><![CDATA[&lt;div&gt;
  &lt;h1&gt;Hello Chris&lt;/h1&gt;
  &lt;p&gt;You have just won 10000 dollars!&lt;/p&gt;
  &lt;p&gt;Well, 6000 dollars, after taxes.&lt;/p&gt; 
&lt;/div&gt;]]></eg>

         <p>This function creates a similar string in JSON syntax.</p>

         <eg><![CDATA[
declare function local:prize-message($a) as xs:string
{
``[{ 
  "name" : `{ $a?name }`
  "value" : `{ $a?value }`
  `{
  if ($a?in_ca) 
  then 
  ``[, 
  "taxed_value" : `{ $a?taxed_value }`]``  
  else ""
  }`
}]`` 
};]]></eg>

         <p>This is the output of the above function :</p>

         <eg><![CDATA[{ 
  "name" : "Chris",
  "value" : 10000,
  "taxed_value" : 6000
}]]></eg>

      </div2>

      <div2 id="id-maps-and-arrays">
         <head>Maps and Arrays</head>

         <p>Most modern programming languages have support for collections of
key/value pairs, which may be called maps, dictionaries, associative
arrays, hash tables, keyed lists, or objects (these are not the same
thing as objects in object-oriented systems). In &language;, we call
these maps. Most modern programming languages also support ordered
lists of values, which may be called arrays, vectors, or sequences.
In &language;, we have both
sequences and arrays. Unlike sequences, an array is an
item, and can appear as an item in a sequence.</p>

         <p>In previous versions of the language, element structures and
sequences were the only complex data structures.  We are adding maps
and arrays to &language; in order to provide lightweight data
structures that are easier to optimize and less complex to use for
intermediate processing and to allow programs to easily combine XML
processing with JSON processing.</p>


         <note>
            <p>The &language; specification focuses on syntax provided for maps
  and arrays, especially constructors and lookup.</p>

            <p>Some of the functionality typically needed for maps and
  arrays is provided by functions defined in <xspecref
                  spec="FO31" ref="maps-and-arrays"
               />, including functions used to
  read JSON to create maps and arrays, serialize maps and arrays to
  JSON, combine maps to create a new map, remove map entries to create
  a new map, iterate over the keys of a map, convert an array to
  create a sequence, combine arrays to form a new array, and iterate
  over arrays in various ways.</p>
         </note>


         <div3 id="id-maps">
            <head>Maps</head>

            <p>
               <termdef term="map" id="dt-map"
                  >A <term>map</term> is a function
  that associates a set of keys with values, resulting in a collection
  of key / value pairs.</termdef>

               <termdef term="entry" id="dt-entry"
                     >Each key / value pair in a map
  is called an <term>entry</term>.</termdef>

               <termdef term="associated value" id="dt-associated-value"
                     >The value
  associated with a given key is called the <term>associated
  value</term> of the key.</termdef>
            </p>

            <div4 id="id-map-constructors">
               <head>Map Constructors</head>

               <p>A Map is created using a <nt def="MapConstructor">MapConstructor</nt>.</p>

               <scrap>
                  <head/>
                  <prodrecap id="MapConstructor" ref="MapConstructor"/>
                  <prodrecap id="MapConstructorEntry" ref="MapConstructorEntry"/>
                  <prodrecap id="MapKeyExpr" ref="MapKeyExpr"/>
                  <prodrecap id="MapValueExpr" ref="MapValueExpr"/>
               </scrap>


               <note>
                  <p>
    In some circumstances, it is necessary to include whitespace before or after the colon
    of a <nt
                        def="MapConstructorEntry"
                     >MapConstructorEntry</nt> to ensure that it is parsed as intended.
    </p>

                  <p>
    For instance, consider the expression <code>map{a:b}</code>.
    Although it matches the EBNF for MapConstructor
    (with <code>a</code> matching MapKeyExpr and <code>b</code> matching MapValueExpr),
    the "longest possible match" rule requires that <code>a:b</code> be parsed as a QName,
    which results in a syntax error.
    Changing the expression to <code>map{a :b}</code> or <code>map{a: b}</code>
    will prevent this, resulting in the intended parse.
    </p>

                  <p>Similarly, consider these three expressions:</p>
                  <eg><![CDATA[
    map{a:b:c}
    map{a:*:c}
    map{*:b:c}]]></eg>
                  <p>
    In each case, the expression matches the EBNF in two different ways,
    but the "longest possible match" rule forces the parse in which
    the MapKeyExpr is <code>a:b</code>, <code>a:*</code>, or <code>*:b</code> (respectively)
    and the MapValueExpr is <code>c</code>.
    To achieve the alternative parse
    (in which the MapKeyExpr is merely <code>a</code> or <code>*</code>),
    insert whitespace before and/or after the first colon.
    </p>

                  <p>See <specref ref="lexical-structure"/>.</p>
               </note>

               <p>The value of the expression is a map whose entries
    correspond to the key-value pairs obtained by
    evaluating the successive <nt
                     def="MapKeyExpr">MapKeyExpr</nt> and
    <nt def="MapValueExpr"
                     >MapValueExpr</nt> expressions.</p>
               <p>Each <nt def="MapKeyExpr"
                     >MapKeyExpr</nt> expression is evaluated
    and atomized; a 

    
    <termref
                     def="dt-type-error">type error</termref>
                  <errorref class="TY" code="0004"
                     /> occurs if the result is
    not a single atomic value.

      The associated value is the
    result of evaluating the corresponding
    <nt
                     def="MapValueExpr">MapValueExpr</nt>.

    If the <nt def="MapValueExpr"
                     >MapValueExpr</nt> evaluates to a node, the
    associated value is the node itself, not a new node with the same
    values.

    <note>
                     <p>&language; has no operators
    that can distinguish a map or array from another map or array with
    the same values.  Future versions of the XQuery Update Facility,
    on the other hand, will expose this difference, and need to be
    clear about the data model instance that is constructed.</p>
                           <p>In some existing implementations that support updates via
    proprietary extensions, if the <nt
                           def="MapValueExpr"
                        >MapValueExpr</nt> evaluates to a map or array,
    the associated value is a new map or array with the same
    values.</p>
                  </note>
                  <termdef id="dt-same-key" term="same key"
                        >Two atomic values <code>K1</code> and
    <code>K2</code> have the <term>same key value</term> if
    
    
      <code>op:same-key(K1, K2)</code> returns <code>true</code>, as specified in <xspecref
                        spec="FO31" ref="func-same-key"/>
                  </termdef>

    If two or more entries have the <termref def="dt-same-key"
                     >same key value</termref> then a dynamic
    error is raised <errorref
                     class="DY" code="0137"/>.

    
    </p>



               <p>Example:</p>

               <p>The following expression constructs a map with seven entries:</p>
               <eg id="map-weekdays"><![CDATA[
map {
  "Su" : "Sunday",
  "Mo" : "Monday",
  "Tu" : "Tuesday",
  "We" : "Wednesday",
  "Th" : "Thursday",
  "Fr" : "Friday",
  "Sa" : "Saturday"
}]]></eg>



               <p>Maps can nest, and can contain any XDM value. Here is an example of a nested map with values that can be string values, numeric values, or arrays:</p>

               <eg id="map-book"><![CDATA[
map {
    "book": map {
        "title": "Data on the Web",
        "year": 2000,
        "author": [
            map {
                "last": "Abiteboul",
                "first": "Serge"
            },
            map {
                "last": "Buneman",
                "first": "Peter"
            },
            map {
                "last": "Suciu",
                "first": "Dan"
            }
        ],
        "publisher": "Morgan Kaufmann Publishers",
        "price": 39.95
    }
}
    ]]></eg>


            </div4>
            <div4 id="id-map-lookup">
               <head>Map Lookup using Function Call Syntax</head>

               <p>Maps are functions, and function calls can be used to look up
    the value associated with a key in a map.

    
    If <code>$map</code> is a map and <code>$key</code> is a key,
    then <code>$map($key)</code> is equivalent to <code>map:get($map, $key)</code>.
    The semantics of such a function call are formally defined in
    <xspecref
                     spec="FO31" ref="func-map-get"/>.
    
    </p>

               <p>Examples:</p>

               <ulist>
                  <item>
                     <p>
                        <code>$weekdays("Su")</code> returns the <termref def="dt-associated-value"
                           >associated value</termref> of the key <code>Su</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>$books("Green Eggs and Ham")</code> returns  <termref
                           def="dt-associated-value"
                           >associated value</termref>  of the key <code>Green Eggs and Ham</code>.</p>
                  </item>
               </ulist>

               <note>
                  <p>&language; also provides an alternate syntax for map and
      array lookup that is more terse, supports wildcards, and allows lookup to
      iterate over a sequence of maps or arrays. See <specref
                        ref="id-lookup"/> for details.</p>
               </note>

               <p>Map lookups can be chained.</p>

               <p>Examples: (These examples assume that <code>$b</code> is bound to the books map from the previous section)</p>
               <ulist>
                  <item>
                     <p>The expression <code>$b("book")("title")</code> returns the string <code>Data on the Web</code>.</p>
                  </item>
                  <item>
                     <p>The expression <code>$b("book")("author")</code> returns the array of authors.</p>
                  </item>
                  <item>
                     <p>The expression <code>$b("book")("author")(1)("last")</code> returns the string <code>Abiteboul</code>.</p>
                     <p>(This example combines <specref ref="id-array-lookup"
                        /> with map lookups.)</p>
                  </item>
               </ulist>
            </div4>



         </div3>
         <div3 id="id-arrays">
            <head>Arrays</head>
            <p/>
            <div4 id="id-array-constructors">
               <head>Array Constructors</head>

               <p>
                  <termdef id="dt-array" term="array"
                     >An <term>array</term> is
      a function that associates a set of positions, represented as
      positive integer keys, with values.</termdef> The first position
      in an array is associated with the integer 1.
      <termdef
                     id="dt-member" term="member"
                        >The values of an array are called
      its <term>members</term>.</termdef>

      In the type hierarchy, array has a distinct type, which is
      derived from function.
      Atomization converts arrays to sequences (see <termref
                     def="dt-atomization">Atomization</termref>).  
      </p>

               <p>An array is created using an <nt def="ArrayConstructor">ArrayConstructor</nt>.</p>
               <scrap>
                  <head/>
                  <prodrecap id="ArrayConstructor" ref="ArrayConstructor"/>
                  <prodrecap id="SquareArrayConstructor" ref="SquareArrayConstructor"/>
                  <prodrecap id="CurlyArrayConstructor" ref="CurlyArrayConstructor"/>
               </scrap>

               <p>
      If a member of an array is a
      node, its node identity is preserved.

      

        In both forms of an <nt
                     def="ArrayConstructor"
                  >ArrayConstructor</nt>, if a member
        expression evaluates to a node, the associated value is the
        node itself, not a new node with the same values.  If the
        member expression evaluates to a map or array, the associated
        value is a new map or array with the same values.

        </p>



               <p>A <nt def="SquareArrayConstructor"
                  >SquareArrayConstructor</nt> 
      consists of a comma-delimited set of argument expressions. It returns an array in which each member contains the value of the corresponding argument expression.</p>

               <p>Examples:</p>

               <ulist>
                  <item>
                     <p>
                        <code>[ 1, 2, 5, 7 ]</code> creates an array with four members: <code>1</code>, <code>2</code>, <code>5</code>, and <code>7</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>[ (), (27, 17, 0)]</code> creates an array with two members: <code>()</code> and the sequence <code>(27, 17, 0)</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>[ $x, local:items(), &lt;tautology&gt;It is what it is.&lt;/tautology&gt; ]</code> creates an array with three members: the value of $x, the result of evaluating the function call, and a tautology element.</p>
                  </item>
               </ulist>

               <p>A <nt def="CurlyArrayConstructor"
                     >CurlyArrayConstructor</nt>
      can use any  expression to create its members.  It
      evaluates its operand expression to obtain a sequence of items
      and creates an array with these items as members.  Unlike a
      SquareArrayConstructor, a comma in a CurlyArrayConstructor is
      the  <termref
                     def="dt-comma-operator">comma operator</termref>, not a delimiter.
      </p>

               <p>Examples:</p>
               <ulist>
                  <item>
                     <p>
                        <code>array { $x }</code> creates an array with one member for each item in the sequence to which $x is bound.</p>
                  </item>
                  <item>
                     <p>
                        <code>array { local:items() }</code> creates an array with one member for each item  in the sequence to which <code>local:items()</code> evaluates.</p>
                  </item>
                  <item>
                     <p>
                        <code>array { 1, 2, 5, 7 }</code> creates an array with four members: <code>1</code>, <code>2</code>, <code>5</code>, and <code>7</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>array { (), (27, 17, 0) }</code> creates an array with three members: <code>27</code>, <code>17</code>, and <code>0</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>array{ $x, local:items(), &lt;tautology&gt;It is what it is.&lt;/tautology&gt; }</code> creates an array with the following members: the items to which <code>$x</code> is bound, followed by the items to which <code>local:items()</code> evaluates, followed by a tautology element.</p>
                  </item>
               </ulist>

               <note>
                  <p>&language; does not provide explicit support for sparse arrays. Use integer-valued maps to represent sparse arrays, e.g. <code>map { 27 : -1, 153 : 17 } </code>.</p>
               </note>

            </div4>
            <div4 id="id-array-lookup">
               <head>Array Lookup using Function Call Syntax</head>

               <p>Arrays are functions, and function calls can be used to look up
    the value associated with position in an array.

    

    
    If <code>$array</code> is an array and <code>$index</code> is an integer corresponding to a position in the array,
    then <code>$array($key)</code> is equivalent to <code>array:get($array, $key)</code>.
    The semantics of such a function call are formally defined in
    <xspecref
                     spec="FO31" ref="func-array-get"/>.
    
    </p>

               <p>Examples:</p>

               <ulist>
                  <item>
                     <p>
                        <code>[ 1, 2, 5, 7 ](4)</code> evaluates to <code>7</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>[ [1, 2, 3], [4, 5, 6]](2)</code> evaluates to <code>[4, 5, 6]</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>[ [1, 2, 3], [4, 5, 6]](2)(2)</code> evaluates to <code>5</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>[ 'a', 123, &lt;name&gt;Robert Johnson&lt;/name&gt; ](3)</code> evaluates to <code>&lt;name&gt;Robert Johnson&lt;/name&gt;</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>array { (), (27, 17, 0) }(1)</code> evaluates to  <code>27</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>array { (), (27, 17, 0) }(2)</code> evaluates to  <code>17</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>array { "licorice", "ginger" }(20)</code> raises a dynamic error <xerrorref
                           spec="FO31" class="AY" code="0001"/>.</p>
                  </item>

               </ulist>

               <note>
                  <p>&language; also provides an alternate syntax for map and
      array lookup that is more terse, supports wildcards, and allows
      lookup to iterate over a sequence of maps or arrays. See
      <specref
                        ref="id-lookup"/> for details.</p>
               </note>


            </div4>





         </div3>
         <div3 id="id-lookup">
            <head>The Lookup Operator ("?") for Maps and Arrays</head>

            <p>&language; provides a lookup operator for maps and arrays that is
  more convenient for some common cases. It provides a terse syntax
  for simple strings as keys in maps or integers as keys in arrays,
  supports wildcards, and iterates over sequences of maps and
  arrays.</p>
            
         

            <div4 id="id-unary-lookup">
               <head>Unary Lookup</head>

               <scrap>
                  <head/>
                  <prodrecap id="UnaryLookup" ref="UnaryLookup"/>
                  <prodrecap id="KeySpecifier" ref="KeySpecifier"/>
               </scrap>


               <p>Unary lookup is used in predicates (e.g. <code>$map[?name='Mike']</code> or with the simple map operator (e.g. <code>$maps ! ?name='Mike'</code>). See <specref
                     ref="id-postfix-lookup"/> for the postfix lookup operator.</p>

               <p>UnaryLookup returns a sequence of values selected from the
  context item, which must be a map or array. If the context item is
  not a map or an array, a
  <termref
                     def="dt-type-error">type error</termref> is raised <errorref class="TY"
                     code="0004"/>.
  </p>


               <p>If the context item is a map:</p>
               <olist>
                  <item>
                     <p>If the  <nt def="KeySpecifier">KeySpecifier</nt> is an <code>NCName</code>
                        <phrase diff="add" at="A"
                           >or a <code>StringLiteral</code></phrase>, 
                        the  <nt
                           def="UnaryLookup"
                           >UnaryLookup</nt> operator is equivalent to 
                        <code>.(KS)</code>, where <code>KS</code> is the value of the <code>NCName</code>
                        <phrase diff="add" at="A">or <code>StringLiteral</code>.</phrase></p>
                  </item>
                  <item>
                     <p>If the   <nt def="KeySpecifier">KeySpecifier</nt>  is an <nt
                           def="IntegerLiteral">IntegerLiteral</nt>,  the  <nt def="UnaryLookup"
                           >UnaryLookup</nt> operator is equivalent to <code>.(KS)</code>, where <code>KS</code> is the value of the <nt
                           def="IntegerLiteral">IntegerLiteral</nt>.</p>
                  </item>
                  <item>
                     <p>If the <nt def="KeySpecifier">KeySpecifier</nt> is a  <nt
                           def="ParenthesizedExpr">ParenthesizedExpr</nt> <phrase diff="add" at="A">or a <nt def="VarRef">VarRef</nt></phrase> the  <nt
                           def="UnaryLookup"
                           >UnaryLookup</nt> operator is equivalent to the following expression,  where <code>KS</code> is the value of the  <nt
                              def="ParenthesizedExpr">ParenthesizedExpr</nt> <phrase diff="add" at="A">or <nt def="VarRef">VarRef</nt></phrase>:</p>

                     <eg><![CDATA[
for $k in fn:data(KS)
return .($k)  
]]></eg>
                  </item>
                  <item>
                     <p>If the <nt def="KeySpecifier"
                           >KeySpecifier</nt> is a wildcard ("<code>*</code>"), the  <nt
                           def="UnaryLookup"
                        >UnaryLookup</nt> operator is equivalent to the following expression:</p>
                     <eg><![CDATA[
for $k in map:keys(.)
return .($k)
]]></eg>
                     <note>
                        <p>The order of keys in map:keys() is implementation-dependent, so
  the order of values in the result sequence is also
  implementation-dependent.</p>
                     </note>
                  </item>
               </olist>

               <p>If the context item is an array:</p>

               <olist>
                  <item>
                     <p>If the  <nt def="KeySpecifier">KeySpecifier</nt>  is an <nt
                           def="IntegerLiteral">IntegerLiteral</nt>,  the  <nt def="UnaryLookup"
                           >UnaryLookup</nt> operator is equivalent to <code>.(KS)</code>, where <code>KS</code> is the value of the <nt
                           def="IntegerLiteral">IntegerLiteral</nt>.</p>
                  </item>

                  <item>
                     <p>If the <nt def="KeySpecifier">KeySpecifier</nt> is an <code>NCName</code>
                        <phrase diff="add" at="A"
                           >or <code>StringLiteral</code></phrase>, 
                        the <nt
                           def="UnaryLookup">UnaryLookup</nt> operator raises a type error <errorref
                           class="TY" code="0004"/>.</p>
                  </item>

                  <item>
                     <p>If the <nt def="KeySpecifier">KeySpecifier</nt> is a  <nt
                           def="ParenthesizedExpr">ParenthesizedExpr</nt> 
                        <phrase diff="add" at="A">or a <nt def="VarRef">VarRef</nt></phrase>, the  <nt
                           def="UnaryLookup"
                           >UnaryLookup</nt> operator is equivalent to the following expression,  where <code>KS</code> is the value of the  <nt
                              def="ParenthesizedExpr">ParenthesizedExpr</nt> <phrase diff="add" at="A">or <nt def="VarRef">VarRef</nt></phrase>:</p>

                     <eg><![CDATA[
for $k in fn:data(KS)
return .($k)  
]]></eg>
                  </item>

                  <item>
                     <p>If the <nt def="KeySpecifier"
                           >KeySpecifier</nt> is a wildcard ("<code>*</code>"), the  <nt
                           def="UnaryLookup"
                        >UnaryLookup</nt> operator is equivalent to the following expression:</p>
                     <eg><![CDATA[
for $k in 1 to array:size(.)
return .($k)
]]></eg>
                     <note>
                        <p>Note that array items are returned in order.</p>
                     </note>
                  </item>

               </olist>


               <p>Examples:</p>

               <ulist>
                  <item>
                     <p>
                        <code>?name</code> is equivalent to <code>.("name")</code>, an appropriate lookup for a map.</p>
                  </item>
                  <item>
                     <p>
                        <code>?2</code> is equivalent to <code>.(2)</code>, an appropriate lookup for an array or an integer-valued map.</p>
                  </item>
                  <item diff="add" at="A">
                     <p><code>?"first name"</code> is equivalent to <code>.("first name")</code></p>
                  </item>
                  
                  <item role="xquery">
                     <p>
                        <code>?("$funky / &lt;looking @string")</code> is equivalent to
    <code>.("$funky / &lt;looking @string")</code>, an appropriate lookup for a map with rather odd conventions for keys.</p>
                  </item>
                  <item>
                     <p>
                        <code>?($a)</code> <phrase diff="add" at="A">and <code>?$a</code> are</phrase> 
                        equivalent to <code>for $k in $a return .($k)</code>, allowing keys for an array or map to be passed using a variable.</p>
                  </item>
                  <item>
                     <p>
                        <code>?(2 to 4)</code> is equivalent to <code>for $k in (2,3,4) return .($k)</code>, a convenient way to return a range of values from an array.</p>
                  </item>
                  <item>
                     <p>
                        <code>?(3.5)</code> raises a type error if the context item is an array because the parameter must be an integer.</p>
                  </item>
                  <item role="xquery">
                     <p>If the context item is an array, <code>let $x:= &lt;node i="3"/&gt; return ?($x/@i)</code> does not raise a type error because the attribute is untyped.</p>
                     <p>But <code>let $x:= &lt;node i="3"/&gt; return ?($x/@i+1)</code> does raise a type error
    because the <code>+</code> operator with an untyped operand returns a double.</p>
                  </item>
                  <item>
                     <p>
                        <code>([1,2,3], [1,2,5], [1,2])[?3 = 5]</code> raises an error because <code>?3</code> on one of the
    items in the sequence fails.</p>
                  </item>
                  <item>
                     <p>If <code>$m</code> is bound to the weekdays map described in <specref
                           ref="id-maps"
                           />, then <code>$m?*</code> returns the values <code>("Sunday","Monday","Tuesday","Wednesday", "Thursday", "Friday","Saturday")</code>, in <termref
                           def="dt-implementation-dependent"
                        >implementation-dependent</termref> order.</p>
                  </item>
                  <item>
                     <p>
                        <code>[1, 2, 5, 7]?*</code> evaluates to <code>(1, 2, 5, 7)</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>[[1, 2, 3], [4, 5, 6]]?*</code> evaluates to <code>([1, 2, 3], [4, 5, 6])</code>
                     </p>
                  </item>
               </ulist>

            </div4>
            <div4 id="id-postfix-lookup">
               <head>Postfix Lookup</head>

               <scrap>
                  <head/>
                  <prodrecap id="Lookup" ref="Lookup"/>
               </scrap>

               <p>
      The semantics of a Postfix Lookup expression depend on the form of the KeySpecifier, as follows:
      <ulist>
                     <item>
                        <p>If the <code>KeySpecifier</code> is an <code>NCName</code>, <code
                              diff="add" at="A"
                           >StringLiteral</code>, <code diff="add" at="A">VarRef</code>, <code>IntegerLiteral</code>, 
                           or <code>Wildcard</code> ("<code>*</code>"), then the expression <code>E?S</code> is 
                           equivalent to <code>E!?S</code>. (That is, the semantics of the postfix lookup operator 
                           are defined in terms of the unary lookup operator).</p>
                     </item>
                     <item>
                        <p>If the <code>KeySpecifier</code> is a <code>ParenthesizedExpr</code>, then the expression <code>E?(S)</code> is equivalent to</p>
                           <eg><![CDATA[for $e in E, $s in fn:data(S) return $e($s)]]></eg>
                        <note>
                           <p>The focus for evaluating <code>S</code> is the same as the focus for the <code>Lookup</code> expression itself.</p>
                        </note>
                     </item>
                  </ulist>
               </p>



               <p>Examples:</p>


               <ulist>
                  <item>
                     <p>
                        <code>map { "first" : "Jenna", "last" : "Scott" }?first</code> evaluates to <code>"Jenna"</code>
                     </p>
                  </item>
                  <item diff="add" at="A">
                     <p>
                        <code>map { "first name" : "Jenna", "last name" : "Scott" }?"first name"</code> evaluates to <code>"Jenna"</code>
                     </p>
                  </item>
                  <item>
                     <p>
                        <code>[4, 5, 6]?2</code> evaluates to <code>5</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>(map {"first": "Tom"}, map {"first": "Dick"}, map {"first": "Harry"})?first</code> evaluates to the sequence <code>("Tom", "Dick", "Harry")</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>([1,2,3], [4,5,6])?2</code> evaluates to the sequence <code>(2, 5)</code>.</p>
                  </item>
                  <item>
                     <p>
                        <code>["a","b"]?3</code> raises a dynamic error <xerrorref spec="FO31"
                           class="AY" code="0001"/>
                     </p>
                  </item>
               </ulist>
            </div4>
         </div3>
      <!--   <div3 id="id-composite-atomic-values" diff="add" at="A">
            <head>Composite Atomic Values</head>
            <p>Some <termref def="dt-atomic-value">atomic values</termref> (despite the name) can be divided into
            parts: for example, an <code>xs:date</code> comprises year, month, day, and timezone.
            The components of such values are accessible using the lookup operator, for example
            <code>current-date()?year</code> returns the current year, while <code>document-uri($doc)?scheme</code>
            returns the scheme part of a URI.</p>
            
            <p>Previous versions of this specification provided functions such as <code>fn:year-from-date</code>
            to access these components. These functions remain available, but &language; additionally
            allows the lookup operator to be used to obtain the components of other data types including
               <code>xs:anyURI</code>, <code>xs:gYear</code>, <code>xs:gYearMonth</code>, <code>xs:gMonth</code>, 
               <code>xs:gMonthDay</code>, <code>xs:gDay</code>, <code>xs:hexBinary</code>, and 
               <code>xs:base64Binary</code>.</p>
            
            <p>When an atomic value belonging to one of these atomic types appears as the first operand
            of the postfix lookup operator, or when the unary lookup operator is evaluated with the
            atomic value as the context item, the atomic value is implicitly converted to a map, and
            the lookup operator is then applied to this map.</p>
            
            <p>The mappable atomic types are defined by the table below. For each mappable atomic
            type the table lists the components that are available, their types, and their values.</p>
            
            <table role="medium" width="100%">
               <thead>
                  <tr>
                     <th>Type</th>
                     <th>Component</th>
                     <th>Component Type</th>
                     <th>Value</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td><code>xs:dateTime</code></td>
                     <td><code>year</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:year-from-dateTime(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>month</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:month-from-dateTime(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>day</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:day-from-dateTime(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>hours</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:hours-from-dateTime(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>minutes</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:minutes-from-dateTime(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>seconds</code></td>
                     <td><code>xs:decimal</code></td>
                     <td><code>fn:seconds-from-dateTime(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>timezone</code></td>
                     <td><code>xs:dayTimeDuration?</code></td>
                     <td><code>fn:timezone-from-dateTime(.)</code></td>
                  </tr>
                  <tr>
                     <td><code>xs:date</code></td>
                     <td><code>year</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:year-from-date(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>month</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:month-from-date(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>day</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:day-from-date(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>timezone</code></td>
                     <td><code>xs:dayTimeDuration?</code></td>
                     <td><code>fn:timezone-from-date(.)</code></td>
                  </tr>
                  <tr>
                     <td><code>xs:time</code></td>
                     <td><code>hours</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:hours-from-time(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>minutes</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:minutes-from-time(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>seconds</code></td>
                     <td><code>xs:decimal</code></td>
                     <td><code>fn:seconds-from-time(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>timezone</code></td>
                     <td><code>xs:dayTimeDuration?</code></td>
                     <td><code>fn:timezone-from-time(.)</code></td>
                  </tr>
                  <tr>
                     <td><code>xs:gYear</code></td>
                     <td><code>year</code></td>
                     <td><code>xs:integer</code></td>
                     <td>See below</td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>timezone</code></td>
                     <td><code>xs:dayTimeDuration?</code></td>
                     <td>See below</td>
                  </tr>
                  <tr>
                     <td><code>xs:gYearMonth</code></td>
                     <td><code>year</code></td>
                     <td><code>xs:integer</code></td>
                     <td>See below</td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>month</code></td>
                     <td><code>xs:integer</code></td>
                     <td>See below</td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>timezone</code></td>
                     <td><code>xs:dayTimeDuration?</code></td>
                     <td>See below</td>
                  </tr>
                  <tr>
                     <td><code>xs:gMonth</code></td>
                     <td><code>month</code></td>
                     <td><code>xs:integer</code></td>
                     <td>See below</td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>timezone</code></td>
                     <td><code>xs:dayTimeDuration?</code></td>
                     <td>See below</td>
                  </tr>
                  <tr>
                     <td><code>xs:gMonthDay</code></td>
                     <td><code>month</code></td>
                     <td><code>xs:integer</code></td>
                     <td>See below</td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>day</code></td>
                     <td><code>xs:integer</code></td>
                     <td>See below</td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>timezone</code></td>
                     <td><code>xs:dayTimeDuration?</code></td>
                     <td>See below</td>
                  </tr>
                  <tr>
                     <td><code>xs:gDay</code></td>
                     <td><code>day</code></td>
                     <td><code>xs:integer</code></td>
                     <td>See below</td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>timezone</code></td>
                     <td><code>xs:dayTimeDuration?</code></td>
                     <td>See below</td>
                  </tr>
                  
                  <tr>
                     <td><code>xs:duration</code></td>
                     <td><code>years</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:years-from-duration(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>months</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:months-from-duration(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>days</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:days-from-duration(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>hours</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:hours-from-duration(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>minutes</code></td>
                     <td><code>xs:integer</code></td>
                     <td><code>fn:minutes-from-duration(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>seconds</code></td>
                     <td><code>xs:decimal</code></td>
                     <td><code>fn:seconds-from-duration(.)</code></td>
                  </tr>
                  <tr>
                     <td><code>xs:hexBinary</code></td>
                     <td><code>octets</code></td>
                     <td><code>xs:unsignedByte*</code></td>
                     <td>A sequence of integers in the range 0 to 255 representing the octets in the binary value</td>
                  </tr>
                  <tr>
                     <td><code>xs:base64Binary</code></td>
                     <td><code>octets</code></td>
                     <td><code>xs:unsignedByte*</code></td>
                     <td>A sequence of integers in the range 0 to 255 representing the octets in the binary value</td>
                  </tr>
                  <tr>
                     <td><code>xs:QName</code></td>
                     <td><code>prefix</code></td>
                     <td><code>xs:NCName?</code></td>
                     <td><code>fn:prefix-from-QName(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>local-name</code></td>
                     <td><code>xs:NCName</code></td>
                     <td><code>fn:local-name-from-QName(.)</code></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>namespace-uri</code></td>
                     <td><code>xs:anyURI</code></td>
                     <td><code>fn:namespace-uri-from-QName</code></td>
                  </tr>
                  <tr>
                     <td><code>xs:anyURI</code></td>
                     <td><code>scheme</code></td>
                     <td><code>xs:string?</code></td>
                     <td>The scheme part of the URI (as defined in RFC2396), if present</td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>authority</code></td>
                     <td><code>xs:string?</code></td>
                     <td>The authority part of the URI (as defined in RFC2396), if present</td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>path</code></td>
                     <td><code>xs:string?</code></td>
                     <td>The path component of the URI (as defined in RFC2396), if present</td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>query</code></td>
                     <td><code>xs:string</code></td>
                     <td>The query component of the URI (as defined in RFC2396), if present</td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>query-parameters</code></td>
                     <td><code>map(xs:string, xs:string*)</code></td>
                     <td>The query component of the URI (as defined in RFC2396), if present and parseable.
                     The query is parsed as follows:
                     <olist>
                        <item><p>The query is split into parts using "&amp;" or ";" as a separator.</p></item>
                        <item><p>If a query part contains an "=" character, the resulting map contains
                        an entry whose key is the string that precedes the first "=" character, and whose value is
                        the string that follows the first "=" character.</p></item>
                        <item><p>If a query part contains no "=" character, the resulting map contains
                        an entry whose key is equal to the complete query part and whose value is the
                        <code>xs:boolean</code> value <code>true()</code>.</p></item>
                        <item><p>If two query parts have the same key, the resulting map contains a single
                           entry with this key, in which the corresponding values are
                        combined into a sequence, retaining order.</p></item>
                     </olist></td>
                  </tr>
                  <tr>
                     <td><code></code></td>
                     <td><code>fragment</code></td>
                     <td><code>xs:string?</code></td>
                     <td>The fragment component of the URI reference (as defined in RFC2396), if present</td>
                  </tr>
               </tbody>
            </table>
            
            <p>The components for types <code>xs:gYear</code>, <code>xs:gYearMonth</code>, <code>xs:gMonth</code>, 
               <code>xs:gMonthDay</code>, and <code>xs:gDay</code> are defined as follows. Given a value 
               <code>G</code> of one of these types, it can be expanded to an instance of <code>xs:date</code>
               (call it <code>D</code>) by supplying arbitrary values for the absent components in the 7-property model as defined
               in XSD 1.1 Part 2. The value of component <var>C</var> in <var>G</var> is then the same as the
            value of the same component in <code>D</code>.</p>
            
            <p>When extracting the components of an <code>xs:anyURI</code> value, percent-encoded characters
            are expanded: for example the fragment part of the <code>xs:anyURI</code> value 
               <code>book#part%201</code> is returned as <code>"part 1"</code>.</p>
            
         </div3>-->
         
      </div2>
      <div2 id="id-flwor-expressions" role="xquery">
         <head>FLWOR Expressions</head>
         <p>XQuery provides a versatile expression called a FLWOR expression that may contain multiple clauses. The FLWOR expression can be used for many purposes, including iterating over sequences, joining multiple documents, and performing grouping and aggregation. The name FLWOR, pronounced "flower", is suggested by the keywords <code>for</code>, <code>let</code>, <code>where</code>, <code>order by</code>, and <code>return</code>, which introduce some of the clauses used in FLWOR expressions (but this is not a complete list of such clauses.)</p>
         <p>The complete syntax of a FLWOR expression is shown here, and relevant parts of the syntax are repeated in subsequent sections of this document.</p>
         <scrap>
            <head/>
            <prodrecap id="FLWORExpr" ref="FLWORExpr11"/>
            <prodrecap id="InitialClause" ref="InitialClause"/>
            <prodrecap id="IntermediateClause" ref="IntermediateClause"/>
            <prodrecap id="ForClause" ref="ForClause"/>
            <prodrecap ref="ForBinding"/>
            <prodrecap id="LetClause" ref="LetClause"/>
            <prodrecap ref="LetBinding"/>
            <prodrecap id="TypeDeclaration" ref="TypeDeclaration"/>
            <prodrecap id="AllowingEmpty" ref="AllowingEmpty"/>
            <prodrecap id="PositionalVar" ref="PositionalVar"/>
            <prodrecap id="WindowClause" ref="WindowClause"/>
            <prodrecap id="TumblingWindowClause" ref="TumblingWindowClause"/>
            <prodrecap id="SlidingWindowClause" ref="SlidingWindowClause"/>
            <prodrecap id="WindowStartCondition" ref="WindowStartCondition"/>
            <prodrecap id="WindowEndCondition" ref="WindowEndCondition"/>
            <prodrecap id="WindowVars" ref="WindowVars"/>
            <prodrecap id="CurrentItem" ref="CurrentItem"/>
            <prodrecap id="PreviousItem" ref="PreviousItem"/>
            <prodrecap id="NextItem" ref="NextItem"/>
            <prodrecap id="CountClause" ref="CountClause"/>
            <prodrecap id="WhereClause" ref="WhereClause"/>
            <prodrecap id="GroupByClause" ref="GroupByClause"/>
            <prodrecap id="GroupingSpecList" ref="GroupingSpecList"/>
            <prodrecap id="GroupingSpec" ref="GroupingSpec"/>
            <prodrecap id="GroupingVariable" ref="GroupingVariable"/>
            <prodrecap id="OrderByClause" ref="OrderByClause"/>
            <prodrecap ref="OrderSpecList" id="OrderSpecList"/>
            <prodrecap ref="OrderSpec" id="OrderSpec"/>
            <prodrecap ref="OrderModifier" id="OrderModifier"/>
            <prodrecap ref="ReturnClause" id="ReturnClause"/>
         </scrap>
         <p>The semantics of FLWOR expressions are based on a concept called a <term>tuple stream</term>. <termdef
               id="id-tuple-stream-foobar" term="tuple stream"
                  >A <term>tuple stream</term> is an ordered sequence of zero or more <term>tuples</term>.</termdef>
            <termdef term="tuple" id="id-tuple-foobar"
                  >A <term>tuple</term> is a set of zero or more named variables, each of which is bound to a value that is an <termref
                  def="dt-data-model-instance"
               >XDM instance</termref>.</termdef> Each tuple stream is homogeneous in the sense that all its  tuples contain variables with the same names and the same <termref
               def="dt-static-type"
               >static types</termref>. The following example illustrates a tuple stream consisting of four tuples, each containing three variables named <code>$x</code>, <code>$y</code>, and <code>$z</code>:</p>
         <eg><![CDATA[($x = 1003, $y = "Fred", $z = &lt;age&gt;21&lt;/age&gt;)
($x = 1017, $y = "Mary", $z = &lt;age&gt;35&lt;/age&gt;)
($x = 1020, $y = "Bill", $z = &lt;age&gt;18&lt;/age&gt;)
($x = 1024, $y = "John", $z = &lt;age&gt;29&lt;/age&gt;)]]></eg>
         <note>
            <p>In this section, tuple streams are represented as shown in the above example. Each tuple is on a separate line and is enclosed in parentheses, and the variable bindings inside each tuple are separated by commas. This notation does not represent XQuery syntax, but is simply a representation of a tuple stream for the purpose of defining the semantics of  FLWOR expressions.</p>
         </note>
         <p>Tuples and tuple streams are not part of the <termref def="dt-datamodel"
               >data model</termref>. They exist only as conceptual intermediate results during the processing of a FLWOR expression.</p>
         <p>Conceptually, the first clause generates a tuple stream. Each clause between the first clause and the return clause takes the tuple stream generated by the previous clause as input and generates a (possibly different) tuple stream as output. The return clause takes a tuple stream as input and, for each tuple in this tuple stream, generates an <termref
               def="dt-data-model-instance"
               >XDM instance</termref>; the final result of the FLWOR expression is the ordered concatenation of these <termref
               def="dt-data-model-instance">XDM instances</termref>.</p>
         <p>The initial clause in a FLWOR expression may be a <code>for</code>, <code>let</code>, or <code>window</code> clause. 
Intermediate clauses may be <code>for</code>, <code>let</code>, <code>window</code>, <code>count</code>, <code>where</code>, <code>group by</code>, or <code>order by</code> clauses. These intermediate clauses may be repeated as many times as desired, in any order. The final clause of the FLWOR expression must be a <code>return</code> clause. The semantics of the various clauses are described in the following sections.</p>

         <div3 id="id-binding-rules">
            <head>Variable Bindings</head>
            <p>The following clauses in FLWOR expressions bind values to variables: 
<code>for</code>, <code>let</code>, <code>window</code>, <code>count</code>, and <code>group by</code>. 
The binding of variables for <code>for</code>, <code>let</code>, and <code>count</code> is governed by the following rules
(the binding of variables in <code>group by</code> is discussed in <specref
                  ref="id-group-by"
                  />,
the binding of variables in <code>window</code> clauses is discussed in <specref
                  ref="id-windows"/>):</p>

            <olist>

               <item>
                  <p>The scope of a bound variable includes all subexpressions of the containing FLWOR that appear after the variable binding. The scope does not include the expression to which the variable is bound. The following code fragment, containing two <code>let</code> clauses, illustrates how variable bindings may reference variables that were bound in earlier clauses, or in earlier bindings in the same clause:</p>
                  <eg><![CDATA[let $x := 47, $y := f($x)
let $z := g($x, $y)]]></eg>
               </item>

               <item>
                  <p>A given variable may be bound more than once in a FLWOR expression, or even within one  clause of a FLWOR expression. In such a case, each new binding occludes the previous one, which becomes inaccessible in the remainder of the FLWOR expression.</p>
               </item>

               <item>
                  <p>
                     <termdef term="type declaration" id="dt-type-declaration"
                           >A variable binding may be accompanied by a <term>type declaration</term>, which consists of the keyword <code>as</code> followed by the static type of the variable, declared using the syntax in  <specref
                           ref="id-sequencetype-syntax"
                        />.</termdef> At run time, if the value bound to the variable does not match the declared type according to the rules for <termref
                        def="dt-sequencetype-matching">SequenceType
matching</termref>, a <termref
                        def="dt-type-error">type error</termref> is raised <errorref class="TY"
                        code="0004"
                        />. For example, the following <code>let</code> clause raises a <termref
                        def="dt-type-error"
                        >type error</termref> because the variable <code>$salary</code> has a type declaration that is not satisfied by the value that is bound to it:</p>
                  <eg><![CDATA[let $salary as xs:decimal :=  "cat"]]></eg>
               </item>
               <item diff="add" at="A">
                  <p>
                     <termdef id="dt-binding-collection" term="binding collection"
                        >In a <code>for</code> clause, when an expression is 
                        preceded by the keyword <code>in</code>, the value of that expression is 
                        called a <term>binding collection</term>.</termdef> The collection may be either
                     a sequence or an array. The <code>for</code>  
                     clause iterates over its binding collection, producing multiple bindings for one or more variables. 
                     Details on how binding collections are used in <code>for</code> clauses 
                     are described in the following sections.</p>
               </item>
               <item diff="chg" at="A">
                  <p>
                     <termdef id="dt-binding-sequence" term="binding sequence"
                           >In a <code>window</code> clause, when an expression is 
                        preceded by the keyword <code>in</code>, the value of that expression is 
                        called a <term>binding sequence</term>.</termdef> The <code>window</code> 
                     clause iterates over its binding sequence, producing multiple bindings for one or more variables. 
                     Details on how binding sequences are used in <code>for</code> and <code>window</code> clauses 
                     are described in the following sections.</p>
               </item>
               
            </olist>
         </div3>

         <div3 id="id-xquery-for-clause">
            <head>For Clause</head>
            <scrap>
               <head/>
               <prodrecap ref="ForClause"/>
               <prodrecap ref="ForBinding"/>
               <prodrecap ref="TypeDeclaration"/>
               <prodrecap ref="AllowingEmpty"/>
               <prodrecap ref="PositionalVar"/>
            </scrap>
            <p>A <code>for</code> clause is used for iteration. Each variable in a <code>for</code> clause iterates over a 
               sequence <phrase diff="add" at="A">or array</phrase> and is bound in turn to each item in the sequence,
               <phrase diff="add" at="A">or to each member in the array</phrase>.</p>

            <p>If a <code>for</code> clause contains multiple variables, it is semantically equivalent to multiple <code>for</code> clauses, each containing one of the variables in the original <code>for</code> clause.</p>

            <p>Example:</p>

            <ulist>
               <item>
                  <p>The clause</p>
                  <eg><![CDATA[for $x in $expr1, $y in $expr2]]></eg>
                  <p>is semantically equivalent to:</p>
                  <eg><![CDATA[for $x in $expr1
for $y in $expr2]]></eg>
               </item>
               <item>
                  <p>The clause</p>
                  <eg><![CDATA[for member $x in $expr1, member $y in $expr2]]></eg>
                  <p>is semantically equivalent to:</p>
                  <eg><![CDATA[for member $x in $expr1
for member $y in $expr2]]></eg>
               </item>
            </ulist>
            
            <p diff="add" at="A">Without the <code>member</code> keyword, the expression iterates over the items in a sequence. 
               With the <code>member</code> keyword, it iterates over the members of an array. We refer to the sequence
               or array generically as the <termref def="dt-binding-collection">binding collection</termref>, and to
               its items or members as the <code>components</code> of the collection.</p>
            
            <p diff="add" at="A">If <code>member</code> is specified, then the corresponding <code>ExprSingle</code>
               must evaluate to a single array, otherwise a type error is raised <errorref
               class="TY" code="0004"/></p>

            <p>In the remainder of this section, we define the semantics of a <code>for</code> clause containing a single variable and an associated expression 
               (following the keyword <code>in</code>) whose value is the <termref
                  def="dt-binding-collection">binding collection</termref> for that variable.</p>
            <p>If a single-variable <code>for</code> clause is the initial clause in a FLWOR expression, it iterates over its <termref
               def="dt-binding-collection">binding collection</termref>, binding the variable to each component in turn. 
               The resulting sequence of variable bindings becomes the initial tuple stream that serves as input to the next clause 
               of the FLWOR expression. If <termref
                  def="dt-ordering-mode"
                  >ordering mode</termref> is <code>ordered</code>, the order of tuples in the tuple stream preserves the order of the <termref
                  def="dt-binding-collection"
                     >binding collection</termref>; otherwise the order of the tuple stream is <termref
                  def="dt-implementation-dependent">implementation-dependent</termref>.</p>
            <p>If the <termref def="dt-binding-sequence"
                  >binding collection</termref> is empty, the output tuple stream depends on whether <code>allowing empty</code> is specified. 
               If <code>allowing empty</code> is specified, the output tuple stream consists of one tuple in which the variable is bound to an empty sequence. 
               If <code>allowing empty</code> is not specified, the output tuple stream consists of zero tuples.</p>
            <p>The following  examples illustrates tuple streams that are generated by initial <code>for</code> clauses:</p>
            <ulist>

               <item>
                  <p>Initial clause:</p>
                  <eg><![CDATA[for $x in (100, 200, 300)]]></eg>
                  <p>or (equivalently):</p>
                  <eg><![CDATA[for $x allowing empty in (100, 200, 300)]]></eg>
                  <p>Output tuple stream:</p>
                  <eg><![CDATA[($x = 100)
($x = 200)
($x = 300)]]></eg>
               </item>

               <item>
                  <p>Initial clause:</p>
                  <eg><![CDATA[for $x in ()]]></eg>
                  <p>Output tuple stream contains no tuples.</p>
               </item>

               <item>
                  <p>Initial clause:</p>
                  <eg><![CDATA[for $x allowing empty in ()]]></eg>
                  <p>Output tuple stream:</p>
                  <eg><![CDATA[($x = ())]]></eg>
               </item>
               
               <item diff="add" at="A">
                  <p>Initial clause:</p>
                  <eg><![CDATA[for member $x in [1, 2, (5 to 10)]]></eg>
                  <p>Output tuple stream:</p>
                  <eg><![CDATA[($x = (1))
($x = (2))
($x = (5, 6, 7, 8, 9, 10)]]></eg>
               </item>
               
               <item diff="add" at="A">
                  <p>Initial clause:</p>
                  <eg><![CDATA[for member $x in []]]></eg>
                  <p>Output tuple stream contains no tuples.</p>
               </item>
               
               <item diff="add" at="A">
                  <p>Initial clause:</p>
                  <eg><![CDATA[for member $x allowing empty in [] ]]></eg>
                  <p>Output tuple stream:</p>
                  <eg><![CDATA[($x = ())]]></eg>
               </item>
            </ulist>
            <p>
               <termdef term="positional variable" id="dt-positional-variable">A <term>positional variable</term> 
                  is a variable that is preceded by the keyword <code>at</code>.</termdef> A positional variable 
               may be associated with a variable that is bound in a <code>for</code> clause. In this case, as 
               the main variable iterates over the components of its <termref def="dt-binding-collection" diff="chg" at="A">binding collection</termref>, 
               the positional variable iterates over the integers that represent the ordinal numbers of these component in the 
               <termref def="dt-binding-collection" diff="chg" at="A">binding collection</termref>, starting with one. Each tuple in the output 
               tuple stream contains bindings for both the main variable and the positional variable. If the 
               <termref def="dt-binding-collection" diff="chg" at="A">binding collection</termref> is empty and <code>allowing empty</code> is 
               specified, the positional variable in the output tuple is bound to the integer zero. Positional variables always 
               have the implied type <code>xs:integer</code>.</p>
            <p>The <termref def="dt-expanded-qname">expanded
			        QName</termref> of a positional variable must be distinct from the <termref def="dt-expanded-qname"
                  >expanded QName</termref> of the main variable with which it is associated <errorref
                  class="ST" code="0089"/>.</p>
            <p>The following  examples illustrate how a positional variable would have affected the results of the previous examples that generated tuples:</p>
            <ulist>

               <item>
                  <p>Initial clause:</p>
                  <eg><![CDATA[for $x at $i in (100, 200, 300)]]></eg>
                  <p>Output tuple stream:</p>
                  <eg><![CDATA[($x = 100, $i = 1)
($x = 200, $i = 2)
($x = 300, $i = 3)]]></eg>
               </item>
               
               <item diff="add" at="A">
                  <p>Initial clause:</p>
                  <eg><![CDATA[for $x at $i in [1 to 3, 11 to 13, 21 to 23]]></eg>
                  <p>Output tuple stream:</p>
                  <eg><![CDATA[($x = (1, 2, 3), $i = 1)
($x = (11, 12, 13), $i = 2)
($x = (21, 22, 23), $i = 3)]]></eg>
               </item>

               <item>
                  <p>Initial clause:</p>
                  <eg><![CDATA[for $x allowing empty at $i in ()]]></eg>
                  <p>Output tuple stream:</p>
                  <eg><![CDATA[($x = (), $i = 0)]]></eg>
               </item>
            </ulist>
            <p>If a single-variable <code>for</code> clause is an intermediate clause in a FLWOR expression, its <termref
                  def="dt-binding-collection" diff="chg" at="A"
                  >binding collection</termref> is evaluated for each input tuple, given the bindings in that input tuple. Each input tuple generates 
                  zero or more tuples in the output tuple stream. Each of these output tuples consists of  the original variable bindings of the 
                  input tuple plus a binding of the new variable to one of the items in its <termref
                     def="dt-binding-collection" diff="chg" at="A">binding collecction</termref>.</p>
            <note>
               <p>Although the <termref def="dt-binding-collection" diff="chg" at="A"
                     >binding collection</termref> is conceptually evaluated independently for each input tuple, 
                  an optimized implementation may sometimes be able to avoid re-evaluating the <termref
                     def="dt-binding-collection" diff="chg" at="A"
                     >binding collection</termref> if it can show that the variables that the <termref
                        def="dt-binding-collection" diff="chg" at="A"
                  >binding collection</termref> depends on have the same values as in a previous evaluation.</p>
            </note>
            <p>For a given input tuple, if the <termref def="dt-binding-collection" diff="chg" at="A"
                  >binding collection</termref> for the new variable in the <code>for</code> clause <phrase diff="add" at="A">is empty 
               (that is, it is an empty sequence or an empty array depending on whether <code>member</code> is specified)</phrase>, 
               the result depends on whether  <code>allowing empty</code> is specified. If <code>allowing empty</code> 
               is specified, the input tuple generates one output tuple, with the original variable bindings plus a 
               binding of the new variable to an empty sequence. If <code>allowing empty</code> is not specified, 
               the input tuple generates zero output tuples (it is not represented in the output tuple stream.)</p>
            <p>If the new variable introduced by a <code>for</code> clause has an associated <termref
                  def="dt-positional-variable"
                  >positional variable</termref>, the output tuples generated by the <code>for</code> clause  also contain bindings for the <termref
                  def="dt-positional-variable"
                  >positional variable</termref>. In this case, as the new variable is bound to each item in its <termref
                     def="dt-binding-collection" diff="chg" at="A">binding collection</termref>, the <termref
                  def="dt-positional-variable"
                  >positional variable</termref> is bound to the ordinal position of that item within the <termref
                     def="dt-binding-collection" diff="chg" at="A"
                  >binding collection</termref>, starting with one. Note that, since the <termref
                  def="dt-positional-variable"
                  >positional variable</termref> represents a position within a <termref
                     def="dt-binding-collection" diff="chg" at="A"
                  >binding collection</termref>, the output tuples corresponding to each input tuple are independently numbered, starting with one. For a given input tuple, if the <termref
                     def="dt-binding-collection"  diff="chg" at="A"
                  >binding collection</termref> is empty and <code>allowing empty</code> is specified, the <termref
                  def="dt-positional-variable"
               >positional variable</termref> in the output tuple is bound to the integer zero.</p>
            <p>If <termref def="dt-ordering-mode"
                  >ordering mode</termref> is <code>ordered</code>, the tuples in the output tuple stream are ordered primarily by the order of the input tuples from which they are derived, and secondarily by the order of the <termref
                  def="dt-binding-sequence"
                  >binding sequence</termref> for the new variable; otherwise the order of the output tuple stream is <termref
                  def="dt-implementation-dependent">implementation-dependent</termref>.</p>
            <p>The following examples illustrates the effects of  intermediate <code>for</code> clauses:</p>
            <ulist>

               <item>
                  <p>Input tuple stream:</p>
                  <eg><![CDATA[($x = 1)
($x = 2)
($x = 3)
($x = 4)]]></eg>
                  <p>Intermediate <code>for</code> clause:</p>
                  <eg><![CDATA[for $y in ($x to 3)]]></eg>
                  <p>Output tuple stream (assuming <termref def="dt-ordering-mode"
                        >ordering mode</termref> is <code>ordered</code>):</p>
                  <eg><![CDATA[($x = 1, $y = 1)
($x = 1, $y = 2)
($x = 1, $y = 3)
($x = 2, $y = 2)
($x = 2, $y = 3)
($x = 3, $y = 3)
]]></eg>
                  <note>
                     <p>In this example, there is no output tuple that corresponds to the input tuple <code>($x = 4)</code> because, when the <code>for</code> clause is evaluated with the bindings in this input tuple, the resulting <termref
                        def="dt-binding-collection" diff="chg" at="A"
                        >binding collection</termref> for <code>$y</code> is empty.</p>
                  </note>
               </item>
               

               <item>
                  <p>This  example shows how the previous example would have been affected by a <termref
                        def="dt-positional-variable"
                     >positional variable</termref> (assuming the same input tuple stream):</p>
                  <eg><![CDATA[for $y at $j in ($x to 3)]]></eg>
                  <p>Output tuple stream (assuming <termref def="dt-ordering-mode"
                        >ordering mode</termref> is <code>ordered</code>):</p>
                  <eg><![CDATA[($x = 1, $y = 1, $j = 1)
($x = 1, $y = 2, $j = 2)
($x = 1, $y = 3, $j = 3)
($x = 2, $y = 2, $j = 1)
($x = 2, $y = 3, $j = 2)
($x = 3, $y = 3, $j = 1)
]]></eg>
               </item>

               <item>
                  <p>This example shows how the previous example would have been affected by <code>allowing empty</code>. Note that <code>allowing empty</code> causes the input tuple <code>($x = 4)</code> to be represented in the output tuple stream, even though the <termref
                        def="dt-binding-sequence"
                        >binding sequence</termref> for <code>$y</code> contains no items for this input tuple. This example illustrates that <code>allowing empty</code> in a <code>for</code> clause serves a purpose similar to that of an "outer join" in a relational database query. (Assume the same input tuple stream as in the previous example.)</p>
                  <eg><![CDATA[for $y allowing empty at $j in ($x to 3)]]></eg>
                  <p>Output tuple stream (assuming <termref def="dt-ordering-mode"
                        >ordering mode</termref> is <code>ordered</code>):</p>
                  <eg><![CDATA[($x = 1, $y = 1, $j = 1)
($x = 1, $y = 2, $j = 2)
($x = 1, $y = 3, $j = 3)
($x = 2, $y = 2, $j = 1)
($x = 2, $y = 3, $j = 2)
($x = 3, $y = 3, $j = 1)
($x = 4, $y = (), $j = 0)
]]></eg>
               </item>
               
               <item diff="add" at="A">
                  <p>This example illustrates processing of arrays:</p>
                  <p>Input tuple stream:</p>
                  <eg><![CDATA[($x = 1)
($x = 2)
($x = 3)]]></eg>
                  <p>Intermediate <code>for</code> clause:</p>
                  <eg><![CDATA[for member $y in [[$x+1, $x+2], [[$x+3, $x+4]] ]]></eg>
                  <p>Output tuple stream (assuming <termref def="dt-ordering-mode"
                     >ordering mode</termref> is <code>ordered</code>):</p>
                  <eg><![CDATA[($x = 1, $y = [2, 3])
($x = 1, $y = [4, 5])
($x = 2, $y = [3, 4])
($x = 2, $y = [5, 6])
($x = 3, $y = [4, 5])
($x = 3, $y = [6, 7])
]]></eg>
                  
               </item>
               

               <item>
                  <p>This example shows how a <code>for</code> clause that binds two variables is semantically equivalent to two <code>for</code> clauses that bind one variable each. We assume that this <code>for</code> clause occurs at the beginning of a FLWOR expression. It is equivalent to an initial single-variable <code>for</code> clause that provides an input tuple stream to an intermediate single-variable <code>for</code> clause.</p>
                  <eg><![CDATA[for $x in (1, 2, 3, 4), $y in ($x to 3)]]></eg>
                  <p>Output tuple stream (assuming <termref def="dt-ordering-mode"
                        >ordering mode</termref> is <code>ordered</code>):</p>
                  <eg><![CDATA[($x = 1, $y = 1)
($x = 1, $y = 2)
($x = 1, $y = 3)
($x = 2, $y = 2)
($x = 2, $y = 3)
($x = 3, $y = 3)
]]></eg>
               </item>
            </ulist>
            <p>In the above examples, if <termref def="dt-ordering-mode"
                  >ordering mode</termref> had been <code>unordered</code>, the output tuple streams would have consisted of the same tuples, with the same values for the <termref
                  def="dt-positional-variable"
                  >positional variables</termref>, but the ordering of the tuples would have been <termref
                  def="dt-implementation-dependent">implementation-dependent</termref>.</p>
            <p>A <code>for</code> clause may contain one or more <termref def="dt-type-declaration"
                  >type declarations</termref>, identified by the keyword <code>as</code>. The semantics of <termref
                  def="dt-type-declaration">type declarations</termref> are defined in <specref
                  ref="id-binding-rules"/>.</p>
         </div3>
         <div3 id="id-xquery-let-clause">
            <head>Let Clause</head>
            <scrap>
               <head/>
               <prodrecap ref="LetClause"/>
               <prodrecap ref="LetBinding"/>
               <prodrecap ref="TypeDeclaration"/>
            </scrap>
            <p>The purpose of a <code>let</code> clause is to bind values to one or more variables. Each variable is bound to the result of evaluating an expression.</p>
            <p>If a <code>let</code> clause contains multiple variables, it is semantically equivalent to multiple <code>let</code> clauses, each containing a single variable. For example, the clause</p>
            <eg><![CDATA[let $x := $expr1, $y := $expr2]]></eg>
            <p>is semantically equivalent to the following sequence of clauses:</p>
            <eg><![CDATA[let $x := $expr1
let $y := $expr2]]></eg>
            <p>In the remainder of this section, we define the semantics of a <code>let</code> clause containing a single variable <emph>V</emph> and an associated expression <emph>E</emph>.</p>
            <p>If a single-variable <code>let</code> clause is the initial clause in a FLWOR expression, it simply binds the variable <emph>V</emph> to the result of the expression <emph>E</emph>. The result of the <code>let</code> clause is a tuple stream consisting of one tuple with a single binding that binds <emph>V</emph> to the result of <emph>E</emph>. This tuple stream serves as input to the next clause in the FLWOR expression.</p>
            <p>If a single-variable <code>let</code> clause is an intermediate clause in a FLWOR expression, it adds a new binding for variable <emph>V</emph> to each tuple in the input tuple stream. For each input tuple, the value bound to <emph>V</emph> is the result of evaluating expression <emph>E</emph>, given the bindings that are already present in that input tuple. The resulting tuples become the output tuple stream of the <code>let</code> clause.</p>
            <p>The number of tuples in the output tuple stream of an intermediate <code>let</code> clause is the same as the number of tuples in the input tuple stream. The number of bindings in the output tuples is one more than the number of bindings in the input tuples, unless the input tuples already contain bindings for <emph>V</emph>; in this case, the new binding for <emph>V</emph> occludes (replaces) the earlier binding for <emph>V</emph>, and the number of bindings is unchanged.</p>
            <p>A <code>let</code> clause may contain one or more <termref def="dt-type-declaration"
                  >type declarations</termref>, identified by the keyword <code>as</code>. The semantics of type declarations are defined in <specref
                  ref="id-binding-rules"/>.</p>
            <p>The following code fragment illustrates how a <code>for</code> clause and a <code>let</code> clause can be used together. The <code>for</code> clause produces an initial tuple stream containing a binding for variable <code>$d</code> to each department number found in a given input document. The <code>let</code> clause adds an additional binding to each tuple, binding variable <code>$e</code> to a sequence of employees whose department number matches the value of <code>$d</code> in that tuple.</p>
            <eg><![CDATA[for $d in fn:doc("depts.xml")/depts/deptno
let $e := fn:doc("emps.xml")/emps/emp[deptno eq $d]]]></eg>
         </div3>



         <div3 id="id-windows">
            <head>Window Clause</head>
            <scrap>
               <head/>
               <prodrecap ref="WindowClause"/>
               <prodrecap ref="TumblingWindowClause"/>
               <prodrecap ref="SlidingWindowClause"/>
               <prodrecap ref="WindowStartCondition"/>
               <prodrecap ref="WindowEndCondition"/>
               <prodrecap ref="WindowVars"/>
               <prodrecap ref="CurrentItem"/>
               <prodrecap ref="PositionalVar"/>
               <prodrecap ref="PreviousItem"/>
               <prodrecap ref="NextItem"/>
            </scrap>

            <p>Like a <code>for</code> clause, a <code>window</code> clause
iterates over its <termref
                  def="dt-binding-sequence"
                  >binding
sequence</termref> and generates a sequence of tuples. In the case of
a <code>window</code> clause, each tuple represents a window. <termdef
                  term="window" id="dt-window"
                     >A <term>window</term> is a sequence of
consecutive items drawn from the <termref
                     def="dt-binding-sequence"
               >binding sequence</termref>.</termdef> Each
window is represented by at least one and at most nine bound
variables. The variables have user-specified names, but their roles
are as follows:</p>

            <ulist>

               <item>
                  <p>
                     <emph>Window-variable:</emph> Bound to the sequence of
  items from the <termref
                        def="dt-binding-sequence"
                     >binding
  sequence</termref> that comprise the window.</p>
               </item>

               <item>
                  <p>
                     <emph>Start-item:</emph> (Optional) Bound to the first item
  in the window.</p>
               </item>

               <item>
                  <p>
                     <emph>Start-item-position:</emph> (Optional) Bound to the
  ordinal position of the first window item in the <termref
                        def="dt-binding-sequence"
                        >binding
  sequence</termref>. <emph>Start-item-position</emph> is a <termref
                        def="dt-positional-variable"
                        >positional variable</termref>; hence, its type
  is <code>xs:integer</code>
                  </p>
               </item>

               <item>
                  <p>
                     <emph>Start-previous-item:</emph> (Optional) Bound to the
  item in the <termref
                        def="dt-binding-sequence"
                     >binding
  sequence</termref> that precedes the first item in the window (empty
  sequence if none).</p>
               </item>

               <item>
                  <p>
                     <emph>Start-next-item:</emph> (Optional) Bound to the item
  in the <termref
                        def="dt-binding-sequence"
                     >binding sequence</termref>
  that follows the first item in the window (empty sequence if
  none).</p>
               </item>

               <item>
                  <p>
                     <emph>End-item:</emph> (Optional) Bound to the last item in
  the window.</p>
               </item>

               <item>
                  <p>
                     <emph>End-item-position:</emph> (Optional) Bound to the
  ordinal position of the last window item in the <termref
                        def="dt-binding-sequence"
                        >binding
  sequence</termref>. <emph>End-item-position</emph> is a <termref
                        def="dt-positional-variable"
                        >positional variable</termref>; hence, its type
  is <code>xs:integer</code>
                  </p>
               </item>

               <item>
                  <p>
                     <emph>End-previous-item:</emph> (Optional) Bound to the
  item in the <termref
                        def="dt-binding-sequence"
                     >binding
  sequence</termref> that precedes the last item in the window (empty
  sequence if none).</p>
               </item>

               <item>
                  <p>
                     <emph>End-next-item:</emph> (Optional) Bound to the item in
  the <termref
                        def="dt-binding-sequence"
                     >binding sequence</termref>
  that follows the last item in the window (empty sequence if
  none).</p>
               </item>

            </ulist>

            <p>All variables in a <code>window</code> clause must have distinct names;
 otherwise a <termref
                  def="dt-static-error">static error</termref> is raised <errorref class="ST"
                  code="0103"/>.</p>

            <p>The following is an example of a <code>window</code> clause that
binds nine variables to the roles listed above. In this example, the
variables are named <code>$w</code>, <code>$s</code>,
<code>$spos</code>, <code>$sprev</code>, <code>$snext</code>,
<code>$e</code>, <code>$epos</code>, <code>$eprev</code>, and
<code>$enext</code> respectively. A <code>window</code> clause always
binds the window variable, but typically binds only a subset of the
other variables.</p>

            <eg><![CDATA[for tumbling window $w in (2, 4, 6, 8, 10)
    start $s at $spos previous $sprev next $snext when true() 
    end $e at $epos previous $eprev next $enext when true()]]></eg>

            <p>Windows are
created by iterating over the items in the <termref
                  def="dt-binding-sequence"
                  >binding sequence</termref>, in order,
identifying the start item and the end item of each window by
evaluating the <nt
                  def="WindowStartCondition">WindowStartCondition</nt> and the <nt
                  def="WindowEndCondition"
                  >WindowEndCondition</nt>. Each of these
conditions is satisfied if the <termref
                  def="dt-ebv"
                  >effective boolean
value</termref> of the expression following the <code>when</code>
keyword is <code>true</code>.

The start item of the window is an item that satisfies the <nt
                  def="WindowStartCondition">WindowStartCondition</nt> (see <specref
                  ref="id-tumbling-windows"/> and <specref ref="id-sliding-windows"
                  /> for a more complete explanation.) The end item of the window is the first item in the <termref
                  def="dt-binding-sequence"
                  >binding sequence</termref>, beginning with the start item, that satisfies the <nt
                  def="WindowEndCondition">WindowEndCondition</nt> (again, see <specref
                  ref="id-tumbling-windows"/> and <specref ref="id-sliding-windows"
                  /> for more details.) Each window contains its start item, its end
item, and all items that occur between them in the <termref
                  def="dt-binding-sequence"
                  >binding sequence</termref>.
If the end item is the start item, then the window contains only one
item.  If a start item is identified, but no following item in the <termref
                  def="dt-binding-sequence">binding sequence</termref> satisfies the <nt
                  def="WindowEndCondition"
                  >WindowEndCondition</nt>, then the <code>only</code> keyword determines whether a window is
generated: if <code>only end</code> is specified, then no window is
generated; otherwise, the end item is set to the last item in the
<termref
                  def="dt-binding-sequence"
               >binding sequence</termref> and a window is generated.</p>
            <p>In the above example, the <nt def="WindowStartCondition"
                  >WindowStartCondition</nt> and <nt def="WindowEndCondition"
                  >WindowEndCondition</nt> are both <code>true</code>,
which causes each item in the <termref
                  def="dt-binding-sequence"
                  >binding sequence</termref> to be in a separate window. 
Typically, the <nt
                  def="WindowStartCondition">WindowStartCondition</nt> and <nt
                  def="WindowEndCondition"
                  >WindowEndCondition</nt> are expressed in terms of bound variables. For example, the following <nt
                  def="WindowStartCondition"
                  >WindowStartCondition</nt> might be used to start a new window for every item in the <termref
                  def="dt-binding-sequence"
               >binding sequence</termref> that is larger than both the previous item and the following item:</p>
            <eg><![CDATA[start $s previous $sprev next $snext
   when $s &gt; $sprev and $s &gt; $snext]]></eg>
            <p>The scoping rules for the variables bound by a <code>window</code> clause are as follows:</p>
            <ulist>



               <item>
                  <p>In the <code>when</code>-expression of the <nt def="WindowStartCondition"
                        >WindowStartCondition</nt>, the following variables (identified here by their roles) are in scope (if bound): <emph>start-item, start-item-position, start-previous-item, start-next-item.</emph>
                  </p>
               </item>



               <item>
                  <p>In the <code>when</code>-expression of the <nt def="WindowEndCondition"
                        >WindowEndCondition</nt>, the following variables (identified here by their roles) are in scope (if bound): <emph>start-item, start-item-position, start-previous-item, start-next-item, end-item, end-item-position, end-previous-item, end-next-item.</emph>
                  </p>
               </item>



               <item>
                  <p>In the clauses of the FLWOR expression that follow the <code>window</code> clause, all nine of the variables bound by the <code>window</code> clause (including <emph>window-variable</emph>) are in scope (if bound).</p>
               </item>
            </ulist>
            <p>In a <code>window</code> clause, the keyword <code>tumbling</code> or <code>sliding</code> determines the way in which the starting item of each window is identified, as explained in the following sections.</p>
            <div4 id="id-tumbling-windows">
               <head>Tumbling Windows</head>



               <p>If the window type is <code>tumbling</code>, then windows
never overlap. The search for the start of the first window begins at the beginning of the <termref
                     def="dt-binding-sequence"
                     >binding sequence</termref>. After each window is generated, the search
for the start of the next window begins with the item in the <termref
                     def="dt-binding-sequence"
                     >binding sequence</termref> that occurs after the ending item of the last generated
window. Thus, no item that occurs in one window can occur in another
window drawn from the same <termref
                     def="dt-binding-sequence"
                     >binding sequence</termref> (unless the sequence contains the same item more than once). 
In a tumbling window clause,
the <code>end</code> clause is optional; if it is omitted, the
<code>start</code> clause is applied to identify all potential
starting items in the <termref
                     def="dt-binding-sequence"
                     >binding sequence</termref>, and a window is constructed
for each starting item, including all items from that starting item up
to the item before the next window's starting item, or the end of the
<termref
                     def="dt-binding-sequence"
                  >binding sequence</termref>, whichever comes first.</p>
               <p>The following examples illustrate the use of tumbling windows.</p>
               <ulist>



                  <item>
                     <p>Show non-overlapping windows of three items.</p>
                     <eg role="parse-test"><![CDATA[for tumbling window $w in (2, 4, 6, 8, 10, 12, 14)
    start at $s when fn:true()
    only end at $e when $e - $s eq 2
return <window>{ $w }</window>]]></eg>

                     <p>Result of the above query:</p>
                     <eg><![CDATA[<window>2 4 6</window>
<window>8 10 12</window>]]></eg>
                  </item>



                  <item>
                     <p>Show averages of non-overlapping three-item windows.</p>
                     <eg role="parse-test"><![CDATA[
for tumbling window $w in (2, 4, 6, 8, 10, 12, 14)
    start at $s when fn:true()
    only end at $e when $e - $s eq 2
return avg($w)]]></eg>

                     <p>Result of the above query:</p>
                     <eg><![CDATA[4 10]]></eg>
                  </item>



                  <item>
                     <p>Show first and last items in each window of three items.</p>
                     <eg role="parse-test"><![CDATA[for tumbling window $w in (2, 4, 6, 8, 10, 12, 14)
    start $first at $s when fn:true()
    only end $last at $e when $e - $s eq 2
return <window>{ $first, $last }</window>]]></eg>

                     <p>Result of the above query:</p>
                     <eg><![CDATA[<window>2 6</window>
<window>8 12</window>]]></eg>
                  </item>



                  <item>
                     <p>Show non-overlapping windows of up to three items (illustrates <code>end</code> clause without the <code>only</code> keyword).</p>
                     <eg role="parse-test"><![CDATA[for tumbling window $w in (2, 4, 6, 8, 10, 12, 14)
    start at $s when fn:true()
    end at $e when $e - $s eq 2
return <window>{ $w }</window>]]></eg>

                     <p>Result of the above query:</p>
                     <eg><![CDATA[<window>2 4 6</window>
<window>8 10 12</window>
<window>14</window>]]></eg>
                  </item>



                  <item>
                     <p>Show non-overlapping windows of up to three items (illustrates use of <code>start</code> without explicit <code>end</code>).</p>
                     <eg role="parse-test"><![CDATA[for tumbling window $w in (2, 4, 6, 8, 10, 12, 14)
    start at $s when $s mod 3 = 1
return <window>{ $w }</window>]]></eg>

                     <p>Result of the above query:</p>
                     <eg><![CDATA[<window>2 4 6</window>
<window>8 10 12</window>
<window>14</window>]]></eg>
                  </item>



                  <item>
                     <p>Show non-overlapping sequences starting with a number divisible by 3.</p>

                     <eg role="parse-test"><![CDATA[for tumbling window $w in (2, 4, 6, 8, 10, 12, 14)
    start $first when $first mod 3 = 0
return <window>{ $w }</window>]]></eg>

                     <p>Result of the above query:</p>
                     <eg><![CDATA[<window>6 8 10</window>
<window>12 14</window>]]></eg>
                  </item>
               </ulist>










            </div4>
            <div4 id="id-sliding-windows">
               <head>Sliding Windows</head>

               <p>If the window type is <code>sliding window</code>, then windows may
overlap. Every item in the <termref
                     def="dt-binding-sequence">binding sequence</termref> that satisfies the <nt
                     def="WindowStartCondition"
                     >WindowStartCondition</nt> is the starting item of a new window. Thus, a given
item may be found in multiple windows drawn from the same <termref
                     def="dt-binding-sequence">binding sequence</termref>.</p>
               <p>The following examples illustrate the use of sliding windows.</p>


               <ulist>



                  <item>
                     <p>Show windows of three items.</p>
                     <eg role="parse-test"><![CDATA[for sliding window $w in (2, 4, 6, 8, 10, 12, 14)
    start at $s when fn:true()
    only end at $e when $e - $s eq 2
return <window>{ $w }</window>]]></eg>

                     <p>Result of the above query:</p>

                     <eg><![CDATA[<window>2 4 6</window>
<window>4 6 8</window>
<window>6 8 10</window>
<window>8 10 12</window>
<window>10 12 14</window>]]></eg>
                  </item>



                  <item>
                     <p>Show moving averages of three items.</p>

                     <eg role="parse-test"><![CDATA[for sliding window $w in (2, 4, 6, 8, 10, 12, 14)
    start at $s when fn:true()
    only end at $e when $e - $s eq 2
return avg($w)]]></eg>

                     <p>Result of the above query:</p>
                     <eg><![CDATA[4 6 8 10 12]]></eg>
                  </item>



                  <item>
                     <p>Show overlapping windows of up to three items (illustrates <code>end</code> clause without the <code>only</code> keyword).</p>

                     <eg role="parse-test"><![CDATA[for sliding window $w in (2, 4, 6, 8, 10, 12, 14)
    start at $s when fn:true()
    end at $e when $e - $s eq 2
return <window>{ $w }</window>]]></eg>

                     <p>Result of the above query:</p>
                     <eg><![CDATA[<window>2 4 6</window>
<window>4 6 8</window>
<window>6 8 10</window>
<window>8 10 12</window>
<window>10 12 14</window>
<window>12 14</window>
<window>14</window>]]></eg>
                  </item>
               </ulist>





            </div4>
            <div4 id="id-effects-of-window-clauses">
               <head>Effects of Window Clauses on the Tuple Stream</head>
               <p>The effects of a <code>window</code> clause on the tuple stream are similar to the effects of a <code>for</code> clause. As described in <specref
                     ref="id-windows"
                  />, a <code>window</code> clause generates zero or more windows, each of which is represented by at least one and at most nine bound variables.</p>
               <p>If the <code>window</code> clause is the initial clause in a FLWOR expression, the bound variables that describe each window become an output tuple. These tuples form the initial tuple stream that serves as input to the next clause of the FLWOR expression. If <termref
                     def="dt-ordering-mode"
                     >ordering mode</termref> is <code>ordered</code>, the order of tuples in the tuple stream is the
order in which their start items appear in the <termref
                     def="dt-binding-sequence"
                     >binding sequence</termref>; otherwise the order of the tuple stream is <termref
                     def="dt-implementation-dependent"
                  >implementation-dependent</termref>. The cardinality of the tuple stream is equal to the number of windows.</p>
               <p>If a <code>window</code> clause is an intermediate clause in a FLWOR expression, each input tuple generates zero or more output tuples, each consisting of  the original bound variables of the input tuple plus the new bound variables that represent one of the generated windows. For each tuple <emph>T</emph> in the input tuple stream, the output tuple stream will contain <emph>N<sub>T</sub>
                  </emph> tuples, where <emph>N<sub>T</sub>
                  </emph> is the number of windows generated by the <code>window</code> clause, given the bindings in the input tuple <emph>T</emph>. Input tuples for which no windows are generated are not represented in the output tuple stream. If <termref
                     def="dt-ordering-mode"
                     >ordering mode</termref> is <code>ordered</code>, the order of tuples in the output stream is determined primarily by the order of the input tuples from which they were derived, and secondarily by the order in which their start items appear in the <termref
                     def="dt-binding-sequence">binding sequence</termref>. If <termref
                     def="dt-ordering-mode"
                     >ordering mode</termref> is <code>unordered</code>, the order of tuples in the output stream is <termref
                     def="dt-implementation-dependent">implementation-dependent</termref>.</p>
               <p>The following example illustrates a <code>window</code> clause that is the initial clause in a FLWOR expression. The example is based on input data that consists of a sequence of closing stock prices for a specific company. For this example we assume the following input data (assume that the <code>price</code> elements have a validated type of <code>xs:decimal</code>):</p>
               <eg><![CDATA[<stock>
  <closing> <date>2008-01-01</date> <price>105</price> </closing>
  <closing> <date>2008-01-02</date> <price>101</price> </closing>
  <closing> <date>2008-01-03</date> <price>102</price> </closing>
  <closing> <date>2008-01-04</date> <price>103</price> </closing>
  <closing> <date>2008-01-05</date> <price>102</price> </closing>
  <closing> <date>2008-01-06</date> <price>104</price> </closing>
</stock>]]></eg>
               <p>A user wishes to find "run-ups," which are defined as sequences of dates that begin with a "low" and end with a "high" price (that is, the stock price begins to rise on the first day of the run-up, and continues to rise or remain even through the last day of the run-up.) The following query uses a tumbling window to find run-ups in the input data:</p>
               <eg role="parse-test"><![CDATA[for tumbling window $w in //closing
   start $first next $second when $first/price &lt; $second/price
   end $last next $beyond when $last/price &gt; $beyond/price
return
   &lt;run-up&gt;
      &lt;start-date&gt;{fn:data($first/date)}&lt;/start-date&gt;
      &lt;start-price&gt;{fn:data($first/price)}&lt;/start-price&gt;
      &lt;end-date&gt;{fn:data($last/date)}&lt;/end-date&gt;
      &lt;end-price&gt;{fn:data($last/price)}&lt;/end-price&gt;
   &lt;/run-up&gt;]]></eg>
               <p>For our sample input data, this <code>tumbling window</code> clause generates a tuple stream consisting of two tuples, each representing a window and containing five bound variables named <code>$w</code>, <code>$first</code>, <code>$second</code>, <code>$last</code>, and <code>$beyond</code>. The <code>return</code> clause is evaluated for each of these tuples, generating the following query result:</p>
               <eg><![CDATA[&lt;run-up&gt;
   &lt;start-date&gt;2008-01-02&lt;/start-date&gt;
   &lt;start-price&gt;101&lt;/start-price&gt;
   &lt;end-date&gt;2008-01-04&lt;/end-date&gt;
   &lt;end-price&gt;103&lt;/end-price&gt;
&lt;/run-up&gt;
&lt;run-up&gt;
   &lt;start-date&gt;2008-01-05&lt;/start-date&gt;
   &lt;start-price&gt;102&lt;/start-price&gt;
   &lt;end-date&gt;2008-01-06&lt;/end-date&gt;
   &lt;end-price&gt;104&lt;/end-price&gt;
&lt;/run-up&gt;]]></eg>
               <p>The following example illustrates a <code>window</code> clause that is an intermediate clause in a FLWOR expression. In this example, the input data contains closing stock prices for several different companies, each identified by a three-letter symbol. We assume the following input data (again assuming that the type of the <code>price</code> element is <code>xs:decimal</code>):</p>
               <eg><![CDATA[<stocks>
  <closing> <symbol>ABC</symbol> <date>2008-01-01</date> <price>105</price> </closing>
  <closing> <symbol>DEF</symbol> <date>2008-01-01</date> <price>057</price> </closing>
  <closing> <symbol>ABC</symbol> <date>2008-01-02</date> <price>101</price> </closing>
  <closing> <symbol>DEF</symbol> <date>2008-01-02</date> <price>054</price> </closing>
  <closing> <symbol>ABC</symbol> <date>2008-01-03</date> <price>102</price> </closing>
  <closing> <symbol>DEF</symbol> <date>2008-01-03</date> <price>056</price> </closing>
  <closing> <symbol>ABC</symbol> <date>2008-01-04</date> <price>103</price> </closing>
  <closing> <symbol>DEF</symbol> <date>2008-01-04</date> <price>052</price> </closing>
  <closing> <symbol>ABC</symbol> <date>2008-01-05</date> <price>101</price> </closing>
  <closing> <symbol>DEF</symbol> <date>2008-01-05</date> <price>055</price> </closing>
  <closing> <symbol>ABC</symbol> <date>2008-01-06</date> <price>104</price> </closing>
  <closing> <symbol>DEF</symbol> <date>2008-01-06</date> <price>059</price> </closing>
</stocks>]]></eg>
               <p>As in the previous example, we want to find "run-ups," which are defined as sequences of dates that begin with a "low" and end with a "high" price for a specific company. In this example, however, the input data consists of stock prices for multiple companies. Therefore it is necessary to isolate the stock prices of each company before forming windows. This can be accomplished by an initial <code>for</code> and <code>let</code> clause, followed by a <code>window</code> clause, as follows:</p>
               <eg role="parse-test"><![CDATA[for $symbol in fn:distinct-values(//symbol)
let $closings := //closing[symbol = $symbol]
for tumbling window $w in $closings
   start $first next $second when $first/price &lt; $second/price
   end $last next $beyond when $last/price &gt; $beyond/price
return
   &lt;run-up symbol="{$symbol}"&gt;
      &lt;start-date&gt;{fn:data($first/date)}&lt;/start-date&gt;
      &lt;start-price&gt;{fn:data($first/price)}&lt;/start-price&gt;
      &lt;end-date&gt;{fn:data($last/date)}&lt;/end-date&gt;
      &lt;end-price&gt;{fn:data($last/price)}&lt;/end-price&gt;
   &lt;/run-up&gt;]]></eg>
               <note>
                  <p>In the above example, the <code>for</code> and <code>let</code> clauses could be rewritten as follows:</p>
                  <eg><![CDATA[for $closings in //closing
let $symbol := $closings/symbol
group by $symbol]]></eg>
                  <p>The <code>group by</code> clause is described in <specref ref="id-group-by"
                     />.</p>
               </note>
               <p>The <code>for</code> and <code>let</code> clauses in this query generate an initial tuple stream consisting of two tuples. In the first tuple, <code>$symbol</code> is bound to "ABC" and <code>$closings</code> is bound to the sequence of <code>closing</code> elements for company ABC. In the second tuple, <code>$symbol</code> is bound to "DEF" and <code>$closings</code> is bound to the sequence of <code>closing</code> elements for company DEF.</p>
               <p>The <code>window</code> clause operates on this initial tuple stream, generating two windows for the first tuple and two windows for the second tuple. The result is a tuple stream consisting of four tuples, each with the following bound variables: <code>$symbol</code>, <code>$closings</code>, <code>$w</code>, <code>$first</code>, <code>$second</code>, <code>$last</code>, and <code>$beyond</code>. The <code>return</code> clause is then evaluated for each of these tuples, generating the following query result:</p>
               <eg><![CDATA[&lt;run-up symbol="ABC"&gt;
   &lt;start-date&gt;2008-01-02&lt;/start-date&gt;
   &lt;start-price&gt;101&lt;/start-price&gt;
   &lt;end-date&gt;2008-01-04&lt;/end-date&gt;
   &lt;end-price&gt;103&lt;/end-price&gt;
&lt;/run-up&gt;
&lt;run-up symbol="ABC"&gt;
   &lt;start-date&gt;2008-01-05&lt;/start-date&gt;
   &lt;start-price&gt;101&lt;/start-price&gt;
   &lt;end-date&gt;2008-01-06&lt;/end-date&gt;
   &lt;end-price&gt;104&lt;/end-price&gt;
&lt;/run-up&gt;
&lt;run-up symbol="DEF"&gt;
   &lt;start-date&gt;2008-01-02&lt;/start-date&gt;
   &lt;start-price&gt;054&lt;/start-price&gt;
   &lt;end-date&gt;2008-01-03&lt;/end-date&gt;
   &lt;end-price&gt;056&lt;/end-price&gt;
&lt;/run-up&gt;
&lt;run-up symbol="DEF"&gt;
   &lt;start-date&gt;2008-01-04&lt;/start-date&gt;
   &lt;start-price&gt;052&lt;/start-price&gt;
   &lt;end-date&gt;2008-01-06&lt;/end-date&gt;
   &lt;end-price&gt;059&lt;/end-price&gt;
&lt;/run-up&gt;]]></eg>
            </div4>
         </div3>


         <div3 id="id-where">
            <head>Where Clause</head>
            <scrap>
               <head/>
               <prodrecap ref="WhereClause"/>
            </scrap>
            <p>A <code>where</code> clause serves as a filter for the tuples in its input tuple stream. The expression in the <code>where</code> clause, called the <term>where-expression</term>, is evaluated once for
each of these tuples. If the <termref
                  def="dt-ebv"
                  >effective boolean value</termref> of the
where-expression is <code>true</code>, the tuple is retained in the output tuple stream; otherwise the tuple is discarded.</p>
            <p>Examples:</p>
            <ulist>



               <item>
                  <p>This example illustrates the effect of a <code>where</code> clause on a tuple stream:</p>
                  <p>Input tuple stream:</p>
                  <eg><![CDATA[($a = 5, $b = 11)
($a = 91, $b = 42)
($a = 17, $b = 30)
($a = 85, $b = 63)]]></eg>
                  <p>
                     <code>where</code> clause:</p>
                  <eg><![CDATA[where $a &gt; $b]]></eg>
                  <p>Output tuple stream:</p>
                  <eg><![CDATA[($a = 91, $b = 42)
($a = 85, $b = 63)]]></eg>
               </item>



               <item>
                  <p>The following query illustrates how a <code>where</code> clause might be used with a <termref
                        def="dt-positional-variable"
                     >positional variable</termref> to perform sampling on an input sequence. The query returns one value out of each one hundred input values.</p>
                  <eg role="parse-test">
                     <phrase role="parse-test"
                        >for $x at $i in $inputvalues
where $i mod 100 = 0
return $x</phrase>
                  </eg>
               </item>
            </ulist>
         </div3>

         <div3 id="id-count">
            <head>Count Clause</head>
            <scrap>
               <head/>
               <prodrecap ref="CountClause"/>
            </scrap>

            <p>The purpose of a <code>count</code> clause is to enhance the tuple
stream with a new variable that is bound, in each tuple, to the
ordinal position of that tuple in the tuple stream. The name of the
new variable is specified in the <code>count</code> clause.</p>

            <p>The output tuple stream of a <code>count</code> clause is the same
as its input tuple stream, with each tuple enhanced by one additional
variable that is bound to the ordinal position of that tuple in the
tuple stream. However, if the name of the new variable is the same as
the name of an existing variable in the input tuple stream, the new
variable occludes (replaces) the existing variable of the same name,
and the number of bound variables in each tuple is unchanged.</p>

            <p>The following examples illustrate uses of the <code>count</code> clause:</p>


            <ulist>



               <item>
                  <p>This example illustrates the effect of a <code>count</code> clause on an input tuple stream:</p>
                  <p>Input tuple stream:</p>
                  <eg><![CDATA[($name = "Bob", $age = 21)
($name = "Carol", $age = 19)
($name = "Ted", $age = 20)
($name = "Alice", $age = 22)]]></eg>
                  <p>
                     <code>count</code> clause:</p>
                  <eg><![CDATA[count $counter]]></eg>
                  <p>Output tuple stream:</p>
                  <eg><![CDATA[($name = "Bob", $age = 21, $counter = 1)
($name = "Carol", $age = 19, $counter = 2)
($name = "Ted", $age = 20, $counter = 3)
($name = "Alice", $age = 22, $counter = 4)]]></eg>
               </item>





               <item>
                  <p>This example illustrates how a counter might be used to filter the result of a query. The query ranks products in order by decreasing sales, and returns the three products with the highest sales. Assume that the variable <code>$products</code> is bound to a sequence of <code>product</code> elements, each of which has <code>name</code> and <code>sales</code> child-elements.</p>
                  <eg role="parse-test"><![CDATA[for $p in $products
order by $p/sales descending
count $rank
where $rank &lt;= 3
return
   &lt;product rank="{$rank}"&gt;
      {$p/name, $p/sales}
   &lt;/product&gt;]]></eg>
                  <p>The result of this query has the following structure:</p>
                  <eg><![CDATA[&lt;product rank="1"&gt;
   &lt;name&gt;Toaster&lt;/name&gt;
   &lt;sales&gt;968&lt;/sales&gt;
&lt;/product&gt;
&lt;product rank="2"&gt;
   &lt;name&gt;Blender&lt;/name&gt;
   &lt;sales&gt;520&lt;/sales&gt;
&lt;/product&gt;
&lt;product rank="3"&gt;
   &lt;name&gt;Can Opener&lt;/name&gt;
   &lt;sales&gt;475&lt;/sales&gt;
&lt;/product&gt;]]></eg>
               </item>
            </ulist>
         </div3>

         <div3 id="id-group-by">
            <head>Group By Clause</head>
            <scrap>
               <head/>
               <prodrecap ref="GroupByClause"/>
               <prodrecap ref="GroupingSpecList"/>
               <prodrecap ref="GroupingSpec"/>
               <prodrecap ref="GroupingVariable"/>
            </scrap>


            <p>A <code>group by</code> clause generates an output tuple stream in which each tuple represents a group of tuples from the input tuple stream
that have equivalent grouping keys. 
We will refer to the tuples in the input tuple stream as  <term>pre-grouping tuples</term>, and the tuples in the output tuple stream as <term>post-grouping tuples</term>.</p>

            <p>The <code>group by</code> clause assigns each pre-grouping tuple to a group, and
generates one post-grouping tuple for each group. 

In the post-grouping tuple for a group, each grouping key is represented by a variable that was specified in a <nt
                  def="GroupingSpec"
               >GroupingSpec</nt>, and every variable that appears in the pre-grouping tuples that were assigned to that group is represented by a variable of the same name, bound to a sequence of all values bound to the variable in any of these pre-grouping tuples.

Subsequent clauses in the FLWOR expression see only the variable
bindings in the post-grouping tuples; they no longer have access to
the variable bindings in the pre-grouping tuples. 
The number of post-grouping tuples is less than or equal to
the number of pre-grouping tuples.</p>

            <p>A <code>group by</code> clause contains one or more <nt def="GroupingSpec"
                  >grouping specifications</nt>, as shown in the grammar. <termdef
                  id="dt-grouping-variable" term="grouping variable"
                     >Each grouping specification specifies one <nt def="GroupingVariable"
                     >grouping variable</nt>, which refers to variable bindings in the pre-grouping tuples. The values of the grouping variables are used to assign pre-grouping tuples to groups.</termdef> Each grouping specification may optionally provide an expression to which its grouping variable is bound.  If no expression is provided, the grouping variable name must be equal (by the <code>eq</code> operator on <termref
                  def="dt-expanded-qname"
                  >expanded QNames</termref>) to the name of a variable in the input tuple stream, and it refers to that variable; otherwise a <termref
                  def="dt-static-error">static error</termref> is raised <errorref class="ST"
                  code="0094"
                  />. For each grouping specification that contains a binding expression, a <code>let</code> binding is created in the pre-grouping tuples, and the grouping variable refers to that <code>let</code> binding. For example, the clause:</p>

            <eg><![CDATA[group by $g1, $g2 := $expr1, $g3 := $expr2 collation "Spanish"]]></eg>

            <p>is semantically equivalent to the following sequence of clauses:</p>

            <eg><![CDATA[let $g2 := $expr1
let $g3 := $expr2
group by $g1, $g2, $g3 collation "Spanish"]]></eg>

            <p>The process of group formation proceeds as follows:

<olist> <item>
                     <p>
                        <termdef term="grouping key" id="dt-grouping-key"
                              >The
  atomized value of a <termref def="dt-grouping-variable"
                              >grouping
  variable</termref> is called a <term>grouping key</term>.</termdef>
  For each pre-grouping tuple, the <termref
                           def="dt-grouping-key">grouping keys</termref> are created by
  <termref
                           def="dt-atomization">atomizing</termref> the values of the
  <termref
                           def="dt-grouping-variable"
                           >grouping variables</termref> (in
  the post-grouping tuples, each grouping variable is set to the value
  of the corresponding grouping key, as discussed below).

  If the value of any <termref
                           def="dt-grouping-variable"
                           >grouping variable</termref> consists of
  more than one item, a <termref
                           def="dt-type-error">type
  error</termref> is raised <errorref class="TY"
                           code="0004"
                           />. If a type declaration is present
  and the resulting atomized value is not an instance of the specified
  type, a <termref
                           def="dt-type-error">type error</termref> is raised
  <errorref class="TY"
                           code="0004"/>.</p>
                  </item> <item>
                     <p>The input tuple stream is partitioned into groups of tuples
  whose grouping keys are <termref
                           def="dt-equivalent-grouping-keys">equivalent</termref>. <termdef
                           id="dt-equivalent-grouping-keys" term="equivalent grouping keys"
                              >Two
  tuples <var>T1</var> and <var>T2</var> have <term>equivalent
  grouping keys</term> if and only if, for each grouping variable
  <var>GV</var>, the atomized value of <var>GV</var> in <var>T1</var>
  is deep-equal to the atomized value of <var>GV</var> in
  <var>T2</var>, as defined by applying the function
  <function>fn:deep-equal</function> using the appropriate
  collation.</termdef>

  If these values are of different numeric types, and differ from
  each other by small amounts, then the deep-equal relationship is not
  transitive, because of rounding effects occurring during type
  promotion. When comparing three values <code>A</code>,
  <code>B</code>, and <code>C</code> such that <code>A eq B</code>,
  <code>B eq C</code>, but <code>A ne C</code>, then the number of
  items in the result of the function (as well as the choice of which
  items are returned) is <termref
                           def="dt-implementation-dependent"
                           >implementation-dependent</termref>,
  subject only to the constraints that (a) no two items in the result
  sequence compare equal to each other, and (b) every input item that
  does not appear in the result sequence compares equal to some item
  that does appear in the result sequence. See <xspecref
                           spec="FO31" ref="func-distinct-values"
                        /> for further discussion of
  this issue in a different context.</p> <note>
                        <p>The atomized grouping key will always be either an empty
     sequence or a single atomic value. Defining equivalence by
     reference to the <function>fn:deep-equal</function> function
     ensures that the empty sequence is equivalent only to the empty
     sequence, that <code>NaN</code> is equivalent to
     <code>NaN</code>, that untypedAtomic values are compared as
     strings, and that values for which the <code>eq</code> operator
     is not defined are considered
     non-equivalent.</p>
                     </note> </item> <item>
                     <p>The appropriate collation for comparing two grouping keys is the collation
   specified in the pertinent <nt
                           def="GroupingSpec"
                           >GroupingSpec</nt> if present, or the default collation
   from the static context otherwise. If the collation is specified by a relative
   URI, that relative URI is  <termref
                           def="dt-resolve-relative-uri"
                           >resolved to
   an absolute URI</termref> using the <termref
                           def="dt-static-base-uri"
                           >Static Base URI</termref>.
   If the specified collation is not found in statically known
   collations, a static error is raised  <errorref
                           class="ST" code="0076"/>.</p>
                  </item> </olist>
            </p>



            <p>Each group of tuples produced by the above process results in one
post-grouping tuple. The pre-grouping tuples from which the group is
derived have <emph>equivalent</emph>
               <termref def="dt-grouping-key"
                  >grouping keys</termref>, but these keys are not
necessarily identical (for example, the strings "Frog" and "frog"
might be <emph>equivalent</emph> according to the collation in use.)

In the post-grouping tuple, each <termref
                  def="dt-grouping-variable"
               >grouping variable</termref> is bound to the
value of the corresponding grouping key. 
</p>

            <p>In the post-grouping tuple generated for a given group, each
non-grouping variable is bound to a sequence containing the
concatenated values of that variable in all the pre-grouping tuples
that were assigned to that group. If <termref
                  def="dt-ordering-mode"
                  >ordering mode</termref> is
<code>ordered</code>, the values derived from individual tuples are
concatenated in a way that preserves the order of the pre-grouping
tuple stream; otherwise the ordering of these values is <termref
                  def="dt-implementation-dependent">implementation-dependent</termref>.</p>


            <note>
               <p>This behavior may be surprising to SQL programmers, since SQL reduces
the equivalent of a non-grouping variable to one representative
value. Consider the following query:</p>

               <eg role="parse-test"><![CDATA[let $x := 64000
for $c in //customer
where $c/salary > $x
group by $d := $c/department
return
<department name="{$d}">
   Number of employees earning more than ${$x} is {count($c)}
</department>]]></eg>

               <p>If there are three qualifying customers in the sales department this
evaluates to:</p>

               <eg><![CDATA[

<department name="sales">
  Number of employees earning more than $64000 64000 64000 is 3
</department>]]></eg>

               <p>In XQuery, each group is a sequence of items that match the group
by criteria&mdash;in a tree-structured language like XQuery, this is
convenient, because further structures can be built based on the items
in this sequence. Because there are three items in the group,
<code>$x</code> evaluates to a sequence of three items. To reduce this
to one item, use <code>fn:distinct-values()</code>:</p>

               <eg role="parse-test"><![CDATA[
let $x := 64000
for $c in //customer
let $d := $c/department
where $c/salary > $x
group by $d
return
 <department name="{$d}">
  Number of employees earning more than ${distinct-values($x)} is {count($c)}
 </department>]]></eg>

            </note>

            <note>
               <p>In general, the <termref def="dt-static-type"
                     >static
type</termref> of a variable in a post-grouping tuple is different
from the <termref
                     def="dt-static-type"
                  >static type</termref> of the
variable with the same name in the pre-grouping
tuples.</p>
            </note>
            <p>The order in which tuples appear in the
post-grouping tuple stream is <termref
                  def="dt-implementation-dependent">implementation-dependent</termref>.</p>
            <note>
               <p>An
<code>order by</code> clause can be used to impose a value-based
ordering on the post-grouping tuple stream. Similarly, if it is
desired to impose a value-based ordering within a group (i.e., on the
sequence of items bound to a non-grouping variable), this can be
accomplished by a nested FLWOR expression that iterates over these
items and applies an <code>order by</code> clause. In some cases, a
value-based ordering within groups can be accomplished by applying an
<code>order by</code> clause on a non-grouping variable before
applying the <code>group by</code> clause.</p>
            </note>
            <p>A <code>group
by</code> clause rebinds all the variables in the input tuple
stream. The scopes of these variables are not affected by the
<code>group by</code> clause, but in post-grouping tuples the values
of the variables represent group properties rather than properties of
individual pre-grouping tuples.</p>

            <p>Examples:</p>
            <ulist>
               <item>
                  <p>This example illustrates the effect of a <code>group by</code> clause on a tuple stream.</p>

                  <p>Input tuple stream:</p>

                  <eg><![CDATA[($storeno = &lt;storeno&gt;S101&lt;/storeno&gt;, $itemno = &lt;itemno&gt;P78395&lt;/itemno&gt;)
($storeno = &lt;storeno&gt;S102&lt;/storeno&gt;, $itemno = &lt;itemno&gt;P94738&lt;/itemno&gt;)
($storeno = &lt;storeno&gt;S101&lt;/storeno&gt;, $itemno = &lt;itemno&gt;P41653&lt;/itemno&gt;)
($storeno = &lt;storeno&gt;S102&lt;/storeno&gt;, $itemno = &lt;itemno&gt;P70421&lt;/itemno&gt;)
]]></eg>

                  <p>
                     <code>group by</code> clause:</p>

                  <eg><![CDATA[group by $storeno]]></eg>

                  <p>Output tuple stream:</p>

                  <eg><![CDATA[($storeno = S101, $itemno = (&lt;itemno&gt;P78395&lt;/itemno&gt;, &lt;itemno&gt;P41653&lt;/itemno&gt;))
($storeno = S102, $itemno = (&lt;itemno&gt;P94738&lt;/itemno&gt;, &lt;itemno&gt;P70421&lt;/itemno&gt;))]]></eg>
               </item>
            </ulist>
            <ulist>



               <item>
                  <p>This example and the ones that follow are based on two separate sequences of elements, named <code>$sales</code> and <code>$products</code>. We assume that the variable <code>$sales</code> is bound to a sequence of elements with the following structure:</p>
                  <eg><![CDATA[&lt;sales&gt;
   &lt;storeno&gt;S101&lt;/storeno&gt;
   &lt;itemno&gt;P78395&lt;/itemno&gt;
   &lt;qty&gt;125&lt;/qty&gt;
&lt;/sales&gt;]]></eg>
                  <p>We also assume that the variable <code>$products</code> is bound to a sequence of  elements with the following structure:</p>
                  <eg><![CDATA[&lt;product&gt;
   &lt;itemno&gt;P78395&lt;/itemno&gt;
   &lt;price&gt;25.00&lt;/price&gt;
   &lt;category&gt;Men's Wear&lt;/category&gt;
&lt;/product&gt;]]></eg>
                  <p>The simplest kind of grouping query has a single <termref
                        def="dt-grouping-variable"
                     >grouping variable</termref>. The query in this example finds the total quantity of items sold by each store:</p>
                  <eg role="parse-test"><![CDATA[for $s in $sales
let $storeno := $s/storeno
group by $storeno
return &lt;store number="{$storeno}" total-qty="{sum($s/qty)}"/&gt;]]></eg>
                  <p>The result of this query is a sequence of elements with the following structure:</p>
                  <eg><![CDATA[&lt;store number="S101" total-qty="1550" /&gt;
&lt;store number="S102" total-qty="2125" /&gt;]]></eg>
               </item>



               <item>
                  <p>In a more realistic example, a user might be interested in the total revenue generated by each store for each product category. Revenue depends on both the quantity sold of various items and the price of each item. The following query joins the two input sequences and groups the resulting tuples by two <termref
                        def="dt-grouping-variable">grouping variables</termref>:</p>

                  <eg role="parse-test"><![CDATA[
for $s in $sales,
    $p in $products[itemno = $s/itemno]
let $revenue := $s/qty * $p/price
group by $storeno := $s/storeno, 
    $category := $p/category
return
    &lt;summary storeno="{$storeno}"
              category="{$category}"
              revenue="{sum($revenue)}"/>
]]></eg>


                  <p>The result of this query is a sequence of elements with the following structure:</p>
                  <eg><![CDATA[&lt;summary storeno="S101" category="Men's Wear" revenue="10185"/&gt;
&lt;summary storeno="S101" category="Stationery" revenue="4520"/&gt;
&lt;summary storeno="S102" category="Men's Wear" revenue="9750"/&gt;
&lt;summary storeno="S102" category="Appliances" revenue="22650"/&gt;
&lt;summary storeno="S102" category="Jewelry" revenue="30750"/&gt;]]></eg>
               </item>



               <item>
                  <p>The result of the previous example was a "flat" list of elements. A user might prefer the query result to be presented in the form of a  hierarchical report, grouped primarily by store (in order by store number) and secondarily by product category. Within each store, the user might want to see only those product categories whose total revenue exceeds $10,000, presented in descending order by their total revenue. This report is generated by the following query:</p>
                  <eg role="parse-test"><![CDATA[for $s1 in $sales
let $storeno := $s1/storeno
group by $storeno
order by $storeno
return
  &lt;store storeno="{$storeno}"&gt;
    {for $s2 in $s1,
         $p in $products[itemno = $s2/itemno]
     let $category := $p/category,
         $revenue := $s2/qty * $p/price
     group by $category
     let $group-revenue := sum($revenue)
     where $group-revenue &gt; 10000
     order by $group-revenue descending
     return &lt;category name="{$category}" revenue="{$group-revenue}"/&gt;
    }
  &lt;/store&gt;
]]></eg>
                  <p>The result of this example query has the following structure:</p>
                  <eg><![CDATA[&lt;store storeno="S101"&gt;
   &lt;category name="Men's Wear" revenue="10185"/&gt;
&lt;/store&gt;
&lt;store storeno="S102"&gt;
   &lt;category name="Jewelry" revenue="30750"/&gt;
   &lt;category name="Appliances" revenue="22650"/&gt;
&lt;/store&gt;]]></eg>
               </item>



               <item>
                  <p>The following example illustrates how to avoid a possible pitfall in writing grouping queries.</p>

                  <p>In each post-grouping tuple, all variables except for the grouping
variable are bound to sequences of items derived from all the
pre-grouping tuples from which the group was formed. For instance, in
the following query, <code>$high-price</code> is bound to a sequence
of items in the post-grouping tuple.</p>

                  <eg role="parse-test"><![CDATA[let $high-price := 1000
for $p in $products[price &gt; $high-price]
let $category := $p/category
group by $category
return
   &lt;category name="{$category}"&gt;
      {fn:count($p)} products have price greater than {$high-price}.
   &lt;/category&gt;]]></eg>
                  <p>If three products in the "Men's Wear" category have prices greater than 1000, the result of this query might look (in part) like this:</p>
                  <eg><![CDATA[&lt;category name="Men's Wear"&gt;
   3 products have price greater than 1000 1000 1000.
&lt;/category&gt;]]></eg>
                  <p>The repetition of "1000" in this query result is due to the fact that <code>$high-price</code> is not a <termref
                        def="dt-grouping-variable"
                        >grouping variable</termref>. One way to avoid this repetition is to move the binding of <code>$high-price</code> to an outer-level FLWOR expression, as follows:</p>
                  <eg role="parse-test"><![CDATA[let $high-price := 1000
return
   for $p in $products[price &gt; $high-price]
   let $category := $p/category
   group by $category
   return
      &lt;category name="{$category}"&gt;
         {fn:count($p)} products have price greater than {$high-price}.
      &lt;/category&gt;]]></eg>
                  <p>The result of the revised query might contain the following element:</p>
                  <eg><![CDATA[&lt;category name="Men's Wear"&gt;
   3 products have price greater than 1000.
&lt;/category&gt;]]></eg>
               </item>
            </ulist>
         </div3>
         <div3 id="id-order-by-clause">
            <head>Order By Clause</head>
            <scrap>
               <head/>
               <prodrecap ref="OrderByClause"/>
               <prodrecap ref="OrderSpecList"/>
               <prodrecap ref="OrderSpec"/>
               <prodrecap ref="OrderModifier"/>

            </scrap>
            <p>The purpose of an <code>order by</code> clause is to impose a value-based ordering on the tuples in the tuple stream. The output tuple stream of the <code>order by</code> clause contains the same tuples as its input tuple stream, but the tuples may be in a different order.</p>
            <p>An <code>order by</code> clause contains one or more ordering specifications, called <nt
                  def="OrderSpec"
                  >orderspecs</nt>, as shown in the grammar. For each tuple in the input tuple stream, the orderspecs are evaluated, using the variable bindings in that tuple. The relative order of two tuples is determined by comparing the values of their orderspecs, working from left to right until a pair of unequal values is encountered. If an orderspec specifies a <termref
                  def="dt-collation"
                  >collation</termref>, that collation is used in comparing values of type <code>xs:string</code>, <code>xs:anyURI</code>, or types derived from them (otherwise, the <termref
                  def="dt-def-collation"
                  >default collation</termref> is used in comparing values of these types). If an orderspec specifies a collation by a relative URI, that relative URI is  <termref
                  def="dt-resolve-relative-uri"
                  >resolved to an absolute URI</termref> using the <termref def="dt-static-base-uri"
                  >Static Base URI</termref>. 
If an orderspec specifies a collation that is not found in <termref
                  def="dt-static-collations"
                  >statically known collations</termref>, an error is raised <errorref class="ST"
                  code="0076"/>.</p>
            <p>The process of evaluating and comparing the orderspecs is based on
the following rules:</p>

            <ulist>

               <item>
                  <p>
                     <termref def="dt-atomization"
                        >Atomization</termref> is applied to the result of the expression
    in each orderspec.  If the result of atomization is neither a single atomic value nor an empty sequence, a <termref
                        def="dt-type-error">type error</termref> is raised <errorref class="TY"
                        code="0004"/>.</p>
               </item>


               <item>
                  <p>If the value of an orderspec has the <termref def="dt-dynamic-type"
                        >dynamic type</termref>
                     <code>xs:untypedAtomic</code> (such as character
    data in a schemaless document), it is cast to the type <code>xs:string</code>.</p>
                  <note>
                     <p>Consistently treating untyped values as strings enables the sorting process to begin without complete knowledge of the types of all the values to be sorted.</p>
                  </note>
               </item>




               <item>
                  <p>If the resulting sequence contains values that are instances of more than one primitive type (meaning the 19 primitive types defined in <xspecref
                        spec="XS2" ref="built-in-primitive-datatypes"/>, then:</p>
                  <olist>
                     <item>
                        <p>If each value is an instance of one of the types <code>xs:string</code> or <code>xs:anyURI</code>, then all values are cast to type <code>xs:string</code>.</p>
                     </item>
                     <item>
                        <p>If each value is an instance of one of the types <code>xs:decimal</code> or <code>xs:float</code>, then all values are cast to type <code>xs:float</code>.</p>
                     </item>
                     <item>
                        <p>If each value is an instance of one of the types <code>xs:decimal</code>, <code>xs:float</code>, or <code>xs:double</code>, then all values are cast to type <code>xs:double</code>.</p>
                     </item>
                     <item>
                        <p>Otherwise, a <termref def="dt-type-error"
                              >type error</termref> is raised <errorref class="TY" code="0004"
                           />.</p>
                        <note>
                           <p>The primitive type of an <code>xs:integer</code> value for this purpose is <code>xs:decimal</code>.</p>
                        </note>
                     </item>
                  </olist>
               </item>
            </ulist>


            <!-- <change diff="chg" at="XQ.E17"> -->
            <p>For the purpose of determining their relative position in the ordering sequence, the <emph>greater-than</emph>
             relationship between two orderspec values <emph>W</emph> and <emph>V</emph> is defined as follows:</p>
            <ulist>
               <item>
                  <p>When the orderspec specifies <code>empty least</code>,
                   the following rules are applied in order:
                </p>
                  <olist>
                     <item>
                        <p>If <emph>V</emph> is an empty sequence and <emph>W</emph> is not an empty sequence,
                         then <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V </emph> is true.</p>
                     </item>
                     <item>
                        <p>If <emph>V</emph> is <code>NaN</code> and <emph>W</emph> is neither <code>NaN</code>
                         nor an empty sequence, then
                         <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V</emph> is true.</p>
                     </item>
                     <item>
                        <p>If a specific collation <emph>C</emph> is specified, and <emph>V</emph> and <emph>W</emph> are
                         both of type <code>xs:string</code> or are convertible to
                         <code>xs:string</code> by <termref
                              def="dt-subtype-substitution"
                              >subtype substitution</termref> and/or <termref
                              def="dt-type-promotion">type promotion</termref>, then:</p>
                        <p>If <code>fn:compare(V, W, C)</code> is less than
                         zero, then <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V</emph> is true; otherwise <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V</emph> is false.</p>
                     </item>
                     <item>
                        <p>If none of the above rules apply, then:</p>
                        <p>If <code>W gt V</code> is true,
                         then <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V</emph> is true; otherwise <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V</emph> is false.</p>
                     </item>
                  </olist>
               </item>
               <item>
                  <p>When the orderspec specifies <code>empty greatest</code>,
                   the following rules are applied in order:
                </p>
                  <olist>
                     <item>
                        <p>If <emph>W</emph> is an empty sequence and <emph>V</emph> is not an empty sequence,
                         then <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V</emph> is true.</p>
                     </item>
                     <item>
                        <p>If <emph>W</emph> is <code>NaN</code> and <emph>V</emph> is neither <code>NaN</code>
                         nor an empty sequence, then
                         <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V</emph> is true.</p>
                     </item>
                     <item>
                        <p>If a specific collation <emph>C</emph> is specified, and <emph>V</emph> and <emph>W</emph> are
                         both of type <code>xs:string</code> or are convertible to
                         <code>xs:string</code> by <termref
                              def="dt-subtype-substitution"
                              >subtype substitution</termref> and/or <termref
                              def="dt-type-promotion">type promotion</termref>, then:</p>
                        <p>If <code>fn:compare(V, W, C)</code> is less than
                         zero, then <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V</emph> is true; otherwise <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V</emph> is false.</p>
                     </item>
                     <item>
                        <p>If none of the above rules apply, then:</p>
                        <p>If <code>W gt V</code> is true,
                         then <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V</emph> is true; otherwise <emph>W</emph>
                           <emph>greater-than</emph>
                           <emph>V</emph> is false.</p>
                     </item>
                  </olist>
               </item>
               <item>
                  <p>When the orderspec specifies neither <code>empty least</code>
                   nor <code>empty greatest</code>, the
                   <termref
                        def="dt-default-empty-order"
                        >default order for empty
                   sequences</termref> in the
                   <termref
                        def="dt-static-context"
                        >static context</termref>
                   determines whether the rules for <code>empty least</code>
                   or <code>empty greatest</code> are used.
                </p>
               </item>
            </ulist>
            <!-- </change> -->

            <p>If <emph>T1</emph> and <emph>T2</emph> are two tuples in the input tuple stream, and <emph>V1</emph> and <emph>V2</emph> are the first pair of  values encountered when evaluating their orderspecs  from left to right for which one value is <emph>greater-than</emph> the other (as defined above), then:</p>


            <olist>




               <item>
                  <p>If <emph>V1</emph> is <emph>greater-than</emph>
                     <emph>V2:</emph> If the orderspec specifies <code>descending</code>, then <emph>T1</emph> precedes <emph>T2</emph> in the output tuple stream; otherwise, <emph>T2</emph> precedes <emph>T1</emph> in the output tuple stream.</p>
               </item>



               <item>
                  <p>If <emph>V2</emph> is <emph>greater-than</emph>
                     <emph>V1</emph>: If the orderspec specifies <code>descending</code>, then <emph>T2</emph> precedes <emph>T1</emph> in the output tuple stream; otherwise, <emph>T1</emph> precedes <emph>T2</emph> in the output tuple stream.</p>
               </item>



            </olist>
            <p>If neither <emph>V1</emph> nor <emph>V2</emph> is <emph>greater-than</emph> the other for any pair of orderspecs for tuples <emph>T1</emph> and <emph>T2</emph>, the following rules apply.</p>

            <olist>



               <item>
                  <p>If <code>stable</code> is specified, the original order of <emph>T1</emph> and <emph>T2</emph> is preserved in the output tuple stream.</p>
               </item>



               <item>
                  <p>If <code>stable</code> is not specified, the order of <emph>T1</emph> and <emph>T2</emph> in the output tuple stream is <termref
                        def="dt-implementation-dependent">implementation-dependent</termref>.</p>
               </item>
            </olist>
            <note>
               <p>If two orderspecs return the special floating-point values positive and negative zero, neither of these values is <emph>greater-than</emph> the other, since <code
                     role="parse-test">+0.0 gt -0.0</code> and <code role="parse-test"
                     >-0.0 gt +0.0</code> are both <code>false</code>.</p>
            </note>
            <p>Examples:</p>
            <ulist>



               <item>
                  <p>This example illustrates the effect of an <code>order by</code> clause on a tuple stream. The keyword <code>stable</code> indicates that, when two tuples have equal sort keys, their order in the input tuple stream is preserved.</p>
                  <p>Input tuple stream:</p>
                  <eg><![CDATA[($license = "PFQ519", $make = "Ford",  $value = 16500)
($license = "HAJ865", $make = "Honda", $value = 22750)
($license = "NKV473", $make = "Ford",  $value = 21650)
($license = "RCM922", $make = "Dodge", $value = 11400)
($license = "ZBX240", $make = "Ford",  $value = 16500)
($license = "KLM030", $make = "Dodge", $value = () )]]></eg>
                  <p>
                     <code>order by</code> clause:</p>
                  <eg><![CDATA[stable order by $make,
   $value descending empty least]]></eg>
                  <p>Output tuple stream:</p>
                  <eg><![CDATA[($license = "RCM922", $make = "Dodge", $value = 11400)
($license = "KLM030", $make = "Dodge", $value = () )
($license = "NKV473", $make = "Ford",  $value = 21650)
($license = "PFQ519", $make = "Ford",  $value = 16500)
($license = "ZBX240", $make = "Ford",  $value = 16500)
($license = "HAJ865", $make = "Honda", $value = 22750)]]></eg>
               </item>



               <item>
                  <p>The following example shows how an <code>order by</code> clause can be used to sort the result of a query, even if the sort key is not included in the query result. This query returns employee names in descending order by salary, without returning the actual salaries:</p>
                  <eg role="parse-test"><![CDATA[for $e in $employees
order by $e/salary descending
return $e/name]]></eg>

               </item>
            </ulist>
            <note>
               <p>
An alternative way of sorting is available from XQuery 3.1 using the <code>fn:sort</code> function. In previous versions of the language, a set of books might be sorted into alphabetic order by title using the FLWOR expression:</p>

               <eg role="parse-test"><![CDATA[for $b in $books/book[price &lt; 100]
order by $b/title
return $b]]></eg>

               <p>In XQuery 3.1 the same effect can be achieved using the expression:</p>

               <eg role="parse-test"><![CDATA[
sort(
  $books/book[price &lt; 100],
  function($book){ $book/title }
)
]]></eg>
            </note>


         </div3>
         <div3 id="id-return-clause">
            <head>Return Clause</head>
            <scrap>
               <head/>


               <prodrecap ref="ReturnClause"/>
            </scrap>
            <p>The <code>return</code> clause is the final clause of a FLWOR expression. The <code>return</code> clause is evaluated once for each tuple in its input tuple stream,  using the variable bindings in the respective tuples, in the order in which these tuples appear in the input tuple stream. The results of these evaluations are concatenated, as if by the <termref
                  def="dt-comma-operator"
               >comma operator</termref>, to form the result of the FLWOR expression.</p>
            <p>The following example illustrates a FLWOR expression containing several clauses. The <code>for</code> clause iterates over all the departments in an input document named <code>depts.xml</code>, binding the variable <code>$d</code> to each department  in turn. For each binding of <code>$d</code>, the <code>let</code> clause binds variable <code>$e</code> to all the employees in the given department, selected from another input document named <code>emps.xml</code> (the relationship between employees and departments is represented by matching their <code>deptno</code> values). Each tuple in the resulting tuple stream contains a pair of bindings for <code>$d</code> and <code>$e</code> (<code>$d</code> is bound to a department and <code>$e</code> is bound to a set of employees in that department). The <code>where</code> clause filters the tuple stream, retaining only those tuples that represent departments having at least ten employees. The <code>order by</code> clause orders the surviving tuples in descending order by the average salary of the employees in the department. The <code>return</code> clause constructs a new <code>big-dept</code> element for each surviving tuple, containing the department number, headcount, and average salary.</p>
            <eg role="parse-test"><![CDATA[for $d in fn:doc("depts.xml")//dept
let $e := fn:doc("emps.xml")//emp[deptno eq $d/deptno]
where fn:count($e) >= 10
order by fn:avg($e/salary) descending
return
   <big-dept>
      {
      $d/deptno,
      <headcount>{fn:count($e)}</headcount>,
      <avgsal>{fn:avg($e/salary)}</avgsal>
      }
   </big-dept>]]></eg>
            <notes>
               <ulist>



                  <item>
                     <p>The order in which items appear in the result of a FLWOR expression depends on the ordering of the input tuple stream to the <code>return</code> clause, which in turn is influenced by <code>order by</code> clauses and by <termref
                           def="dt-ordering-mode"
                        >ordering mode</termref>. For example, consider the following query, which is based on the same two input documents as the previous example:</p>
                     <eg role="parse-test"><![CDATA[for $d in fn:doc("depts.xml")//dept
order by $d/deptno
for $e in fn:doc("emps.xml")//emp[deptno eq $d/deptno]
return
   &lt;assignment&gt;
      {$d/deptno, $e/name}
   &lt;/assignment&gt;]]></eg>
                     <p>The result of this query is a sequence of <code>assignment</code> elements, each containing a <code>deptno</code> element and a <code>name</code> element. The sequence will be ordered primarily by the <code>deptno</code> values because of the <code>order by</code> clause. If <termref
                           def="dt-ordering-mode"
                           >ordering mode</termref> is <code>ordered</code>, subsequences of <code>assignment</code> elements with equal <code>deptno</code> values will be ordered by the document order of their <code>name</code> elements within the <code>emps.xml</code> document; otherwise the ordering of these subsequences will be <termref
                           def="dt-implementation-dependent">implementation-dependent</termref>.</p>
                  </item>

                  <item>
                     <p>Parentheses are helpful in <code>return</code> clauses that contain comma operators,
since FLWOR expressions have a higher precedence than the comma
operator. For example, the following query raises an error because
after the comma, <code>$j</code> is no longer within the FLWOR expression, and is an
undefined variable:</p>
                     <eg role="parse-test"><![CDATA[let $i := 5,
    $j := 20 * $i
return $i, $j]]></eg>
                     <p>Parentheses can be used to bring <code>$j</code> into the <code>return</code> clause of the FLWOR expression, as the
programmer probably intended:</p>
                     <eg role="parse-test"><![CDATA[let $i := 5,
    $j := 20 * $i
return ($i, $j)]]></eg>
                  </item>
               </ulist>
            </notes>
         </div3>
      </div2>
      <div2 role="xquery" id="id-unordered-expressions">
         <head>Ordered and Unordered Expressions</head>
         <scrap>
            <head/>
            <prodrecap id="OrderedExpr" ref="OrderedExpr"/>
            <prodrecap id="UnorderedExpr" ref="UnorderedExpr"/>
            <prodrecap ref="EnclosedExpr"/>
         </scrap>
         <p>The purpose of <code>ordered</code> and <code>unordered</code> expressions is to set the <termref
               def="dt-ordering-mode">ordering mode</termref> in the <termref
               def="dt-static-context"
               >static context</termref> to <code>ordered</code> or <code>unordered</code> for the <termref
               def="dt-content-expression"
               >content expression</termref>.  For expressions where the ordering of the result is not significant, a performance advantage may be realized by setting the ordering mode to <code>unordered</code>, thereby granting the system flexibility to return the result in the order that it finds most efficient.</p>

         <p>
            <termref def="dt-ordering-mode">Ordering mode</termref> affects the behavior of <termref
               def="dt-path-expression"
               >path expressions</termref> that include a "<code>/</code>" or "<code>//</code>" operator or an <termref
               def="dt-axis-step"
               >axis step</termref>; <code>union</code>, <code>intersect</code>, and <code>except</code> expressions; the <code>fn:id</code>, <code>fn:element-with-id</code>, and <code>fn:idref</code> functions; and certain clauses within a FLWOR expression. If ordering mode is <code>ordered</code>, node sequences returned by path expressions, <code>union</code>, <code>intersect</code>, and <code>except</code> expressions, and the <code>fn:id</code> and <code>fn:idref</code> functions are in <termref
               def="dt-document-order"
               >document order</termref>; otherwise the order of these return sequences is <termref
               def="dt-implementation-dependent"
               >implementation-dependent</termref>. The effect of ordering mode on FLWOR expressions is described in <specref
               ref="id-xquery-for-clause"/>, <specref ref="id-effects-of-window-clauses"
               />, and <specref ref="id-group-by"
            />. Ordering mode has no effect on duplicate elimination.</p>

         <note>
            <p>In a region of a query where ordering mode is <code>unordered</code>, the result of an expression is <termref
                  def="dt-implementation-dependent"
                  >implementation-dependent</termref> if the expression invokes certain functions that are affected by the ordering of node sequences. These functions include <code>fn:position</code>, <code>fn:last</code>, <code>fn:index-of</code>, <code>fn:insert-before</code>, <code>fn:remove</code>, <code>fn:reverse</code>, and <code>fn:subsequence</code>. 
The functions <code>fn:boolean</code> and <code>fn:not</code> are <termref
                  def="dt-implementation-dependent"
                  >implementation-dependent</termref> if ordering mode is <code>unordered</code> and the argument contains at least one node and at least one atomic value (see <specref
                  ref="id-ebv"/>). 

Also, within a <termref def="dt-path-expression"
                  >path expression</termref> in an  unordered region, <termref
                  def="dt-numeric-predicate">numeric predicates</termref> are <termref
                  def="dt-implementation-dependent"
                  >implementation-dependent</termref>. For example, in an ordered region, the path expression <code
                  role="parse-test"
                  >(//a/b)[5]</code> will return the fifth qualifying <code>b</code>-element in <termref
                  def="dt-document-order"
                  >document order</termref>. In an unordered region, the same expression will return an <termref
                  def="dt-implementation-dependent"
                  >implementation-dependent</termref> qualifying <code>b</code>-element.</p>
         </note>
         <note>
            <p>The <code>fn:id</code> and <code>fn:idref</code> functions are described in <bibref
                  ref="xpath-functions-40"/> as returning their results in <termref
                  def="dt-document-order"
                  >document order</termref>. Since ordering mode is a feature of XQuery, relaxation of the ordering requirement for function results when ordering mode is <code>unordered</code> is a feature of XQuery rather than of the functions themselves.</p>
         </note>


         <p>The use of an <code>unordered</code> expression is illustrated by the following example, which joins together two documents named <code>parts.xml</code> and <code>suppliers.xml</code>. The example returns the part numbers of red parts, paired with the supplier numbers of suppliers who supply these parts. If an <code>unordered</code> expression were not used, the resulting list of (part number, supplier number) pairs would be required to have an ordering that is controlled primarily by the <termref
               def="dt-document-order"
               >document order</termref> of <code>parts.xml</code> and secondarily by the <termref
               def="dt-document-order"
               >document order</termref> of <code>suppliers.xml</code>. However, this might not be the most efficient way to process the query if the ordering of the result is not important. An XQuery implementation might be able to process the query more efficiently by using an index to find the red parts, or by using <code>suppliers.xml</code> rather than <code>parts.xml</code> to control the primary ordering of the result. The <code>unordered</code> expression gives the query evaluator freedom to make these kinds of optimizations.</p>
         <eg role="parse-test"><![CDATA[unordered {
  for $p in fn:doc("parts.xml")/parts/part[color = "Red"],
      $s in fn:doc("suppliers.xml")/suppliers/supplier
  where $p/suppno = $s/suppno
  return
    <ps>
       { $p/partno, $s/suppno }
    </ps>
}]]></eg>
         <p>In addition to <code>ordered</code> and <code>unordered</code> expressions, XQuery provides a function named <code>fn:unordered</code> that operates on any sequence of items and returns the same sequence in an <termref
               def="dt-implementation-defined"
               >implementation-defined</termref> order. A call to the <code>fn:unordered</code> function may be thought of as giving permission for the argument expression to be materialized in whatever order the system finds most efficient. The <code>fn:unordered</code> function relaxes ordering only for the sequence that is its immediate operand, whereas an <code>unordered</code> expression sets the <termref
               def="dt-ordering-mode"
            >ordering mode</termref> for its operand expression and all nested expressions.</p>
      </div2>

      <div2 id="id-conditionals">
         <head>Conditional Expressions</head>
         <p>&language; provides a conditional expression based on the keywords <code>if</code>, <code>then</code>, and <code>else</code>.</p>
         <p diff="add" at="A">In addition, it provides a more concise syntax as a ternary expression using the operators <code>??</code>
         and <code>!!</code></p>
         <scrap>
            <head/>
            <prodrecap id="IfExpr" ref="IfExpr"/>
            <prodrecap id="TernaryConditionalExpr" ref="TernaryConditionalExpr"/>
         </scrap>
         
         <p diff="add" at="A">Both constructs have the same semantics. There are three expressions, called the <term>test expression</term>,
            the <term>then-expression</term>, and the the <term>else-expression</term>.
         </p>
         <p diff="add" at="A">With the keyword syntax, the format is:</p>
         <eg diff="add" at="A">if (test-expression) then then-expression else else-expression</eg>
         <p diff="add" at="A">With the ternary operator syntax, the format is:</p>
         <eg diff="add" at="A">test-expression ?? then-expression !! else-expression</eg>
         
         <note><p>The ternary operator syntax is borrowed from Perl6.</p></note>
         
         <p>The first step in processing a conditional expression is to find
the <termref
               def="dt-ebv"
               >effective boolean value</termref> of the test expression, as defined in <specref
               ref="id-ebv"/>.</p>

         <p>The value of a conditional expression is defined as follows: If the
effective boolean value of the test expression is <code>true</code>, the value of the then-expression is returned. If the
effective boolean value of the test expression is <code>false</code>,
the value of the else-expression is returned.</p>
         <p>Conditional expressions have a special rule for propagating <termref
               def="dt-dynamic-error"
               >dynamic errors</termref>. If the effective value of the test expression is <code>true</code>, the conditional expression ignores (does not raise) any dynamic errors encountered in the else-expression. In this case, since the else-expression can have no observable effect, it need not be evaluated. Similarly, if the effective value of the test expression is <code>false</code>, the conditional expression ignores any <termref
               def="dt-dynamic-error"
            >dynamic errors</termref> encountered in the then-expression, and the then-expression need not be evaluated.</p>
         <p>Here are some examples of conditional expressions:</p>

         <ulist>




            <item>
               <p>In this example, the test expression is a comparison expression:</p>
               <eg role="parse-test"><![CDATA[if ($widget1/unit-cost &lt; $widget2/unit-cost)
  then $widget1
  else $widget2]]></eg>
            </item>




            <item>
               <p>In this example, the test expression tests for the existence of an attribute
named <code>discounted</code>, independently of its value:</p>
               <eg role="parse-test"><![CDATA[if ($part/@discounted)
  then $part/wholesale
  else $part/retail]]></eg>
            </item>
            
            <item diff="add" at="A">
               <p>The above example can instead be written:</p>
               <eg role="parse-test">$part/(@discounted ?? wholesale !! retail)</eg>
               <p>(Note: the equivalence holds only if <code>$part</code> is a single item.)</p>
            </item>
         </ulist>
      </div2>

      <div2 id="id-otherwise" diff="add" at="A">
         <head>Otherwise Expression</head>
         <scrap>
            <head/>
            <prodrecap id="OtherwiseExpr" ref="OtherwiseExpr"/>
         </scrap>

         <p>The <code>otherwise</code> expression returns the value of its first operand, unless this is an empty
         sequence, in which case it returns the value of its second operand.</p>

         <p>For example, <code>@price - (@discount otherwise 0)</code> returns the value of <code>@price - @discount</code>,
         if the attribute <code>@discount</code> exists, or the value of <code>@price</code> if the <code>@discount</code>
            attribute is absent.</p>

         <p>To prevent spurious errors, the right hand operand <rfc2119>must not</rfc2119> be evaluated unless
         the left-hand operand returns an empty sequence.</p>

         <note>
            <p>The operator is associative (even under error conditions): <code>A otherwise (B otherwise C)</code> returns
         the same result as <code>(A otherwise B) otherwise C</code>.</p>
         </note>
      </div2>
      <div2 id="id-switch" role="xquery">
         <head>Switch Expression</head>
         <scrap>
            <head/>
            <prodrecap id="SwitchExpr" ref="SwitchExpr"/>
            <prodrecap id="SwitchCaseClause" ref="SwitchCaseClause"/>
            <prodrecap id="SwitchCaseOperand" ref="SwitchCaseOperand"/>
         </scrap>
         <p>
The <term>switch expression</term> chooses one of several expressions to evaluate based on the
input value.
</p>
         <p>
In a <code>switch</code> expression, the <code>switch</code> keyword is followed by an expression enclosed
in parentheses, called the <term>switch operand expression</term>. This is the expression whose value is
being compared. The remainder of the <code>switch</code> expression consists of one or more
<code>case</code> clauses, with one or more <code>case operand
expressions</code> each, and a <code>default</code> clause. </p>


         <p>The first step in evaluating a switch expression is to apply
atomization to the value of the switch operand expression. If the
result is a sequence of length greater than one, a type error is
raised <errorref
               class="TY" code="0004"/>.</p>

         <p>The resulting value is matched against each <nt def="SwitchCaseOperand"
               >SwitchCaseOperand</nt> in turn until a
match is found or the list is exhausted. The matching is performed as follows:</p>

         <olist>
            <item>
               <p>The <nt def="SwitchCaseOperand">SwitchCaseOperand</nt> is evaluated.</p>
            </item>
            <item>
               <p>The resulting value is atomized.</p>
            </item>
            <item>
               <p>If the atomized sequence has length greater than one, a type error is raised
 <errorref
                     class="TY" code="0004"/>.</p>
            </item>
            <item>
               <p>The atomized value of the switch operand expression is compared with the
atomized value of the <nt
                     def="SwitchCaseOperand"
                     >SwitchCaseOperand</nt> using the <function>fn:deep-equal</function> function,
with the default collation from the static context.</p>
            </item>
         </olist>

         <p>
            <termdef id="id-effective-case-switch-expression" term="effective case"
                  > The <term>effective case</term> of a switch expression is the
first case clause that matches, using the rules given above, or the
default clause if no such case clause exists.</termdef> The value of
the switch expression is the value of the return expression in the
effective case.</p>

         <p>Switch expressions have rules regarding the propagation of dynamic
errors that take precedence over the general rules given in <specref
               ref="id-errors-and-opt"
            />.

The return clauses of a switch expression must not raise any dynamic
errors except in the effective case.  Dynamic errors raised in the
operand expressions of the switch or the case clauses are propagated;
however, an implementation must not raise dynamic errors in the
operand expressions of case clauses that occur after the effective
case. An implementation is permitted to raise dynamic errors in the
operand expressions of case clauses that occur before the effective
case, but not required to do so.</p>

         <p>The following example shows how a switch expression might be used:</p>

         <eg role="parse-test"><![CDATA[
switch ($animal)
   case "Cow" return "Moo"
   case "Cat" return "Meow"
   case "Duck" return "Quack"
   default return "What's that odd noise?"
 ]]></eg>
      </div2>

      <div2 id="id-quantified-expressions">
         <head>Quantified Expressions</head>
         <p>Quantified expressions support existential and universal quantification. The
value of a quantified expression is always <code>true</code> or <code>false</code>.</p>
         <scrap>
            <head/>
            <prodrecap id="QuantifiedExpr" ref="QuantifiedExpr"/>
            <prodrecap id="QuantifierBinding" ref="QuantifierBinding"/>
            <prodrecap ref="TypeDeclaration" role="xquery"/>
         </scrap>
         <p>A <term>quantified expression</term> begins with
a <term>quantifier</term>, which is the keyword <code>some</code> or <code>every</code>, followed by one or more in-clauses that are used to bind variables,
followed by the keyword <code>satisfies</code> and a test expression. Each in-clause associates a variable with an
expression that returns a sequence of items, called the binding sequence for that variable. 
The value of the quantified expression is defined by the following rules:</p>


         <olist>

            <item><p>If the <nt def="QuantifiedExpr">QuantifiedExpr</nt> contains
               more than one <nt def="QuantifierBinding">QuantifierBinding</nt>, then it is equivalent
            to the expression obtained by replacing each comma with <code>satisfies some</code> or <code>satisfies every</code>
            respectively. For example, the expression <code>some $x in X, $y in Y satisfies $x = $y</code>
               is equivalent to <code>some $x in X satisfies some $y in Y satisfies $x = $y</code>,
               while the expression <code>every $x in X, $y in Y satisfies $x lt $y</code> is equivalent to
               <code>every $x in X satisfies every $y in Y satisfies $x lt $y</code></p></item>


            <item>
               <p>If the quantifier is <code>some</code>, the <nt def="QuantifiedExpr">QuantifiedExpr</nt> returns <code>true</code> 
                  if at least one evaluation of the test expression has the <termref
                     def="dt-ebv">effective boolean value</termref>
                  <code>true</code>; otherwise it returns <code>false</code>. In consequence, if the binding sequence is empty, 
                  the result of the <nt def="QuantifiedExpr">QuantifiedExpr</nt> is <code>false</code>.</p>
            </item>

            <item>
               <p>If the quantifier is <code>every</code>, the <nt def="QuantifiedExpr">QuantifiedExpr</nt> returns <code>true</code> 
                  if every evaluation of the test expression has the <termref
                     def="dt-ebv">effective boolean value</termref>
                  <code>true</code>; otherwise it returns <code>false</code>. In consequence, if the binding sequence is empty, 
                  the result of the <nt def="QuantifiedExpr">QuantifiedExpr</nt> is <code>true</code>.</p>
            </item>
         </olist>


         <p>The scope of a variable bound in a quantified expression comprises all
subexpressions of the quantified expression that appear after the variable binding. The scope does not include the expression to which the variable is bound.
</p>
         <p role="xquery"
               >Each variable bound in an in-clause of a quantified expression may have an optional <nt
               def="TypeDeclaration"
               >type declaration</nt>. If the type of a value bound to the variable does not match the declared type according to the rules for <termref
               def="dt-sequencetype-matching">SequenceType
matching</termref>, a <termref
               def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0004"
            />.</p>
         <p>The order in which test expressions are evaluated for the various binding
tuples is <termref
               def="dt-implementation-dependent"
               >implementation-dependent</termref>. If the quantifier
is <code>some</code>, an implementation may
return <code>true</code> as soon as it finds one binding tuple for which the test expression has
an <termref
               def="dt-ebv"
               >effective boolean value</termref> of <code>true</code>, and it may raise a <termref
               def="dt-dynamic-error"
               >dynamic error</termref> as soon as it finds one binding tuple for
which the test expression raises an error. Similarly, if the quantifier is <code>every</code>, an implementation may return <code>false</code> as soon as it finds one binding tuple for which the test expression has
an <termref
               def="dt-ebv"
               >effective boolean value</termref> of <code>false</code>, and it may raise a <termref
               def="dt-dynamic-error"
            >dynamic error</termref> as soon as it finds one binding tuple for
which the test expression raises an error. As a result of these rules, the
value of a quantified expression is not deterministic in the presence of
errors, as illustrated in the examples below.</p>
         <p>Here are some examples of quantified expressions:</p>

         <ulist>




            <item>
               <p>This expression is <code>true</code> if every <code>part</code> element has a <code>discounted</code> attribute (regardless of the values of these attributes):</p>
               <eg role="parse-test"
                  ><![CDATA[every $part in /parts/part satisfies $part/@discounted]]></eg>
            </item>




            <item>
               <p>This expression is <code>true</code> if at least
one <code>employee</code> element satisfies the given comparison expression:</p>
               <eg role="parse-test"><![CDATA[some $emp in /emps/employee satisfies
     ($emp/bonus &gt; 0.25 * $emp/salary)]]></eg>
            </item>
            
            <item>
               <p>This expression is <code>true</code> if at every
                  <code>employee</code> element has at least one <code>salary</code> child with the attribute <code>current="true"</code>:</p>
               <eg role="parse-test"><![CDATA[every $emp in /emps/employee satisfies
     some $sal in $emp/salary satisfies $sal/@current='true']]></eg>
               <note diff="add" at="A"><p>Like many quantified expressions, this can be simplified. This example can be written
                  <code>every $emp in /emps/employee satisfies $emp/salary[@current='true']</code>, or even
                  more concisely as <code>empty(/emps/employee[not(salary/@current='true')]</code>.</p>
               <p>Another alternative in &language; 4.0 is to use the higher-order functions <code>fn:some</code> and <code>fn:all</code>.
               This example can be written <code>fn:all(/emps/employee, ->(){salary/@current='true'})</code></p>
               </note>
            </item>




            <item>
               <p>In the following examples, each quantified expression evaluates its test
expression over nine pairs of variable bindings, formed from the Cartesian
product of the sequences <code>(1, 2, 3)</code> and <code>(2, 3, 4)</code>. 
                  The expression beginning with <code>some</code> evaluates to <code>true</code>, 
                  and the expression beginning with <code>every</code> evaluates to <code>false</code>.</p>
               <eg role="parse-test"><![CDATA[some $x in (1, 2, 3), $y in (2, 3, 4)
satisfies $x + $y = 4]]></eg>

               <eg role="parse-test"><![CDATA[every $x in (1, 2, 3), $y in (2, 3, 4)
satisfies $x + $y = 4]]></eg>
            </item>

            <item>
               <p>This quantified expression may either return  <code>true</code> or raise a <termref
                     def="dt-type-error"
                     >type error</termref>, since its test expression returns <code>true</code> for one variable binding
and raises a <termref
                     def="dt-type-error">type error</termref> for another:</p>
               <eg role="parse-test"><![CDATA[some $x in (1, 2, "cat") satisfies $x * 2 = 4]]></eg>
            </item>




            <item>
               <p>This quantified expression may either return <code>false</code> or raise a <termref
                     def="dt-type-error"
                     >type error</termref>, since its test expression returns <code>false</code> for one variable binding and raises a <termref
                     def="dt-type-error">type error</termref> for another:</p>
               <eg role="parse-test"><![CDATA[every $x in (1, 2, "cat") satisfies $x * 2 = 4]]></eg>
            </item>




            <item role="xquery">
               <p>This quantified expression  contains a <nt def="TypeDeclaration"
                     >type declaration</nt> that is not satisfied by every item in the  test expression. If the <termref
                     def="dt-static-typing-feature"
                     >Static Typing Feature</termref> is implemented, this expression raises a <termref
                     def="dt-type-error">type error</termref> during the <termref
                     def="dt-static-analysis"
                     >static analysis
phase</termref>. Otherwise, the expression may either return <code>true</code> or raise a <termref
                     def="dt-type-error">type error</termref> during the <termref
                     def="dt-dynamic-evaluation">dynamic evaluation
phase</termref>.</p>
               <eg role="parse-test"
                  ><![CDATA[some $x as xs:integer in (1, 2, "cat") satisfies $x * 2 = 4]]></eg>
            </item>
         </ulist>
      </div2>
      <div2 id="id-try-catch" role="xquery">
         <head>Try/Catch Expressions</head>

         <p>The try/catch expression provides error handling for dynamic errors
and type errors raised during dynamic evaluation, including errors
raised by the XQuery implementation and errors explicitly raised in a
query using the <code>fn:error()</code> function.</p>

         <scrap>
            <head/>
            <prodrecap id="TryCatchExpr" ref="TryCatchExpr"/>
            <prodrecap id="TryClause" ref="TryClause"/>
            <prodrecap id="EnclosedTryTargetExpr" ref="EnclosedTryTargetExpr"/>
            <prodrecap id="CatchClause" ref="CatchClause"/>
            <prodrecap id="CatchErrorList" ref="CatchErrorList"/>
            <prodrecap ref="EnclosedExpr"/>
         </scrap>



         <p>A try/catch expression catches <termref def="dt-dynamic-error"
               >dynamic errors</termref> and
                <termref def="dt-type-error"
               >type errors</termref>
                raised by the evaluation of the target expression of
		the <code>try</code>  clause. If the 
                the <termref
               def="dt-content-expression"
            >content expression</termref> of the try clause does not raise a
                dynamic error or a type error, the result of the
                try/catch expression is the result of the content
                expression.</p>

         <p>If the target expression raises a dynamic error or
                a type error, the result of the try/catch expression
                is obtained by evaluating the first <code>catch</code>
                clause that "matches" the error value, as described
                below.  

		If no catch clause "matches" the
		error value, then the try/catch expression raises the
		error that was raised by the target
		expression.

		A <code>catch</code> clause with one or more
                NameTests matches any error whose error code matches
                one of these NameTests. For instance, if the error
                code is <code>err:FOER0000</code>, then it matches a
                <code>catch</code> clause whose ErrorList is
                <code>err:FOER0000 | err:FOER0001</code>. Wildcards
                may be used in NameTests; thus, the error code
                <code>err:FOER0000</code> also matches a
                <code>catch</code> clause whose ErrorList is
                <code>err:*</code> or <code>*:FOER0000</code> or
                <code>*</code>.</p>


         <p>Within the scope of the <code>catch</code> clause, a
            number of variables are implicitly declared, giving
            information about the error that occurred.  These
            variables are initialized as described in the following
            table:</p>

         <table role="medium">
            <thead>
               <tr>
                  <th align="left">Variable</th>
                  <th align="left">Type</th>
                  <th align="left">Value</th>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <td valign="top">err:code</td>
                  <td valign="top">xs:QName</td>
                  <td valign="top">The error code</td>
               </tr>
               <tr>
                  <td valign="top">err:description</td>
                  <td valign="top">xs:string?</td>
                  <td valign="top"
                        >A description of the error condition; an empty sequence
                     if no description is available (for example, if the <function>error</function>
                     function was called with one argument).</td>
               </tr>
               <tr>
                  <td valign="top">err:value</td>
                  <td valign="top">item()*</td>
                  <td valign="top"
                        >Value associated with the error. For an error raised by
                        calling the <function>error</function> function, this is the value of the
                        third argument (if supplied).</td>
               </tr>
               <tr>
                  <td valign="top">err:module</td>
                  <td valign="top">xs:string?</td>
                  <td valign="top"
                     >The URI (or system ID) of the module containing the
                        expression where the error occurred, or an empty sequence if the information
                        is not available.</td>
               </tr>
               <tr>
                  <td valign="top">err:line-number</td>
                  <td valign="top">xs:integer?</td>
                  <td valign="top"
                        >The line number within the module
                        where the error occurred, or an empty sequence if the information
                        is not available. The value <rfc2119>may</rfc2119> be approximate.</td>
               </tr>
               <tr>
                  <td valign="top">err:column-number</td>
                  <td valign="top">xs:integer?</td>
                  <td valign="top"
                        >The column number within the module
                        where the error occurred, or an empty sequence if the information
                        is not available. The value <rfc2119>may</rfc2119> be approximate.</td>
               </tr>
               <tr>
                  <td valign="top">err:additional</td>
                  <td valign="top">item()*</td>
                  <td valign="top">
                     <termref def="dt-implementation-defined"
                     >Implementation-defined</termref>. This variable must be bound so that a query can reference it without raising an error. The purpose of this variable is to allow implementations to provide any additional information that might be useful.</td>
               </tr>
            </tbody>
         </table>


         <p>Try/catch expressions have a special rule for
                propagating dynamic errors. The try/catch expression
                ignores any dynamic errors encountered in catch
                clauses other than the first catch clause that matches
                an error raised by the try clause, and these catch
                clause expressions need not be evaluated.</p>

         <p>Static errors are not caught by the try/catch
                expression.</p>


         <p>If a function call occurs within a <code>try</code> clause,
                errors raised by evaluating the corresponding function are caught by the try/catch
                expression. If a variable reference is used in a <code>try</code>
                clause, errors raised by binding a value to the variable are not
                caught unless the binding expression occurs within the <code>try</code>
                clause.</p>


         <note>
            <p>The presence of a try/catch expression does not
                  prevent an implementation from using a lazy
                  evaluation strategy, nor does it prevent an
                  optimizer performing expression rewrites. However,
                  if the evaluation of an expression inside a
                  try/catch is rewritten or deferred in this way, it
                  must take its try/catch context with it. Similarly,
                  expressions that were written outside the try/catch
                  expression may be evaluated inside the try/catch,
                  but only if they retain their original try/catch
                  behavior. The presence of a try/catch does not
                  change the rules that allow the processor to
                  evaluate expressions in such a way that may avoid
                  the detection of some errors. </p>
         </note>


         <p>Here are some examples of try/catch expressions.</p>


         <ulist>




            <item>
               <p>A try/catch expression without a CatchErrorList catches any error:</p>

               <eg role="parse-test"><![CDATA[try {
    $x cast as xs:integer
}
catch * {
    0
}]]></eg>
            </item>





            <item>
               <p>The CatchErrorList in this try/catch expression specifies that only <code>err:FORG0001</code> is caught:</p>

               <eg role="parse-test"><![CDATA[try {
    $x cast as xs:integer
}
catch err:FORG0001 {
    0
}]]></eg>
            </item>




            <item>
               <p>The CatchErrorList in this try/catch expression specifies that errors <code>err:FORG0001</code> and <code>err:XPTY0004</code> are caught:</p>


               <eg role="parse-test"><![CDATA[try {
    $x cast as xs:integer
}
catch err:FORG0001 | err:XPTY0004 {
    0
}]]></eg>
               <note>
                  <p>In some implementations, <code>err:XPTY0004</code> is detected during static
	evaluation; it can only be caught if it is raised during dynamic evaluation.</p>
               </note>

            </item>



            <item>
               <p>This try/catch expression shows how to return information about the error using implicitly defined error variables. Since the CatchErrorList is a wildcard, it catches any error:</p>

               <eg role="parse-test"><![CDATA[try {
    fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
}
catch * {
    $err:code, $err:value, " module: ",
    $err:module, "(", $err:line-number, ",", $err:column-number, ")"
}]]></eg>
            </item>



            <item>
               <p>Errors raised by using the result of a try/catch expression are not caught, since they are outside the scope of the <code>try</code> expression.</p>

               <eg role="parse-test"><![CDATA[
declare function local:thrice($x as xs:integer) as xs:integer
{
    3*$x
};

local:thrice(try { "oops" } catch * { 3 } )
]]></eg>
               <p>In this example, the try block succeeds, returning the string "oops", which is not a valid argument to the function.</p>
            </item>
         </ulist>

      </div2>
      <div2 id="id-expressions-on-datatypes">
         <head>Expressions on SequenceTypes</head>

         <p>
The <code>instance
of</code>, <code>cast</code>, <code>castable</code>,
and <code>treat</code> expressions are used to test whether a value
conforms to a given type or to convert it to an instance of a given
type.
</p>



         <div3 id="id-instance-of">
            <head>Instance Of</head>
            <scrap>
               <head/>
               <prodrecap id="InstanceofExpr" ref="InstanceofExpr"/>
            </scrap>
            <p>The boolean
operator <code>instance of</code>
returns <code>true</code> if the value of its first operand matches
the <nt
                  def="SequenceType"
                  >SequenceType</nt> in its second
operand, according to the rules for <termref
                  def="dt-sequencetype-matching"
                  >SequenceType
matching</termref>; otherwise it returns <code>false</code>. For example:</p>

            <ulist>



               <item>
                  <p>
                     <code role="parse-test">5 instance of xs:integer</code>
                  </p>
                  <p>This example returns <code>true</code> because the given value is an instance of the given type.</p>
               </item>



               <item>
                  <p>
                     <code>5 instance of xs:decimal</code>
                  </p>
                  <p>This example returns <code>true</code> because the given value is an integer literal, and <code>xs:integer</code> is derived by restriction from <code>xs:decimal</code>.</p>
               </item>



               <item role="xquery">
                  <p>
                     <code role="parse-test">&lt;a&gt;{5}&lt;/a&gt; instance of xs:integer</code>
                  </p>
                  <p>This example returns <code>false</code> because the given value is an element rather than an integer.</p>
               </item>



               <item>
                  <p>
                     <code role="parse-test">(5, 6) instance of xs:integer+</code>
                  </p>
                  <p>This example returns <code>true</code> because the given sequence contains two integers, and is a valid instance of the specified type.</p>
               </item>



               <item>
                  <p>
                     <code role="parse-test">. instance of element()</code>
                  </p>
                  <p>This example returns <code>true</code> if the context item is an element node or <code>false</code> if the context item is defined but is not an element node. 
  If the context item is <xtermref
                        spec="DM31" ref="dt-absent"/>, a <termref def="dt-dynamic-error"
                        >dynamic error</termref> is raised <errorref class="DY" code="0002"/>.</p>
               </item>
            </ulist>
         </div3>

         <div3 id="id-typeswitch" role="xquery">
            <head>Typeswitch</head>
            <scrap>
               <head/>
               <prodrecap id="TypeswitchExpr" ref="TypeswitchExpr"/>
               <prodrecap id="CaseClause" ref="CaseClause"/>
               <prodrecap id="SequenceTypeUnion" ref="SequenceTypeUnion"/>
            </scrap>
            <p role="xquery"
                  >The <term>typeswitch</term> expression chooses one of
several expressions to evaluate based on the <termref
                  def="dt-dynamic-type">dynamic type</termref> of an input value.</p>

            <p role="xquery"
                  >In a <code>typeswitch</code> expression, the
<code>typeswitch</code> keyword is followed by an expression enclosed
in parentheses, called the <term>operand expression</term>. This is
the expression whose type is being tested. The remainder of the
<code>typeswitch</code> expression consists of one or more
<code>case</code> clauses and a <code>default</code> clause.</p>

            <p role="xquery">Each <code>case</code> clause specifies one or more
<nt
                  def="SequenceType"
                  >SequenceType</nt>s followed by a
<code>return</code> expression. <termdef
                  term="effective case" id="dt-effective-case"
                     >The <term>effective case</term> in a
<code>typeswitch</code> expression is the first <code>case</code>
clause in which the value of the operand expression matches a <nt
                     def="SequenceType">SequenceType</nt> in the <nt def="SequenceType"
                     >SequenceTypeUnion</nt> of the <code>case</code>
clause, using the rules of <termref
                     def="dt-sequencetype-matching"
                  >SequenceType matching</termref>.
</termdef>

The value of the <code>typeswitch</code> expression is the value of
the <code>return</code> expression in the effective case. If the value
of the operand expression does not match any <nt
                  def="SequenceType"
                  >SequenceType</nt> named in a <code>case</code>
clause, the value of the <code>typeswitch</code> expression is the
value of the <code>return</code> expression in the
<code>default</code> clause.</p>
            <p>In a <code>case</code> or
<code>default</code> clause, if the value to be returned depends on
the value of the operand expression, the clause must specify a
variable name. Within the <code>return</code> expression of the
<code>case</code> or <code>default</code> clause, this variable name
is bound to the value of the operand expression.

Inside a <code>case</code> clause, the <termref
                  def="dt-static-type">static type</termref> of the variable is the
union of the <nt
                  def="SequenceType">SequenceType</nt>s named in the
<nt def="SequenceType"
                  >SequenceTypeUnion</nt>.  Inside a
<code>default</code> clause, the static type of the variable is the
same as the static type of the operand expression.

If the value to be returned by a <code>case</code> or
<code>default</code> clause does not depend on the value of the
operand expression, the clause need not specify a variable.</p>
            <p>The
scope of a variable binding in a <code>case</code> or
<code>default</code> clause comprises that clause. It is not an error
for more than one <code>case</code> or <code>default</code> clause in
the same <code>typeswitch</code> expression to bind variables with the
same name.
</p>

            <p>A special rule applies to propagation of <termref def="dt-dynamic-error"
                  >dynamic errors</termref> by <code>typeswitch</code> expressions. A <code>typeswitch</code> expression ignores (does not raise) any dynamic errors encountered in <code>case</code> clauses other than the <termref
                  def="dt-effective-case"
                  >effective case</termref>. Dynamic errors encountered in the <code>default</code> clause are raised only if there is no <termref
                  def="dt-effective-case"
                  >effective case</termref>.
An implementation is permitted to raise dynamic errors in the
operand expressions of case clauses that occur before the  <termref
                  def="dt-effective-case">effective
case</termref>, but not required to do so.</p>

            <p role="xquery"
                  >The following example shows how a <code>typeswitch</code> expression might
be used to process an expression in a way that depends on its <termref
                  def="dt-dynamic-type">dynamic type</termref>.</p>
            <eg role="parse-test"><![CDATA[typeswitch($customer/billing-address)
   case $a as element(*, USAddress) return $a/state
   case $a as element(*, CanadaAddress) return $a/province
   case $a as element(*, JapanAddress) return $a/prefecture
   default return "unknown"
]]></eg>

            <p>The following example shows a union of sequence types in a single case:</p>

            <eg role="parse-test"><![CDATA[typeswitch($customer/billing-address)
   case $a as element(*, USAddress)
            | element(*, AustraliaAddress)
            | element(*, MexicoAddress)
     return $a/state
   case $a as element(*, CanadaAddress)
     return $a/province
   case $a as element(*, JapanAddress)
     return $a/prefecture
   default
     return "unknown"]]></eg>

         </div3>
         <div3 id="id-cast">
            <head>Cast</head>
            <scrap>
               <head/>
               <prodrecap id="CastExpr" ref="CastExpr"/>
               <prodrecap id="SingleType" ref="SingleType"/>
               <prodrecap ref="LocalUnionType"/>
            </scrap>
            <p>Sometimes
it is necessary to convert a value to a specific datatype. For this
purpose, &language; provides a <code>cast</code> expression that
creates a new value of a specific type based on an existing value. A
<code>cast</code> expression takes two operands: an <term>input
expression</term> and a <term>target type</term>. The type of the
atomized value of the input expression is called the <term>input type</term>. 
The <phrase diff="chg" at="A">target type</phrase> must be either of:</p>
            <ulist>
               <item><p>The name of a type defined in the  <termref def="dt-is-types">in-scope schema types</termref>, 
                  which must be a simple type <errorref class="ST" code="0052"/>.
                  In addition, the target type cannot be <code>xs:NOTATION</code>, <code>xs:anySimpleType</code>,
                  or <code>xs:anyAtomicType</code></p></item>
               <item diff="add" at="A"><p>A <code>LocalUnionType</code> such as <code>union(xs:date, xs:dateTime)</code>.</p></item>
            </ulist>
               <p><errorref class="ST" code="0080"
                  />. The optional occurrence indicator "<code>?</code>" denotes that an empty
sequence is permitted. If the target type is a lexical QName that has no namespace prefix, it
is considered to be in the <termref def="dt-def-type-ns" diff="chg" at="A">default type
namespace</termref>.</p>

            <p>Casting a node to <code>xs:QName</code> can cause surprises because it uses the static context of the cast expression to provide the namespace bindings for this operation. 
Instead of casting to <code>xs:QName</code>, it is generally preferable to use the <code>fn:QName</code> function, which allows the namespace context to be taken from the document containing the QName.</p>


            <p>The semantics of the <code>cast</code> expression
are as follows:</p>

            <olist>

               <item>
                  <p>The input expression is evaluated.</p>
               </item>

               <item>
                  <p>The result of the first step is <termref def="dt-atomization"
                        >atomized</termref>.</p>
               </item>


               <item>
                  <p> If the result of atomization is a
sequence of more than one atomic value, a <termref
                        def="dt-type-error">type error</termref> is raised <errorref class="TY"
                        code="0004"/>.</p>
               </item>



               <item>
                  <p>If the result
of atomization is an empty sequence:</p>

                  <olist>



                     <item>
                        <p>If
<code>?</code> is specified after the target type, the result of the
<code>cast</code> expression is an empty sequence.</p>
                     </item>



                     <item>
                        <p>
If <code>?</code> is not specified after the target type, a <termref
                              def="dt-type-error">type error</termref> is raised <errorref
                              class="TY" code="0004"/>.</p>
                     </item>
                  </olist>
               </item>



               <item>
                  <p>If the result of atomization is a single
atomic value, the result of the cast expression is determined by
casting to the target type as described in <xspecref
                        spec="FO31" ref="casting"
                        />. When casting, an
implementation may need to determine whether one type is derived by
restriction from another. An implementation can determine this either
by examining the <termref
                        def="dt-issd"
                        >in-scope schema
definitions</termref> or by using an alternative, <termref
                        def="dt-implementation-dependent">implementation-dependent</termref>
mechanism such as a data dictionary.

The result of a cast expression is one of the following: 

<olist>
                        <item>
                           <p> 
    A value of the target type (or, in the case of list types,
    a sequence of values that are instances of the item type of the
    list type).
  </p>
                        </item>
                        <item>
                           <p> 
    A type error, if casting from the source type to the
    target type is not supported (for example attempting to convert an
    integer to a date).
  </p>
                        </item>
                        <item>
                           <p> 
    A dynamic error, if the particular input value cannot be
    converted to the target type (for example, attempting to convert
    the string <code>"three"</code> to an integer).
  </p>
                        </item>
                     </olist>
                  </p>




               </item>
            </olist>
         </div3>
         <div3 id="id-castable">
            <head>Castable</head>
            <scrap>
               <head/>

               <prodrecap id="CastableExpr" ref="CastableExpr"/>
               <prodrecap ref="SingleType"/>
               <prodrecap ref="LocalUnionType"/>
            </scrap>
            <p>&language;
provides an expression that tests whether a given value
is castable into a given target type. 

The <phrase diff="chg" at="A">target type</phrase> must be either of:</p>
            
            <ulist>
               <item><p>The name of a type defined in the  <termref def="dt-is-types">in-scope schema types</termref>, 
                  which must be a simple type <errorref class="ST" code="0052"/>.
                  In addition, the target type cannot be <code>xs:NOTATION</code>, <code>xs:anySimpleType</code>,
                  or <code>xs:anyAtomicType</code></p></item>
               <item diff="add" at="A"><p>A <code>LocalUnionType</code> such as <code>union(xs:date, xs:dateTime)</code>.</p></item>
            </ulist>
            

            <p>The expression <code role="parse-test"
                  >E castable as T</code> returns <code>true</code> 
if the result of evaluating <code>E</code>  
can be successfully cast into the target type <code>T</code> by using a <code>cast</code> expression; 
otherwise it returns <code>false</code>. 
If evaluation of <code>E</code> fails with a dynamic error or if the value of <code>E</code> cannot be atomized, 
the <code>castable</code> expression as a whole fails. 
The <code>castable</code> expression can be used as a <termref
                  def="dt-predicate"
               >predicate</termref>  to
avoid errors at evaluation time. 
It can also be used to select an appropriate type for processing of a given value, as illustrated in
the following example:</p>

            <eg role="parse-test"><![CDATA[
if ($x castable as hatsize)
   then $x cast as hatsize
   else if ($x castable as IQ)
   then $x cast as IQ
   else $x cast as xs:string]]></eg>
         </div3>
         <div3 id="id-constructor-functions">
            <head>Constructor Functions</head>
            <p>For every  simple type in the <termref def="dt-is-types"
                  >in-scope schema types</termref>  (except <code>xs:NOTATION</code> and <code>xs:anyAtomicType</code>, and <code>xs:anySimpleType</code>, which are not instantiable), a <term>constructor function</term> is implicitly defined. In each case, the name of the constructor function is the same as the name of its target type (including namespace). The signature of the constructor function for  a given type depends on the type that is being constructed, and can be found in  <xspecref
                  spec="FO31" ref="constructor-functions"/>.</p>



            <p>
               <termdef term="constructor function" id="dt-constructor-function"
                     >The <term>constructor function</term> for a given type is used to convert instances of other  simple types into the given type. The semantics of the constructor function call <code>T($arg)</code> are defined to be equivalent to the expression <code
                     role="parse-test">(($arg) cast as T?)</code>.</termdef>
            </p>
            <p>The following examples illustrate the use of constructor functions:</p>
            <ulist>



               <item>
                  <p>This
example is equivalent to <code role="parse-test"
                        >("2000-01-01" cast as
xs:date?)</code>.</p>

                  <eg role="parse-test"><![CDATA[xs:date("2000-01-01")]]></eg>
               </item>



               <item>
                  <p>This
example is equivalent to

<code role="parse-test"
                        >(($floatvalue * 0.2E-5) cast as xs:decimal?)</code>.</p>
                  <eg role="parse-test"><![CDATA[xs:decimal($floatvalue * 0.2E-5)]]></eg>
               </item>



               <item>
                  <p>This example returns an
<code>xs:dayTimeDuration</code> value equal to 21 days. It is
equivalent to <code
                        role="parse-test">("P21D" cast as xs:dayTimeDuration?)</code>.</p>
                  <eg role="parse-test"><![CDATA[xs:dayTimeDuration("P21D")]]></eg>
               </item>



               <item>
                  <p>If
<code>usa:zipcode</code> is a user-defined atomic type
in the <termref
                        def="dt-is-types"
                        >in-scope schema types</termref>, then the
following expression is equivalent to the
expression <code
                        role="parse-test">("12345" cast as
usa:zipcode?)</code>.</p>
                  <eg role="parse-test"><![CDATA[usa:zipcode("12345")]]></eg>
               </item>
            </ulist>

            <note>
               <p>
  An instance of an atomic type that is not in a namespace can be
  constructed by using a <nt def="URIQualifiedName">URIQualifiedName</nt> 
  in either a cast expression or a constructor function call.  Examples:
  </p>
               <eg role="parse-test"><![CDATA[17 cast as Q{}apple]]></eg>
               <eg role="parse-test"><![CDATA[Q{}apple(17)]]></eg>
               <p diff="chg" at="A">In either context, using an unqualified NCName might not work:
                  in a cast expression, an unqualified name is resolved using the 
                  <termref def="dt-def-type-ns" diff="chg" at="A">default type namespace</termref>,
                  while an unqualified name in a constructor function call is resolved using the
                  <termref def="dt-default-function-namespace"/> which will often be inappropriate.
               </p>
  
            </note>
         </div3>

         <div3 id="id-treat">
            <head>Treat</head>
            <scrap>
               <head/>
               <prodrecap id="TreatExpr" ref="TreatExpr"/>
            </scrap>
            <p>&language; provides an
expression called <code>treat</code> that can be used to modify the
<termref
                  def="dt-static-type">static type</termref> of its
operand.</p>
            <p>Like <code>cast</code>, the <code>treat</code>
expression takes two operands: an expression and a <nt
                  def="SequenceType"
                  >SequenceType</nt>. Unlike
<code>cast</code>, however, <code>treat</code> does not change the
<termref
                  def="dt-dynamic-type"
                  >dynamic type</termref> or value of its operand. Instead, the purpose of
<code>treat</code> is to ensure that an expression has an expected
dynamic type at evaluation time.</p>
            <p>The semantics of <emph>
                  <code>expr1</code>
               </emph>
               <code> treat as </code>
               <emph>
                  <code>type1</code>
               </emph> are as
follows:</p>
            <ulist>



               <item>
                  <p>During static analysis:</p>
                  <p> The
<termref def="dt-static-type"
                        >static type</termref> of the
<code>treat</code> expression is <emph>
                        <code>type1</code>
                     </emph>. This enables the
expression to be used as an argument of a function that requires a
parameter of <emph>
                        <code>type1</code>
                     </emph>.</p>
               </item>



               <item>
                  <p>During expression
evaluation:</p>
                  <p>If <emph>
                        <code>expr1</code>
                     </emph> matches <emph>
                        <code>type1</code>
                     </emph>,
using the rules for <termref def="dt-sequencetype-matching"
                        >SequenceType
matching</termref>,
the <code>treat</code> expression returns the value of
<emph>
                        <code>expr1</code>
                     </emph>; otherwise, it raises a <termref def="dt-dynamic-error"
                        >dynamic error</termref>
                     <errorref class="DY" code="0050"/>.
If the value of <emph>
                        <code>expr1</code>
                     </emph> is returned, the identity of any nodes in the value is
preserved. The <code>treat</code> expression ensures that the value of
its expression operand conforms to the expected type at
run-time.</p>
               </item>



               <item>
                  <p>Example:</p>
                  <eg role="parse-test"><![CDATA[$myaddress treat as element(*, USAddress)]]></eg>
                  <p>The
<termref def="dt-static-type"
                        >static type</termref> of
<code>$myaddress</code> may be <code>element(*, Address)</code>, a
less specific type than <code>element(*, USAddress)</code>. However,
at run-time, the value of <code>$myaddress</code> must match the type
<code>element(*, USAddress)</code> using rules for <termref
                        def="dt-sequencetype-matching"
                        >SequenceType
matching</termref>;
otherwise a <termref
                        def="dt-dynamic-error">dynamic error</termref> is
raised <errorref
                        class="DY" code="0050"/>.</p>
               </item>
            </ulist>
         </div3>
      </div2>

      <div2 id="id-map-operator">
         <head>Simple map operator (<code>!</code>)</head>


         <scrap>
            <head/>
            <prodrecap id="SimpleMapExpr" ref="SimpleMapExpr"/>
         </scrap>

         <p>
    A mapping expression <code>S!E</code> evaluates the
    expression <code>E</code> once for every item in the sequence
    obtained by evaluating <code>S</code>. The simple mapping operator
    "<code>!</code>" can be applied to any sequence, regardless of the
    types of its items, and it can deliver a mixed sequence of nodes,
    atomic values, and functions. Unlike the similar "<code>/</code>"
    operator, it does not sort nodes into document order or eliminate
    duplicates.
  </p>

         <p>Each operation <code>E1!E2</code> is evaluated as follows: Expression <code>E1</code> is evaluated to a sequence <code>S</code>. Each item in <code>S</code> then serves in turn to provide an inner focus (the item as the context item, its position in <code>S</code> as the context position, the length of <code>S</code> as the context size) for an evaluation of <code>E2</code> in the <termref
               def="dt-dynamic-context"
               >dynamic context</termref>. The sequences resulting from all the evaluations of <code>E2</code> are combined as follows: Every evaluation of <code>E2</code> returns a (possibly empty) sequence of items. These sequences are concatenated and returned. <phrase
               role="xquery" at="bug28862">If ordering mode is ordered, the</phrase>
            <phrase role="xpath" at="bug28862"
               >The</phrase> returned sequence preserves the orderings within and among the subsequences generated by the evaluations of <code>E2</code>
            <phrase role="xpath">.</phrase>
            <phrase role="xquery"
               >; otherwise the order of the returned sequence is implementation-dependent.</phrase>
         </p>

         <p>Simple map operators have functionality similar to <specref ref="id-path-operator"
            />.
  The following table summarizes the differences between these two operators</p>

         <table role="medium" width="100%">
            <thead>
               <tr>
                  <th>Operator</th>
                  <th>Path operator (<code>E1 / E2</code>)</th>
                  <th>Simple map operator (<code>E1 ! E2</code>)</th>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <th>E1</th>
                  <td>Any sequence of nodes</td>
                  <td>Any sequence of items</td>
               </tr>
               <tr>
                  <th>E2</th>
                  <td>Either a sequence of nodes or a sequence of non-node items</td>
                  <td>A sequence of items</td>
               </tr>
               <tr>
                  <th>Additional processing</th>
                  <td>Duplicate elimination and document ordering</td>
                  <td>Simple sequence concatenation</td>
               </tr>
            </tbody>
         </table>

         <p>The following examples illustrate the use of simple map operators combined with path expressions.</p>

         <example>
            <ulist>
               <item>
                  <p>
                     <code role="parse-test"
                        >child::div1 / child::para / string() ! concat("id-", .)</code>
                  </p>
                  <p>Selects the <code>para</code> element children of the <code>div1</code> element children of the context node; that is, the <code>para</code> element grandchildren of the context node that have <code>div1</code> parents. It then outputs the strings obtained by prepending <code>"id-"</code> to each of the string values of these grandchildren.</p>
               </item>
               <item>
                  <p>
                     <code role="parse-test">$emp ! (@first, @middle, @last)</code>
                  </p>
                  <p>Returns the values of the attributes <code>first</code>, <code>middle</code>, and <code>last</code> for element <code>$emp</code>, in the order given. (The <code>/</code> operator here returns the attributes in an unpredictable order.)</p>
               </item>
               <item>
                  <p>
                     <code role="parse-test">$docs ! ( //employee)</code>
                  </p>
                  <p>Returns all the employees within all the documents identified by the variable docs, in document order within each document, but retaining the order of documents.</p>
               </item>
               <item>
                  <p>
                     <code role="parse-test"
                        >avg( //employee / salary ! translate(., '$', '') ! number(.))</code>
                  </p>
                  <p>Returns the average salary of the employees, having converted the salary to a number by removing any <code>$</code> sign and then converting to a number. (The second occurrence of <code>!</code> could not be written as <code>/</code> because the left-hand operand of <code>/</code> cannot be an atomic value.)</p>
               </item>
               <item>
                  <p>
                     <code role="parse-test">fn:string-join((1 to $n)!"*")</code>
                  </p>
                  <p>Returns a string containing <code>$n</code> asterisks.</p>
               </item>
               <item>
                  <p>
                     <code role="parse-test">$values!(.*.) =&gt; fn:sum()</code>
                  </p>
                  <p>Returns the sum of the squares of a sequence of numbers.</p>
               </item>
               <item>
                  <p>
                     <code role="parse-test">string-join(ancestor::*!name(), '/')</code>
                  </p>
                  <p>Returns a path containing the names of the ancestors of an element, separated by "<code>/</code>" characters.</p>
               </item>
            </ulist>
         </example>

      </div2>

      <div2 id="id-arrow-operator">
         <head>Arrow Expressions</head>

         <scrap>
            <head/>
            <prodrecap id="ArrowExpr" ref="ArrowExpr"/>
            <prodrecap id="FatArrowTarget" ref="FatArrowTarget"/>
            <prodrecap id="ThinArrowTarget" ref="ThinArrowTarget"/>
            <prodrecap id="ArrowStaticFunction" ref="ArrowStaticFunction"/>
            <prodrecap id="ArrowDynamicFunction" ref="ArrowDynamicFunction"/>
            <prodrecap ref="ArgumentList"/>
            <prodrecap id="PositionalArgumentList" ref="PositionalArgumentList"/>
         </scrap>

         <p>
            <termdef term="arrow operator" id="dt-arrow-operator"
               >An <term>arrow operator</term>  applies a function to the value of an expression, using the value as the first argument to the function.</termdef>  
         </p>
         <p diff="add" at="A">The <term>fat arrow</term> operator <code>=></code> is defined as follows:
            <ulist>
               <item><p>Given a  <nt def="UnaryExpr">UnaryExpr</nt>
                  <code>U</code>, an <nt def="ArrowStaticFunction">ArrowStaticFunction</nt>
                  <code>F</code>, and an <nt def="ArgumentList">ArgumentList</nt>
                  <code>(A, B, C...)</code>, the expression <code>U =&gt; F(A, B, C...)</code> is equivalent to the
                  expression <code>F(U, A, B, C...)</code>.</p></item>
               <item><p>Given a  <nt def="UnaryExpr">UnaryExpr</nt>
                  <code>U</code>, an <nt def="ArrowDynamicFunction">ArrowDynamicFunction</nt>
                  <code>F</code>, and an <nt def="PositionalArgumentList">PositionalArgumentList</nt>
                  <code>(A, B, C...)</code>, the expression <code>U =&gt; F(A, B, C...)</code> is equivalent to the
                  expression <code>F(U, A, B, C...)</code>.</p></item>
            </ulist>
            </p>
         
         <!--<ulist>
            <item>
               <p>If the arrow is followed by an <nt def="ArrowFunctionSpecifier"/>:</p>
               <p>Given a  <nt def="UnaryExpr">UnaryExpr</nt>
                  <code>U</code>, an <nt def="ArrowFunctionSpecifier">ArrowFunctionSpecifier</nt>
                  <code>F</code>, and an <nt def="ArgumentList">ArgumentList</nt>
                  <code>(A, B, C...)</code>, the expression <code>U =&gt; F(A, B, C...)</code> is equivalent to the
                  expression <code>F(U, A, B, C...)</code>.</p>
            </item>
            <item>
               <p>If the arrow is followed by an <nt def="EnclosedExpr"/>:</p>
               <p>Given a  <nt def="UnaryExpr">UnaryExpr</nt>
                  <code>U</code>, and an <nt def="EnclosedExpr"/> 
                  <code>E</code>, the expression <code>U => E</code> is equivalent to the expression
                  <code>U => (function ($V) E1) ()</code> where:
                  <ulist>
                     <item><p><var>V</var> is a system-allocated and otherwise unused variable name, and</p></item>
                     <item><p><var>E1</var> is formed from <var>E</var> by replacing any <nt def="TildeExpr"/>
                        that is contained in <var>E</var>, and is not contained in any nested <nt def="ArrowExpr"/>,
                     by the variable reference <code>$V</code>.</p></item>
                  </ulist>
                  
            </item>
         </ulist>-->
           

        
         
         <p diff="add" at="A">The <term>thin arrow</term> operator <code>-></code> is defined as follows:</p>
            
         <ulist diff="add" at="A">
            <item>
               <p>If the arrow is followed by an <nt def="ArrowStaticFunction">ArrowStaticFunction</nt>:</p>
               <p>Given a  <nt def="UnaryExpr">UnaryExpr</nt>
                  <code>U</code>, an <nt def="ArrowStaticFunction">ArrowStaticFunction</nt>
               <code>F</code>, and an <nt def="ArgumentList">ArgumentList</nt>
               <code>(A, B, C...)</code>, the expression <code>U -&gt; F(A, B, C...)</code> is equivalent to the
               expression <code>(U ! F(., A, B, C...))</code>.</p>
               
            </item>
            <item>
               <p>If the arrow is followed by an <nt def="ArrowDynamicFunction">ArrowDynamicFunction</nt>:</p>
               <p>Given a  <nt def="UnaryExpr">UnaryExpr</nt>
                  <code>U</code>, an <nt def="ArrowDynamicFunction">ArrowDynamicFunction</nt>
                  <code>F</code>, and an <nt def="PositionalArgumentList">PositionalArgumentList</nt>
                  <code>(A, B, C...)</code>, the expression <code>U -&gt; F(A, B, C...)</code> is equivalent to the
                  expression <code>(U ! F(., A, B, C...))</code>.</p>
               
            </item>
            <item>
               <p>If the arrow is followed by an <nt def="EnclosedExpr">EnclosedExpr</nt>:</p>
               <p>Given a  <nt def="UnaryExpr">UnaryExpr</nt>
                  <code>U</code>, and an <nt def="EnclosedExpr">EnclosedExpr</nt> 
                  <code>{E}</code>, the expression <code>U -> {E}</code> is equivalent to the expression
                  <code>(U) ! (E)</code>.</p>
                  
                  <p>For example, the expression <code>$x -> {.+1}</code> is equivalent to
                  <code>($x)!(.+1)</code>.</p>
                  <note><p>The precedence of the <code>!</code> operator is higher than that
                  of <code>-></code>, so <code>$x -> f() -> {.+1}</code> is equivalent to
                  <code>($x -> f()) ! (.+1)</code>. Using the <code>-></code> operator in such a pipeline expression,
                     in preference to <code>!</code>, can therefore reduce the need for parentheses.</p></note>
               <note><p>The expression <code>$x -> {.+1}</code> can be considered as an abbreviation
                  for <code>$x -> (->{.+1})()</code>: that is, it invokes the anonymous function
                  <code>->{.+1}</code> once for each item in <code>$x</code>.</p></note>
            </item>
         </ulist>
         
            
         
            
            <p diff="add" at="A">The fat arrow operator thus applies the supplied function to the result
               of the left-hand operand as a whole, while the thin arrow operator applies the function 
               (or enclosed expression) to
               each item in the value of the left-hand operand individually. In the case where the result
               of the left-hand operand is a single item, the two operators have almost the same effect;
               the only difference is that the thin arrow binds the <termref def="dt-focus"/>.</p>
            
    <p>This syntax is particularly helpful when applying multiple
    functions to a value in turn. For example, the following
    expression invites syntax errors due to misplaced parentheses:
  </p>

         <eg role="parsetest"
            ><![CDATA[tokenize((normalize-unicode(upper-case($string))),"\s+")]]></eg>

         <p>In the following reformulation, it is easier to see that the parentheses are balanced:</p>

         <eg role="parse-test"
            ><![CDATA[$string -> upper-case() -> normalize-unicode() -> tokenize("\s+")]]></eg>
            
            <p diff="add" at="A">Assuming that <code>$string</code> is a single string, the above example could
            equally be written:</p>
            
            <eg role="parse-test"
               ><![CDATA[$string => upper-case() => normalize-unicode() => tokenize("\s+")]]></eg>
            
            <p diff="add" at="A">The difference between the two operators is seen when the left-hand
            operand evaluates to a sequence:</p>
            
            <eg role="parse-test"
               ><![CDATA["The cat sat on the mat" => tokenize() -> concat(".") -> upper-case() => string-join(" ")]]></eg>
            
            <p diff="add" at="A">which returns <code>"THE. CAT. SAT. ON. THE. MAT."</code>. The first arrow
            could be written either as <code>=></code> or <code>-></code> because the operand is a singleton; the next two
            arrows have to be <code>-></code> because the function is applied to each item in the tokenized
            sequence individually; the final arrow must be <code>=></code> because the <code>string-join</code>
            function applies to the sequence as a whole.</p>
            
            <note diff="add" at="A"><p>It may be useful to think of this as a map/reduce pipeline. The functions
            introduced by <code>-></code> are mapping operations; the function introduced by <code>=></code>
            is a reduce operation.</p></note>
         
         <p diff="add" at="A">The following example introduces an enclosed expression to the pipeline:</p>
         <eg role="parse-test" diff="add" at="A"
            ><![CDATA[(1 to 5) -> xs:double() -> math:sqrt() -> {.+1} => sum()]]></eg>
         
         <p diff="add" at="A">This is equivalent to <code>sum((1 to 5) ! (math:sqrt(xs:double(.))+1))</code>.</p>
         
            <note diff="add" at="A"><p>The <code>ArgumentList</code> may include <code>PlaceHolders</code>,
            though this is not especially useful. For example, the expression <code>"$" -> concat(?)</code> is equivalent
            to <code>concat("$", ?)</code>: its value is a function that prepends a supplied string with
            a "$" symbol.</p></note>
         
         <note diff="add" at="A"><p>The <code>ArgumentList</code> may include keyword arguments if the
            function is identified statically (that is, by name). For example,
         the following is valid: <code>$xml => xml-to-json(indent:=true()) => parse-json(escape:=false())</code>.</p></note>
         
         
            
            
            
      </div2>
      
      <div2 id="id-validate" role="xquery">
         <head>Validate Expressions</head>

         <scrap>
            <head/>
            <prodrecap id="ValidateExpr" ref="ValidateExpr"/>
            <prodrecap id="ValidationMode" ref="ValidationMode"/>
            <prodrecap ref="EnclosedExpr"/>
         </scrap>

         <p>A <code>validate</code> expression can be used to validate a
        document node or an element node with respect to the <termref
               def="dt-issd"
               >in-scope schema definitions</termref>, using the schema
        validation process defined in <bibref
               ref="XMLSchema10"/> or <bibref ref="XMLSchema11"
               />. If the
        operand of a <code>validate</code> expression does not evaluate to
        exactly one document or element node, a <termref
               def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0030"
               />. In this specification, the node that is the
        operand of a <code>validate</code> expression is called the
        <term>operand node</term>.</p>


         <p>A <code>validate</code> expression returns a new node with its own identity and with no parent.
        The new node and its descendants are given <termref
               def="dt-type-annotation"
            >type annotation</termref>
        that are generated by applying a validation process to the operand node. In some cases, default values
        may also be generated by the validation process.</p>

         <p>A <code>validate</code> expression may optionally specify a <nt def="ValidationMode"
               >validation mode</nt>. The default
        <nt def="ValidationMode"
               >validation mode</nt>
        (applicable when no type name is provided)

        is <code>strict</code>.</p>

         <p>A <code>validate</code> expression may optionally specify a <nt def="TypeName"
               >TypeName</nt>. This type name must be found in the <termref def="dt-issd"
               >in-scope
            schema definitions</termref>; if it is not, a <termref
               def="dt-static-error">static error</termref> is raised <errorref class="ST"
               code="0104"
            />.  If the type name is unprefixed, it is
        interpreted as a name in the default namespace for elements and
        types. 
    </p>


         <p>The result of a <code>validate</code> expression is defined by the following rules.</p>

         <olist>


            <item>
               <p> If the operand node is a document node, its children must
            consist of exactly one element node and zero or more comment and
            processing instruction nodes, in any order; otherwise, a <termref
                     def="dt-dynamic-error">dynamic error</termref>
                  <errorref class="DY" code="0061"/> is raised.</p>
            </item>



            <item>
               <p>The operand node is converted to an XML Information Set
            (<bibref
                     ref="XINFO"
                     />) according to the "Infoset Mapping" rules
            defined in <bibref
                     ref="xpath-datamodel-31"
                     />. Note that this process
            discards any existing <termref
                     def="dt-type-annotation"
                     >type
            annotations</termref>.
            Validity assessment is carried out on the root element
                    information item of the resulting Infoset, using the <termref
                     def="dt-issd"
                  >in-scope schema definitions</termref> as the effective
                    schema.  The process of validation applies recursively to contained
                    elements and attributes to the extent required by the effective
                    schema. </p>
            </item>


            <item>
               <p>If a type name is provided, and the type name is <code>xs:untyped</code>, all elements receive the type annotation <code>xs:untyped</code>,
        and all attributes receive the type annotation <code>xs:untypedAtomic</code>. 
        If the type name is <code>xs:untypedAtomic</code>, the node receives the type annotation xs:untypedAtomic;
        a type error <errorref
                     class="TY" code="0004"
                     /> is raised if the node has element children. 

	    Otherwise, schema-validity assessment is
            carried out according to the rules defined in <bibref
                     ref="XMLSchema10"/> or <bibref ref="XMLSchema11"
                     /> Part 1, section 3.3.4 "Element
            Declaration Validation Rules", "Validation Rule: Schema-Validity Assessment (Element)", clauses 1.2 and 2, using this type definition as the
            <quote>processor-stipulated type definition</quote> for validation.</p>

               <p>If the instance being validated contains an xml:id attribute, both lax and strict validation cause this attribute to be subjected to [xml:id] processing: that is, the attribute is checked for uniqueness, and is typed as xs:ID, and the containing element is therefore eligible as a target for the id() function.</p>

            </item>

            <item>
               <p>When no type name is provided:</p>

               <olist>

                  <item>
                     <p>If <nt def="ValidationMode"
                           >validation mode</nt> is <code>strict</code>, then there must be a
                    top-level element declaration in the <termref
                           def="dt-is-elems"
                           >in-scope element declarations</termref>
                    that matches the root element information
                    item in the Infoset, and schema-validity assessment is
                    carried out using that declaration in accordance with
                     <bibref
                           ref="XMLSchema10"
                           /> Part 1, section 5.2, "Assessing Schema-Validity", item
                    2, or  <bibref
                           ref="XMLSchema11"
                           /> Part 1, section 5.2, "Assessing Schema-Validity",
                    "element-driven validation".

                    If there is no such element declaration, a <termref
                           def="dt-dynamic-error"
                           >dynamic error</termref> is
                    raised <errorref
                           code="0084" class="DY"/>.</p>
                  </item>



                  <item>
                     <p>If <nt def="ValidationMode"
                           >validation mode</nt> is <code>lax</code>, then schema-validity
                    assessment is carried out in accordance with <bibref
                           ref="XMLSchema10"
                           /> Part 1, section 5.2, "Assessing Schema-Validity",
                    item 3, or <bibref
                           ref="XMLSchema11"
                        /> Part 1, section 5.2, "Assessing Schema-Validity", "lax wildcard validation".</p>

                     <p>If <nt def="ValidationMode"
                           >validation mode</nt> is <code>lax</code> and the root element
                        information item has neither a top-level element
                        declaration nor an <code>xsi:type</code> attribute, <bibref
                           ref="XMLSchema10"
                           />  defines the recursive checking of children
                        and attributes as optional. During processing of an XQuery <code>validate</code> expression, this
                        recursive checking is required.</p>
                  </item>

                  <item>
                     <p at="XQ.E7"
                        >If the operand node is an element node, the validation rules named
                "Validation Root Valid (ID/IDREF)" are not applied. This means that document-level constraints
                relating to uniqueness and referential integrity are not enforced.</p>
                  </item>

                  <item>
                     <p>There is no check that the document contains unparsed entities whose names match the
                values of nodes of type <code>xs:ENTITY</code> or <code>xs:ENTITIES</code>.</p>
                  </item>

               </olist>


               <note>
                  <p>Validity assessment is affected by the presence or absence of <code>xsi:type</code> attributes
            on the elements being validated, and may generate new information items such as default attributes.</p>
               </note>
            </item>



            <item>
               <p>The outcome of the validation expression depends on the
            <code>validity</code> property of the root element information item in the PSVI that results
            from the validation process.</p>


               <olist>


                  <item>
                     <p>If the <code>validity</code> property of the root element
                    information item is <code>valid</code>,

                    or if <nt
                           def="ValidationMode"
                           >validation mode</nt> is
                    <code>lax</code> and the <code>validity</code> property of the root
                    element information item is <code>notKnown</code>,

                    the PSVI is converted back into an <termref
                           def="dt-data-model-instance"
                           >XDM instance</termref>


                    as described in <bibref
                           ref="xpath-datamodel-31"
                           /> Section
                    3.3, "Construction from a PSVI".

                    The resulting node (a new node of the same kind as the operand node)
                    is returned as the result of the <code>validate</code>
                    expression.</p>
                  </item>



                  <item>
                     <p>Otherwise, a <termref def="dt-dynamic-error"
                           >dynamic
                error</termref> is raised  <errorref class="DY"
                           code="0027"/>.</p>
                  </item>
               </olist>

            </item>
         </olist>

         <note>
            <p>The effect of these rules is as follows, where the <emph>validated element</emph> means
            either the operand node or (if the operand node is a document node) its element child.:
        <ulist>
                  <item>
                     <p>If <nt def="ValidationMode"
                        >validation mode</nt> is <code>strict</code>,
            the validated element must have a top-level element declaration in the effective schema, and must conform to this
            declaration.</p>
                  </item> <item>
                     <p>If <nt def="ValidationMode"
                           >validation mode</nt> is <code>lax</code>, the validated element must conform
            to its top-level element declaration if such a declaration exists in the effective schema. If
            <nt
                           def="ValidationMode"
                           >validation mode</nt>
                        is <code>lax</code> and there is no top-level element declaration for the
                        element, and the element has an <code>xsi:type</code> attribute, then the
                        <code>xsi:type</code> attribute must name a top-level type definition in the
                        effective schema, and the element must conform to that type.</p>
                  </item> <item>
                     <p>If a type name is specified in the validate expression, no attempt is
                made to locate an element declaration matching the name of the validated
                element; the element can have any name, and its content is validated against
                the named type.
</p>
                  </item> </ulist>
            </p>
         </note>

         <note>
            <p>During conversion of the PSVI into an <termref def="dt-data-model-instance"
                  >XDM instance</termref>
        after validation, any element information items whose validity property is <code>notKnown</code> are
        converted into element nodes with <termref
                  def="dt-type-annotation">type annotation</termref>
               <code>xs:anyType</code>, and any attribute information items whose validity property is
        <code>notKnown</code> are converted into attribute nodes with <termref
                  def="dt-type-annotation">type annotation</termref>
               <code>xs:untypedAtomic</code>, as described in <xspecref spec="DM31"
                  ref="PSVI2NodeTypes"/>.
    </p>
         </note>

      </div2>


      <div2 id="id-extension-expressions" role="xquery">
         <head>Extension Expressions</head>
         <p>
            <termdef id="dt-extension-expression" term="extension expression"
                  >An <term>extension expression</term> is an expression whose semantics are
<termref
                  def="dt-implementation-defined"
            >implementation-defined</termref>.</termdef> Typically a particular extension will be recognized
by some implementations and not by others. The syntax is designed so that
extension expressions can be successfully parsed by all implementations, and
so that fallback behavior can be defined for implementations that do not
recognize a particular extension.</p>

         <scrap>
            <head/>
            <prodrecap id="ExtensionExpr" ref="ExtensionExpr"/>
            <prodrecap id="Pragma" ref="Pragma"/>
            <prodrecap id="PragmaContents" ref="PragmaContents"/>
         </scrap>

         <p>An extension expression consists of one or more <term>pragmas</term>, followed by an optional expression (the <term>associated expression</term>). <termdef
               term="pragma" id="dt-pragma"
                  >A <term>pragma</term> is denoted by the delimiters <code>(#</code> and <code>#)</code>, and consists of an identifying EQName followed by <termref
                  def="dt-implementation-defined"
               >implementation-defined</termref> content.</termdef> The content of a pragma may consist of any string of characters that does not contain the ending delimiter <code>#)</code>.  If the EQName of a
pragma is a  <termref
               def="dt-qname"
               >lexical QName</termref>, it must resolve to a namespace URI and local name, using the <termref
               def="dt-static-namespaces">statically known namespaces</termref>
            <errorref class="ST" code="0081"
            />. If the EQName is an unprefixed NCName, it is interpreted as a name in no namespace (and the pragma is therefore ignored).</p>



         <p>Each implementation recognizes an <termref def="dt-implementation-defined"
               >implementation-defined</termref> set
of namespace URIs used to denote pragmas.</p>

         <p>If the namespace URI of a pragma's <termref def="dt-expanded-qname"
               >expanded QName</termref> 
is not recognized by the implementation as a pragma namespace, 
 or if the name is in no namespace, 
then the pragma is ignored. If all the pragmas in an <nt
               def="ExtensionExpr">ExtensionExpr</nt> are ignored, then the
value of the <nt
               def="ExtensionExpr"
               >ExtensionExpr</nt> is the value of the 
 

associated expression; if no associated expression is provided,  a <termref
               def="dt-static-error">static error</termref> is raised <errorref class="ST"
               code="0079"/>.
</p>

         <p>If an implementation recognizes the namespace of one or more
pragmas in an <nt
               def="ExtensionExpr">ExtensionExpr</nt>, then the
value of the <nt def="ExtensionExpr"
               >ExtensionExpr</nt>, including its
error behavior, is <termref
               def="dt-implementation-defined"
               >implementation-defined</termref>. For
example, an implementation that recognizes the namespace of a pragma's
<termref
               def="dt-expanded-qname"
            >expanded QName</termref>, but does
not recognize the local part of the name, might choose either to raise
an error or to ignore the pragma.</p>
         <p>It is a <termref def="dt-static-error">static error</termref>
            <errorref code="0013" class="ST"
            /> if an implementation recognizes a pragma but determines
that its content is invalid.</p>
         <p>If an implementation recognizes a
pragma, it must report any static errors in the following expression
even if it will not evaluate that expression (however, static type
errors are raised only if the <termref
               def="dt-static-typing-feature">Static Typing Feature</termref> is in
effect.)</p>
         <note>
            <p>The following examples illustrate three ways in
which extension expressions might be used.</p>
            <ulist>



               <item>
                  <p>A pragma can be used to furnish a hint for how to evaluate the
following expression, without actually changing the result.
For example:</p>
                  <eg role="parse-test"><![CDATA[declare namespace exq = "http://example.org/XQueryImplementation";
   (# exq:use-index #)
      { $bib/book/author[name='Berners-Lee'] }
]]></eg>
                  <p>An implementation that recognizes the <code>exq:use-index</code> pragma might use an
index to evaluate the  expression that follows. An implementation that
does not recognize this pragma would evaluate the expression in its normal
way.</p>
               </item>



               <item>
                  <p>A pragma might be used to modify the semantics of the following
expression in ways that would not (in the absence of the pragma) be
conformant with this specification. For example, a pragma might be used to
permit comparison of <code>xs:duration</code> values using implementation-defined
semantics (this would normally be an error). Such changes to the language
semantics must be scoped to the <termref
                        def="dt-enclosed-expression"
                     >enclosed expression</termref> following the pragma.</p>
               </item>



               <item>
                  <p>A pragma might contain syntactic constructs that are
evaluated in place of the following expression. In this case, the
following expression itself (if it is present) provides a fallback for use by
implementations that do not recognize the pragma. For example:</p>
                  <eg role="parse-test"><![CDATA[declare namespace exq = "http://example.org/XQueryImplementation";
   for $x in
      (# exq:distinct //city by @country #)
      { //city[not(@country = preceding::city/@country)] }
   return f:show-city($x)
]]></eg>
                  <p>Here an implementation that recognizes the pragma will return the result of
evaluating the proprietary syntax <code>exq:distinct //city by
@country</code>,
while an implementation that does not recognize the pragma will instead
return the result of the expression <code
                        role="parse-test"
                        >//city[not(@country =
preceding::city/@country)]</code>. If no fallback expression is required, or
if none is feasible, then the expression between the curly braces may be
omitted, in which case implementations that do not recognize the pragma will
raise a <termref
                        def="dt-static-error">static error</termref>.</p>
               </item>
            </ulist>
         </note>
      </div2>
   </div1>

