<?xml version="1.0" encoding="utf-8"?>
<div1 id="id-introduction">

	<head>Introduction</head>
	
	<changes>
		<change>Use the arrows to browse significant changes since the 3.1 version of this specification.</change>
		<change>Sections with significant changes are marked Δ in the table of contents.</change>
	</changes>

	<p role="xquery">As increasing amounts of information are stored, exchanged, and presented using
		XML, the ability to intelligently query XML data sources becomes increasingly important. One
		of the great strengths of XML is its flexibility in representing many different kinds of
		information from diverse sources. To exploit this flexibility, an XML query language must
	provide features for retrieving and interpreting information from these diverse sources.</p>

	<p role="xquery">As increasing amounts of JSON are used for lightweight data-exchange, an XML query language
	for Web data needs to handle JSON as well as XML and HTML.</p>

	<p role="xquery" diff="chg" at="2023-10-19">XQuery is designed to be a language in which queries are concise and
		easily understood. It is also flexible enough to query a broad spectrum of information
		sources, both XML and non-XML, including both databases and documents. XQuery was originally derived from an XML query
		language called Quilt <bibref ref="Quilt"/>, which in turn borrowed features from several
		other languages, including XPath 1.0 <bibref ref="xpath"/>, XQL <bibref ref="XQL"/>, XML-QL
			<bibref ref="XML-QL"/>, SQL <bibref ref="SQL"/>, and OQL <bibref ref="ODMG"/>. </p>

	<p role="xpath" diff="chg" at="2023-10-19">XPath was originally designed as an expression language 
		to address the nodes of XML trees; it has since been extended to address a variety of non-XML data sources. 
		XPath gets its name from its use of a path notation for
		navigating through the hierarchical structure of an XML document; similar capabilities for
		navigating JSON structures were added in versions 3.0 and 3.1. XPath uses a compact,
		non-XML syntax, allowing XPath expressions to be embedded within URIs and to be used as 
		XML attribute values. XPath is designed to be embedded in (or invoked from) other
		host languages, including both languages specialized towards XML processing (such as <bibref ref="xslt-40"/> and XSD),
	   and general purpose programming languages such as Java, C#, Python, and Javascript. The interface
	   between XPath and its host language is formalized with an abstract definition of a static and dynamic
	   context, made available by the host language to the XPath processor.</p>
	
	<p diff="chg" at="2023-10-19" role="xpath"><termdef id="dt-host-language" term="host language">
		A <term>host language</term> for XPath is any environment that provides capabilities
		for XPath expressions to be defined and evaluated, and that supplies a static and dynamic
		context for their evaluation.
	</termdef></p>

	<p>
		<termdef id="dt-datamodel" term="data model">&language; operates on the abstract, logical
			structure of an XML document or JSON object rather than its surface syntax. This logical structure,
			known as the <term>data model</term>, is defined in <bibref ref="xpath-datamodel-40"
			/>.</termdef>
	</p>


	<p>
          <phrase role="xquery">XQuery 4.0 is an extension of XPath 4.0.</phrase>
          <phrase role="xpath">XPath 4.0 is a subset of XQuery 4.0.</phrase>

 In general, any expression that is
		syntactically valid and executes successfully in both XPath 4.0 and XQuery 4.0 will return
		the same result in both languages. There are a few exceptions to this rule: <ulist>
			<item><p>Because XQuery expands <phrase role="xquery">
						<termref def="dt-predefined-entity-reference">predefined entity
							references</termref> and <termref def="dt-character-reference">character
							references</termref>
					</phrase>
					<phrase role="xpath"> predefined entity references and character references
					</phrase> and XPath does not, expressions containing these produce different
					results in the two languages. For instance, the value of the string literal
						<code role="parse-test">"&amp;amp;"</code> is <code>&amp;</code> in XQuery,
					and <code>&amp;amp;</code> in XPath. (A host language may expand predefined entity references or character references
					before the XPath expression is evaluated.)</p></item>
			<item><p>If XPath 1.0 compatibility mode is enabled, XPath behaves differently from
					XQuery in a number of ways, <phrase role="xpath">which are noted throughout this
						document, and listed in <specref ref="id-incompat-in-false-mode"/>.</phrase>
					<phrase role="xquery">which are discussed in <bibref ref="xpath-40"
					/>.</phrase></p></item>
		</ulist></p>

	<p>Because these languages are so closely related, their grammars and language descriptions are
		generated from a common source to ensure consistency.</p>

	<p>&language; also depends on and is closely related to the following specifications:</p>

	<ulist>
		<item>
			<p><bibref ref="xpath-datamodel-40"/> defines the data model that underlies all
				&language; expressions.</p>
		</item>

		<item>
			<p>The type system of &language; is based on XML Schema. It is implementation-defined
				whether the type system is based on <bibref ref="XMLSchema10"/> or <bibref
					ref="XMLSchema11"/>.</p>
		</item>

		<item>
			<p>The system function library and the operators supported by &language; are defined
				in <bibref ref="xpath-functions-40"/>.</p>
		</item>

		<item role="xquery" diff="del" at="2023-10-19">
			<p>XQuery also has an XML-based syntax, which is described in [XQueryX 3.1]. </p>
		</item>

	</ulist>
	
	<note diff="add" at="2023-10-19"><p>The XML-based syntax for XQuery known as XQueryX
		is no longer maintained.</p></note>

	<p role="xquery">
		<termdef id="dt-xquery-40-processor" term="XQuery 4.0 Processor" diff="add" at="2023-10-19"> An <term>XQuery 4.0
			Processor</term> processes a query according to the XQuery 4.0 specification. </termdef>
		<termdef id="dt-xquery-31-processor" term="XQuery 3.1 Processor"> An <term>XQuery 3.1
				Processor</term> processes a query according to the XQuery 3.1 specification. </termdef>
		<termdef id="dt-xquery-30-processor" term="XQuery 3.0 Processor"> An <term>XQuery 3.0
				Processor</term> processes a query according to the XQuery 3.0 specification. </termdef>
		<termdef id="dt-xquery-10-processor" term="XQuery 1.0 Processor"> An <term>XQuery 1.0
				Processor</term> processes a query according to the XQuery 1.0 specification.
		</termdef>
	</p>

	


	<p>This document specifies a grammar for &language;, using the same basic EBNF notation used in
			<bibref ref="XML"/>. Unless otherwise noted (see <specref ref="lexical-structure"/>),
		whitespace is not significant in <phrase role="xquery">queries</phrase><phrase role="xpath"
			>expressions</phrase>. Grammar productions are introduced together with the features
		that they describe, and a complete grammar is also presented in the appendix [<specref
			ref="nt-bnf"/>]. The appendix is the normative version.</p>
	<p>In the grammar productions in this document, named symbols are underlined and literal text is
		enclosed in double quotes. For example, the following productions describe the syntax of a
		static function call:</p>
	<scrap role="example">
		<prodrecap ref="FunctionCall"/>
	</scrap>
	<p>The productions should be read as follows: A function call consists of an <nt
			def="EQName">EQName</nt> followed by an <nt def="ArgumentList">ArgumentList</nt>. The
		argument list consists of an opening parenthesis, an optional list of one or more arguments
		(separated by commas), and a closing parenthesis.</p>


	<p>This document normatively defines the static and dynamic semantics of &language;. In this
		document, examples and material labeled as “Note” are provided for explanatory purposes and
		are not normative.</p>


	

</div1>
