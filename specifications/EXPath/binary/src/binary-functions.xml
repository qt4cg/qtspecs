<?xml version="1.0" encoding='utf-8'?>
<!-- Changes for maps and JSON labeled at="MAP" and commented out -->
<!-- Current changes labeled at="A": first 4.0 Working Draft -->

<!DOCTYPE spec SYSTEM "../../../../schema/xsl-query.dtd" [ 

<!-- Things to update in these ENTITY definitions before publishing this document:
* Relationships between doc.stage, w3c-doctype, and doc.w3c-doctype-full
* doc.stage  w3c-doctype  doc.w3c-doctype-full
* FPWD       wd           First Public Working Draft
  WD         wd           Working Draft
  WD         wd           Last Call Working Draft
  CR         cr           Candidate Recommendation
  PR         pr           Proposed Recommendation
  PER        per          Proposed Edited Recommendation
  REC        rec          Recommendation
  WGNOTE     note         Working Group Note
* date.day, date.DD, date.month, date.monthnum, and date.year must represent the date of publication of the document
* doc.w3c-prevdesignation must properly represent the stage and shortname of the immediately preceding publication of the document
* Various status section generation ENTITY definitions below must be properly updated
-->

<!ENTITY doc.version "4.0">
<!ENTITY doc.major-version "4">
<!ENTITY doc.version-code "40">
<!ENTITY doc.stage "REC">
<!ENTITY doc.w3c-doctype "rec">
<!ENTITY doc.w3c-doctype-full "Editor's Draft">

<!-- N.B. The date 2000-01-01 is magic, it means "today". -->
<!ENTITY date.day "01">
<!ENTITY date.DD "01">
<!ENTITY date.month "January"> 
<!ENTITY date.monthnum "01">
<!ENTITY date.year "2000">
<!ENTITY doc.date "&date.year;&date.monthnum;&date.DD;">

<!ENTITY w3c.tr "https://www.w3.org/TR">
<!ENTITY doc.generic-shortname "binary">
<!ENTITY doc.shortname "&doc.generic-shortname;-&doc.version-code;">
<!ENTITY doc.w3c-designation "&doc.stage;-&doc.shortname;">
<!ENTITY doc.w3c-prev-designation "REC-&doc.shortname;">

<!ENTITY doc.publoc "https://qt4cg.org/specifications/EXPath/&doc.shortname;/">
<!ENTITY doc.publoc "&w3c.tr;/&date.year;/&doc.w3c-designation;-&doc.date;/">

<!ENTITY doc.latestloc "&doc.publoc;">
<!ENTITY doc.latestloc "&w3c.tr;/&doc.shortname;/">

<!ENTITY doc.latestloc-major "&w3c.tr;/&doc.generic-shortname;-&doc.major-version;/">
<!ENTITY doc.latestloc-tech "&w3c.tr;/&doc.generic-shortname;/">
<!ENTITY doc.nsname "&doc.shortname;">
<!ENTITY doc.generic-language "EXPath Binary Module">
<!ENTITY language-tech "&doc.generic-language;">
<!ENTITY language "&doc.generic-language; &doc.version;">
<!ENTITY language-major "&doc.generic-language; &doc.major-version;">
<!-- ************************ THIS MUST BE EITHER 'WG Review Draft' OR '' **************** -->
<!ENTITY version "">
<!-- ************************************************************************************* -->

<!ENTITY xdt-schema-app SYSTEM "../../../xpath-datamodel-31/src/xdt-schema-app.xml">
<!ENTITY codepoint.collation "http://www.w3.org/2005/xpath-functions/collation/codepoint">

<!ENTITY currency "&#x00A4;">
<!ENTITY divide "&#x00F7;">
<!ENTITY times "&#x00D7;">
<!ENTITY ne "&#x2260;">
<!ENTITY eacute "&#x00E9;">
<!ENTITY ocircumflex "&#x00F4;">
<!ENTITY Aumlaut "&#x00C4;">
<!ENTITY aumlaut "&#x00E4;">
<!ENTITY uumlaut "&#x00FC;">
<!ENTITY eszet "&#x00DF;">

<!ENTITY pi "&#x3C0;">
<!ENTITY theta "&#x3B8;">

<!ENTITY t1 "&#x0905;">
<!ENTITY t2 "&#x0936;">
<!ENTITY t3 "&#x094A;">
<!ENTITY t4 "&#x0915;">

<!ENTITY e1 "&#x00E8;">
<!ENTITY e2 "&#x00E9;">

<!ENTITY le "&#x2264;">
<!ENTITY ge "&#x2265;">

<!ENTITY egrave "&#x00E8;">
<!ENTITY Egrave "&#x00C8;">

<!ENTITY % status-entities SYSTEM "../../../../etc/status-entities.dtd">
%status-entities;

<!ENTITY doc.WD-pubdate "24 April 2014">
<!ENTITY doc.LC-pubdate "7 October 2014">
<!ENTITY doc.LC-comments-due "7 November 2014">
<!ENTITY doc.CR-pubdate "13 December 2016">
<!ENTITY doc.CR-comments-due "10 January 2017">
<!ENTITY doc.PR-expected "10 January 2017">
<!ENTITY doc.PR-pubdate "17 January 2017">
<!ENTITY doc.PR-comments-due "28 February 2017">
<!ENTITY doc.REC-pubdate "21 March 2017">

<!ENTITY doc.pubdate "&doc.REC-pubdate;">
<!ENTITY doc.comments-due "&doc.PR-comments-due;">


<!ENTITY status-section-id "status">
<!ENTITY spec-devby    "&devby.joint1;">
<!ENTITY changelog-id  "changelog">
<!ENTITY changes-para  "&post.PR.changes;">
<!ENTITY implementation-report '&no-implementation-report-exists;'>
<!ENTITY implementation-report-location "https://dev.w3.org/2011/QT3-test-suite/ReportingResults31/">
<!ENTITY implementation-report-availability "&report-public;">
<!ENTITY test-suite-location "https://dev.w3.org/2011/QT3-test-suite/">
<!ENTITY Bugzilla-key "FO40">
<!ENTITY patent-policy-paragraph "&ppp-two;">
<!ENTITY documents-and-relationships "&set-of-documents-30-preREC;">
<!ENTITY advancement.statement "&advance.2WGs;">
<!ENTITY document-stage "&doc-stage-REC;">
<!ENTITY doc-stability "&doc-stability-REC;">

<!ENTITY PR-entrance-criteria '<p>This document will be
considered ready for transition to Proposed Recommendation
at the same time that the XQuery 3.1 specification is ready
for transition to Proposed Recommendation. </p>'>
<!ENTITY features-at-risk-para "&no-features-at-risk;">
<!ENTITY features-at-risk ''>

<!ENTITY customized-paragraph '<p>This &doc.w3c-doctype-full; specifies XSLT and XQuery Functions and Operators (F&amp;O)
                              version 4.0, a fully compatible extension of <loc href="https://www.w3.org/TR/xpath-functions-31/">F&amp;O version 3.1</loc>.
                              This publication differs from its version 3.1 primarily by the addition of a number of new functions. There are numerous
                              smaller differences as well, all documented in the change log. </p>'>

<!ENTITY status-section SYSTEM "../../../../etc/status-general.xml">
<!ENTITY common-item-types.xml SYSTEM "../../../image-sources/item-types.xml">
<!ENTITY common-anyType.xml SYSTEM "../../../image-sources/anyType.xml">
<!ENTITY common-anyAtomicType.xml SYSTEM "../../../image-sources/anyAtomicType.xml">
<!ENTITY common-numeric-types.xml SYSTEM "../../../image-sources/numeric-types.xml">
<!ENTITY common-string-types.xml SYSTEM "../../../image-sources/string-types.xml">
]>

<!--
<head><?xml-stylesheet type="text/xsl" href="E:\XMLdocs\XML Query Language (XQuery)\Functions and Operators\Current Functions and Operators Build Files\xquery-operators.xsl"?></head> -->
<spec id="spec-top" w3c-doctype="&doc.w3c-doctype;" status="ext-review">
    <header>
        <title>&language;</title>
        <version>&version;</version>
        <w3c-designation>&doc.w3c-designation;</w3c-designation>
        <w3c-doctype>W3C &doc.w3c-doctype-full;</w3c-doctype>
        <pubdate>
            <day>&date.day;</day>
            <month>&date.month;</month>
            <year>&date.year;</year>
        </pubdate>
        <publoc>
            <loc href="&doc.publoc;">&doc.publoc;</loc>
        </publoc>
        <!-- These altlocs URIs are computed from the concatenation of doc.public, doc.shortname, and either '.xml' or
     '-diff-from-yyyymmdd.html', where 'yyyymmdd' is the earlier version of the spec from which a diff has been produced -->
        <altlocs>
            <loc href="&doc.shortname;.xml">Specification in XML format</loc>
            <loc href="function-catalog.xml">XML function catalog</loc>
        </altlocs>

        <!-- The latestloc URI is computed from doc.latestloc -->
        <latestloc doc="&language;">
            <loc href="&doc.latestloc;">&doc.latestloc;</loc>
        </latestloc>

        <!-- These prevlocs URIs are always hard-coded and are never computed from entities -->
        <!--
        <prevlocs doc="&language;">
           <loc href="https://www.w3.org/TR/xpath-functions-31/"/>
        </prevlocs>
  <latestloc-major doc="&language-major;">
    <loc href="&doc.latestloc-major;">&doc.latestloc-major;</loc>
  </latestloc-major>
  <latestloc-tech doc="&language-tech;">
    <loc href="&doc.latestloc-tech;">&doc.latestloc-tech;</loc>
  </latestloc-tech>
-->
        <prevrec doc="&language-tech;">
            <loc href="http://expath.org/spec/binary">http://expath.org/spec/binary</loc>
            <!--<loc href="https://www.w3.org/TR/2017/REC-xpath-functions-31-20170321/"
                >https://www.w3.org/TR/2017/REC-xpath-functions-31-20170321/</loc>-->
        </prevrec>
        <authlist>
            <author role="1.0">
                <name>Jirka Kosek</name>
                <!--<affiliation>??</affiliation>-->
                <email href="http://www.saxonica.com/">http://kosek.com/</email>
            </author>
            <author role="1.0">
                <name>John Lumley</name>
                <!--<affiliation>Saxonica</affiliation>-->
                <email href="http://www.saxonica.com/">http://www.saxonica.com/</email>
            </author>
            <author role="4.0">
                <name>Michael Kay</name>
                <!--<affiliation>Saxonica</affiliation>-->
                <email href="http://www.saxonica.com/">http://www.saxonica.com/</email>
            </author>
        </authlist>

        <errataloc href="https://www.w3.org/XML/2017/qt-errata/xpath-functions-31-errata.html"/>

        <translationloc
            href="https://www.w3.org/2003/03/Translations/byTechnology?technology=xpath-functions-40"/>

        <abstract>
            <p>This document defines an API for XPath 4.0 to handle the manipulation of binary data.
                It defines extension functions to process data from, and generate data for, binary
                resources, including extracting subparts, searching, basic binary operations and
                conversion between binary and structured forms of XDM numbers and strings.</p>
            <p>The document is an update of the original <bibref ref="expath-bin"/> specification,
                developed by the <loc href="http://www.w3.org/community/expath/">EXPath Community
                    Group</loc>, defined for <bibref ref="xpath20"/> and published in 2013.</p>
            <p>The principal semantic alteration is use of functional argument defaults available in
                XPath 4.0.</p>
            <p>These functions are defined for use in <bibref ref="xpath-40"/>, <bibref
                    ref="xquery-40"/>, <bibref ref="xslt-40"/>, and other related XML standards.
                </p>


            <p>A summary of changes since published version 1.0 is provided
                at <specref ref="changelog"/>.</p>
        </abstract>

        <!--&status-section;-->
        <status>
            <p>This version of the specification is work in progress. It is produced by the QT4
                Working Group, officially the W3C XSLT 4.0 Extensions Community Group. Individual
                functions specified in the document may be at different stages of review, reflected
                in their <term>Changes</term> notes. Comments are invited, in the form of GitHub
                issues at <loc href="https://github.com/qt4cg/qtspecs"
                    >https://github.com/qt4cg/qtspecs</loc>.</p>

<note role="dedication" id="dedication">
<p>The publications of this community group 
<loc href="../xquery-40/xpath-40.html#dedication">are dedicated</loc> to our co-chair,
Michael Sperberg-McQueen (1954–2024).</p>
</note>
        </status>

        <langusage>
            <language id="EN">English</language>
        </langusage>
        <revisiondesc>
            <p/>
        </revisiondesc>
    </header>
    <body>
        <div1 id="intro">
            <head>Introduction</head>

            <changes>
                <change>Use the arrows to browse significant changes since the 1.0 version of this
                    specification.</change>
                <change>Sections with significant changes are marked Δ in the table of contents. New
                    functions introduced in this version are marked ➕ in the table of
                    contents.</change>
            </changes>


            <p>The purpose of this document is to define functions to manipulate binary data for
                inclusion in XPath 4.0, XQuery 4.0, and XSLT 4.0. The binary data is represented by
                the type <code>xs:base64Binary</code> as defined by <xspecref spec="XS2"
                    ref="base64Binary"/>.</p>
            <p>The syntax used to call these functions and operators is specified in <bibref
                    ref="xpath-40"/> and <bibref ref="xquery-40"/>. </p>
            <p>This document defines several classes of functions:</p>
            <ulist>
                <item>
                    <p>Functions to create constant binary values and convert between the binary forms
                        and sequences of octets. </p>
                </item>
                <item>
                    <p>Functions to perform basic operations on binary values, such as joining,
                        selecting and searching.</p>
                </item>
                <item>
                    <p>Functions to perform bitwise operations.</p>
                </item>
                <item>
                    <p>Functions to convert between binary data and numeric values.</p>
                </item>
                <item>
                    <p>Functions to decode or encode strings.</p>
                </item>
            </ulist>

            <p>References to specific sections of some other specifications are indicated by
                cross-document links in this document. Each such link consists of a pointer to a
                specific section followed a superscript specifying the linked document. The
                superscripts have the following meanings: FILE40 <bibref ref="expath-file-40"/>,
                FO40 <bibref ref="xpath-functions-40"/> and XS2 <bibref ref="xmlschema-2"
                /><!-- XQ <bibref ref="xquery-40"/>, XT <bibref
                    ref="xslt-40"/>, XP <bibref ref="xpath-40"/>, XS2 <bibref ref="xmlschema-2"/>,
                and DM <bibref ref="xpath-datamodel-40"/>.--></p>


            <div2 id="error.management">
                <head>Error codes</head>
                <p>Error conditions are identified by a code (a QName). When such an
                    error condition is reached in the evaluation of an expression, a dynamic error
                    is thrown, with the corresponding error code (as if the standard XPath function
                    <code>error()</code> had been called).</p>
                <p>In this specification these codes use the
                    <code>http://expath.org/ns/binary</code> namespace with a local part
                    in the form of a descriptive string, for example
                    <code>bin:index-out-of-range</code>. This convention is used in place of
                   the <code>http://www.w3.org/2005/xqt-errors</code> namespace and alpha-numeric local
                    part, e.g. <code>err:FOCH0004</code> used in <bibref ref="xpath-functions-40"
                    />. These error codes have been largely retained from the 1.0 version of the
                    EXPath specification.</p>
                <p>Error codes are summarized in <specref ref="error-summary"/>.</p>
            </div2>

            <div2 id="type">
                <head>Binary types</head>
                <changes>
                    <change>Binary arguments to the functions are now declared to be either
                        <code>xs:hexBinary</code> or <code>xs:base64Binary</code>, but binary
                        function results remain of type <code>xs:base64Binary</code>. This should
                        not cause any backward incompatibilities as casting back and forth between
                        the two representations has been possible since at least version
                        2.0</change>

                </changes>
                <p>XML Schema, and therefore the XDM data model, defines two primitive atomic
                types holding binary data: <xspecref spec="XS2" ref="base64Binary"/> and 
                    <xspecref spec="XS2" ref="hexBinary"/>.
                In both cases the value space is a sequence of octets; the two types differ only
                in how the binary value is converted to or from a string. Although most functions
                in this specification are not concerned with the string representation of the value,
                they need to distinguish these two types, and <code>xs:base64Binary</code>
                has been chosen arbitrarily as the result type for functions that return
                binary values. Where binary data is supplied as input to a function, however,
                both <code>xs:base64binary</code> and <code>xs:hexBinary</code> are accepted.</p>
                
                <p><termdef id="dt-binary-value" term="binary value">The term <term>binary value</term>
                is used to mean a sequence of octets represented as an instance of 
                    <code>xs:base64Binary</code> or <code>xs:hexBinary</code>.</termdef></p>
                
                <p>Conversion to and from <code>xs:hexBinary</code> can be performed by casting with
                    <code>xs:hexBinary()</code> and <code>xs:base64Binary()</code>.</p>
                <note>
                    <p>Internally it is likely that implementations will use the same byte
                        array representation for both data types, and that casting
                        will merely involve a change in the type annotation; it should not 
                        require data to be copied.</p>
                </note>

                <p><termdef id="dt-zero-length" term="zero-length">A <termref def="dt-binary-value"/>
                that contains no octets is referred to as being <term>zero-length</term>.
                A zero-length binary value is an item, and as such is a sequence of length
                one, which is not the same thing as an empty sequence.</termdef></p>
                
                <!--<p>An item of type <code>xs:base64Binary</code> can be <emph>empty</emph>, i.e.
                    contain no data, (in the same way that items of type <code>xs:string</code> can
                    contain no characters.) Where 'data' arguments to functions that return binary
                    data are optional (i.e. <code><emph>$arg as type</emph>?</code>) and any of
                    those optional arguments is set to the empty sequence, in general an empty
                    sequence is returned, rather than an empty item of type
                    <code>xs:base64Binary</code>. </p>-->
                
                
            </div2>

            <div2 id="testing">
                <head>Test suite</head>
                <p>A suite of test-cases for all the functions defined in this module, in <bibref
                        ref="qt3"/> format, is defined at <bibref ref="tests.binary"/>.</p>
            </div2>

            <div2 id="conformance">
                <head>Conformance</head>
                <p>This specification follows the general remarks on and terminology for conformance
                    given in <xspecref spec="FO40" ref="conformance"/></p>

                <p>In this document, text labeled as an example or as a note is provided for
                    explanatory purposes and is not normative.</p>
            </div2>

            <div2 id="namespace-prefixes">
                <head>Namespaces and prefixes</head>
                <p>The functions defined in this document are contained in the namespace
                    <code>http://expath.org/ns/binary</code>. The conventional
                    prefix for this namespace is <code>bin</code>.</p>
                
                <p>This document uses the prefix <code>bin</code> to refer to this namespace.
                    User-written applications can choose a different prefix to refer to the
                    namespace, so long as it is bound to the correct URI.</p>


                <!--<note>
                    <p>The above namespace URIs are not expected to change from one version of this
                        document to another. The contents of these namespaces may be extended to
                        allow additional functions (and errors, and serialization parameters) to be
                        defined.</p>
                </note>-->


            </div2>

            <div2 id="func-signatures">
                <head>Function signatures and descriptions</head>
                <p>Each function (or group of functions having the same name) is defined in this
                    specification using a standard proforma, full details of which can be found in
                        <xspecref spec="FO40" ref="func-signatures"/>. In particular in this version
                    (trailing) optional arguments for functions (introduced in XPath 4.0) are used
                    where appropriate in the signatures, rather than multiple-arity signatures as
                    previously. </p>
                
                <p>All the functions defined in this specification are deterministic and independent
                of the static and dynamic context.</p>
                
                <p>All the functions described in this specification can in principle be defined
                in terms of two primitives: <function>bin:to-octets</function> and 
                <function>bin:from-octets</function>, which convert between a <termref def="dt-binary-value"/>
                and a sequence of <code>xs:unsignedByte</code> values (integers in the range 0 to 255).
                In many cases functions are specified with reference to a formal equivalent
                that defines the semantics of the function directly or indirectly in terms of these
                two primitives.</p>
            </div2>
        </div1>

        <div1 id="use-cases">
            <head>Use cases</head>
            <p>Development of this specification was driven by requirements which some XML
                developers regularly encounter in examining or generating data which is presented in
                binary, or other non-textual forms. Some typical use cases include:</p>
            <ulist>
                <item>
                    <p>Getting the dimensions of an image file.</p>
                </item>
                <item>
                    <p>Extracting image metadata.</p>
                </item>
                <item>
                    <p>Processing images embedded as base64 encodings within a SOAP message.</p>
                </item>
                <item>
                    <p>Processing legacy text files which use different encodings in separate
                        sections.</p>
                </item>
                <item>
                    <p>Generating PDF files from SVG graphical data.</p>
                </item>
            </ulist>
            <div2 id="example-JPEG">
                <head>Example – finding JPEG size</head>
                <p>As an example, the following code reads the binary form of a JPEG image file,
                    searches for the 'Start of Frame/DCT' segment, and unpacks the relevant binary
                    sections to integer-valued attributes <code>height</code> and <code>width</code>:</p>
                <example>
                    <eg xml:space="preserve"><![CDATA[
<xsl:variable name="binary" 
              select="file:read-binary(@href)" 
              as="xs:base64Binary"/>
<xsl:variable name="location" 
              select="bin:find($binary, 0, bin:hex('FFC0'))"/>
<size width="{bin:unpack-unsigned-integer($binary, 
                                          $location+5,
                                          2, 
                                          'most-significant-first')}"
      height="{bin:unpack-unsigned-integer($binary,
                                           $location+7,
                                           2,
                                           'most-significant-first')}"/>
]]></eg>
                    <p>The result is an element such as:</p>
<eg><![CDATA[<size width="377" height="327"/>]]></eg>
                </example>
                <note><p>The <code>'most-significant-first'</code> argument could
                    be omitted, because it is the default. This is the numeric format used in JPEG:
                    for further information see <specref ref="endianness"/>.</p></note>
            </div2>
            <div2 id="example-ASN1">
                <head>Example – reading and writing variable length ASN.1 integers</head>
                <changes>
                    <change>The functions in this example have been moved into a differing namespace
                        prefix (<code>asn:</code>) to avoid suggesting that they are part of the
                        supported function set.</change>

                </changes>
                <p><bibref ref="asn1"/>, used in a number of telecommunications industry standards,
                    defines a binary data syntax (the <term>basic encoding rules</term>)
                    for identifying and encoding
                    arbitrary data as streams of octets. Many of these
                    forms specify the length of data as part of their encoding. For example, 
                    an integer has a variable-length representation 
                    as a sequence of octets:</p>
                <ulist>
                    <item>
                        <p>The first octet has the value <code>0x02</code> to indicate
                        that this is an integer.</p>
                    </item>
                    <item>
                        <p>Next, a variable-length length field to indicate
                            the length of the payload. (This is designed to accommodate very
                            large integers, such as those found in cryptography.)</p>
                    </item>
                    <item>
                        <p>Finally, the payload itself: the octets of the integer value in
                            most-significant-first order.</p>
                    </item>
                </ulist>
                <example>
                    <p>To generate such a representation for an integer from XSLT/XPath, the
                        following code might be used:</p>
                    <eg xml:space="preserve"><![CDATA[
 <xsl:function name="asn:int-octets" as="xs:integer*">
    <xsl:param name="value" as="xs:integer"/>
    <xsl:sequence select="if ($value ne 0) 
                          then (bin:int-octets($value idiv 256), $value mod 256) 
                          else ()"/>
 </xsl:function>
 
 <xsl:function name="asn:encode-ASN-integer" as="xs:base64Binary">
    <xsl:param name="int" as="xs:integer"/>
    <xsl:variable name="octets" select="bin:int-octets($int)"/>
    <xsl:variable name="length-octets"
       select="let $l := count($octets) 
               return ( if ($l le 127) 
                        then $l 
                        else ( let $lo := bin:int-octets($l) 
                               return (128+count($lo), $lo)
                             )
                      )"/>
    <xsl:sequence select="bin:from-octets((2,$length-octets,$octets))"/>
 </xsl:function>]]></eg>
                    <p>The function <code>asn:int-octets</code> returns a sequence of all the
                        significant octets of the integer (i.e. eliminating leading zeroes) in
                        most-significant order. Examples of the encoding are: </p>
                    <eg xml:space="preserve"><![CDATA[
 asn:encode-ASN-integer(0) → "AgA="
 asn:encode-ASN-integer(1234) → "AgIE0g=="
 asn:encode-ASN-integer(123456789123456789123456789123456789) → "Ag8XxuPAMviQRa10ZoQEXxU="
               
 asn:encode-ASN-integer(123456789.. 900 digits... 123456789) → "AoIBdgaTo....EBF8V"]]></eg>
                    <p>The first example requires no octets to encode zero, hence its octets are
                        <code>2, 0</code>. Both the second and third examples can be represented in
                        less than 128 octets (2 and 15 respectively), so length is encoded as a
                        single octet. The first three octets of the result for the last example,
                        which encodes a 900-digit integer, are: <code>2, 130, 1</code> indicating that
                        the data is represented by (130-128) * 256 + 1 = 513 octets and the length
                        required two octets to encode.</p>
                    <p>Decoding is a matter of compound use of the integer decoding function:</p>
                    <eg xml:space="preserve"><![CDATA[
 <xsl:function name="asn:decode-ASN-integer" as="xs:integer">
    <xsl:param name="in" as="xs:base64Binary"/>
    <xsl:sequence
       select="let $lo := bin:unpack-unsigned-integer($in, 1, 1, 'BE') 
               return (
                  if ($lo le 127) 
                  then bin:unpack-unsigned-integer($in, 2, $lo, 'BE') 
                  else ( let $lo2 := $lo - 128, 
                             $lo3 := bin:unpack-unsigned-integer($in, 2 ,$lo2, 'BE') 
                         return bin:unpack-unsigned-integer($in, 2+$lo2, $lo3, 'BE')
                        )
               )"
    />
 </xsl:function>]]></eg>
                    <note><p>All numbers in ASN are 'big-endian'.</p></note>
                    <p>This function is the inverse of the encoding function above:</p>
                    <eg xml:space="preserve"><![CDATA[
 asn:decode-ASN-integer(xs:base64Binary("AgA=")) → 0
 asn:decode-ASN-integer(xs:base64Binary("AgIE0g==")) → 1234
 asn:decode-ASN-integer(xs:base64Binary("Ag8XxuPAMviQRa10ZoQEXxU=")) 
     → 123456789123456789123456789123456789              
 asn:decode-ASN-integer(xs:base64Binary("AoIBdgaTo....EBF8V")) 
     → 123456789.. 900 digits... 123456789                ]]></eg>
                </example>
            </div2>
        </div1>
 
 
        <div1 id="id-other-operations">
            <head>Other Operations on Binary Values</head>
        
             <p>This section provides a summary of operations on binary values beyond those 
             defined in this document.</p>
            
            <div2 id="conversion">
                <head>Conversions</head>
                
                <p>Casting is defined:</p>
                
                <ulist>
                    <item><p>Between <code>xs:hexBinary</code> and <code>xs:base64Binary</code>,
                    in either direction. Since the two types have the same value space,
                    conversion is lossless, and can be expected in most implementations
                    to have very low cost.</p></item>
                    <item><p>From <code>xs:string</code> to <code>xs:hexBinary</code>
                    or <code>xs:base64Binary</code>. The semantics correspond to the
                    XSD rules for validation of simple types. The two binary
                    types have different lexical representation, so conversion from
                    strings requires different input.</p></item>
                    <item><p>From <code>xs:hexBinary</code>
                    or <code>xs:base64Binary</code> to <code>xs:string</code>. 
                        The rules are defined in <xspecref spec="XP40" ref="casting-to-string"/>. 
                        The two binary types have different lexical representation, so the output
                    in the two cases is different.</p></item>
                </ulist>
                
            </div2>
            
            <div2 id="comparison">
                <head>Comparison</head>
                
                <p>Comparison of binary values is defined using any of the value comparison
                operators <code>eq</code>, <code>ne</code>, <code>le</code>, <code>lt</code>,
                <code>ge</code>, or <code>gt</code>. It is therefore defined also for the
                general comparison operators <code>=</code>, <code>!=</code>, <code>&lt;=</code>, <code>&lt;</code>,
                <code>>=</code>, and <code>></code>.</p>
                
                <p>The semantics are defined in <function>op:binary-equal</function>
                and <function>op:binary-less-than</function>.</p>
                
                <p>The two types <code>xs:hexBinary</code> and <code>xs:base64Binary</code>
                can be compared interchangeably.</p>
                
                <p>Because binary values are ordered, sequences of binary values can be sorted
                using the function <function>fn:sort</function>, or by using the <code>xsl:sort</code>
                instruction in XSLT or the <code>order by</code> clause in XQuery.</p>
            </div2>
            
            <div2 id="numeric-representation">
                <head>Numeric representation</head>
                
                <p>Integers can be converted to a string representation using any radix
                in the range 2 to 36 using the function <function>fn:format-integer</function>.</p>
                
                <p>Conversely, strings representing an integer using any radix in the range
                2 to 36 can be converted to an integer using the function <function>fn:parse-integer</function>.</p>
                
                <p>These functions do not directly involve binary values, but they can be used to
                convert between numbers and binary values by using a string representation as an intermediate
                format.</p>
                
                <p>See also the functions <function>bin:pack-integer</function>, 
                    <function>bin:unpack-integer</function>, and <function>bin:unpack-unsigned-integer</function>
                defined in this specification.</p>
            </div2>
            
            <div2 id="loading">
                <head>Loading and saving binary data</head>
                <changes>
                    <change>The <bibref ref="xpath-functions-40"/> function
                        <code>fn:binary-resource</code> has been added to the list of useful
                        functions.</change>
    
                </changes>
                <p>This module defines no specific functions for reading and writing binary data from
                    external resources, but other specifications provide some suitable mechanisms.</p>
                <p><bibref ref="xpath-functions-40"/> provides a function to retrieve binary
                    resources:</p>
                <example role="signature">
                    <proto role="example" name="binary-resource" return-type="xs:base64Binary">
                        <arg name="filesource" type="xs:string?"/>
                    </proto>
                </example>
                <p>The EXPath File Module <bibref ref="expath-file-40"/> provides three functions
                    suitable for use in file-based situations:</p>
                <example role="signature">
                    <proto role="example" prefix="file" name="read-binary" return-type="xs:base64Binary">
                        <arg name="file" type="xs:string"/>
                        <arg name="offset" type="xs:integer?" default="0"/>
                        <arg name="size" type="xs:integer?" default="()"/>
                    </proto>
                </example>
                <p>which reads binary data from an existing file, with an optional offset and size.</p>
                <example role="signature">
                    <proto role="example" prefix="file" name="write-binary" return-type="empty-sequence()">
                        <arg name="file" type="xs:string"/>
                        <arg name="value" type="xs:base64Binary"/>
                    </proto>
                </example>
                <p>which writes binary data into a new or existing file.</p>
                <example role="signature">
                    <proto role="example" prefix="file" name="append-binary" return-type="empty-sequence()">
                        <arg name="file" type="xs:string"/>
                        <arg name="value" type="xs:base64Binary"/>
                    </proto>
                </example>
                <p>which appends binary data onto the end of an existing file.</p>
    
                <!-- <p>There may be an argument for a positioned file:read-binary($file as
                        <ex:type>xs:string</ex:type>,$offset as <ex:type>xs:integer</ex:type>), for
                    access into large files without total read.</p>-->
            </div2>
        </div1>

        <div1 id="constants">
            <head>Defining constants and conversions</head>
            <p>The functions in this section can be used to define constant binary values
                or to perform simple conversions to string representations:</p>
            <div2 id="func-bin-hex">
                <head><?function bin:hex?></head>
            </div2>
            <div2 id="func-bin-binary">
                <head><?function bin:bin?></head>
            </div2>
            <div2 id="func-bin-octal">
                <head><?function bin:octal?></head>
            </div2>
            <div2 id="func-bin-to-octets">
                <head><?function bin:to-octets?></head>
            </div2>
            <div2 id="func-bin-from-octets">
                <head><?function bin:from-octets?></head>
            </div2>
        </div1>

        <div1 id="basic-operations">
            <head>Basic operations</head>
            <changes>
                <change>The function <code>find-all</code> in the example for <code>bin:find</code>
                    has been moved into a differing namespace prefix (<code>f:</code>) to avoid
                    suggesting that it is part of the supported function set.</change>

            </changes>
            <div2 id="func-bin-length">
                <head><?function bin:length?></head>
            </div2>
            <div2 id="func-bin-part">
                <head><?function bin:part?></head>
            </div2>
            <div2 id="func-bin-join">
                <head><?function bin:join?></head>
            </div2>
            <div2 id="func-bin-insert-before">
                <head><?function bin:insert-before?></head>
            </div2>
            <div2 id="func-bin-pad-left">
                <head><?function bin:pad-left?></head>
            </div2>
            <div2 id="func-bin-pad-right">
                <head><?function bin:pad-right?></head>
            </div2>
            <div2 id="func-bin-find">
                <head><?function bin:find?></head>
                <!--<changes>
                    <change>The function in the example for this function has been moved into a
                        differing namespace prefix (<code>f:</code>) to avoid suggesting that they
                        are part of the supported function set.</change>

                </changes>-->
            </div2>
        </div1>

        <div1 id="text-encoding">
            <head>Text decoding and encoding</head>
            <div2 id="func-bin-decode-string">
                <head><?function bin:decode-string?></head>
            </div2>
            <div2 id="func-bin-encode-string">
                <head><?function bin:encode-string?></head>
            </div2>
        </div1>

        <div1 id="numeric-packing">
            <head>Packing and unpacking of encoded numeric values</head>
            <div2 id="number-rep">
                <head>Numeric representation</head>
                <div3 id="endianness">
                    <head>Octet order</head>
                    <changes>
                        <change issue="1750">
                            The <code>octet-order</code> parameter of relevant functions now
                            has an <code>enum</code> type rather than a string type. In consequence,
                            supplying an incorrect value is now a type error 
                            (<xerrorref spec="XP" class="TY" code="0004"/>) and no longer
                            has a custom error code.
                        </change>
                    </changes>
                    <p>Packing and unpacking numeric values within binary data can be performed in
                        'most-significant-first' ('big-endian') or 'least-significant-first'
                        ('little-endian') octet order. The default is
                            <emph>'most-significant-first'</emph>. The relevant functions have an
                        optional parameter <code>$octet-order</code> whose string value controls the
                        order. Least-significant-first order is indicated by any of the values
                        <code>least-significant-first</code>, <code>little-endian</code> or
                        <code>LE</code>. Most-significant-first order is indicated by any of the
                        values <code>most-significant-first</code>, <code>big-endian</code> or
                        <code>BE</code>.</p>
                    
                    <p>The type of the <code>octet-order</code> argument to the relevant function
                    is given as <code>enum('least-significant-first', 'little-endian', 'LE',
                    'most-significant-first', 'big-endian', 'BE')</code>.</p>
                    
                    <p>By default, functions that convert numeric values to binary use
                    most-significant-first ordering. This corresponds to the order
                    most commonly used in network protocols, and is often referred to as
                    <term>network order</term>. If least-significant-first ordering is requested,
                    the order of octets in the result is reversed. This ordering, although
                    often used internally within computer hardware, is less commonly encountered
                    in network protocol standards: two places where it is used are the DICOM standard for
                    medical imaging, and the Bitcoin standard for cryptocurrency.</p>
                </div3>
                <div3 id="integer">
                    <head>Integer representation</head>
                    <p/>
                    <p>Integers within binary data are represented, or assumed to be represented, as
                        an integral number of octets. Integers where <code>$length</code> is greater
                        than 8 octets (and thus not representable as a <code>long</code>) might be
                        expected in some situations, e.g. encryption. Whether the range of integers
                        is limited to <code>±2^63</code> is <xtermref spec="FO40"
                            ref="implementation-dependent">implementation-dependent</xtermref>.</p>
                </div3>
                <div3 id="floating">
                    <head>Representation of floating point numbers</head>
                    <p>When packing and unpacking floating point numbers
                        (<code>xs:float</code> and <code>xs:double</code>), the binary
                        representations are expected to correspond with those of the IEEE
                        single/double-precision 32/64-bit floating point types <bibref ref="ieee754"
                        />. Consequently they will occupy 4 or 8 octets when packed.</p>
                    
                    <p>Special float and double formats are represented in IEEE format as follows:</p>
                 
                    <ulist>
                        <item><p><code>INF</code> maps to
                        <code>0x7f80_0000</code> (float), or <code>0x7ff0_0000_0000_0000</code>
                        (double). </p></item>
                        <item><p><code>-INF</code> maps to <code>0xff80_0000</code> (float),
                        or <code>0xfff0_0000_0000_0000</code> (double).</p></item>
                        <item><p>Negative zero maps to <code>0x8000_0000</code> (float),
                            or <code>0x8000_0000_0000_0000</code> (double).</p></item>
                        <item><p><code>NaN</code> in the XSD and XDM type system corresponds to a 
                            <term>quiet NaN</term> as defined in <bibref
                            ref="ieee754"/>, and therefore maps to <code>0x7fc0_0000</code> (float),
                            or <code>0x7ff8_0000_0000_0000</code> (double). These are the bit forms that
                            will be packed.</p></item>
                        <item><p>IEEE <term>signalling NaN</term> values may be encountered in binary
                        data, with the value range <code>0x7f80_0001</code> to
                        <code>0x7fbf_ffff</code> (float), or <code>0x7ff0_0000_0000_0001</code>
                            to <code>0x7ff7_ffff_ffff_ffff</code> or
                        <code>0xfff0_0000_0000_0001</code> to <code>0xfff7_ffff_ffff_ffff</code>
                        (double). Any such value encountered during unpacking will be replaced by a 
                        quiet <code>NaN</code>. Any low-order
                        payload in an unpacked quiet <code>NaN</code> is also zeroed.</p></item>

                    </ulist>
                </div3>
            </div2>
            <div2 id="func-bin-pack-double">
                <head><?function bin:pack-double?></head>
            </div2>
            <div2 id="func-bin-pack-float">
                <head><?function bin:pack-float?></head>
            </div2>
            <div2 id="func-bin-pack-integer">
                <head><?function bin:pack-integer?></head>
            </div2>
            <div2 id="func-bin-unpack-double">
                <head><?function bin:unpack-double?></head>
            </div2>
            <div2 id="func-bin-unpack-float">
                <head><?function bin:unpack-float?></head>
            </div2>
            <div2 id="func-bin-unpack-integer">
                <head><?function bin:unpack-integer?></head>
            </div2>
            <div2 id="func-bin-unpack-unsigned-integer">
                <head><?function bin:unpack-unsigned-integer?></head>
            </div2>
        </div1>

        <div1 id="bitwise">
            <head>Bitwise operations</head>
            <div2 id="func-bin-or">
                <head><?function bin:or?></head>
            </div2>
            <div2 id="func-bin-xor">
                <head><?function bin:xor?></head>
            </div2>
            <div2 id="func-bin-and">
                <head><?function bin:and?></head>
            </div2>
            <div2 id="func-bin-not">
                <head><?function bin:not?></head>
            </div2>
            <div2 id="func-bin-shift">
                <head><?function bin:shift?></head>
            </div2>
        </div1>

    </body>

    <back>
        <div1 id="biblio">
            <head>References</head>
            <div2 id="normative-biblio">
                <head>Normative references</head>
                <blist>
                    <bibl id="expath-bin" key="EXPath Binary 1.0">
                        <loc href="http://expath.org/spec/binary">Binary Module 1.0</loc>. Jirka
                        Kosek and John Lumley, editors. EXPath Module. 3 December 2013.</bibl>
                    <!--<bibl id="expath-file" key="EXPath File 1.0">
                        <loc href="http://expath.org/spec/file">File Module 1.0</loc>. Christian
                        Grün, Matthias Brantner and Gabriel Petrovay, editors. EXPath Module 20
                        February 2015.</bibl>-->
                    <bibl id="expath-file-40" key="EXPath File 4.0"/>


                    <bibl id="ieee754" key="IEEE 754-1985">IEEE Standard for Binary Floating-Point
                        Arithmetic. See <loc
                            href="http://standards.ieee.org/reading/ieee/std_public/description/busarch/754-1985_desc.html"
                            >http://standards.ieee.org/reading/ieee/std_public/description/busarch/754-1985_desc.html</loc></bibl>
                    <bibl id="ieee754-2019" key="IEEE 754-2019">IEEE. <emph>IEEE Standard for
                            Floating-Point Arithmetic.</emph>
                    </bibl>


                    <!--<bibl id="xpath" key="XML Path Language (XPath) Version 1.0"/>-->
                    <bibl id="xpath20" key="XML Path Language (XPath) 2.0"/>

                    <bibl id="xpath-functions-40" key="XQuery and XPath Functions and Operators 4.0"/>
                    <bibl id="xpath-40" key="XML Path Language (XPath) 4.0">
                        <!--<emph>CITATION: T.B.D.</emph>-->
                    </bibl>

                    <bibl id="xslt-40" key="XSL Transformations (XSLT) Version 4.0">
                        <emph>CITATION: T.B.D.</emph>
                    </bibl>
                    <!-- <bibl id="xpath-datamodel-30" key="XQuery and XPath Data Model (XDM) 3.0"/>
                    <bibl id="xpath-datamodel-31" key="XQuery and XPath Data Model (XDM) 3.1"/>-->
                    <bibl id="xpath-datamodel-40" key="XQuery and XPath Data Model (XDM) 4.0"/>



                    <bibl id="xquery-40" key="XQuery 4.0: An XML Query Language">
                        <emph>CITATION: T.B.D.</emph>
                    </bibl>

                    <!--<bibl id="xinclude" key="XML Inclusions (XInclude) Version 1.0 (Second Edition)"/>-->
                    <bibl id="xmlschema-2" key="XML Schema Part 2: Datatypes Second Edition"> XML
                        Schema Part 2: Datatypes Second Edition, Oct. 28 2004. Available at: <loc
                            href="http://www.w3.org/TR/xmlschema-2/"
                            >http://www.w3.org/TR/xmlschema-2/</loc>
                    </bibl>


                </blist>
            </div2>

            <div2 id="non-normative-biblio">
                <head>Non-normative references</head>
                <blist>
                    <bibl id="asn1" key="ASN.1"> OSI networking and system aspects – Abstract Syntax
                        Notation One (ASN.1) – see <loc
                            href="http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf"
                            >ASN.1 encoding rules: Specification of Basic Encoding Rules (BER),
                            Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)
                        </loc>. ITU-T X.690 (07/2002) </bibl>
                    <bibl id="tests.binary" key="Test-suite">The test suite for this module, using
                        QT3 format, is in the EXPath repository <loc
                            href="http://github.com/expath/expath-cg/tree/master/tests/qt3/binary"
                            >http://github.com/expath/expath-cg</loc> in the directory
                        tests/qt3/binary/</bibl>
                    <bibl id="qt3" key="QT3">
                        <loc href="http://dev.w3.org/2011/QT3-test-suite/">XML Query Test
                            Suite</loc>. W3C 21 June 2013. </bibl>

                    <bibl id="expath" key="EXPath">EXPath: Collaboratively Defining Open Standards
                        for Portable XPath Extensions. <loc href="http://expath.org/"
                            >http://expath.org/</loc>.</bibl>

                </blist>
            </div2>
        </div1>

        <div1 id="error-summary">
            <head>Error summary</head>
            <p>The error text provided with these errors is non-normative.</p>
            <error-list>
                <error spec="BIN40" code="differing-length-arguments"
                    label="Arguments of different length" id="error.differentLengthArguments">
                    <p>The two arguments to a bitwise operation are of differing lengths.</p>
                </error>
                <error spec="BIN40" code="index-out-of-range">
                    <p>Attempting to retrieve data outside the meaningful range of a binary data
                        type.</p>
                </error>
                <error spec="BIN40" code="negative-size">
                    <p>Size of binary portion, required numeric size or padding is negative.</p>
                </error>
                <error spec="BIN40" code="octet-out-of-range">
                    <p>Attempting to pack binary value with octet outside range 0-255.</p>
                </error>
                <error spec="BIN40" code="non-numeric-character">
                    <p>Wrong character in binary 'numeric constructor' string.</p>
                </error>
                <error spec="BIN40" code="unknown-encoding">
                    <p>The specified encoding is not supported.</p>
                </error>
                <error spec="BIN40" code="conversion-error">
                    <p>Error in converting to/from a string.</p>
                </error>
                <error spec="BIN40" code="unknown-significance-order">
                    <p>Unknown octet-order value.</p>
                </error>
            </error-list>
        </div1>



        <inform-div1 id="glossary">
            <head>Glossary</head>
            <?glossary?>
        </inform-div1>

        <inform-div1 id="other-functions">
            <head>Other Functions</head>
            <p>This Appendix describes some sources of functions or operators that fall outside the
                scope of the function library defined in this specification. It includes both
                function specifications and function implementations. Inclusion of a function in
                this appendix does not constitute any kind of recommendation or endorsement; neither
                is omission from this appendix to be construed negatively. This Appendix does not
                attempt to give any information about licensing arrangements for these function
                specifications or implementations.</p>

            <div2 id="functions-in-other-w3c-specs">
                <head>XPath Functions and Operators Defined in Other W3C Recommendations</head>

                <p>A number of W3C Recommendations make use of XPath, and in some cases such
                    Recommmendations define additional functions to be made available when XPath is
                    used in a specific host language.</p>
                <div3 id="functions-defined-in-XPathFO">
                    <head>Functions and Operators Defined in XPath and XQuery Functions and
                        Operators</head>
                    <p>Of particular interest to this specification, <bibref
                            ref="xpath-functions-40"/> defines<ulist><item><p>Comparison operators
                                    on <code>xs:hexBinary</code> and <code>xs:base64Binary</code>
                                    values, defining the semantics of the <code>eq</code>,
                                    <code>ne</code>, <code>lt</code> and <code>ge</code> operators
                                    applied to binary data. Each returns a boolean
                                    value.</p></item><item><p>A function to retrieve the value of a
                                    binary resource</p></item></ulist></p>
                    <!--<p><xspecref spec="FO40" ref="func-binary-equal"/> and <xspecref spec="FO40"
                            ref="func-binary-less-than"/></p>-->
                    <table role="data">
                        <thead>
                            <tr>
                                <th>Function name</th>
                                <th>Availability</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <xspecref spec="FO40" ref="func-binary-equal"/>
                                </td>
                                <td>XPath4.0+</td>
                                <td>Returns <code>true</code> if both binary values contain the same
                                    octet sequence.</td>
                            </tr>
                            <tr>
                                <td>
                                    <xspecref spec="FO40" ref="func-binary-less-than"/>
                                </td>
                                <td>XPath4.0+</td>
                                <td>Returns <code>true</code> if the first argument is less than the
                                    second.</td>
                            </tr>
                            <tr>
                                <td>
                                    <xspecref spec="FO40" ref="func-binary-resource"/>
                                </td>
                                <td>XPath4.0+</td>
                                <td>Returns a resource as <code>xs:base64Binary</code>.</td>
                            </tr>
                        </tbody>
                    </table>
                </div3>


            </div2>
            <div2 id="functions-defined-by-community-groups">
                <head>Functions Defined by Community Groups</head>
                <div3 id="functions-defined-in-EXPathFile">
                    <head>Functions Defined in EXPath File</head>
                    <p>Of particular interest to this specification, <bibref ref="expath-file-40"/>
                        defines the following functions for input and output of
                        <code>xs:base64Binary</code> values:</p>
                    <table role="data">
                        <thead>
                            <tr>
                                <th>Function name</th>
                                <th>Availability</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <xspecref spec="FILE40" ref="func-file-read-binary"/>
                                </td>
                                <td>XPath4.0+</td>
                                <td>Returns the content of a file in its Base64 representation.</td>
                            </tr>
                            <tr>
                                <td>
                                    <xspecref spec="FILE40" ref="func-file-write-binary"/>
                                </td>
                                <td>XPath4.0+</td>
                                <td>Writes a Base64 item as binary data to a file.</td>
                            </tr>
                            <tr>
                                <td>
                                    <xspecref spec="FILE40" ref="func-file-append-binary"/>
                                </td>
                                <td>XPath4.0+</td>
                                <td>Appends a Base64 item as binary data to a file.</td>
                            </tr>
                        </tbody>
                    </table>
                </div3>
            </div2>
        </inform-div1>

        <inform-div1 id="impl-def">
            <head>Checklist of implementation-defined features</head>
            <?imp-def-features?>
        </inform-div1>

        <inform-div1 id="changelog" diff="chg" at="2024-11-22">
            <head>Changes since version 1.0</head>
            <div2 id="changes-summary">
                <head>Summary of Changes</head>
                <?change-log?>
            </div2>

            <div2 id="changes-to-function-signatures">
                <head>Changes to Function Signatures</head>
                <olist>
                    <item>
                        <p>The function signatures of all the specified signatures now use the
                            'optional argument' syntax of XPath 4.0 where appropriate, rather than
                            giving several signatures of differing arity. Other than that, no
                            intended change to the semantics of the functions are assumed.</p>
                    </item>

                </olist>
            </div2>
            <!--<div2 id="miscellaneous-changes">
                <head>Miscellaneous Changes</head>
                <olist>
                    <item>
                        <p>The semantics of the HTML case-insensitive collation
                            <code>"http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"</code>
                            are now defined normatively in this specification rather than by
                            reference to the living HTML5 specification (which has changed since
                            3.1); and the rules now make ordering explicit rather than leaving it
                            implementation-defined.</p>
                    </item>                    
                </olist>
            </div2>-->
            <div2 id="editorial-changes">
                <head>Editorial Changes</head>
                <p>These changes are not highlighted in the change-marked version of the
                    specification.</p>
                <olist>
                    <item>
                        <p>The example functions in <specref ref="example-ASN1"/> have been moved
                            into a differing namespace prefix (<code>asn:</code>) to avoid
                            suggesting that they are part of the supported function set. This is in
                            accordance with the principle that the namespace
                            <code>http://expath.org/ns/binary</code> is reserved solely for use in
                            QNames for functions specified in this module.</p>
                    </item>

                </olist>
            </div2>
        </inform-div1>



        <inform-div1 id="back-compatibility" diff="chg" at="A">
            <head>Compatibility with Previous Versions</head>

            <p>This section summarizes the extent to which this specification is compatible with
                previous versions.</p>

            <p>Version 4.0 of this function library is fully backwards compatible with version 1.0,
                except as noted below:</p>

            <olist>
                <item diff="add" at="2024-11-25">
                    <p>The use of optional arguments in the function signatures means that minor
                        alterations to possible function calls, which would be invalid in 1.0, are
                        now supported. For example:</p>
                    <eg><![CDATA[bin:decode-string($string,'utf-8',0,())]]></eg>
                    <p>would be invalid in 1.0, as the fourth argument <code>$size</code> is defined
                        to be of type <code>xs:integer</code>. It is valid for 4.0 as the empty
                        sequence denotes default behaviour, that is decoding all octets after
                        <code>$offset</code>
                    </p>
                    <p>The functions <code>bin:decode-string</code>,<code>bin:encode-string</code>,
                        <code>bin:pack-double</code>, <code>bin:pack-float</code>,
                        <code>bin:pack-integer</code>, <code>bin:pad-left</code>,
                        <code>bin:pad-right</code>, <code>bin:part</code>,
                        <code>bin:unpack-double</code>, <code>bin:unpack-float</code>,
                        <code>bin:unpack-integer</code> and <code>bin:unpack-unsigned-integer</code>
                        all have similar incompatibilities.</p>
                </item>
                <item>
                    <p>The use of the type <code>xs:unsignedByte</code> for octet arguments,
                    and of an <code>enum</code> type for octet order, means that invalid values
                    for these arguments will now result in a type error 
                        <xerrorref spec="XP" class="TY" code="0004"/>, rather than a dynamic
                    error with a code in the <code>bin</code> namespace.</p>
                </item>
                <item>
                    <p>The way in which <function>bin:octal</function> adjusts the supplied
                        value to a whole number of octets is now specified much more precisely, and the result
                        might differ from the interpretation adopted by existing implementations.
                        Specifically, the result might differ through the presence or absence of
                        leading zero octets.</p>
                </item>
                <item>
                    <p>The way in which the <function>bin:encode-string</function> and
                        <function>bin:decode-string</function> functions handle byte order, and byte order marks,
                        has been clarified. The new rules may differ from the interpretation
                        adopted by existing implementations (in particular, it differs from
                        the interpretation that was assumed by the published test suite).</p>
                </item>
            </olist>
        </inform-div1>
    </back>
</spec>
