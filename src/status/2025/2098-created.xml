<item>
   <title>Issue #2098 created</title>
   <pubDate>2025-07-15T11:24:28Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2098</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2098</guid>
   <description>&lt;div&gt;&lt;p&gt;JNodes: combining node sequences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Internal questions and feedback on the &lt;code&gt;union&lt;/code&gt; operator, triggered by the JNodes proposal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Will &lt;code&gt;{ 1: 2 } union { 3: 4 }&lt;/code&gt; be allowed, or will it be &lt;code&gt;{ 1: 2 }/. union { 3: 4 }/.&lt;/code&gt; ?&lt;/li&gt;
&lt;li&gt;Combining maps and arrays: one might expect &lt;code&gt;{ 1: 2 } union { 3: 4 }&lt;/code&gt; to result in &lt;code&gt;{ 1: 2, 3: 4 }&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;union&lt;/code&gt; et al. are enhanced anyway, couldn’t they be generalized for sequences? &lt;code&gt;(1, 2) union 3&lt;/code&gt; → &lt;code&gt;(1, 2, 3)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;…which I answered as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I guess no; the conversion to JNodes is needed.&lt;/li&gt;
&lt;li&gt;…a good reason why we should not implicitly coerce maps/arrays to JNodes.&lt;/li&gt;
&lt;li&gt;For atomic-only sequences, it could be equivalent to &lt;code&gt;fn:distinct-values((A, B))&lt;/code&gt;. For heterogenous sequences, it gets tricky: How should &lt;code&gt;&amp;lt;a&amp;gt;1&amp;lt;/a&amp;gt; union 1e0&lt;/code&gt; be combined? Similar to how functions like &lt;code&gt;fn:min&lt;/code&gt; are defined, it could be the first item that determines how the remaining input is combined (but the operation would not be commutative anymore; &lt;code&gt;A union B&lt;/code&gt; might yield different results than &lt;code&gt;B union A&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
