<item>
   <title>Issue #1871 created</title>
   <pubDate>2025-03-13T10:39:55Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1871</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1871</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays and maps: consistency&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Suggestions (based on #1338, related: #1868)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;In symmetry with the &lt;code&gt;pairs&lt;/code&gt; lookup specifier, we should add &lt;code&gt;array:pairs&lt;/code&gt; and an inverse &lt;code&gt;array:of-pairs&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;In symmetry with the &lt;code&gt;values&lt;/code&gt; lookup specifier, we should add &lt;code&gt;array:values&lt;/code&gt; and &lt;code&gt;map:values&lt;/code&gt; functions, to retrieve the values of maps and the members of arrays as a sequence of arrays.&lt;/li&gt;
&lt;li&gt;In return, &lt;code&gt;array:members&lt;/code&gt; and &lt;code&gt;array:of-members&lt;/code&gt; seem redundant, and we should drop them.&lt;/li&gt;
&lt;li&gt;In analogy with the &lt;code&gt;keys&lt;/code&gt; specifier and &lt;code&gt;map:keys&lt;/code&gt;, we should add &lt;code&gt;array:keys&lt;/code&gt; (which returns a dense integer range).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;With version 4.0, we are adding a lot of promising and powerful new map and array features. This is a big step forward, compared to the obvious limitations of 3.1.&lt;/p&gt;
&lt;p&gt;Some aspects of the 3.1 design have made it difficult (or impossible) to fully adjust array and maps, but (in my opinion) the old overall concept was impressively consistent – and it is definitely a big challenge to achieve a 4.0 design that is not too fragmented.&lt;/p&gt;
&lt;p&gt;To me, this becomes particularly evident in the case of arrays. The following example sums up the items of all members of an array. For the cumbersome 3.1 solution…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $pos in 1 to array:size($array)
return sum($array($pos))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…we now have several (roughly?) equivalent options to do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;for member $m in $array return sum($m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array:members($array) ! sum(?value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$array?pairs::* ! sum(?value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$array?values::* ! sum(.)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The examples above imply that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for 1., an &lt;em&gt;array member&lt;/em&gt; is a sequence;&lt;/li&gt;
&lt;li&gt;for 2., an &lt;em&gt;array member&lt;/em&gt; is a map;&lt;/li&gt;
&lt;li&gt;for 3., an &lt;em&gt;array&lt;/em&gt; has pairs (but there is no &lt;code&gt;array:pairs&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;for 4., an &lt;em&gt;array&lt;/em&gt; has values (but there is no &lt;code&gt;array:values&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
