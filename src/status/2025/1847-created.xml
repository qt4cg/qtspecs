<item>
   <title>Issue #1847 created</title>
   <pubDate>2025-02-25T18:14:33Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1847</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1847</guid>
   <description>&lt;div&gt;&lt;p&gt;%method functions: explicit self reference?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a discussion issue; I am torn and would be interested in feedback:&lt;/p&gt;
&lt;p&gt;With the just added &lt;code&gt;%method&lt;/code&gt; annotation, basically two things happen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An implicit &lt;code&gt;$this&lt;/code&gt; parameter is preprended to the remaining parameters of a function.&lt;/li&gt;
&lt;li&gt;The current map will be bound to the first parameter by the lookup operator.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The inner workings of the example in the spec were not entierly obvious in today’s meeting…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $area := %method fn() {$this?x * $this?y}                     
return $area({ 'x': 3, 'y': 4 })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and I am wondering if we are not more flexible by making the self-referencing parameter explicit. This way, it would be up to the user to decide how the parameter is called…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $number := { 'value': 3, 'inc': %method fn($self) { $self?value + 1 } }
return $number?inc()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…the focus function syntax could be used alternatively…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $number := { 'value': 3, 'inc': %method fn { ?value + 1 } }
return $number?inc()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and it would allow for a stricter typing (&lt;code&gt;$this as map(*)&lt;/code&gt; is not very specific), and thus for better error reporting:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare record coord(
  x as xs:double,
  y as xs:double,
  product := %method fn($coord as coord) { $coord?x * $coord?y }
);
coord(3, 4)?product()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, it would cause new issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%method fn() {}&lt;/code&gt; would need to be made illegal&lt;/li&gt;
&lt;li&gt;The type of the first argument would need to be &lt;code&gt;map(*)&lt;/code&gt; or a subtype of it.&lt;/li&gt;
&lt;li&gt;Users may be led to write…&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $map := { 'fn': %method fn($a, $b) { $a * $b } }
return $map?fn(2, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the other hand, the existence of the &lt;code&gt;%method&lt;/code&gt; annotation should indicate that this function type differs from others.&lt;/p&gt;
&lt;p&gt;If we stick with the invisible &lt;code&gt;$this&lt;/code&gt; parameter, I wonder what &lt;code&gt;function-arity(%method fn() {})&lt;/code&gt; is supposed to return?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
