<item>
   <title>Issue #2020 created</title>
   <pubDate>2025-05-22T06:29:53Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2020</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2020</guid>
   <description>&lt;div&gt;&lt;p&gt;Reconsider the rationale for the xsl:select instruction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;a href="https://qt4cg.org/specifications/xslt-40/Overview.html#element-select"&gt;section for xsl:select&lt;/a&gt; in the XSLT specification includes the following rationale:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An XPath expression written within an XML attribute is subjected by the XML parser to attribute value normalization, which changes the arrangement of whitespace within the value. While this will rarely affect the actual meaning of the expression, it can mean that formatting is lost. &lt;strong&gt;Multi-line attribute values are therefore best avoided.&lt;/strong&gt; The loss of formatting also makes it difficult for an XSLT processor to provide precise error locations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are good reasons why &lt;code&gt;xsl:select&lt;/code&gt; would be a useful instruction, but I don't think providing precise error locations is one of them. This is just circumventing a problem that is solvable today for &lt;code&gt;select&lt;/code&gt; attributes. If an implementer wanted to supply a more precise error location in attribute values (and this would certainly help developers) they could adopt a solution similar to the &lt;a href="https://tc39.es/ecma426/#sec-intro"&gt;Ecma SourceMap&lt;/a&gt; used by EcmaScript transpilers and minifiers.&lt;/p&gt;
&lt;p&gt;In XSLT 3.0, we frequently work with multi-line &lt;code&gt;select&lt;/code&gt; attribute values on XSLT instructions without major issues. Examples include: when calling using  &lt;code&gt;fold-left()&lt;/code&gt; functions with one or more inner functions or using multi-case if/else expressions. Using &lt;code&gt;xsl:select&lt;/code&gt; just to get good error messages does not seem like a good trade-off for the added verbosity.&lt;/p&gt;
&lt;p&gt;For these cases, one can either use a simple XPath linter in the XSLT editor to highlight the specific error tokens caused by basic typos and unresolved references, and then fall back on using the compiler error messages with approximate line-numbers for (the many) cases that the linter cannot pick up.&lt;/p&gt;
&lt;h2&gt;Precise XSLT Error Locations and AI Agents&lt;/h2&gt;
&lt;p&gt;Modern XSLT editors are today fully integrated with AI Agents (e.g. GitHub Copilot or AI Positron). These agents use reported error-locations to explain and suggest a fix for the XSLT problem for the user. Precise error locations are critical to the quality of the explanation and the fix. This help should be available equally for XSLT &lt;code&gt;select&lt;/code&gt; attributes or &lt;code&gt;xsl:select&lt;/code&gt; instructions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
