<item>
   <title>Issue #1861 created</title>
   <pubDate>2025-03-07T08:27:30Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1861</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1861</guid>
   <description>&lt;div&gt;&lt;p&gt;xsl:next-match with-all-params&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; instruction is useful when writing local templates to customize the behavior of an imported XSLT. Unfortunately, there is a limitation due to the fact that &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; does not pass along parameters unless the parameters are defined as tunneling or the parameters are explicitly coded using &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fact that &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; does not automatically pass along parameters can be surprising or lead to cumbersome workarounds, and limits how &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; can be used when writing local templates to customize the behavior of imported XSLT.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In situations where parameters are defined in an imported XSLT it might not be feasible to change parameters to tunneling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In situations where a variety of parameters might be in scope when a template that uses &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; is invoked, currently each parameter needs to be explicitly coded using &lt;code&gt;&amp;lt;xsl:param&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt; in &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt;, even though the parameters might not be relevant to the purpose or logic of the template. This may lead to fragile and less maintainable code and increases the cognitive load for developers, especially when working with complex, multi-layered stylesheets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This proposal aims to simplify the use of the &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; instruction while being backwards compatible.&lt;/p&gt;
&lt;h2&gt;Proposal&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add an option to &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; to enable passing along all parameters. This option might take the form of a new optional attribute on &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; named &lt;code&gt;with-all-params&lt;/code&gt; (this name is similar to the existing element name &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt;) that takes a yes/no (or Boolean) value and defaults to no (false).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An instruction &lt;code&gt;&amp;lt;xsl:next-match with-all-params="no"/&amp;gt;&lt;/code&gt; would operate the same as &lt;code&gt;&amp;lt;xsl:next-match/&amp;gt;&lt;/code&gt; currently does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An instruction &lt;code&gt;&amp;lt;xsl:next-match with-all-params="yes"/&amp;gt;&lt;/code&gt; would operate the same as &lt;code&gt;&amp;lt;xsl:next-match/&amp;gt;&lt;/code&gt; currently does with the difference that all parameters that were in scope when the current template was invoked will remain in scope for the next matching template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An instruction &lt;code&gt;&amp;lt;xsl:next-match with-all-params="yes"&amp;gt;&lt;/code&gt; that contains &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt; should operate the same as described in the preceding paragraph with the difference that parameters defined by &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt; will also be in scope for the next matching template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a parameter defined by &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt; within &lt;code&gt;&amp;lt;xsl:next-match with-all-params="yes"&amp;gt;&lt;/code&gt; has the same name as a parameter that was in scope when the current template was invoked, then the effective value of that parameter should be the value defined by &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt;. This will allow a template to override parameters when necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize, &lt;code&gt;&amp;lt;xsl:next-match with-all-params="yes"&amp;gt;&lt;/code&gt; should invoke the next matching template and automatically pass along all parameters that were in scope when the current template was invoked, and optionally allow using &lt;code&gt;&amp;lt;xsl:with-param&amp;gt;&lt;/code&gt; to set additional parameters or modify parameter values.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Given this input document:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- input.xml --&amp;gt;
&amp;lt;section&amp;gt;
    &amp;lt;p&amp;gt;hello&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This stylesheet &lt;code&gt;import.xsl&lt;/code&gt; provides a set of base templates. The template matching element "p" uses &lt;code&gt;&amp;lt;xsl:next-match/&amp;gt;&lt;/code&gt; in it's current (default) operation.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- import.xsl --&amp;gt;
&amp;lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="3.0" expand-text="yes"&amp;gt;
    
    &amp;lt;xsl:output indent="yes"/&amp;gt;
    &amp;lt;xsl:mode on-no-match="shallow-copy"/&amp;gt;
    
    &amp;lt;xsl:template match="section"&amp;gt;
        &amp;lt;section&amp;gt;
            &amp;lt;xsl:apply-templates&amp;gt;
                &amp;lt;xsl:with-param name="a" select="'a'"/&amp;gt;
                &amp;lt;xsl:with-param name="b" select="'b'"/&amp;gt;
            &amp;lt;/xsl:apply-templates&amp;gt;
        &amp;lt;/section&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    
    &amp;lt;xsl:template match="p"&amp;gt;
        &amp;lt;xsl:param name="a"/&amp;gt;
        &amp;lt;xsl:param name="b"/&amp;gt;
        &amp;lt;xsl:param name="c"/&amp;gt;
        &amp;lt;p&amp;gt;a {$a}&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;b {$b}&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;c {$c}&amp;lt;/p&amp;gt;
        &amp;lt;xsl:next-match/&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the output of the above stylesheet &lt;code&gt;import.xsl&lt;/code&gt; and the input document:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;section&amp;gt;
   &amp;lt;p&amp;gt;a a&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;b b&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;c &amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;hello&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This stylesheet &lt;code&gt;before.xsl&lt;/code&gt; imports the stylesheet &lt;code&gt;import.xsl&lt;/code&gt; and defines a template to customize how &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements are processed. The parameter &lt;code&gt;$a&lt;/code&gt; needs to be intercepted and forwarded even though this template is not doing anything with &lt;code&gt;$a&lt;/code&gt;. The parameter &lt;code&gt;$b&lt;/code&gt; is overridden, and the parameter &lt;code&gt;$c&lt;/code&gt; is added within &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- before.xsl --&amp;gt;
&amp;lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="3.0"&amp;gt;
    
    &amp;lt;xsl:import href="import.xsl"/&amp;gt;
    
    &amp;lt;xsl:template match="p"&amp;gt;
        &amp;lt;xsl:param name="a"/&amp;gt;
        &amp;lt;p&amp;gt;customization&amp;lt;/p&amp;gt;
        &amp;lt;xsl:next-match&amp;gt;
            &amp;lt;xsl:with-param name="a" select="$a"/&amp;gt;
            &amp;lt;xsl:with-param name="b" select="'buzz'"/&amp;gt;
            &amp;lt;xsl:with-param name="c" select="'c'"/&amp;gt;
        &amp;lt;/xsl:next-match&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This stylesheet &lt;code&gt;after.xsl&lt;/code&gt; does the same thing as the previous stylesheet but uses &lt;code&gt;with-all-params="yes"&lt;/code&gt;. The template does not need to intercept and forward the parameter &lt;code&gt;$a&lt;/code&gt; because this is handled automatically by &lt;code&gt;with-all-params="yes"&lt;/code&gt;. The parameter &lt;code&gt;$b&lt;/code&gt; is overridden, and the parameter &lt;code&gt;$c&lt;/code&gt; is added within &lt;code&gt;&amp;lt;xsl:next-match&amp;gt;&lt;/code&gt; in the same way as the previous stylesheet. Although this is a small example in which the parameter &lt;code&gt;$a&lt;/code&gt; is the only savings, the benefit of  &lt;code&gt;with-all-params="yes"&lt;/code&gt; can be significant in scenarios where there are more parameters.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- after.xsl --&amp;gt;
&amp;lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="4.0"&amp;gt;
    
    &amp;lt;xsl:import href="import.xsl"/&amp;gt;
    
    &amp;lt;xsl:template match="p"&amp;gt;
        &amp;lt;p&amp;gt;customization&amp;lt;/p&amp;gt;
        &amp;lt;xsl:next-match with-all-params="yes"&amp;gt;
            &amp;lt;xsl:with-param name="b" select="'buzz'"/&amp;gt;
            &amp;lt;xsl:with-param name="c" select="'c'"/&amp;gt;
        &amp;lt;/xsl:next-match&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two stylesheets above (&lt;code&gt;before.xsl&lt;/code&gt; and &lt;code&gt;after.xsl&lt;/code&gt;) should produce the same output.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- output.xml --&amp;gt;
&amp;lt;section&amp;gt;
   &amp;lt;p&amp;gt;customization&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;a a&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;b buzz&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;c c&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;hello&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
