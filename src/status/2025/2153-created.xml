<item>
   <title>Issue #2153 created</title>
   <pubDate>2025-08-06T18:53:06Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2153</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2153</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove limitations from `enum` type&lt;/p&gt;&lt;div class="markup"&gt;&lt;blockquote&gt;
&lt;p&gt;"Tolkein" isn't an actual instance of enum("Tolkein"), it's only coercible to that type, and when types are used in paths it has to be an actual instance. I think we need to fix that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Originally posted by @michaelhkay in &lt;a href="https://github.com/qt4cg/qtspecs/issues/2150#issuecomment-3160717989"&gt;#2150&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It seems strange that there is no way to create a value that is an instance of a &lt;em&gt;singleton enumeration type&lt;/em&gt;. Only casting (and  annotation, which is a kind of casting too) is available.&lt;/p&gt;
&lt;p&gt;On the other hand:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $x as enum("foo") := "foo"
return ( ()
  , $x instance of enum("foo")
  , $x instance of xs:string
  , atomic-equal($x, "foo")
)
(: true(), true(), true() :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that &lt;code&gt;"foo"&lt;/code&gt; &lt;strong&gt;should&lt;/strong&gt; be an instance of &lt;code&gt;enum("foo")&lt;/code&gt;, and then &lt;code&gt;enum("foo")&lt;/code&gt; is a subtype of &lt;code&gt;xs:string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And the following is unclear (from &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-enumeration-types"&gt;3.2.6 Enumeration Types&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;It follows from these rules that an atomic item will only satisfy an &lt;code&gt;instance of&lt;/code&gt; test if it has the correct type annotation, and this typically requires an explicit cast. So the expression &lt;code&gt;"red" instance of enum("red", "green", "blue")&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, while &lt;code&gt;"red" cast as enum("red") instance of enum("red", "green", "blue")&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Probably, a more narrow reason is that a singleton enumeration type is an "anonymous atomic type derived from &lt;code&gt;xs:string&lt;/code&gt; &lt;em&gt;by restriction&lt;/em&gt; using an enumeration facet" that permits only one value.  Yes, this makes type checking for an enum more complex, but seems not more complex than casting.&lt;/p&gt;
&lt;p&gt;Anyway, is it possible to make any instance of &lt;code&gt;xs:string&lt;/code&gt; also an instance of the corresponding singleton enumeration type?  (that is, essentially make it so that this casting happens "hidden", if required).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
