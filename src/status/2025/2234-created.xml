<item>
   <title>Issue #2234 created</title>
   <pubDate>2025-10-07T09:06:32Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2234</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2234</guid>
   <description>&lt;div&gt;&lt;p&gt;Replace `a/get(XX)` with `a/?(XX)`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;get(Expr)&lt;/code&gt; syntax in NodeTests feels clumsy - it looks too much like a function call. I would like to explore replacing it with &lt;code&gt;?(Expr)&lt;/code&gt; (with the parentheses optional as with lookup expressions).&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;$map/get("date of birth")&lt;/code&gt; would become &lt;code&gt;$map/?"date of birth"&lt;/code&gt;, and &lt;code&gt;$map/get($name)&lt;/code&gt; would become &lt;code&gt;$map/?$name&lt;/code&gt;. It could also be used for selection by name in XNode trees: &lt;code&gt;$parent/?$name&lt;/code&gt; would mean the same as &lt;code&gt;$parent/*[node-name()=$name]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Achieving this isn't completely straightforward. The expression &lt;code&gt;$map/?"date of birth"&lt;/code&gt; already matches the grammar, even in 3.1 - though in 3.1 it will always raise a type error, because  the LHS of '/' must be of type node(), while the context item for unary '?' must be a map or array. In 4.0 the expression &lt;code&gt;$map/?"date of birth"&lt;/code&gt; is perfectly valid, but it returns the same as &lt;code&gt;$map?"date of birth"&lt;/code&gt; -- that is the actual date of birth, not a JNode that can be used for onward navigation.&lt;/p&gt;
&lt;p&gt;One approach to delivering the revised semantics would be to make "/?" a two-character token, an operator in its own right.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get()&lt;/code&gt; can also appear after an axis, for example &lt;code&gt;$map/descendant::get("date of birth")&lt;/code&gt;, or after "//" as in &lt;code&gt;$map//get("date of birth")&lt;/code&gt;. I think we can make &lt;code&gt;?&lt;/code&gt; work in both these contexts, though it might be a little tortuous.&lt;/p&gt;
&lt;p&gt;The new uses of &lt;code&gt;?&lt;/code&gt; would be followed by a KeySpecifier that follows the same rules as in lookup expressions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
