<item>
   <title>Issue #2169 created</title>
   <pubDate>2025-08-16T17:34:08Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2169</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2169</guid>
   <description>&lt;div&gt;&lt;p&gt;Longest-token rule incorrectly produces `StringInterpolation` delimiter&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;StringInterpolation&lt;/code&gt; currently defines a two-character token, curly right brace + backtick, to follow &lt;code&gt;Expr&lt;/code&gt; as a terminator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StringInterpolation ::= "`{" Expr? "}`"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On other occasions, &lt;code&gt;Expr&lt;/code&gt; is followed by a single right curly brace:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EnclosedExpr ::= "{" Expr? "}"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following applies to tokenization (the "longest-token" rule):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the current position is not the end of the input, then return the longest literal terminal or variable terminal that can be matched starting at the current position, regardless whether this terminal is valid at this point in the grammar.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My concern is that input like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;&amp;lt;a&amp;gt;{42}`&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is going to be mis-tokenized under the longest-token rule: after &lt;code&gt;42&lt;/code&gt;, the next (longest) token is the two-character &lt;code&gt;StringInterpolation&lt;/code&gt; terminator, which however is not a valid terminator of the &lt;code&gt;EnclosedExpr&lt;/code&gt; serving as &lt;code&gt;CommonContent&lt;/code&gt; of the direct element constructor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proposed fix&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My proposal is to replace the two-character tokens that introduce and terminate &lt;code&gt;StringInterpolation&lt;/code&gt; with single backticks around an &lt;code&gt;EnclosedExpr&lt;/code&gt; with no intervening whitespace:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StringInterpolation ::= "`" EnclosedExpr "`"   /* ws: explicit */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This replaces both of the two-character delimiters of &lt;code&gt;StringInterpolation&lt;/code&gt;, while still describing the intended language, but without causing the longest-token rule to produce a token that cannot be handled afterwards.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
