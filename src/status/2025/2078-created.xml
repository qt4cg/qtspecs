<item>
   <title>Issue #2078 created</title>
   <pubDate>2025-07-03T03:14:09Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2078</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2078</guid>
   <description>&lt;div&gt;&lt;p&gt;2031/2025 JNodes: inconsistency in data model taxonomy, definitions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Per chair request, I'm raising an issue on PR #2031 (on issue #2025), even though it has not been adopted by the CG.&lt;/p&gt;
&lt;p&gt;I strongly support the JNodes proposal. But in its current state, I have concerns about the fundamentals. If I am right, or only partly right, adjustments will have cascading effects.&lt;/p&gt;
&lt;p&gt;I realize that throughout the specs we use the "Definition" rubric loosely, but, for the points I raise below, I would ask that we at least aspire to a more robust definition of "definition." I draw on the classic Aristotelian model, where a good definition should specify the definiendum's genus ("definiendum" = "the thing to be defined"), then supply only those predicates needed to distinguish the definiendum from other species of that genus. The classic example is the definition of "human being" as a "rational animal." The animal is the genus, and the adjective "rational" delimits human beings from non-human being animals. No need to get hung up on details -- that's the gist of the what informs my comments below.&lt;/p&gt;
&lt;p&gt;The PR proposes the new top-level structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GNode
&lt;ul&gt;
&lt;li&gt;XNode&lt;/li&gt;
&lt;li&gt;JNode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first term is defined: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: The term generic node or GNode is a collective term for XNodes (more commonly called simply nodes) representing the parts of an XML document, and JNodes, often used to represent the parts of a JSON document.]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This definition attempts to define things outside the scope of the definiendum. It is presented here as a kind of abstract umbrella category for more specific things. Not a big deal; we carry on:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: An XNode, more commonly referred to simply as a node, represents a construct found in an XML document. There are seven kinds: document nodes, element nodes, attribute nodes, text nodes, comment nodes, processing instruction nodes, and namespace nodes]
[Definition: A JNode represents an encapsulation of a value in a tree of maps and arrays, such as might be obtained by parsing a JSON document. XDM maps and arrays, however, are more general than those found in JSON.]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Each of these two definitions says not what the definiendum is, but rather what it does ("represents": like a member of parliament represents constituents? -- confusing). It also includes buffer words that introduce intermediaries between the definiendum and the thing you would think most immediate to it: "construct," "found," "encapsulation," "value."&lt;/p&gt;
&lt;p&gt;More difficult is the fact that, like GNode, an XNode is an abstract category and not a thing in itself. But a JNode, we learn later, is not an abstract category, but an actual thing, with properties. So at the top level of the taxonomy, we have an inconsistency, between abstract categories that have no instantiation, versus those that do, and the two are put in parataxis.&lt;/p&gt;
&lt;p&gt;The definition of JNode is not well formulated. It restricts itself to "a value in a tree of maps and arrays" but not to maps and arrays themselves. Does the quoted phrase mean a map entry or an array member? Or the value within said entry or member? &lt;/p&gt;
&lt;p&gt;Slight tangent: in the specs' definition of "value," the term is not really defined, but simply said to be synonymous with "sequence." But in practice the word substitution doesn't work. More often, the specs use "value" in a more restricted, common-sense meaning, to describe a two-term relationship. A thing "owns" a value and some datum inhabits the role of that thing's value. X has value Y. Y is value of X. We run into problems with the ambiguous word "value." Currently a JNode encapsulates a value (see above). But it also has the property (we learn later) of value. So the value has a value?&lt;/p&gt;
&lt;p&gt;The JNode definition is sharpened, not in the data model, where it should be, but in the opening sentence of XSLT section 20: "A JNode is a wrapper around a map or array, or around a value that appears within the content of a map or array." This raises the question, what is a wrapper? And content? But it also raises the question about the relationship between JNode and map and between JNode and array, and the juxtaposition of JNode with XNode accentuates the difference. We would never say that an XNode is a wrapper around an element, an attribute, etc. The inconsistency is of a piece with the confusion I've pointed out above concerning the taxonomy of the data model.&lt;/p&gt;
&lt;p&gt;Before I propose a solution, I need to probe a similar problem that already exists in the specs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: A &lt;strong&gt;function&lt;/strong&gt; is an item that can be &lt;strong&gt;called&lt;/strong&gt;. ]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The word "called" is set in boldface, as if it is a technical term defined elsewhere. It is not, and is rarely used in the specs. What is it for something to be callable? Non-callable? To my mind, we do not have a proper definition of "function," and it is fair game for adjustment. As we have done. In 4.0 we have promoted the function and its proper parts into the topmost level of the data model taxonomy (with adjustments to a few definitions).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: An array item (also called simply an array) is a function item that represents an array.]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This suffers from the same flaws as GNode and XNode ("represents"), and is tautologous. In the version 3.1 definition of "map" we had the same problem, but the version 4.0 definition at least avoids the tautology.&lt;/p&gt;
&lt;p&gt;So, to sum, we have definitions that aren't, inconsistency in our data model taxonomy, and a variety of other problems.&lt;/p&gt;
&lt;h3&gt;A different approach&lt;/h3&gt;
&lt;p&gt;We all intuit that the new taxonomy GNode - (XNode | JNode) is meaningful, useful, and important. Arrays and maps really are trees as much as they are functions.&lt;/p&gt;
&lt;p&gt;Let all three terms GNode, XNode, and JNode be defined as abstract categories.&lt;/p&gt;
&lt;p&gt;Just as XNode is subdivided into specific xnodes, let JNode subdivide into four specific jnodes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;map entry&lt;/li&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;array member&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Adopt the same approach we do for xnodes, and define each of the four on its own terms. Define map - map entry and array - array member along lines similar to the approach adopted in 6.6 to define element - attribute (quite analogous!). We have wrestled over having to have both sequence and selector properties. But with this new approach, we are not stuck. Only map and array jnodes require a sequence property. Map entry and array member jnodes require only the selector property, not the sequence.&lt;/p&gt;
&lt;p&gt;This approach is extensible. Suppose we have a proposal for a new JNode. It's a blork, and every blork has one or more cheegs, each one of which has one or more drazers. We simply define three more JNodes: blork, cheeg, drazer. We make sure that the properties for each are suited to what they are individually (the same way we do for the 7 types of XNodes).&lt;/p&gt;
&lt;p&gt;One more step, the most controversial: drop Map Items and Array Items from the Function Items category. Yes, there is a fundamental way in which maps and arrays behave like (non-map/array) functions, but there are also equally fundamental ways in which maps and arrays behave like XNodes. If we do not need to define maps and arrays subordinate to XNodes/nodes, then why should we define them subordinate to functions? JNodes have dual citizenship.&lt;/p&gt;
&lt;p&gt;An alternative taxonomy is to drop the concept of GNode altogether, and let there be four kinds of item: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;item 
&lt;ul&gt;
&lt;li&gt;anyAtomicType &lt;/li&gt;
&lt;li&gt;XNode 
&lt;ul&gt;
&lt;li&gt;attribute &lt;/li&gt;
&lt;li&gt;document &lt;/li&gt;
&lt;li&gt;element &lt;/li&gt;
&lt;li&gt;text &lt;/li&gt;
&lt;li&gt;comment &lt;/li&gt;
&lt;li&gt;processing-instruction &lt;/li&gt;
&lt;li&gt;namespace &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JNode/JFunction 
&lt;ul&gt;
&lt;li&gt;map &lt;/li&gt;
&lt;li&gt;map entry &lt;/li&gt;
&lt;li&gt;array &lt;/li&gt;
&lt;li&gt;array member &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;function(*)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
