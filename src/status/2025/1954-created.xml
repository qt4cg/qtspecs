<item>
   <title>Issue #1954 created</title>
   <pubDate>2025-04-24T09:39:56Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1954</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1954</guid>
   <description>&lt;div&gt;&lt;p&gt;Private fields in records&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It would be nice to have some way of indicating that some of the fields in a record are (in some sense) private, intended for internal use.&lt;/p&gt;
&lt;p&gt;I'm not proposing full encapsulation - the instances of a record type are maps, and can be manipulated by functions such as map:keys(), map:get(), and map:put() which expose all the keys.&lt;/p&gt;
&lt;p&gt;Rather I'm proposing a convention that makes it difficult to access the fields "accidentally" using lookup expressions: a bit like naming the fields using a leading underscore, but something a bit stronger. Analogous to reflection in Java, which allows you to break encapsulation with a bit of effort.&lt;/p&gt;
&lt;p&gt;I'd suggest making the keys for these "private" fields QNames rather than strings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the record declaration, we allow a field name to be a QName rather than a string: record(private:data as item()*, long, lat).&lt;/li&gt;
&lt;li&gt;QNames can't be used directly in a lookup; to access the field, you need to know what namespace "private" is bound to, which doesn't need to be published information (though it is of course discoverable)&lt;/li&gt;
&lt;li&gt;Internally the implementor of this interface can bind a QName to a private variable and use this:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;declare %private variable $private:data as xs:QName('http://my.private.namespace/', 'data')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and then access it using &lt;code&gt;$record?$private:data&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
