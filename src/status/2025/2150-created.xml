<item>
   <title>Issue #2150 created</title>
   <pubDate>2025-08-06T08:26:10Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2150</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2150</guid>
   <description>&lt;div&gt;&lt;p&gt;XSLT Patterns to match JNodes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Supersedes #1776.&lt;/p&gt;
&lt;p&gt;Part of the motivation for introducing JNodes was to make rule-based recursive-descent transformation of JSON structures much easier. This issue addresses part of that capability, namely defining patterns that match JNodes (and perhaps improving the patterns that match maps and arrays).&lt;/p&gt;
&lt;p&gt;In general I think the patterns that match JNodes should be distinct from the patterns that match XNodes; although we have unified path expressions so that a/b can select either an XNode or a JNode, I think there would be too much scope for confusion if match="a/b" were able to match a JNode as well as an XNode.&lt;/p&gt;
&lt;p&gt;My first idea would be to allow the syntax &lt;code&gt;match="jnode(a)"&lt;/code&gt; for a template rule that matches JNodes having a selector property of "a", similarly &lt;code&gt;jnode(a/b)&lt;/code&gt;, &lt;code&gt;jnode(a//b)&lt;/code&gt;, &lt;code&gt;jnode(a/*/b)&lt;/code&gt;, &lt;code&gt;jnode(a[x="c"])&lt;/code&gt; with semantics defined in much the same way.&lt;/p&gt;
&lt;p&gt;But there's a question how this relates to type patterns. With type patterns, we can already do &lt;code&gt;match="type(jnode(record(Author, Title, *)))"&lt;/code&gt; which matches a JNode whose content is of type &lt;code&gt;record(Author, Title, *)&lt;/code&gt;. Where syntactically possible we allow type patterns to be abbreviated, so this would become &lt;code&gt;match="jnode(record(Author, Title, *))"&lt;/code&gt; which conflicts with the above.&lt;/p&gt;
&lt;p&gt;An analogy with &lt;code&gt;element(N, T)&lt;/code&gt; might suggest &lt;code&gt;match="jnode(K, V)"&lt;/code&gt; where K constrains the selector property of the JNode, and V constrains its content property. So we might have &lt;code&gt;match="jnode(books, array(record(Author, Title, *)))"&lt;/code&gt; to match a JNode whose selector is "books" and whose content is of type  &lt;code&gt;array(record(Author, Title, *))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At the same time, while matching maps by a type such as &lt;code&gt;match="record(Author, Title, *))"&lt;/code&gt; works well, I find that this is often accompatied by a predicate so it becomes &lt;code&gt;match="record(Author, Title, *))[Author='Tolkein']"&lt;/code&gt;. It would be nice to express this more concisely and readably perhaps as &lt;code&gt;match="record(Author[.='Tolkein'], Title, *))"&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
