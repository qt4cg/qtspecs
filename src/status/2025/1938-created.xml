<item>
   <title>Issue #1938 created</title>
   <pubDate>2025-04-18T20:36:04Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1938</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1938</guid>
   <description>&lt;div&gt;&lt;p&gt;Invoking coerced methods&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;@ChristianGruen, in BaseXdb/basex#2420, brought up a test case similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare record local:r(
    f as fn() as item()
);

local:r(%method fn() {.})
? f()
=&amp;gt; map:keys()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a method passed to the constructor, and retrieved by the lookup operator, one would expect the function call to return the map, and the result to be &lt;code&gt;f&lt;/code&gt;, the set of keys of the map. With BaseX's current implementation however, it fails with &lt;code&gt;[XPDY0002] .: Context value is undefined.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The reason for this failure is function coercion. The record constructor asks for a more specific type than that of the supplied function, so it is subject to function coercion. This creates a new function item, which preserves the method annotation, and which effects a call to the original one. The lookup operator then is applied to the newly created function item, which as a method is equipped with the map as its context item. But when the original function gets called, that context item is not propagated to it. So there is a (rightful?) complaint about an undefined context.&lt;/p&gt;
&lt;p&gt;I may be missing something here, but I do not see anything in the spec that makes the context item available to the coerced function, so I think that the described behavior is in fact conformant to the spec.&lt;/p&gt;
&lt;p&gt;But as it contradicts the original expectation, I would be grateful for a clarification.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
