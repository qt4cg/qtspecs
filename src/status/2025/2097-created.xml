<item>
   <title>Issue #2097 created</title>
   <pubDate>2025-07-13T10:31:47Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/2097</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-2097</guid>
   <description>&lt;div&gt;&lt;p&gt;`jnode` as a subtype of `node`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It seems that introduce &lt;code&gt;jnode&lt;/code&gt; by extending &lt;code&gt;node&lt;/code&gt; is more consistent than introducing &lt;code&gt;jnode&lt;/code&gt; as a data type that is a sibling to &lt;code&gt;node&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I would like to hear comments about pros and cons of this approach.&lt;/p&gt;
&lt;p&gt;@ruv &lt;a href="https://github.com/qt4cg/qtspecs/pull/2083#issuecomment-3056148707"&gt;wrote&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I wonder what if &lt;code&gt;jnode&lt;/code&gt; was a subtype of &lt;code&gt;node&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;@michaelhkay &lt;a href="https://github.com/qt4cg/qtspecs/pull/2083#issuecomment-3062732836"&gt;wrote&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Then all operations on node would become available for jnode, including many that obviously don't make sense, for example getting the in-scope namespaces, applying schema validation, etc etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This does not seem to be a problem. There are many features that make sense for one node kind (or type) and don't make sense for other.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn:name()&lt;/code&gt; does not make sense for &lt;code&gt;document-node()&lt;/code&gt;, &lt;code&gt;comment()&lt;/code&gt;, &lt;code&gt;text()&lt;/code&gt; (but applies to them and return the empty string);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn:in-scope-prefixes()&lt;/code&gt; applies to only a node that is an &lt;code&gt;element()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;the constructor &lt;code&gt;document { }&lt;/code&gt; does not accept an attribute node.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus, nodes that are a subtype of jnode can have their own restrictions.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;jnode&lt;/code&gt; as subtype of &lt;code&gt;node&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;There can be four direct subtypes of &lt;code&gt;jnode&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map-node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array-node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map-entry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array-member&lt;/code&gt; (or maybe let's call it &lt;code&gt;array-entry&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, &lt;code&gt;jnode&lt;/code&gt; is a union of them: &lt;code&gt;jnode = map-node | array-node | map-entry | array-entry&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Nodes of the type &lt;code&gt;map-node&lt;/code&gt; and &lt;code&gt;array-node&lt;/code&gt; are similar to &lt;code&gt;document-node&lt;/code&gt;. Their parent is &lt;strong&gt;always&lt;/strong&gt; &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The child axis of a &lt;code&gt;jnode&lt;/code&gt; can contains &lt;strong&gt;only&lt;/strong&gt; nodes of the type &lt;code&gt;map-entry | array-entry&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An advantage of this approach is that there is no need to introduce XNode and GNode, and corresponding confusion, like say that &lt;code&gt;node()&lt;/code&gt; matches XNode, but not GNode (in the general case).&lt;/p&gt;
&lt;p&gt;This probably also allows us to specify XSLT for jnodes more seamlessly.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
