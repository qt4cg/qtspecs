<item>
   <title>Issue #641 created</title>
   <pubDate>2023-07-25T16:04:25Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/641</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-641</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization fallback&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose that we drop some serialization errors in favour of producing a fallback representation of the supplied value.&lt;/p&gt;
&lt;p&gt;The rationale is that (a) serialization is often used in contexts like xsl:message where the primary purpose is diagnostic, and the last thing you want when producing diagnostics is a secondary error; and (b) seeing a fallback representation of an inappropriate value often shows you much more clearly what you have done wrong than any error message can do.&lt;/p&gt;
&lt;p&gt;Compare with the &lt;code&gt;.toString()&lt;/code&gt; method in Java and similar languages, which always outputs something even if it's not quite what you wanted.&lt;/p&gt;
&lt;p&gt;I'm not proposing to change the principle that the output should always be syntactically valid (e.g. well formed XML or JSON).&lt;/p&gt;
&lt;p&gt;I think some of the specific error conditions we might drop are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In sequence normalization rule 7, instead of raising an error when an attribute, namespace, or function (including a map or array) is encountered, serialize that item using the adaptive output method, treat the result as a text node, and insert the text node into sequence S6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the JSON output method: when a sequence of two or more items is encountered, instead of raising SERE0023, treat it as an array containing those items.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Closely related, and perhaps best considered together: should the &lt;code&gt;fn:string()&lt;/code&gt; function accept anything as input, and never raise an error?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
