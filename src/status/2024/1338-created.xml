<item>
   <title>Issue #1338 created</title>
   <pubDate>2024-07-22T11:05:42Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1338</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1338</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays and maps: Members, entries, values, contents, pairs, …&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;With version 4.0, we are adding a lot of promising and powerful new map and array features. This is a big step forward, compared to the obvious limitations of 3.1.&lt;/p&gt;
&lt;p&gt;Some aspects of the 3.1 design have made it difficult (or impossible) to fully adjust array and maps, but (in my opinion) the old overall concept was impressively consistent – and it is definitely a big challenge to achieve a 4.0 design that is not too fragmented.&lt;/p&gt;
&lt;p&gt;To me, this becomes particularly evident in the case of arrays. The following example sums up the items of all members of an array. For the cumbersome 3.1 solution…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;for $pos in 1 to array:size($array)
return sum($array($pos))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…we now have at least several (roughly?) equivalent options to do this; for example…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;for member $m in $array return sum($m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array:members($array) ! sum(?value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$array?entry::* ! sum(?value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$array?value::* ! sum(.)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;…which is great – but the downside is that we have introduced a terminological jungle. The examples above could imply that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for 1., an &lt;em&gt;array member&lt;/em&gt; is a sequence (which it indeed is);&lt;/li&gt;
&lt;li&gt;for 2., an &lt;em&gt;array member&lt;/em&gt; is a map;&lt;/li&gt;
&lt;li&gt;for 3., an &lt;em&gt;array&lt;/em&gt; has entries (but there is no &lt;code&gt;array:entries&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;for 4., an &lt;em&gt;array&lt;/em&gt; has values (which is true, but &lt;code&gt;array:value&lt;/code&gt; returns a different structure).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, with the current proposals, &lt;code&gt;$array:content::1&lt;/code&gt; gives us the sequence-concatenated version of the first member of an array. Similar observations can be made with maps: &lt;code&gt;map:entries($map)&lt;/code&gt; returns singleton maps, whereas &lt;code&gt;$map?entry::*&lt;/code&gt; is actually equivalent to &lt;code&gt;map:pairs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fundamental obstacle are clear have already been discussed a lot, but I think that with each new concept, we should try really hard not to blur terminology, and work with terms that users can assign to the underlying concepts without too much guessing or trial’n’error.&lt;/p&gt;
&lt;p&gt;My general suggestions would be to…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;align the new lookup terminology and the builtin functions, and&lt;/li&gt;
&lt;li&gt;omit, rename or drop builtin functions that do not rely on the existing or arising terminology.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My concrete proposals:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As we already have &lt;code&gt;map:pairs&lt;/code&gt;, &lt;code&gt;$map-or-array?entry::*&lt;/code&gt; should become &lt;code&gt;$map-or-array?pair::*&lt;/code&gt;, and we should add a &lt;code&gt;array:pairs&lt;/code&gt; function, and probably &lt;code&gt;array:of-pairs&lt;/code&gt; (see #832). We shouldn’t do it the other way round and rename &lt;code&gt;map:pairs&lt;/code&gt; to &lt;code&gt;map:entries&lt;/code&gt;, as the existing &lt;code&gt;map:entry&lt;/code&gt; function returns a singleton map.&lt;/li&gt;
&lt;li&gt;If we keep calling the sequence-concatenated result “content”, we should include it in the definition of sequence-concatenation. In addition, &lt;code&gt;(array|map):values&lt;/code&gt; should be renamed to &lt;code&gt;(array|map):contents&lt;/code&gt; (see #1179).&lt;/li&gt;
&lt;li&gt;Due to the existence of &lt;code&gt;array:value::*&lt;/code&gt;, we should make clear what an “array value” is, how it it positions itself in relation to an “array member”, and we should add &lt;code&gt;map:values&lt;/code&gt; and &lt;code&gt;array:values&lt;/code&gt; for equivalent results.&lt;/li&gt;
&lt;li&gt;Due to the existence of &lt;code&gt;array:key::*&lt;/code&gt;, we should add a &lt;code&gt;array:keys&lt;/code&gt; function (which returns a dense integer range). &lt;code&gt;1 to array:size($array)&lt;/code&gt; could then be written as &lt;code&gt;array:keys($array)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As we have &lt;code&gt;map:entries&lt;/code&gt; and &lt;code&gt;map:merge&lt;/code&gt;, we could add equivalent &lt;code&gt;array:entries&lt;/code&gt; and &lt;code&gt;array:merge&lt;/code&gt; functions.&lt;/li&gt;
&lt;li&gt;I would suggest dropping &lt;code&gt;array:members&lt;/code&gt;/&lt;code&gt;array:of-members&lt;/code&gt; in favor of either &lt;code&gt;array:split&lt;/code&gt;/&lt;code&gt;array:join&lt;/code&gt;, &lt;code&gt;array:pairs&lt;/code&gt;/&lt;code&gt;array:of-pairs&lt;/code&gt; (see 1.) or &lt;code&gt;array:entries&lt;/code&gt;/&lt;code&gt;array:merge&lt;/code&gt; (see 5). I really believe that an “array member“ should not be a map; an “array pair” or ”array entry” certainly could.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One might question if we should really introduce map terminology for arrays. I think we have no other chance if we want to treat maps and arrays identically with lookup key specifiers, and it may help us later on to treat both data structures as similar as possible.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
