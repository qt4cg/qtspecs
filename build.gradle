buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://maven.saxonica.com/maven" }
  }

  // Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01'
    }
  }

  dependencies {
    classpath group: 'com.saxonica', name: 'Saxon-EE', version: '12.2'
  }
}

plugins {
  id "java"
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://dev.saxonica.com/maven" }
}

configurations {
  transform.extendsFrom(implementation)
}

dependencies {
  implementation (
    [group: 'com.saxonica', name: 'Saxon-EE', version: '12.2' ],
    files("${projectDir}/lib/xjparse-3.1.0.jar")
  )
}

ext {
  TIMESTAMP = new Date().format('yyyy-MM-dd HH:mm:ss Z')
  debugTransformations = findProperty('debugTransformations') == "true"
  pedanticBuild = findProperty('pedantic') == 'true'
}

defaultTasks 'publish'

task publish(dependsOn: ["publish-xpath-functions-40",
                         "publish-xquery-40",
                         "publish-xslt-40",
                         "publish-datamodel-40",
                         "publish-xslt-xquery-serialization-40",
                         "publish-expath-40"]) {
  inputs.dir "${buildDir}/www"
  outputs.file "${buildDir}/www/index.html"

  doLast {
    Date now = new Date()
    PrintStream index = new PrintStream(new File("${buildDir}/www/index.html"));
    index.println("<!DOCTYPE html>")
    index.println("<html xmlns='http://www.w3.org/1999/xhtml'>")
    index.println("<head>")
    index.println("<title>QT4CG index page</title>")
    index.println("<style>html { font-size: 16pt }</style>")
    index.println("</head>")
    index.println("<body>")
    index.println("<h1>Index</h1>")
    index.print("<p>Published ")
    index.print(now.format("dd MMM yyyy"))
    index.print(" at ")
    index.print(now.format("HH:mm:ss Z"))
    index.println(".</p>")

    index.println("<ul>");

    def www = new File("${buildDir}/www")
    def indexes = []
    www.listFiles().each { file ->
      int pos = Math.max(file.toString().indexOf("/www/"),file.toString().indexOf("\\www\\"));
      String path = file.toString().substring(pos+5)
      if (new File("${file}/Overview.html").exists()) {
        index.println("<li><a href='${path}/Overview.html'>${path}</a></li>")
      } else if (new File("${file}/xpath-40.html").exists()) {
        index.println("<li><a href='${path}/xpath-40.html'>xpath-40</a></li>")
        index.println("<li><a href='${path}/xquery-40.html'>xquery-40</a></li>")
      }
    }

    index.println("</body>")
    index.println("</html>")
    index.close();
  }
}

task "publish-xquery-40"(dependsOn: ["xquery_40", "xpath_40"]) {
}
task "publish-xpath-functions-40"(dependsOn: ["xpath_functions_40", 'xpath_keyword_tests']) {
}
task "publish-xslt-40"(dependsOn: ["xslt_40"]) {
}
task "publish-datamodel-40"(dependsOn: ["datamodel_40"]) {
}
task "publish-xslt-xquery-serialization-40"(dependsOn: ["serialization_40"]) {
}



// ============================================================

task qt4tests(
  description: "Make sure the qt4tests repository is available"
) {
  doLast {
    if (file("${buildDir}/qt4tests").exists()) {
      exec {
        workingDir "${buildDir}/qt4tests"
        commandLine "git", "pull"
      }
    } else {
      exec {
        commandLine "git", "clone", "https://github.com/qt4cg/qt4tests.git",
          "${buildDir}/qt4tests"
      }
    }
  }
}

task saxon_config(
) {
  inputs.dir fileTree(dir: "${projectDir}/lib")
  outputs.file "${buildDir}/config.xml"

  doLast {
    def cfg = new PrintStream(new File("${buildDir}/config.xml"))
    if (file("${projectDir}/lib/saxon-license.lic").exists()) {
      cfg.println("<configuration xmlns='http://saxon.sf.net/ns/configuration'")
      cfg.println("               edition='EE'")
      cfg.println("               licenseFileLocation='${projectDir}/lib/saxon-license.lic'/>")
    } else {
      cfg.println("<configuration xmlns='http://saxon.sf.net/ns/configuration'")
      cfg.println("               edition='HE'/>")
    }
    cfg.close();
  }
}

task fo_generate_tests(
  dependsOn: ["qt4tests", "saxon_config"]
) {
  inputs.file "${projectDir}/specifications/xpath-functions-40/src/function-catalog.xml"
  inputs.file "${projectDir}/specifications/xpath-functions-40/style/generate-qt3-test-set.xsl"
  outputs.file "${buildDir}/test-suite/app/fo-spec-examples.xml"
  outputs.upToDateWhen { false }

  doLast {
    if (file("${projectDir}/lib/saxon-license.lic").exists()) {
      transform("${projectDir}/specifications/xpath-functions-40/src/function-catalog.xml",
                "${projectDir}/specifications/xpath-functions-40/style/generate-qt3-test-set.xsl",
                "${buildDir}/test-suite/app/fo-spec-examples.xml",
                ["-t", "-val"], [:])
    } else {
      println("Cannot generate tests from specification; no Saxon license available.")
    }
  }
}


// ============================================================
// EXPath modules

task "publish-expath-40"(dependsOn: ["binary_40", "file_40"]) {
}
["binary","file"].each { shortName ->

  def expathDir = "${projectDir}/specifications/EXPath"
  def mainDir = "${expathDir}/$shortName"  
  def srcDir = "${mainDir}/src"  
  def src = "${srcDir}/$shortName-functions.xml"
  def xmlFile = "$shortName-40.xml"
  def expanded = "${buildDir}/expanded/$shortName/$shortName-functions-40.xml" 
  def wwwDir = "${buildDir}/www/expath-$shortName-40"
  def specName = ("$shortName" == "binary") ? "BIN40" : "FILE40"
   
  task "${shortName}_40"(
    group: "Specifications",
    description: "Build the EXPath ${shortName} 4.0 specification",
    dependsOn: ["${shortName}_xml", "${shortName}_html",
                "${shortName}_resources", "${shortName}_generate_tests"]
  ) {
    // Just somewhere to hang dependencies
  }
  
  task "etc_${specName}"(
    dependsOn: ["${shortName}_merge", "saxon_config"],
    description: "Build the etc/${specName}.xml index"
  ) {
    inputs.file "${projectDir}/style/extract.xsl"
    outputs.file "${buildDir}/etc/${specName}.xml"
  
    doLast {
      transform(expanded,
                "${projectDir}/style/extract.xsl",
                "${buildDir}/etc/${specName}.xml",
                ["specdoc": "${specName}",
                 "uri": "https://qt4cg.org/specifications/EXPath/${shortName}-40/"])
    }
  }
  
  task "${shortName}_merge"(
    description: "Expand the EXPath ${shortName} sources into a single XML file",
    dependsOn: ["common_sources", "saxon_config"]
  ) {
    inputs.dir "$srcDir"
    inputs.dir "${projectDir}/specifications/xpath-functions-40/style"
    outputs.file "$expanded"
  
    doLast {
      transform(src,
                "${projectDir}/specifications/xpath-functions-40/style/merge-function-specs.xsl",
                expanded)
    }
    doLast {
      xmlvalidate(expanded)
    }
  }
  
  task "${shortName}_xml"(
    dependsOn: ["${shortName}_merge", "saxon_config"],
    group: "Spec XML",
    description: "Create the XML version of the specification"
  ) {
    inputs.file "${projectDir}/style/identity.xsl"
    inputs.file "$expanded"
    outputs.file "${wwwDir}/$xmlFile"
  
    doLast {
      transform(expanded,
                "${projectDir}/style/identity.xsl",
                "${wwwDir}/$xmlFile")
    }
  }
  
  task "${shortName}_html"(
    dependsOn: ["${shortName}_merge", "setup_crossref_indexes", "saxon_config"],
    group: "Spec HTML",
    description: "Create the HTML and XHTML versions of the specification"
  ) {
    inputs.dir "${projectDir}/style"
    inputs.dir "${expathDir}/style"
    inputs.dir "${mainDir}/style"
    inputs.file "$expanded"
    outputs.file "$wwwDir/Overview.xml"
    outputs.file "$wwwDir/Overview.html"
  
    doLast {
      transform(expanded,
                "$mainDir/style/expath-functions.xsl",
                "$wwwDir/Overview.xml")
    }
  
    doLast {
      fixupHtml("$wwwDir/Overview.xml",
                "$wwwDir/Overview.html")
    }
  }
  task "${shortName}_resources"(
    description: "Copy static resources for publication"
  ) {
    doFirst {
      mkdir "${wwwDir}"
    }
  
    doLast {
      copy {
        from "$srcDir"
        into "${wwwDir}"
        include "function-catalog.xml"
      }
    }
  
    doLast {
      copy {
        from "${projectDir}/specifications/css"
        into "${wwwDir}/css"
        include "w3c-base.css"
        include "qtspecs.css"
        include "xpath-functions-40.css"
      }
    }
  
    doLast {
      copy {
        from "${projectDir}/specifications/js"
        into "${wwwDir}/js"
        include "fo-datalist.js"
        include "toc.js"
      }
    }
  
    doLast {
      // The W3C uses index files called Overview.html, so that's what the
      // build produces. But everyone else, including the GitHub pages that
      // back qt4cg.org, uses index.html. So redirect.
      PrintStream index = new PrintStream(new File("${wwwDir}/index.html"));
      index.println("<!DOCTYPE html>")
      index.println("<html xmlns='http://www.w3.org/1999/xhtml'>")
      index.println("<head>");
      index.println("<meta http-equiv='refresh' content='0; url=Overview.html' />");
      index.println("</head>");
      index.println("<body>");
      index.println("<p>See <a href='Overview.html'>Overview</a>.</p>");
      index.println("</body>");
      index.println("</html>");
      index.close();
    }
  }
  
  task "${shortName}_generate_tests"(
    dependsOn: ["qt4tests", "saxon_config"]
  ) {
    inputs.file "${projectDir}/specifications/EXPath/${shortName}/src/function-catalog.xml"
    inputs.file "${projectDir}/specifications/EXPath/style/generate-test-set.xsl"
    outputs.file "${buildDir}/test-suite/app/${shortName}-spec-examples.xml"
    outputs.upToDateWhen { false }

    doLast {
      if (file("${projectDir}/lib/saxon-license.lic").exists()) {
        transform("${projectDir}/specifications/EXPath/${shortName}/src/function-catalog.xml",
                  "${projectDir}/specifications/EXPath/style/generate-test-set.xsl",
                  "${buildDir}/test-suite/app/${shortName}-spec-examples.xml",
                  ["-t", "-val"], [:])
      } else {
        println("Cannot generate tests from specification; no Saxon license available.")
      }
    }
  }
}


// ============================================================

task xpath_functions_40(
  group: "Specifications",
  description: "Build the XPath Functions and Operators 4.0 specification",
  dependsOn: ["fo_xml", "fo_html", "fo_resources", "fo_generate_tests"]
) {
  // Just somewhere to hang dependencies
}

task common_sources(
  type: Copy
) {
  into "${buildDir}/image-sources"
  from "${projectDir}/specifications/image-sources"
  include "*.xml"
}

task fo_merge(
  description: "Expand the FO sources into a single XML file",
  dependsOn: ["common_sources", "saxon_config"]
) {
  inputs.dir "${projectDir}/specifications/xpath-functions-40/src"
  inputs.dir "${projectDir}/specifications/xpath-functions-40/style"
  outputs.file "${buildDir}/expanded/xpath-functions-40/xpath-functions-40.xml"

  doLast {
    transform("${projectDir}/specifications/xpath-functions-40/src/xpath-functions.xml",
              "${projectDir}/specifications/xpath-functions-40/style/merge-function-specs.xsl",
              "${buildDir}/expanded/xpath-functions-40/xpath-functions-40.xml")
  }

  doLast {
    xmlvalidate(fo_merge.outputs.getFiles().getSingleFile().toString())
  }
}

task fo_xml(
  dependsOn: ["fo_merge", "saxon_config"],
  group: "Spec XML",
  description: "Create the XML version of the specification"
) {
  inputs.file "${projectDir}/style/identity.xsl"
  inputs.file fo_merge.outputs.getFiles().getSingleFile()
  outputs.file "${buildDir}/www/xpath-functions-40/xpath-functions-40.xml"

  doLast {
    transform("${fo_merge.outputs.getFiles().getSingleFile().toString()}",
              "${projectDir}/style/identity.xsl",
              "${fo_xml.outputs.getFiles().getSingleFile()}")
  }
}

task fo_html(
  dependsOn: ["fo_merge", "setup_crossref_indexes", "saxon_config"],
  group: "Spec HTML",
  description: "Create the HTML and XHTML versions of the specification"
) {
  inputs.dir "${projectDir}/style"
  inputs.dir "${projectDir}/specifications/xpath-functions-40/style"
  inputs.file fo_merge.outputs.getFiles().getSingleFile()
  outputs.file "${buildDir}/www/xpath-functions-40/Overview.xml"
  outputs.file "${buildDir}/www/xpath-functions-40/Overview.html"

  doLast {
    transform("${fo_merge.outputs.getFiles().getSingleFile().toString()}",
              "${projectDir}/specifications/xpath-functions-40/style/xpath-functions.xsl",
              "${buildDir}/www/xpath-functions-40/Overview.xml")
  }

  doLast {
    fixupHtml("${buildDir}/www/xpath-functions-40/Overview.xml",
              "${buildDir}/www/xpath-functions-40/Overview.html")
  }
}

task fo_resources(
  description: "Copy static resources for publication"
) {
  doFirst {
    mkdir "${buildDir}/www/xpath-functions-40"
  }

  doLast {
    copy {
      from "${projectDir}/specifications/xpath-functions-40/src"
      into "${buildDir}/www/xpath-functions-40"
      include "analyze-string.xsd"
      include "schema-for-json.xsd"
      include "function-catalog.xml"
    }
  }

  doLast {
    copy {
      from "${buildDir}/type-hierarchy"
      into "${buildDir}/www/xpath-functions-40"
    }
  }

  doLast {
    copy {
      from "${projectDir}/specifications/css"
      into "${buildDir}/www/xpath-functions-40/css"
      include "w3c-base.css"
      include "qtspecs.css"
      include "xpath-functions-40.css"
    }
  }

  doLast {
    copy {
      from "${projectDir}/specifications/js"
      into "${buildDir}/www/xpath-functions-40/js"
      include "fo-datalist.js"
      include "toc.js"
    }
  }

  doLast {
    // The W3C uses index files called Overview.html, so that's what the
    // build produces. But everyone else, including the GitHub pages that
    // back qt4cg.org, uses index.html. So redirect.
    PrintStream index = new PrintStream(new File("${buildDir}/www/xpath-functions-40/index.html"));
    index.println("<!DOCTYPE html>")
    index.println("<html xmlns='http://www.w3.org/1999/xhtml'>")
    index.println("<head>");
    index.println("<meta http-equiv='refresh' content='0; url=Overview.html' />");
    index.println("</head>");
    index.println("<body>");
    index.println("<p>See <a href='Overview.html'>Overview</a>.</p>");
    index.println("</body>");
    index.println("</html>");
    index.close();
  }
}

task xpath_keyword_tests(
  group: "Test suite",
  description: "Create the BuiltInKeywords.xml tests",
  dependsOn: ["saxon_config"]
) {
  inputs.file "${projectDir}/specifications/xpath-functions-40/style/generate-keyword-test-set.xsl"
  inputs.file "${projectDir}/specifications/xpath-functions-40/src/function-catalog.xml"
  outputs.file "${buildDir}/test-suite/misc/BuiltInKeywords.xml"

  doLast {
    transform("${projectDir}/specifications/xpath-functions-40/src/function-catalog.xml",
              "${projectDir}/specifications/xpath-functions-40/style/generate-keyword-test-set.xsl",
              "${buildDir}/test-suite/misc/BuiltInKeywords.xml")
  }
}

// ============================================================

task grammar_40(
  dependsOn: ["saxon_config"]
) {
  inputs.dir "${projectDir}/specifications/grammar-40"
  inputs.file "${projectDir}/style/grammar-identity.xsl"
  outputs.file "${buildDir}/grammar-40/xpath-grammar.xml"

  // This is a tiny bit complicated because I only want to validate once
  // each time the grammar changes and in order to get Gradle to do that
  // I have to have an input and an output; so I copy it to build
  doLast {
    transform("${projectDir}/specifications/grammar-40/xpath-grammar.xml",
              "${projectDir}/style/grammar-identity.xsl",
              "${grammar_40.outputs.getFiles().getSingleFile()}")
  }
    
  doLast {
    xmlvalidate("${buildDir}/grammar-40/xpath-grammar.xml")
  }
}

// ============================================================

task xslt_40(
  group: "Specifications",
  description: "Build the XSLT 4.0 specification",
  dependsOn: ["xslt_grammar", "xslt_merge_catalog", "xslt_resources",
              "xslt_html", "xslt_xml"]
) {
  // Just somewhere to hang dependencies
}

task xslt_grammar(
  dependsOn: ["grammar_40", "saxon_config"],
  description: "Build the grammar files for XSLT 4.0"
) {
  inputs.dir "${projectDir}/style"
  inputs.dir "${projectDir}/specifications/xslt-40/src"
  inputs.dir "${projectDir}/specifications/xslt-40/style"
  inputs.dir "${projectDir}/specifications/grammar-40"
  outputs.file "${buildDir}/xslt-40/src/xslt-40-assembled.xml"

  doLast {
    transform("${grammar_40.outputs.getFiles().getSingleFile()}",
              "${projectDir}/specifications/grammar-40/parser/strip.xsl",
              "${buildDir}/xslt-40/temp-xslt40-grammar.xml",
              ["spec1": "xslt40-patterns"])
  }

  doLast {
    transform("${buildDir}/xslt-40/temp-xslt40-grammar.xml",
              "${projectDir}/style/extract-tokens.xsl",
              "${buildDir}/xslt-40/tokens-with-dups.xml",
              ["spec": "xslt-40",
               "grammar-file": buildDir.toURI().resolve("xslt-40/temp-xslt40-grammar.xml")])
  }

  doLast {
    transform("${buildDir}/xslt-40/tokens-with-dups.xml",
              "${projectDir}/style/elim-dup-tokens.xsl",
              "${buildDir}/xslt-40/tokens.xml")
  }

  doLast {
    transform("${projectDir}/specifications/xslt-40/src/xslt.xml",
              "${projectDir}/specifications/xslt-40/style/convert-grammar.xsl",
              "${buildDir}/xslt-40/src/xslt-40-assembled.xml",
              ["spec": "xslt40",
               "grammar-file": buildDir.toURI().resolve("xslt-40/temp-xslt40-grammar.xml"),
               "tokens-file": buildDir.toURI().resolve("xslt-40/tokens.xml")])
  }
}

task xslt_merge_catalog(
  dependsOn: ["xslt_grammar", "saxon_config"]
) {
  inputs.dir "${projectDir}/style"
  inputs.dir "${projectDir}/specifications/xslt-40/src"
  inputs.dir "${projectDir}/specifications/xslt-40/style"
  inputs.file xslt_grammar.outputs.getFiles().getSingleFile()
  outputs.file "${buildDir}/xslt-40/src/xslt-expanded.xml"

  doLast {
    copy {
      from "${projectDir}/specifications/xslt-40/src"
      into "${buildDir}/xslt-40/src"
      include "*.xsd"
      include "*.rnc"
      include "*.xsl"
    }
  }

  doLast {
    transform("${projectDir}/specifications/xslt-40/src/function-catalog.xml",
              "${projectDir}/specifications/xslt-40/style/function-streamability.xsl",
              "${buildDir}/xslt-40/built-in-streamability-expanded.xml")
  }

  doLast {
    transform("${xslt_grammar.outputs.getFiles().getSingleFile()}",
              "${projectDir}/specifications/xslt-40/style/merge-xslt-function-specs.xsl",
              "${buildDir}/xslt-40/src/xslt-expanded0.xml",
              ["function-catalog": projectDir.toURI().resolve("specifications/xslt-40/src/function-catalog.xml"),
               "built-in-streamability-expanded":
                 buildDir.toURI().resolve("xslt-40/built-in-streamability-expanded.xml")])
  }

  doLast {
    transform("${buildDir}/xslt-40/src/xslt-expanded0.xml",
              "${projectDir}/specifications/xslt-40/style/merge-element-specs.xsl",
              "${buildDir}/xslt-40/src/xslt-expanded1.xml",
              ["catalog": projectDir.toURI().resolve("specifications/xslt-40/src/element-catalog.xml")])
  }

  doLast {
    transform("${buildDir}/xslt-40/src/xslt-expanded1.xml",
              "${projectDir}/specifications/xslt-40/style/check-internal-links.xsl",
              "${buildDir}/xslt-40/src/xslt-expanded2.xml")
  }

  doLast {
    transform("${buildDir}/xslt-40/src/xslt-expanded1.xml",
              "${projectDir}/specifications/xslt-40/style/table-cleanup.xsl",
              "${buildDir}/xslt-40/src/xslt-expanded.xml")
  }
}

// Find GraphViz dot...if we can
def dot_exec = null
System.getenv("PATH").split(System.getProperty("path.separator")).each { dir ->
  if (dot_exec == null) {
    def fn = new File(dir + "/dot")
    if (fn.exists() && fn.canExecute()) {
      dot_exec = fn.toString()
    } else {
      fn = new File(dir + "/dot.exe")
      if (fn.exists() && fn.canExecute()) {
        dot_exec = fn.toString()
      }
    }
  }
}

task xslt_resources(
  description: "Copy static resources for publication"
) {
  doFirst {
    mkdir "${buildDir}/www/xslt-40"
  }

  doLast {
    copy {
      from "${projectDir}/specifications/xslt-40/src"
      into "${buildDir}/www/xslt-40"
      include "*.rnc"
      include "*.xsd"
      include "*.xsl"
    }
  }

  doLast {
    copy {
      from "${projectDir}/specifications/css"
      into "${buildDir}/www/xslt-40/css"
      include "w3c-base.css"
      include "qtspecs.css"
      include "xslt-40.css"
    }
  }

  doLast {
    copy {
      from "${projectDir}/specifications/js"
      into "${buildDir}/www/xslt-40/js"
      include "xsl-datalist.js"
      include "toc.js"
    }
  }

  doLast {
    // The W3C uses index files called Overview.html, so that's what the
    // build produces. But everyone else, including the GitHub pages that
    // back qt4cg.org, uses index.html. So redirect.
    PrintStream index = new PrintStream(new File("${buildDir}/www/xslt-40/index.html"));
    index.println("<!DOCTYPE html>")
    index.println("<html xmlns='http://www.w3.org/1999/xhtml'>")
    index.println("<head>");
    index.println("<meta http-equiv='refresh' content='0; url=Overview.html' />");
    index.println("</head>");
    index.println("<body>");
    index.println("<p>See <a href='Overview.html'>Overview</a>.</p>");
    index.println("</body>");
    index.println("</html>");
    index.close();
  }
}

task xslt_xml(
  dependsOn: ["xslt_merge_catalog", "saxon_config"],
  description: "Create the XML version of the specification"
) {
  inputs.file "${projectDir}/style/identity.xsl"
  inputs.file xslt_merge_catalog.outputs.getFiles().getSingleFile()
  outputs.file "${buildDir}/www/xslt-40/xslt-40.xml"

  doLast {
    transform("${xslt_merge_catalog.outputs.getFiles().getSingleFile().toString()}",
              "${projectDir}/style/identity.xsl",
              "${xslt_xml.outputs.getFiles().getSingleFile()}")
  }
}

task xslt_html(
  dependsOn: ["xslt_merge_catalog", "xslt_resources", "setup_crossref_indexes", "saxon_config", "xslt_xml"],
  description: "Create the HTML version of the specification"
) {
  outputs.file("${buildDir}/www/xslt-40/Overview.html")
  inputs.dir("${projectDir}/specifications/xslt-40/style")
  inputs.file xslt_xml.outputs.getFiles().getSingleFile()

  doLast {
    transform("${xslt_merge_catalog.outputs.getFiles().getSingleFile().toString()}",
              "${projectDir}/specifications/xslt-40/style/xslt.xsl",
              "${buildDir}/xslt-40/rendered.xml",
              ["baseline": "",
               "use-local-css": "0",
               "back.to.top.link": "1"])
  }

  doLast {
    transform("${buildDir}/xslt-40/rendered.xml",
              "${projectDir}/specifications/xslt-40/style/highlighter.xsl",
              "${buildDir}/xslt-40/highlighted.xml")
  }

  doLast {
    fixupHtml("${buildDir}/xslt-40/highlighted.xml",
              "${buildDir}/www/xslt-40/Overview.html")
  }
}

// ============================================================

task xpath_40(
  group: "Specifications",
  description: "Build the XPath 4.0 specification",
  dependsOn: ["xquery_xpath_html", "xquery_resources"]
) {
  // Just somewhere to hang dependencies
}

task xquery_40(
  group: "Specifications",
  description: "Build the XQuery 4.0 specification",
  dependsOn: ["xquery_xquery_html", "xquery_resources"]
) {
  // Just somewhere to hang dependencies
}

["xpath", "xquery"].each { shortName ->
  def notSpec = ''
  def thisSpec = shortName
  def otherSpec = 'dummy'
  if (shortName == 'xpath') {
    notSpec = 'xquery'
  }
  if (shortName == 'xquery') {
    notSpec = 'xpath'
  }
  def src = "${projectDir}/specifications/xquery-40/src/${shortName}.xml"

  task "xquery_${shortName}_grammar"(
    dependsOn: ["grammar_40", "saxon_config"],
    description: "Build the grammar files for the ${shortName} specification"
  ) {
    inputs.dir "${projectDir}/style"
    inputs.dir "${projectDir}/specifications/xquery-40/src"
    inputs.dir "${projectDir}/specifications/xquery-40/style"
    inputs.dir "${projectDir}/specifications/grammar-40"
    outputs.file "${buildDir}/xquery-40/tokens-${shortName}.xml"
    outputs.file "${buildDir}/xquery-40/temp-${shortName}-grammar.xml"

    doLast {
      transform("${grammar_40.outputs.getFiles().getSingleFile()}",
                "${projectDir}/specifications/grammar-40/parser/strip.xsl",
                "${buildDir}/xquery-40/temp-${shortName}-grammar.xml",
                ["spec1": "${thisSpec}40",
                 "spec2": "${otherSpec}40"])
    }

    doLast {
      transform("${buildDir}/xquery-40/temp-${shortName}-grammar.xml",
                "${projectDir}/style/extract-tokens.xsl",
                "${buildDir}/xquery-40/tokens-with-dups.xml",
                ["spec": shortName,
                 "grammar-file": buildDir.toURI().resolve("xquery-40/temp-${shortName}-grammar.xml")])
    }

    doLast {
      transform("${buildDir}/xquery-40/tokens-with-dups.xml",
                "${projectDir}/style/elim-dup-tokens.xsl",
                "${buildDir}/xquery-40/tokens-${shortName}.xml")
    }
  }

  task "xquery_assemble_${shortName}"(
    dependsOn: ["xquery_${shortName}_grammar", "saxon_config"],
    description: "Assemble the sources for the ${shortName} specification"
  ) {
    inputs.dir "${projectDir}/style"
    inputs.dir "${projectDir}/specifications/xquery-40/src"
    inputs.dir "${projectDir}/specifications/xquery-40/style"
    inputs.dir "${projectDir}/specifications/grammar-40"
    inputs.file "${buildDir}/xquery-40/tokens-${shortName}.xml"
    outputs.file "${buildDir}/xquery-40/src/${shortName}-assembled.xml"

    // The preprocess step is to pull together the source files and omit
    // all the material that doesn't belong to 'this' document.
    doLast {
      transform(src,
                "${projectDir}/specifications/xquery-40/style/preprocess-xquery.xsl",
                "${buildDir}/xquery-40/src/${shortName}-preprocessed.xml",
                ["not-spec": notSpec])
    }

    // The assembly step is used to bring together all of the source
    // files that are incorporated by using entity references, but also
    // to transform grammar-related productions into XML elements that
    // can be readily rendered into a form needed in the HTML document.
    doLast {
      transform("${buildDir}/xquery-40/src/${shortName}-preprocessed.xml",
                "${projectDir}/specifications/xquery-40/style/assemble-xquery.xsl",
                "${buildDir}/xquery-40/src/${shortName}-assembled.xml",
                ["grammar-file": buildDir.toURI().resolve("xquery-40/temp-${shortName}-grammar.xml"),
                 "tokens-file": buildDir.toURI().resolve("xquery-40/tokens-${shortName}.xml"),
                 "spec": "${shortName}40"])
    }

    doLast {
      xmlvalidate("${buildDir}/xquery-40/src/${shortName}-assembled.xml")
    }
  }

  task "xquery_${shortName}_html"(
    dependsOn: ["xquery_assemble_${shortName}", "setup_crossref_indexes", "saxon_config"],
    description: "Create the HTML and XHTML versions of the ${shortName} specification"
  ) {
    inputs.dir "${projectDir}/style"
    inputs.dir "${projectDir}/specifications/xquery-40/src"
    inputs.dir "${projectDir}/specifications/xquery-40/style"
    inputs.file "${buildDir}/xquery-40/src/${shortName}-assembled.xml"
    outputs.file "${buildDir}/www/xquery-40/${shortName}-40.html"

    String style = "${projectDir}/style/xsl-query-2016.xsl"

    // Hack for SVG diagrams
    doFirst {
      copy {
        from "${projectDir}/specifications/xquery-40/images"
        into "${buildDir}/xquery-40/images"
        include "*.svg"
      }
    }

    doLast {
      transform("${buildDir}/xquery-40/src/${shortName}-assembled.xml",
                style,
                "${buildDir}/xquery-40/${shortName}-html.xml",
                ['spec' : shortName,
                 'additional.css': "${shortName}-40.css",
                 'kwFull': 'brief',
                 'kwSort': 'cluster'])
    }

    doLast {
      transform("${buildDir}/xquery-40/${shortName}-html.xml",
                "${projectDir}/style/html-fix.xsl",
                "${buildDir}/www/xquery-40/${shortName}-40.xml")
    }

    doLast {
      fixupHtml("${buildDir}/www/xquery-40/${shortName}-40.xml",
                "${buildDir}/www/xquery-40/${shortName}-40.html")
    }
  }
}

task xquery_resources(
  description: "Copy static resources for publication"
) {
  doFirst {
    mkdir "${buildDir}/www/xquery-40"
  }

  doLast {
    copy {
      from "${projectDir}/specifications/xquery-40/images"
      into "${buildDir}/www/xquery-40"
    }
  }

  doLast {
    copy {
      from "${projectDir}/specifications/css"
      into "${buildDir}/www/xquery-40/css"
      include "w3c-base.css"
      include "qtspecs.css"
      include "xpath-40.css"
      include "xquery-40.css"
    }
  }

  doLast {
    copy {
      from "${projectDir}/specifications/js"
      into "${buildDir}/www/xquery-40/js"
      include "toc.js"
    }
  }

  doLast {
    // The W3C uses index files called Overview.html, so that's what the
    // build produces. But everyone else, including the GitHub pages that
    // back qt4cg.org, uses index.html. So redirect.
    PrintStream index = new PrintStream(new File("${buildDir}/www/xquery-40/index.html"));
    index.println("<!DOCTYPE html>")
    index.println("<html xmlns='http://www.w3.org/1999/xhtml'>")
    index.println("<head>");
    index.println("<title>Choose a specification</title>");
    index.println("</head>");
    index.println("<body>");
    index.println("<p>Choose <a href='xpath-40.html'>XPath</a>");
    index.println("or <a href='xquery-40.html'>XQuery</a></p>");
    index.println("</body>");
    index.println("</html>");
    index.close();
  }
}

// ============================================================

task datamodel_40(
  group: "Specifications",
  description: "Build the XPath Data Model 4.0 specification",
  dependsOn: ["datamodel_xml", "datamodel_html", "datamodel_resources"]
) {
  // Just somewhere to hang dependencies
}

task datamodel_merge(
  dependsOn: ["common_sources", "saxon_config"]
) {
  inputs.dir "${projectDir}/specifications/xpath-datamodel-40/src"
  inputs.dir "${projectDir}/specifications/xpath-datamodel-40/style"
  outputs.files "${buildDir}/expanded/xpath-datamodel-40/xpath-datamodel.xml"

  doLast {
    copy {
      from "${projectDir}/specifications/xpath-datamodel-40/src"
      into "${buildDir}/expanded/xpath-datamodel-40/"
    }
  }

  doLast {
    copy {
      from "${projectDir}/specifications/xpath-datamodel-40/src"
      into "${buildDir}/expanded/xpath-datamodel-40/"
      include "dm-example.xml"
      include "dm-example.xsd"
      filter { line ->
        line.replace("&", "&amp;").replace("<", "&lt;")
      }
      rename { filename ->
        filename + ".cdata"
      }
    }
  }

  doLast {
    transform("${buildDir}/expanded/xpath-datamodel-40/dm-example.xml",
              "${projectDir}/specifications/xpath-datamodel-40/style/dm-example.dm.xsl",
              "${buildDir}/expanded/xpath-datamodel-40/dm-example.dm.xml")
  }

  doLast {
    transform("${buildDir}/expanded/xpath-datamodel-40/dm-example.dm.xml",
              "${projectDir}/specifications/xpath-datamodel-40/style/dm-example.tbl.xsl",
              "${buildDir}/expanded/xpath-datamodel-40/dm-example.tbl.xml")
              
  }

  doLast {
    xmlvalidate(datamodel_merge.outputs.getFiles().getSingleFile().toString())
  }
}

task datamodel_xml(
  group: "Spec XML",
  dependsOn: ["datamodel_merge", "saxon_config"],
  description: "Create the XML version of the specification"
) {
  inputs.file datamodel_merge.outputs.getFiles().getSingleFile()
  inputs.dir "${projectDir}/specifications/xpath-datamodel-40/style"
  inputs.file "${projectDir}/style/identity.xsl"
  outputs.file "${buildDir}/www/xpath-datamodel-40/xpath-datamodel-40.xml"

  doLast {
    transform(datamodel_merge.outputs.getFiles().getSingleFile().toString(),
              "${projectDir}/style/identity.xsl",
              "${datamodel_xml.outputs.getFiles().getSingleFile()}")
  }
}

task datamodel_html(
  group: "Spec HTML",
  dependsOn: ["datamodel_xml", "setup_crossref_indexes", "saxon_config"],
  description: "Create the HTML and XHTML versions of the specification"
) {
  inputs.dir "${projectDir}/style"
  inputs.files fileTree(dir: buildDir, include: "*.svg")
  inputs.dir "${projectDir}/specifications/xpath-datamodel-40/style"
  inputs.file datamodel_merge.outputs.getFiles().getSingleFile()
  outputs.file "${buildDir}/www/xpath-datamodel-40/Overview.xml"
  outputs.file "${buildDir}/www/xpath-datamodel-40/Overview.html"

  doLast {
    transform("${datamodel_merge.outputs.getFiles().getSingleFile().toString()}",
              "${projectDir}/specifications/xpath-datamodel-40/style/data-model.xsl",
              "${buildDir}/www/xpath-datamodel-40/Overview.xml")
  }

  doLast {
    fixupHtml("${buildDir}/www/xpath-datamodel-40/Overview.xml",
              "${buildDir}/www/xpath-datamodel-40/Overview.html")
  }
}

task datamodel_resources(
  description: "Copy static resources for publication"
) {
  doFirst {
    mkdir "${buildDir}/www/xpath-datamodel-40"
  }

  doLast {
    copy {
      from "${projectDir}/specifications/xpath-datamodel-40/src"
      into "${buildDir}/www/xpath-datamodel-40"
      include "dm-example.xml"
      include "dm-example.xsd"
      include "xpath-datatypes.xsd"
    }
  }

  doLast {
    copy {
      from "${buildDir}/type-hierarchy"
      into "${buildDir}/www/xpath-datamodel-40"
    }
  }

  doLast {
    copy {
      from "${projectDir}/specifications/css"
      into "${buildDir}/www/xpath-datamodel-40/css"
      include "w3c-base.css"
      include "qtspecs.css"
      include "xpath-datamodel-40.css"
    }
  }

  doLast {
    copy {
      from "${projectDir}/specifications/js"
      into "${buildDir}/www/xpath-datamodel-40/js"
      include "toc.js"
    }
  }

  doLast {
    // The W3C uses index files called Overview.html, so that's what the
    // build produces. But everyone else, including the GitHub pages that
    // back qt4cg.org, uses index.html. So redirect.
    PrintStream index = new PrintStream(new File("${buildDir}/www/xpath-datamodel-40/index.html"));
    index.println("<!DOCTYPE html>")
    index.println("<html xmlns='http://www.w3.org/1999/xhtml'>")
    index.println("<head>");
    index.println("<meta http-equiv='refresh' content='0; url=Overview.html' />");
    index.println("</head>");
    index.println("<body>");
    index.println("<p>See <a href='Overview.html'>Overview</a>.</p>");
    index.println("</body>");
    index.println("</html>");
    index.close();
  }
}

// ============================================================

String serialization_src =
  "${projectDir}/specifications/xslt-xquery-serialization-40/src/xslt-xquery-serialization.xml"

task serialization_40(
  group: "Specifications",
  description: "Build the XSLT/XQuery Serialization 4.0 specification",
  dependsOn: ["serialization_xml", "serialization_html",
              "serialization_resources"]
) {
  // Just somewhere to hang dependencies
}

task serialization_xml(
  group: "Spec XML",
  description: "Create the XML version of the specification",
  dependsOn: ["saxon_config"]
) {
  inputs.dir "${projectDir}/specifications/xslt-xquery-serialization-40/src"
  inputs.dir "${projectDir}/specifications/xslt-xquery-serialization-40/style"
  inputs.file "${projectDir}/style/identity.xsl"
  outputs.file "${buildDir}/www/xslt-xquery-serialization-40/xslt-xquery-serialization-40.xml"

  doLast {
    xmlvalidate(serialization_src)
  }

  doLast {
    transform(serialization_src,
              "${projectDir}/style/identity.xsl",
              "${serialization_xml.outputs.getFiles().getSingleFile()}")
  }
}

task serialization_html(
  group: "Spec HTML",
  dependsOn: ["serialization_xml", "setup_crossref_indexes", "saxon_config"],
  description: "Create the HTML and XHTML versions of the specification"
) {
  inputs.dir "${projectDir}/style"
  inputs.dir "${projectDir}/specifications/xslt-xquery-serialization-40/style"
  inputs.file serialization_src
  outputs.file "${buildDir}/www/xslt-xquery-serialization-40/Overview.xml"
  outputs.file "${buildDir}/www/xslt-xquery-serialization-40/Overview.html"

  doLast {
    transform(serialization_src,
              "${projectDir}/specifications/xslt-xquery-serialization-40/style/serialization.xsl",
              "${buildDir}/www/xslt-xquery-serialization-40/Overview.xml")
  }

  doLast {
    fixupHtml("${buildDir}/www/xslt-xquery-serialization-40/Overview.xml",
              "${buildDir}/www/xslt-xquery-serialization-40/Overview.html")
  }
}

task serialization_resources(
  description: "Copy static resources for publication"
) {
  doFirst {
    mkdir "${buildDir}/www/xslt-xquery-serialization-40"
  }

  doLast {
    copy {
      from "${projectDir}/specifications/xslt-xquery-serialization-40/src"
      into "${buildDir}/www/xslt-xquery-serialization-40"
      include "schema-for-serialization-parameters.xsd"
    }
  }

  doLast {
    copy {
      from "${projectDir}/specifications/css"
      into "${buildDir}/www/xslt-xquery-serialization-40/css"
      include "w3c-base.css"
      include "qtspecs.css"
      include "xslt-xquery-serialization-40.css"
    }
  }

  doLast {
    copy {
      from "${projectDir}/specifications/js"
      into "${buildDir}/www/xslt-xquery-serialization-40/js"
      include "toc.js"
    }
  }

  doLast {
    // The W3C uses index files called Overview.html, so that's what the
    // build produces. But everyone else, including the GitHub pages that
    // back qt4cg.org, uses index.html. So redirect.
    PrintStream index = new PrintStream(new File("${buildDir}/www/xslt-xquery-serialization-40/index.html"));
    index.println("<!DOCTYPE html>")
    index.println("<html xmlns='http://www.w3.org/1999/xhtml'>")
    index.println("<head>");
    index.println("<meta http-equiv='refresh' content='0; url=Overview.html' />");
    index.println("</head>");
    index.println("<body>");
    index.println("<p>See <a href='Overview.html'>Overview</a>.</p>");
    index.println("</body>");
    index.println("</html>");
    index.close();
  }
}

// ============================================================

task setup_crossref_indexes(
  dependsOn: ["etc_copy", "etc_DM40", "etc_FO40", "etc_XT40", "etc_SE40",
              "etc_XP40", "etc_XQ40", 
              "etc_BIN40", "etc_FILE40"]
) {
  doLast {
    transform("${projectDir}/style/build-database.xsl",
              "${projectDir}/style/build-database.xsl",
              "${buildDir}/etc/database.xml",
              ["-it"], [:])
  }
}

task etc_copy(type: Copy) {
  into "${buildDir}/etc"
  from "${projectDir}/etc"
}

task etc_DM40(
  dependsOn: ["datamodel_merge", "saxon_config"],
  description: "Build the etc/DM40.xml index"
) {
  inputs.file "${projectDir}/style/extract.xsl"
  outputs.file "${buildDir}/etc/DM40.xml"
  
  doLast{
    transform(datamodel_merge.outputs.getFiles().getSingleFile().toString(),
              "${projectDir}/style/extract.xsl",
              etc_DM40.outputs.getFiles().getSingleFile().toString(),
              ["specdoc": "DM",
               "uri": "https://qt4cg.org/specifications/xpath-datamodel-40/"])
  }
}

task etc_FO40(
  dependsOn: ["fo_merge", "saxon_config"],
  description: "Build the etc/FO40.xml index"
) {
  inputs.file "${projectDir}/style/extract.xsl"
  outputs.file "${buildDir}/etc/FO40.xml"

  doLast {
    transform(fo_merge.outputs.getFiles().getSingleFile().toString(),
              "${projectDir}/style/extract.xsl",
              etc_FO40.outputs.getFiles().getSingleFile().toString(),
              ["specdoc": "FO",
               "uri": "https://qt4cg.org/specifications/xpath-functions-40/"])
  }
}

task etc_XP40(
  dependsOn: ["xquery_assemble_xpath", "saxon_config"],
  description: "Build the etc/XP40.xml index"
) {
  inputs.file "${projectDir}/style/extract.xsl"
  outputs.file "${buildDir}/etc/XP40.xml"

  doLast {
    transform(xquery_assemble_xpath.outputs.getFiles().getSingleFile().toString(),
              "${projectDir}/style/extract.xsl",
              etc_XP40.outputs.getFiles().getSingleFile().toString(),
              ["specdoc": "XP",
               "uri": "https://qt4cg.org/specifications/xquery-40/xpath-40.html"])
  }
}

task etc_XQ40(
  dependsOn: ["xquery_assemble_xquery", "saxon_config"],
  description: "Build the etc/XQ40.xml index"
) {
  inputs.file "${projectDir}/style/extract.xsl"
  outputs.file "${buildDir}/etc/XQ40.xml"

  doLast {
    transform(xquery_assemble_xquery.outputs.getFiles().getSingleFile().toString(),
              "${projectDir}/style/extract.xsl",
              etc_XQ40.outputs.getFiles().getSingleFile().toString(),
              ["specdoc": "XQ",
               "uri": "https://qt4cg.org/specifications/xquery-40/xquery-40.html"])
  }
}

task etc_XT40(
  dependsOn: ["xslt_merge_catalog", "saxon_config"],
  description: "Build the etc/XT40.xml index"
) {
  inputs.file "${projectDir}/style/extract.xsl"
  inputs.file xslt_merge_catalog.outputs.getFiles().getSingleFile()
  outputs.file "${buildDir}/etc/XT40.xml"

  doLast {
    transform(xslt_merge_catalog.outputs.getFiles().getSingleFile().toString(),
              "${projectDir}/style/extract.xsl",
              etc_XT40.outputs.getFiles().getSingleFile().toString(),
              ["specdoc": "XQXP",
               "uri": "https://qt4cg.org/specifications/xslt-40/"])
  }
}

task etc_SE40(
  description: "Build the etc/SE40.xml index",
  dependsOn: ["saxon_config"]
) {
  inputs.file "${projectDir}/style/extract.xsl"
  outputs.file "${buildDir}/etc/SE40.xml"

  doLast {
    transform(serialization_src,
              "${projectDir}/style/extract.xsl",
              etc_SE40.outputs.getFiles().getSingleFile().toString(),
              ["specdoc": "SE",
               "uri": "https://qt4cg.org/specifications/xslt-xquery-serialization-40/"])
  }
}

// ============================================================

public void transform(String input, String stylesheet, String output) {
  transform(input, stylesheet, output, null, null)
}

public void transform(String input, String stylesheet, String output, Map params) {
  transform(input, stylesheet, output, null, params)
}

public void transform(String input, String stylesheet, String output,
                      List<String> options, Map params) {
  def jargs = [
    "-s:${input}",
    "-xsl:${stylesheet}",
    "-o:${output}",
    "-config:${buildDir}/config.xml"
  ]

  if (options != null) {
    options.each { opt ->
      jargs.add(opt)
    }
  }

  if (params != null) {
    params.keySet().each { name ->
      String value = params.get(name).toString()
      jargs.add("${name}=${value}")
    }
  }

  String prnumber = System.getenv("PR_NUMBER")
  if (prnumber != null) {
    jargs.add("pull-request=${prnumber}")
  }

  String brname = System.getenv("BRANCH_NAME") ?: "master"
  if (brname != 'master') {
    jargs.add("branch-name=${brname}")
  }

  if (pedanticBuild) {
    jargs.add('pedantic=true')
  }

  if (debugTransformations) {
    println("DEBUG: java net.sf.saxon.Transform ${jargs.join(' ')}")
  } else {
    if (!input.startsWith("${buildDir}")) {
      String display = input
      if (display.startsWith("${projectDir}")) {
        display = display.substring("${projectDir}".length()+1)
      }
      println("Transforming ${display}...")
    }
  }

  javaexec {
    classpath = configurations.transform
    mainClass = "net.sf.saxon.Transform"
    args jargs
  }
}

public void fixupHtml(String input, String output) {
  javaexec {
    classpath = configurations.transform
    mainClass = "net.sf.saxon.Query"
    args "-qs:.",
      "-s:${input}",
      "-o:${output}",
      "-config:${buildDir}/config.xml",
      "currentDateTime=${TIMESTAMP}",
      "!method=html", "!version=5", "!indent=yes",
      "!suppress-indentation={http://www.w3.org/1999/xhtml}p {http://www.w3.org/1999/xhtml}pre"
  }
}

public void xmlvalidate(String input) {
  println("Validating ${input}")
  javaexec {
    classpath = configurations.transform
    mainClass = "com.nwalsh.parsers.XJParse"
    args "-v", input
  }
}

// ============================================================

task helloWorld() {
  doLast {
    println("Hello, world.")
  }
}
